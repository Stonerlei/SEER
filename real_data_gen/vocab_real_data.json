{
    "<pad>": 0,
    "<s>": 1,
    "</s>": 2,
    "<unk>": 3,
    "public": 4,
    "static": 5,
    "@NotNull": 6,
    "GameMap": 7,
    "loadGameMap(@NotNull": 8,
    "Path": 9,
    "mapFile)": 10,
    "throws": 11,
    "IOException": 12,
    "{": 13,
    "final": 14,
    "var": 15,
    "fileContent": 16,
    "=": 17,
    "Files.readString(mapFile);": 18,
    "return": 19,
    "GameMap.parse(fileContent);": 20,
    "}": 21,
    "void": 22,
    "testLoadFromFile()": 23,
    "mapFile": 24,
    "tempDir.resolve(\"tempMap.map\");": 25,
    "String": 26,
    "rectangularMap": 27,
    "\"\"\"": 28,
    "233": 29,
    "######": 30,
    "#A..@#": 31,
    "#...@#": 32,
    "#....#": 33,
    "#.a..#": 34,
    "#..a.#": 35,
    "\"\"\";": 36,
    "Files.writeString(mapFile,": 37,
    "rectangularMap);": 38,
    "gameMap": 39,
    "SokobanGameFactory.loadGameMap(mapFile);": 40,
    "Position": 41,
    "of(int": 42,
    "x,": 43,
    "int": 44,
    "y)": 45,
    "new": 46,
    "Position(x,": 47,
    "y);": 48,
    "Left(int": 49,
    "initiator)": 50,
    "super(initiator);": 51,
    "moveLeft()": 52,
    "Position.of(232,": 53,
    "233),": 54,
    "Move.Left(-1).nextPosition(pos)": 55,
    ");": 56,
    "testShouldStopWhenWin()": 57,
    "gameState": 58,
    "mock(GameState.class);": 59,
    "when(gameState.isWin()).thenReturn(true);": 60,
    "game": 61,
    "SokobanGameForTesting(gameState);": 62,
    "GameState(@NotNull": 63,
    "map)": 64,
    "//": 65,
    "TODO": 66,
    "this.map": 67,
    "map;": 68,
    "this.initialAllPlayerPosition": 69,
    "this.getCurrentPlayerPosition(this.map.playerPositionMap);": 70,
    "this.initialGameBoard": 71,
    "this.getCurrentGameBoard(this.map.gameBoardMap);": 72,
    "this.map.undoLimit": 73,
    "this.getUndoQuota().get();": 74,
    "Down(int": 75,
    "testMove()": 76,
    "mapText": 77,
    "#a...#": 78,
    "testMap": 79,
    "TestHelper.parseGameMap(mapText);": 80,
    "spy(new": 81,
    "GameState(testMap));": 82,
    "result": 83,
    "game.feedActionForProcessing(new": 84,
    "Move.Down(0));": 85,
    "verify(gameState,": 86,
    "times(1)).move(any(),": 87,
    "any());": 88,
    "testPushBox()": 89,
    "times(2)).move(any(),": 90,
    "times(1)).checkpoint();": 91,
    "testHitWall()": 92,
    "##...#": 93,
    "never()).move(any(),": 94,
    "@Nullable": 95,
    "Entity": 96,
    "getEntity(@NotNull": 97,
    "position)": 98,
    "this.map.getEntity(position);": 99,
    "/**": 100,
    "*": 101,
    "Get": 102,
    "all": 103,
    "box": 104,
    "destination": 105,
    "positions": 106,
    "as": 107,
    "a": 108,
    "set": 109,
    "in": 110,
    "the": 111,
    "map.": 112,
    "This": 113,
    "should": 114,
    "be": 115,
    "same": 116,
    "that": 117,
    "{@link": 118,
    "GameMap}": 119,
    "testBoxParsing()": 120,
    "TestHelper.parseGameMap(rectangularMap);": 121,
    "assertInstanceOf(Box.class,": 122,
    "gameMap.getEntity(Position.of(2,": 123,
    "4)));": 124,
    "testPlayerParsing()": 125,
    "player": 126,
    "assertInstanceOf(Player.class,": 127,
    "gameMap.getEntity(Position.of(1,": 128,
    "1)));": 129,
    "testHeightForRectangularMap()": 130,
    "testWidthForRectangularMap()": 131,
    "testGetDestinations()": 132,
    "testWallParsing()": 133,
    "testGetEntity()": 134,
    "entity": 135,
    "gameMap.getEntity(Position.of(0,": 136,
    "0));": 137,
    "private": 138,
    "nonRectangularMap": 139,
    "#...@###": 140,
    "#a....@##": 141,
    "#.a.....#": 142,
    "#..a.####": 143,
    "testEmptyCellParsing()": 144,
    "TerminalInputEngine(InputStream": 145,
    "terminalStream)": 146,
    "this.terminalScanner": 147,
    "Scanner(terminalStream);": 148,
    "Action": 149,
    "fetchAction()": 150,
    "is": 151,
    "an": 152,
    "example": 153,
    "showing": 154,
    "how": 155,
    "to": 156,
    "read": 157,
    "line": 158,
    "from": 159,
    "Scanner": 160,
    "class.": 161,
    "Feel": 162,
    "free": 163,
    "change": 164,
    "it": 165,
    "if": 166,
    "you": 167,
    "do": 168,
    "not": 169,
    "like": 170,
    "it.": 171,
    "inputLine": 172,
    "terminalScanner.nextLine().toLowerCase();": 173,
    "switch": 174,
    "(inputLine)": 175,
    "case": 176,
    "\"exit\":": 177,
    "Exit(0)": 178,
    ";": 179,
    "\"u\":": 180,
    "Undo(0);": 181,
    "\"w\":": 182,
    "Move.Up(0);": 183,
    "\"a\":": 184,
    "Move.Left(0);": 185,
    "\"s\":": 186,
    "Move.Down(0);": 187,
    "\"d\":": 188,
    "Move.Right(0);": 189,
    "\"h\":": 190,
    "Move.Left(1);": 191,
    "\"j\":": 192,
    "Move.Down(1);": 193,
    "\"k\":": 194,
    "Move.Up(1);": 195,
    "\"l\":": 196,
    "Move.Right(1);": 197,
    "default:": 198,
    "InvalidInput(0,": 199,
    "\"Invalid": 200,
    "Input\");": 201,
    "testExit()": 202,
    "inputStream": 203,
    "fixValueStream(\"exit\");": 204,
    "inputEngine": 205,
    "TerminalInputEngine(inputStream);": 206,
    "action": 207,
    "inputEngine.fetchAction();": 208,
    "move(Position": 209,
    "from,": 210,
    "to)": 211,
    "newPosition": 212,
    "Position(to.x(),to.y());": 213,
    "currentPosition": 214,
    "Position(from.x(),from.y());": 215,
    "(this.map.gameBoardMap.get(currentPosition)": 216,
    "instanceof": 217,
    "Box)": 218,
    "currentGameBoard": 219,
    "currentPlayerPosition": 220,
    "else": 221,
    "//id:position": 222,
    "this.map.playerPositionMap.replace(((Player)": 223,
    "this.map.gameBoardMap.get(currentPosition)).getId(),newPosition);": 224,
    "//all": 225,
    "position": 226,
    "of": 227,
    "this.map.putEntity(newPosition,this.map.getEntity(currentPosition));": 228,
    "this.map.putEntity(currentPosition,new": 229,
    "Empty());": 230,
    "Record": 231,
    "checkpoint": 232,
    "state,": 233,
    "including:": 234,
    "<li>All": 235,
    "current": 236,
    "entities": 237,
    "map.</li>": 238,
    "<li>Current": 239,
    "undo": 240,
    "quota</li>": 241,
    "<p>": 242,
    "Checkpoint": 243,
    "used": 244,
    "GameState#undo()}": 245,
    "testWin()": 246,
    "TestHelper.parseGameMap(\"\"\"": 247,
    "#A.a@#": 248,
    "#..a@#": 249,
    "\"\"\");": 250,
    "GameState(testMap);": 251,
    "gameState.move(Position.of(3,": 252,
    "1),": 253,
    "Position.of(4,": 254,
    "1));": 255,
    "2),": 256,
    "2));": 257,
    "GameState(TestHelper.parseGameMap(\"\"\"": 258,
    "));": 259,
    "gameState.move(Position.of(1,": 260,
    "Position.of(2,": 261,
    "#.Aa@#": 262,
    "gameState.move(Position.of(2,": 263,
    "Position.of(3,": 264,
    "testGetUndoLimit()": 265,
    "testAllPlayerIds()": 266,
    "#APp@#": 267,
    "#xXa@@#": 268,
    "checkpoint()": 269,
    "this.playerCheckPoint.add(this.currentPlayerPosition);": 270,
    "this.checkPoint.add(this.currentGameBoard);": 271,
    "undo()": 272,
    "(this.map.undoLimit": 273,
    ">0": 274,
    "||": 275,
    "==": 276,
    "-1)": 277,
    "(this.checkPoint.size()": 278,
    "0)": 279,
    "this.map.playerPositionMap": 280,
    "this.getCurrentPlayerPosition(this.initialAllPlayerPosition);": 281,
    "this.map.gameBoardMap": 282,
    "this.getCurrentGameBoard(this.initialGameBoard);": 283,
    "!=": 284,
    "-=1;": 285,
    "this.getCurrentGameBoard(this.checkPoint.get(checkPoint.size()-1));": 286,
    "this.getCurrentPlayerPosition(this.playerCheckPoint.get(this.playerCheckPoint.size()-1));": 287,
    "this.checkPoint.remove(checkPoint.size()-1);": 288,
    "this.playerCheckPoint.remove(this.playerCheckPoint.size()-1);": 289,
    "maximum": 290,
    "width": 291,
    "testUndoWhenThereIsCheckpoint()": 292,
    "gameState.checkpoint();": 293,
    "gameState.undo();": 294,
    "InvalidInput(int": 295,
    "initiator,": 296,
    "message)": 297,
    "this.message": 298,
    "message;": 299,
    "Exit(int": 300,
    "TerminalSokobanGame(GameState": 301,
    "gameState,": 302,
    "TerminalInputEngine": 303,
    "inputEngine,": 304,
    "TerminalRenderingEngine": 305,
    "renderingEngine)": 306,
    "super(gameState);": 307,
    "this.inputEngine": 308,
    "inputEngine;": 309,
    "this.renderingEngine": 310,
    "renderingEngine;": 311,
    "Check": 312,
    "number": 313,
    "players": 314,
    "(gameState.getAllPlayerPositions().size()>2)": 315,
    "throw": 316,
    "NotImplementedException();": 317,
    "run()": 318,
    "this.renderingEngine.message(\"Sokoban": 319,
    "ready.\");": 320,
    "boolean": 321,
    "exit": 322,
    "false;": 323,
    "while": 324,
    "(!(this.shouldStop()))": 325,
    "this.renderingEngine.render(this.state);": 326,
    "this.renderingEngine.message(\"\");": 327,
    "undolimit": 328,
    "this.state.getUndoQuota().toString();": 329,
    "undolimit.substring(9,undolimit.length()-1);": 330,
    "this.renderingEngine.message(\"Undo": 331,
    "Quota:": 332,
    "\"": 333,
    "+": 334,
    "undolimit);": 335,
    "this.renderingEngine.message(\">>>\");": 336,
    "tempAction": 337,
    "this.inputEngine.fetchAction();": 338,
    "ActionResult": 339,
    "tempActionResult": 340,
    "this.processAction(tempAction);": 341,
    "(tempActionResult": 342,
    "ActionResult.Failed)": 343,
    "this.renderingEngine.message(((ActionResult.Failed)": 344,
    "tempActionResult).getReason());": 345,
    "(tempAction": 346,
    "Exit)": 347,
    "true;": 348,
    "this.renderingEngine.message(\"Game": 349,
    "exits.\");": 350,
    "(!exit)": 351,
    "this.renderingEngine.message(\"You": 352,
    "win.\");": 353,
    "testGameLoop()": 354,
    "mock(TerminalInputEngine.class);": 355,
    "renderingEngine": 356,
    "mock(TerminalRenderingEngine.class);": 357,
    "when(gameState.isWin()).thenReturn(false);": 358,
    "when(inputEngine.fetchAction())": 359,
    ".thenReturn(new": 360,
    "\"\"))": 361,
    "Exit(0));": 362,
    "TerminalSokobanGame(gameState,": 363,
    "renderingEngine);": 364,
    "game.run();": 365,
    "inOrder": 366,
    "inOrder(inputEngine,": 367,
    "Before": 368,
    "loop": 369,
    "inOrder.verify(renderingEngine).render(eq(gameState));": 370,
    "First": 371,
    "round": 372,
    "inOrder.verify(inputEngine).fetchAction();": 373,
    "Second": 374,
    "atLeastOnce()).getUndoQuota();": 375,
    "atLeast(0)).isWin();": 376,
    "verify(renderingEngine,": 377,
    "atLeastOnce()).message(any());": 378,
    "testTwoPlayers()": 379,
    "when(gameState.getAllPlayerPositions()).thenReturn(new": 380,
    "HashSet<>(Arrays.asList(Position.of(1,": 381,
    "Position.of(1,": 382,
    "2))));": 383,
    "TerminalRenderingEngine(PrintStream": 384,
    "outputSteam)": 385,
    "this.outputSteam": 386,
    "outputSteam;": 387,
    "message(@NotNull": 388,
    "content)": 389,
    "this.outputSteam.println(content);": 390,
    "Hint:": 391,
    "System.out": 392,
    "also": 393,
    "PrintStream.": 394,
    "testMessage()": 395,
    "stream": 396,
    "CapturingStream();": 397,
    "randomString": 398,
    "String.valueOf(this.hashCode());": 399,
    "TerminalRenderingEngine(stream);": 400,
    "renderingEngine.message(randomString);": 401,
    "testRender()": 402,
    "GameState(TestHelper.parseGameMap(testMap));": 403,
    "renderingEngine.render(gameState);": 404,
    "renderedContent": 405,
    "stream.getContent();": 406,
    "lines": 407,
    "renderedContent.lines().toList();": 408,
    "class": 409,
    "CapturingStream": 410,
    "extends": 411,
    "PrintStream": 412,
    "CapturingStream()": 413,
    "super(new": 414,
    "ByteArrayOutputStream());": 415,
    "getContent()": 416,
    "((ByteArrayOutputStream)": 417,
    "this.out).toString(StandardCharsets.UTF_8);": 418,
    "Up(int": 419,
    "moveUp()": 420,
    "Position.of(233,": 421,
    "232),": 422,
    "Move.Up(-1).nextPosition(pos)": 423,
    "moveDown()": 424,
    "234),": 425,
    "Move.Down(-1).nextPosition(pos)": 426,
    "Right(int": 427,
    "moveRight()": 428,
    "Position.of(234,": 429,
    "Move.Right(-1).nextPosition(pos)": 430,
    "Undo(int": 431,
    "testExceedingUndoQuota()": 432,
    "when(gameState.getPlayerPositionById(anyInt())).thenReturn(Position.of(0,": 433,
    "when(gameState.getUndoQuota()).thenReturn(Optional.of(0));": 434,
    "Undo(0));": 435,
    "testUndoUnlimited()": 436,
    "when(gameState.getUndoQuota()).thenReturn(Optional.empty());": 437,
    "for": 438,
    "(int": 439,
    "i": 440,
    "0;": 441,
    "<": 442,
    "10000;": 443,
    "i++)": 444,
    "times(10000)).undo();": 445,
    "testPushOtherPlayerBox()": 446,
    "#AB.@#": 447,
    "#b.a.#": 448,
    "#@...#": 449,
    "testMoveNonExistingPlayer()": 450,
    "Move.Down(23));": 451,
    "testCheckpointWhenNeed()": 452,
    ")));": 453,
    "Move.Right(0));": 454,
    "testPushBoxAgainstWall()": 455,
    "protected": 456,
    "processAction(@NotNull": 457,
    "action)": 458,
    "this.action": 459,
    "action;": 460,
    "switch(action)": 461,
    "Exit": 462,
    "e": 463,
    "->": 464,
    "ActionResult.Success(e);": 465,
    "InvalidInput": 466,
    "m": 467,
    "ActionResult.Failed(m,\"Invalid": 468,
    "Input.\");": 469,
    "Undo": 470,
    "u": 471,
    "(state.getUndoQuota().get()": 472,
    ">": 473,
    "0": 474,
    "state.getUndoQuota().get()": 475,
    "-1": 476,
    ")": 477,
    "this.state.undo();": 478,
    "ActionResult.Success(u);": 479,
    "ActionResult.Failed(u,\"You": 480,
    "have": 481,
    "run": 482,
    "out": 483,
    "your": 484,
    "quota.\");": 485,
    "Move": 486,
    "this.state.map.playerPositionMap.get(m.getInitiator());": 487,
    "nextPosition": 488,
    "m.nextPosition(currentPosition);": 489,
    "temp": 490,
    "this.state.map.gameBoardMap.get(nextPosition);": 491,
    "(": 492,
    "Wall)": 493,
    "ActionResult.Failed(m,\"You": 494,
    "hit": 495,
    "wall.\");": 496,
    "(temp": 497,
    "Player)": 498,
    "another": 499,
    "player.\");": 500,
    "(((Box)": 501,
    "temp).getPlayerId()": 502,
    "m.getInitiator())": 503,
    "cannot": 504,
    "move": 505,
    "other": 506,
    "players'": 507,
    "boxes.\");": 508,
    "nextX=": 509,
    "nextPosition.x();": 510,
    "nextY": 511,
    "nextPosition.y();": 512,
    "boxNextPosition": 513,
    "null;": 514,
    "(m)": 515,
    "Move.Left": 516,
    "left": 517,
    "Position(nextX-1,nextY);": 518,
    "(!": 519,
    "(this.state.map.gameBoardMap.get(boxNextPosition)instanceof": 520,
    "Empty))": 521,
    "ActionResult.Failed(m,\"Failed": 522,
    "push": 523,
    "box.\");": 524,
    "break;": 525,
    "Move.Right": 526,
    "right": 527,
    "Position(nextX+1,nextY);": 528,
    "Move.Down": 529,
    "down": 530,
    "Position(nextX,nextY+1);": 531,
    "Move.Up": 532,
    "up": 533,
    "Position(nextX,nextY-1);": 534,
    "default": 535,
    "IllegalArgumentException();": 536,
    "state.move(nextPosition,boxNextPosition);": 537,
    "state.move(currentPosition,nextPosition);": 538,
    "state.checkpoint();": 539,
    "ActionResult.Success(m);": 540,
    "testCheckpointWhenNotNeed()": 541,
    "never()).checkpoint();": 542,
    "SokobanGameForTesting": 543,
    "AbstractSokobanGame": 544,
    "SokobanGameForTesting(GameState": 545,
    "gameState)": 546,
    "@Override": 547,
    "feedActionForProcessing(Action": 548,
    "processAction(action);": 549,
    "testHitAnotherPlayer()": 550,
    "#B...#": 551,
    "#ab.@#": 552,
    "testUndoWithinQuota()": 553,
    "when(gameState.getUndoQuota()).thenReturn(Optional.of(1));": 554,
    "times(1)).undo();": 555,
    "testInvalidInput()": 556,
    "SokobanGameForTesting(mock(GameState.class));": 557,
    "message": 558,
    "String.valueOf(new": 559,
    "Random().nextLong());": 560,
    "InvalidInput(-1,": 561,
    "message);": 562,
    "game.feedActionForProcessing(action);": 563,
    "testUndoLimitParsing()": 564,
    "testWidthForNonRectangularMap()": 565,
    "TestHelper.parseGameMap(nonRectangularMap);": 566,
    "Set<Integer>": 567,
    "getPlayerIds()": 568,
    "this.playerId;": 569,
    "testTwoPlayersMap()": 570,
    "twoPlayersMap": 571,
    "#..B@#": 572,
    "#..b.#": 573,
    "TestHelper.parseGameMap(twoPlayersMap);": 574,
    "playerIds": 575,
    "gameMap.getPlayerIds();": 576,
    "expectedIds": 577,
    "HashSet<Integer>();": 578,
    "expectedIds.add(0);": 579,
    "expectedIds.add(1);": 580,
    "testMapWithoutPlayer()": 581,
    "invalidMap": 582,
    "###": 583,
    "#.#": 584,
    "@Tag(TestKind.HIDDEN)": 585,
    "@Test": 586,
    "testUnmatchedPlayersAndBoxes()": 587,
    "#a.b@#": 588,
    "#.a.@#": 589,
    "assertThrowsExactly(IllegalArgumentException.class,": 590,
    "()": 591,
    "TestHelper.parseGameMap(invalidMap));": 592,
    "testManyPlayersMap()": 593,
    "manyPlayersMap": 594,
    "#A.P@@#": 595,
    "#vCB@@#": 596,
    "#.cpD@#": 597,
    "#Ga.d@#": 598,
    "#g.bV@#": 599,
    "TestHelper.parseGameMap(manyPlayersMap);": 600,
    "HashSet<>(Arrays.asList(": 601,
    "0,": 602,
    "'P'": 603,
    "-": 604,
    "'A',": 605,
    "'C'": 606,
    "'B'": 607,
    "'D'": 608,
    "'G'": 609,
    "'V'": 610,
    "'A'": 611,
    "testHeightForNonRectangularMap()": 612,
    "testDuplicatedPlayers()": 613,
    "#..A@#": 614,
    "testParseMapWithoutUndoLimit()": 615,
    "String.join(\"n\",": 616,
    "rectangularMap.lines().skip(1).toList());": 617,
    "testInsufficientDestinations()": 618,
    "GameMap(int": 619,
    "maxWidth,": 620,
    "maxHeight,": 621,
    "Set<Position>": 622,
    "destinations,": 623,
    "undoLimit)": 624,
    "this.maxWidth": 625,
    "maxWidth;": 626,
    "this.maxHeight": 627,
    "maxHeight;": 628,
    "this.destinations": 629,
    "destinations;": 630,
    "this.undoLimit": 631,
    "undoLimit;": 632,
    "Parses": 633,
    "map": 634,
    "string": 635,
    "representation.": 636,
    "The": 637,
    "first": 638,
    "limit.": 639,
    "Starting": 640,
    "second": 641,
    "line,": 642,
    "represented": 643,
    "follows,": 644,
    "<li>#": 645,
    "represents": 646,
    "Wall}</li>": 647,
    "<li>@": 648,
    "destination.</li>": 649,
    "<li>Any": 650,
    "upper-case": 651,
    "letter": 652,
    "Player}.</li>": 653,
    "<li>": 654,
    "Any": 655,
    "lower-case": 656,
    "Box}": 657,
    "only": 658,
    "movable": 659,
    "by": 660,
    "with": 661,
    "corresponding": 662,
    "letter.": 663,
    "For": 664,
    "instance,": 665,
    "\"a\"": 666,
    "can": 667,
    "moved": 668,
    "\"A\"": 669,
    "and": 670,
    "\"B\".": 671,
    "</li>": 672,
    "<li>.": 673,
    "Empty}": 674,
    "map,": 675,
    "meaning": 676,
    "there": 677,
    "no": 678,
    "or": 679,
    "currently": 680,
    "at": 681,
    "this": 682,
    "position.</li>": 683,
    "Notes:": 684,
    "There": 685,
    "most": 686,
    "26": 687,
    "players.": 688,
    "All": 689,
    "implementations": 690,
    "classes": 691,
    "hk.ust.comp3021.game": 692,
    "package": 693,
    "support": 694,
    "simplicity,": 695,
    "we": 696,
    "assume": 697,
    "given": 698,
    "bounded": 699,
    "closed": 700,
    "boundary.": 701,
    "need": 702,
    "check": 703,
    "point.": 704,
    "Example": 705,
    "maps": 706,
    "found": 707,
    "\"src/main/resources\".": 708,
    "@param": 709,
    "@return": 710,
    "parsed": 711,
    "object.": 712,
    "@throws": 713,
    "IllegalArgumentException": 714,
    "limit": 715,
    "negative": 716,
    "but": 717,
    "-1.": 718,
    "are": 719,
    "multiple": 720,
    "letters,": 721,
    "i.e.,": 722,
    "one": 723,
    "exist": 724,
    "position.": 725,
    "boxes": 726,
    "equal": 727,
    "destinations.": 728,
    "whose": 729,
    "Box#getPlayerId()}": 730,
    "testSuperLargeMap()": 731,
    "try": 732,
    "GameMap(Integer.MAX_VALUE,": 733,
    "Integer.MAX_VALUE,": 734,
    "Collections.emptySet(),": 735,
    "0);": 736,
    "catch": 737,
    "(OutOfMemoryError": 738,
    "e)": 739,
    "RuntimeException(e);": 740,
    "});": 741,
    "testInvalidUndoLimit()": 742,
    "-233": 743,
    "testEmptyMap()": 744,
    "\"\";": 745,
    "testMove(String": 746,
    "input,": 747,
    "name,": 748,
    "playerId)": 749,
    "inputStreamU": 750,
    "fixValueStream(input.toUpperCase());": 751,
    "inputStreamL": 752,
    "fixValueStream(input.toLowerCase());": 753,
    "inputEngineU": 754,
    "TerminalInputEngine(inputStreamU);": 755,
    "inputEngineL": 756,
    "TerminalInputEngine(inputStreamL);": 757,
    "actionU": 758,
    "inputEngineU.fetchAction();": 759,
    "actionL": 760,
    "inputEngineL.fetchAction();": 761,
    "InputStream": 762,
    "fixValueStream(String": 763,
    "bytes": 764,
    "content.getBytes(StandardCharsets.UTF_8);": 765,
    "ByteArrayInputStream(bytes);": 766,
    "testUndo(String": 767,
    "fixValueStream(\"blah": 768,
    "blah\");": 769,
    "Box(int": 770,
    "this.playerId": 771,
    "playerId;": 772,
    "Player(int": 773,
    "id)": 774,
    "this.id": 775,
    "id;": 776,
    "ShouldNotReachException()": 777,
    "super(\"This": 778,
    "branch": 779,
    "reached.\");": 780,
    "testUndoWhenThereIsNoMove()": 781,
    "generateEntity(int": 782,
    "key)": 783,
    "(key": 784,
    "%": 785,
    "4)": 786,
    "Box(0);": 787,
    "1": 788,
    "Empty();": 789,
    "2": 790,
    "Player(0);": 791,
    "3": 792,
    "Wall();": 793,
    "ShouldNotReachException();": 794,
    "};": 795,
    "testGetUndoUnlimited()": 796,
    "putEntity(Position": 797,
    "position,": 798,
    "entity)": 799,
    "this.gameBoardMap.replace(position,entity);": 800,
    "testMapCopying()": 801,
    "maxWidth": 802,
    "2333;": 803,
    "maxHeight": 804,
    "random": 805,
    "Random();": 806,
    "randomEntities": 807,
    "Stream.generate(()": 808,
    "Position.of(random.nextInt(maxWidth),": 809,
    "random.nextInt(maxHeight)))": 810,
    ".distinct()": 811,
    ".limit(100)": 812,
    ".collect(Collectors.toMap(Function.identity(),": 813,
    "generateEntity(it.x())));": 814,
    "firstPos": 815,
    "randomEntities.keySet().stream().findFirst();": 816,
    "GameMap(maxWidth,": 817,
    "Collections.singleton(firstPos.get()),": 818,
    "233);": 819,
    "randomEntities.forEach(gameMap::putEntity);": 820,
    "GameState(gameMap);": 821,
    "randomPosition": 822,
    "randomEntities.keySet().stream().findAny();": 823,
    "gameMap.putEntity(randomPosition.get(),": 824,
    "randomEntities.forEach((p,": 825,
    "assertEquals(e,": 826,
    "gameState.getEntity(p)));": 827,
    "testUndoWhenThereIsMoveButNoCheckpoint()": 828,
    "testGameExit()": 829,
    "when(gameState.isWin()).thenReturn(false,": 830,
    "false,": 831,
    "false);": 832,
    "\"\"),": 833,
    "testGameWin()": 834,
    "true);": 835,
    "\"\"));": 836,
    "atLeastOnce()).isWin();": 837,
    "testMoreThanTwoPlayers()": 838,
    "3))));": 839,
    "undoQuota": 840,
    "map.getUndoLimit();": 841,
    "mapEntity": 842,
    "HashMap<>(map.mapEntity());": 843,
    "moveHistory.add(new": 844,
    "HashMap<>(mapEntity));": 845,
    "(Map.Entry<Position,": 846,
    "Entity>": 847,
    "entry": 848,
    ":": 849,
    "mapEntity.entrySet())": 850,
    "(entry.getKey().equals(position))": 851,
    "entry.getValue();": 852,
    "terminalScanner.nextLine();": 853,
    "id": 854,
    "-1;": 855,
    "playerOne": 856,
    "playerTwo": 857,
    "1;": 858,
    "lowerCaseInput": 859,
    "inputLine.toLowerCase();": 860,
    "(lowerCaseInput)": 861,
    "Move.Left(playerOne);": 862,
    "\"W\"": 863,
    "Move.Up(playerOne);": 864,
    "\"S\"": 865,
    "Move.Down(playerOne);": 866,
    "\"D\"": 867,
    "Move.Right(playerOne);": 868,
    "\"H\"": 869,
    "Move.Left(playerTwo);": 870,
    "\"J\"": 871,
    "Move.Down(playerTwo);": 872,
    "\"K\"": 873,
    "Move.Up(playerTwo);": 874,
    "\"L\"": 875,
    "Move.Right(playerTwo);": 876,
    "\"U\"": 877,
    "Undo(id);": 878,
    "EXIT_COMMAND_TEXT": 879,
    "Exit(id);": 880,
    "InvalidInput(id,": 881,
    "INVALID_INPUT_MESSAGE);": 882,
    "getEntity(from);": 883,
    "mapEntity.put(from,": 884,
    "mapEntity.put(to,": 885,
    "move);": 886,
    "(moveHistory.size()": 887,
    "1)": 888,
    "moveHistory.pop();": 889,
    "(!undoQuota.isEmpty())": 890,
    "Optional.of(undoQuota.get()": 891,
    "1);": 892,
    "HashMap<>(moveHistory.peek());": 893,
    "(gameState.getAllPlayerPositions().size()": 894,
    "2)": 895,
    "IllegalArgumentException(INVALID_INPUT_MESSAGE);": 896,
    "renderingEngine.message(GAME_READY_MESSAGE);": 897,
    "renderingEngine.render(state);": 898,
    "(!shouldStop())": 899,
    "quotaText;": 900,
    "(state.getUndoQuota().isEmpty())": 901,
    "quotaText": 902,
    "UNDO_QUOTA_UNLIMITED;": 903,
    "String.valueOf(state.getUndoQuota().get());": 904,
    "formatedQuotaText": 905,
    "String.format(UNDO_QUOTA_TEMPLATE,": 906,
    "quotaText);": 907,
    "renderingEngine.message(formatedQuotaText);": 908,
    "renderingEngine.message(\"Input(Player1:W/A/S/D,": 909,
    "Player2:H/J/K/L):\");": 910,
    "if(result": 911,
    "ActionResult.Failed){": 912,
    "renderingEngine.message(((ActionResult.Failed)": 913,
    "result).getReason());": 914,
    "renderingEngine.message(GAME_EXIT_MESSAGE);": 915,
    "(state.isWin())": 916,
    "renderingEngine.message(WIN_MESSAGE);": 917,
    "outputSteam.println(content);": 918,
    "(action){": 919,
    "ignored->new": 920,
    "ActionResult.Failed(action,": 921,
    "ignored->{": 922,
    "(state.getPlayerPositionById(action.getInitiator())": 923,
    "null)": 924,
    "yield": 925,
    "PLAYER_NOT_FOUND);": 926,
    "playerOriginalPosition": 927,
    "state.getPlayerPositionById(action.getInitiator());": 928,
    "playerDestinationPosition": 929,
    "((Move)": 930,
    "action).nextPosition(playerOriginalPosition);": 931,
    "originalEntity": 932,
    "state.getEntity(playerOriginalPosition);": 933,
    "nextEntity": 934,
    "state.getEntity(playerDestinationPosition);": 935,
    "(nextEntity": 936,
    "nextEntity).getPlayerId()": 937,
    "((Player)": 938,
    "originalEntity).getId())": 939,
    "\"You": 940,
    "boxes\");": 941,
    "positionBehindTheBox": 942,
    "action).nextPosition(playerDestinationPosition);": 943,
    "entityBehindTheBox": 944,
    "state.getEntity(positionBehindTheBox);": 945,
    "(entityBehindTheBox": 946,
    "Box": 947,
    "Player": 948,
    "\"Failed": 949,
    "box\");": 950,
    "state.move(playerDestinationPosition,": 951,
    "positionBehindTheBox);": 952,
    "state.move(playerOriginalPosition,": 953,
    "playerDestinationPosition);": 954,
    "ActionResult.Success(action);": 955,
    "player\");": 956,
    "wall\");": 957,
    "(state.getUndoQuota().isEmpty()": 958,
    "state.undo();": 959,
    "UNDO_QUOTA_RUN_OUT);": 960,
    "HashSet<>();": 961,
    "(Entity": 962,
    "mapEntity.values())": 963,
    "(entity": 964,
    "playerIds.add(((Player)": 965,
    "entity).getId());": 966,
    "playerIds;": 967,
    "this.width": 968,
    "this.height": 969,
    "mapEntity.put(position,": 970,
    "entity);": 971,
    "this.originalMap": 972,
    "this.grid": 973,
    "map.grid;": 974,
    "this.undoQuota": 975,
    "this.playersChar": 976,
    "ArrayList<>();": 977,
    "this.playersPos": 978,
    "deep": 979,
    "copy": 980,
    "so": 981,
    "originalMap": 982,
    "properties": 983,
    "changed": 984,
    "i=0;": 985,
    "i<map.playersChar.size();": 986,
    "i++){": 987,
    "this.playersChar.add(map.playersChar.get(i));": 988,
    "this.playersPos.add(map.playersPos.get(i));": 989,
    "this.boxesChar": 990,
    "this.boxesPos": 991,
    "i<map.boxesChar.size();": 992,
    "this.boxesChar.add(map.boxesChar.get(i));": 993,
    "this.boxesPos.add(map.boxesPos.get(i));": 994,
    "this.cpCount": 995,
    "TODOx:": 996,
    "test": 997,
    "this.grid[position.y()][position.x()];": 998,
    "(inputLine": 999,
    "StringResources.INVALID_INPUT_MESSAGE);": 1000,
    "playerid": 1001,
    "String[]": 1002,
    "inputs": 1003,
    "inputLine.split(\"s+\");": 1004,
    "https://www.geeksforgeeks.org/string-in-switch-case-in-java/": 1005,
    "(inputLine.toLowerCase()){": 1006,
    "StringResources.EXIT_COMMAND_TEXT:": 1007,
    "better": 1008,
    "place": 1009,
    "elsewhere?": 1010,
    "System.out.println(StringResources.GAME_EXIT_MESSAGE);": 1011,
    "Exit(0);": 1012,
    "InvalidInput(0,\"Invalid": 1013,
    "entFrom": 1014,
    "this.grid[from.y()][from.x()];": 1015,
    "this.grid[to.y()][to.x()]": 1016,
    "entFrom;": 1017,
    "this.grid[from.y()][from.x()]": 1018,
    "(entFrom": 1019,
    "Player){": 1020,
    "pid": 1021,
    "entFrom).getId();": 1022,
    "ix": 1023,
    "playersChar.indexOf((char)": 1024,
    "('A'+pid));": 1025,
    "playersPos.set(ix,": 1026,
    "to);": 1027,
    "((Box)": 1028,
    "entFrom).getPlayerId();": 1029,
    "boxesChar.indexOf((char)": 1030,
    "('a'+pid));": 1031,
    "boxesPos.set(ix,": 1032,
    "maxh": 1033,
    "this.originalMap.getMaxHeight();": 1034,
    "maxw": 1035,
    "this.originalMap.getMaxWidth();": 1036,
    "Entity[][]": 1037,
    "savegrid": 1038,
    "Entity[maxh][maxw];": 1039,
    "maxh;": 1040,
    "j": 1041,
    "maxw;": 1042,
    "j++)": 1043,
    "ent": 1044,
    "this.getEntity(new": 1045,
    "Position(j,": 1046,
    "i));": 1047,
    "(this.grid[i][j]": 1048,
    "Box){": 1049,
    "(Box)": 1050,
    "ent;": 1051,
    "savegrid[i][j]": 1052,
    "Box(box.getPlayerId());": 1053,
    "pla": 1054,
    "(Player)": 1055,
    "Box(pla.getId());": 1056,
    "Empty)": 1057,
    "List<Position>": 1058,
    "saveplaPos": 1059,
    "(Position": 1060,
    "p:playersPos){": 1061,
    "saveplaPos.add(new": 1062,
    "Position(p.x(),": 1063,
    "p.y()));": 1064,
    "saveboxPos": 1065,
    "p:boxesPos){": 1066,
    "saveboxPos.add(new": 1067,
    "System.out.println(\"checkpoint\");": 1068,
    "System.out.println(this.cpState.size());": 1069,
    "this.cpState.push(savegrid);": 1070,
    "this.plaPosState.push(saveplaPos);": 1071,
    "this.boxesPosState.push(saveboxPos);": 1072,
    "(this.undoQuota.get()": 1073,
    "1){": 1074,
    "System.out.println(\"run": 1075,
    "quota\");": 1076,
    "return;": 1077,
    "(this.cpState.empty()){": 1078,
    "System.out.println(\"no": 1079,
    "prev": 1080,
    "cp\");": 1081,
    "System.out.println(\"undoing\");": 1082,
    "System.out.println(this.getPlayerPositionById(0));": 1083,
    "[][])": 1084,
    "this.cpState.pop();": 1085,
    "this.plaPosState.pop();": 1086,
    "this.boxesPosState.pop();": 1087,
    "numPlayers": 1088,
    "gameState.getAllPlayerPositions().size();": 1089,
    "this.state": 1090,
    "gameState;": 1091,
    "isWin": 1092,
    "userinput": 1093,
    "(this.state.isWin()){": 1094,
    "TODOx": 1095,
    "outputSteam.print(content+System.lineSeparator());": 1096,
    "(action": 1097,
    "Exit){": 1098,
    "isExit": 1099,
    "InvalidInput)": 1100,
    "ActionResult.Failed((InvalidInput)": 1101,
    "action,": 1102,
    "input.\");": 1103,
    "Move)": 1104,
    "todo": 1105,
    "validity": 1106,
    "Move.Down){": 1107,
    "oldpos": 1108,
    "x": 1109,
    "oldpos.x();": 1110,
    "y": 1111,
    "oldpos.y();": 1112,
    "newpos": 1113,
    "y+1);": 1114,
    "newEnt": 1115,
    "state.getEntity(newpos);": 1116,
    "(newEnt": 1117,
    "Empty){": 1118,
    "state.move(oldpos,": 1119,
    "newpos);": 1120,
    "newpos2": 1121,
    "y+2);": 1122,
    "(state.getEntity(newpos2)": 1123,
    "System.out.println(\"moving\");": 1124,
    "state.move(newpos,": 1125,
    "newpos2);": 1126,
    "else{": 1127,
    "Move.Up){": 1128,
    "y-1);": 1129,
    "y-2);": 1130,
    "Move.Left){": 1131,
    "Position(x-1,": 1132,
    "Position(x-2,": 1133,
    "Move.Right){": 1134,
    "Position(x+1,": 1135,
    "Position(x+2,": 1136,
    "\"default": 1137,
    "invalid\");": 1138,
    "duplicate": 1139,
    "done": 1140,
    "on": 1141,
    ".parse": 1142,
    "ret": 1143,
    "i<": 1144,
    "playersPos.size();": 1145,
    "ret.add(i);": 1146,
    "ret;": 1147,
    "check:": 1148,
    "yet": 1149,
    "maybe": 1150,
    "replace": 1151,
    "grid": 1152,
    "placement": 1153,
    "active": 1154,
    "states": 1155,
    "grid[position.y()][position.x()]": 1156,
    "entity;": 1157,
    "curmap": 1158,
    "undoquota": 1159,
    "map.getUndoLimit().get();": 1160,
    "//throw": 1161,
    "curmap.getEntity(position);": 1162,
    "(inputLine){": 1163,
    "\"Exit\",": 1164,
    "\"W\":": 1165,
    "\"A\":": 1166,
    "\"S\":": 1167,
    "\"D\":": 1168,
    "\"H\":": 1169,
    "\"J\":": 1170,
    "\"K\":": 1171,
    "\"L\":": 1172,
    "\"U\",": 1173,
    "\"u\",": 1174,
    "\"undo\":": 1175,
    "input\");": 1176,
    "numplayer": 1177,
    "System.out.println(content);": 1178,
    "height": 1179,
    "destin": 1180,
    "undonumber": 1181,
    "numbox": 1182,
    "++;": 1183,
    "numplayer++;": 1184,
    "map.get(position.y()).set(position.x(),": 1185,
    "\"&\");": 1186,
    "String.valueOf((char)((Player)": 1187,
    "entity).getId()));": 1188,
    "String.valueOf((char)((Box)": 1189,
    "entity).getPlayerId()));": 1190,
    "\");": 1191,
    "this.gameMap": 1192,
    "history": 1193,
    "this.gameMap.getEntity(position);": 1194,
    "if(inputLine.equalsIgnoreCase(\"Exit\"))": 1195,
    "if(inputLine.equalsIgnoreCase(\"U\"))": 1196,
    "\"A\",": 1197,
    "\"S\",": 1198,
    "\"s\"": 1199,
    "\"W\",": 1200,
    "\"w\"": 1201,
    "\"D\",": 1202,
    "\"d\"": 1203,
    "\"H\",": 1204,
    "\"h\"": 1205,
    "\"J\",": 1206,
    "\"j\"": 1207,
    "\"K\",": 1208,
    "\"k\"": 1209,
    "\"L\",": 1210,
    "\"l\"": 1211,
    "result;": 1212,
    "fromT": 1213,
    "this.gameMap.getEntity(from);": 1214,
    "this.gameMap.putEntity(to,fromT);": 1215,
    "this.gameMap.putEntity(from,new": 1216,
    "this.history": 1217,
    "GameState(this);": 1218,
    "if(this.history": 1219,
    "null){": 1220,
    "if(undoQuota": 1221,
    "-1)undoQuota": 1222,
    "--;": 1223,
    "this.history.gameMap;": 1224,
    "this.history.history;": 1225,
    "this.gameMap.Map": 1226,
    "GameMap.OriginMap.clone();": 1227,
    "Numplayers": 1228,
    "if(Numplayers": 1229,
    "if(this.state.getUndoQuota().isPresent())this.renderingEngine.message(\"Undo": 1230,
    "(this.state.getUndoQuota().get()": 1231,
    "?": 1232,
    "\"unlimited\":this.state.getUndoQuota().get()));": 1233,
    "while(this.shouldStop()": 1234,
    "false){": 1235,
    "this.processAction(this.inputEngine.fetchAction());": 1236,
    "switch(result){": 1237,
    "ActionResult.Success": 1238,
    "ignored:": 1239,
    "ActionResult.Failed": 1240,
    "failed_:": 1241,
    "System.out.println(failed_.getReason());": 1242,
    "AR": 1243,
    "switch(action){": 1244,
    "ignored": 1245,
    "if(this.state.getUndoQuota().get()": 1246,
    "this.state.getUndoQuota().get()": 1247,
    "move_": 1248,
    "PlayerPos": 1249,
    "this.state.getPlayerPositionById(move_.getInitiator());": 1250,
    "NextPos": 1251,
    "move_.nextPosition(PlayerPos);": 1252,
    "this.state.getEntity(NextPos);": 1253,
    "switch(entity){": 1254,
    "Empty": 1255,
    "this.state.move(PlayerPos,": 1256,
    "NextPos);": 1257,
    "box_:": 1258,
    "if(box_.getPlayerId()": 1259,
    "action.getInitiator()){": 1260,
    "NextBoxPos": 1261,
    "move_.nextPosition(NextPos);": 1262,
    "if(this.state.isEmpty(NextBoxPos)){": 1263,
    "this.state.checkpoint();": 1264,
    "this.state.move(NextPos,": 1265,
    "NextBoxPos);": 1266,
    "ActionResult.Failed(action,\"Failed": 1267,
    "Wall": 1268,
    "ActionResult.Failed(action,\"You": 1269,
    "this.isExit": 1270,
    "\"Invaild": 1271,
    "AR;": 1272,
    "this.PlayerIds;": 1273,
    "position.x();": 1274,
    "position.y();": 1275,
    "box_": 1276,
    "this.Map[y]": 1277,
    "this.Map[y].substring(0,": 1278,
    "x)": 1279,
    "(char)(box_.getPlayerId()": 1280,
    "(int)'a')": 1281,
    "this.Map[y].substring(x+1);": 1282,
    "if(isDestination(position)": 1283,
    "false)": 1284,
    "'.'": 1285,
    "'@'": 1286,
    "player_": 1287,
    "(char)(player_.getId()": 1288,
    "(int)'A')": 1289,
    "'#'": 1290,
    "undoLeft=map.undo;": 1291,
    "ArrayList<Entity[][]>();": 1292,
    "Entity[map.height][map.width];": 1293,
    "System.out.print(map.height+\"\");": 1294,
    "i<map.height;": 1295,
    "for(int": 1296,
    "j=0;": 1297,
    "j<map.width;": 1298,
    "j++){": 1299,
    "temp[i][j]=map.entityArr[i][j];": 1300,
    "history.add(temp);": 1301,
    "System.out.print(\"originalmap:\"+temp);": 1302,
    "i<4;": 1303,
    "j<6;": 1304,
    "System.out.print(history.get(0)[i][j]);": 1305,
    "System.out.print(System.lineSeparator());": 1306,
    "originalMap.entityArr[position.y()][position.x()];": 1307,
    "splited": 1308,
    "originalMap.map.lines().toArray(String[]::new);": 1309,
    "////": 1310,
    "System.out.print(map);": 1311,
    "System.out.print(splited[position.y()+1].charAt(position.x()));": 1312,
    "checkchar": 1313,
    "(int)": 1314,
    "splited[position.y()+1].charAt(position.x());": 1315,
    "if(checkchar<91&&checkchar>64){": 1316,
    "Player(checkchar-65);": 1317,
    "System.out.print(checkchar);": 1318,
    "if(checkchar<123&&checkchar>96){": 1319,
    "Box(checkchar-97);": 1320,
    "if(checkchar==46){": 1321,
    "if(checkchar==35){": 1322,
    "System.out.print(inputLine);": 1323,
    "(inputLine.equals(\"A\")||inputLine.equals('a'))": 1324,
    "(inputLine.equals(\"D\")||inputLine.equals('d'))": 1325,
    "(inputLine.equals(\"W\")||inputLine.equals('w'))": 1326,
    "(inputLine.equals(\"S\")||inputLine.equals('s'))": 1327,
    "(inputLine.equals(\"H\")||inputLine.equals('h'))": 1328,
    "(inputLine.equals(\"L\")||inputLine.equals('l'))": 1329,
    "(inputLine.equals(\"K\")||inputLine.equals('k'))": 1330,
    "(inputLine.equals(\"J\")||inputLine.equals('j'))": 1331,
    "(inputLine.equals(\"U\")||inputLine.equals('u'))": 1332,
    "Undo(1);": 1333,
    "(inputLine.equals(\"exit\")||inputLine.equals(\"EXIT\"))": 1334,
    "Exit(1);": 1335,
    "System.out.print(\"error\");": 1336,
    "InvalidInput(0,INVALID_INPUT_MESSAGE);": 1337,
    "originalMap.entityArr[to.y()][to.x()]=originalMap.getEntity(from);": 1338,
    "originalMap.entityArr[from.y()][from.x()]=new": 1339,
    "moving": 1340,
    "originalMap.getEntity(from);": 1341,
    "originalMap.putEntity(to,moving);": 1342,
    "System.out.print(\"111new": 1343,
    "map:\");": 1344,
    "System.out.print(originalMap.map);": 1345,
    "tempMap": 1346,
    "originalMap;": 1347,
    "tempMap.putEntity(from,new": 1348,
    "System.out.print(\"222new": 1349,
    "System.out.print(tempMap.map);": 1350,
    "Entity[originalMap.height][originalMap.width];": 1351,
    "System.out.print(originalMap.height+\"\");": 1352,
    "i<originalMap.height;": 1353,
    "j<originalMap.width;": 1354,
    "temp[i][j]=originalMap.entityArr[i][j];": 1355,
    "System.out.print(\"history:": 1356,
    "\"+": 1357,
    "history);": 1358,
    "historyNum": 1359,
    "history.size();": 1360,
    "System.out.print(\"historysize:": 1361,
    "historyNum);": 1362,
    "if(history.get(0).equals(history.get(1)))System.out.print(\"equalssss\");": 1363,
    "System.out.print(\"notequal\");": 1364,
    "System.out.print(\"old": 1365,
    "history:": 1366,
    "originalMap.entityArr);": 1367,
    "originalMap.entityArr=history.get(historyNum-2);": 1368,
    "System.out.print(\"new": 1369,
    "System.out.print(history.get(1)[i][j]);": 1370,
    "undoLeft-=1;": 1371,
    "if(gameState.getAllPlayerPositions().size()>2)": 1372,
    "(!shouldStop()){": 1373,
    "renderingEngine.render(this.state);": 1374,
    "System.out.print(outputSteam);": 1375,
    "System.out.printf(content);": 1376,
    "outputSteam.append(content);": 1377,
    "outputSteam.append(System.lineSeparator());": 1378,
    "if(action": 1379,
    "Move){": 1380,
    "original": 1381,
    "Position(original.x(),": 1382,
    "original.y()+1);": 1383,
    "(state.getEntity(newPosition)": 1384,
    "\"hit": 1385,
    "state.getEntity(newPosition)).getPlayerId()==action.getInitiator()){": 1386,
    "newBoxPosition": 1387,
    "original.y()+2);": 1388,
    "(state.getEntity(newBoxPosition)": 1389,
    "state.move(newPosition,newBoxPosition);": 1390,
    "state.move(original,newPosition);": 1391,
    "original.y()-1);": 1392,
    "original.y()-2);": 1393,
    "Position(original.x()-1,": 1394,
    "original.y());": 1395,
    "Position(original.x()-2,": 1396,
    "Position(original.x()+1,": 1397,
    "Position(original.x()+2,": 1398,
    "Undo){": 1399,
    "ActionResult.Failed(action,INVALID_INPUT_MESSAGE);": 1400,
    "map.lines().toArray(String[]::new);": 1401,
    "System.out.print(splited.length);": 1402,
    "undoLimit": 1403,
    "Integer.parseInt(splited[0]);": 1404,
    "splited.length-1;": 1405,
    "splited[1].length();": 1406,
    "System.out.print(width);": 1407,
    "playerIDs": 1408,
    "i=1;": 1409,
    "i<height;": 1410,
    "j<width;": 1411,
    "if(splited[i].charAt(j)=='@'){": 1412,
    "boxPosition.add(new": 1413,
    "Position(j,i-1));": 1414,
    "Position(4,1));": 1415,
    "Position(4,2));": 1416,
    "GameMap(width,height,boxPosition,undoLimit);": 1417,
    "System.out.print(boxPosition);": 1418,
    "/////": 1419,
    "(undoLimit<-1)throw": 1420,
    "player[]": 1421,
    "int[26];": 1422,
    "playerBox[]": 1423,
    "noOfBox": 1424,
    "noOfBoxDestination": 1425,
    "i<26;": 1426,
    "player[i]=0;": 1427,
    "splited[i].charAt(j);": 1428,
    "playerIDs.add(checkchar-65);": 1429,
    "System.out.print(PlayerIDs);": 1430,
    "playerIDs;": 1431,
    "positions=destinations;": 1432,
    "undo=undoLimit;": 1433,
    "entityArr": 1434,
    "Entity[height][width];": 1435,
    "entityArr[height][width]=new": 1436,
    "char": 1437,
    "entityChar": 1438,
    "System.out.print(\"entity": 1439,
    "is:": 1440,
    "Wall);": 1441,
    "entityChar='#';": 1442,
    "entityChar=(char)(((Box)": 1443,
    "entity).getPlayerId()+97);": 1444,
    "entityChar=(char)(((Player)": 1445,
    "entity).getId()+65);": 1446,
    "entityChar='.';": 1447,
    "char[]": 1448,
    "splited[position.y()+1].toCharArray();": 1449,
    "System.out.print(temp);": 1450,
    "temp[position.x()]=": 1451,
    "entityChar;": 1452,
    "splited[position.y()+1]=new": 1453,
    "String(temp);": 1454,
    "System.out.print(new": 1455,
    "String(temp));": 1456,
    "line:\");": 1457,
    "System.out.print(splited[position.y()+1]);": 1458,
    "Arrays.toString(splited);": 1459,
    "i<height+1;": 1460,
    "System.out.print(\"yooyoyo\");": 1461,
    "map=map.concat(splited[i]);": 1462,
    "map=map.concat(\"System.lineSeparator()\");": 1463,
    "map=map.concat(System.lineSeparator());": 1464,
    "this.currentMap": 1465,
    "ArrayList<>(map.mapArrayList);": 1466,
    "this.remainingUndos": 1467,
    "map.undoLimit;": 1468,
    "this.checkpointMap": 1469,
    "ArrayList<>(currentMap);": 1470,
    "if(currentMap.get(position.y()).length()": 1471,
    "<=": 1472,
    "position.x()){return": 1473,
    "null;};": 1474,
    "switch(currentMap.get(position.y()).charAt(position.x()))": 1475,
    "'#':": 1476,
    "code": 1477,
    "block": 1478,
    "//break;": 1479,
    "'.':": 1480,
    "'@':": 1481,
    "Empty();//this.mapArrayList.get(position.y()).charAt(position.x()))": 1482,
    "'": 1483,
    "':": 1484,
    "if(Character.isUpperCase(currentMap.get(position.y()).charAt(position.x())))": 1485,
    "{return": 1486,
    "Player((int)(currentMap.get(position.y()).charAt(position.x())": 1487,
    "'A'));}": 1488,
    "(Character.isLowerCase(currentMap.get(position.y()).charAt(position.x())))": 1489,
    "Box((int)(currentMap.get(position.y()).charAt(position.x())": 1490,
    "'a'));": 1491,
    "\"w\":return": 1492,
    "\"a\":return": 1493,
    "\"s\":return": 1494,
    "\"d\":return": 1495,
    "\"h\":return": 1496,
    "\"j\":return": 1497,
    "\"k\":return": 1498,
    "\"l\":return": 1499,
    "\"u\":return": 1500,
    "if(Character.isLowerCase(currentMap.get(from.y()).charAt(from.x())))": 1501,
    "//this.checkpointMap": 1502,
    "ArrayList<>(this.currentMap);": 1503,
    "historyCheckPoints.add(new": 1504,
    "ArrayList<>(this.currentMap));": 1505,
    "//System.out.println(\"I": 1506,
    "reached": 1507,
    "here,": 1508,
    "stored": 1509,
    "=\");": 1510,
    "//for": 1511,
    "historyCheckPoints.get(0);i++)": 1512,
    "//System.out.println(historyCheckPoints.get(0));": 1513,
    "objToBeMoved": 1514,
    "this.currentMap.get(from.y()).charAt(from.x());": 1515,
    "tempString": 1516,
    "currentMap.get(from.y()).toCharArray();//for": 1517,
    "horizontal": 1518,
    "tempStringFrom": 1519,
    "currentMap.get(from.y()).toCharArray();": 1520,
    "vertical": 1521,
    "tempStringTo": 1522,
    "currentMap.get(to.y()).toCharArray();": 1523,
    "if(from.y()": 1524,
    "to.y())": 1525,
    "//horizontal": 1526,
    "movement": 1527,
    "tempString[to.x()]": 1528,
    "objToBeMoved;": 1529,
    "tempString[from.x()]=": 1530,
    "'.';": 1531,
    "this.currentMap.set(from.y(),": 1532,
    "String.valueOf(tempString));": 1533,
    "(from.y()": 1534,
    "tempStringTo[from.x()]": 1535,
    "tempStringFrom[from.x()]": 1536,
    "String.valueOf(tempStringFrom));": 1537,
    "this.currentMap.set(to.y(),": 1538,
    "String.valueOf(tempStringTo));": 1539,
    "if(historyCheckPoints.size()!=0)": 1540,
    "//this.currentMap": 1541,
    "ArrayList<>(this.checkpointMap);//this.checkpointMap;": 1542,
    "ArrayList<>(historyCheckPoints.get(historyCheckPoints.size()-1));": 1543,
    "-=": 1544,
    "historyCheckPoints.remove(historyCheckPoints.size()-1);": 1545,
    "(historyCheckPoints.size()": 1546,
    "ArrayList<>(this.map.mapArrayList);": 1547,
    "//System.out.println(\"hiiiiiiiii\");": 1548,
    "//this.remainingUndos-=1;": 1549,
    "if(gameState.getAllPlayerPositions().size()": 1550,
    "//int": 1551,
    "=1;": 1552,
    "//boolean": 1553,
    "afterfirstround": 1554,
    "renderingEngine.message(\"Sokoban": 1555,
    "//renderingEngine.render(this.state);": 1556,
    "//inputEngine.r": 1557,
    "=null;": 1558,
    "(shouldStop()!=": 1559,
    "true)": 1560,
    "//this.state.isWin()!=true": 1561,
    "stringQuota": 1562,
    "String.valueOf(this.state.getUndoQuota());": 1563,
    "stringQuota.replace(\"Optional[\",\"\");": 1564,
    "stringQuota.replace(\"]\",\"\");": 1565,
    "renderingEngine.message(\"Undo": 1566,
    "stringQuota);//\"Undo": 1567,
    "\"+String.valueOf(this.state.getUndoQuota())": 1568,
    "renderingEngine.message(\">>>\");": 1569,
    "//renderingEngine.render(state);": 1570,
    "actionResult": 1571,
    "this.processAction(temp);": 1572,
    "if(actionResult": 1573,
    "ActionResult.Success){continue;}": 1574,
    "(actionResult": 1575,
    "actionResult).getReason());": 1576,
    "if(temp": 1577,
    "Exit){break;}": 1578,
    "//if(round": 1579,
    "==3){break;};": 1580,
    "//round": 1581,
    "+=": 1582,
    "if(this.state.isWin()){": 1583,
    "renderingEngine.message(\"Game": 1584,
    "renderingEngine.message(\"You": 1585,
    "win.\");}": 1586,
    "{renderingEngine.message(\"Game": 1587,
    "exits.\");};": 1588,
    "fectchedAction": 1589,
    "(action)": 1590,
    "ActionResult.Failed(action,\"Invalid": 1591,
    "if(this.state.remainingUndos": 1592,
    "move:": 1593,
    "playerX": 1594,
    "this.state.getPlayerPositionById(action.getInitiator()).x();": 1595,
    "playerY": 1596,
    "this.state.getPlayerPositionById(action.getInitiator()).y();": 1597,
    "(move)": 1598,
    "(this.state.getEntity(new": 1599,
    "Position(": 1600,
    "playerX-1,playerY))": 1601,
    "{//empty": 1602,
    "this.state.move(new": 1603,
    "Position(playerX,playerY),new": 1604,
    "Position(playerX-1,playerY));": 1605,
    "playerX-2,playerY))": 1606,
    "Empty)//nth": 1607,
    "if(((Box)": 1608,
    "this.state.getEntity(new": 1609,
    "playerX-1,playerY))).getPlayerId()==": 1610,
    "action.getInitiator())": 1611,
    "Position(playerX-1,playerY),new": 1612,
    "Position(playerX-2,playerY));": 1613,
    "ActionResult.Success(action);}": 1614,
    "boxes.\");}": 1615,
    "}//": 1616,
    "Box\");}": 1617,
    "playerX+1,playerY))": 1618,
    "Position(playerX+1,playerY));": 1619,
    "playerX+2,playerY))": 1620,
    "playerX+1,playerY))).getPlayerId()==": 1621,
    "Position(playerX+1,playerY),new": 1622,
    "Position(playerX+2,playerY));": 1623,
    "playerX,playerY-1))": 1624,
    "top": 1625,
    "Position(playerX,playerY-1));": 1626,
    "playerX,playerY-2))": 1627,
    "playerX,playerY-1))).getPlayerId()==": 1628,
    "Position(playerX,playerY-1),new": 1629,
    "Position(playerX,playerY-2));": 1630,
    "playerX,playerY+1))": 1631,
    "Position(playerX,playerY+1));": 1632,
    "playerX,playerY+2))": 1633,
    "playerX,playerY+1))).getPlayerId()==": 1634,
    "{this.state.checkpoint();": 1635,
    "Position(playerX,playerY+1),new": 1636,
    "Position(playerX,playerY+2));": 1637,
    "tempPlayerIds": 1638,
    "this.mapArrayList.size();i++": 1639,
    "this.mapArrayList.get(i).length();j++)": 1640,
    "if(Character.isUpperCase(this.mapArrayList.get(i).charAt(j)))": 1641,
    "tempPlayerIds.add(Integer.valueOf((int)(this.mapArrayList.get(i).charAt(j)-'A')));": 1642,
    "tempPlayerIds;": 1643,
    "this.destination": 1644,
    "this.mapArrayList.get(position.y()).toCharArray();": 1645,
    "if(entity": 1646,
    "{temp[position.x()]='#';": 1647,
    "this.mapArrayList.set(position.y(),": 1648,
    "String.valueOf(temp));}": 1649,
    "temp[position.x()]='.';": 1650,
    "String.valueOf(temp));": 1651,
    "temp[position.x()]=(char)('A'+((Player)": 1652,
    "temp[position.x()]=(char)('a'+((Box)": 1653,
    "entity).getPlayerId());": 1654,
    "map.undolimit;": 1655,
    "System.out.println(\"type": 1656,
    "input:": 1657,
    "System.out.println(\"terminal\");": 1658,
    "System.out.println(inputLine);": 1659,
    "(inputLine.equals(\"exit\")){": 1660,
    "what": 1661,
    "initiator": 1662,
    "value": 1663,
    "(inputLine.equals(\"A\")){": 1664,
    "(inputLine.equals(\"S\")){": 1665,
    "(inputLine.equals(\"W\")){": 1666,
    "(inputLine.equals(\"D\")){": 1667,
    "(inputLine.equals(\"H\")){": 1668,
    "(inputLine.equals(\"J\")){": 1669,
    "(inputLine.equals(\"K\")){": 1670,
    "(inputLine.equals(\"L\")){": 1671,
    "(inputLine.equals(\"U\")){": 1672,
    "this.checkpoint();": 1673,
    "System.out.println(\"move\");": 1674,
    "System.out.println(gameMap.getEntity(from));": 1675,
    "System.out.print(to.x());": 1676,
    "System.out.println(to.y());": 1677,
    "GameMap.mapArray[to.y()][to.x()]=this.gameMap.getEntity(from);": 1678,
    "GameMap.mapArray[from.y()][from.x()]=new": 1679,
    "History": 1680,
    "curr": 1681,
    "History(undoQuota);": 1682,
    "this.gameMap.historyArray.add(curr);": 1683,
    "System.out.println(\"undo\");": 1684,
    "System.out.println(GameMap.mapArray[3][1]);": 1685,
    "last_history;": 1686,
    "(this.gameMap.historyArray.size()==0){": 1687,
    "GameMap.mapArray.length;": 1688,
    "++": 1689,
    "){": 1690,
    "GameMap.mapArray[0].length": 1691,
    "++){": 1692,
    "GameMap.original_mapArray": 1693,
    "[i][j]": 1694,
    "GameMap.mapArray[i][j];": 1695,
    "(this.gameMap.historyArray.size()": 1696,
    "==1){": 1697,
    "System.out.println(\"revert": 1698,
    "map\");": 1699,
    "GameMap.mapArray[i][j]": 1700,
    "[i][j];": 1701,
    "last_history": 1702,
    "this.gameMap.historyArray.get(this.gameMap.historyArray.size()-2);": 1703,
    "[][]": 1704,
    "lastEntity": 1705,
    "last_history.arrayMap();": 1706,
    "this.gameMap.historyArray.remove(this.gameMap.historyArray.size()-1);": 1707,
    "System.out.println(\"construct\");": 1708,
    "count": 1709,
    "=0;": 1710,
    "(GameMap.mapArray[i][j]": 1711,
    "count++;": 1712,
    "(count": 1713,
    ">=": 1714,
    "3){": 1715,
    "//while": 1716,
    "!": 1717,
    "stop,": 1718,
    "render,": 1719,
    "input": 1720,
    "engine": 1721,
    "while(!shouldStop()){": 1722,
    "System.out.println(this.state);": 1723,
    "processAction(inputEngine.fetchAction());": 1724,
    "System.out.println(\"end\");": 1725,
    "System.out.println(\"processAction\");": 1726,
    "this.exit": 1727,
    "}else": 1728,
    "currmove": 1729,
    "(Move)": 1730,
    "playerpostion": 1731,
    "this.state.getPlayerPositionById(action.getInitiator());": 1732,
    "nextposition": 1733,
    "currmove.nextPosition(playerpostion);": 1734,
    "System.out.println(this.state.gameMap.getEntity(playerpostion));": 1735,
    "System.out.println(this.state.gameMap.getEntity(nextposition));": 1736,
    "System.out.println(this.state.gameMap.getEntity(new": 1737,
    "Position(2,1)));": 1738,
    "System.out.println(nextposition.x());": 1739,
    "System.out.println(nextposition.y());": 1740,
    "(this.state.gameMap.getEntity(nextposition)": 1741,
    "this.state.gameMap.getEntity(currmove.nextPosition(nextposition))instanceof": 1742,
    "ActionResult.Failed(action,\"wall\");": 1743,
    "this.state.move(nextposition,": 1744,
    "currmove.nextPosition(nextposition));": 1745,
    "this.state.move(playerpostion,": 1746,
    "nextposition);": 1747,
    "Wall){": 1748,
    "include": 1749,
    "reason": 1750,
    "?????": 1751,
    "System.out.println(\"getPlayer\");": 1752,
    "(players[i])": 1753,
    "curr.add(i);": 1754,
    "curr;": 1755,
    "this.maxwidth": 1756,
    "this.maxheigth": 1757,
    "this.undolimit": 1758,
    "System.out.println(\"putEntity\");": 1759,
    "mapArray[position.x()][position.y()]=": 1760,
    "this.entityLocations": 1761,
    "cloneEntityLocations(map.entityLocations);": 1762,
    "this.moveHistory": 1763,
    "ArrayList<ArrayList<ArrayList<Entity>>>();": 1764,
    "//this.currentPlayerLocation": 1765,
    "ArrayList<Player>();": 1766,
    "ArrayList<ArrayList<Entity>>": 1767,
    "getEntityLocations()": 1768,
    "this.entityLocations;": 1769,
    "lowerCaseInputLine": 1770,
    "if(lowerCaseInputLine.equals(\"exit\"))": 1771,
    "Exit(-1);": 1772,
    "if(inputLine.length()": 1773,
    "inputLine.length()": 1774,
    "InvalidInput(-1,\"Invalid": 1775,
    "lowerCaseInputLine.charAt(0);": 1776,
    "if(letter": 1777,
    "'a')": 1778,
    "'s')": 1779,
    "'w')": 1780,
    "'d')": 1781,
    "'h')": 1782,
    "'j')": 1783,
    "'k')": 1784,
    "'l')": 1785,
    "'u')": 1786,
    "Undo(-1);": 1787,
    "fromEntity": 1788,
    "this.getEntity(from);": 1789,
    "entityLocations.get(to.y()).set(to.x(),fromEntity);": 1790,
    "entityLocations.get(from.y()).set(from.x(),new": 1791,
    "this.moveHistory.add(this.cloneEntityLocations(this.entityLocations));": 1792,
    "if(moveHistory.size()": 1793,
    "0){": 1794,
    "this.cloneEntityLocations(map.entityLocations);": 1795,
    "//conduct": 1796,
    "arithmetic": 1797,
    "(if": 1798,
    "necessary)": 1799,
    "if(undoQuota.isPresent()){": 1800,
    "newUndoQuota": 1801,
    "this.undoQuota.get();": 1802,
    "newUndoQuota--;": 1803,
    "Optional.of(newUndoQuota);": 1804,
    "//revert": 1805,
    "gamestate": 1806,
    "latest": 1807,
    "snapchat": 1808,
    "this.cloneEntityLocations(moveHistory.get(moveHistory.size()-2));": 1809,
    "//remove": 1810,
    "last": 1811,
    "snapshot": 1812,
    "moveHistory": 1813,
    "moveHistory.remove(moveHistory.size()-1);": 1814,
    "2){": 1815,
    "quotaMessage": 1816,
    "if(state.getUndoQuota().equals(Optional.empty()))": 1817,
    "\"Undo": 1818,
    "Infinity\";": 1819,
    "if(state.getUndoQuota().isPresent()": 1820,
    "&&": 1821,
    "state.getUndoQuota().get();": 1822,
    "0\";": 1823,
    "renderingEngine.message(quotaMessage);": 1824,
    "while(!shouldStop())": 1825,
    "str": 1826,
    "content.concat(System.lineSeparator());": 1827,
    "this.outputSteam.print(str);": 1828,
    "render(@NotNull": 1829,
    "GameState": 1830,
    "state)": 1831,
    "builder": 1832,
    "StringBuilder();": 1833,
    "state.getEntityLocations().size();": 1834,
    "y++)": 1835,
    "state.getEntityLocations().get(y).size();": 1836,
    "x++)": 1837,
    "state.getEntity(Position.of(x,": 1838,
    "y));": 1839,
    "charToPrint": 1840,
    "switch(entity)": 1841,
    "\"#\";": 1842,
    "b:": 1843,
    "Character.toString((char)('a'": 1844,
    "b.getPlayerId()));": 1845,
    "p:": 1846,
    "Character.toString((char)('A'": 1847,
    "p.getId()));": 1848,
    "\".\";": 1849,
    "for(Position": 1850,
    "position:": 1851,
    "state.getDestinations()){": 1852,
    "if(position.x()": 1853,
    "position.y()": 1854,
    "\"@\";": 1855,
    "null:": 1856,
    "\";": 1857,
    "builder.append(charToPrint);": 1858,
    "builder.append('n');": 1859,
    "outputSteam.print(builder);": 1860,
    "//check": 1861,
    "if(": 1862,
    "Undo)": 1863,
    "type": 1864,
    "//get": 1865,
    "(Move)action;": 1866,
    "playerId": 1867,
    "move.getInitiator();": 1868,
    "playerPositon": 1869,
    "state.getPlayerPositionById(playerId);": 1870,
    "if(playerPositon": 1871,
    "\"Player": 1872,
    "found\");": 1873,
    "toEntity": 1874,
    "state.getEntity(move.nextPosition(playerPositon));": 1875,
    "if(toEntity": 1876,
    "state.move(playerPositon,move.nextPosition(playerPositon));": 1877,
    "//we": 1878,
    "successive": 1879,
    "whenever": 1880,
    "encounter": 1881,
    "secondToEntity": 1882,
    "state.getEntity(move.nextPosition(move.nextPosition(playerPositon)));": 1883,
    "if(!(secondToEntity": 1884,
    "state.move(move.nextPosition(playerPositon),move.nextPosition(move.nextPosition(playerPositon)));": 1885,
    "playerIdList;": 1886,
    "entityLocations.get(position.y()).add(position.x(),entity);": 1887,
    "this.entitiesMap": 1888,
    "Entity[map.getMaxHeight()][map.getMaxWidth()];": 1889,
    "map.getMaxHeight();": 1890,
    "this.entitiesMap[i]": 1891,
    "map.getMap()[i].clone();": 1892,
    "this.boxPosition": 1893,
    "HashSet<Position>(map.getBoxPosition());": 1894,
    "this.playerPosition": 1895,
    "HashMap<Integer,Position>(map.getPlayerPosition());": 1896,
    "Stack<CheckPointData>();": 1897,
    "entitiesMap[position.y()][position.x()];": 1898,
    "\"u\"": 1899,
    "\"exit\"": 1900,
    "if(entitiesMap[from.y()][from.x()]": 1901,
    "//need": 1902,
    "boxPosition": 1903,
    "when": 1904,
    "if(!boxPosition.remove(from)){": 1905,
    "RuntimeException();": 1906,
    "boxPosition.add(to);": 1907,
    "//change": 1908,
    "playerPosition": 1909,
    "playerPosition.replace(((Player)entitiesMap[from.y()][from.x()]).getId(),": 1910,
    "entitiesMap[to.y()][to.x()]": 1911,
    "entitiesMap[from.y()][from.x()];": 1912,
    "entitiesMap[from.y()][from.x()]": 1913,
    "moveHistory.push(new": 1914,
    "CheckPointData(entitiesMap,boxPosition,playerPosition));": 1915,
    "if(!moveHistory.empty()){": 1916,
    "Optional.of(undoQuota.get()-1);": 1917,
    "record": 1918,
    "if(!(moveHistory.empty())){": 1919,
    "entitiesMap": 1920,
    "moveHistory.peek().getEntitiesMap();": 1921,
    "//restore": 1922,
    "data": 1923,
    "element": 1924,
    "stack": 1925,
    "moveHistory.peek().getBoxPosition();": 1926,
    "moveHistory.peek().getPlayerPosition();": 1927,
    "CheckPointData": 1928,
    "initialRecord": 1929,
    "CheckPointData(gameMap.getMap(),gameMap.getBoxPosition(),": 1930,
    "gameMap.getPlayerPosition());": 1931,
    "initialRecord.getEntitiesMap();": 1932,
    "initial": 1933,
    "status": 1934,
    "initialRecord.getBoxPosition();": 1935,
    "initialRecord.getPlayerPosition();": 1936,
    "renderingEngine.message(\"\");": 1937,
    "if(state.getUndoQuota().isEmpty()){": 1938,
    "renderingEngine.message(\"Unlimited\");": 1939,
    "String.valueOf(state.getUndoQuota().get()));": 1940,
    "f){": 1941,
    "renderingEngine.message(f.getReason());": 1942,
    "if(state.isWin()){": 1943,
    "currentPos": 1944,
    "state.getPlayerPositionById(move.getInitiator());": 1945,
    "if(currentPos": 1946,
    "ActionResult.Failed(move,\"Player": 1947,
    "found.\");": 1948,
    "nextPos": 1949,
    "move.nextPosition(currentPos);": 1950,
    "nextNextPos": 1951,
    "move.nextPosition(nextPos);": 1952,
    "if(state.getEntity(nextPos)": 1953,
    "ActionResult.Failed(move,\"You": 1954,
    "state.move(currentPos,nextPos);": 1955,
    "ActionResult.Success(move);": 1956,
    "box){": 1957,
    "if(box.getPlayerId()": 1958,
    "move.getInitiator()){": 1959,
    "if(!(state.getEntity(nextNextPos)": 1960,
    "Empty)){": 1961,
    "ActionResult.Failed(move,\"Failed": 1962,
    "state.move(nextPos,nextNextPos);": 1963,
    "exit:": 1964,
    "ActionResult.Success(exit);": 1965,
    "undo:": 1966,
    "if(!(state.getUndoQuota().isEmpty())){": 1967,
    "if(state.getUndoQuota().get().equals(0)){": 1968,
    "ActionResult.Failed(undo,\"You": 1969,
    "ActionResult.Success(undo);": 1970,
    "invalidInput:": 1971,
    "ActionResult.Failed(invalidInput,invalidInput.getMessage());": 1972,
    "playerPosition.keySet();": 1973,
    "map[position.y()][position.x()]": 1974,
    "this.map=map;": 1975,
    "history=new": 1976,
    "Stack<Checkpoint>();": 1977,
    "undoQuota=map.getUndoLimit();": 1978,
    "this.players=map.getPlayerMap();": 1979,
    "this.boxes=map.getBoxMap();": 1980,
    "this.entityArr=map.getEntityArr();": 1981,
    "width=map.getMaxWidth();": 1982,
    "height=map.getMaxHeight();": 1983,
    "(position.x()>=width": 1984,
    "position.y()>=height)": 1985,
    "entityArr[position.y()][position.x()];": 1986,
    "(inputLine.toLowerCase().equals(\"exit\"))": 1987,
    "(inputLine.length()==1)": 1988,
    "(\"wasd\".indexOf(inputLine.toLowerCase())!=-1){": 1989,
    "(inputLine.toLowerCase().charAt(0))": 1990,
    "'w':": 1991,
    "'a':": 1992,
    "'s':": 1993,
    "((\"hjkl\".indexOf(inputLine.toLowerCase())!=-1))": 1994,
    "'k':": 1995,
    "'h':": 1996,
    "'j':": 1997,
    "(inputLine.toLowerCase().equals(\"u\"))": 1998,
    "InvalidInput(-1,INVALID_INPUT_MESSAGE);": 1999,
    "e=entityArr[from.y()][from.x()];": 2000,
    "entityArr[to.y()][to.x()]=e;": 2001,
    "entityArr[from.y()][from.x()]=new": 2002,
    "(e": 2003,
    "o)": 2004,
    "players.put(o.getId(),": 2005,
    "Position.of(to.x(),to.y()));": 2006,
    "history.push(new": 2007,
    "Checkpoint(entityArr,players));": 2008,
    "(undoQuota.isPresent()": 2009,
    "undoQuota.get()<=0)": 2010,
    "(!history.isEmpty())": 2011,
    "history.pop();": 2012,
    "(undoQuota.isPresent())": 2013,
    "undoQuota=Optional.of(undoQuota.get()-1);": 2014,
    "c": 2015,
    "history.peek();": 2016,
    "c.getEntityArr();": 2017,
    "players=c.getPlayerMap();": 2018,
    "entityArr=map.getEntityArr();": 2019,
    "players=map.getPlayerMap();": 2020,
    "IllegalArgumentException(\"TerminalSokobanGame": 2021,
    "two": 2022,
    "players.\");": 2023,
    "renderingEngine.message(UNDO_QUOTA_UNLIMITED);": 2024,
    "renderingEngine.message(String.format(UNDO_QUOTA_TEMPLATE,state.getUndoQuota().get()));": 2025,
    "input=inputEngine.fetchAction();": 2026,
    "result=processAction(input);": 2027,
    "(result": 2028,
    "f)": 2029,
    "(action.getInitiator()!=-1": 2030,
    "!state.isPlayer(action.getInitiator()))": 2031,
    "ActionResult.Failed(action,\"Player": 2032,
    "curr=state.getPlayerPositionById(action.getInitiator());": 2033,
    "(curr==null)": 2034,
    "RuntimeException(\"Action": 2035,
    "invalid": 2036,
    "o": 2037,
    "->{": 2038,
    "(state.getUndoQuota().isPresent()": 2039,
    "&&state.getUndoQuota().get()==0)": 2040,
    "ActionResult.Failed(o,UNDO_QUOTA_RUN_OUT);": 2041,
    "ActionResult.Success(o);": 2042,
    "o->{": 2043,
    "(!state.isPlayer(o.getInitiator()))": 2044,
    "ActionResult.Failed(o,PLAYER_NOT_FOUND);": 2045,
    "dir=switch": 2046,
    "(o){": 2047,
    "m->0;": 2048,
    "m->1;": 2049,
    "m->": 2050,
    "2;": 2051,
    "m->3;": 2052,
    "curr=state.getPlayerPositionById(o.getInitiator());": 2053,
    "i=state.isMovable(curr,dir);": 2054,
    "dest=o.nextPosition(curr);": 2055,
    "(i)": 2056,
    "1:": 2057,
    "state.move(curr,": 2058,
    "o.nextPosition(curr));": 2059,
    "2:{": 2060,
    "state.move(dest,o.nextPosition(dest));": 2061,
    "state.move(curr,dest);": 2062,
    "ActionResult.Failed(o,": 2063,
    "failMsg.get(i));": 2064,
    "endSig=true;": 2065,
    "ActionResult.Success(o)": 2066,
    "ActionResult.Failed(o,o.getMessage());": 2067,
    "Collections.unmodifiableSet(players.keySet());": 2068,
    "width=maxWidth;": 2069,
    "height=maxHeight;": 2070,
    "this.destinations=destinations;": 2071,
    "(undoLimit<-1)": 2072,
    "IllegalArgumentException(\"Invalid": 2073,
    "(<-1)\");": 2074,
    "this.undoLimit=undoLimit;": 2075,
    "entityArr=new": 2076,
    "Entity[maxHeight][maxWidth];": 2077,
    "walls=new": 2078,
    "HashSet<Position>();": 2079,
    "players=new": 2080,
    "HashMap<Integer,Position>();": 2081,
    "boxes=new": 2082,
    "HashMap<Integer,ArrayList<Position>>();": 2083,
    "undoLimit,": 2084,
    "entityArr,": 2085,
    "Wall,": 2086,
    "Map<Integer,Position>": 2087,
    "playerMap,Map<Integer,ArrayList<Position>>": 2088,
    "boxMap){": 2089,
    "this.entityArr=entityArr;": 2090,
    "this.walls=walls;": 2091,
    "this.players=playerMap;": 2092,
    "this.boxes=boxMap;": 2093,
    "assignContent(Entity[][]": 2094,
    "walls,": 2095,
    "(entity){": 2096,
    "o->": 2097,
    "entityArr[position.y()][position.x()]=o;": 2098,
    "walls.add(position);": 2099,
    "(boxes.containsKey(o.getPlayerId()))": 2100,
    "boxes.get(o.getPlayerId()).add(position);": 2101,
    "boxes.put(o.getPlayerId(),new": 2102,
    "ArrayList<Position>());": 2103,
    "this.boxCount++;": 2104,
    "(players.containsKey(o.getId()))": 2105,
    "IllegalArgumentException(\"duplicate": 2106,
    "detected": 2107,
    "players.put(o.getId(),position);": 2108,
    "default->throw": 2109,
    "undoCheckpoint.clear();": 2110,
    "boxCheckpoint.clear();": 2111,
    "playerCheckpoint.clear();": 2112,
    "checkpoint();": 2113,
    "gameMap.getEntity(position);": 2114,
    "//TODO": 2115,
    "\"u\",\"U\":": 2116,
    "\"W\",\"w\":": 2117,
    "\"A\",\"a\":": 2118,
    "\"D\",\"d\":": 2119,
    "\"H\",\"h\":": 2120,
    "\"K\",\"k\":": 2121,
    "\"L\",\"l\":": 2122,
    "//System.out.println(original.getClass().getName());": 2123,
    "dest": 2124,
    "getEntity(to);": 2125,
    "(original": 2126,
    "null": 2127,
    "gameMap.removeBox(((Box)": 2128,
    "original).getPlayerId(),from);": 2129,
    "(gameMap.getMap()[from.x()][from.y()]": 2130,
    "'@')": 2131,
    "//prevent": 2132,
    "gameMap.getMap()[from.x()][from.y()]": 2133,
    "(gameMap.getMap()[to.x()][to.y()]": 2134,
    "gameMap.getMap()[to.x()][to.y()]": 2135,
    "//System.out.println(dest.getClass().getName());": 2136,
    "gameMap.putEntity(to,": 2137,
    "original);": 2138,
    "gameMap.putEntity(from,": 2139,
    "dest);": 2140,
    "//gameMap.printMap();": 2141,
    "(getDestinations().contains(from)": 2142,
    "'.')": 2143,
    "//add": 2144,
    "back": 2145,
    "'@';": 2146,
    "if(getDestinations().contains(to)": 2147,
    "char[][]": 2148,
    "mapCopy": 2149,
    "char[gameMap.getMaxWidth()][gameMap.getMaxHeight()];": 2150,
    "gameMap.getMaxWidth();": 2151,
    "mapCopy[i]": 2152,
    "gameMap.getMap()[i].clone();": 2153,
    "undoCheckpoint.add(mapCopy);": 2154,
    "List<Set<Position>>": 2155,
    "boxCopy": 2156,
    "ArrayList<Set<Position>>();": 2157,
    "(var": 2158,
    "i:": 2159,
    "gameMap.getBoxList())": 2160,
    "boxCopy.add(new": 2161,
    "HashSet<Position>());": 2162,
    "boxCopy.get(boxCopy.size()": 2163,
    "1).addAll(i);": 2164,
    "boxCheckpoint.add(boxCopy);": 2165,
    "playerCheckpoint.add(gameMap.getPlayersPosition().clone());": 2166,
    "//gameMap.printMap(undoCheckpoint.get(0));": 2167,
    "undoNum": 2168,
    "getUndoQuota().orElse(0);": 2169,
    "lastUndoIndex": 2170,
    "undoCheckpoint.size();": 2171,
    "(undoCheckpoint.isEmpty())": 2172,
    "(undoNum": 2173,
    "(!(lastUndoIndex": 2174,
    "1))": 2175,
    "gameMap.updateMap(undoCheckpoint.get(lastUndoIndex": 2176,
    "gameMap.updateBoxList(boxCheckpoint.get(lastUndoIndex": 2177,
    "gameMap.updatePlayerLocation(playerCheckpoint.get(lastUndoIndex": 2178,
    "undoCheckpoint.remove(lastUndoIndex": 2179,
    "boxCheckpoint.remove(lastUndoIndex": 2180,
    "playerCheckpoint.remove(lastUndoIndex": 2181,
    "gameMap.updateUndoLimit(undoNum);": 2182,
    "gameState.getPlayerIDs())": 2183,
    "(i": 2184,
    "exitFlag": 2185,
    "renderingEngine.message(StringResources.GAME_READY_MESSAGE);": 2186,
    "(state.getUndoQuota().orElse(0)": 2187,
    "renderingEngine.message(String.format(StringResources.UNDO_QUOTA_TEMPLATE,state.getUndoQuota().orElse(0).toString()));": 2188,
    "renderingEngine.message(String.format(StringResources.UNDO_QUOTA_TEMPLATE,StringResources.UNDO_QUOTA_UNLIMITED));": 2189,
    "(shouldStop())": 2190,
    "(exitFlag)": 2191,
    "renderingEngine.message(StringResources.GAME_EXIT_MESSAGE);": 2192,
    "renderingEngine.message(StringResources.WIN_MESSAGE);": 2193,
    "//exit(0);": 2194,
    "ActionResult.Failed(action,StringResources.INVALID_INPUT_MESSAGE);": 2195,
    "ActionResult.Failed(action,StringResources.UNDO_QUOTA_RUN_OUT);": 2196,
    "(!state.gameMap.getPlayerIds().contains(action.getInitiator()))": 2197,
    "{//filter": 2198,
    "ActionResult.Failed(action,StringResources.PLAYER_NOT_FOUND);": 2199,
    "Move.Up)": 2200,
    "//Up": 2201,
    "playerPos": 2202,
    "state.gameMap.getMap();": 2203,
    "(playerPos.y()": 2204,
    "{//bound": 2205,
    "(map[playerPos.x()][playerPos.y()": 2206,
    "1]": 2207,
    "map[playerPos.x()][playerPos.y()": 2208,
    "state.move(playerPos,": 2209,
    "playerPos.of(playerPos.x(),": 2210,
    "playerPos.y()": 2211,
    "(char)": 2212,
    "('a'": 2213,
    "action.getInitiator()))": 2214,
    "//push": 2215,
    "(!(map[playerPos.x()][playerPos.y()": 2216,
    "2]": 2217,
    "'@'))": 2218,
    "state.move(playerPos.of(playerPos.x(),": 2219,
    "1),playerPos.of(playerPos.x(),": 2220,
    "Move.Left)": 2221,
    "//Left": 2222,
    "(playerPos.x()": 2223,
    "//bound": 2224,
    "(map[playerPos.x()": 2225,
    "1][playerPos.y()]": 2226,
    "map[playerPos.x()": 2227,
    "playerPos.of(playerPos.x()": 2228,
    "1,": 2229,
    "playerPos.y()));": 2230,
    "(!(map[playerPos.x()": 2231,
    "2][playerPos.y()]": 2232,
    "state.move(playerPos.of(playerPos.x()": 2233,
    "playerPos.y()),playerPos.of(playerPos.x()": 2234,
    "2,": 2235,
    "Move.Right)": 2236,
    "//Right": 2237,
    "state.gameMap.getMaxWidth())": 2238,
    "{//push": 2239,
    "Move.Down)": 2240,
    "//Down": 2241,
    "state.gameMap.getMaxHeight())": 2242,
    "playerID;": 2243,
    "this.boxDestinations": 2244,
    "mapDevided[position.x()][position.y()]": 2245,
    "'#';": 2246,
    "('A'": 2247,
    "player;": 2248,
    "this.player[((Player)": 2249,
    "entity).getId()]": 2250,
    "position;": 2251,
    "box;": 2252,
    "this.box.get(((Box)": 2253,
    "entity).getPlayerId()).add(position);": 2254,
    "//update": 2255,
    "TOD": 2256,
    "map.getMaxWidth();": 2257,
    "this.maxheight": 2258,
    "=map.getMaxHeight();": 2259,
    "map.getDestinations();": 2260,
    "this.walls": 2261,
    "map.getWalls();": 2262,
    "this.emptys": 2263,
    "map.getEmptys();": 2264,
    "this.boxsloc": 2265,
    "map.getBoxsloc();": 2266,
    "this.playersloc": 2267,
    "map.getPlayersloc();": 2268,
    "this.boxs": 2269,
    "map.getBoxs();": 2270,
    "this.players": 2271,
    "map.getPlayers();": 2272,
    "map.getUndoLimit().orElse(0);": 2273,
    "drawGamestate();": 2274,
    "worldgamestate[position.x()+position.y()*maxwidth];": 2275,
    "(inputLine.equals(\"exit\"))": 2276,
    "(inputLine.equals(\"u\"))": 2277,
    "(inputLine.equals(\"s\"))": 2278,
    "Move.Down(GameMap.playersId.get(0));": 2279,
    "(inputLine.equals(\"a\"))": 2280,
    "Move.Left(GameMap.playersId.get(0));": 2281,
    "(inputLine.equals(\"d\"))": 2282,
    "Move.Right(GameMap.playersId.get(0));": 2283,
    "(inputLine.equals(\"w\"))": 2284,
    "Move.Up(GameMap.playersId.get(0));": 2285,
    "(GameMap.playersId.size()<2)": 2286,
    "(inputLine.equals(\"h\"))": 2287,
    "InvalidInput(0,\"Player": 2288,
    "(inputLine.equals(\"j\"))": 2289,
    "(inputLine.equals(\"k\"))": 2290,
    "(inputLine.equals(\"l\"))": 2291,
    "Move.Left(GameMap.playersId.get(1));": 2292,
    "Move.Down(GameMap.playersId.get(1));": 2293,
    "Move.Up(GameMap.playersId.get(1));": 2294,
    "Move.Right(GameMap.playersId.get(1));": 2295,
    "bool": 2296,
    "worldgamestate[from.x()+from.y()*maxwidth]instanceof": 2297,
    "Box;": 2298,
    "(bool)": 2299,
    "i=0;i<boxsloc.size();i++)": 2300,
    "(worldgamestate[from.x()+from.y()*maxwidth].equals(boxs.get(i)))": 2301,
    "boxIndexmoved=i;": 2302,
    "worldgamestate[to.x()+": 2303,
    "to.y()*maxwidth]": 2304,
    "worldgamestate[from.x()+from.y()*maxwidth];": 2305,
    "worldgamestate[from.x()+from.y()*maxwidth]": 2306,
    "boxsloc.size();": 2307,
    "(boxsloc.get(i).equals(from))": 2308,
    "boxsloc.set(i,": 2309,
    "playersloc.size();": 2310,
    "(playersloc.get(i).equals(from))": 2311,
    "playersloc.set(i,": 2312,
    "}//System.out.print(boxsloc);": 2313,
    "Entity[]": 2314,
    "cp": 2315,
    "Entity[maxwidth*maxheight];": 2316,
    "0;i<cp.length;i++)": 2317,
    "cp[i]": 2318,
    "worldgamestate[i];": 2319,
    "checkpt.push(cp);": 2320,
    "(checkpt.empty())": 2321,
    "0;i<worldgamestate.length;i++)": 2322,
    "worldgamestate[i]": 2323,
    "GameMap.getWorld()[i];": 2324,
    "(GameMap.getWorld()[i]instanceof": 2325,
    "j=0;j<players.size();j++)": 2326,
    "(players.get(j).getId()==((Player)": 2327,
    "GameMap.getWorld()[i]).getId())": 2328,
    "playersloc.set(j,Position.of(i%maxwidth,i/maxwidth));": 2329,
    "(checkpt.size()==1)": 2330,
    "checkpt.pop();": 2331,
    "(undolimit>=1)": 2332,
    "undolimit-=1;": 2333,
    "(worldgamestate[i]instanceof": 2334,
    "boxsloc.set(boxIndexmoved,": 2335,
    "Position.of(i": 2336,
    "maxwidth,": 2337,
    "/": 2338,
    "maxwidth));": 2339,
    "b": 2340,
    "(b)": 2341,
    "undocheckpt": 2342,
    "checkpt.get(checkpt.size()-1);": 2343,
    "(undolimit": 2344,
    "worldgamestate.length;": 2345,
    "(undocheckpt[i]": 2346,
    "players.size();": 2347,
    "(players.get(j).getId()": 2348,
    "undocheckpt[i]).getId())": 2349,
    "playersloc.set(j,": 2350,
    "undocheckpt[i];": 2351,
    "(gameState.getPlayers().size()>2)": 2352,
    "renderingEngine.render(super.state);": 2353,
    "(super.state.getUndoQuota().isPresent())": 2354,
    "Quata:": 2355,
    "super.state.getUndoQuota().get().toString());": 2356,
    "inputaction": 2357,
    "inputresult": 2358,
    "processAction(inputaction);": 2359,
    "(inputresult": 2360,
    "inputresult).getReason());": 2361,
    "(!(super.a": 2362,
    "Exit))": 2363,
    "playerTolocation": 2364,
    "Position(0,0);": 2365,
    "boxTolocation": 2366,
    "playnowlocation": 2367,
    "(state.getUndoQuota().isPresent())": 2368,
    "//System.out.println(((InvalidInput)": 2369,
    "action).getMessage());": 2370,
    "((InvalidInput)": 2371,
    "Position.of(playnowlocation.x(),": 2372,
    "playnowlocation.y()+1);": 2373,
    "playnowlocation.y()+2);": 2374,
    "Position.of(playnowlocation.x()-1,": 2375,
    "playnowlocation.y());": 2376,
    "Position.of(playnowlocation.x()-2,": 2377,
    "Position.of(playnowlocation.x()+1,": 2378,
    "Position.of(playnowlocation.x()+2,": 2379,
    "playnowlocation.y()-1);": 2380,
    "playnowlocation.y()-2);": 2381,
    "(state.getEntity(playerTolocation)instanceof": 2382,
    "state.move(playnowlocation,playerTolocation);": 2383,
    "//playerTolocation": 2384,
    "must": 2385,
    "state.getEntity(playerTolocation)).getPlayerId()!=action.getInitiator())": 2386,
    "(state.getEntity(boxTolocation)instanceof": 2387,
    "state.move(playerTolocation,boxTolocation);": 2388,
    "playerIdset": 2389,
    "players.forEach(n": 2390,
    "playerIdset.add(n.getId()));": 2391,
    "playerIdset;": 2392,
    "//drawmap();": 2393,
    "world[position.x()+position.y()*maxwidth]": 2394,
    "this.deepCopyMap(GameMap.initialMap);": 2395,
    "this.gameMap.destinations;": 2396,
    "this.checkPoints": 2397,
    "Stack();": 2398,
    "(position.x()": 2399,
    "this.map.length": 2400,
    "position.x()": 2401,
    "this.map[position.y()].length)": 2402,
    "this.map[position.y()][position.x()];": 2403,
    "(c": 2404,
    "')": 2405,
    "'#')": 2406,
    "(Character.isLowerCase(c))": 2407,
    "Box(c": 2408,
    "'a');": 2409,
    "(Character.isUpperCase(c))": 2410,
    "Player(c": 2411,
    "'A');": 2412,
    "(inputLine.equalsIgnoreCase(StringResources.EXIT_COMMAND_TEXT))": 2413,
    "(inputLine.equalsIgnoreCase(\"a\"))": 2414,
    "(inputLine.equalsIgnoreCase(\"s\"))": 2415,
    "(inputLine.equalsIgnoreCase(\"w\"))": 2416,
    "(inputLine.equalsIgnoreCase(\"d\"))": 2417,
    "(inputLine.equalsIgnoreCase(\"h\"))": 2418,
    "(inputLine.equalsIgnoreCase(\"j\"))": 2419,
    "(inputLine.equalsIgnoreCase(\"k\"))": 2420,
    "(inputLine.equalsIgnoreCase(\"l\"))": 2421,
    "(inputLine.equalsIgnoreCase(\"u\"))": 2422,
    "this.map[from.y()][from.x()];": 2423,
    "//char": 2424,
    "this.map[to.y()][to.x()];": 2425,
    "this.map[from.y()][from.x()]": 2426,
    "(char)(this.destinations.contains(from)": 2427,
    "'.');": 2428,
    "this.map[to.y()][to.x()]": 2429,
    "fromEntity;": 2430,
    "this.checkPoints.push(this.deepCopyMap(this.map));": 2431,
    "(this.undoQuota": 2432,
    "!this.checkPoints.isEmpty())": 2433,
    "--this.undoQuota;": 2434,
    "(!this.checkPoints.empty())": 2435,
    "this.checkPoints.pop();": 2436,
    "(this.checkPoints.empty())": 2437,
    "this.deepCopyMap((char[][])this.checkPoints.peek());": 2438,
    "this.renderingEngine.message(StringResources.GAME_READY_MESSAGE);": 2439,
    "while(!this.shouldStop())": 2440,
    "(this.state.getUndoQuota().isEmpty())": 2441,
    "this.renderingEngine.message(StringResources.UNDO_QUOTA_UNLIMITED);": 2442,
    "this.state.getUndoQuota().get());": 2443,
    "this.processAction(action);": 2444,
    "this.renderingEngine.message(((ActionResult.Failed)result).getReason());": 2445,
    "this.renderingEngine.message(StringResources.WIN_MESSAGE);": 2446,
    "currPos=state.getPlayerPositionById(m.getInitiator());": 2447,
    "(currPos==null)": 2448,
    "StringResources.PLAYER_NOT_FOUND);": 2449,
    "nextPos=m.nextPosition(currPos);": 2450,
    "destinationEntity=state.getEntity(nextPos);": 2451,
    "(destinationEntity)": 2452,
    "b->": 2453,
    "(b.getPlayerId()!=m.getInitiator())": 2454,
    "player's": 2455,
    "boxNextPos=m.nextPosition(nextPos);": 2456,
    "(!(state.getEntity(boxNextPos)": 2457,
    "state.move(nextPos,": 2458,
    "boxNextPos);": 2459,
    "state.move(currPos,": 2460,
    "nextPos);": 2461,
    "ignored->": 2462,
    "this.state.move(currPos,": 2463,
    "\"!!!!1/2,": 2464,
    "position!!!!\");": 2465,
    "(!this.state.getUndoQuota().isEmpty()": 2466,
    "StringResources.UNDO_QUOTA_RUN_OUT);": 2467,
    "i->": 2468,
    "i.getMessage());": 2469,
    "shouldStop=true;": 2470,
    "\"!!!!2/2,": 2471,
    "processAction": 2472,
    "failed!!!!\");": 2473,
    "(entity)": 2474,
    "(b.getPlayerId()": 2475,
    "(p.getId()": 2476,
    "map.getGameMap();": 2477,
    "this.playersPosition": 2478,
    "map.playersPosition;": 2479,
    "this.currentMap.get(position);": 2480,
    "this.currentMap.put(to,": 2481,
    "this.currentMap.get(from));": 2482,
    "this.currentMap.put(from,": 2483,
    "parsePlayerPosition();": 2484,
    "HashMap<Position,": 2485,
    "previousMap": 2486,
    "copy(this.currentMap);": 2487,
    "this.checkpoints.add(previousMap);": 2488,
    "(this.undoQuota.isPresent())": 2489,
    "(this.checkpoints.size()": 2490,
    "(value": 2491,
    "Optional.of(value": 2492,
    "copy(this.checkpoints.get(this.checkpoints.size()": 2493,
    "this.checkpoints.remove(this.checkpoints.size()": 2494,
    "copy(this.checkpoints.get(0));": 2495,
    "while(!this.shouldStop()){": 2496,
    "this.renderingEngine.render(state);": 2497,
    "if(state.getUndoQuota().isPresent()){": 2498,
    "Integer.valueOf(state.getUndoQuota().get());": 2499,
    "-1){": 2500,
    "this.renderingEngine.message(String.format(StringResources.UNDO_QUOTA_TEMPLATE,": 2501,
    "undoQuota));": 2502,
    "this.renderingEngine.message(StringResources.LINE_BREAKERS);": 2503,
    "this.renderingEngine.message(StringResources.GAME_EXIT_MESSAGE);": 2504,
    "outputSteam.print(content": 2505,
    "System.lineSeparator());": 2506,
    "(!state.map.getPlayerIds().contains(id))": 2507,
    "ActionResult.Failed(move,": 2508,
    "state.getPlayerPositionById(id);": 2509,
    "move.nextPosition(position);": 2510,
    "state.getEntity(nextPosition);": 2511,
    "StringResources.HIT_A_WALL);": 2512,
    "StringResources.MOVE_OTHER_PLAYER);": 2513,
    "(!(state.getEntity(move.nextPosition(nextPosition))": 2514,
    "StringResources.FAILED_TO_PUSH_BOX);": 2515,
    "state.move(nextPosition,": 2516,
    "move.nextPosition(nextPosition));": 2517,
    "state.move(position,": 2518,
    "nextPosition);": 2519,
    "StringResources.HIT_OTHER_PLAYER);": 2520,
    "StringResources.UNKNOWN_ENTITY);": 2521,
    "ActionResult.Failed(undo,": 2522,
    "invalidInput": 2523,
    "ActionResult.Failed(invalidInput,": 2524,
    "StringResources.UNKNOWN_ACTION);": 2525,
    "this.playerIds;": 2526,
    "Optional.of(undoLimit);": 2527,
    "Entity>();": 2528,
    "HashMap<Integer,": 2529,
    "Position>();": 2530,
    "this.gameMap.put(position,": 2531,
    "this.currentBoxLocations": 2532,
    "HashMap<>();": 2533,
    "this.currentPlayerLocations": 2534,
    "this.moveHistoryOfEntity": 2535,
    "Stack<>();": 2536,
    "(map.getUndoLimit().isEmpty())": 2537,
    "this.exitCondition": 2538,
    "locations": 2539,
    "come": 2540,
    "getMapMaxHeight();": 2541,
    "getMapMaxWidth();": 2542,
    "map.getEntity(new": 2543,
    "currentBoxLocations.put(new": 2544,
    "i),": 2545,
    "(char)(((Box)entity).getPlayerId()+97));": 2546,
    "currentPlayerLocations.put((char)(((Player)entity).getId()+65),": 2547,
    "init": 2548,
    "state": 2549,
    "gameMap.entityArray[position.y()][position.x()];": 2550,
    "inputLineUP": 2551,
    "inputLine.toUpperCase();": 2552,
    "(inputLineUP)": 2553,
    "A": 2554,
    "B": 2555,
    "\"U\":": 2556,
    "\"EXIT\":": 2557,
    "((Player)entity).getId();": 2558,
    "charID": 2559,
    "(char)(id+65);": 2560,
    "currentPlayerLocations.remove(charID);": 2561,
    "currentPlayerLocations.put(charID,": 2562,
    "Position(to.x(),": 2563,
    "to.y()));": 2564,
    "((Box)entity).getPlayerId();": 2565,
    "(char)(id+97);": 2566,
    "currentBoxLocations.remove(from);": 2567,
    "currentBoxLocations.put(to,": 2568,
    "charID);": 2569,
    "GameMap.entityArray[to.y()][to.x()]": 2570,
    "GameMap.entityArray[from.y()][from.x()];": 2571,
    "GameMap.entityArray[from.y()][from.x()]": 2572,
    "perform": 2573,
    "store": 2574,
    "entityArrayCheckpoint": 2575,
    "Entity[getMapMaxHeight()][getMapMaxWidth()];": 2576,
    "entityArrayCheckpoint.length;": 2577,
    "entityArrayCheckpoint[0].length;": 2578,
    "getEntity(new": 2579,
    "entityArrayCheckpoint[i][j]": 2580,
    "Player(((Player)entity).getId());": 2581,
    "Box(((Box)entity).getPlayerId());": 2582,
    "outside": 2583,
    "wall": 2584,
    "moveHistoryOfEntity.push(entityArrayCheckpoint);": 2585,
    "(moveHistoryOfEntity.size()": 2586,
    "(not": 2587,
    "moveHistoryOfEntity.pop();": 2588,
    "remove": 2589,
    "recent": 2590,
    "get": 2591,
    "previous": 2592,
    "moveHistoryOfEntity.peek();": 2593,
    "entityArrayCheckpoint[i][j];": 2594,
    "entity).getId();": 2595,
    "(id": 2596,
    "65);": 2597,
    "gameMap.entityArray[i][j]": 2598,
    "Player(id);": 2599,
    "entity).getPlayerId();": 2600,
    "97);": 2601,
    "Box(id);": 2602,
    "currentBoxLocations.remove(new": 2603,
    "(undoQuota": 2604,
    "undoQuota--;": 2605,
    "numOfPlayers": 2606,
    "gameState.getMapMaxHeight();": 2607,
    "gameState.getMapMaxWidth();": 2608,
    "(gameState.getEntity(new": 2609,
    "i))": 2610,
    "numOfPlayers++;": 2611,
    "(numOfPlayers": 2612,
    "unlimited": 2613,
    "quota": 2614,
    "renderingEngine.message(String.format(StringResources.UNDO_QUOTA_TEMPLATE,": 2615,
    "StringResources.UNDO_QUOTA_UNLIMITED));": 2616,
    "limited": 2617,
    "state.getUndoQuota().get()));": 2618,
    "process": 2619,
    "fail": 2620,
    "process,": 2621,
    "give": 2622,
    "success,": 2623,
    "renderingEngine.message(((ActionResult.Failed)result).getReason());": 2624,
    "renderingEngine.message(((InvalidInput)action).getMessage());": 2625,
    "ignore": 2626,
    "since": 2627,
    "handled": 2628,
    "AbstractSokobanGame::processAction": 2629,
    "(!shouldStop());": 2630,
    "end": 2631,
    "win": 2632,
    "state.changeExitCondition();": 2633,
    "does": 2634,
    "exist?": 2635,
    "(position": 2636,
    "upper": 2637,
    "location": 2638,
    "(state.getEntity(new": 2639,
    "Position(position.x(),": 2640,
    "position.y()-1))": 2641,
    "((Box)state.getEntity(new": 2642,
    "position.y()-1))).getPlayerId();": 2643,
    "belongs": 2644,
    "you?": 2645,
    "further": 2646,
    "moveable": 2647,
    "empty": 2648,
    "position.y()-2))": 2649,
    "state.move(new": 2650,
    "position.y()-1),": 2651,
    "position.y()-2));": 2652,
    "position.y()),": 2653,
    "position.y()-1));": 2654,
    "2:": 2655,
    "3:": 2656,
    "4:": 2657,
    "state.getEntity(new": 2658,
    "1))).getPlayerId();": 2659,
    "lower": 2660,
    "2))": 2661,
    "Position(position.x()-1,": 2662,
    "position.y()))": 2663,
    "position.y()))).getPlayerId();": 2664,
    "Position(position.x()-2,": 2665,
    "position.y()));": 2666,
    "Position(position.x()+1,": 2667,
    "Position(position.x()+2,": 2668,
    "Optional<Integer>": 2669,
    "state.getUndoQuota();": 2670,
    "(undoQuota.get()": 2671,
    "anymore": 2672,
    "this(maxWidth,": 2673,
    "Optional.ofNullable(undoLimit));": 2674,
    "entityArray[position.y()][position.x()]": 2675,
    "GameMap(map.getMaxWidth(),": 2676,
    "map.getMaxHeight(),": 2677,
    "map.getDestinations(),": 2678,
    "map.getUndoLimit().get());": 2679,
    "originalMap.putMap(map.getMap());": 2680,
    "currentState": 2681,
    "lastMap": 2682,
    "lastMap.putMap(map.getMap());": 2683,
    "checkPointList": 2684,
    "currentState.getMap().get(position.y()).get(position.x());": 2685,
    "(inputLine.charAt(0)": 2686,
    "'i')": 2687,
    "obj": 2688,
    "(obj": 2689,
    "currentState.putEntity(to,": 2690,
    "obj);": 2691,
    "currentState.putEntity(from,": 2692,
    "//printMap();": 2693,
    "List<List<Entity>>": 2694,
    "toBeRecord": 2695,
    "lastMap.getMap())": 2696,
    "row": 2697,
    "ArrayList<Entity>();": 2698,
    "i)": 2699,
    "row.add(j);": 2700,
    "toBeRecord.add(row);": 2701,
    "checkPointList.add(toBeRecord);": 2702,
    "lastMap.putMap(currentState.getMap());": 2703,
    "index": 2704,
    "checkPointList.size()": 2705,
    "if(index": 2706,
    "currentState.putMap(originalMap.getMap());": 2707,
    "currentState.putMap(checkPointList.get(index));": 2708,
    "(index": 2709,
    "lastMap.putMap(originalMap.getMap());": 2710,
    "lastMap.putMap(checkPointList.get(index": 2711,
    "checkPointList.remove(index);": 2712,
    "undoLeft": 2713,
    "undoQuota.get();": 2714,
    "Integer.valueOf((undoLeft.intValue()": 2715,
    "Optional.of(undoLeft);": 2716,
    "this.gameState": 2717,
    "System.out.println(\"Sokoban": 2718,
    "System.out.println(\"Undo": 2719,
    "gameState.getUndoQuota());": 2720,
    "(true)": 2721,
    "(shouldStop()": 2722,
    "inputEngine.fetchAction()": 2723,
    "outputSteam.print(content);": 2724,
    "action).nextPosition(state.getPlayerPositionById(action.getInitiator()));": 2725,
    "nextEnt": 2726,
    "state.getEntity(nextPos);": 2727,
    "(nextEnt": 2728,
    "state.move(state.getPlayerPositionById(action.getInitiator()),": 2729,
    "Wall.\");": 2730,
    "nextEnt).getPlayerId();": 2731,
    "action).nextPosition(nextPos);": 2732,
    "(state.getEntity(nextNextPos)": 2733,
    "state.getEntity(nextNextPos)": 2734,
    "nextNextPos);": 2735,
    "playerList)": 2736,
    "players.add(i.getId());": 2737,
    "players;": 2738,
    "mapWidth": 2739,
    "mapHeight": 2740,
    "destinations)": 2741,
    "this.destinations.add(i);": 2742,
    "this.playerList": 2743,
    "//System.out.println(\"Tring": 2744,
    "put": 2745,
    "(\"+position.x()+\",": 2746,
    "\"+position.y()+\")\");": 2747,
    "this.map.get(position.y()).set(position.x(),": 2748,
    "(map.getUndoLimit().isPresent())": 2749,
    "undoQuotaLeft": 2750,
    "++x)": 2751,
    "++y)": 2752,
    "Position.of(x,": 2753,
    "map.getEntity(position);": 2754,
    "(Player)entity;": 2755,
    "playerPosition.put(player.getId(),": 2756,
    "position);": 2757,
    "(Box)entity;": 2758,
    "boxPosition.put(box,": 2759,
    "this.map.put(position,": 2760,
    "map.get(position);": 2761,
    "(inputLine.toUpperCase())": 2762,
    "\"EXIT\"": 2763,
    "Object": 2764,
    "map.get(from);": 2765,
    "map.replace(to,": 2766,
    "map.get(from));": 2767,
    "map.replace(from,": 2768,
    "playerPosition.replace(player.getId(),": 2769,
    "boxPosition.replace(box,": 2770,
    "Map<Position,": 2771,
    "newMap": 2772,
    "this.gameMap.getMaxWidth();": 2773,
    "this.gameMap.getMaxHeight();": 2774,
    "newMap.put(position,": 2775,
    "map.get(position));": 2776,
    "moveHistory.add(newMap);": 2777,
    "(undoQuotaLeft": 2778,
    "mapToCopy;": 2779,
    "mapToCopy": 2780,
    "moveHistory.get(0);": 2781,
    "this.equalInitialMap": 2782,
    "moveHistory.get(moveHistory.size()": 2783,
    "2);": 2784,
    "moveHistory.remove(moveHistory.size()": 2785,
    "mapToCopy.get(position);": 2786,
    "numPlayer": 2787,
    "(numPlayer": 2788,
    "IllegalArgumentException(\"There": 2789,
    "more": 2790,
    "than": 2791,
    "map.\");": 2792,
    "renderingEngine.render(this.gameState);": 2793,
    "state.getUndoQuota().get().toString());": 2794,
    "failActionResult": 2795,
    "(ActionResult.Failed)": 2796,
    "actionResult;": 2797,
    "(!failActionResult.getReason().isEmpty())": 2798,
    "renderingEngine.message(failActionResult.getReason());": 2799,
    "this.ifExit": 2800,
    "m.getInitiator();": 2801,
    "(!state.gameMap.getPlayerIds().contains(playerId))": 2802,
    "fromPosition": 2803,
    "toPosition": 2804,
    "m.nextPosition(fromPosition);": 2805,
    "(!state.positionInMap(toPosition))": 2806,
    "\"Cannot": 2807,
    "state.getEntity(toPosition);": 2808,
    "newToPosition": 2809,
    "m.nextPosition(toPosition);": 2810,
    "newEntity": 2811,
    "state.getEntity(newToPosition);": 2812,
    "(newEntity": 2813,
    "state.move(toPosition,": 2814,
    "newToPosition);": 2815,
    "state.move(fromPosition,": 2816,
    "toPosition);": 2817,
    "state.equalInitialMap": 2818,
    "(state.moveHistory.size()": 2819,
    "!state.equalInitialMap){": 2820,
    "\"\");": 2821,
    "HashSet<Integer>": 2822,
    "for(var": 2823,
    "entity:": 2824,
    "map.values())": 2825,
    "playerIds.add(player.getId());": 2826,
    "this.destinations.addAll(destinations);": 2827,
    "(map.containsKey(position))": 2828,
    "map.replace(position,": 2829,
    "map.put(position,": 2830,
    "player_loc": 2831,
    "map.getInit_player_loc();": 2832,
    "map.getInit_player();": 2833,
    "if(map.getUndoLimit().isPresent()){": 2834,
    "map.getInit_box();": 2835,
    "box_loc": 2836,
    "map.getInit_box_loc();": 2837,
    "effective_loc": 2838,
    "map.getEffective_loc();": 2839,
    "move_history": 2840,
    "move_times": 2841,
    "(box_loc.contains(position)){": 2842,
    "Box(box.get(box_loc.indexOf(position)));": 2843,
    "(player_loc.contains(position)){": 2844,
    "Player(player.get(player_loc.indexOf(position)));": 2845,
    "(map.getEntity(position)": 2846,
    "(effective_loc.contains(position)){": 2847,
    "(inputLine.toLowerCase())": 2848,
    "ArrayList<Position>": 2849,
    "move.add(from);": 2850,
    "move.add(to);": 2851,
    "(player_loc.contains(from)){": 2852,
    "player_loc.set(player_loc.indexOf(from),": 2853,
    "(box_loc.contains(from)){": 2854,
    "box_loc.set(box_loc.indexOf(from),": 2855,
    "move_history.add(move);": 2856,
    "checkpoint.addAll(move_history);": 2857,
    "move_times.add(move_history.size());": 2858,
    "move_history.removeAll(move_history);": 2859,
    "(!checkpoint.isEmpty()){": 2860,
    "move_times.get(move_times.size()-1);": 2861,
    "checkpoint.get(checkpoint.size()-1).get(1);": 2862,
    "checkpoint.get(checkpoint.size()-1).get(0);": 2863,
    "checkpoint.remove(checkpoint.size()-1);": 2864,
    "move_times.remove(move_times.size()-1);": 2865,
    "(undo": 2866,
    "undo--;": 2867,
    "ready.n\");": 2868,
    "if(state.getUndoQuota().orElse(0)": 2869,
    "-1){renderingEngine.message(\"nUndo": 2870,
    "\"+state.getUndoQuota().orElse(0)+\"n\");}": 2871,
    "else{renderingEngine.message(\"nUnlimitedn\");}": 2872,
    "(true){": 2873,
    "fail)": 2874,
    "renderingEngine.message(fail.getReason());": 2875,
    "(actionResult.getAction()": 2876,
    "shouldStop()){": 2877,
    "exits.n\");": 2878,
    "(state.isWin()){": 2879,
    "Objects.requireNonNull(state.getPlayerPositionById(m.getInitiator())).x()": 2880,
    "-10000": 2881,
    "Objects.requireNonNull(state.getPlayerPositionById(m.getInitiator())).y()": 2882,
    "-10000){": 2883,
    "found.n\");": 2884,
    "d": 2885,
    "player_pos": 2886,
    "state.getPlayerPositionById(d.getInitiator());": 2887,
    "Position.of(player_pos.x(),": 2888,
    "player_pos.y()+1);": 2889,
    "(state.getEntity(down)": 2890,
    "wall.n\");": 2891,
    "if(state.getEntity(down)": 2892,
    "player_pos.y()+2);": 2893,
    "(state.getEntity(check)": 2894,
    "state.getEntity(check)": 2895,
    "box.n\");": 2896,
    "if(state.getEntity(check)": 2897,
    "state.move(down,": 2898,
    "Position.of(down.x(),": 2899,
    "down.y()+1));": 2900,
    "state.move(player_pos,": 2901,
    "player_pos.y()+1));": 2902,
    "System.out.println(state.getEntity(Position.of(down.x(),": 2903,
    "down.y()+1)));": 2904,
    "IllegalArgumentException(\"This": 2905,
    "reached\");": 2906,
    "if(state.getAllPlayerPositions().contains(down)){": 2907,
    "player.n\");": 2908,
    "l": 2909,
    "state.getPlayerPositionById(l.getInitiator());": 2910,
    "Position.of(player_pos.x()-1,": 2911,
    "player_pos.y());": 2912,
    "(state.getEntity(left)": 2913,
    "if(state.getEntity(left)": 2914,
    "Position.of(player_pos.x()-2,": 2915,
    "state.move(left,": 2916,
    "Position.of(left.x()-1,": 2917,
    "left.y()));": 2918,
    "player_pos.y()));": 2919,
    "if(state.getAllPlayerPositions().contains(left)){": 2920,
    "ActionResult.Failed(action,\"This": 2921,
    "r": 2922,
    "state.getPlayerPositionById(r.getInitiator());": 2923,
    "Position.of(player_pos.x()+1,": 2924,
    "(state.getEntity(right)": 2925,
    "if(state.getEntity(right)": 2926,
    "Position.of(player_pos.x()+2,": 2927,
    "state.move(right,": 2928,
    "Position.of(right.x()+1,": 2929,
    "right.y()));": 2930,
    "if(state.getAllPlayerPositions().contains(right)){": 2931,
    "state.getPlayerPositionById(u.getInitiator());": 2932,
    "player_pos.y()-1);": 2933,
    "(state.getEntity(up)": 2934,
    "if(state.getEntity(up)": 2935,
    "player_pos.y()-2);": 2936,
    "state.move(up,": 2937,
    "Position.of(up.x(),": 2938,
    "up.y()-1));": 2939,
    "player_pos.y()-1));": 2940,
    "if(state.getAllPlayerPositions().contains(up)){": 2941,
    "ignored2": 2942,
    "ignored1": 2943,
    "(state.getUndoQuota().orElse(0)==0){": 2944,
    "quota.n\");": 2945,
    "Input.n\");": 2946,
    "player.addAll(init_player);": 2947,
    "init_box.add(o.getPlayerId());": 2948,
    "init_player_loc.add(position);": 2949,
    "p": 2950,
    "init_player.add(p.getId());": 2951,
    "->{}": 2952,
    "undos": 2953,
    "dests": 2954,
    "steps.add(map.map);": 2955,
    "walls": 2956,
    "map.walls;": 2957,
    "spaces": 2958,
    "map.spaces;": 2959,
    "initPlayers": 2960,
    "map.playerloc;": 2961,
    "initBoxes": 2962,
    "map.boxloc;": 2963,
    "curBoxes": 2964,
    "ArrayList<>(initBoxes);": 2965,
    "curPlayers": 2966,
    "ArrayList<>(initPlayers);": 2967,
    "player:": 2968,
    "curPlayers)": 2969,
    "(player.pos().x()": 2970,
    "player.pos().y()": 2971,
    "position.y())": 2972,
    "player.player();": 2973,
    "box:": 2974,
    "curBoxes)": 2975,
    "(box.pos().x()": 2976,
    "box.pos().y()": 2977,
    "box.box();": 2978,
    "pos:walls)": 2979,
    "(pos.x()": 2980,
    "pos.y()": 2981,
    "pos:spaces)": 2982,
    "switch(inputLine){": 2983,
    "\"r\"": 2984,
    "\"R\"": 2985,
    "InvalidInput(0,\"illgeal": 2986,
    "//checkpoint();": 2987,
    "to.x()": 2988,
    "from.x();": 2989,
    "to.y()": 2990,
    "from.y();": 2991,
    "tempOBJ": 2992,
    "if(tempOBJ": 2993,
    "p)": 2994,
    "/*": 2995,
    "if(getEntity(to)": 2996,
    "b)": 2997,
    "if(b.getPlayerId()": 2998,
    "p.getId())": 2999,
    "curBoxes.removeIf(temp": 3000,
    "temp.box.getPlayerId()": 3001,
    "b.getPlayerId()&&": 3002,
    "temp.pos().x()": 3003,
    "from.x()": 3004,
    "temp.pos.y()": 3005,
    "from.y());": 3006,
    "curBoxes.add(new": 3007,
    "BoxRec(b,": 3008,
    "Position.of(to.x()+x,to.y()+y)));": 3009,
    "}*/": 3010,
    "curPlayers.removeIf(temp": 3011,
    "temp.player().getId()": 3012,
    "p.getId());": 3013,
    "curPlayers.add(new": 3014,
    "PlayerRec(p,to));": 3015,
    "b){": 3016,
    "temp.box().getPlayerId()": 3017,
    "b.getPlayerId()": 3018,
    "from.y())": 3019,
    "BoxRec(b,to));": 3020,
    "List<PlayerRec>": 3021,
    "tempplayers": 3022,
    "ArrayList<>(curPlayers);": 3023,
    "List<BoxRec>": 3024,
    "tempboxes": 3025,
    "ArrayList<>(curBoxes);": 3026,
    "Snapshots.push(new": 3027,
    "Snapshot(new": 3028,
    "ArrayList<>(tempplayers),new": 3029,
    "ArrayList<>(tempboxes)));": 3030,
    "(!Snapshots.empty())": 3031,
    "Snapshots.pop();": 3032,
    "if(Snapshots.empty())": 3033,
    "recover": 3034,
    "Snapshots.peek();": 3035,
    "ArrayList<>(recover.cur_players());": 3036,
    "ArrayList<>(recover.cur_boxes());": 3037,
    "Num_players": 3038,
    "(Num_players": 3039,
    "I)": 3040,
    "ActionResult.Failed(I,": 3041,
    "E){": 3042,
    "state.setExitTotrue();": 3043,
    "ActionResult.Success(E);": 3044,
    "M){": 3045,
    "if(M": 3046,
    "L)": 3047,
    "pos": 3048,
    "state.getPlayerPositionById(L.getInitiator());": 3049,
    "if(state.getEntity(Position.of(pos.x()-1,pos.y()))": 3050,
    "B){": 3051,
    "(B.getPlayerId()": 3052,
    "L.getInitiator()){": 3053,
    "if(state.getEntity(Position.of(pos.x()-2,": 3054,
    "pos.y()))": 3055,
    "state.move(Position.of(pos.x()-1,pos.y()),Position.of(pos.x()-2,": 3056,
    "pos.y()));": 3057,
    "state.move(pos,Position.of(pos.x()-1,pos.y()));": 3058,
    "ActionResult.Success(L);": 3059,
    "\"illegal": 3060,
    "move\");": 3061,
    "R)": 3062,
    "state.getPlayerPositionById(R.getInitiator());": 3063,
    "if(state.getEntity(Position.of(pos.x()+1,pos.y()))": 3064,
    "R.getInitiator()){": 3065,
    "if(state.getEntity(Position.of(pos.x()+2,": 3066,
    "state.move(Position.of(pos.x()+1,pos.y()),Position.of(pos.x()+2,": 3067,
    "state.move(pos,Position.of(pos.x()+1,pos.y()));": 3068,
    "ActionResult.Success(R);": 3069,
    "U)": 3070,
    "state.getPlayerPositionById(U.getInitiator());": 3071,
    "if(state.getEntity(Position.of(pos.x(),pos.y()-1))": 3072,
    "U.getInitiator()){": 3073,
    "if(state.getEntity(Position.of(pos.x(),": 3074,
    "pos.y()-2))": 3075,
    "state.move(Position.of(pos.x(),pos.y()-1),Position.of(pos.x(),": 3076,
    "pos.y()-2));": 3077,
    "state.move(pos,Position.of(pos.x(),pos.y()-1));": 3078,
    "ActionResult.Success(U);": 3079,
    "D)": 3080,
    "state.getPlayerPositionById(D.getInitiator());": 3081,
    "if(state.getEntity(Position.of(pos.x(),pos.y()+1))": 3082,
    "D.getInitiator()){": 3083,
    "pos.y()+2))": 3084,
    "state.move(Position.of(pos.x(),pos.y()+1),Position.of(pos.x(),": 3085,
    "pos.y()+2));": 3086,
    "state.move(pos,Position.of(pos.x(),pos.y()+1));": 3087,
    "ActionResult.Success(D);": 3088,
    "U){": 3089,
    "if(state.undos": 3090,
    "<1)": 3091,
    "ActionResult.Failed(U,\"No": 3092,
    "left\");": 3093,
    "ActionResult.Failed(action,\"unknown": 3094,
    "reason\");": 3095,
    "tempset": 3096,
    "c:players)": 3097,
    "tempset.add((int)(c": 3098,
    "'A'));": 3099,
    "tempset;": 3100,
    "this.playerPos": 3101,
    "map.entityPos.entrySet().stream()": 3102,
    ".filter(o": 3103,
    "o.getValue()": 3104,
    ".collect(Collectors.toMap(o": 3105,
    "o.getKey(),": 3106,
    "o.getValue(),": 3107,
    "(prev,": 3108,
    "next)": 3109,
    "next,": 3110,
    "HashMap::new));": 3111,
    "(this.playerPos.size()": 3112,
    "HashSet<Object>(this.playerPos.values()).size()": 3113,
    "this.playerPos.size()": 3114,
    "26){": 3115,
    "either": 3116,
    "too": 3117,
    "many": 3118,
    "this.boxPos": 3119,
    "this.emptyPos": 3120,
    "this.undo": 3121,
    "this.checkpoint.add(new": 3122,
    "GameState(this));": 3123,
    "(boxPos.get(position)": 3124,
    "boxPos.get(position);": 3125,
    "(playerPos.get(position)": 3126,
    "playerPos.get(position);": 3127,
    "(emptyPos.get(position)": 3128,
    "emptyPos.get(position);": 3129,
    "lcinput": 3130,
    "(lcinput.equals(\"exit\"))": 3131,
    "(lcinput.equals(\"u\"))": 3132,
    "(lcinput.matches(\"a|s|d|w\"))": 3133,
    "(lcinput)": 3134,
    "(lcinput.matches(\"h|j|k|l\"))": 3135,
    "this.boxPos.put(to,entity);": 3136,
    "this.boxPos.remove(from);": 3137,
    "this.emptyPos.put(from,new": 3138,
    "this.playerPos.put(to,entity);": 3139,
    "this.playerPos.remove(from);": 3140,
    "checkpoint.add(new": 3141,
    "size": 3142,
    "checkpoint.size();": 3143,
    "(checkpoint.size()==1){": 3144,
    "copyHashMap(checkpoint.get(0).boxPos);": 3145,
    "copyHashMap(checkpoint.get(0).playerPos);": 3146,
    "copyHashMap(checkpoint.get(0).emptyPos);": 3147,
    "copyHashMap(checkpoint.get(size-2).boxPos);": 3148,
    "copyHashMap(checkpoint.get(size-2).playerPos);": 3149,
    "copyHashMap(checkpoint.get(size-2).emptyPos);": 3150,
    "this.checkpoint.remove(size-1);": 3151,
    "this.renderingEngine.message(GAME_READY_MESSAGE);": 3152,
    "this.renderingEngine.render(super.state);": 3153,
    "this.renderingEngine.message(UNDO_QUOTA_UNLIMITED);": 3154,
    "state.getUndoQuota().get());": 3155,
    "super.processAction(action);": 3156,
    "(result.getAction()": 3157,
    "this.renderingEngine.message(GAME_EXIT_MESSAGE);": 3158,
    "this.renderingEngine.message(WIN_MESSAGE);": 3159,
    "currPos": 3160,
    "state.getPlayerPositionById(movement.getInitiator());": 3161,
    "(currPos": 3162,
    "movement.nextPosition(currPos);": 3163,
    "nextPosEntity": 3164,
    "(nextPosEntity){": 3165,
    "w": 3166,
    "ActionResult.Failed(movement,": 3167,
    "StringResources.INVALID_MOVEMENT_WALL);": 3168,
    "(movement.getInitiator()": 3169,
    "b.getPlayerId())": 3170,
    "StringResources.INVALID_MOVEMENT_BOX_TYPE);": 3171,
    "(state.getEntity(movement.nextPosition(nextPos))": 3172,
    "state.getEntity(movement.nextPosition(nextPos))": 3173,
    "StringResources.INVALID_MOVEMENT_BOX_WALL);": 3174,
    "movement.nextPosition(nextPos));": 3175,
    "Update": 3176,
    "StringResources.INVALID_MOVEMENT_PLAYER);": 3177,
    "state.move(currPos,nextPos);": 3178,
    "this.entityPos.values().stream().filter(o": 3179,
    "Player).map(o": 3180,
    "o;": 3181,
    "player.getId();": 3182,
    "}).collect(Collectors.toSet());": 3183,
    "this.boxDestPos": 3184,
    "this.entityPos.put(position,entity);": 3185,
    "currentMap": 3186,
    "mapCheckpoints": 3187,
    "mapCheckpoints.add(map.getMapSnapshot());": 3188,
    "((position.x())": 3189,
    "currentMap.getMaxWidth()": 3190,
    "(position.y())": 3191,
    "currentMap.getMaxHeight()-": 3192,
    "(position.x())": 3193,
    "0||": 3194,
    "this.errorMsg": 3195,
    "\"position": 3196,
    "bound\";": 3197,
    "currentMap.getEntity(position);": 3198,
    "pattern": 3199,
    "matching": 3200,
    "using": 3201,
    "objects": 3202,
    "statement": 3203,
    "currentMap.putEntity(to,": 3204,
    "currentMap.getEntity(from));": 3205,
    "(currentMap.getDestinations().contains(from))": 3206,
    "currentMap.putEntity(from,": 3207,
    "Empty(true));": 3208,
    "Empty(false));": 3209,
    "mapCheckpoints.add(currentMap.getMapSnapshot());": 3210,
    "(mapCheckpoints.size()": 3211,
    "setErrorMsg(\"You": 3212,
    "already\");": 3213,
    "(currentMap.getUndoLimit().isPresent()": 3214,
    "currentMap.getUndoLimit().get()": 3215,
    "(currentMap.getUndoLimit().isEmpty())": 3216,
    "currentMap.setMapSnapshot(mapCheckpoints.get(mapCheckpoints.size()": 3217,
    "this.popCheckPoint();": 3218,
    "currentMap.deductUndoLimit();": 3219,
    "IllegalArgumentException(\"Game": 3220,
    "(state.getUndoQuota()": 3221,
    "state.getUndoQuota().isPresent())": 3222,
    "infinity\");": 3223,
    "(!isExit": 3224,
    "!shouldStop())": 3225,
    "currentAction": 3226,
    "(currentAction": 3227,
    "processAction(currentAction);": 3228,
    "(state.getErrorMsg()": 3229,
    "\"normal\")": 3230,
    "renderingEngine.message(state.getErrorMsg());": 3231,
    "win!\");": 3232,
    "state.setErrorMsg(\"normal\");": 3233,
    "o:": 3234,
    "valid": 3235,
    "playerCurrentPosition": 3236,
    "state.getPlayerPositionById(o.getInitiator());": 3237,
    "playerNextPosition": 3238,
    "o.nextPosition(playerCurrentPosition);": 3239,
    "moveDestination": 3240,
    "state.getEntity(playerNextPosition);": 3241,
    "(moveDestination)": 3242,
    "m:": 3243,
    "state.move(playerCurrentPosition,": 3244,
    "playerNextPosition);": 3245,
    "state.setErrorMsg(\"You": 3246,
    "w:": 3247,
    "isBoxMoveValid": 3248,
    "Integer": 3249,
    "differencey": 3250,
    "playerNextPosition.y()": 3251,
    "playerCurrentPosition.y();": 3252,
    "differencex": 3253,
    "playerNextPosition.x()": 3254,
    "playerCurrentPosition.x();": 3255,
    "(m.getPlayerId()": 3256,
    "o.getInitiator())": 3257,
    "newX": 3258,
    "differencex;": 3259,
    "newY": 3260,
    "differencey;": 3261,
    "this.moveBox(playerNextPosition,": 3262,
    "Position.of(newX,": 3263,
    "newY));": 3264,
    "(isBoxMoveValid)": 3265,
    "state.setErrorMsg(\"Invalid": 3266,
    "enity\");": 3267,
    "entity\");": 3268,
    "this.playersIDs;": 3269,
    "create": 3270,
    "ArrayList<List<Entity>>();": 3271,
    "List<Entity>": 3272,
    "tempRow;": 3273,
    "(Integer": 3274,
    "this.maxHeight;": 3275,
    "tempRow": 3276,
    "this.maxWidth;": 3277,
    "(destinations.contains(Position.of(i,j)))": 3278,
    "tempRow.add(new": 3279,
    "map.add(tempRow);": 3280,
    "Empty()": 3281,
    "{}": 3282,
    "this.undoLeft": 3283,
    "this.boxes": 3284,
    "map.getBoxes();": 3285,
    "this.space": 3286,
    "map.getAll();": 3287,
    "space.get(position);": 3288,
    "\"invalidKey\");": 3289,
    "space.get(from);": 3290,
    "if(fromEntity": 3291,
    "play": 3292,
    "players.remove(play);": 3293,
    "players.put(play,to);": 3294,
    "space.put(from,new": 3295,
    "space.put(to,play);": 3296,
    "boxes.remove(box);": 3297,
    "boxes.put(box,to);": 3298,
    "space.put(to,box);": 3299,
    "achieved.add(new": 3300,
    "Tale(this));": 3301,
    "ptr": 3302,
    "achieved.size()": 3303,
    "if(undoLeft": 3304,
    "if(ptr": 3305,
    "achieved.remove(ptr--);": 3306,
    "Tale": 3307,
    "achieved.get(ptr);": 3308,
    "(HashMap<Player,": 3309,
    "Position>)": 3310,
    "temp.getPlayers().clone();": 3311,
    "(HashMap<Box,": 3312,
    "temp.getBoxes().clone();": 3313,
    "space": 3314,
    "(HashMap<Position,": 3315,
    "Entity>)": 3316,
    "temp.getSpace().clone();": 3317,
    "--undoLeft;": 3318,
    "gameState.getUndoQuota();": 3319,
    "renderingEngine.message(String.format(\"Undo": 3320,
    "%s\",(undo.isPresent())?undo.get():\"Unlimited\"));": 3321,
    "if(shouldStop()){": 3322,
    "if(result.getAction()": 3323,
    "run();": 3324,
    "toString()": 3325,
    "\"Item{\"": 3326,
    "\"letter=\"": 3327,
    "\",": 3328,
    "position=\"": 3329,
    "type=\"": 3330,
    "'}';": 3331,
    "(undo.isPresent()": 3332,
    "undo.get()": 3333,
    "if(playerPos": 3334,
    "state.getPlayerPositionById(current.getInitiator());": 3335,
    "state.getSpace();": 3336,
    "(current": 3337,
    "newPos": 3338,
    "Position(pos.x(),": 3339,
    "item": 3340,
    "space.get(newPos);": 3341,
    "(item": 3342,
    "unknownBox": 3343,
    "item;": 3344,
    "if(unknownBox.getPlayerId()": 3345,
    "newBoxPos": 3346,
    "Position(newPos.x(),": 3347,
    "newPos.y()": 3348,
    "newBoxItem": 3349,
    "space.get(newBoxPos);": 3350,
    "(newBoxItem": 3351,
    "state.move(newPos,": 3352,
    "newBoxPos);": 3353,
    "state.move(pos,": 3354,
    "newPos);": 3355,
    "Position(pos.x()": 3356,
    "pos.y());": 3357,
    "Position(newPos.x()": 3358,
    "newPos.y());": 3359,
    "(Object": 3360,
    "val": 3361,
    "players.values())": 3362,
    "val;": 3363,
    "playerId.add(play.getId());": 3364,
    "players.put((Player)": 3365,
    "entity,": 3366,
    "boxes.put((Box)": 3367,
    "done?": 3368,
    "locationofcrate": 3369,
    "getDestinations();": 3370,
    "locationofplayer": 3371,
    "mapp": 3372,
    "currentmap": 3373,
    "map.arrofstr;": 3374,
    "currentmap[position.y()": 3375,
    "1].charAt(position.x());": 3376,
    "(Character.isAlphabetic(temp))": 3377,
    "(Character.isUpperCase(temp))": 3378,
    "Player(temp": 3379,
    "Box(temp": 3380,
    "ans": 3381,
    "(temp)": 3382,
    "ans;": 3383,
    "//return": 3384,
    "if(action.getClass()": 3385,
    "Exit.class){": 3386,
    "if(this.shouldStop()){": 3387,
    "Move.class){": 3388,
    "ActionResult.Success(new": 3389,
    "Undo.class){": 3390,
    "InvalidInput.class){": 3391,
    "playerid;": 3392,
    "maxwidth": 3393,
    "maxheight": 3394,
    "if(undoLimit": 3395,
    "if(entity.getClass()": 3396,
    "Box.class){": 3397,
    "entity).getPlayerId()": 3398,
    "Player.class){": 3399,
    "(((Player)": 3400,
    "entity).getId()": 3401,
    "Wall.class){": 3402,
    "Empty.class){": 3403,
    "';": 3404,
    "tempchararr": 3405,
    "arrofstr[position.y()": 3406,
    "+1].toCharArray();": 3407,
    "tempchararr[position.x()]": 3408,
    "temp;": 3409,
    "String.valueOf(tempchararr);": 3410,
    "System.out.println(WIDTH);": 3411,
    "System.out.println(HEIGHT);": 3412,
    "this.limit": 3413,
    "this.setDesPos": 3414,
    "System.out.println(SET_DES_POS);": 3415,
    "map.getPlayerIds();": 3416,
    "hash": 3417,
    "argument": 3418,
    "height;": 3419,
    "width;": 3420,
    "currentEntity": 3421,
    "map.getEntity(Position.of(j,": 3422,
    "MAP_ID_POS.put(current_entity,": 3423,
    "Position.of(i,j));": 3424,
    "posEntity.put(Position.of(j,": 3425,
    "currentEntity);": 3426,
    "map.putEntity(Position.of(j,": 3427,
    "System.out.println(POS_ENTITY);": 3428,
    "posEntity.keySet())": 3429,
    "(posEntity.get(position)": 3430,
    "System.out.println(\"here\");": 3431,
    "POS_ID.put(i,": 3432,
    "System.out.println(POS_ID);": 3433,
    "allPlayer.add(position);": 3434,
    "initMap": 3435,
    "HashMap<>(posEntity);": 3436,
    "posEntity.get(Position.of(position.x(),": 3437,
    "posEntity.get(Position.of(from.x(),": 3438,
    "from.y()));": 3439,
    "posEntity.put(Position.of(from.x(),": 3440,
    "from.y()),": 3441,
    "posEntity.put(Position.of(to.x(),": 3442,
    "to.y()),": 3443,
    "recordHash.add(new": 3444,
    "HashMap<>(posEntity));": 3445,
    "(limit.isPresent())": 3446,
    "(limit.get()": 3447,
    "limit.get();": 3448,
    "limit.get()": 3449,
    "(recordHash.size()": 3450,
    "HashMap<>(initMap));": 3451,
    "posEntity": 3452,
    "HashMap<>(initMap);": 3453,
    "recordHash.remove(0);": 3454,
    "recordHash.remove(recordHash.size()": 3455,
    "HashMap<>(recordHash.get(recordHash.size()": 3456,
    "renderingEngine.message(String.valueOf(state.getUndoQuota().get()));": 3457,
    "processAction(up);": 3458,
    "ActionResult.Success)": 3459,
    "(!state.isWin())": 3460,
    "processAction(down);": 3461,
    "processAction(left);": 3462,
    "processAction(right);": 3463,
    "processAction(invalidInput);": 3464,
    "Here": 3465,
    "start": 3466,
    "renderingEngine.message(invalidInput.getMessage());": 3467,
    "processAction(undo);": 3468,
    "System.out.println(state.getUndoQuota().get());": 3469,
    "previous)": 3470,
    "processAction(exit);": 3471,
    "action.getInitiator();": 3472,
    "state.getPlayerPositionById(id).x();": 3473,
    "state.getPlayerPositionById(id).y();": 3474,
    "(state.getEntity(Position.of(x,": 3475,
    "y))": 3476,
    "y-1))": 3477,
    "y-2))": 3478,
    "state.move(Position.of(x,": 3479,
    "y-1),": 3480,
    "y-2));": 3481,
    "y),": 3482,
    "y-1));": 3483,
    "System.out.println(x);": 3484,
    "System.out.println(y);": 3485,
    "y+1))": 3486,
    "y+2))": 3487,
    "y+1),": 3488,
    "y+2));": 3489,
    "y+1));": 3490,
    "(state.getEntity(Position.of(x-1,": 3491,
    "(state.getEntity(Position.of(x-2,": 3492,
    "state.move(Position.of(x-1,": 3493,
    "Position.of(x-2,": 3494,
    "Position.of(x-1,": 3495,
    "(state.getEntity(Position.of(x+1,": 3496,
    "(state.getEntity(Position.of(x+2,": 3497,
    "state.move(Position.of(x+1,": 3498,
    "Position.of(x+2,": 3499,
    "Position.of(x+1,": 3500,
    "\"Game": 3501,
    "exits\");": 3502,
    "System.out.println(\"bug\");": 3503,
    "getplayerids": 3504,
    "hashEntity.keySet())": 3505,
    "(hashEntity.get(position)": 3506,
    "getplayerids.add(p.getId());": 3507,
    "getplayerids;": 3508,
    "this.des": 3509,
    "this.limitation": 3510,
    "Init": 3511,
    "2d-array": 3512,
    "this.height;": 3513,
    "ArrayList<>(width);": 3514,
    "this.width;": 3515,
    "temp.add(new": 3516,
    "Wall());": 3517,
    "entity_array.add(temp);": 3518,
    "hashEntity.put(position,": 3519,
    "undosLeft": 3520,
    "entityMap": 3521,
    "HashMap(map.getEntityMap());": 3522,
    "entityMap.get(position);": 3523,
    "input!\");": 3524,
    "entityMap.put(to,": 3525,
    "entityMap.get(from));": 3526,
    "entityMap.put(from,": 3527,
    "checkpoints.add(new": 3528,
    "HashMap<>(entityMap));": 3529,
    "(entityMap.equals(map.getEntityMap()))": 3530,
    "(checkpoints.empty())": 3531,
    "(entityMap.equals(checkpoints.peek()))": 3532,
    "(undosLeft.isPresent())": 3533,
    "Optional.of(undosLeft.get()-1);": 3534,
    "checkpoints.pop();": 3535,
    "undo();": 3536,
    "this.renderingEngine.message(\"Unlimited\");": 3537,
    "(result)": 3538,
    "f:": 3539,
    "state.getMapMaxHeight();": 3540,
    "state.getMapMaxWidth();": 3541,
    "(b.getPlayerId()+'a');": 3542,
    "(p.getId()+'A');": 3543,
    "state.getDestinations().contains(Position.of(x,y))": 3544,
    "state.getPlayerPositionById(m.getInitiator());": 3545,
    "ActionResult.Failed(m,\"Player": 3546,
    "m.nextPosition(currPos);": 3547,
    "targetEntity": 3548,
    "(targetEntity)": 3549,
    "ActionResult.Failed(m,": 3550,
    "currBoxPos": 3551,
    "nextPos;": 3552,
    "nextBoxPos": 3553,
    "m.nextPosition(currBoxPos);": 3554,
    "targetBoxEntity": 3555,
    "state.getEntity(nextBoxPos);": 3556,
    "(!(targetBoxEntity": 3557,
    "state.move(currBoxPos,": 3558,
    "nextBoxPos);": 3559,
    "ActionResult.Failed(i,\"Invalid": 3560,
    "u:": 3561,
    "(undos.get()": 3562,
    "ActionResult.Failed(u,": 3563,
    "e:": 3564,
    "isExiting": 3565,
    "\"Unknown": 3566,
    "playersIds;": 3567,
    "(undoLimit": 3568,
    "Optional.empty();": 3569,
    "entityMap.put(position,": 3570,
    "state.split(System.lineSeparator());": 3571,
    "Arrays.stream(lines).forEach(System.out::println);": 3572,
    "(lines[position.y()": 3573,
    "1].length()": 3574,
    "getMapMaxWidth()": 3575,
    "lines[position.y()": 3576,
    "1].length())": 3577,
    "(Character.isLowerCase(entity))": 3578,
    "System.out.println(id);": 3579,
    "(Character.isUpperCase(entity))": 3580,
    "(inputLine.equals(StringResources.EXIT_COMMAND_TEXT))": 3581,
    "indexTo": 3582,
    "lines[0].length()": 3583,
    "indexFrom": 3584,
    "to.y();": 3585,
    "lines[i": 3586,
    "to.x();": 3587,
    "System.out.println(state.charAt(indexFrom));": 3588,
    "System.out.println(state.charAt(indexTo));": 3589,
    "StringBuilder": 3590,
    "sb": 3591,
    "StringBuilder(state);": 3592,
    "sb.setCharAt(indexTo,": 3593,
    "state.charAt(indexFrom));": 3594,
    "sb.setCharAt(indexFrom,": 3595,
    "sb.toString();": 3596,
    "System.out.println(state);": 3597,
    "(cp.isEmpty())": 3598,
    "cp.add(new": 3599,
    "GameState(this.map));": 3600,
    "cp.get(0).state": 3601,
    "GameMap.map;": 3602,
    "cp.get(0).undoQuota": 3603,
    "this.map.undolimit;": 3604,
    "cp.get(1).state": 3605,
    "this.state;": 3606,
    "cp.get(1).undoQuota": 3607,
    "this.undoQuota;": 3608,
    "cp.get(cp.size()": 3609,
    "1).state": 3610,
    "1).undoQuota": 3611,
    "(this.cp.size()": 3612,
    "this.cp.get(cp.size()": 3613,
    "2).state;": 3614,
    "this.cp.remove(cp.size()": 3615,
    "undoQuota;": 3616,
    "this.cp.get(0).state;": 3617,
    "System.out.println(undoQuota);": 3618,
    "renderingEngine.message(StringResources.UNDO_QUOTA_UNLIMITED);": 3619,
    "(this.state.getUndoQuota().isPresent())": 3620,
    "String.format(StringResources.UNDO_QUOTA_TEMPLATE,": 3621,
    "renderingEngine.message(message);": 3622,
    "this.state.initialCheckpoint();": 3623,
    "(!this.shouldStop())": 3624,
    "((ActionResult.Failed)": 3625,
    "result).getReason();": 3626,
    "!state.map.getPlayerIds().contains(player))": 3627,
    "this.state.getPlayerPositionById(player);": 3628,
    "newPosition;": 3629,
    "(this.state.undoQuota": 3630,
    "this.state.undoQuota": 3631,
    "(this.state.getEntity(newPosition)": 3632,
    "this.state.getEntity(newPosition)).getPlayerId()": 3633,
    "player)": 3634,
    "Position(newPosition.x(),": 3635,
    "newPosition.y()": 3636,
    "(this.state.getEntity(temp)": 3637,
    "this.state.move(newPosition,": 3638,
    "temp);": 3639,
    "this.state.move(position,": 3640,
    "newPosition);": 3641,
    "Position(position.x()": 3642,
    "position.y());": 3643,
    "Position(newPosition.x()": 3644,
    "newPosition.y());": 3645,
    "ids": 3646,
    "GameMap.map.split(System.lineSeparator());": 3647,
    "lines[0].length();": 3648,
    "GameMap.map.length();": 3649,
    "(Character.isUpperCase(GameMap.map.charAt(i)))": 3650,
    "ids.add(GameMap.map.charAt(i)": 3651,
    "ids;": 3652,
    "System.out.println(set);": 3653,
    "System.out.println(GameMap.map);": 3654,
    "StringBuilder(GameMap.map);": 3655,
    "sb.setCharAt(index,": 3656,
    "set);": 3657,
    "GameMap.map": 3658,
    "make": 3659,
    "mapInfo": 3660,
    "changing": 3661,
    "here": 3662,
    "wont": 3663,
    "affect": 3664,
    "gamemap": 3665,
    "HashMap<>(map.getMapInfo());": 3666,
    "snapshot.add(new": 3667,
    "HashMap<>(mapInfo));": 3668,
    "mapInfo.entrySet())": 3669,
    "dummy": 3670,
    "playerOneId": 3671,
    "playerTwoId": 3672,
    "(lowerCaseInput.equals(EXIT_COMMAND_TEXT))": 3673,
    "(lowerCaseInput.equals(\"u\"))": 3674,
    "(lowerCaseInput.equals(\"a\"))": 3675,
    "wasd": 3676,
    "made": 3677,
    "Move.Left(playerOneId);": 3678,
    "(lowerCaseInput.equals(\"w\"))": 3679,
    "Move.Up(playerOneId);": 3680,
    "(lowerCaseInput.equals(\"s\"))": 3681,
    "Move.Down(playerOneId);": 3682,
    "(lowerCaseInput.equals(\"d\"))": 3683,
    "Move.Right(playerOneId);": 3684,
    "(lowerCaseInput.equals(\"h\"))": 3685,
    "hjkl": 3686,
    "Move.Left(playerTwoId);": 3687,
    "(lowerCaseInput.equals(\"j\"))": 3688,
    "Move.Down(playerTwoId);": 3689,
    "(lowerCaseInput.equals(\"k\"))": 3690,
    "Move.Up(playerTwoId);": 3691,
    "(lowerCaseInput.equals(\"l\"))": 3692,
    "Move.Right(playerTwoId);": 3693,
    "anything,": 3694,
    "just": 3695,
    "(checking": 3696,
    "inside": 3697,
    "class)": 3698,
    "movingEntity": 3699,
    "mapInfo.put(from,": 3700,
    "mapInfo.put(to,": 3701,
    "movingEntity);": 3702,
    "save": 3703,
    "created": 3704,
    "larger": 3705,
    "means": 3706,
    "least": 3707,
    "(snapshot.size()": 3708,
    "point": 3709,
    "snapshot.pop();": 3710,
    "will": 3711,
    "(!undoLeft.isEmpty())": 3712,
    "left,": 3713,
    "reduce": 3714,
    "Optional.of(undoLeft.get()": 3715,
    "revert": 3716,
    "HashMap<>(snapshot.peek());": 3717,
    "less": 3718,
    "too,": 3719,
    "seem": 3720,
    "allow": 3721,
    "such": 3722,
    "case)": 3723,
    "showQuotaText();": 3724,
    "if(state.getPlayerPositionById(action.getInitiator())": 3725,
    "startingEntity": 3726,
    "destinationEntity": 3727,
    "(destinationEntity": 3728,
    "box)": 3729,
    "(box.getPlayerId()": 3730,
    "startingEntity).getId())": 3731,
    "reach": 3732,
    "infront": 3733,
    "exited": 3734,
    "mapInfo.values())": 3735,
    "mapInfo.put(position,": 3736,
    "this.sts": 3737,
    "map.getGameMap().clone();": 3738,
    "map1.put(countCP,": 3739,
    "sts.clone());": 3740,
    "maps.getEntity(position);": 3741,
    "(inputLine.equals(\"w\")||": 3742,
    "inputLine.equals(\"W\"))": 3743,
    "(inputLine.equals(\"s\")||": 3744,
    "inputLine.equals(\"S\"))": 3745,
    "(inputLine.equals(\"a\")||": 3746,
    "inputLine.equals(\"A\"))": 3747,
    "(inputLine.equals(\"d\")||": 3748,
    "inputLine.equals(\"D\"))": 3749,
    "(inputLine.equals(\"h\")||": 3750,
    "inputLine.equals(\"H\"))": 3751,
    "(inputLine.equals(\"j\")||": 3752,
    "inputLine.equals(\"J\"))": 3753,
    "(inputLine.equals(\"k\")||": 3754,
    "inputLine.equals(\"K\"))": 3755,
    "(inputLine.equals(\"l\")||": 3756,
    "inputLine.equals(\"L\"))": 3757,
    "(inputLine.equals(\"U\")||": 3758,
    "inputLine.equals(\"u\"))": 3759,
    "(inputLine.equals(\"EXIT\")||": 3760,
    "inputLine.equals(\"ExIT\")||inputLine.equals(\"EXiT\")||": 3761,
    "inputLine.equals(\"EXIt\")": 3762,
    "||inputLine.equals(\"eXIT\")||": 3763,
    "inputLine.equals(\"exit\")||inputLine.equals(\"exiT\")||": 3764,
    "inputLine.equals(\"ExiT\"))": 3765,
    "InvalidInput(0,\"invalid": 3766,
    "maps.putEntity(new": 3767,
    "maps.getEntity(new": 3768,
    "Position(from.x(),": 3769,
    "from.y())));": 3770,
    "localSTS": 3771,
    "sts.clone();": 3772,
    "countCP=countCP+1;": 3773,
    "map1.put(countCP,localSTS);": 3774,
    "getUndoQuota().get();": 3775,
    "(countCP>0)": 3776,
    "//the": 3777,
    "has": 3778,
    "sts": 3779,
    "map1.get(map1.size()-1);": 3780,
    "map1.remove(map1.size());": 3781,
    "countCP--;": 3782,
    "Optional.of(undoQuota);": 3783,
    "maps.setGameMap(sts);": 3784,
    "IllegalArgumentException(\"more": 3785,
    "Quota:\"+": 3786,
    "ac": 3787,
    "processAction(ac);": 3788,
    "(ActionResult.Failed.class.isAssignableFrom(result.getClass()))": 3789,
    "ac;": 3790,
    "reson": 3791,
    "Class": 3792,
    "aaac=": 3793,
    "action.getClass();": 3794,
    "undonum": 3795,
    "(aaac.isInstance(InvalidInput.class)){": 3796,
    "ActionResult.Failed(action,((InvalidInput)action).getMessage());": 3797,
    "(Move.class.isAssignableFrom(aaac)){": 3798,
    "vv": 3799,
    "((Move)action).nextPosition(state.getPlayerPositionById(init));": 3800,
    "ee": 3801,
    "state.getEntity(vv);": 3802,
    "if(Empty.class.isAssignableFrom(ee.getClass()))": 3803,
    "state.move(state.getPlayerPositionById(init),": 3804,
    "vv);": 3805,
    "(Box.class.isAssignableFrom(ee.getClass())": 3806,
    "((Box)ee).getPlayerId()==init)": 3807,
    "qq": 3808,
    "((Move)action).nextPosition(vv);": 3809,
    "eee": 3810,
    "state.getEntity(qq);": 3811,
    "if(Empty.class.isAssignableFrom(eee.getClass())){": 3812,
    "state.move(vv,qq);": 3813,
    "}else{": 3814,
    "box.\";": 3815,
    "if(Wall.class.isAssignableFrom(ee.getClass())){": 3816,
    "reson=\"You": 3817,
    "wall.\";": 3818,
    "(Undo.class.isAssignableFrom(aaac)){": 3819,
    "((undonum.isPresent())){": 3820,
    "quota.\";": 3821,
    "((Exit.class.isAssignableFrom(aaac))){": 3822,
    "stop=true;": 3823,
    "if(result){": 3824,
    "ActionResult.Failed(action,reson);": 3825,
    "entity.getClass().getSimpleName();": 3826,
    "//String[]": 3827,
    "newST": 3828,
    "String[];": 3829,
    "st.length;": 3830,
    "i++": 3831,
    "j<": 3832,
    "st[i].length();": 3833,
    "(position.y()==i": 3834,
    "position.x()==j)": 3835,
    "if(type.equals(\"Wall\")){": 3836,
    "StringBuilder(st[i]);": 3837,
    "str.setCharAt(j,'#');": 3838,
    "st[i]=str.toString();": 3839,
    "if(type.equals(\"Empty\")){": 3840,
    "str.setCharAt(j,'.');": 3841,
    "if(type.equals(\"Box\")){": 3842,
    "str.setCharAt(j,(char)(box.getPlayerId()": 3843,
    "if(type.equals(\"Player\")){": 3844,
    "str.setCharAt(j,(char)(player.getId()": 3845,
    "mapHistory": 3846,
    "ArrayList<GameMap>();": 3847,
    "mapHistory.add(map);": 3848,
    "lastVersion": 3849,
    "mapHistory.size()": 3850,
    "mapHistory.get(lastVersion).getEntity(position);": 3851,
    "newRecord": 3852,
    "GameMap(mapHistory.get(lastVersion).maxWidth,mapHistory.get(lastVersion).getMaxHeight(),": 3853,
    "mapHistory.get(lastVersion).destinations,mapHistory.get(lastVersion).undoLimit);": 3854,
    "mapHistory.add(newRecord);": 3855,
    "if(lastVersion": 3856,
    "mapHistory.remove(lastVersion);": 3857,
    "System.out.print(content);": 3858,
    "Position(this.state.getPlayerPositionById(action.getInitiator()).x()": 3859,
    "this.state.getPlayerPositionById(action.getInitiator()).y());": 3860,
    "this.state.move(this.state.getPlayerPositionById(action.getInitiator()),": 3861,
    "Position(this.state.getPlayerPositionById(action.getInitiator()).x(),": 3862,
    "this.state.getPlayerPositionById(action.getInitiator()).y()": 3863,
    "if(map.get(i).get(j)": 3864,
    "result.add(((Player)": 3865,
    "map.get(i).get(j)).getId());": 3866,
    "GameMap()": 3867,
    "curPosition": 3868,
    "map._initialBoxDest.get(map._initialBoxDest.size()-1);": 3869,
    "Height": 3870,
    "map._height;": 3871,
    "Width": 3872,
    "map._width;": 3873,
    "HistoryMovements": 3874,
    "Players": 3875,
    "BoxDest": 3876,
    "InitialMap": 3877,
    "map._mapStringNonStatic.clone();": 3878,
    "UndoLimit": 3879,
    "map._undoLimit;": 3880,
    "MapString": 3881,
    "map._playersNonStatic;": 3882,
    "map._wallNonStatic;": 3883,
    "map._initialBoxDest;": 3884,
    "position.y()+1;": 3885,
    "if(x>=": 3886,
    "y>=": 3887,
    "Height)return": 3888,
    "System.out.print(_mapString[y].length()+'n');": 3889,
    "_char": 3890,
    "MapString[y].charAt(x);": 3891,
    "System.out.print(_char+\"n\");": 3892,
    "(_char>=": 3893,
    "_char<='Z'": 3894,
    "Player(_char": 3895,
    "-'A');": 3896,
    "if(_char>='a'": 3897,
    "<='z'){": 3898,
    "Box(Character.toLowerCase(_char)-'A');": 3899,
    "if(_char": 3900,
    "=='.'": 3901,
    "=='@'){": 3902,
    "'#'){": 3903,
    "Key": 3904,
    "A,S,W,D": 3905,
    "H,J,K,L": 3906,
    "ID": 3907,
    "Left,Down,Up,Right": 3908,
    "direction": 3909,
    "step,": 3910,
    "respectively": 3911,
    "(inputLine.toUpperCase()){": 3912,
    "InvalidInput(fetchAction().getInitiator(),": 3913,
    "x_from": 3914,
    "y_from": 3915,
    "from.y()+1;": 3916,
    "x_to": 3917,
    "y_to": 3918,
    "to.y()+1;": 3919,
    "charFrom": 3920,
    "MapString[y_from].charAt(x_from);": 3921,
    "charTo": 3922,
    "MapString[y_to].charAt(x_to);": 3923,
    "_historyMovements.add(from);": 3924,
    "_historyMovements.add(to);": 3925,
    "if(charFrom>='a'": 3926,
    "charFrom<='z'){": 3927,
    "LastStepMap": 3928,
    "MapString.clone();": 3929,
    "if(charTo": 3930,
    "=='@')": 3931,
    "MapString[y_from]": 3932,
    "MapString[y_from].substring(0,x_from)+charTo+": 3933,
    "MapString[y_from].substring(x_from+1);": 3934,
    "MapString[y_to]": 3935,
    "MapString[y_to].substring(0,x_to)+charFrom+": 3936,
    "MapString[y_to].substring(x_to+1);": 3937,
    "HasCheckPoint": 3938,
    "CheckpointMap": 3939,
    "LastStepMap;": 3940,
    "System.out.print(": 3941,
    "\"_lastStepMap2\"": 3942,
    "_lastStepMap[2].toString()+'n');": 3943,
    "_historyMovements.get(_historyMovements.size()-2);": 3944,
    "_historyMovements.get(_historyMovements.size()-1);": 3945,
    "_checkpointMap[y_from].charAt(x_from);": 3946,
    "_checkpointMap[y_to].charAt(x_to);": 3947,
    "_checkpointMap[y_from]": 3948,
    "_checkpointMap[y_from].substring(0,x_from)+charTo+": 3949,
    "_checkpointMap[y_from].substring(x_from+1);": 3950,
    "_checkpointMap[y_to]": 3951,
    "_checkpointMap[y_to].substring(0,x_to)+charFrom+_checkpointMap[y_to].substring(x_to+1);": 3952,
    "_undo++;": 3953,
    "_historyMovements.remove(_historyMovements.size()-2);": 3954,
    "_historyMovements.remove(_historyMovements.size()-1);": 3955,
    "if(HasCheckPoint){": 3956,
    "System.out.print(\"has": 3957,
    "point\");": 3958,
    "System.out.print(\"_mapString\"+": 3959,
    "_mapString[2].toString());": 3960,
    "System.out.print(\"_checkpointMap\"+": 3961,
    "_checkpointMap[2].toString());": 3962,
    "CheckpointMap.clone();": 3963,
    "Undo++;": 3964,
    "InitialMap;": 3965,
    "processAction(this.inputEngine.fetchAction());": 3966,
    "if(result.getClass()": 3967,
    "ActionResult.Failed.class){": 3968,
    "renderingEngine.message(INVALID_INPUT_MESSAGE);": 3969,
    "oldPosition": 3970,
    "if(oldPosition==null)": 3971,
    "downPosition": 3972,
    "Position(oldPosition.x(),": 3973,
    "oldPosition.y()+1);": 3974,
    "rightPosition": 3975,
    "Position(oldPosition.x()+1,": 3976,
    "oldPosition.y());": 3977,
    "leftPosition": 3978,
    "Position(oldPosition.x()-1,": 3979,
    "upPosition": 3980,
    "oldPosition.y()-1);": 3981,
    "Move.Down.class){": 3982,
    "(state.getEntity(downPosition).getClass()": 3983,
    "state.move(oldPosition,downPosition": 3984,
    "Box.class)": 3985,
    "Position(downPosition.x(),": 3986,
    "downPosition.y()+1);": 3987,
    "if(state.getEntity(another).getClass()": 3988,
    "==Empty.class){": 3989,
    "state.move(downPosition,another);": 3990,
    "state.move(oldPosition,downPosition);": 3991,
    "(action.getClass()": 3992,
    "Move.Right.class){": 3993,
    "(state.getEntity(rightPosition).getClass()": 3994,
    "Empty.class)": 3995,
    "state.move(oldPosition,rightPosition": 3996,
    "Position(rightPosition.x()+1,": 3997,
    "rightPosition.y());": 3998,
    "state.move(rightPosition,another);": 3999,
    "state.move(oldPosition,rightPosition);": 4000,
    "Move.Left.class)": 4001,
    "(state.getEntity(leftPosition).getClass()": 4002,
    "state.move(oldPosition,leftPosition": 4003,
    "Position(leftPosition.x()-1,": 4004,
    "state.move(leftPosition,another);": 4005,
    "state.move(oldPosition,leftPosition);": 4006,
    "Move.Up.class)": 4007,
    "(state.getEntity(upPosition).getClass()": 4008,
    "state.move(oldPosition,upPosition": 4009,
    "Position(upPosition.x(),": 4010,
    "rightPosition.y()-1);": 4011,
    "state.move(upPosition,another);": 4012,
    "state.move(oldPosition,upPosition);": 4013,
    "Exit.class)": 4014,
    "Undo.class)": 4015,
    "if(state.getUndoQuota().get()>0){": 4016,
    "(action.getClass().getName()){": 4017,
    "\"hk.ust.comp3021.actions.Move$Down\":": 4018,
    "met": 4019,
    "\"hk.ust.comp3021.actions.Move$Right\":": 4020,
    "\"hk.ust.comp3021.actions.Move$Left\":": 4021,
    "\"hk.ust.comp3021.actions.Move$Up\":": 4022,
    "\"hk.ust.comp3021.actions.Move$Exit\":": 4023,
    "\"hk.ust.comp3021.actions.Move$Undo\":": 4024,
    "HashSet<>(_players);": 4025,
    "_width": 4026,
    "_height": 4027,
    "_initialBoxDest": 4028,
    "_undoLimit": 4029,
    "_mapStringNonStatic": 4030,
    "_mapString;": 4031,
    "_playersNonStatic": 4032,
    "_players;": 4033,
    "_wallNonStatic": 4034,
    "_wall;": 4035,
    "this.playerIDPos": 4036,
    "map.playerIDPos;": 4037,
    "this.mapEntities": 4038,
    "map.getMapEntities();": 4039,
    "this.emptySpace": 4040,
    "map.emptySpace;": 4041,
    "this.numPlayer": 4042,
    "map.numPlayer;": 4043,
    "mapEntities.get(position.y()).size())": 4044,
    "mapEntities.get(position.y()).get(position.x());": 4045,
    "(inputLine.equals(\"\"))": 4046,
    "a;": 4047,
    "inputChar": 4048,
    "inputLine.charAt(0);": 4049,
    "(inputChar": 4050,
    "'u'": 4051,
    "'U')": 4052,
    "'w'": 4053,
    "'W')": 4054,
    "'a'": 4055,
    "'A')": 4056,
    "'s'": 4057,
    "'S')": 4058,
    "'d'": 4059,
    "'D')": 4060,
    "'k'": 4061,
    "'K')": 4062,
    "'h'": 4063,
    "'H')": 4064,
    "'j'": 4065,
    "'J')": 4066,
    "'l'": 4067,
    "'L')": 4068,
    "(inputLine.equalsIgnoreCase(\"exit\"))": 4069,
    "putStateEntity(to,getStateEntity(from));": 4070,
    "(getStateEntity(from).getClass().getSimpleName().equals(\"Player\"))": 4071,
    "iD": 4072,
    "((Player)getStateEntity(from)).getId();": 4073,
    "playerIDPos.size();": 4074,
    "++i)": 4075,
    "(iD": 4076,
    "playerIDPos.get(i).getId())": 4077,
    "playerIDPos.get(i).changePos(to);": 4078,
    "(map.getDestinations().contains(from))": 4079,
    "putStateEntity(from,": 4080,
    "ArrayList<PlayerIdPos>": 4081,
    "newIP": 4082,
    "ArrayList<PlayerIdPos>();": 4083,
    "this.playerIDPos.size();": 4084,
    "newIP.add(this.playerIDPos.get(i));": 4085,
    "newMapEntities": 4086,
    "ArrayList<ArrayList<Entity>>();": 4087,
    "this.mapEntities.size();": 4088,
    "this.mapEntities.get(i).size();": 4089,
    "++j)": 4090,
    "this.mapEntities.get(i).get(j);": 4091,
    "x.add(y);": 4092,
    "newMapEntities.add(x);": 4093,
    "UndoState": 4094,
    "undostate": 4095,
    "UndoState(newIP,": 4096,
    "newMapEntities,": 4097,
    "this.moves);": 4098,
    "this.undoStates.add(undostate);": 4099,
    "undoIdx;": 4100,
    "(undoStates.size()": 4101,
    "undoIdx": 4102,
    "undoIdx=": 4103,
    "undoStates.size()": 4104,
    "undoStates.get(undoIdx).getPlayerIDPos().size();": 4105,
    "PlayerIdPos": 4106,
    "undoStates.get(undoIdx).getPlayerIDPos().get(i);": 4107,
    "pIP": 4108,
    "PlayerIdPos(temp.getId(),temp.getP());": 4109,
    "newIP.add(pIP);": 4110,
    "newIP;": 4111,
    "undoStates.get(undoIdx).getMapEntities().size();": 4112,
    "undoStates.get(undoIdx).getMapEntities().get(i).size();": 4113,
    "undoStates.get(undoIdx).getMapEntities().get(i).get(j);": 4114,
    "newMapEntities;": 4115,
    "undoStates.remove(undoStates.size()": 4116,
    "reduceUndoQuota();": 4117,
    "(gameState.numPlayer": 4118,
    "this.renderingEngine.message(\"This": 4119,
    "supported\");": 4120,
    "(!this.state.isWin())": 4121,
    "if(!state.getUndoQuota().isEmpty())": 4122,
    "this.renderingEngine.message(System.lineSeparator()": 4123,
    "System.lineSeparator()": 4124,
    "\">>>\");": 4125,
    "(x.getAction().getClass().getSimpleName().equals(\"Exit\"))": 4126,
    "this.renderingEngine.message(": 4127,
    "res;": 4128,
    "Boolean": 4129,
    "boxCheck": 4130,
    "//Undo": 4131,
    "(action.getClass().getSimpleName().equals(\"Undo\"))": 4132,
    "res": 4133,
    "\"0": 4134,
    "Quota\");": 4135,
    "System.out.print(\"You": 4136,
    "quota.\"": 4137,
    "(action.getClass().getSimpleName().equals(\"Left\"))": 4138,
    "state.getPlayerPositionById(iD);": 4139,
    "((Move.Left)": 4140,
    "action).nextPosition(from);": 4141,
    "state.getEntity(to).getClass().getSimpleName();": 4142,
    "toNext": 4143,
    "action).nextPosition(to);": 4144,
    "(nextEnt.equals(\"Box\"))": 4145,
    "nextNextEnt": 4146,
    "state.getEntity(toNext).getClass().getSimpleName();": 4147,
    "state.getEntity(to)).getPlayerId()": 4148,
    "(nextNextEnt.equals(\"Empty\")": 4149,
    "nextNextEnt.equals(\"Destination\")))": 4150,
    "state.move(to,": 4151,
    "toNext);": 4152,
    "System.out.print(\"Failed": 4153,
    "box.\"": 4154,
    "\"Not": 4155,
    "allowed": 4156,
    "(nextEnt.equals(\"Player\"))": 4157,
    "(nextEnt.equals(\"Wall\"))": 4158,
    "wall.\"": 4159,
    "ActionResult.Failed(action,\"Not": 4160,
    "state.move(from,": 4161,
    "(boxCheck)": 4162,
    "(action.getClass().getSimpleName().equals(\"Down\"))": 4163,
    "((Move.Down)": 4164,
    "(action.getClass().getSimpleName().equals(\"Up\"))": 4165,
    "((Move.Up)": 4166,
    "(action.getClass().getSimpleName().equals(\"Right\"))": 4167,
    "((Move.Right)": 4168,
    "(action.getClass().getSimpleName().equals(\"Exit\"))": 4169,
    "state.exitState": 4170,
    "System.out.print(\"Invalid": 4171,
    "input\"": 4172,
    "mapEntities.get(position.y()).remove(position.x());": 4173,
    "mapEntities.get(position.y()).add(position.x(),": 4174,
    "for(": 4175,
    "List<Character>": 4176,
    "sublist": 4177,
    "map.Map)": 4178,
    "CurrentMap.add(new": 4179,
    "ArrayList<>(sublist));": 4180,
    "map.getUndoLimit().get().intValue();": 4181,
    "HashSet<>(map.getDestinations());": 4182,
    "HashSet<>(map.getPlayerIds());": 4183,
    "//sort": 4184,
    "List<Location>": 4185,
    "tem_loc": 4186,
    "ArrayList<Location>(": 4187,
    "map.getPlayers_loc());": 4188,
    "(!tem_loc.isEmpty()){": 4189,
    "tem_loc.get(0).playerid();": 4190,
    "tem_loc.size();": 4191,
    "if(tem_loc.get(j).playerid()": 4192,
    "temp)": 4193,
    "tem_loc.get(j).playerid();": 4194,
    "j;": 4195,
    "player_location.add(new": 4196,
    "Location(tem_loc.get(x).playerid(),": 4197,
    "Position(tem_loc.get(x).pos().x(),": 4198,
    "tem_loc.get(x).pos().y())));": 4199,
    "tem_loc.remove(x);": 4200,
    "List<List<Character>>": 4201,
    "TMap": 4202,
    "CurrentMap)": 4203,
    "TMap.add(new": 4204,
    "Checkpoints.add(new": 4205,
    "Checkpoint(TMap,": 4206,
    "undoQuota,": 4207,
    "ArrayList<>(player_location)));": 4208,
    "(CurrentMap.get(position.y()).get(position.x())){": 4209,
    "IllegalArgumentException(\"out": 4210,
    "boundar.\");": 4211,
    "if(CurrentMap.get(position.y()).get(position.x()).toString().matches(\"[A-Z]\")){": 4212,
    "Player(CurrentMap.get(position.y()).get(position.x())": 4213,
    "if(CurrentMap.get(position.y()).get(position.x()).toString().matches(\"[a-z]\")){": 4214,
    "Box(CurrentMap.get(position.y()).get(position.x())": 4215,
    "if(inputLine.isEmpty()){": 4216,
    "\"empty": 4217,
    "if(inputLine.matches(\"exit\")){": 4218,
    "switch(inputLine.toLowerCase().charAt(0)){": 4219,
    "if(GameState.current_player": 4220,
    "'d':": 4221,
    "'l':": 4222,
    "'u':": 4223,
    "FromEnt": 4224,
    "CurrentMap.get(to.y()).set(to.x(),": 4225,
    "CurrentMap.get(from.y()).get(from.x()));": 4226,
    "TO": 4227,
    "gameMap.Map.get(from.y()).get(from.x());": 4228,
    "if(TO.toString().matches(\"[A-Za-z]\"))": 4229,
    "CurrentMap.get(from.y()).set(from.x(),": 4230,
    "TO);": 4231,
    "if((FromEnt).getClass()": 4232,
    "Player.class)": 4233,
    "player_location.set(((Player)": 4234,
    "FromEnt).getId(),": 4235,
    "Location(((Player)": 4236,
    "to));": 4237,
    "ArrayList<Location>(player_location)));": 4238,
    "if(Checkpoints.size()": 4239,
    "checkpoint=": 4240,
    "Checkpoints.get(Checkpoints.size()-2);": 4241,
    "Checkpoints.remove(Checkpoints.size()-1);": 4242,
    "CurrentMap": 4243,
    "checkpoint.map();": 4244,
    "player_location": 4245,
    "checkpoint.player_loc();": 4246,
    "state.getAllPlayerPositions().size()": 4247,
    "IllegalArgumentException(\"invalid": 4248,
    "act": 4249,
    "processAction(act);": 4250,
    "System.out.println(((ActionResult.Failed)": 4251,
    "(undoQuota.orElse(-2)": 4252,
    "undoQuota.orElse(-2));": 4253,
    "(undoQuota.isEmpty())": 4254,
    "unlimited\");": 4255,
    "if(state.isWin())": 4256,
    "renderingEngine.message(\"you": 4257,
    "win\");": 4258,
    "((InvalidInput)action).getMessage());": 4259,
    "box_move": 4260,
    "init_pos": 4261,
    "state.getPlayerPositionById(((Move)": 4262,
    "action).getInitiator());": 4263,
    "fin_pos": 4264,
    "action).nextPosition(init_pos);": 4265,
    "(state.getEntity(fin_pos)": 4266,
    "(state.getEntity(((Move)": 4267,
    "action).nextPosition(fin_pos))": 4268,
    "state.move(fin_pos,": 4269,
    "action).nextPosition(fin_pos));": 4270,
    "\"invalid": 4271,
    "state.move(init_pos,": 4272,
    "fin_pos);": 4273,
    "if(box_move)": 4274,
    "if(state.getUndoQuota()": 4275,
    "state.getUndoQuota().orElse(-1)": 4276,
    "\"no": 4277,
    "should_exit": 4278,
    "putEntity(Position.of(0,0),": 4279,
    "HashSet<>(Players_id);": 4280,
    "HashSet<Position>(destinations);": 4281,
    "temp_Map)": 4282,
    "this.Map.add(new": 4283,
    "this.Players_id": 4284,
    "HashSet<Integer>(temp_Players_id);": 4285,
    "this.Players_loc": 4286,
    "ArrayList<>(temp_Players_loc);": 4287,
    "'a';": 4288,
    "'z';": 4289,
    "++c){": 4290,
    "player.put((int)(c-'a'),null);": 4291,
    "box.put((int)(c-'a'),null);": 4292,
    "width=map.width;": 4293,
    "height=map.height;": 4294,
    "undolimit=map.undolimit;": 4295,
    "t:map.destination){": 4296,
    "destination.add(new": 4297,
    "Position(t.x(),t.y()));": 4298,
    "t:map.wall){": 4299,
    "wall.add(new": 4300,
    "t:map.empty){": 4301,
    "empty.add(new": 4302,
    "i=0;i<26;i++){": 4303,
    "if(map.player.get(i)!=null){": 4304,
    "player.put(i,new": 4305,
    "Position(map.player.get(i).x(),map.player.get(i).y()));": 4306,
    "if(map.box.get(i)!=null){": 4307,
    "box.put(i,new": 4308,
    "ArrayList<>());": 4309,
    "j=0;j<map.box.get(i).size();j++){": 4310,
    "box.get(i).add(new": 4311,
    "Position(map.box.get(i).get(j).x(),map.box.get(i).get(j).y()));": 4312,
    "thismap=map;": 4313,
    "p.add(new": 4314,
    "GameMap(width,height,destination,undolimit,wall,player,box,empty));": 4315,
    "if(thismap.wall.contains(position)){": 4316,
    "if(thismap.box.get(i)==null": 4317,
    "thismap.player.get(i)==null){": 4318,
    "continue;": 4319,
    "if(thismap.box.get(i).contains(position)){": 4320,
    "Box(i);": 4321,
    "if(thismap.player.get(i).equals(position)){": 4322,
    "Player(i);": 4323,
    "if(inputLine.equals(StringResources.EXIT_COMMAND_TEXT)){": 4324,
    "if(inputLine.equals(\"A\")": 4325,
    "inputLine.equals(\"H\")){": 4326,
    "if(inputLine.equals(\"S\")": 4327,
    "inputLine.equals(\"J\")){": 4328,
    "if(inputLine.equals(\"W\")": 4329,
    "inputLine.equals(\"K\")){": 4330,
    "if(inputLine.equals(\"D\")": 4331,
    "inputLine.equals(\"L\")){": 4332,
    "if(inputLine.equals(\"U\")){": 4333,
    "fr=getEntity(from);": 4334,
    "thismap.removeEntity(from,fr);": 4335,
    "thismap.putEntity(to,fr);": 4336,
    "p.add(thismap);": 4337,
    "if(p.size()==2){": 4338,
    "thismap=p.get(0);": 4339,
    "thismap=p.get(p.size()-2);": 4340,
    "thismap.undolimit--;": 4341,
    "this.inputEngine=inputEngine;": 4342,
    "if(this.state.getAllPlayerPositions().size()>2){": 4343,
    "while(!this.state.isWin()){": 4344,
    "t=inputEngine.fetchAction();": 4345,
    "if(t": 4346,
    "InvalidInput){": 4347,
    "renderingEngine.message(StringResources.INVALID_INPUT_MESSAGE);": 4348,
    "if(processAction(t)": 4349,
    "if(state.getUndoQuota()==Optional.of(0)){": 4350,
    "renderingEngine.message(StringResources.UNDO_QUOTA_RUN_OUT);": 4351,
    "playerposition=state.getPlayerPositionById(action.getInitiator());": 4352,
    "t=": 4353,
    "Position(playerposition.x(),playerposition.y()+1);": 4354,
    "if(state.getEntity(t)": 4355,
    "state.getEntity(t)": 4356,
    "if(state.thismap.box.get(action.getInitiator()).contains(t)){": 4357,
    "m=new": 4358,
    "Position(t.x(),t.y()+1);": 4359,
    "if(state.getEntity(m)": 4360,
    "state.move(t,m);": 4361,
    "state.move(playerposition,t);": 4362,
    "Position(playerposition.x(),playerposition.y()-1);": 4363,
    "Position(t.x(),t.y()-1);": 4364,
    "Position(playerposition.x()-1,playerposition.y());": 4365,
    "Position(t.x()-1,t.y());": 4366,
    "Position(playerposition.x()+1,playerposition.y());": 4367,
    "Position(t.x()+1,t.y());": 4368,
    "re=new": 4369,
    "if(player.get(i)!=null){": 4370,
    "re.add(i);": 4371,
    "re;": 4372,
    "this.width=maxWidth;": 4373,
    "this.height=maxHeight;": 4374,
    "this.destination=destinations;": 4375,
    "this.undolimit=undoLimit;": 4376,
    "undoLimit,Set<Position>": 4377,
    "wall,": 4378,
    "HashMap<Integer,Position>": 4379,
    "player,": 4380,
    "HashMap<Integer,List<Position>>": 4381,
    "box,Set<Position>": 4382,
    "empty)": 4383,
    "this.wall=wall;": 4384,
    "this.box=box;": 4385,
    "this.player=player;": 4386,
    "this.empty=empty;": 4387,
    "TODO`": 4388,
    "if(box.get(((Box)": 4389,
    "entity).getPlayerId())==null){": 4390,
    "box.put(((Box)": 4391,
    "entity).getPlayerId(),new": 4392,
    "box.get(((Box)": 4393,
    "wall.add(position);": 4394,
    "player.put(((Player)": 4395,
    "entity).getId(),": 4396,
    "empty.add(position);": 4397,
    "this.historicalMoves": 4398,
    "ArrayList<ArrayList<Position[]>>();": 4399,
    "this.latestMoves": 4400,
    "ArrayList<Position[]>();": 4401,
    "this.historicalStates": 4402,
    "ArrayList<GameState>();": 4403,
    "this.historicalStates.add(this);": 4404,
    "strInputLine": 4405,
    "((String)": 4406,
    "inputLine).strip();": 4407,
    "Return": 4408,
    "prompted:": 4409,
    "Special": 4410,
    "if(strInputLine.toLowerCase().compareTo(StringResources.EXIT_COMMAND_TEXT)": 4411,
    "Else,": 4412,
    "deemed": 4413,
    "length": 4414,
    "character": 4415,
    "if(strInputLine.length()": 4416,
    "charInputLine": 4417,
    "strInputLine.charAt(0);": 4418,
    "Invalid": 4419,
    "if(!Character.isLetter(charInputLine))": 4420,
    "if(Character.toLowerCase(charInputLine)": 4421,
    "this.map.getEntity(from);": 4422,
    "this.map.getEntity(to);": 4423,
    "this.map.putEntity(from,": 4424,
    "toEntity);": 4425,
    "this.map.putEntity(to,": 4426,
    "fromEntity);": 4427,
    "Position[]": 4428,
    "moveArr": 4429,
    "{from,": 4430,
    "to};": 4431,
    "this.latestMoves.add(0,": 4432,
    "moveArr);": 4433,
    "ArrayList<Position[]>": 4434,
    "savedMoves": 4435,
    "for(Position[]": 4436,
    "this.latestMoves){": 4437,
    "savedMoves.add(new": 4438,
    "Position[]{move[0],": 4439,
    "move[1]});": 4440,
    "this.historicalMoves.add(savedMoves);": 4441,
    "this.latestMoves.clear();": 4442,
    "if(this.historicalMoves.size()": 4443,
    "moves": 4444,
    "this.historicalMoves.remove(this.historicalMoves.size()": 4445,
    "moves){": 4446,
    "this.moveWithoutRecord(move[1],": 4447,
    "move[0]);": 4448,
    "if(this.undoQuota.isPresent())": 4449,
    "Optional.of(this.getUndoQuota().get()": 4450,
    "No": 4451,
    "checkpoints,": 4452,
    "if(this.latestMoves.size()": 4453,
    "this.latestMoves;": 4454,
    "Initial": 4455,
    "printing": 4456,
    "Enter": 4457,
    "Print": 4458,
    "Unlimited": 4459,
    "if(!this.state.getUndoQuota().isPresent()){": 4460,
    "Pre-set": 4461,
    "String.valueOf(this.state.getUndoQuota().get())));": 4462,
    "Prompt": 4463,
    "user": 4464,
    "this.renderingEngine.message(new": 4465,
    "String(\">>>\"));": 4466,
    "Fetch": 4467,
    "State": 4468,
    "renderingEngine.message(\"n\");": 4469,
    "destinations": 4470,
    "state.getDestinations();": 4471,
    "isDestination": 4472,
    "des": 4473,
    "destinations){": 4474,
    "if(des.x()": 4475,
    "des.y()": 4476,
    "y){": 4477,
    "toString(){": 4478,
    "switch(this.map[j][i])": 4479,
    "(char)(Integer.valueOf('a')": 4480,
    "b.getPlayerId());": 4481,
    "(char)(Integer.valueOf('A')": 4482,
    "'n';": 4483,
    "action).getInitiator();": 4484,
    "this.state.getPlayerPositionById(playerId);": 4485,
    "action).nextPosition(playerPos);": 4486,
    "this.state.getEntity(nextPos);": 4487,
    "if(nextPosEntity": 4488,
    "\"Bumped": 4489,
    "into": 4490,
    "this.state.move(playerPos,": 4491,
    "nextPosEntity).getPlayerId()": 4492,
    "playerId){": 4493,
    "boxNextPos": 4494,
    "if(this.state.getEntity(boxNextPos)": 4495,
    "this.state.move(nextPos,": 4496,
    "\"Box": 4497,
    "unmovable.\");": 4498,
    "type.\");": 4499,
    "if(this.map[i][j]": 4500,
    "this.map[i][j]).getId());": 4501,
    "Coordinate[x][y]": 4502,
    "Entity[maxWidth][maxHeight];": 4503,
    "this.map[position.x()][position.y()]": 4504,
    "gameStates.add(map);": 4505,
    "getCurrentState().getEntity(position);": 4506,
    "currentGameMap": 4507,
    "getCurrentState();": 4508,
    "currentGameMap.putEntity(to,": 4509,
    "currentGameMap.getEntity(from));": 4510,
    "currentGameMap.putEntity(from,": 4511,
    "gameStates.add(new": 4512,
    "GameMap(getCurrentState()));": 4513,
    "currentState++;": 4514,
    "(getCurrentState().getUndoLimit().isPresent()){": 4515,
    "getCurrentState().getUndoLimit().get();": 4516,
    "gameStates.remove(currentState);": 4517,
    "(currentState": 4518,
    "getCurrentState().setUndoLimit(Optional.of(temp));": 4519,
    "/*if": 4520,
    "renderingEngine.message(String.format(UNDO_QUOTA_TEMPLATE,": 4521,
    "renderingEngine.message(UNDO_QUOTA_UNLIMITED);*/": 4522,
    "System.exit(0);": 4523,
    "(!state.getCurrentState().getPlayerIds().contains(action.getInitiator()))": 4524,
    "(state.getEntity(nextPosition)){": 4525,
    "state.move(currentPosition,": 4526,
    "HIT_WALL);": 4527,
    "HIT_PLAYER);": 4528,
    "BOX_UNMATCH);": 4529,
    "m.nextPosition(nextPosition);": 4530,
    "(state.getEntity(boxNextPosition)": 4531,
    "boxNextPosition);": 4532,
    "BOX_FAILED);": 4533,
    "(playerIds.isEmpty()){": 4534,
    "(entityMap[i][j]": 4535,
    "p){": 4536,
    "playerIds.add(p.getId());": 4537,
    "(!validateUndoLimit(undoLimit))": 4538,
    "0)?": 4539,
    "Optional.of(undoLimit)": 4540,
    "this.playerIds": 4541,
    "this.entityMap": 4542,
    "GameMap(GameMap": 4543,
    "copy)": 4544,
    "copy.maxWidth;": 4545,
    "copy.maxHeight;": 4546,
    "destinations.addAll(copy.destinations);": 4547,
    "(copy.undoLimit.isPresent())?": 4548,
    "Optional.of(copy.undoLimit.get())": 4549,
    "playerIds.addAll(copy.playerIds);": 4550,
    "copyEntityMap": 4551,
    "copy.getEntityMap();": 4552,
    "entityMap[i][j]": 4553,
    "switch(copyEntityMap[i][j]){": 4554,
    "Box(b.getPlayerId());": 4555,
    "Player(p.getId());": 4556,
    "entityMap[position.y()][position.x()]": 4557,
    "this.mapHashMap": 4558,
    "map.mapHashMap;": 4559,
    "this.crateLocations": 4560,
    "map.crateLocations;": 4561,
    "//getUndoQuota();": 4562,
    "mapHashMap.get(position);": 4563,
    "actions": 4564,
    "(inputLine.equals(\"W\")": 4565,
    "inputLine.equals(\"w\")": 4566,
    "(inputLine.equals(\"A\")": 4567,
    "inputLine.equals(\"a\")": 4568,
    "(inputLine.equals(\"S\")": 4569,
    "inputLine.equals(\"s\")": 4570,
    "(inputLine.equals(\"D\")": 4571,
    "inputLine.equals(\"d\")": 4572,
    "(inputLine.equals(\"H\")": 4573,
    "inputLine.equals(\"h\")": 4574,
    "(inputLine.equals(\"J\")": 4575,
    "inputLine.equals(\"j\")": 4576,
    "(inputLine.equals(\"K\")": 4577,
    "inputLine.equals(\"k\")": 4578,
    "(inputLine.equals(\"L\")": 4579,
    "inputLine.equals(\"l\")": 4580,
    "(inputLine.equals(\"U\")": 4581,
    "inputLine.equals(\"u\")": 4582,
    "actions;": 4583,
    "entityFrom": 4584,
    "mapHashMap.get(from);": 4585,
    "entityTo": 4586,
    "mapHashMap.get(to);": 4587,
    "mapHashMap.remove(from,entityFrom);": 4588,
    "mapHashMap.remove(to,entityTo);": 4589,
    "mapHashMap.put(to,": 4590,
    "entityFrom);": 4591,
    "mapHashMap.put(from,": 4592,
    "(entityFrom.getClass()": 4593,
    "cloned": 4594,
    "HashMap<>(mapHashMap);": 4595,
    "checkpoints.put(numOfCheckpoints,cloned);": 4596,
    "//System.out.println(cloned);": 4597,
    "checkpoint_2": 4598,
    "checkpoint;": 4599,
    "checkpoint.clear();": 4600,
    "tempPosition": 4601,
    "Position.of(i,j);": 4602,
    "tempEntity": 4603,
    "mapHashMap.get(tempPosition);": 4604,
    "checkpoint.put(tempPosition,": 4605,
    "tempEntity);": 4606,
    "numOfCheckpoints++;": 4607,
    "undoQuotacheckpoint": 4608,
    "(numOfCheckpoints": 4609,
    "HashMap<>(checkpoints.get(numOfCheckpoints-1));": 4610,
    "cloned;": 4611,
    "(numOfCheckpoints-2>=0)": 4612,
    "(!getUndoQuota().isEmpty()){": 4613,
    "HashMap<>(checkpoints.get(numOfCheckpoints-2));": 4614,
    "numOfCheckpoints--;": 4615,
    "state.getUndoQuota().get()).toString());": 4616,
    "processAction(input);": 4617,
    "(result.getClass()": 4618,
    "ActionResult.Failed.class)": 4619,
    "state.getUndoQuota().get()).toString()": 4620,
    "(!(input": 4621,
    "null))": 4622,
    "ActionResult.Success.class)": 4623,
    "renderingEngine.message(\"Invalid": 4624,
    "(gameState.isWin())": 4625,
    "'#';//throw": 4626,
    "(char)(b.getPlayerId()+'a');//throw": 4627,
    "(char)(p.getId()+'A');": 4628,
    "'.';//throw": 4629,
    "(charToPrint": 4630,
    "(state.getDestinations().contains(Position.of(x,y)))": 4631,
    "(action.getClass().equals(Move.Down.class))": 4632,
    "playerID": 4633,
    "state.getPlayerPositionById(playerID);": 4634,
    "(playerPosition": 4635,
    "Position(playerPosition.x(),playerPosition.y()+1);": 4636,
    "state.move(playerPosition,downPosition);": 4637,
    "((state.getEntity(downPosition).getClass()": 4638,
    "Box.class)){": 4639,
    "boxID": 4640,
    "state.crateLocations.get(downPosition);": 4641,
    "(boxID": 4642,
    "playerID)": 4643,
    "downDownPosition": 4644,
    "Position(downPosition.x(),downPosition.y()+1);": 4645,
    "(state.getEntity(downDownPosition).getClass()": 4646,
    "state.move(downPosition,downDownPosition);": 4647,
    "state.move(playerPosition,": 4648,
    "downPosition);": 4649,
    "state.crateLocations.put(downDownPosition,": 4650,
    "boxID);": 4651,
    "\"Unable": 4652,
    "Player.class))": 4653,
    "//state.checkpoint();": 4654,
    "(action.getClass().equals(Move.Up.class))": 4655,
    "Position(playerPosition.x(),playerPosition.y()-1);": 4656,
    "state.move(playerPosition,upPosition);": 4657,
    "((state.getEntity(upPosition).getClass()": 4658,
    "state.crateLocations.get(upPosition);": 4659,
    "Position(upPosition.x(),upPosition.y()-1);": 4660,
    "state.move(upPosition,downDownPosition);": 4661,
    "upPosition);": 4662,
    "(action.getClass().equals(Move.Left.class))": 4663,
    "Position(playerPosition.x()-1,playerPosition.y());": 4664,
    "state.move(playerPosition,leftPosition);": 4665,
    "((state.getEntity(leftPosition).getClass()": 4666,
    "state.crateLocations.get(leftPosition);": 4667,
    "Position(leftPosition.x()-1,leftPosition.y());": 4668,
    "state.move(leftPosition,downDownPosition);": 4669,
    "leftPosition);": 4670,
    "(action.getClass().equals(Move.Right.class))": 4671,
    "Position(playerPosition.x()+1,playerPosition.y());": 4672,
    "state.move(playerPosition,rightPosition);": 4673,
    "((state.getEntity(rightPosition).getClass()": 4674,
    "state.crateLocations.get(rightPosition);": 4675,
    "Position(rightPosition.x()+1,rightPosition.y());": 4676,
    "state.move(rightPosition,downDownPosition);": 4677,
    "rightPosition);": 4678,
    "state.exitBool": 4679,
    "(state.getUndoQuota().equals(Optional.of(0))){": 4680,
    "getMaxWidth();": 4681,
    "getMaxHeight();": 4682,
    "Position(i,j);": 4683,
    "((tempEntity": 4684,
    "(tempEntity.getClass()": 4685,
    "temp.add(((Player)": 4686,
    "tempEntity).getId());": 4687,
    "//mapHashMap.forEach(();": 4688,
    "mapHashMap.put(position,": 4689,
    "(entity.getClass()": 4690,
    "crateLocations.put(position,": 4691,
    "GameMap(map);": 4692,
    "this.map.getMaxHeight();": 4693,
    "this.map.map.get(y).size();": 4694,
    "(getEntity(pos)": 4695,
    "playerPositions.add(pos);": 4696,
    "boxPositions.add(pos);": 4697,
    "creates": 4698,
    "values": 4699,
    "verify(String": 4700,
    "mapText)": 4701,
    "helper": 4702,
    "function": 4703,
    "scanner": 4704,
    "Scanner(mapText);": 4705,
    "Integer.parseInt(scanner.nextLine());": 4706,
    "playerCheck": 4707,
    "65;": 4708,
    "91;": 4709,
    "(count(mapText,": 4710,
    "(char)i)": 4711,
    "(!playerCheck)": 4712,
    "destinationCount": 4713,
    "count(mapText,": 4714,
    "'@');": 4715,
    "boxCount": 4716,
    "97;": 4717,
    "123;": 4718,
    "(char)i);": 4719,
    "(mapText.contains(Character.toString((char)i))": 4720,
    "^": 4721,
    "mapText.contains(Character.toString((char)(i": 4722,
    "32))))": 4723,
    "(destinationCount": 4724,
    "boxCount)": 4725,
    "actual": 4726,
    "lowercase": 4727,
    "cases": 4728,
    "switch(lowerCaseInput)": 4729,
    "(getEntity(from)": 4730,
    "playerPositions.add(to);": 4731,
    "Player(((Player)": 4732,
    "getEntity(from)).getId()));": 4733,
    "playerPositions.remove(from);": 4734,
    "boxPositions.add(to);": 4735,
    "Box(((Box)": 4736,
    "getEntity(from)).getPlayerId()));": 4737,
    "boxPositions.remove(from);": 4738,
    "ArrayList<>(this.map.map.stream().map(x": 4739,
    "ArrayList<>(x)).collect(Collectors.toList()));": 4740,
    "saveStates.add(newMap);": 4741,
    "save_states": 4742,
    "list": 4743,
    "(saveStates.size()": 4744,
    "saveStates.remove((saveStates.size()": 4745,
    "removes": 4746,
    "(getUndoQuota().orElse(0)": 4747,
    "this.map.undoLimit--;": 4748,
    "this.map.map": 4749,
    "saveStates.get(saveStates.size()": 4750,
    "playerPositions.clear();": 4751,
    "boxPositions.clear();": 4752,
    "resets": 4753,
    "map.map.get(y).size();": 4754,
    "playerCount": 4755,
    "state.getAllPlayerPositions().size();": 4756,
    "(playerCount": 4757,
    "state.getUndoQuota().orElse(0));": 4758,
    "(!super.shouldStop())": 4759,
    "(!(action": 4760,
    "InvalidInput))": 4761,
    "renderingEngine.message(((InvalidInput)": 4762,
    "this.outputStream": 4763,
    "outputStream.print(content": 4764,
    "\"rn\");": 4765,
    "over": 4766,
    "(state.map.getPlayerIds().contains(action.getInitiator()))": 4767,
    "moveDirection": 4768,
    "find": 4769,
    "Position(state.getPlayerPositionById(action.getInitiator()).x()": 4770,
    ",": 4771,
    "state.getPlayerPositionById(action.getInitiator()).y()": 4772,
    "state.getPlayerPositionById(action.getInitiator()).y());": 4773,
    "3;": 4774,
    "4;": 4775,
    "(state.map.getEntity(newPosition)": 4776,
    "Box,": 4777,
    "(action.getInitiator()": 4778,
    "state.map.getEntity(newPosition)).getPlayerId())": 4779,
    "(moveDirection)": 4780,
    "(!(state.map.getEntity(newBoxPosition)": 4781,
    "state.move(newPosition,": 4782,
    "newBoxPosition);": 4783,
    "\"Impossible": 4784,
    "taken\");": 4785,
    "putEntity(@NotNull": 4786,
    "(!(position.x()": 4787,
    "(map.get(position.y()).size())))": 4788,
    "access": 4789,
    "DONE": 4790,
    "this.originalGameMap": 4791,
    "this.undoQuotaLeft": 4792,
    "originalGameMap.getUndoLimit().isPresent()": 4793,
    "originalGameMap.getUndoLimit().get()": 4794,
    "this.checkpoints": 4795,
    "this.initializeMapFromOriginalGameMap();": 4796,
    "this.updateStatesFromCurrentMap();": 4797,
    "this.currentMap[position.x()][position.y()];": 4798,
    "instruction": 4799,
    "EXIT:": 4800,
    "(instruction.equals(\"EXIT\"))": 4801,
    "ASWD:": 4802,
    "Left,": 4803,
    "Down,": 4804,
    "Up,": 4805,
    "Right": 4806,
    "(instruction.equals(\"A\"))": 4807,
    "(instruction.equals(\"S\"))": 4808,
    "(instruction.equals(\"W\"))": 4809,
    "(instruction.equals(\"D\"))": 4810,
    "HJKL:": 4811,
    "(instruction.equals(\"H\"))": 4812,
    "(instruction.equals(\"J\"))": 4813,
    "(instruction.equals(\"K\"))": 4814,
    "(instruction.equals(\"L\"))": 4815,
    "U:": 4816,
    "(instruction.equals(\"U\"))": 4817,
    "Perform": 4818,
    "swapping": 4819,
    "Entities": 4820,
    "Positions": 4821,
    "this.currentMap[from.x()][from.y()];": 4822,
    "(entityFrom)": 4823,
    "this.currentPlayersLocations.put(player.getId(),": 4824,
    "this.currentCratesLocations.remove(from);": 4825,
    "this.currentCratesLocations.put(to,": 4826,
    "box.getPlayerId());": 4827,
    "null,": 4828,
    "this.currentMap[from.x()][from.y()]": 4829,
    "this.currentMap[to.x()][to.y()];": 4830,
    "this.currentMap[to.x()][to.y()]": 4831,
    "entityFrom;": 4832,
    "this.checkpoints.add(Checkpoint.of(this.currentPlayersLocations,": 4833,
    "this.currentCratesLocations));": 4834,
    "(this.getUndoQuota().isPresent()": 4835,
    "!this.checkpoints.isEmpty())": 4836,
    "this.undoQuotaLeft--;": 4837,
    "this.mostRecentAction": 4838,
    "(!this.checkpoints.isEmpty())": 4839,
    "(this.checkpoints.isEmpty())": 4840,
    "Revert": 4841,
    "this.checkpoints.get(this.checkpoints.size()": 4842,
    "Remove": 4843,
    "Boxes": 4844,
    "playerId:": 4845,
    "checkpoint.playerLocations.keySet())": 4846,
    "this.getPlayerPositionById(playerId);": 4847,
    "this.currentMap[playerPosition.x()][playerPosition.y()]": 4848,
    "cratePosition:": 4849,
    "this.currentCratesLocations.keySet())": 4850,
    "this.currentMap[cratePosition.x()][cratePosition.y()]": 4851,
    "Add": 4852,
    "checkpoint.playerLocations.get(playerId);": 4853,
    "Player(playerId);": 4854,
    "checkpoint.cratesLocations.keySet())": 4855,
    "checkpoint.cratesLocations.get(cratePosition);": 4856,
    "Box(playerId);": 4857,
    "map!\");": 4858,
    "Game": 4859,
    "terminates": 4860,
    "won": 4861,
    "performs": 4862,
    "Deadlock": 4863,
    "checking": 4864,
    "required": 4865,
    "%d\".formatted(this.state.getUndoQuota().get()));": 4866,
    "(this.processAction(this.inputEngine.fetchAction()))": 4867,
    "success": 4868,
    "failed": 4869,
    "this.renderingEngine.message(failed.getReason());": 4870,
    "(this.state.isWin())": 4871,
    "updates": 4872,
    "after": 4873,
    "each": 4874,
    "performed": 4875,
    "this.state.mostRecentAction": 4876,
    "(this.state.getUndoQuota().isPresent()": 4877,
    "PlayerID": 4878,
    "Process": 4879,
    "confirming": 4880,
    "contains": 4881,
    "own": 4882,
    "If": 4883,
    "nextNextPosition": 4884,
    "then": 4885,
    "Empty,": 4886,
    "nextDestination": 4887,
    "move.nextPosition(playerPosition);": 4888,
    "(this.state.getEntity(nextDestination))": 4889,
    "this.state.move(playerPosition,": 4890,
    "nextDestination);": 4891,
    "Pushed": 4892,
    "nextNextDestination": 4893,
    "move.nextPosition(nextDestination);": 4894,
    "(this.state.getEntity(nextNextDestination))": 4895,
    "Can": 4896,
    "this.state.move(nextDestination,": 4897,
    "nextNextDestination);": 4898,
    "Blocked,": 4899,
    "HashSet<>(initialPlayersPositions.values());": 4900,
    "this.entities[position.x()][position.y()]": 4901,
    "this.currentBoxesLocations": 4902,
    "map.getInitialBoxesLocations();": 4903,
    "this.currentPlayerLocation": 4904,
    "map.getInitialPlayerLocations();": 4905,
    "this.undoLimitLeft": 4906,
    "this.currentEntityLocations": 4907,
    "map.getInitialEntityLocations();": 4908,
    "this.checkpointBoxesLocations.add(new": 4909,
    "HashMap<>(map.getInitialBoxesLocations()));": 4910,
    "this.checkpointPlayerLocations.add(new": 4911,
    "HashMap<>(map.getInitialPlayerLocations()));": 4912,
    "this.checkpointEntityLocations.add(new": 4913,
    "HashMap<>(map.getInitialEntityLocations()));": 4914,
    "System.out.println(\"checkpoint": 4915,
    "before:": 4916,
    "checkpointPlayerLocations": 4917,
    "checkpointPlayerLocations);": 4918,
    "this.checkpointToGo;": 4919,
    "Starts": 4920,
    "this.numberOfPlayers": 4921,
    "map.getNumberOfPlayers();": 4922,
    "currentEntityLocations.entrySet())": 4923,
    "(entity.getKey().x()": 4924,
    "entity.getKey().y()": 4925,
    "entity.getValue();": 4926,
    "how?": 4927,
    "storing": 4928,
    "its": 4929,
    "possible": 4930,
    "System.out.println(\"fetched": 4931,
    "action\");": 4932,
    "terminalScanner.next();": 4933,
    "(inputLine.length()": 4934,
    "InvalidInput(initiator,": 4935,
    "lowerInputLine": 4936,
    "Character": 4937,
    "lowerInputLine.charAt(0);": 4938,
    "(inputChar)": 4939,
    "Move.Left(initiator);": 4940,
    "Move.Up(initiator);": 4941,
    "Move.Down(initiator);": 4942,
    "Move.Right(initiator);": 4943,
    "System.out.println(currentEntityLocations);": 4944,
    "System.out.println(currentPlayerLocation);": 4945,
    "System.out.println(currentBoxesLocations);": 4946,
    "entityAtFrom": 4947,
    "moveHistory.put(to,": 4948,
    "entityAtFrom);": 4949,
    "currentEntityLocations.replace(from,": 4950,
    "currentEntityLocations.replace(to,": 4951,
    "works": 4952,
    "properly": 4953,
    "(test": 4954,
    "System.out.println(\"doesnt": 4955,
    "work\");": 4956,
    "Works": 4957,
    "currentEntityLocations,": 4958,
    "getEntity": 4959,
    "returns": 4960,
    "instance": 4961,
    "currentEntityLocations": 4962,
    "(entityAtFrom": 4963,
    "test2": 4964,
    "currentBoxesLocations.replace((Box)": 4965,
    "entityAtFrom,": 4966,
    "foundBox": 4967,
    "foundBoxPosition": 4968,
    "Position(2,0);": 4969,
    "Box>": 4970,
    "currentBoxesLocations.entrySet())": 4971,
    "(entry.getValue().equals(from))": 4972,
    "(entry.getKey().y()": 4973,
    "from.y()": 4974,
    "entry.getKey().x()": 4975,
    "from.x())": 4976,
    "Found": 4977,
    "'from'": 4978,
    "entry.getKey();": 4979,
    "testing": 4980,
    "currentEntityLocations.replace(entityAtFrom,": 4981,
    "(testing": 4982,
    "System.out.println(\"testing": 4983,
    "failed\");": 4984,
    "testing);": 4985,
    "System.out.println(\"moved": 4986,
    "(found)": 4987,
    "currentBoxesLocations.put(to,": 4988,
    "foundBox);": 4989,
    "currentBoxesLocations.remove(foundBoxPosition);": 4990,
    "System.out.println(\"current": 4991,
    "currentBoxesLocations);": 4992,
    "(test2": 4993,
    "System.out.println(\"WORKS\");": 4994,
    "System.out.println(\"DOESNT": 4995,
    "WORK\");": 4996,
    "foundPlayer": 4997,
    "foundPlayerPosition": 4998,
    "Position(1,0);": 4999,
    "currentPlayerLocation.replace((Player)": 5000,
    "Player>": 5001,
    "currentPlayerLocation.entrySet())": 5002,
    "\".": 5003,
    "beocmes": 5004,
    "System.out.println(\"player": 5005,
    "currentPlayerLocation.put(to,": 5006,
    "foundPlayer);": 5007,
    "currentPlayerLocation.remove(foundPlayerPosition);": 5008,
    "System.out.println(\"checkpoint:": 5009,
    "before": 5010,
    "checkpointPlayerLocations.add(new": 5011,
    "HashMap<Position,Player>(currentPlayerLocation));": 5012,
    "currentplayerLocation": 5013,
    "currentPlayerLocation);": 5014,
    "checkpointBoxesLocations.add(new": 5015,
    "HashMap<>(currentBoxesLocations));": 5016,
    "checkpointEntityLocations.add(new": 5017,
    "HashMap<>(currentEntityLocations));": 5018,
    "checkpointToGo": 5019,
    "System.out.println(\"undo": 5020,
    "called\");": 5021,
    "(checkpointToGo": 5022,
    "checkpoints": 5023,
    "stored.": 5024,
    "Do": 5025,
    "nothing.": 5026,
    "(initial)": 5027,
    "currentPlayerLocation": 5028,
    "HashMap<>(checkpointPlayerLocations.get(0));": 5029,
    "currentBoxesLocations": 5030,
    "HashMap<>(checkpointBoxesLocations.get(0));": 5031,
    "HashMap<>(checkpointEntityLocations.get(0));": 5032,
    "undoLimitLeft": 5033,
    "HashMap<>(checkpointPlayerLocations.get(checkpointToGo));": 5034,
    "HashMap<>(checkpointBoxesLocations.get(checkpointToGo));": 5035,
    "HashMap<>(checkpointEntityLocations.get(checkpointToGo));": 5036,
    "checkpointPlayerLocations.remove(checkpointToGo+1);": 5037,
    "checkpointBoxesLocations.remove(checkpointToGo+1);": 5038,
    "checkpointEntityLocations.remove(checkpointToGo+1);": 5039,
    "System.out.println(\"currentplayer": 5040,
    "(this.state.getNumberOfPlayers()": 5041,
    "(!state.getUndoQuota().isPresent())": 5042,
    "userAction": 5043,
    "userActionResult": 5044,
    "this.processAction(userAction);": 5045,
    "(userActionResult": 5046,
    "userActionResult).getReason());": 5047,
    "(userAction": 5048,
    "(this.shouldStop())": 5049,
    "oneMorePushPosition;": 5050,
    "action).nextPosition(position);": 5051,
    "oneMorePushPosition": 5052,
    "action).nextPosition(newPosition);": 5053,
    "entityAtNewPosition": 5054,
    "state.getEntity(newPosition);": 5055,
    "entityAtOneMorePushPosition": 5056,
    "state.getEntity(oneMorePushPosition);": 5057,
    "(entityAtNewPosition": 5058,
    "entityAtNewPosition).getPlayerId()": 5059,
    "(entityAtOneMorePushPosition": 5060,
    "pushed": 5061,
    "oneMorePushPosition);": 5062,
    "(state.getDestinations().contains(entityAtOneMorePushPosition))": 5063,
    "been": 5064,
    "onto": 5065,
    "destination,": 5066,
    "update": 5067,
    "checkpoint.": 5068,
    "pushing": 5069,
    "box.": 5070,
    "Don't": 5071,
    "this.": 5072,
    "player.": 5073,
    "System.out.println(\"action": 5074,
    "Undo\");": 5075,
    "userSpecifiedExit": 5076,
    "whether": 5077,
    "typed": 5078,
    "'exit'": 5079,
    "terminalSokobanGame.shouldStop();": 5080,
    "state.setUserSpecifiedExitToTrue();": 5081,
    "playerIDSet": 5082,
    "Collections.emptySet();": 5083,
    "(Player": 5084,
    "initialPlayerLocations.values())": 5085,
    "playerIDSet.add(player.getId());": 5086,
    "playerIDSet;": 5087,
    "initialEntityLocations.put(position,": 5088,
    "initialBoxesLocations.put(position,": 5089,
    "initialPlayerLocations.put(position,": 5090,
    "DO": 5091,
    "numberOfPlayers": 5092,
    "player?": 5093,
    "And": 5094,
    "there's": 5095,
    "this.stateMap": 5096,
    "map.undoLimit);": 5097,
    "stateMap.getEntity(position);": 5098,
    "(inputLine.equalsIgnoreCase(\"EXIT\"))": 5099,
    "(inputLine.equalsIgnoreCase(\"A\"))": 5100,
    "(inputLine.equalsIgnoreCase(\"S\"))": 5101,
    "(inputLine.equalsIgnoreCase(\"W\"))": 5102,
    "(inputLine.equalsIgnoreCase(\"D\"))": 5103,
    "(inputLine.equalsIgnoreCase(\"H\"))": 5104,
    "(inputLine.equalsIgnoreCase(\"J\"))": 5105,
    "(inputLine.equalsIgnoreCase(\"K\"))": 5106,
    "(inputLine.equalsIgnoreCase(\"L\"))": 5107,
    "(inputLine.equalsIgnoreCase(\"U\"))": 5108,
    "getEntity(to)": 5109,
    "moveHistory.push(from);": 5110,
    "moveHistory.push(to);": 5111,
    "(to.x()-from.x()==1)": 5112,
    "moveHistory.push(Position.of(from.x()-1,": 5113,
    "moveHistory.push(Position.of(to.x()-1,": 5114,
    "(to.x()-from.x()==-1)": 5115,
    "moveHistory.push(Position.of(from.x()+1,": 5116,
    "moveHistory.push(Position.of(to.x()+1,": 5117,
    "(to.y()-from.y()==1)": 5118,
    "moveHistory.push(Position.of(from.x(),": 5119,
    "from.y()-1));": 5120,
    "moveHistory.push(Position.of(to.x(),": 5121,
    "to.y()-1));": 5122,
    "(to.y()-from.y()==-1)": 5123,
    "from.y()+1));": 5124,
    "to.y()+1));": 5125,
    "stateMap.putEntity(to,": 5126,
    "getEntity(from));": 5127,
    "stateMap.putEntity(from,": 5128,
    "mapCheckPoint": 5129,
    "GameState(stateMap);": 5130,
    "mapCheckPointList.add(mapCheckPoint);": 5131,
    "cp1": 5132,
    "(previous": 5133,
    "moveHistory.size()/2;": 5134,
    "i<size;": 5135,
    "mapCheckPoint.move(moveHistory.pop(),": 5136,
    "moveHistory.pop());": 5137,
    "mapCheckPointList.add(new": 5138,
    "GameState(stateMap));": 5139,
    "cp2": 5140,
    "(current)": 5141,
    "\uc870\uae08": 5142,
    "\ub354": 5143,
    "\ud6a8\uc728\uc801\uc778": 5144,
    "\ubc29\ubc95\uc774": 5145,
    "\uc788\uc744\uae4c?": 5146,
    "(!(mapCheckPoint": 5147,
    "stateMap": 5148,
    "mapCheckPoint.stateMap;": 5149,
    "mapCheckPoint.stateMap.undoLimit--;": 5150,
    "System.out.println(StringResources.GAME_READY_MESSAGE);": 5151,
    "System.out.printf(StringResources.UNDO_QUOTA_TEMPLATE,": 5152,
    "StringResources.UNDO_QUOTA_UNLIMITED": 5153,
    "Integer.toString(undoLimit));": 5154,
    "System.out.println();": 5155,
    "System.out.println(\">>>\");": 5156,
    "!exit": 5157,
    "content": 5158,
    "System.lineSeparator();": 5159,
    "outputSteam.print(temp);": 5160,
    "System.out.print(StringResources.GAME_EXIT_MESSAGE);": 5161,
    "System.out.println(action.getInitiator());": 5162,
    "System.out.println(currPos);": 5163,
    "action).nextPosition(currPos);": 5164,
    "(state.stateMap.getEntity(nextPos)": 5165,
    "id\uac00": 5166,
    "\uac19\uc73c\uba74": 5167,
    "\uc6c0\uc9c1\uc774\uae30": 5168,
    "\uc6c0\uc9c1\uc774\ub294": 5169,
    "\uac83\uae4c\uc9c0": 5170,
    "\uad6c\ud604": 5171,
    "\ud574\uc57c\ud568?": 5172,
    "state.stateMap.getEntity(nextPos)).getPlayerId()": 5173,
    "nextnextPos": 5174,
    "(state.stateMap.getEntity(nextnextPos)": 5175,
    "nextnextPos);": 5176,
    "ActionResult.Failed(action,\"Wall": 5177,
    "box!\");": 5178,
    "(nextPos.x()": 5179,
    "currPos.x()": 5180,
    "(state.stateMap.getEntity(Position.of(nextPos.x()": 5181,
    "nextPos.y()))": 5182,
    "Position.of(nextPos.x()": 5183,
    "nextPos.y()));": 5184,
    "System.out.println(\"move": 5185,
    "from\"": 5186,
    "\"to\"": 5187,
    "(nextPos.y()": 5188,
    "currPos.y()": 5189,
    "(state.stateMap.getEntity(Position.of(nextPos.x(),": 5190,
    "nextPos.y()": 5191,
    "Position.of(nextPos.x(),": 5192,
    "System.out.println(state.getPlayerPositionById(0));": 5193,
    "System.out.println(state.stateMap.getEntity(Position.of(3,": 5194,
    "\"Trying": 5195,
    "\"There": 5196,
    "next": 5197,
    "you.\");": 5198,
    "(Map.Entry<Integer,": 5199,
    "Position>": 5200,
    "initialPlayerMap.entrySet())": 5201,
    "playerIDs.add(set.getKey());": 5202,
    "i<entityMap.size();": 5203,
    "j<entityMap.get(i).size();": 5204,
    "(entityMap.get(i).get(j)": 5205,
    "playerIDs.add(((Player)": 5206,
    "entityMap.get(i).get(j)).getId());": 5207,
    "this.destinations.add(x);": 5208,
    "entityMap.get(position.y()).set(position.x(),": 5209,
    "curMap": 5210,
    "init[y][x]": 5211,
    "(map.getEntity(Position.of(x,": 5212,
    "y)))": 5213,
    "curMap[y][x]": 5214,
    "ckpt": 5215,
    "ckpt.add(init);": 5216,
    "if(!map.getUndoLimit().isPresent())": 5217,
    "infQuota": 5218,
    "curMap[position.y()][position.x()];": 5219,
    "tmp": 5220,
    "curMap[from.y()][from.x()]": 5221,
    "curMap[to.y()][to.x()];": 5222,
    "curMap[to.y()][to.x()]": 5223,
    "tmp;": 5224,
    "ck": 5225,
    "ck[y][x]": 5226,
    "(curMap[y][x])": 5227,
    "ckpt.add(ck);": 5228,
    "if(ckpt.size()": 5229,
    "ckpt.size()": 5230,
    "ckpt.remove(ckpt.size()": 5231,
    "(ckpt.get(id)[y][x])": 5232,
    "t": 5233,
    "state.getAllPlayerPositions();": 5234,
    "if(t.size()": 5235,
    "if(state.getUndoQuota().isPresent())": 5236,
    "renderingEngine.message(String.format(UNDO_QUOTA_TEMPLATE,String.valueOf(state.getUndoQuota().get())));": 5237,
    "flagDes": 5238,
    "if(des.contains(Position.of(x,": 5239,
    "//changed": 5240,
    "if(flagDes": 5241,
    "state.getPlayerPositionById(initiator);": 5242,
    "if(player": 5243,
    "tar": 5244,
    "action).nextPosition(player);": 5245,
    "nxt": 5246,
    "state.getEntity(tar);": 5247,
    "if(nxt": 5248,
    "state.move(player,": 5249,
    "tar);": 5250,
    "nxt).getPlayerId()": 5251,
    "tar2": 5252,
    "action).nextPosition(tar);": 5253,
    "nxt2": 5254,
    "state.getEntity(tar2);": 5255,
    "if(nxt2": 5256,
    "state.move(tar,": 5257,
    "tar2);": 5258,
    "this.boxId": 5259,
    "this.map[y][x]": 5260,
    "if(destinations.contains(Position.of(x,": 5261,
    "))": 5262,
    "if(playerId.contains(((Player)": 5263,
    "entity).getId()))": 5264,
    "playerId.add(((Player)": 5265,
    "boxId.add(((Box)": 5266,
    "boxPos.add(position);": 5267,
    "this.positionEntityMap.putAll(map.getPositionEntityMap());": 5268,
    "for(Map.Entry<Position,": 5269,
    "positionEntityMap.entrySet()){": 5270,
    "if(entry.getValue()": 5271,
    "playerPositionsById.put(temp.getId(),": 5272,
    "entry.getKey());": 5273,
    "allPlayerPositions.add(entry.getKey());": 5274,
    "(entry.getValue()": 5275,
    "boxLocations.add(entry.getKey());": 5276,
    "this.maxMapWidth": 5277,
    "this.maxMapHeight": 5278,
    "positionEntityMap.get(position);": 5279,
    "switch(inputLine.toUpperCase()){": 5280,
    ":{": 5281,
    "\"S\":{": 5282,
    "\"W\":{": 5283,
    "\"D\":{": 5284,
    "\"H\":{": 5285,
    "\"J\":{": 5286,
    "\"K\":{": 5287,
    "\"L\":{": 5288,
    "\"U\":{": 5289,
    "\"EXIT\":{": 5290,
    "default:{": 5291,
    "Input!\");": 5292,
    "this.positionEntityMap.put(to,": 5293,
    "this.positionEntityMap.put(from,": 5294,
    "allPlayerPositions.remove(from);": 5295,
    "allPlayerPositions.add(to);": 5296,
    "playerPositionsById.put(((Player)": 5297,
    "fromEntity).getId(),": 5298,
    "boxLocations.remove(from);": 5299,
    "boxLocations.add(to);": 5300,
    "this.checkPoint.add(this);": 5301,
    "if(this.checkPoint.size()": 5302,
    "previousState": 5303,
    "this.checkPoint.get(this.checkPoint.size()": 5304,
    "if(this.positionEntityMap": 5305,
    "previousState.positionEntityMap)": 5306,
    "this.positionEntityMap": 5307,
    "previousState.positionEntityMap;": 5308,
    "this.checkPoint": 5309,
    "previousState.checkPoint;": 5310,
    "this.boxLocations": 5311,
    "previousState.boxLocations;": 5312,
    "this.allPlayerPositions": 5313,
    "previousState.allPlayerPositions;": 5314,
    "this.playerPositionsById": 5315,
    "previousState.playerPositionsById;": 5316,
    "initialState": 5317,
    "GameState(this.map);": 5318,
    "initialState.positionEntityMap;": 5319,
    "initialState.boxLocations;": 5320,
    "initialState.allPlayerPositions;": 5321,
    "initialState.playerPositionsById;": 5322,
    "this.renderingEngine.render(gameState);": 5323,
    "if(!this.shouldStop())": 5324,
    "state.getUndoQuota());": 5325,
    "this.run();": 5326,
    "presentPosition": 5327,
    "action).nextPosition(presentPosition);": 5328,
    "objectEntity": 5329,
    "if(objectEntity": 5330,
    "\"Action": 5331,
    "Fail\");": 5332,
    "objectEntity).getPlayerId()": 5333,
    "action).nextPosition(nextPosition);": 5334,
    "if(state.getEntity(boxNextPosition)": 5335,
    "state.getEntity(boxNextPosition)": 5336,
    "state.move(presentPosition,": 5337,
    "if(state.getUndoQuota().get()": 5338,
    "this.positionEntityMap.put(position,": 5339,
    "this.Width": 5340,
    "this.Height": 5341,
    "map.map;": 5342,
    "this.playerids": 5343,
    "boxesPos": 5344,
    "ArrayList<Position>();": 5345,
    "i<=this.Height;": 5346,
    "widthofthisline": 5347,
    "this.map[i].length();": 5348,
    "j<widthofthisline;": 5349,
    "if(Character.isLowerCase(this.map[i].charAt(j))){": 5350,
    "boxesPos.add(new": 5351,
    "this.boxesPosition": 5352,
    "boxesPos;": 5353,
    "this.mapHistory.push(this.map.clone());": 5354,
    "deepCopyPos": 5355,
    "=new": 5356,
    "deepCopyPos.addAll(this.boxesPosition);": 5357,
    "this.boxPosHistory.push(deepCopyPos);": 5358,
    "if(this.getMapMaxHeight()<=": 5359,
    "position.y()||this.map[position.y()+1].length()<=position.x()){": 5360,
    "this.map[position.y()+1].charAt(position.x());": 5361,
    "Player((int)entity-'A');": 5362,
    "Box((int)entity-'a');": 5363,
    "entity=='@'){": 5364,
    "if(inputLine.equalsIgnoreCase(\"W\")){": 5365,
    "entityToMove": 5366,
    "(entityToMove){": 5367,
    "p->": 5368,
    "p.getId();": 5369,
    "(destinations.contains(from))": 5370,
    "map[from.y()": 5371,
    "1];": 5372,
    "chars": 5373,
    "line.toCharArray();": 5374,
    "chars[from.x()]": 5375,
    "String.valueOf(chars);": 5376,
    "map[to.y()": 5377,
    "chars[to.x()]": 5378,
    "(pid+'A');": 5379,
    "b->{": 5380,
    "bid": 5381,
    "b.getPlayerId();": 5382,
    "boxesPosition.remove(from);": 5383,
    "boxesPosition.add(to);": 5384,
    "(bid+'a');": 5385,
    "{return;}": 5386,
    "if(this.undolimit.isEmpty()": 5387,
    "this.undolimit.get()>0)": 5388,
    "(this.mapHistory.size()": 5389,
    "mapHistory.peek().clone();": 5390,
    "this.boxesPosition.clear();": 5391,
    "this.boxesPosition.addAll(boxPosHistory.peek());": 5392,
    "this.mapHistory.pop();": 5393,
    "this.boxPosHistory.pop();": 5394,
    "if(!this.undolimit.isEmpty())": 5395,
    "Optional.of(this.undolimit.get()": 5396,
    "if(gameState.getAllPlayerPositions().size()>2){": 5397,
    "\"+state.getUndoQuota().get());": 5398,
    "actionresult": 5399,
    "if(actionresult.getClass().equals(ActionResult.Failed.class)){": 5400,
    "renderingEngine.message": 5401,
    "(((ActionResult.Failed)": 5402,
    "actionresult).getReason());": 5403,
    "this.outputSteam.print(content+": 5404,
    "'n');": 5405,
    "if(action.getClass().equals(Exit.class)){": 5406,
    "(action.getClass().equals(InvalidInput.class))": 5407,
    "(action.getClass().equals(Undo.class))": 5408,
    "if(state.getUndoQuota().isEmpty()": 5409,
    "state.getUndoQuota().get()>0){": 5410,
    "state.getPlayerPositionById(playerid);": 5411,
    "positionUp": 5412,
    "Position(playerPos.x(),": 5413,
    "playerPos.y()-1);": 5414,
    "EntityUp": 5415,
    "state.getEntity(positionUp);": 5416,
    "if(EntityUp.getClass().equals(Wall.class)){": 5417,
    "(EntityUp.getClass().equals(Player.class))": 5418,
    "(EntityUp.getClass().equals(Box.class))": 5419,
    "boxid": 5420,
    "EntityUp).getPlayerId();": 5421,
    "if(playerid": 5422,
    "boxid){": 5423,
    "positionUpUp": 5424,
    "playerPos.y()-2);": 5425,
    "EntityUpUp": 5426,
    "state.getEntity(positionUpUp);": 5427,
    "if(EntityUpUp.getClass().equals(Empty.class)){": 5428,
    "state.move(positionUp,positionUpUp);": 5429,
    "state.move(playerPos,positionUp);": 5430,
    "if(EntityUp.getClass().equals(Empty.class)){": 5431,
    "positionDown": 5432,
    "playerPos.y()+1);": 5433,
    "EntityDown": 5434,
    "state.getEntity(positionDown);": 5435,
    "if(EntityDown.getClass().equals(Wall.class)){": 5436,
    "(EntityDown.getClass().equals(Player.class))": 5437,
    "(EntityDown.getClass().equals(Box.class))": 5438,
    "EntityDown).getPlayerId();": 5439,
    "positionDownDown": 5440,
    "playerPos.y()+2);": 5441,
    "EntityDownDown": 5442,
    "state.getEntity(positionDownDown);": 5443,
    "if(EntityDownDown.getClass().equals(Empty.class)){": 5444,
    "state.move(positionDown,positionDownDown);": 5445,
    "state.move(playerPos,positionDown);": 5446,
    "if(EntityDown.getClass().equals(Empty.class))": 5447,
    "positionDown);": 5448,
    "positionLeft": 5449,
    "Position(playerPos.x()-1,": 5450,
    "playerPos.y());": 5451,
    "EntityLeft": 5452,
    "state.getEntity(positionLeft);": 5453,
    "if(EntityLeft.getClass().equals(Wall.class)){": 5454,
    "(EntityLeft.getClass().equals(Player.class))": 5455,
    "(EntityLeft.getClass().equals(Box.class))": 5456,
    "EntityLeft).getPlayerId();": 5457,
    "positionLeftLeft": 5458,
    "Position(playerPos.x()-2,": 5459,
    "EntityLeftLeft": 5460,
    "state.getEntity(positionLeftLeft);": 5461,
    "if(EntityLeftLeft.getClass().equals(Empty.class)){": 5462,
    "state.move(positionLeft,positionLeftLeft);": 5463,
    "state.move(playerPos,positionLeft);": 5464,
    "if(EntityLeft.getClass().equals(Empty.class))": 5465,
    "positionLeft);": 5466,
    "positionRight": 5467,
    "Position(playerPos.x()+1,": 5468,
    "EntityRight": 5469,
    "state.getEntity(positionRight);": 5470,
    "if(EntityRight.getClass().equals(Wall.class)){": 5471,
    "(EntityRight.getClass().equals(Player.class))": 5472,
    "(EntityRight.getClass().equals(Box.class))": 5473,
    "EntityRight).getPlayerId();": 5474,
    "positionRightRight": 5475,
    "Position(playerPos.x()+2,": 5476,
    "EntityRightRight": 5477,
    "state.getEntity(positionRightRight);": 5478,
    "if(EntityRightRight.getClass().equals(Empty.class)){": 5479,
    "state.move(positionRight,positionRightRight);": 5480,
    "state.move(playerPos,positionRight);": 5481,
    "if(EntityRight.getClass().equals(Empty.class))": 5482,
    "positionRight);": 5483,
    "playerids": 5484,
    "i<=this.getMaxHeight();": 5485,
    "map[i].length();": 5486,
    "(Character.isUpperCase(map[i].charAt(j)))": 5487,
    "playerids.add((int)map[i].charAt(j)-'A');": 5488,
    "playerids;": 5489,
    "if(entity.getClass().equals(new": 5490,
    "Empty().getClass())){": 5491,
    "map[position.y()+1];": 5492,
    "chars[position.x()]": 5493,
    "map[position.y()+1]": 5494,
    "(entity.getClass().equals(new": 5495,
    "Wall().getClass()))": 5496,
    "Player(0).getClass()))": 5497,
    "symbol": 5498,
    "(player.getId()+'A');": 5499,
    "symbol;": 5500,
    "Box(0).getClass()))": 5501,
    "(char)(box.getPlayerId()+'a');": 5502,
    "map.putEntity(to,": 5503,
    "map.putEntity(from,": 5504,
    "Movement(from,": 5505,
    "checkpoints.add(moveHistory.size());": 5506,
    "(checkpoints.isEmpty())": 5507,
    "(checkpoints.size()": 5508,
    "checkpoints.remove(0);": 5509,
    "checkpoints.remove(checkpoints.size()": 5510,
    "checkpoints.get(checkpoints.size()": 5511,
    "checkpoint)": 5512,
    "move(moveHistory.get(moveHistory.size()": 5513,
    "1).to(),": 5514,
    "1).from());": 5515,
    "(!undoLimit.isEmpty())": 5516,
    "Optional.of(undoLimit.get()": 5517,
    "System.out.println(StringResources.WIN_MESSAGE);": 5518,
    "StringResources.UNDO_QUOTA_UNLIMITED);": 5519,
    "stopped": 5520,
    "//Valid": 5521,
    "{//": 5522,
    "state.getEntity(playerPosition)).getId())": 5523,
    "move.nextPosition(nextPosition);": 5524,
    "going": 5525,
    "(state.getEntity(nextNextPosition)": 5526,
    "nextNextPosition);": 5527,
    "Otherwise": 5528,
    "invalidInput.getMessage());": 5529,
    "allPlayers": 5530,
    "allPlayers.add(((Player)": 5531,
    "allPlayers;": 5532,
    "this.mapArr": 5533,
    "map.getMap();": 5534,
    "map.players;": 5535,
    "this.stateHistory": 5536,
    "ArrayList<Entity[][]>(0);": 5537,
    "deepCopyMap(this.mapArr);": 5538,
    "this.mapArr[position.y()][position.x()];": 5539,
    "switch(inputLine.toLowerCase()){": 5540,
    "\"u\"->": 5541,
    "mapArr[to.y()][to.x()];": 5542,
    "mapArr[to.y()][to.x()]": 5543,
    "mapArr[from.y()][from.x()];": 5544,
    "mapArr[from.y()][from.x()]": 5545,
    "tempEntity;": 5546,
    "(last": 5547,
    "stateHistory.add(last);": 5548,
    "(this.equals(original))": 5549,
    "(stateHistory.isEmpty()){": 5550,
    "deepCopyMap(original);": 5551,
    "undoQuota.isPresent()": 5552,
    "targetIndex": 5553,
    "stateHistory.size()": 5554,
    "deepCopyMap(stateHistory.get(targetIndex));": 5555,
    "stateHistory.remove(targetIndex);": 5556,
    "renderingEngine.message(\"nUndo": 5557,
    "undoQuota.get());": 5558,
    "renderingEngine.message(\"nUnlimited\");": 5559,
    "renderingEngine.message(\"nGame": 5560,
    "exits.nYou": 5561,
    "String.valueOf((char)((int)'a'+b.getPlayerId()));": 5562,
    "String.valueOf((char)((int)'A'+p.getId()));": 5563,
    "null->": 5564,
    "destination:": 5565,
    "(destination.x()": 5566,
    "&": 5567,
    "destination.y()==y){": 5568,
    "(y!=": 5569,
    "state.getMapMaxHeight()-1)": 5570,
    "outputSteam.println(builder);": 5571,
    "currentPosition;": 5572,
    "(Exception": 5573,
    "action).nextPosition(currentPosition);": 5574,
    "(targetEntity": 5575,
    "targetEntity).getPlayerId()!=action.getInitiator()){": 5576,
    "(!(state.getEntity(currentPosition.oneFurther(nextPosition))": 5577,
    "currentPosition.oneFurther(nextPosition));": 5578,
    "(undoQuota.isEmpty()){": 5579,
    "\"nGame": 5580,
    "this.players)": 5581,
    "ids.add(player.getId());": 5582,
    "(maxWidth": 5583,
    "<=0": 5584,
    "maxHeight<=0": 5585,
    "<-1)": 5586,
    ">0)": 5587,
    "Optional.ofNullable(undoLimit);": 5588,
    "this.mapArr[position.y()][position.x()]": 5589,
    "cpMap.add(map.getMap());": 5590,
    "gameMap.getMap();": 5591,
    "arr": 5592,
    "map.split(\"n\",": 5593,
    "10);": 5594,
    "(x": 5595,
    "arr[y+1].length()){": 5596,
    "arr[y+1].charAt(x);": 5597,
    "(Character.isLowerCase(e)){": 5598,
    "Box(e-'a');": 5599,
    "(Character.isUpperCase(e)){": 5600,
    "Player(e-'A');": 5601,
    "'@'){": 5602,
    "(inputLine.equals(\"a\")){": 5603,
    "(inputLine.equals(\"s\")){": 5604,
    "(inputLine.equals(\"w\")){": 5605,
    "(inputLine.equals(\"d\")){": 5606,
    "(inputLine.equals(\"u\")){": 5607,
    "(inputLine.equals(\"h\")){": 5608,
    "(inputLine.equals(\"j\")){": 5609,
    "(inputLine.equals(\"k\")){": 5610,
    "(inputLine.equals(\"l\")){": 5611,
    "gameMap.getEntity(from));": 5612,
    "cpMap.add(gameMap.getMap());": 5613,
    "(cpMap.size()": 5614,
    "cpMap.remove(cpMap.size()-1);": 5615,
    "gameMap.undoLimit--;": 5616,
    "gameMap.map": 5617,
    "cpMap.get(cpMap.size()-1);": 5618,
    "(gameMap.map": 5619,
    "cpMap.get(0)){": 5620,
    "cpMap.get(0);": 5621,
    "(state.getUndoQuota().isPresent()){": 5622,
    "((gameState.isWin())){": 5623,
    "k": 5624,
    "processAction(a);": 5625,
    "(k": 5626,
    "k).getReason());": 5627,
    "(a": 5628,
    "(Optional.of(0).get()": 5629,
    "state.getUndoQuota().get())": 5630,
    "(p": 5631,
    "(state.getEntity(Position.of(p.x(),": 5632,
    "p.y()": 5633,
    "state.getEntity(Position.of(p.x(),": 5634,
    "1))).getPlayerId()": 5635,
    "state.move(Position.of(p.x(),": 5636,
    "Position.of(p.x(),": 5637,
    "state.move(p,": 5638,
    "(state.getEntity(Position.of(p.x()": 5639,
    "p.y()))": 5640,
    "state.getEntity(Position.of(p.x()-1,": 5641,
    "p.y()))).getPlayerId()==": 5642,
    "state.getEntity(Position.of(p.x()": 5643,
    "state.move(Position.of(p.x()": 5644,
    "p.y()),": 5645,
    "Position.of(p.x()": 5646,
    "state.getEntity(Position.of(p.x()+1,": 5647,
    "p.y()))).getPlayerId()": 5648,
    "map.split(\"n\");": 5649,
    "idList": 5650,
    "arr.length-1;": 5651,
    "arr[i].length();": 5652,
    "(arr[i]": 5653,
    "\")": 5654,
    "(Character.isUpperCase(arr[i].charAt(j)))": 5655,
    "idList.add(arr[i].charAt(j)": 5656,
    "idList;": 5657,
    "arr[y+1]": 5658,
    "arr[y+1].substring(0,": 5659,
    "arr[y+1].substring(x+1,": 5660,
    "arr[y+1].length());": 5661,
    "arr.length;": 5662,
    "arr[i]": 5663,
    "\"n\";": 5664,
    "newMap;": 5665,
    "this.initialMap": 5666,
    "map.getMapCopy();": 5667,
    "this.checkpointMaps": 5668,
    "EXIT_COMMAND_TEXT:": 5669,
    "gameMap.getEntity(to);": 5670,
    "gameMap.putEntity(to,gameMap.getEntity(from));": 5671,
    "gameMap.putEntity(from,temp);": 5672,
    "checkpointMaps.add(gameMap.getMapCopy());": 5673,
    "undoQuota.map(i->i-1);": 5674,
    "(checkpointMaps.size()": 5675,
    "gameMap.setMap(initialMap);": 5676,
    "gameMap.setMap(checkpointMaps.get(checkpointMaps.size()-2));": 5677,
    "checkpointMaps.remove(checkpointMaps.size()-1);": 5678,
    "System.out.println(GAME_READY_MESSAGE);": 5679,
    "System.out.println(\"No.": 5680,
    "Players:": 5681,
    "gameState.getAllPlayerPositions().size());": 5682,
    "state.getUndoQuota().ifPresentOrElse(": 5683,
    "System.out.printf(UNDO_QUOTA_TEMPLATE,": 5684,
    "Integer.toString(value)),": 5685,
    "System.out.print(UNDO_QUOTA_UNLIMITED)": 5686,
    "System.out.print(\"n>>>n\");": 5687,
    "System.out.println(GAME_EXIT_MESSAGE);": 5688,
    "charToPrint;": 5689,
    "//include": 5690,
    "emtpy,": 5691,
    "state.getDestinations())": 5692,
    "(p.x()": 5693,
    "ActionResult.Failed(action,UNDO_QUOTA_RUN_OUT);": 5694,
    "ActionResult.Failed(action,((InvalidInput)": 5695,
    "\"Wall": 5696,
    "blocking": 5697,
    "you!\");": 5698,
    "nextEntity2": 5699,
    "state.getEntity(((Move)": 5700,
    "action).nextPosition(nextPosition));": 5701,
    "(nextEntity2": 5702,
    "state.move(nextPosition,((Move)": 5703,
    "state.move(state.getPlayerPositionById(action.getInitiator()),nextPosition);": 5704,
    "move!\");": 5705,
    "action!\");": 5706,
    "Set": 5707,
    "<Integer>": 5708,
    "(ArrayList<Entity>": 5709,
    "list)": 5710,
    "e).getId());": 5711,
    "modifed": 5712,
    "if(map.getUndoLimit().isPresent())": 5713,
    "explict": 5714,
    "GameMap(map,": 5715,
    "this.undoQuota);": 5716,
    "inputLowerCase": 5717,
    "Support": 5718,
    "if(inputLowerCase.equals(EXIT_COMMAND_TEXT)){": 5719,
    "Exit(initiator);": 5720,
    "if(inputLowerCase.length()": 5721,
    "ch": 5722,
    "inputLowerCase.charAt(0);": 5723,
    "(ch){": 5724,
    "//undo": 5725,
    "Undo(initiator);": 5726,
    "Input": 5727,
    "currentMap.getEntity(from);": 5728,
    "tmp);": 5729,
    "checkpoints.push(new": 5730,
    "GameMap(currentMap,": 5731,
    "checkpt": 5732,
    "if(!checkpoints.empty()){": 5733,
    "empty,": 5734,
    "use": 5735,
    "unmodified": 5736,
    "if(checkpoints.empty()){": 5737,
    "inital": 5738,
    "undoQuota);": 5739,
    "checkpoints.lastElement();": 5740,
    "if(state.getAllPlayerPositions().size()": 5741,
    "(!super.shouldStop()){": 5742,
    "undoMsg": 5743,
    "renderingEngine.message(undoMsg);": 5744,
    "failed)": 5745,
    "renderingEngine.message(failed.getReason());": 5746,
    "print": 5747,
    "if(pos": 5748,
    "#": 5749,
    "m.nextPosition(pos);": 5750,
    "state.currentMap.getEntity(nextPos);": 5751,
    "(e){": 5752,
    "Cannot": 5753,
    "belong": 5754,
    "empty/boxdst": 5755,
    "Once": 5756,
    "time": 5757,
    "m.nextPosition(nextPos);": 5758,
    "state.currentMap.getEntity(boxNextPos);": 5759,
    "if(!(entity": 5760,
    "if(i.isPresent()": 5761,
    "i.get()": 5762,
    "this.map.values()){": 5763,
    "playerIds.add((p.getId()));": 5764,
    "gamemap,": 5765,
    "undo)": 5766,
    "this(gamemap.maxWidth,": 5767,
    "gamemap.maxHeight,": 5768,
    "gamemap.destinations,": 5769,
    "undo);": 5770,
    "clone": 5771,
    "gamemap.map.keySet())": 5772,
    "tmp.put(pos,": 5773,
    "gamemap.map.get(pos));": 5774,
    "Entity>)tmp;": 5775,
    "hashmap": 5776,
    "this.allEntity.put(new": 5777,
    "e);": 5778,
    "this.allEntity.get(position);": 5779,
    "this.allEntity.put(to,": 5780,
    "this.allEntity.get(from));": 5781,
    "this.allEntity.put(from,": 5782,
    "this.allEntity.get(new": 5783,
    "temp.put(new": 5784,
    "this.checkpoints.add(temp);": 5785,
    "this.checkpoints.size();": 5786,
    "(size": 5787,
    "this.allEntity": 5788,
    "this.checkpoints.get(size": 5789,
    "this.checkpoints.remove(size": 5790,
    "(this.undoLimit.isPresent())": 5791,
    "Optional.of(this.undoLimit.get()": 5792,
    "this.checkpoints.get(0);": 5793,
    "this.checkpoints.remove(0);": 5794,
    "(super.state.getAllPlayerPositions().size()": 5795,
    "ready\");": 5796,
    "String.valueOf(this.state.getUndoQuota().get()));": 5797,
    "super.processAction(this.inputEngine.fetchAction());": 5798,
    "(act": 5799,
    "a)": 5800,
    "this.renderingEngine.message(a.getReason());": 5801,
    "act->": 5802,
    "this.state.getPlayerPositionById(act.getInitiator());": 5803,
    "this.state.getEntity(act.nextPosition(p));": 5804,
    "error": 5805,
    "(e)": 5806,
    "act.getInitiator())": 5807,
    "(this.state.getEntity(act.nextPosition(act.nextPosition(p)))": 5808,
    "this.state.move(act.nextPosition(p),": 5809,
    "act.nextPosition(act.nextPosition(p)));": 5810,
    "this.state.move(p,": 5811,
    "act.nextPosition(p));": 5812,
    "boxes.\";": 5813,
    "player.\";": 5814,
    "ActionResult.Success(act);": 5815,
    "ActionResult.Failed(act,": 5816,
    "error);": 5817,
    "this.state.getUndoQuota();": 5818,
    "(quota.isPresent()){": 5819,
    "(quota.get()": 5820,
    "this.allEntity.put(position,": 5821,
    "Entity[this.maxHeight][this.maxWidth];": 5822,
    "this.initialEntityMap": 5823,
    "i<this.maxHeight;": 5824,
    "j<this.maxWidth;": 5825,
    "initialEntityMap[i][j]": 5826,
    "this.initialDestinations": 5827,
    "HashSet<>(this.destinations);": 5828,
    "entityMap[position.y()][position.x()];": 5829,
    "(terminalScanner.hasNextLine())": 5830,
    "NoSuchElementException(\"Line": 5831,
    "terminalScanner.close();": 5832,
    "this.entityMap[to.y()][to.x()]": 5833,
    "this.entityMap[from.y()][from.x()];": 5834,
    "this.entityMap[from.y()][from.x()]": 5835,
    "this.entityMap[i][j];": 5836,
    "tempMap[i][j]": 5837,
    "this.checkPoints.add(tempMap);": 5838,
    "this.currentCheckPoint": 5839,
    "(this.getUndoQuota().isEmpty()": 5840,
    "this.undoQuotaLeft.get()": 5841,
    "(this.currentCheckPoint": 5842,
    "everything": 5843,
    "decrement": 5844,
    "this.initialEntityMap[i][j];": 5845,
    "HashSet<>(destinations);": 5846,
    "initial;": 5847,
    "undoquotaleft--": 5848,
    "this.checkPoints.clear();": 5849,
    "(this.getUndoQuota().isPresent())": 5850,
    "Optional.of(this.undoQuotaLeft.get()": 5851,
    "Copy": 5852,
    "entrymap,": 5853,
    "undoquotleft": 5854,
    "--": 5855,
    "checkPointMap": 5856,
    "this.checkPoints.get(checkPoints.size()": 5857,
    "checkPointMap[i][j];": 5858,
    "this.checkPoints.remove(checkPoints.size()": 5859,
    "(gameState.getAllPlayerIds().size()": 5860,
    "5)": 5861,
    "renderingEngine.message(String.format(UNDO_QUOTA_TEMPLATE,this.state.getUndoQuota().get()));": 5862,
    "renderingEngine.message(\">>>": 5863,
    "this.state.printEntityMap();": 5864,
    "renderingEngine.": 5865,
    "targetPosition": 5866,
    "action).nextPosition(playerPosition);": 5867,
    "state.getEntity(targetPosition);": 5868,
    "state.getAllPlayerIds().contains(playerId))": 5869,
    "targetPosition);": 5870,
    "(playerId": 5871,
    "targetEntity).getPlayerId())": 5872,
    "Can't": 5873,
    "which": 5874,
    "action).nextPosition(targetPosition))": 5875,
    "state.move(targetPosition,": 5876,
    "action).nextPosition(targetPosition));": 5877,
    "ArrayList<Integer>();": 5878,
    "for(Entity[]": 5879,
    "entityMap)": 5880,
    "for(Entity": 5881,
    "row)": 5882,
    "HashSet<Integer>(playerIds);": 5883,
    "FIXME": 5884,
    "this.checkpointStack": 5885,
    "ArrayDeque<>();": 5886,
    "this.entityArray": 5887,
    "Entity[map.getMaxWidth()][map.getMaxHeight()];": 5888,
    "this.playerPositions": 5889,
    "++y){": 5890,
    "this.entityArray[x][y]": 5891,
    "map.getEntity(Position.of(x,": 5892,
    "(this.entityArray[x][y]": 5893,
    "this.playerPositions.put(p.getId(),": 5894,
    "(0": 5895,
    "gameMap.getMaxWidth()": 5896,
    "gameMap.getMaxHeight())": 5897,
    "entityArray[position.x()][position.y()];": 5898,
    "inputWords": 5899,
    "(inputWords.length": 5900,
    "(inputWords[0].toLowerCase())": 5901,
    "StringResources.EXIT_COMMAND_TEXT": 5902,
    "entityArray[to.x()][to.y()]": 5903,
    "entityArray[from.x()][from.y()];": 5904,
    "entityArray[from.x()][from.y()]": 5905,
    "(entityArray[to.x()][to.y()]": 5906,
    "playerPositions.put(p.getId(),": 5907,
    "Entity[gameMap.getMaxWidth()][gameMap.getMaxHeight()];": 5908,
    "gameMap.getMaxHeight();": 5909,
    "copy[x][y]": 5910,
    "entityArray[x][y];": 5911,
    "checkpointStack.push(copy);": 5912,
    "(undoLimit.isPresent()": 5913,
    "!checkpointStack.isEmpty())": 5914,
    "(!checkpointStack.isEmpty())": 5915,
    "checkpointStack.pop();": 5916,
    "Function<Position,": 5917,
    "getSaved": 5918,
    "checkpointStack.isEmpty()": 5919,
    "gameMap.getEntity(p)": 5920,
    "checkpointStack.peek()[p.x()][p.y()];": 5921,
    "entityArray[x][y]": 5922,
    "getSaved.apply(Position.of(x,": 5923,
    "(entityArray[x][y]": 5924,
    ".message(StringResources.UNDO_QUOTA_TEMPLATE.formatted(state.getUndoQuota().get().toString()));": 5925,
    "willExit": 5926,
    "ActionResult.Failed(i,": 5927,
    "(playerPos": 5928,
    "nextPlayerPos": 5929,
    "m.nextPosition(playerPos);": 5930,
    "state.getEntity(nextPlayerPos);": 5931,
    "m.nextPosition(nextPlayerPos);": 5932,
    "farEntity": 5933,
    "(!(farEntity": 5934,
    "state.move(nextPlayerPos,": 5935,
    "nextPlayerPos);": 5936,
    "(state.getUndoQuota().orElse(1).equals(0))": 5937,
    "Optional.empty()": 5938,
    "maxHeight)": 5939,
    "entityArray[position.x()][position.y()]": 5940,
    "copyMap();": 5941,
    "copyMap(map);": 5942,
    "this.undoStack": 5943,
    "gameMap.get(position.y()).get(position.x());": 5944,
    "gameMap.get(from.y()).set(from.x(),": 5945,
    "gameMap.get(to.y()).set(to.x(),": 5946,
    "copyMap(gameMap);": 5947,
    "undoStack.push(checkpoint);": 5948,
    "(undoStack.empty())": 5949,
    "pasteMap(copyMap(originalMap));": 5950,
    "undoStack.pop();": 5951,
    "pasteMap(undoStack.empty()": 5952,
    "copyMap(originalMap)": 5953,
    "undoStack.peek());": 5954,
    "undoQuotaLeft--;": 5955,
    "(!undoQuota.isPresent())": 5956,
    "renderingEngine.message(UNDO_QUOTA_TEMPLATE.formatted(UNDO_QUOTA_UNLIMITED));": 5957,
    "renderingEngine.message(UNDO_QUOTA_TEMPLATE.formatted(undoQuota.get()));": 5958,
    "shouldStop": 5959,
    "(playerPositon": 5960,
    "move.nextPosition(playerPositon);": 5961,
    "(nextEntity)": 5962,
    "state.move(playerPositon,": 5963,
    "(move.getInitiator()": 5964,
    "box.getPlayerId())": 5965,
    "nextNextEntity": 5966,
    "state.getEntity(nextNextPosition);": 5967,
    "(!(nextNextEntity": 5968,
    "IllegalStateException(\"Unexpected": 5969,
    "value:": 5970,
    "action);": 5971,
    "(this.gameMap.get(y).get(x)": 5972,
    "this.gameMap.get(y).get(x)).getId());": 5973,
    "this.gameMap.add(new": 5974,
    "this.gameMap.get(y).add(null);": 5975,
    "this.gameMap.get(position.y()).set(position.x(),": 5976,
    "ok": 5977,
    "ok?": 5978,
    "this.gameHistory": 5979,
    "ArrayDeque<Map<Position,": 5980,
    "Entity>>();": 5981,
    "if(map.getUndoLimit().isEmpty()){": 5982,
    "this.undoNumber": 5983,
    "RuntimeException(String.valueOf(map.getMapLocation().size()));": 5984,
    "this.gameHistory.add(map.getMapLocation());": 5985,
    "this.tempMove": 5986,
    "Entity>(gameHistory.peek());": 5987,
    "this.tempMove.get(position);": 5988,
    "Exit(0);}": 5989,
    "Undo(0);}": 5990,
    "Move.Up(0);}": 5991,
    "Move.Left(0);}": 5992,
    "Move.Down(0);}": 5993,
    "Move.Right(0);}": 5994,
    "Move.Left(1);}": 5995,
    "Move.Down(1);}": 5996,
    "Move.Up(1);}": 5997,
    "Move.Right(1);}": 5998,
    "Input.\");}": 5999,
    "WASD": 6000,
    "HJKL": 6001,
    "2.": 6002,
    "deterimned": 6003,
    "casting": 6004,
    "*/": 6005,
    "InvalidInput(0,\"Should": 6006,
    "here\");": 6007,
    "//use": 6008,
    "putentity": 6009,
    "this.tempMove.replace(to,": 6010,
    "this.tempMove.replace(from,": 6011,
    "gameHistory.add(new": 6012,
    "Entity>(this.tempMove));": 6013,
    "undo(){": 6014,
    "TODO....": 6015,
    "IF": 6016,
    "OPEN": 6017,
    "GAME": 6018,
    "THEN": 6019,
    "UNDO": 6020,
    "WHAT": 6021,
    "HAPPEN?": 6022,
    "if(!changed){": 6023,
    "if(gameHistory.size()": 6024,
    "//popping": 6025,
    "tempMove": 6026,
    "Entity>(gameHistory.peekLast());": 6027,
    "this.gameHistory.removeLast();": 6028,
    "if(undoNumber": 6029,
    "undoNumber": 6030,
    "if(this.state.getUndoQuota().equals(Optional.empty())){": 6031,
    "userInput": 6032,
    "this.processAction(userInput);": 6033,
    "//1.": 6034,
    "render": 6035,
    "//2.": 6036,
    "(fetch": 6037,
    "//3.": 6038,
    "//4.": 6039,
    "double": 6040,
    "outputSteam.print('n');": 6041,
    "toBeReturned": 6042,
    "if(state.getPlayerPositionById(m.getInitiator())": 6043,
    "currPosition": 6044,
    "state.getPlayerPositionById(m.getInitiator());//position": 6045,
    "state.getEntity(m.nextPosition(currPosition));": 6046,
    "//object": 6047,
    "System.out.println(currPosition.x());": 6048,
    "System.out.println(currPosition.y());": 6049,
    "System.out.println(m.nextPosition(currPosition).x());": 6050,
    "System.out.println(m.nextPosition(currPosition).y());": 6051,
    "switch(pushing){": 6052,
    "m.getInitiator()){": 6053,
    "resultingDestination": 6054,
    "state.getEntity(m.nextPosition(m.nextPosition(currPosition)));": 6055,
    "//final": 6056,
    "object": 6057,
    "if(resultingDestination": 6058,
    "state.move(m.nextPosition(currPosition),": 6059,
    "m.nextPosition(m.nextPosition(currPosition)));//furthest": 6060,
    "state.move(currPosition,": 6061,
    "m.nextPosition(currPosition));": 6062,
    "//move": 6063,
    "forward": 6064,
    "//save": 6065,
    "\"SHOULD": 6066,
    "NOT": 6067,
    "REACH": 6068,
    "HERE,": 6069,
    "ERROR": 6070,
    "WITH": 6071,
    "ABSTRACTSOKOBANGAME.JAVA\");": 6072,
    "OUTER": 6073,
    "SWITCH": 6074,
    "this.stop": 6075,
    "if(!state.getUndoQuota().isPresent()": 6076,
    "toBeReturned;": 6077,
    "this.mapLocation": 6078,
    "this.boxCount": 6079,
    "this.accountedBoxes": 6080,
    "Integer>();": 6081,
    "</li>\u00b7": 6082,
    "mapLocation.put(position,": 6083,
    "this.entities": 6084,
    "this.entities[y][x]": 6085,
    "maxHeight){": 6086,
    "entities[position.y()][position.x()];": 6087,
    "\"error\");": 6088,
    "this.entities[from.y()][from.x()];": 6089,
    "this.entities[from.y()][from.x()]": 6090,
    "this.entities[to.y()][to.x()];": 6091,
    "this.entities[to.y()][to.x()]": 6092,
    "this.entities[i][j];": 6093,
    "entities[i][j]": 6094,
    "entry;": 6095,
    "this.checkpointEntities.push(entities);": 6096,
    "if(this.checkpointEntities.size()": 6097,
    "this.checkpointEntities.pop();": 6098,
    "if(this.undoLimit.get()": 6099,
    "playersCount": 6100,
    "if(playersCount": 6101,
    "undoQuota.get()": 6102,
    "\"Unlimited\"));": 6103,
    "while(true){": 6104,
    "this.processAction(inputEngine.fetchAction());": 6105,
    "Win.\");": 6106,
    "this.renderingEngine.message(f.getReason());": 6107,
    "if(playerPosition": 6108,
    "playerTo": 6109,
    "this.state.getEntity(playerTo);": 6110,
    "boxTo": 6111,
    "move.nextPosition(playerTo);": 6112,
    "box.getPlayerId()": 6113,
    "(this.state.getEntity(boxTo)": 6114,
    "this.state.getEntity(boxTo)": 6115,
    "Box)){": 6116,
    "this.state.move(playerTo,": 6117,
    "boxTo);": 6118,
    "playerTo);": 6119,
    "crrentUndoQuota": 6120,
    "if(crrentUndoQuota.isEmpty()": 6121,
    "crrentUndoQuota.get()": 6122,
    "gameStop": 6123,
    "playerIDS": 6124,
    "rows:": 6125,
    "this.entities){": 6126,
    "entry:": 6127,
    "rows){": 6128,
    "if(entry": 6129,
    "player){": 6130,
    "playerIDS.add(player.getId());": 6131,
    "playerIDS;": 6132,
    "entities.put(position,": 6133,
    "this.entities[position.y()][position.x()]": 6134,
    "this.checkpointStates": 6135,
    "ArrayList<GameMap>(map.getUndoLimit().get());": 6136,
    "this.currentState": 6137,
    "currentState.getEntity(position);": 6138,
    "terminalScanner.nextLine().toUpperCase();": 6139,
    "currentState.getEntity(from);": 6140,
    "(fromEntity": 6141,
    "currentState.changeBoxPosition(from,": 6142,
    "to,": 6143,
    "fromEntity).getPlayerId());": 6144,
    "currentState.setPlayerPositionById(((Player)": 6145,
    "currentState.getEntity(to));": 6146,
    "newState": 6147,
    "GameMap(currentState);": 6148,
    "checkpointStates.add(0,": 6149,
    "newState);": 6150,
    "(checkpointStates.isEmpty())": 6151,
    "GameMap(gameMap);": 6152,
    "checkpointStates.remove(0);": 6153,
    "StringResources.UNDO_QUOTA_UNLIMITED;": 6154,
    "Integer.toString(state.getUndoQuota().get());": 6155,
    "zero\");": 6156,
    "nextPositionEntity": 6157,
    "currentPlayer": 6158,
    "state.getEntity(currentPosition);": 6159,
    "(nextPositionEntity": 6160,
    "nextPositionEntity).getPlayerId()": 6161,
    "currentPlayer.getId())": 6162,
    "match": 6163,
    "ID.\");": 6164,
    "nextBoxPosition": 6165,
    "nextBoxPositionEntity": 6166,
    "state.getEntity(nextBoxPosition);": 6167,
    "(nextBoxPositionEntity": 6168,
    "nextBoxPosition);": 6169,
    "position\");": 6170,
    "\"Unknwon": 6171,
    "this.playerPositions.keySet();": 6172,
    "map.maxWidth;": 6173,
    "map.maxHeight;": 6174,
    "map.destinations;": 6175,
    "this.mapInfo": 6176,
    "map.mapInfo;": 6177,
    "this.initMapInfo": 6178,
    "parsedString": 6179,
    "mapInfo.split(\"n\");": 6180,
    "target": 6181,
    "parsedString[position.y()].charAt(position.x());": 6182,
    "(target": 6183,
    "'z')": 6184,
    "Box((int)(target": 6185,
    "'Z')": 6186,
    "Player((int)(target": 6187,
    "(inputLine.equals(\"u\")": 6188,
    "inputLine.equals(\"U\"))": 6189,
    "(inputLine.equals(\"a\")": 6190,
    "(inputLine.equals(\"d\")": 6191,
    "if(inputLine.equals(\"l\")": 6192,
    "(inputLine.equals(\"w\")": 6193,
    "(inputLine.equals(\"k\")": 6194,
    "(inputLine.equals(\"s\")": 6195,
    "(inputLine.equals(\"j\")": 6196,
    "objectToBeMoved": 6197,
    "parsedString[from.y()].charAt(from.x());": 6198,
    "newfromchar": 6199,
    "(this.destinations.contains(from))": 6200,
    "parsedString[from.y()]": 6201,
    "parsedString[from.y()].substring(0,": 6202,
    "parsedString[from.y()].substring(from.x()": 6203,
    "parsedString[to.y()]": 6204,
    "parsedString[to.y()].substring(0,": 6205,
    "to.x())": 6206,
    "parsedString[to.y()].substring(to.x()": 6207,
    "newMapInfo": 6208,
    "i<parsedString.length;": 6209,
    "(newMapInfo": 6210,
    "parsedString[i];": 6211,
    "'n'": 6212,
    "newMapInfo;": 6213,
    "this.mapInfoSave.add(this.mapInfo);": 6214,
    "(this.undoLimit": 6215,
    "(this.mapInfoSave.isEmpty())": 6216,
    "this.initMapInfo;": 6217,
    "(this.mapInfoSave.size()": 6218,
    "this.mapInfoSave.remove(this.mapInfoSave.size()-1);": 6219,
    "this.undoLimit--;": 6220,
    "this.mapInfoSave.get(this.mapInfoSave.size()": 6221,
    "this.state1": 6222,
    "(numberOfPlayers": 6223,
    "this.renderingEngine.render(this.state1);": 6224,
    "System.out.println(this.state1.mapInfo);": 6225,
    "this.state1.getUndoQuota();": 6226,
    "(quota.isPresent())": 6227,
    "System.out.println(UNDO_QUOTA_UNLIMITED);": 6228,
    "this.renderingEngine.message(String.format(UNDO_QUOTA_TEMPLATE,": 6229,
    "quota.get()));": 6230,
    "System.out.println(String.format(UNDO_QUOTA_TEMPLATE,": 6231,
    "(actionresult": 6232,
    "(this.state1.isWin())": 6233,
    "playerposition": 6234,
    "newplayerPosition": 6235,
    "(!this.getPlayerIds().contains(action.getInitiator()))": 6236,
    "Position(playerposition.x(),playerposition.y()": 6237,
    "Position(playerposition.x()": 6238,
    "1,playerposition.y());": 6239,
    "others'": 6240,
    "(state.getEntity(newplayerPosition)": 6241,
    "state.getEntity(newplayerPosition)": 6242,
    "state.getEntity(newplayerPosition)).getPlayerId()": 6243,
    "Position(newplayerPosition.x(),newplayerPosition.y()": 6244,
    "Position(newplayerPosition.x()": 6245,
    "1,newplayerPosition.y());": 6246,
    "state.getEntity(newBoxPosition)": 6247,
    "state.move(newplayerPosition,": 6248,
    "state.move(playerposition,": 6249,
    "newplayerPosition);": 6250,
    "Move.Down(action.getInitiator()));": 6251,
    "nothing": 6252,
    "Undo(action.getInitiator()));": 6253,
    "ActionResult.Failed(new": 6254,
    "Undo(action.getInitiator()),": 6255,
    "this.state.shouldExit": 6256,
    "Exit(action.getInitiator()));": 6257,
    "state.mapInfo.split(\"n\");": 6258,
    "j<parsedString[i].length();": 6259,
    "(parsedString[i].charAt(j)": 6260,
    "parsedString[i].charAt(j)": 6261,
    "'Z'){": 6262,
    "(playerIds.contains(parsedString[i].charAt(j)))": 6263,
    "playerIds.add((int)(parsedString[i].charAt(j)": 6264,
    "objectToBePlaced": 6265,
    "(char)('a'": 6266,
    "playerId);": 6267,
    "(char)('A'": 6268,
    "parsedString[position.y()]": 6269,
    "parsedString[position.y()].substring(0,": 6270,
    "position.x())": 6271,
    "parsedString[position.y()].substring(position.x()": 6272,
    "this.currentGameMap": 6273,
    "this.checkpoints.push(new": 6274,
    "GameMap(map));": 6275,
    "this.currentGameMap.getEntity(position);": 6276,
    "Pattern": 6277,
    "movesPattern": 6278,
    "Pattern.compile(\"^(?<action>[ASWDaswdHJKLhjkl])$\");": 6279,
    "moveChars": 6280,
    "\"ASWDaswdHJKLhjkl\";": 6281,
    "this.terminalScanner.nextLine();": 6282,
    "StringResources.EXIT_COMMAND_TEXT.length()": 6283,
    "inputLine.toLowerCase().contains(StringResources.EXIT_COMMAND_TEXT)){": 6284,
    "Character.toLowerCase(inputLine.charAt(0))": 6285,
    "'u'){": 6286,
    "(Pattern.matches(movesPattern.pattern(),": 6287,
    "inputLine)){": 6288,
    "moveChars.length();++i){": 6289,
    "moveChars.length()/2?": 6290,
    "0:": 6291,
    "(moveChars.charAt(i)": 6292,
    "c){": 6293,
    "this.currentGameMap.move(from,": 6294,
    "GameMap(this.currentGameMap));": 6295,
    "(this.isUndoQuota()": 6296,
    "checkpoints.size()": 6297,
    "GameMap(this.checkpoints.peek());": 6298,
    "(this.decrementUndoQuota()){": 6299,
    "this.popCheckPoints();": 6300,
    "IllegalArgumentException(StringResources.MORE_THAN_2_PLAYERS);": 6301,
    "(!this.shouldStop()){": 6302,
    "1.": 6303,
    "remaining": 6304,
    "arrows": 6305,
    "quotaString;": 6306,
    "quotaString": 6307,
    "String.format(StringResources.UNDO_QUOTA_TEMPLATE,this.state.getUndoQuota().get());": 6308,
    "this.renderingEngine.message(quotaString);": 6309,
    "this.renderingEngine.message(StringResources.GET_INPUT_ARROWS);": 6310,
    "actionFailed){": 6311,
    "this.renderingEngine.message(actionFailed.getReason());": 6312,
    "3.": 6313,
    "outputStream)": 6314,
    "outputStream;": 6315,
    "+System.lineSeparator());": 6316,
    "this.processMove(move);": 6317,
    "this.processInvalidInput(invalidInput);": 6318,
    "this.processUndo(undo);": 6319,
    "this.processExit(exit);": 6320,
    "Optional.ofNullable(undoLimit": 6321,
    "undoLimit);": 6322,
    "this.positionMap": 6323,
    "this.positionMap.put(position,": 6324,
    "Optional.of(map.getUndoLimit().get());": 6325,
    "curMap.putAll(map.getMap());": 6326,
    "curMap.get(position);": 6327,
    "\"w\",": 6328,
    "\"a\",": 6329,
    "\"s\",": 6330,
    "\"d\",": 6331,
    "\"h\",": 6332,
    "\"j\",": 6333,
    "\"k\",": 6334,
    "\"l\",": 6335,
    "isUndoThisRound": 6336,
    "isFirstTimeHitEmpty": 6337,
    "prevMapBeforeOneMove": 6338,
    "prevMapBeforeOneMove.putAll(curMap);": 6339,
    "curMap.get(to);": 6340,
    "curMap.put(to,": 6341,
    "curMap.get(from));": 6342,
    "curMap.put(from,": 6343,
    "prevMap": 6344,
    "prevMap.putAll(curMap);": 6345,
    "prevMaps.add(prevMap);": 6346,
    "(prevMaps.empty())": 6347,
    "(isUndoThisRound": 6348,
    "!isFirstTimeHitEmpty)": 6349,
    "curMap.putAll(originalMap.getMap());": 6350,
    "(!isUndoThisRound)": 6351,
    "prevMaps.pop();": 6352,
    "curMap.putAll(prevMaps.pop());": 6353,
    "renderingEngine.message(StringResources.UNDO_QUOTA_TEMPLATE);": 6354,
    "renderingEngine.message(state.getUndoQuota().get().toString());": 6355,
    "curAction": 6356,
    "input.getMessage());": 6357,
    "0))": 6358,
    "ActionResult.Failed(d,": 6359,
    "(state.getPlayerPositionById(m.getInitiator())": 6360,
    "state.getEntity(m.nextPosition(state.getPlayerPositionById(playerId)));": 6361,
    "(nextPosEntity": 6362,
    "Player!\");": 6363,
    "m.nextPosition(playerPos));": 6364,
    "nextPosEntity;": 6365,
    "//The": 6366,
    "\"This": 6367,
    "m.nextPosition(m.nextPosition(playerPos));": 6368,
    "\"The": 6369,
    "something": 6370,
    "else!\");": 6371,
    "state.move(m.nextPosition(playerPos),": 6372,
    "m.nextPosition(m.nextPosition(playerPos)));": 6373,
    "result.add(player.getId());": 6374,
    "playersPositions": 6375,
    "boxesPositions": 6376,
    "checkPoints": 6377,
    "playersPositions.put(playerId,": 6378,
    "boxesPositions.add(position);": 6379,
    "currEntity": 6380,
    "gameMap.getEntity(from);": 6381,
    "targetEntity);": 6382,
    "currEntity);": 6383,
    "(currEntity": 6384,
    "playersPositions.replace(((Player)": 6385,
    "currEntity).getId(),": 6386,
    "boxesPositions.remove(from);": 6387,
    "boxesPositions.add(to);": 6388,
    "clonedGameMap": 6389,
    "gameMap.clone(gameMap);": 6390,
    "checkPoints.push(clonedGameMap);": 6391,
    "now": 6392,
    "setup": 6393,
    "(gameMap.gameMap[y][x]": 6394,
    "checkPoints.firstElement().gameMap[y][x])": 6395,
    "(!same": 6396,
    "undoQuotaLeft.isPresent())": 6397,
    "Optional.of(undoQuotaLeft.get()": 6398,
    "pop": 6399,
    "(checkPoints.size()": 6400,
    "checkPoints.pop();": 6401,
    "step": 6402,
    "IllegalArgumentException(\"Too": 6403,
    "players\");": 6404,
    "displayUndoQuota;": 6405,
    "displayUndoQuota": 6406,
    "Limited": 6407,
    "undoQuotaLeft);": 6408,
    "renderingEngine.message(displayUndoQuota);": 6409,
    "displayUndoQuota2": 6410,
    "undoQuotaLeft2": 6411,
    "undoQuotaLeft2);": 6412,
    "renderingEngine.message(displayUndoQuota2);": 6413,
    "playerCurPosition": 6414,
    "Input.": 6415,
    "action).getMessage();": 6416,
    "(!state.getUndoQuota().isEmpty()": 6417,
    "Undolimit": 6418,
    "You": 6419,
    "quota.": 6420,
    "who's": 6421,
    "moving:": 6422,
    "(state.getPlayerPositionById(playerId).equals(new": 6423,
    "Position(-1,": 6424,
    "-1)))": 6425,
    "move.nextPosition(playerCurPosition);": 6426,
    "Hit": 6427,
    "walls:": 6428,
    "wall.": 6429,
    "StringResources.HIT_WALL);": 6430,
    "Pushing": 6431,
    "nextPositionEntity;": 6432,
    "wrong": 6433,
    "boxes.": 6434,
    "StringResources.MOVE_WRONG_BOX);": 6435,
    "boxes:": 6436,
    "Failed": 6437,
    "targetBoxPos;": 6438,
    "(move": 6439,
    "targetBoxPos": 6440,
    "Position(nextPosition.x()": 6441,
    "nextPosition.y());": 6442,
    "Position(nextPosition.x(),": 6443,
    "nextPosition.y()": 6444,
    "Position(99,": 6445,
    "99);": 6446,
    "(state.getEntity(targetBoxPos)": 6447,
    "StringResources.MOVE_BOX_FAIL);": 6448,
    "OK!": 6449,
    "targetBoxPos);": 6450,
    "state.move(playerCurPosition,": 6451,
    "Player:": 6452,
    "StringResources.HIT_PLAYER);": 6453,
    "game:": 6454,
    "exits.": 6455,
    "TODO:": 6456,
    "failed?": 6457,
    "gameMap[position.y()][position.x()]": 6458,
    "currentMap.getUndoLimit();": 6459,
    "initialMap": 6460,
    "nextMaptoSave": 6461,
    "initialMap;": 6462,
    "ref": 6463,
    "link": 6464,
    "//Action": 6465,
    "returnAction": 6466,
    "(inputLine.equalsIgnoreCase(\"A\")){": 6467,
    "(inputLine.equalsIgnoreCase(\"S\")){": 6468,
    "(inputLine.equalsIgnoreCase(\"W\")){": 6469,
    "(inputLine.equalsIgnoreCase(\"D\")){": 6470,
    "(inputLine.equalsIgnoreCase(\"H\")){": 6471,
    "(inputLine.equalsIgnoreCase(\"J\")){": 6472,
    "(inputLine.equalsIgnoreCase(\"K\")){": 6473,
    "(inputLine.equalsIgnoreCase(\"L\")){": 6474,
    "(inputLine.equalsIgnoreCase(\"U\")){": 6475,
    "(inputLine.equalsIgnoreCase(StringResources.EXIT_COMMAND_TEXT)){": 6476,
    "origE": 6477,
    "those": 6478,
    "won't": 6479,
    "affected": 6480,
    "coming": 6481,
    "reference": 6482,
    "newE": 6483,
    "getEntity(to).copy();": 6484,
    "origE);": 6485,
    "overwrite": 6486,
    "postion": 6487,
    "newE);": 6488,
    "old": 6489,
    "sure": 6490,
    "//checkpoints.add(new": 6491,
    "GameMap(currentMap));": 6492,
    "//if": 6493,
    "(nextMaptoSave": 6494,
    "initialMap)": 6495,
    "because": 6496,
    "remains": 6497,
    "unchanged": 6498,
    "checkpoints.push(nextMaptoSave);": 6499,
    "//}": 6500,
    "GameMap(currentMap);": 6501,
    "(GameMap": 6502,
    "checkpoints){": 6503,
    "System.out.println(\"<": 6504,
    ">\");": 6505,
    "System.out.println(i.toString());": 6506,
    "j++;": 6507,
    "(checkpoints.empty()){": 6508,
    "recorded": 6509,
    "System.out.println(\"There's": 6510,
    "recorded,": 6511,
    "state.\");": 6512,
    "GameMap(initialMap);": 6513,
    "lastIndex": 6514,
    "checkpoints.size()-1;": 6515,
    "//currentMap": 6516,
    "GameMap(checkpoints.get(lastIndex));": 6517,
    "//checkpoints.remove(lastIndex);": 6518,
    "(undoQuotaLeft.isPresent()){": 6519,
    "limited,": 6520,
    "decrease": 6521,
    "updatedQuota": 6522,
    "undoQuotaLeft.get()": 6523,
    "Optional.of(updatedQuota);": 6524,
    "(this.state.getAllPlayerPositions().size()": 6525,
    "IllegalArgumentException(\"There're": 6526,
    "//System.out.println(\"Running\");": 6527,
    "Character.toString(this.getEmptyChar());": 6528,
    "m)": 6529,
    "initiatorID": 6530,
    "(state.getPlayersIds().contains(initiatorID))": 6531,
    "exists": 6532,
    "initiatorPos": 6533,
    "state.getPlayerPositionById(initiatorID);": 6534,
    "m.nextPosition(initiatorPos);": 6535,
    "(nextPosEntity.isWalkable())": 6536,
    "state.move(initiatorPos,": 6537,
    "behind": 6538,
    "BoxID": 6539,
    "(initiatorID": 6540,
    "b.getPlayerId()){": 6541,
    "Character.toString((char)": 6542,
    "'A'))": 6543,
    "can't": 6544,
    "'a')));": 6545,
    "match,": 6546,
    "offsetX": 6547,
    "offsetY": 6548,
    "(m": 6549,
    "behindBoxPos": 6550,
    "offsetX,": 6551,
    "offsetY);": 6552,
    "behindBox": 6553,
    "state.getEntity(behindBoxPos);": 6554,
    "(behindBox.isWalkable())": 6555,
    "successfully": 6556,
    "behindBoxPos);": 6557,
    "shift": 6558,
    "want": 6559,
    "possible.\");": 6560,
    "pushed.\");": 6561,
    "\"There's": 6562,
    "move.\");": 6563,
    "ran": 6564,
    "trigger": 6565,
    "flag": 6566,
    "\"No": 6567,
    "action.\");": 6568,
    "already": 6569,
    "unmodifiable": 6570,
    "Collections.unmodifiableSet(destinations)": 6571,
    "finalize": 6572,
    "moveLeft(int": 6573,
    "id){": 6574,
    "(Objects.isNull(MOVE_LEFT_OBJS[id]))": 6575,
    "MOVE_LEFT_OBJS[id]": 6576,
    "Move.Left(id);": 6577,
    "MOVE_LEFT_OBJS[id];": 6578,
    "gmMp": 6579,
    "moveDown(int": 6580,
    "(Objects.isNull(MOVE_DOWN_OBJS[id]))": 6581,
    "MOVE_DOWN_OBJS[id]": 6582,
    "Move.Down(id);": 6583,
    "MOVE_DOWN_OBJS[id];": 6584,
    "gmMp.getEntity(position);": 6585,
    "switch(terminalScanner.nextLine().toLowerCase())": 6586,
    "Move.moveLeft(0);": 6587,
    "Move.moveDown(0);": 6588,
    "Move.moveUp(0);": 6589,
    "Move.moveRight(0);": 6590,
    "Move.moveLeft(1);": 6591,
    "Move.moveDown(1);": 6592,
    "Move.moveUp(1);": 6593,
    "Move.moveRight(1);": 6594,
    "Undo.get(0);": 6595,
    "s": 6596,
    "s.equals(StringResources.EXIT_COMMAND_TEXT)": 6597,
    "gmMp.performMove(from,": 6598,
    "movePlayer(Move": 6599,
    "playerMove)": 6600,
    "playerCrtPos": 6601,
    "getPlayerPositionById(playerMove.getInitiator());": 6602,
    "(Objects.isNull(playerCrtPos))": 6603,
    "ActionResult.Failed(playerMove,": 6604,
    "targetPos": 6605,
    "playerMove.nextPosition(playerCrtPos);": 6606,
    "assert": 6607,
    "(gmMp.isInBound(targetPos));": 6608,
    "(getEntity(targetPos))": 6609,
    "__": 6610,
    "move(playerCrtPos,": 6611,
    "targetPos);": 6612,
    "ActionResult.Success(playerMove);": 6613,
    "StringResources.MOVE_HIT_WALL);": 6614,
    "StringResources.MOVE_HIT_PLAYER);": 6615,
    "playerMove.getInitiator())": 6616,
    "StringResources.MOVE_HIT_OTHER_BOX);": 6617,
    "boxTarget": 6618,
    "playerMove.nextPosition(targetPos);": 6619,
    "System.out.println(\"target": 6620,
    "pos:": 6621,
    "boxTarget);": 6622,
    "(!gmMp.isInBound(boxTarget)": 6623,
    "!(getEntity(boxTarget)": 6624,
    "StringResources.MOVE_BOX_FAILED);": 6625,
    "move(targetPos,": 6626,
    "checkPoints.push(gmMp.createCheckPoint());": 6627,
    "System.out.printf(\"add": 6628,
    "point:": 6629,
    "%h@%sn\",": 6630,
    "point.hashCode(),": 6631,
    "point.toString());": 6632,
    "System.out.println(\"stored": 6633,
    "checkpoints:": 6634,
    "checkPoints.forEach(cp": 6635,
    "System.out.printf(\"%h@%sn\",": 6636,
    "cp.hashCode(),": 6637,
    "cp.toString()));": 6638,
    "gmMp.revert(checkPoints.peek());": 6639,
    "gmMp.decreUndoLim();": 6640,
    "System.out.println(\"rest": 6641,
    "performUndo(Undo": 6642,
    "u)": 6643,
    "(gmMp.getUndoLimit().orElse(1)": 6644,
    "IllegalArgumentException(StringResources.PLAYER_EXCEED_LIMIT);": 6645,
    "System.out.println(\"initial": 6646,
    "saved\");": 6647,
    "(;": 6648,
    "System.out.println(\"running\");": 6649,
    "(lastAction": 6650,
    "renderingEngine.message(": 6651,
    "state.getUndoQuota().map(": 6652,
    "(Function<Integer,": 6653,
    "String>)": 6654,
    ").orElse(StringResources.UNDO_QUOTA_UNLIMITED)": 6655,
    "renderingEngine.message(StringResources.RENDER_DELIMINATER);": 6656,
    "(processAction(inputEngine.fetchAction())": 6657,
    "\"Box_\"": 6658,
    "\"@\"": 6659,
    "this.hashCode();": 6660,
    "moveUp(int": 6661,
    "(Objects.isNull(MOVE_UP_OBJS[id]))": 6662,
    "MOVE_UP_OBJS[id]": 6663,
    "Move.Up(id);": 6664,
    "MOVE_UP_OBJS[id];": 6665,
    "moveRight(int": 6666,
    "(Objects.isNull(MOVE_RIGHT_OBJS[id]))": 6667,
    "MOVE_RIGHT_OBJS[id]": 6668,
    "Move.Right(id);": 6669,
    "MOVE_RIGHT_OBJS[id];": 6670,
    "lastAction": 6671,
    "state.movePlayer(m);": 6672,
    "state.performUndo(u);": 6673,
    "playerPos.keySet();": 6674,
    "maxHeight);": 6675,
    "undoLim": 6676,
    "entity){": 6677,
    "board[position.y()][position.x()]": 6678,
    "recomputeSets();": 6679,
    "recomputeSets(){": 6680,
    "playerPos.clear();": 6681,
    "boxPos.clear();": 6682,
    "board.length;": 6683,
    "board[i].length;": 6684,
    "Position.of(j,": 6685,
    "i);": 6686,
    "(board[i][j]){": 6687,
    "playerPos.put(p.getId(),": 6688,
    "pos);": 6689,
    "boxPos.put(b,": 6690,
    "GameMap.parse(map.generateMapString());": 6691,
    "playerPositions": 6692,
    "stateMap.playerLocs){": 6693,
    "allMapStates.add(map);": 6694,
    "allMapStr.add(stateMap.generateMapString());": 6695,
    "stateMap.undoLimit;": 6696,
    "//TestUndo": 6697,
    "getUndoQuota();": 6698,
    "currAction": 6699,
    "if(inputLine.toUpperCase().contentEquals(\"A\"))": 6700,
    "if(inputLine.toUpperCase().contentEquals(\"D\"))": 6701,
    "if(inputLine.toUpperCase().contentEquals(\"W\"))": 6702,
    "if(inputLine.toUpperCase().contentEquals(\"S\"))": 6703,
    "(inputLine.toUpperCase().contentEquals(\"U\"))": 6704,
    "(inputLine.contentEquals(StringResources.EXIT_COMMAND_TEXT))": 6705,
    "if(TerminalSokobanGame.numOfPlayers": 6706,
    "if(inputLine.toUpperCase().contentEquals(\"H\"))": 6707,
    "if(inputLine.toUpperCase().contentEquals(\"L\"))": 6708,
    "if(inputLine.toUpperCase().contentEquals(\"K\"))": 6709,
    "if(inputLine.toUpperCase().contentEquals(\"J\"))": 6710,
    "currAction;": 6711,
    "stateMap.map.get(from.y()).mapLine.get(from.x());": 6712,
    "stateMap.map.get(to.y()).setValue(c,": 6713,
    "to.x());": 6714,
    "if(GameMap.parseState(allMapStr.get(0)).getChar(from)": 6715,
    "stateMap.map.get(from.y()).setValue('@',": 6716,
    "from.x());": 6717,
    "stateMap.map.get(from.y()).setValue('.',": 6718,
    "allStates.add(this);": 6719,
    "allMapStates.add(stateMap);": 6720,
    "stateIndex": 6721,
    "allMapStr.size()": 6722,
    "if(allMapStr.size()": 6723,
    "GameMap.parseState(allMapStr.get(0));": 6724,
    "GameMap.parseState(allMapStr.get(stateIndex));": 6725,
    "allMapStr.remove(allMapStr.size()": 6726,
    "//allMapStates.remove(stateIndex);": 6727,
    "stateIndex--;": 6728,
    "stateMap.undoLimit": 6729,
    "if(numOfPlayers": 6730,
    "if(!super.shouldStop()": 6731,
    "!(currAction": 6732,
    "while(!super.shouldStop()": 6733,
    "Exit)){": 6734,
    "super.processAction(currAction);": 6735,
    "if(!state.getUndoQuota().isEmpty()){": 6736,
    "out.append(\"Undo": 6737,
    "Quota": 6738,
    "out.append(state.getUndoQuota().get().toString());": 6739,
    "renderingEngine.message(out.toString());": 6740,
    "renderingEngine.message(\"Unlimited": 6741,
    "Undos\");": 6742,
    "if(shouldStop())": 6743,
    "if(currAction": 6744,
    "MapLevel(int": 6745,
    "width)": 6746,
    "mapLine": 6747,
    "ArrayList<Character>();": 6748,
    "mapLine.add('": 6749,
    "');": 6750,
    "entityMap.add(new": 6751,
    "Move.Up(playerID);": 6752,
    "Move.Down(playerID);": 6753,
    "Move.Right(playerID);": 6754,
    "Move.Left(playerID);": 6755,
    "nLett": 6756,
    "state.stateMap.getChar(moving.nextPosition(state.getPlayerPositionById(playerID)));": 6757,
    "moving.nextPosition(state.getPlayerPositionById(playerID));": 6758,
    "//There's": 6759,
    "(Character.isAlphabetic(nLett)": 6760,
    "Character.isLowerCase(nLett))": 6761,
    "notYourBox": 6762,
    "GameMap.idToLetter(playerID,": 6763,
    "nLett;": 6764,
    "if(notYourBox)": 6765,
    "Your": 6766,
    "nextToBoxPosi": 6767,
    "moving.nextPosition(nextPos);": 6768,
    "nextToBox": 6769,
    "state.stateMap.getChar(nextToBoxPosi);": 6770,
    "(nextToBox": 6771,
    "\"Something": 6772,
    "nextToBoxPosi);": 6773,
    "state.move(state.getPlayerPositionById(playerID),": 6774,
    "state.stateMap.setChar(nLett,": 6775,
    "(nLett": 6776,
    "Character.isUpperCase(nLett)))": 6777,
    "//If": 6778,
    "\"Running": 6779,
    "wall/player!\");": 6780,
    "//Nothing": 6781,
    "Blocking": 6782,
    "//System.out.print(\"UNDOING\");": 6783,
    "(state.undoQuota": 6784,
    "\"Your": 6785,
    "destPosi": 6786,
    "playerLocs": 6787,
    "MapLevel": 6788,
    "newLevel": 6789,
    "MapLevel(maxWidth);": 6790,
    "map.add(newLevel);": 6791,
    "currDest": 6792,
    "map.get(currDest.y()).setValue('@',": 6793,
    "currDest.x());": 6794,
    "destPosi.add(currDest);": 6795,
    "//GameMap.get(currDest.x()).setEntity(new": 6796,
    "Box(),": 6797,
    "currDest.y());": 6798,
    "this.undoquota": 6799,
    "map.id;": 6800,
    "this.map.length;": 6801,
    "this.map[i].length;": 6802,
    "System.out.print(\"#\");": 6803,
    "System.out.print(\"A\");": 6804,
    "System.out.print(\".\");": 6805,
    "System.out.print(\"a\");": 6806,
    "System.out.print(\"n\");": 6807,
    "map[position.y()][position.x()];": 6808,
    "tempid;": 6809,
    "if(map[from.y()][from.x()]": 6810,
    "tempid": 6811,
    "map[from.y()][from.x()]).getId();": 6812,
    "map[from.y()][from.x()]": 6813,
    "map[to.y()][to.x()]": 6814,
    "Player(tempid);": 6815,
    "map[from.y()][from.x()]).getPlayerId();": 6816,
    "Box(tempid);": 6817,
    "map.length;": 6818,
    "map[i].length;": 6819,
    "if(map[i][j]": 6820,
    "record.add(getnewmap());": 6821,
    "record.get(0).length;": 6822,
    "record.get(0)[i].length;": 6823,
    "if(record.get(0)[i][j]": 6824,
    "checkpointnumber": 6825,
    "record.size();": 6826,
    "if(checkpointnumber": 6827,
    "if(undoquota": 6828,
    "record.remove(checkpointnumber-1);": 6829,
    "getnewmap(record.get(checkpointnumber-2));": 6830,
    "undoquota--;": 6831,
    "countloop": 6832,
    "youwin": 6833,
    "gameexit": 6834,
    "if(!gameexit){": 6835,
    "if(!youwin)": 6836,
    "if(super.state.getUndoQuota().isPresent())": 6837,
    "renderingEngine.message(String.format(StringResources.UNDO_QUOTA_TEMPLATE,String.valueOf(state.getUndoQuota().get())));": 6838,
    "System.out.printf(StringResources.UNDO_QUOTA_TEMPLATE,StringResources.UNDO_QUOTA_UNLIMITED);": 6839,
    "if(super.state.getUndoQuota().isPresent()": 6840,
    "super.state.getUndoQuota().get()": 6841,
    "//System.out.print(countloop": 6842,
    "\"n\");": 6843,
    "System.out.print(countloop": 6844,
    "\"invalidinputn\");": 6845,
    "\"exitn\");": 6846,
    "\"move": 6847,
    "undon\");": 6848,
    "ActionResult.Success){": 6849,
    "if(super.shouldStop()){": 6850,
    "//countloop++;": 6851,
    "!state.isplayerexist(action.getInitiator()))": 6852,
    "state.getPlayerPositionById(action.getInitiator()).x();": 6853,
    "state.getPlayerPositionById(action.getInitiator()).y();": 6854,
    "(Player)state.getEntity(Position.of(x,": 6855,
    "(state.getEntity(Position.of(x": 6856,
    "if(state.getEntity(Position.of(x": 6857,
    "state.getEntity(Position.of(x": 6858,
    "y))).getPlayerId()": 6859,
    "player.getId())": 6860,
    "state.move(Position.of(x": 6861,
    "Position.of(x": 6862,
    "y-1))).getPlayerId()": 6863,
    "y-": 6864,
    "y+1))).getPlayerId()": 6865,
    "if(!(state.getUndoQuota().isPresent())){": 6866,
    "c++)": 6867,
    "entities[i][c]": 6868,
    "map.getEntity(Position.of(c,i));": 6869,
    "this.snapshots": 6870,
    "this.snapshots.add(new": 6871,
    "GameSnapshot(map.getMaxHeight(),": 6872,
    "map.getMaxWidth(),": 6873,
    "entities));": 6874,
    "snapshots.get(snapshots.size()": 6875,
    "1).entities[position.y()][position.x()];": 6876,
    "1).entities[to.y()][to.x()]": 6877,
    "1).entities[from.y()][from.x()]": 6878,
    "snapshots.add(new": 6879,
    "GameSnapshot(getMapMaxHeight(),": 6880,
    "getMapMaxWidth(),": 6881,
    "1).entities));": 6882,
    "(undoLimit.isPresent())": 6883,
    "(snapshots.size()": 6884,
    "snapshots.remove(snapshots.size()": 6885,
    "renderingEngine.message(undoLimit": 6886,
    "(state.getPlayerPositionById(playerID)": 6887,
    "move.nextPosition(currPos);": 6888,
    "Depends": 6889,
    "different": 6890,
    "taken": 6891,
    "move.nextPosition(nextPos));": 6892,
    "(state.getUndoLimit().orElse(-1)": 6893,
    "exitGame": 6894,
    "Error": 6895,
    "above": 6896,
    "lower-caseb": 6897,
    "ox": 6898,
    "(position.y()": 6899,
    "IllegalArgumentException(\"Position": 6900,
    "GameMap.\");": 6901,
    "entities[position.y()][position.x()]": 6902,
    "this.undoLimit=this.map.undoLimit;": 6903,
    "this.recordEntityMatrix=new": 6904,
    "//deep": 6905,
    "records": 6906,
    "this.recordBoxes": 6907,
    "Box>();": 6908,
    "this.recordPlayers": 6909,
    "Player>();": 6910,
    "this.empties": 6911,
    "this.map.walls)": 6912,
    "this.walls.add(pos);": 6913,
    "this.map.empties)": 6914,
    "this.empties.add(pos);": 6915,
    "this.map.destinations)": 6916,
    "this.destinations.add(pos);": 6917,
    "database": 6918,
    "row=this.map.entityMatrixStorage.length;": 6919,
    "col=this.map.entityMatrixStorage[0].length;": 6920,
    "this.stateEntityMatrix=new": 6921,
    "Entity[row][col];": 6922,
    "this.initialState=new": 6923,
    "i=0;i<row;i++){": 6924,
    "stateEntityMatrix[i]=new": 6925,
    "Entity[col];": 6926,
    "initialState[i]=new": 6927,
    "j=0;j<col;j++){": 6928,
    "//System.out.println(\"i:": 6929,
    "\"+i+\"": 6930,
    "j:": 6931,
    "\"+j+\"": 6932,
    "->\"+map.entityMatrixStorage[i][j]);": 6933,
    "\u5899\u5916\u6ca1entity\u7684block\uff0c\u662fnull": 6934,
    "if(this.map.entityMatrixStorage[i][j]==null)": 6935,
    "switch(this.map.entityMatrixStorage[i][j].getClass().getSimpleName()){": 6936,
    "\"Box\":": 6937,
    "getPlayerId()": 6938,
    "needs": 6939,
    "downcast": 6940,
    "newbox=new": 6941,
    "Box(((Box)this.map.entityMatrixStorage[i][j]).getPlayerId());": 6942,
    "stateEntityMatrix[i][j]=newbox;": 6943,
    "initialState[i][j]=newbox;": 6944,
    "recordBoxes.put(Position.of(j,i),newbox);": 6945,
    "\"Player\":": 6946,
    "newplayer=new": 6947,
    "Player(((Player)this.map.entityMatrixStorage[i][j]).getId());": 6948,
    "stateEntityMatrix[i][j]=newplayer;": 6949,
    "initialState[i][j]=newplayer;": 6950,
    "recordPlayers.put(Position.of(j,i),newplayer);": 6951,
    "\"Wall\":": 6952,
    "stateEntityMatrix[i][j]=new": 6953,
    "initialState[i][j]=new": 6954,
    "\"Empty\":": 6955,
    "((Empty)stateEntityMatrix[i][j]).setDestination(((Empty)this.map.entityMatrixStorage[i][j]).checkDestination());": 6956,
    "((Empty)initialState[i][j]).setDestination(((Empty)this.map.entityMatrixStorage[i][j]).checkDestination());": 6957,
    "this.stateEntityMatrix[position.y()][position.x()];": 6958,
    "System.out.println(\"INPUT": 6959,
    ":\"+inputLine);": 6960,
    "//Key": 6961,
    "//Player": 6962,
    "Possible": 6963,
    "(A,": 6964,
    "S,": 6965,
    "W,": 6966,
    "D,": 6967,
    "H,": 6968,
    "J,": 6969,
    "K,": 6970,
    "L,": 6971,
    "U,": 6972,
    "EXIT)": 6973,
    "they": 6974,
    "insensitive": 6975,
    "(e.g.": 6976,
    "eXiT": 6977,
    "valid)": 6978,
    "including": 6979,
    "whitespaces": 6980,
    "\"n\"": 6981,
    "A\"": 6982,
    "both": 6983,
    "invalid)": 6984,
    "On": 6985,
    "TerminalInputEngine.fetchAction": 6986,
    "fetchedAction=null;": 6987,
    "fetchedAction=new": 6988,
    "Exit(-1);break;": 6989,
    "InvalidInput(-1,StringResources.INVALID_INPUT_MESSAGE);": 6990,
    "fetchedAction;": 6991,
    "Step1:": 6992,
    "determine": 6993,
    "[from](entityFrom)": 6994,
    "[to](entityTo)": 6995,
    "Step2:": 6996,
    "entityFrom:": 6997,
    "[from],": 6998,
    "add": 6999,
    "[to]": 7000,
    "entityTo:": 7001,
    "[to],": 7002,
    "[from]": 7003,
    "Step3:": 7004,
    "adjust": 7005,
    "stateEntityMatrix:": 7006,
    "//Step1:": 7007,
    "typeFrom=this.checkEntityType(from);": 7008,
    "typeTo=this.checkEntityType(to);": 7009,
    "tempHolderFrom=this.getEntity(from);": 7010,
    "tempHolderTo=this.getEntity(to);": 7011,
    "//debug": 7012,
    "//System.out.println(\"type": 7013,
    ":\"+typeFrom);": 7014,
    "(typeFrom){": 7015,
    "//\u63a8Player:": 7016,
    "\u53ea\u80fd\u5c06player\u63a8\u5230empty\u4e0a\uff0cfrom\u7684\u4f4d\u7f6e\u6307\u5411empty": 7017,
    "recordPlayers({Position": 7018,
    "Player})": 7019,
    "this.recordPlayers.put(to,(Player)tempHolderFrom);": 7020,
    "this.recordPlayers.remove(from);": 7021,
    "empties": 7022,
    "(Set<Position>)": 7023,
    "this.empties.remove(to);": 7024,
    "this.empties.add(from);": 7025,
    "2d": 7026,
    "map:": 7027,
    "swap": 7028,
    "references": 7029,
    "this.stateEntityMatrix[to.y()][to.x()]=(Player)tempHolderFrom;": 7030,
    "this.stateEntityMatrix[from.y()][from.x()]=(Empty)tempHolderTo;": 7031,
    "case:": 7032,
    "...B@.": 7033,
    "....B.": 7034,
    "\u6b63\u89e3\uff1aB\u539f\u5148\u7684\u4f4d\u5b50\u4e0d\u4f1a\u51fa\u73b0@": 7035,
    "....@B": 7036,
    "((Empty)this.stateEntityMatrix[from.y()][from.x()]).setDestination(false);": 7037,
    "//\u5047\u5982from\u672c\u6765\u662fdestination\uff0c@\u7b26\u53f7\u88ab\u538b\u4f4f\uff0c\u5c31\u8981\u8ba9\u5b83\u91cd\u89c1\u5929\u65e5": 7038,
    "pos:this.destinations){": 7039,
    "if(pos.x()==from.x()": 7040,
    "pos.y()==from.y()){": 7041,
    "((Empty)this.stateEntityMatrix[from.y()][from.x()]).setDestination(true);": 7042,
    "//Box:": 7043,
    "\u53ea\u80fd\u5c06box\u63a8\u5230empty\u4e0a\uff0cfrom\u7684\u4f4d\u7f6e\u6307\u5411empty": 7044,
    "recordBox({Position": 7045,
    "Box})": 7046,
    "this.recordBoxes.put(to,(Box)tempHolderFrom);": 7047,
    "this.recordBoxes.remove(from);": 7048,
    "this.stateEntityMatrix[to.y()][to.x()]=(Box)tempHolderFrom;": 7049,
    "//\u4f46\u5047\u5982": 7050,
    "\u662fdestination\uff0c\u5c31\u4e0d\u5e94\u8be5\u628a\"@\"\u6807\u5fd7\u8ddf\u7740\u88abswap\u8d70\uff0c\u800c\u662f\u8981\u8ba9\u4ed6\u88ab\u76d6\u4f4f": 7051,
    "hard-copy": 7052,
    "matrix,": 7053,
    "recordEntityMatrix": 7054,
    "[": 7055,
    "mat1,": 7056,
    "mat2,": 7057,
    "...]": 7058,
    "row=this.stateEntityMatrix.length;": 7059,
    "col=this.stateEntityMatrix[0].length;": 7060,
    "newRecord=new": 7061,
    "newRecord[i]=new": 7062,
    "if(this.stateEntityMatrix[i][j]==null)": 7063,
    "switch(this.stateEntityMatrix[i][j].getClass().getSimpleName()){": 7064,
    "Box(((Box)this.stateEntityMatrix[i][j]).getPlayerId());": 7065,
    "newRecord[i][j]=newbox;": 7066,
    "Player(((Player)this.stateEntityMatrix[i][j]).getId());": 7067,
    "newRecord[i][j]=newplayer;": 7068,
    "newRecord[i][j]=new": 7069,
    "((Empty)newRecord[i][j]).setDestination(((Empty)this.stateEntityMatrix[i][j]).checkDestination());": 7070,
    "this.recordEntityMatrix.add(newRecord);": 7071,
    "//retrieve": 7072,
    "LAST": 7073,
    "//copy": 7074,
    "related": 7075,
    "variables": 7076,
    "this.empties.clear();": 7077,
    "this.walls.clear();": 7078,
    "this.recordPlayers.clear();": 7079,
    "this.recordBoxes.clear();": 7080,
    "lastRecord=null;": 7081,
    "if(this.recordEntityMatrix.size()>1){": 7082,
    "lastRecord=this.recordEntityMatrix.get(recordEntityMatrix.size()-2);": 7083,
    "if(!this.getUndoQuota().isEmpty())": 7084,
    "lastRecord": 7085,
    "this.initialState;": 7086,
    "deducted": 7087,
    "reverted.": 7088,
    "So": 7089,
    "deducted.": 7090,
    "if(this.recordEntityMatrix.size()==1": 7091,
    "!this.getUndoQuota().isEmpty())": 7092,
    "row=lastRecord.length;": 7093,
    "col=lastRecord[0].length;": 7094,
    "if(lastRecord[i][j]==null)": 7095,
    "switch(lastRecord[i][j].getClass().getSimpleName()){": 7096,
    "Box(((Box)lastRecord[i][j]).getPlayerId());": 7097,
    "Player(((Player)lastRecord[i][j]).getId());": 7098,
    "this.walls.add(Position.of(j,i));": 7099,
    "this.empties.add(Position.of(j,i));": 7100,
    "((Empty)stateEntityMatrix[i][j]).setDestination(((Empty)lastRecord[i][j]).checkDestination());": 7101,
    "if(!this.recordEntityMatrix.isEmpty()){": 7102,
    "this.recordEntityMatrix.remove(recordEntityMatrix.size()-1);": 7103,
    "currentPlayerID=0;": 7104,
    "rotate": 7105,
    "around": 7106,
    "//first": 7107,
    "call:": 7108,
    "welcome": 7109,
    "//game": 7110,
    "body": 7111,
    "//read": 7112,
    "//process": 7113,
    "fetchedAction=this.inputEngine.fetchAction();": 7114,
    "processedAction=this.processAction(fetchedAction);": 7115,
    "fail:print": 7116,
    "while(processedAction": 7117,
    "failed){": 7118,
    "this.renderingEngine.message(((Failed)processedAction).getReason());": 7119,
    "//print": 7120,
    "if(this.state.getUndoQuota().isEmpty()){": 7121,
    "this.renderingEngine.message(String.format(StringResources.UNDO_QUOTA_TEMPLATE,-1));": 7122,
    "(this.state.getUndoQuota().get().intValue()==-1){": 7123,
    "this.renderingEngine.message(String.format(StringResources.UNDO_QUOTA_TEMPLATE,StringResources.UNDO_QUOTA_UNLIMITED));": 7124,
    "this.renderingEngine.message(String.format(StringResources.UNDO_QUOTA_TEMPLATE,state.getUndoQuota().get().intValue()));": 7125,
    "processedAction=this.processAction(this.inputEngine.fetchAction());": 7126,
    "//exit:": 7127,
    "(this.hasExit||this.state.isWin()){": 7128,
    "this.renderingEngine.message(String.format(StringResources.UNDO_QUOTA_TEMPLATE,this.state.getUndoQuota().get().intValue()));": 7129,
    "this.outputSteam.print(content+System.lineSeparator());": 7130,
    "if(state.getEntity(Position.of(x,": 7131,
    "y))!=null": 7132,
    "emp": 7133,
    "(emp.checkDestination()))": 7134,
    "builder.append('@');": 7135,
    "processedAction=null;": 7136,
    "exit){": 7137,
    "processedAction=new": 7138,
    "this.hasExit=true;": 7139,
    "processedAction;": 7140,
    "II){": 7141,
    "ActionResult.Failed(II,StringResources.INVALID_INPUT_MESSAGE);": 7142,
    "undo){": 7143,
    "if(this.state.getStateRecord().isEmpty()||this.state.getUndoQuota().isEmpty()": 7144,
    "this.state.getUndoQuota().get().intValue()>0": 7145,
    "exists?": 7146,
    "if(!this.state.getAllPlayerID().contains(Integer.valueOf(action.getInitiator()))){": 7147,
    "\u4ece": 7148,
    "\u7684\u89c6\u89d2\u56db\u5468\u770b\uff1a": 7149,
    "action=move,->": 7150,
    "\u65b9\u5411\u4e0a\u662fEmpty": 7151,
    "Success": 7152,
    "\u65b9\u5411\u4e0a\u662fWall": 7153,
    "\u65b9\u5411\u4e0a\u662fPlayer->": 7154,
    "\u65b9\u5411\u4e0a\u662fBox": 7155,
    "------------->\u81ea\u5df1\u7684box--->\u4ee5Box\u4e3a\u4e2d\u5fc3\uff0c\u518d\u8fdb\u4e00\u4e2a\u65b9\u5411\uff0c\u65b9\u5411\u4e0a\u662f": 7156,
    "SUCCESS": 7157,
    "\u5176\u4ed6": 7158,
    "->\u522b\u4eba\u7684box--->Failed": 7159,
    "newPosition=null;": 7160,
    "//System.out.println(\"action.getClass().getSimpleName():\"": 7161,
    "action.getClass().getSimpleName());": 7162,
    "(action.getClass().getSimpleName())": 7163,
    "\"Down\":": 7164,
    "action).nextPosition(currentPosition);break;": 7165,
    "\"Up\":": 7166,
    "\"Right\":": 7167,
    "\"Left\":": 7168,
    "(this.state.getAllEmptiesPositions().contains(newPosition))": 7169,
    "processedAction": 7170,
    "this.state.move(currentPosition,newPosition);": 7171,
    "(this.state.getAllWallsPositions().contains(newPosition))": 7172,
    "(this.state.getAllPlayerPositions().contains(newPosition))": 7173,
    "StringResources.HIT_PLAYER);//": 7174,
    "NEED": 7175,
    "CHECk": 7176,
    "(this.state.getAllBoxesPositions().contains(newPosition))": 7177,
    "BOX": 7178,
    "boxOldPosition=newPosition;": 7179,
    "boxNewPosition=null;": 7180,
    "//\u4e0d\u662f\u81ea\u5df1\u7684box": 7181,
    "if(this.state.getRecordBox().get(boxOldPosition).getPlayerId()!=(action.getInitiator())){": 7182,
    "StringResources.PUSH_YOUR_OWN_BOX);": 7183,
    "boxNewPosition": 7184,
    "Move.Down(-1).nextPosition(boxOldPosition);break;": 7185,
    "Move.Up(-1).nextPosition(boxOldPosition);break;": 7186,
    "Move.Right(-1).nextPosition(boxOldPosition);break;": 7187,
    "Move.Left(-1).nextPosition(boxOldPosition);break;": 7188,
    "if(state.getAllEmptiesPositions().contains(boxNewPosition)){": 7189,
    "//\u5148\u52a8\u7bb1\u5b50\u518d\u52a8player": 7190,
    "this.state.move(boxOldPosition,boxNewPosition);": 7191,
    "ActionResult.Failed(action,StringResources.PUSH_BOX_FAIL);": 7192,
    "setPlayerID=new": 7193,
    "recordPlayers.keySet()){": 7194,
    "setPlayerID.add(recordPlayers.get(pos).getId());": 7195,
    "setPlayerID;": 7196,
    "this.maxHeight=maxHeight;": 7197,
    "this.maxWidth=maxWidth;": 7198,
    "this.entityMatrixStorage=new": 7199,
    "row++)": 7200,
    "entityMatrixStorage[row]": 7201,
    "Entity[maxWidth];": 7202,
    "[recordPlayers]": 7203,
    "key:": 7204,
    "[recordBoxes]": 7205,
    ">();": 7206,
    "[HashMap]": 7207,
    "Locations": 7208,
    "(record": 7209,
    "players)": 7210,
    "key:Entity": 7211,
    "value:Set<Positions>": 7212,
    "eg.": 7213,
    "(0,1),": 7214,
    "(1,1),": 7215,
    "...}": 7216,
    "(x,y),": 7217,
    "...": 7218,
    "if(this.entityMatrixStorage[position.y()][position.x()]!=null){": 7219,
    "tobeRemoved=this.entityMatrixStorage[position.y()][position.x()];": 7220,
    "if(tobeRemoved": 7221,
    "this.recordPlayers.remove(position,p);": 7222,
    "this.recordBoxes.remove(position,b);": 7223,
    "w){": 7224,
    "this.walls.remove(position);": 7225,
    "e){": 7226,
    "this.empties.remove(position);": 7227,
    "if(e.checkDestination()){": 7228,
    "this.destinations.remove(position);": 7229,
    "this.entityMatrixStorage[position.y()][position.x()]=entity;": 7230,
    "this.recordPlayers.put(position,p);": 7231,
    "this.recordBoxes.put(position,b);": 7232,
    "this.walls.add(position);": 7233,
    "this.empties.add(position);": 7234,
    "this.destinations.add(position);": 7235,
    "entityPositions": 7236,
    "HashMap<>(map.positionEntityMap);": 7237,
    "entityPositions.get(position);": 7238,
    "entityPositions.replace(from,": 7239,
    "entityPositions.replace(to,": 7240,
    "history.add(new": 7241,
    "Checkpoint(undoQuota,": 7242,
    "HashMap<>(entityPositions)));": 7243,
    "(history.size()": 7244,
    "history.remove(history.size()-1);": 7245,
    "HashMap<>(history.get(history.size()-1).positionEntityMap);": 7246,
    "Sokoban": 7247,
    "ready": 7248,
    "skip": 7249,
    "creating": 7250,
    "renderingEngine.message(String.format(undoLimit));": 7251,
    "fetch": 7252,
    "(Exit": 7253,
    "e):": 7254,
    "(InvalidInput": 7255,
    "i):": 7256,
    "(Move": 7257,
    "m):": 7258,
    "m.nextPosition(state.getPlayerPositionById(m.getInitiator()));": 7259,
    "(nextEntity.getClass()": 7260,
    "Wall.class)": 7261,
    "(state.getEntity(nextNextPos).getClass()": 7262,
    "ensure": 7263,
    "a,": 7264,
    "(Undo": 7265,
    "u):": 7266,
    "positionEntityMap.values())": 7267,
    "(e.getClass()": 7268,
    "beforehand": 7269,
    "positionEntityMap.put(position,": 7270,
    "this.playersLoc": 7271,
    "this.boxesLoc": 7272,
    "ArrayList<Position>>();": 7273,
    "ArrayList<Position>>": 7274,
    "map.getMap().size();": 7275,
    "ArrayList<Entity>": 7276,
    "map.getMap().get(i).size();": 7277,
    "map.getMap().get(i).get(j);": 7278,
    "row.add((Player)": 7279,
    "item);": 7280,
    "players.put(((Player)": 7281,
    "item).getId(),": 7282,
    "this.playersLoc.put(((Player)": 7283,
    "row.add((Box)": 7284,
    "(boxes.containsKey(box.getPlayerId()))": 7285,
    "boxes.get(box.getPlayerId()).add(new": 7286,
    "boxesLoc": 7287,
    "boxesLoc.add(new": 7288,
    "boxes.put(box.getPlayerId(),": 7289,
    "boxesLoc);": 7290,
    "(this.boxesLoc.containsKey(box.getPlayerId()))": 7291,
    "this.boxesLoc.get(box.getPlayerId()).add(new": 7292,
    "this.boxesLoc.put(box.getPlayerId(),": 7293,
    "row.add((Wall)": 7294,
    "row.add((Empty)": 7295,
    "newMap.add(row);": 7296,
    "this.checkpointMap.add(map.getMap());": 7297,
    "this.checkpointPlayers": 7298,
    "ArrayList<HashMap<Integer,": 7299,
    "Position>>();": 7300,
    "this.checkpointPlayers.add(players);": 7301,
    "this.checkpointBoxes": 7302,
    "ArrayList<Position>>>();": 7303,
    "this.checkpointBoxes.add(boxes);": 7304,
    "this.map.get(position.y()).get(position.x());": 7305,
    "switch(this.getEntity(from)){": 7306,
    "playersLoc.put(o.getId(),": 7307,
    "this.map.get(to.y()).set(to.x(),": 7308,
    "o);": 7309,
    "this.map.get(from.y()).set(from.x(),": 7310,
    "boxesLoc.get(o.getPlayerId()).indexOf(from);": 7311,
    "boxesLoc.get(o.getPlayerId()).set(index,": 7312,
    "this.map){": 7313,
    "newRow": 7314,
    "row){": 7315,
    "switch(e){": 7316,
    "newRow.add(new": 7317,
    "Player(o.getId()));": 7318,
    "Box(o.getPlayerId()));": 7319,
    "newRow.add(null);": 7320,
    "newMap.add(newRow);": 7321,
    "this.checkpointMap.add(newMap);": 7322,
    "this.checkpointPlayers.add(this.playersLoc);": 7323,
    "this.checkpointBoxes.add(this.boxesLoc);": 7324,
    "(checkpointMap.size()": 7325,
    "checkpointMap.size();": 7326,
    "this.checkpointMap.get(index)){": 7327,
    "key": 7328,
    "this.checkpointPlayers.get(index).keySet()){": 7329,
    "temp.put(key,": 7330,
    "this.checkpointPlayers.get(index).get(key));": 7331,
    "temp2": 7332,
    "this.checkpointBoxes.get(index).keySet()){": 7333,
    "temp3": 7334,
    "this.checkpointBoxes.get(index).get(key).size();": 7335,
    "temp3.add(this.checkpointBoxes.get(index).get(key).get(j));": 7336,
    "temp2.put(key,": 7337,
    "temp3);": 7338,
    "temp2;": 7339,
    "ArrayList<ArrayList<ArrayList<Entity>>>(this.checkpointMap.subList(0,": 7340,
    "end));": 7341,
    "Position>>(this.checkpointPlayers.subList(0,": 7342,
    "ArrayList<Position>>>(this.checkpointBoxes.subList(0,": 7343,
    "(this.undoQuota.isPresent()){": 7344,
    "newQuota": 7345,
    "this.undoQuota.get()": 7346,
    "Optional.of(newQuota);": 7347,
    "(numPlayers": 7348,
    "(quota.isEmpty()){": 7349,
    "Integer.toString(quota.get())));": 7350,
    "inputAction": 7351,
    "this.processAction(inputAction);": 7352,
    "state.getMap().get(y).size()": 7353,
    "(state.getDestinations().contains(new": 7354,
    "player.getId());": 7355,
    "StringResources.EXIT_COMMAND_TEXT);": 7356,
    "o.getMessage());": 7357,
    "(this.state.getUndoQuota().isEmpty()){": 7358,
    "(!this.state.getOriginalMap().getPlayerIds().contains(player)){": 7359,
    "Position(currentPos.x(),": 7360,
    "currentPos.y()": 7361,
    "Position(currentPos.x()": 7362,
    "currentPos.y());": 7363,
    "this.state.getEntity(newPos);": 7364,
    "this.state.move(currentPos,": 7365,
    "(player": 7366,
    "target).getPlayerId()){": 7367,
    "(this.state.getEntity(newBoxPos)": 7368,
    "this.state.move(newPos,": 7369,
    "map.get(y).set(x,": 7370,
    "playerLocation": 7371,
    "map.players.clone();": 7372,
    "26;": 7373,
    "map.boxes[i].size();j++)": 7374,
    "boxLocation[i].add(map.boxes[i].get(j));": 7375,
    "if(map.nullplace.contains(position))": 7376,
    "getMapMaxWidth())": 7377,
    "if(position.y()": 7378,
    "getMapMaxHeight())": 7379,
    "if(map.walls.contains(position))": 7380,
    "if(boxLocation[i].contains(position))": 7381,
    "if(playerLocation[i]": 7382,
    "playerLocation[i].equals(position))": 7383,
    "//System.out.println(inputLine);": 7384,
    "\"A\"->": 7385,
    "\"S\"->": 7386,
    "\"W\"->": 7387,
    "\"D\"->": 7388,
    "\"H\"->": 7389,
    "\"J\"->": 7390,
    "\"K\"->": 7391,
    "\"L\"->": 7392,
    "\"U\"->": 7393,
    "->new": 7394,
    "//System.out.println(action.getClass());": 7395,
    "boxLocation[((Box)": 7396,
    "entity).getPlayerId()].remove(from);": 7397,
    "entity).getPlayerId()].add(to);": 7398,
    "playerLocation[((Player)": 7399,
    "to;": 7400,
    "checkPoints.push(new": 7401,
    "CheckPoint(playerLocation,boxLocation));": 7402,
    "//System.out.println(playerLocation[0]);": 7403,
    "//System.out.println(checkPoints.get(0).playerLocation[0]);": 7404,
    "//System.out.println(\"stacksize:\"+checkPoints.size());": 7405,
    "if(checkPoints.isEmpty()){": 7406,
    "if(map.players[i]": 7407,
    "playerLocation[i]": 7408,
    "Position(map.players[i].x(),map.players[i].y());": 7409,
    "boxLocation[i].clear();": 7410,
    "map.boxes[i].size();": 7411,
    "boxLocation[i]": 7412,
    "(ArrayList<Position>)": 7413,
    "((ArrayList)": 7414,
    "(map.boxes[i])).clone();": 7415,
    "CheckPoint": 7416,
    "if(cp.playerLocation[i]": 7417,
    "Position(cp.playerLocation[i].x(),cp.playerLocation[i].y());": 7418,
    "cp.boxLocation[i].size();": 7419,
    "(cp.boxLocation[i])).clone();": 7420,
    "numOfPlayer": 7421,
    "if(numOfPlayer": 7422,
    "state.map.getPlayerIds();": 7423,
    "playerIds){": 7424,
    "if(i": 7425,
    "while(true)": 7426,
    "renderingEngine.message(UNDO_QUOTA_TEMPLATE.formatted(state.getUndoQuota().get().toString()));": 7427,
    "renderingEngine.message((((ActionResult.Failed)result).getReason()));": 7428,
    "state.lastAction": 7429,
    "if(action.getInitiator()": 7430,
    "state.getPlayerPositionById(action.getInitiator())": 7431,
    "ActionResult.Failed(action,PLAYER_NOT_FOUND);": 7432,
    "currentposition": 7433,
    "Position(currentposition.x(),": 7434,
    "currentposition.y()-1);": 7435,
    "entityOnNext": 7436,
    "if(entityOnNext": 7437,
    "state.move(currentposition,nextPosition);": 7438,
    "entityOnNext).getPlayerId()": 7439,
    "action.getInitiator()": 7440,
    "ActionResult.Failed(action,\"cannot": 7441,
    "nextBoxposition": 7442,
    "currentposition.y()-2);": 7443,
    "if(state.getEntity(nextBoxposition)": 7444,
    "//System.out.println(currentposition);": 7445,
    "//System.out.println(nextPosition);": 7446,
    "//System.out.println(nextBoxposition);": 7447,
    "nextBoxposition);": 7448,
    "currentposition.y()+1);": 7449,
    "currentposition.y()+2);": 7450,
    "Position(currentposition.x()-1,": 7451,
    "currentposition.y());": 7452,
    "Position(currentposition.x()-2,": 7453,
    "Position(currentposition.x()+1,": 7454,
    "Position(currentposition.x()+2,": 7455,
    "System.out.println(nextPosition);": 7456,
    "//System.out.println(\"undo!\");": 7457,
    "if(players[i]": 7458,
    "playerId.add(i);": 7459,
    "ArrayList<Position>[]": 7460,
    "boxes,": 7461,
    "players,": 7462,
    "nullplace)": 7463,
    "walls;": 7464,
    "this.nullplace": 7465,
    "nullplace;": 7466,
    "this.boxes[i]": 7467,
    "boxes[i];": 7468,
    "this.players[i]": 7469,
    "players[i];": 7470,
    "//String": 7471,
    "String.valueOf(entity.getClass());": 7472,
    "if(entity.getClass().equals(Box.class))": 7473,
    "boxes[((Box)": 7474,
    "entity).getPlayerId()].add(position);": 7475,
    "if(entity.getClass().equals(Player.class))": 7476,
    "players[((Player)": 7477,
    "if(entity.getClass().equals(Wall.class))": 7478,
    "//set": 7479,
    "form": 7480,
    "switch(inputLine.toUpperCase(Locale.ROOT)){": 7481,
    "\"I\":": 7482,
    "\".\");": 7483,
    "map.getEntity(from);": 7484,
    "checkPoints.add(this.map.clone());": 7485,
    "if(getUndoQuota().isEmpty())": 7486,
    "System.err.println(\"getUndoQuota().isEmpty()\");": 7487,
    "if(quota": 7488,
    "//Do": 7489,
    "System.out.println(\"do": 7490,
    "enough": 7491,
    "checkPoints.get(checkPoints.size()": 7492,
    "checkPoints.remove(checkPoints.size()": 7493,
    "map.undoLimit": 7494,
    "quota-1;": 7495,
    "System.out.println(\"You": 7496,
    "quota:": 7497,
    "\"+(state.getUndoQuota().isEmpty()?0:state.getUndoQuota().get()));": 7498,
    "//System.exit(0);": 7499,
    "System.setOut(outputSteam);": 7500,
    "//Render": 7501,
    "state.getEntity(position);": 7502,
    "(char)('a'+box.getPlayerId());": 7503,
    "(char)('A'+player.getId());": 7504,
    "if(state.getDestinations().contains(position)){": 7505,
    "\"action": 7506,
    "null\");": 7507,
    "//Current": 7508,
    "playerEntity": 7509,
    "//Next": 7510,
    "move.nextPosition(currentPosition);": 7511,
    "//Move": 7512,
    "//Try": 7513,
    "if(nextPositionEntity": 7514,
    "currentBox": 7515,
    "//Check": 7516,
    "move.nextPosition(newPosition);": 7517,
    "if(state.getEntity(newBoxPosition)": 7518,
    "//state.map.putEntity(newBoxPosition,": 7519,
    "currentBox);": 7520,
    "//state.map.putEntity(newPosition,": 7521,
    "if(state.getEntity(newPosition)": 7522,
    "playerEntity);": 7523,
    "//state.map.putEntity(currentPosition,": 7524,
    "\"hitted": 7525,
    "(InvalidInput)": 7526,
    "System.out.println(\"Invalid": 7527,
    "input!": 7528,
    "Reason:": 7529,
    "\"+invalidInput.getMessage());": 7530,
    "exitCalled": 7531,
    "System.out.println(\"exit": 7532,
    "getMaxWidth()": 7533,
    "getMaxHeight()": 7534,
    "this.getEntity(Position.of(i,": 7535,
    "j));": 7536,
    "if(result.contains(player.getId())){": 7537,
    "//repeated": 7538,
    "player!": 7539,
    "fail!": 7540,
    "//Generating": 7541,
    "mapData": 7542,
    "ArrayList": 7543,
    "arrayList": 7544,
    "ArrayList();": 7545,
    "arrayList.add(null);": 7546,
    "mapData.add(arrayList);": 7547,
    "mapData.get(position.x()).set(position.y(),": 7548,
    "currMap": 7549,
    "Stack<GameMap>();": 7550,
    "(gameMap.getUndoLimit().isPresent())": 7551,
    "gameMap.getUndoLimit().get();": 7552,
    "(inputLine.equals(EXIT_COMMAND_TEXT))": 7553,
    "gameMap.move(from,": 7554,
    "GameMap(currMap));": 7555,
    "GameMap(checkpoints.peek());": 7556,
    "state.getUndoQuota().isPresent()": 7557,
    "UNDO_QUOTA_UNLIMITED));": 7558,
    "(r)": 7559,
    "f": 7560,
    "userExit": 7561,
    "state.processMove(m);": 7562,
    "state.processUndo(u);": 7563,
    "(map[i][j]": 7564,
    "map[i][j]": 7565,
    "ids.add(map[i][j]": 7566,
    "(destinations": 7567,
    "char[maxHeight][maxWidth];": 7568,
    "historyBoxes": 7569,
    "historyPlayers": 7570,
    "boxes.put(Position.of(x,": 7571,
    "players.put(Position.of(x,": 7572,
    "historyBoxes.add(new": 7573,
    "HashMap<>(boxes));": 7574,
    "historyPlayers.add(new": 7575,
    "HashMap<>(players));": 7576,
    "(boxes.containsKey(position))": 7577,
    "boxes.get(position);": 7578,
    "(players.containsKey(position))": 7579,
    "players.get(position);": 7580,
    "(inputLine.toLowerCase().equals(\"w\"))": 7581,
    "(inputLine.toLowerCase().equals(\"a\"))": 7582,
    "(inputLine.toLowerCase().equals(\"s\"))": 7583,
    "(inputLine.toLowerCase().equals(\"d\"))": 7584,
    "(inputLine.toLowerCase().equals(\"h\"))": 7585,
    "(inputLine.toLowerCase().equals(\"j\"))": 7586,
    "(inputLine.toLowerCase().equals(\"k\"))": 7587,
    "(inputLine.toLowerCase().equals(\"l\"))": 7588,
    "(boxes.containsKey(from))": 7589,
    "boxes.put(to,": 7590,
    "boxes.get(from));": 7591,
    "boxes.remove(from);": 7592,
    "(players.containsKey(from))": 7593,
    "players.put(to,": 7594,
    "players.get(from));": 7595,
    "players.remove(from);": 7596,
    "(historyBoxes.size()": 7597,
    "historyPlayers.size()": 7598,
    "(!boxes.equals(historyBoxes.get(0)))": 7599,
    "HashMap<>(historyBoxes.get(0));": 7600,
    "HashMap<>(historyPlayers.get(0));": 7601,
    "(!boxes.equals(historyBoxes.get(historyBoxes.size()": 7602,
    "2)))": 7603,
    "HashMap<>(historyBoxes.get(historyBoxes.size()": 7604,
    "HashMap<>(historyPlayers.get(historyPlayers.size()": 7605,
    "historyBoxes.remove(historyBoxes.size()": 7606,
    "historyPlayers.remove(historyPlayers.size()": 7607,
    "(from": 7608,
    "move.nextPosition(from);": 7609,
    "occupant": 7610,
    "state.getEntity(to);": 7611,
    "(occupant": 7612,
    "occupant).getPlayerId())": 7613,
    "move.nextPosition(to);": 7614,
    "(state.getEntity(boxTo)": 7615,
    "map.keySet())": 7616,
    "(map.get(key)": 7617,
    "map.get(key)).getId());": 7618,
    "(map.containsValue(entity))": 7619,
    "map.getShallowCopyOfEntities();": 7620,
    "this.initialState": 7621,
    "GameCheckpoint(this.entities);": 7622,
    "terminal": 7623,
    "process.": 7624,
    "1st": 7625,
    "line.</li>": 7626,
    "<li>Input": 7627,
    "valid)</li>": 7628,
    "invalid)</li>": 7629,
    "action.": 7630,
    "Returns": 7631,
    "InvalidInput}": 7632,
    "insentitive": 7633,
    "moveTarget": 7634,
    "putEntity(to,": 7635,
    "moveTarget);": 7636,
    "putEntity(from,": 7637,
    "GameCheckpoint(entities));": 7638,
    "Decrease": 7639,
    "one.": 7640,
    "never": 7641,
    "moved.": 7642,
    "(undoLeft.isPresent()": 7643,
    "!checkpoints.isEmpty())": 7644,
    "Suppose": 7645,
    "`cp1`": 7646,
    "`cp2`": 7647,
    "recorded.": 7648,
    "`undo`": 7649,
    "`cp1`.": 7650,
    "(!checkpoints.isEmpty())": 7651,
    "checkpoints.isEmpty()": 7652,
    "putEntities(checkpoint.entities);": 7653,
    "Render": 7654,
    "renderingEngine.message(getUndoQuotaString());": 7655,
    "processMove(move);": 7656,
    "(state.canUndo())": 7657,
    "shouldStopRunning": 7658,
    "Updates": 7659,
    "GameState#entities}": 7660,
    "Map": 7661,
    "Destinations": 7662,
    "MaxWidth": 7663,
    "MaxHeight": 7664,
    "stext": 7665,
    "map.gettingMap().clone();": 7666,
    "checkpoint.put(0,": 7667,
    "stext.clone());": 7668,
    "Map.getEntity(position);": 7669,
    "inputLine.equals(\"a\"))": 7670,
    "inputLine.equals(\"s\"))": 7671,
    "inputLine.equals(\"w\"))": 7672,
    "inputLine.equals(\"d\"))": 7673,
    "inputLine.equals(\"h\"))": 7674,
    "inputLine.equals(\"j\"))": 7675,
    "inputLine.equals(\"k\"))": 7676,
    "inputLine.equals(\"l\"))": 7677,
    "debug": 7678,
    "alphabets": 7679,
    "(inputLine.equals(\"exit\")": 7680,
    "(inputLine.equals(\"Exit\")))": 7681,
    "InvalidInput(1,": 7682,
    "Map.putEntity(new": 7683,
    "to.y()),Map.getEntity(new": 7684,
    "checkpointcount++;": 7685,
    "(checkpointcount": 7686,
    "(getUndoQuota().isEmpty())": 7687,
    "checkpoint.get(checkpoint.size()-1);": 7688,
    "checkpoint.remove(checkpoint.size());": 7689,
    "checkpointcount--;": 7690,
    "checkpoint.get(checkpoint.size()": 7691,
    "Map.settingMap(stext);": 7692,
    "Optional.ofNullable(undoQuota);": 7693,
    "targetquota": 7694,
    "true){": 7695,
    "targetquota);": 7696,
    "keep": 7697,
    "while(shouldStop()": 7698,
    "Quota:\"": 7699,
    "(action.getClass().getSimpleName().equals(\"InvalidInput\")){": 7700,
    "(Move.class.isAssignableFrom(action.getClass())": 7701,
    "initnum": 7702,
    "targetpos": 7703,
    "((Move)action).nextPosition(state.getPlayerPositionById(initnum));": 7704,
    "state.getEntity(targetpos);": 7705,
    "if(Empty.class.isAssignableFrom(entity.getClass())": 7706,
    "state.move(state.getPlayerPositionById(initnum),": 7707,
    "targetpos);": 7708,
    "(Box.class.isAssignableFrom(entity.getClass())": 7709,
    "true": 7710,
    "((Box)entity).getPlayerId()": 7711,
    "initnum)": 7712,
    "boxpos": 7713,
    "((Move)action).nextPosition(targetpos);": 7714,
    "boxentity": 7715,
    "state.getEntity(boxpos);": 7716,
    "if(Empty.class.isAssignableFrom(boxentity.getClass())": 7717,
    "state.move(targetpos,": 7718,
    "boxpos);": 7719,
    "if(Wall.class.isAssignableFrom(entity.getClass())": 7720,
    "(Undo.class.isAssignableFrom(action.getClass())": 7721,
    "((undonumber.isPresent())": 7722,
    "((Exit.class.isAssignableFrom(action.getClass()))": 7723,
    "stopRunning": 7724,
    "ActionResult.Success(action)": 7725,
    "ActionResult.Failed(action,reason);": 7726,
    "this.MaxWidth": 7727,
    "this.Maxheight": 7728,
    "this.Destinations": 7729,
    "this.Undolimit": 7730,
    "vartype": 7731,
    "StringBuilder(stringtext[position.y()]);": 7732,
    "if(vartype.equals(\"Wall\")){": 7733,
    "str.setCharAt(position.x(),'#');": 7734,
    "if(vartype.equals(\"Player\")){": 7735,
    "str.setCharAt(position.x(),": 7736,
    "(char)(player.getId()": 7737,
    "if(vartype.equals(\"Box\")){": 7738,
    "(char)(box.getPlayerId()": 7739,
    "if(vartype.equals(\"Empty\")){": 7740,
    "str.setCharAt(position.x(),'.');": 7741,
    "stringtext[position.y()]": 7742,
    "str.toString();": 7743,
    "quotaLeft": 7744,
    "gameInfo": 7745,
    "Entity>(map.getGameInfo());": 7746,
    "HashMap<>(gameInfo));": 7747,
    "gameInfo.get(position);": 7748,
    "Undo(2);": 7749,
    "Exit(2);": 7750,
    "InvalidInput(2,": 7751,
    "this.gameInfo.replace(to,": 7752,
    "gameInfo.get(from));": 7753,
    "this.gameInfo.replace(from,": 7754,
    "checkpoints.get(0);": 7755,
    "HashMap<>(checkpoints.get(checkpoints.size()": 7756,
    "(!quotaLeft.isEmpty())": 7757,
    "Optional.of(quotaLeft.get()": 7758,
    "(!state.getUndoQuota().isEmpty())": 7759,
    "this.state.getUndoQuota().get()));": 7760,
    "UNDO_QUOTA_UNLIMITED);": 7761,
    "\"x:": 7762,
    "String.valueOf(x)": 7763,
    "y:": 7764,
    "String.valueOf(y);": 7765,
    "(!state.getPlayersIds().contains(m.getInitiator()))": 7766,
    "exists\");": 7767,
    "m.nextPosition(currPosition);": 7768,
    "(m.getInitiator()": 7769,
    "nextBoxEntity": 7770,
    "state.getEntity(m.nextPosition(nextPosition));": 7771,
    "(nextBoxEntity": 7772,
    "m.nextPosition(nextPosition));": 7773,
    "//checkpoint": 7774,
    "gameInfo.put(position,": 7775,
    "map.getMap().entrySet().forEach(entry": 7776,
    "System.out.println(entry.getKey()": 7777,
    "entry.getValue());": 7778,
    "checkPoints.add(new": 7779,
    "GameState(this.maxWidth,this.maxHeight,this.destinations,this.undoLimit,this.runningMap));": 7780,
    "runningMap.putAll(map.getMap());": 7781,
    "map.getPlayerList();": 7782,
    "runningMap.get(position);": 7783,
    "if(inputLine.toLowerCase().equals('a')": 7784,
    "inputLine.toLowerCase().equals('J')": 7785,
    "System.out.println(\"what": 7786,
    "important": 7787,
    "thing": 7788,
    "=\"": 7789,
    "System.out.println((new": 7790,
    "Exit(0)).equals(new": 7791,
    "Exit(0)));": 7792,
    "if(inputLine.toLowerCase().equals(\"exit\")){": 7793,
    "if(inputLine.length()==1": 7794,
    "inputLine.matches(\"[AaSsDdWwHhJjKkLlUu]\")": 7795,
    "command": 7796,
    "switch(command){": 7797,
    "InvalidInput(": 7798,
    "0,\"Invalid": 7799,
    "if(runningMap.get(from)": 7800,
    "GameState(this.maxWidth,": 7801,
    "this.maxHeight,": 7802,
    "this.destinations,": 7803,
    "this.undoLimit,": 7804,
    "this.runningMap));": 7805,
    "runningMap.put(to,runningMap.get(from));": 7806,
    "runningMap.remove(from);": 7807,
    "GameState(int": 7808,
    "maxWidth,int": 7809,
    "Map<Position,Entity>": 7810,
    "runningMap.putAll(map);": 7811,
    "TerminalSokobanGame": 7812,
    "terminalSokobanGame": 7813,
    "TerminalSokobanGame(this.state,": 7814,
    "(TerminalInputEngine)": 7815,
    "this.inputEngine,": 7816,
    "(TerminalRenderingEngine)": 7817,
    "this.renderingEngine);": 7818,
    "terminalSokobanGame.renderingEngine.render(state);": 7819,
    "terminalSokobanGame.processAction(tmp);": 7820,
    "terminalSokobanGame.renderingEngine.render(terminalSokobanGame.state);": 7821,
    "System.out.println(tmp.getClass());": 7822,
    "if(tmp": 7823,
    "content+System.lineSeparator();": 7824,
    "outputSteam.append(tmp);": 7825,
    "tmp)": 7826,
    "ActionResult.Success(tmp);": 7827,
    "move){": 7828,
    "cur": 7829,
    "move.nextPosition(cur);": 7830,
    "if(state.getEntity(des)": 7831,
    "state.move(cur,des);": 7832,
    "leftBox)": 7833,
    "if(leftBox.getPlayerId()!=id)": 7834,
    "state.getEntity(Position.of(des.x()": 7835,
    "des.y()));": 7836,
    "state.move(des,": 7837,
    "(Position.of(des.x()": 7838,
    "des.y())));": 7839,
    "state.move(cur,": 7840,
    "des);": 7841,
    "if(move": 7842,
    "state.getEntity((Position.of(des.x()+1,des.y())));": 7843,
    "if(target": 7844,
    "state.move(des,Position.of(des.x()+1,des.y()));": 7845,
    "state.getEntity(Position.of(des.x(),des.y()-1));": 7846,
    "state.move(des,Position.of(des.x(),des.y()-1));": 7847,
    "state.getEntity(Position.of(des.x(),des.y()+1));": 7848,
    "state.move(des,Position.of(des.x(),des.y()+1));": 7849,
    "Iterator": 7850,
    "playerList.iterator();": 7851,
    "while(tmp.hasNext())": 7852,
    "tmp.next();": 7853,
    "playerIDs.add(player.getId());": 7854,
    "(undoLimit);": 7855,
    "GAMEMAP.put(position,entity);": 7856,
    "this.initMap": 7857,
    "this.historyMapStack": 7858,
    "lowerString": 7859,
    "(lowerString)": 7860,
    "(EXIT_COMMAND_TEXT)": 7861,
    "(\"u\")": 7862,
    "(\"a\")": 7863,
    "(\"s\")": 7864,
    "(\"w\")": 7865,
    "(\"d\")": 7866,
    "(\"h\")": 7867,
    "(\"j\")": 7868,
    "(\"k\")": 7869,
    "(\"l\")": 7870,
    "fromObj": 7871,
    "fromObj);": 7872,
    "historyMapStack.push(new": 7873,
    "(historyMapStack.size()": 7874,
    "historyMapStack.pop();": 7875,
    "GameMap(historyMapStack.peek());": 7876,
    "GameMap(initMap);": 7877,
    "quotaStr;": 7878,
    "quotaStr": 7879,
    "renderingEngine.message(quotaStr);": 7880,
    "newAct": 7881,
    "processAction(newAct);": 7882,
    "(res": 7883,
    "renderingEngine.message(((ActionResult.Failed)(res)).getReason());": 7884,
    "needExit": 7885,
    "(!state.getUndoQuota().isPresent()": 7886,
    "playerNextPos": 7887,
    "playerNextEntity": 7888,
    "state.getEntity(playerNextPos);": 7889,
    "(playerNextEntity": 7890,
    "action).next2Position(currPos);": 7891,
    "playerNextEntity).getPlayerId())": 7892,
    "StringResources.MOVE_BOX_OTHER);": 7893,
    "(state.getEntity(boxNextPos)": 7894,
    "state.move(playerNextPos,": 7895,
    "playerNextPos);": 7896,
    "idSet": 7897,
    "++)": 7898,
    "idSet.add(((Player)": 7899,
    "currEntity).getId());": 7900,
    "idSet;": 7901,
    "this.mapMat": 7902,
    "mapMat[position.y()][position.x()]": 7903,
    "this.state.getEntity(position);": 7904,
    "inputUpper": 7905,
    "(inputUpper)": 7906,
    "(this.state.getEntity(from)": 7907,
    "this.state.getPlayerPosition().put((char)(p.getId()": 7908,
    "'A'),": 7909,
    "this.state.putEntity(to,": 7910,
    "this.state.getEntity(from));": 7911,
    "this.state.putEntity(from,": 7912,
    "GameState(new": 7913,
    "GameMap(this.state));": 7914,
    "newState.checkpoint": 7915,
    "this.checkpoint;": 7916,
    "this.checkpoint": 7917,
    "newState;": 7918,
    "this.checkpoint.undoQuota": 7919,
    "(this.checkpoint": 7920,
    "GameMap(this.map);": 7921,
    "currentBoxPositions": 7922,
    "this.state.getBoxPositions();": 7923,
    "//var": 7924,
    "checkpointBoxPositions": 7925,
    "this.checkpoint.state.getBoxPositions();": 7926,
    "currentBoxPositions)": 7927,
    "(!(this.checkpoint.state.getEntity(entry)": 7928,
    "Box))": 7929,
    "GameMap(this.checkpoint.map);": 7930,
    "Optional.of(this.undoQuota.get()-1);": 7931,
    "this.checkpoint.checkpoint;": 7932,
    "//System.out.println(\"recursive\");": 7933,
    "this.printMap();": 7934,
    "this.requestExit": 7935,
    "actResult": 7936,
    "this.processAction(act);": 7937,
    "(actResult": 7938,
    "actResult).getReason());": 7939,
    "e->": 7940,
    "u->": 7941,
    "this.state.getPlayerPositionById(m.getInitiator())": 7942,
    "currentpos": 7943,
    "this.state.getPlayerPositionById(m.getInitiator());": 7944,
    "nextpos": 7945,
    "m.nextPosition(currentpos);": 7946,
    "(this.state.getEntity(nextpos))": 7947,
    "this.state.move(currentpos,": 7948,
    "nextpos);": 7949,
    "boxNextpos": 7950,
    "switch(m)": 7951,
    "Position(nextpos.x(),": 7952,
    "nextpos.y()-1);": 7953,
    "nextpos.y()+1);": 7954,
    "Position(nextpos.x()-1,": 7955,
    "nextpos.y());": 7956,
    "Position(nextpos.x()+1,": 7957,
    "(this.state.getEntity(boxNextpos)": 7958,
    "this.state.move(nextpos,": 7959,
    "boxNextpos);": 7960,
    "this.playerPosition.keySet())": 7961,
    "result.add(entry": 7962
}