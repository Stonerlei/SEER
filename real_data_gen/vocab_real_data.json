{
    "<pad>": 0,
    "<s>": 1,
    "</s>": 2,
    "<unk>": 3,
    "public": 4,
    "static": 5,
    "@NotNull": 6,
    "GameMap": 7,
    "loadGameMap(@NotNull": 8,
    "Path": 9,
    "mapFile)": 10,
    "throws": 11,
    "IOException": 12,
    "{": 13,
    "final": 14,
    "var": 15,
    "fileContent": 16,
    "=": 17,
    "Files.readString(mapFile);": 18,
    "return": 19,
    "GameMap.parse(fileContent);": 20,
    "}": 21,
    "int": 22,
    "getMaxWidth()": 23,
    "//": 24,
    "FIXME": 25,
    "maxWidth;": 26,
    "getMaxHeight()": 27,
    "maxHeight;": 28,
    "Optional<Integer>": 29,
    "getUndoLimit()": 30,
    "undoLimit;": 31,
    "void": 32,
    "testLoadFromFile()": 33,
    "mapFile": 34,
    "tempDir.resolve(\"tempMap.map\");": 35,
    "String": 36,
    "rectangularMap": 37,
    "\"\"\"": 38,
    "233": 39,
    "######": 40,
    "#A..@#": 41,
    "#...@#": 42,
    "#....#": 43,
    "#.a..#": 44,
    "#..a.#": 45,
    "\"\"\";": 46,
    "Files.writeString(mapFile,": 47,
    "rectangularMap);": 48,
    "gameMap": 49,
    "SokobanGameFactory.loadGameMap(mapFile);": 50,
    "assertEquals(6,": 51,
    "gameMap.getMaxWidth());": 52,
    "assertEquals(7,": 53,
    "gameMap.getMaxHeight());": 54,
    "assertEquals(233,": 55,
    "gameMap.getUndoLimit().orElse(null));": 56,
    "Position": 57,
    "of(int": 58,
    "x,": 59,
    "y)": 60,
    "new": 61,
    "Position(x,": 62,
    "y);": 63,
    "Left(int": 64,
    "initiator)": 65,
    "super(initiator);": 66,
    "moveLeft()": 67,
    "assertEquals(": 68,
    "Position.of(232,": 69,
    "233),": 70,
    "Move.Left(-1).nextPosition(pos)": 71,
    ");": 72,
    "testShouldStopWhenWin()": 73,
    "gameState": 74,
    "mock(GameState.class);": 75,
    "when(gameState.isWin()).thenReturn(true);": 76,
    "game": 77,
    "SokobanGameForTesting(gameState);": 78,
    "assertTrue(game.shouldStop());": 79,
    "GameState(@NotNull": 80,
    "map)": 81,
    "this.gameMap": 82,
    "map;": 83,
    "this.undoLimit": 84,
    "map.getUndoLimit();": 85,
    "this.checkpointStack": 86,
    "ArrayDeque<>();": 87,
    "this.entityArray": 88,
    "Entity[map.getMaxWidth()][map.getMaxHeight()];": 89,
    "this.playerPositions": 90,
    "HashMap<>();": 91,
    "for": 92,
    "(int": 93,
    "x": 94,
    "0;": 95,
    "<": 96,
    "map.getMaxWidth();": 97,
    "++x)": 98,
    "y": 99,
    "map.getMaxHeight();": 100,
    "++y){": 101,
    "this.entityArray[x][y]": 102,
    "map.getEntity(Position.of(x,": 103,
    "y));": 104,
    "if": 105,
    "(this.entityArray[x][y]": 106,
    "instanceof": 107,
    "Player": 108,
    "p)": 109,
    "this.playerPositions.put(p.getId(),": 110,
    "Position.of(x,": 111,
    "Down(int": 112,
    "testMove()": 113,
    "mapText": 114,
    "#a...#": 115,
    "testMap": 116,
    "TestHelper.parseGameMap(mapText);": 117,
    "spy(new": 118,
    "GameState(testMap));": 119,
    "result": 120,
    "game.feedActionForProcessing(new": 121,
    "Move.Down(0));": 122,
    "assertTrue(result": 123,
    "ActionResult.Success);": 124,
    "verify(gameState,": 125,
    "times(1)).move(any(),": 126,
    "any());": 127,
    "testPushBox()": 128,
    "times(2)).move(any(),": 129,
    "times(1)).checkpoint();": 130,
    "testHitWall()": 131,
    "##...#": 132,
    "ActionResult.Failed);": 133,
    "never()).move(any(),": 134,
    "@Nullable": 135,
    "Entity": 136,
    "getEntity(@NotNull": 137,
    "position)": 138,
    "(0": 139,
    "<=": 140,
    "position.x()": 141,
    "&&": 142,
    "gameMap.getMaxWidth()": 143,
    "0": 144,
    "position.y()": 145,
    "gameMap.getMaxHeight())": 146,
    "entityArray[position.x()][position.y()];": 147,
    "null;": 148,
    "/**": 149,
    "*": 150,
    "Get": 151,
    "all": 152,
    "box": 153,
    "destination": 154,
    "positions": 155,
    "as": 156,
    "a": 157,
    "set": 158,
    "in": 159,
    "the": 160,
    "map.": 161,
    "This": 162,
    "should": 163,
    "be": 164,
    "same": 165,
    "that": 166,
    "{@link": 167,
    "GameMap}": 168,
    "getPlayerId()": 169,
    "playerId;": 170,
    "testBoxParsing()": 171,
    "TestHelper.parseGameMap(rectangularMap);": 172,
    "assertInstanceOf(Box.class,": 173,
    "gameMap.getEntity(Position.of(2,": 174,
    "4)));": 175,
    "assertNotNull(box);": 176,
    "assertEquals(0,": 177,
    "box.getPlayerId());": 178,
    "getId()": 179,
    "id;": 180,
    "testPlayerParsing()": 181,
    "player": 182,
    "assertInstanceOf(Player.class,": 183,
    "gameMap.getEntity(Position.of(1,": 184,
    "1)));": 185,
    "assertNotNull(player);": 186,
    "player.getId());": 187,
    "testHeightForRectangularMap()": 188,
    "testWidthForRectangularMap()": 189,
    "@Unmodifiable": 190,
    "Set<Position>": 191,
    "getDestinations()": 192,
    "gameMap.getDestinations();": 193,
    "undo": 194,
    "quota": 195,
    "currently": 196,
    "left,": 197,
    "i.e.,": 198,
    "maximum": 199,
    "number": 200,
    "of": 201,
    "actions": 202,
    "can": 203,
    "performed": 204,
    "from": 205,
    "now": 206,
    "on.": 207,
    "If": 208,
    "is": 209,
    "unlimited,": 210,
    "@return": 211,
    "left": 212,
    "(using": 213,
    "Optional#of(Object)})": 214,
    "has": 215,
    "an": 216,
    "limit;": 217,
    "Optional#empty()}": 218,
    "testGetDestinations()": 219,
    "assertEquals(2,": 220,
    "gameMap.getDestinations().size());": 221,
    "assertInstanceOf(Empty.class,": 222,
    "gameMap.getEntity(Position.of(4,": 223,
    "testWallParsing()": 224,
    "assertInstanceOf(Wall.class,": 225,
    "gameMap.getEntity(Position.of(0,": 226,
    "0)));": 227,
    "testGetEntity()": 228,
    "entity": 229,
    "0));": 230,
    "assertTrue(entity": 231,
    "Wall);": 232,
    "private": 233,
    "nonRectangularMap": 234,
    "#...@###": 235,
    "#a....@##": 236,
    "#.a.....#": 237,
    "#..a.####": 238,
    "testEmptyCellParsing()": 239,
    "TerminalInputEngine(InputStream": 240,
    "terminalStream)": 241,
    "this.terminalScanner": 242,
    "Scanner(terminalStream);": 243,
    "Action": 244,
    "fetchAction()": 245,
    "inputLine": 246,
    "terminalScanner.nextLine();": 247,
    "inputWords": 248,
    "inputLine.split(\"s+\");": 249,
    "(inputWords.length": 250,
    "==": 251,
    "0)": 252,
    "InvalidInput(0,": 253,
    "StringResources.INVALID_INPUT_MESSAGE);": 254,
    "switch": 255,
    "(inputWords[0].toLowerCase())": 256,
    "case": 257,
    "\"a\"": 258,
    "->": 259,
    "Move.Left(0);": 260,
    "\"s\"": 261,
    "Move.Down(0);": 262,
    "\"w\"": 263,
    "Move.Up(0);": 264,
    "\"d\"": 265,
    "Move.Right(0);": 266,
    "\"h\"": 267,
    "Move.Left(1);": 268,
    "\"j\"": 269,
    "Move.Down(1);": 270,
    "\"k\"": 271,
    "Move.Up(1);": 272,
    "\"l\"": 273,
    "Move.Right(1);": 274,
    "\"u\"": 275,
    "Undo(-1);": 276,
    "StringResources.EXIT_COMMAND_TEXT": 277,
    "Exit(-1);": 278,
    "default": 279,
    "InvalidInput(-1,": 280,
    "};": 281,
    "testExit()": 282,
    "inputStream": 283,
    "fixValueStream(\"exit\");": 284,
    "inputEngine": 285,
    "TerminalInputEngine(inputStream);": 286,
    "action": 287,
    "inputEngine.fetchAction();": 288,
    "assertTrue(action": 289,
    "Exit);": 290,
    "move(Position": 291,
    "from,": 292,
    "to)": 293,
    "entityArray[to.x()][to.y()]": 294,
    "entityArray[from.x()][from.y()];": 295,
    "entityArray[from.x()][from.y()]": 296,
    "Empty();": 297,
    "(entityArray[to.x()][to.y()]": 298,
    "playerPositions.put(p.getId(),": 299,
    "to);": 300,
    "Record": 301,
    "checkpoint": 302,
    "state,": 303,
    "including:": 304,
    "<li>All": 305,
    "current": 306,
    "entities": 307,
    "map.</li>": 308,
    "<li>Current": 309,
    "quota</li>": 310,
    "<p>": 311,
    "Checkpoint": 312,
    "used": 313,
    "GameState#undo()}": 314,
    "testWin()": 315,
    "TestHelper.parseGameMap(\"\"\"": 316,
    "#A.a@#": 317,
    "#..a@#": 318,
    "\"\"\");": 319,
    "GameState(testMap);": 320,
    "gameState.move(Position.of(3,": 321,
    "1),": 322,
    "Position.of(4,": 323,
    "1));": 324,
    "2),": 325,
    "2));": 326,
    "assertTrue(gameState.isWin());": 327,
    "getPlayerPositionById(int": 328,
    "id)": 329,
    "playerPositions.get(id);": 330,
    "GameState(TestHelper.parseGameMap(\"\"\"": 331,
    "));": 332,
    "gameState.move(Position.of(1,": 333,
    "Position.of(2,": 334,
    "assertEquals(Position.of(2,": 335,
    "gameState.getPlayerPositionById(0));": 336,
    "#.Aa@#": 337,
    "gameState.move(Position.of(2,": 338,
    "Position.of(3,": 339,
    "assertEquals(Position.of(3,": 340,
    "gameState.getEntity(Position.of(4,": 341,
    "getUndoQuota()": 342,
    "testGetUndoLimit()": 343,
    "gameState.getUndoQuota().orElse(null));": 344,
    "getAllPlayerPositions()": 345,
    "playerPositions.values().stream().collect(Collectors.toSet());": 346,
    "testAllPlayerIds()": 347,
    "#APp@#": 348,
    "#xXa@@#": 349,
    "assertEquals(new": 350,
    "HashSet<>(Arrays.asList(Position.of(1,": 351,
    "2))),": 352,
    "gameState.getAllPlayerPositions());": 353,
    "checkpoint()": 354,
    "Entity[][]": 355,
    "copy": 356,
    "Entity[gameMap.getMaxWidth()][gameMap.getMaxHeight()];": 357,
    "gameMap.getMaxWidth();": 358,
    "gameMap.getMaxHeight();": 359,
    "++y)": 360,
    "copy[x][y]": 361,
    "entityArray[x][y];": 362,
    "checkpointStack.push(copy);": 363,
    "undo()": 364,
    "(undoLimit.isPresent()": 365,
    "!checkpointStack.isEmpty())": 366,
    "undoLimit": 367,
    "Optional.of(undoLimit.get()": 368,
    "-": 369,
    "1);": 370,
    "playerPositions.clear();": 371,
    "(!checkpointStack.isEmpty())": 372,
    "checkpointStack.pop();": 373,
    "Function<Position,": 374,
    "Entity>": 375,
    "getSaved": 376,
    "checkpointStack.isEmpty()": 377,
    "?": 378,
    "(Position": 379,
    "gameMap.getEntity(p)": 380,
    ":": 381,
    "checkpointStack.peek()[p.x()][p.y()];": 382,
    "entityArray[x][y]": 383,
    "getSaved.apply(Position.of(x,": 384,
    "(entityArray[x][y]": 385,
    "width": 386,
    "testUndoWhenThereIsCheckpoint()": 387,
    "gameState.checkpoint();": 388,
    "gameState.undo();": 389,
    "gameState.getEntity(Position.of(3,": 390,
    "assertEquals(232,": 391,
    "InvalidInput(int": 392,
    "initiator,": 393,
    "message)": 394,
    "this.message": 395,
    "message;": 396,
    "Exit(int": 397,
    "run()": 398,
    "renderingEngine.message(StringResources.GAME_READY_MESSAGE);": 399,
    "while": 400,
    "(!shouldStop())": 401,
    "renderingEngine.render(state);": 402,
    "(state.getUndoQuota().isPresent())": 403,
    "renderingEngine": 404,
    ".message(StringResources.UNDO_QUOTA_TEMPLATE.formatted(state.getUndoQuota().get().toString()));": 405,
    "else": 406,
    "renderingEngine.message(StringResources.UNDO_QUOTA_UNLIMITED);": 407,
    "renderingEngine.message(\">>>\");": 408,
    "processAction(action);": 409,
    "(result": 410,
    "ActionResult.Failed": 411,
    "f)": 412,
    "renderingEngine.message(f.getReason());": 413,
    "renderingEngine.message(StringResources.GAME_EXIT_MESSAGE);": 414,
    "(state.isWin())": 415,
    "renderingEngine.message(StringResources.WIN_MESSAGE);": 416,
    "testGameLoop()": 417,
    "mock(TerminalInputEngine.class);": 418,
    "mock(TerminalRenderingEngine.class);": 419,
    "when(gameState.isWin()).thenReturn(false);": 420,
    "when(inputEngine.fetchAction())": 421,
    ".thenReturn(new": 422,
    "\"\"))": 423,
    "Exit(0));": 424,
    "TerminalSokobanGame(gameState,": 425,
    "inputEngine,": 426,
    "renderingEngine);": 427,
    "game.run();": 428,
    "inOrder": 429,
    "inOrder(inputEngine,": 430,
    "Before": 431,
    "loop": 432,
    "inOrder.verify(renderingEngine).render(eq(gameState));": 433,
    "First": 434,
    "round": 435,
    "inOrder.verify(inputEngine).fetchAction();": 436,
    "Second": 437,
    "atLeastOnce()).getUndoQuota();": 438,
    "atLeast(0)).isWin();": 439,
    "verify(renderingEngine,": 440,
    "atLeastOnce()).message(any());": 441,
    "testTwoPlayers()": 442,
    "when(gameState.getAllPlayerPositions()).thenReturn(new": 443,
    "Position.of(1,": 444,
    "2))));": 445,
    "assertDoesNotThrow(()": 446,
    "renderingEngine));": 447,
    "TerminalRenderingEngine(PrintStream": 448,
    "outputSteam)": 449,
    "this.outputSteam": 450,
    "outputSteam;": 451,
    "message(@NotNull": 452,
    "content)": 453,
    "Hint:": 454,
    "System.out": 455,
    "also": 456,
    "PrintStream.": 457,
    "outputSteam.println(content);": 458,
    "testMessage()": 459,
    "stream": 460,
    "CapturingStream();": 461,
    "randomString": 462,
    "String.valueOf(this.hashCode());": 463,
    "TerminalRenderingEngine(stream);": 464,
    "renderingEngine.message(randomString);": 465,
    "assertEquals(randomString": 466,
    "+": 467,
    "System.lineSeparator(),": 468,
    "stream.getContent());": 469,
    "testRender()": 470,
    "GameState(TestHelper.parseGameMap(testMap));": 471,
    "renderingEngine.render(gameState);": 472,
    "renderedContent": 473,
    "stream.getContent();": 474,
    "renderedContent.lines().count());": 475,
    "assertTrue(renderedContent.lines().allMatch(it": 476,
    "it.length()": 477,
    ">=": 478,
    "9": 479,
    "10));": 480,
    "On": 481,
    "Windows": 482,
    "there": 483,
    "may": 484,
    "nr": 485,
    "lines": 486,
    "renderedContent.lines().toList();": 487,
    "assertEquals('#',": 488,
    "lines.get(0).charAt(0));": 489,
    "assertEquals('": 490,
    "',": 491,
    "lines.get(0).charAt(8));": 492,
    "assertEquals('a',": 493,
    "lines.get(3).charAt(1));": 494,
    "class": 495,
    "CapturingStream": 496,
    "extends": 497,
    "PrintStream": 498,
    "CapturingStream()": 499,
    "super(new": 500,
    "ByteArrayOutputStream());": 501,
    "getContent()": 502,
    "((ByteArrayOutputStream)": 503,
    "this.out).toString(StandardCharsets.UTF_8);": 504,
    "Up(int": 505,
    "moveUp()": 506,
    "Position.of(233,": 507,
    "232),": 508,
    "Move.Up(-1).nextPosition(pos)": 509,
    "moveDown()": 510,
    "234),": 511,
    "Move.Down(-1).nextPosition(pos)": 512,
    "Right(int": 513,
    "moveRight()": 514,
    "Position.of(234,": 515,
    "Move.Right(-1).nextPosition(pos)": 516,
    "Undo(int": 517,
    "testExceedingUndoQuota()": 518,
    "when(gameState.getPlayerPositionById(anyInt())).thenReturn(Position.of(0,": 519,
    "when(gameState.getUndoQuota()).thenReturn(Optional.of(0));": 520,
    "Undo(0));": 521,
    "testUndoUnlimited()": 522,
    "when(gameState.getUndoQuota()).thenReturn(Optional.empty());": 523,
    "i": 524,
    "10000;": 525,
    "i++)": 526,
    "times(10000)).undo();": 527,
    "testPushOtherPlayerBox()": 528,
    "#AB.@#": 529,
    "#b.a.#": 530,
    "#@...#": 531,
    "testMoveNonExistingPlayer()": 532,
    "Move.Down(23));": 533,
    "testCheckpointWhenNeed()": 534,
    ")));": 535,
    "Move.Right(0));": 536,
    "assertInstanceOf(ActionResult.Success.class,": 537,
    "result);": 538,
    "testPushBoxAgainstWall()": 539,
    "protected": 540,
    "ActionResult": 541,
    "processAction(@NotNull": 542,
    "action)": 543,
    "(action)": 544,
    "Exit": 545,
    "e": 546,
    "willExit": 547,
    "true;": 548,
    "yield": 549,
    "ActionResult.Success(e);": 550,
    "InvalidInput": 551,
    "ActionResult.Failed(i,": 552,
    "Move": 553,
    "m": 554,
    "playerPos": 555,
    "state.getPlayerPositionById(m.getInitiator());": 556,
    "(playerPos": 557,
    "null)": 558,
    "ActionResult.Failed(m,": 559,
    "StringResources.PLAYER_NOT_FOUND);": 560,
    "nextPlayerPos": 561,
    "m.nextPosition(playerPos);": 562,
    "targetEntity": 563,
    "state.getEntity(nextPlayerPos);": 564,
    "(targetEntity)": 565,
    "Box": 566,
    "b": 567,
    "(b.getPlayerId()": 568,
    "!=": 569,
    "m.getInitiator())": 570,
    "\"You": 571,
    "cannot": 572,
    "move": 573,
    "other": 574,
    "players'": 575,
    "boxes.\");": 576,
    "nextBoxPos": 577,
    "m.nextPosition(nextPlayerPos);": 578,
    "farEntity": 579,
    "state.getEntity(nextBoxPos);": 580,
    "(!(farEntity": 581,
    "Empty))": 582,
    "\"Failed": 583,
    "to": 584,
    "push": 585,
    "box.\");": 586,
    "state.move(nextPlayerPos,": 587,
    "nextBoxPos);": 588,
    "state.move(playerPos,": 589,
    "nextPlayerPos);": 590,
    "state.checkpoint();": 591,
    "ActionResult.Success(m);": 592,
    "Empty": 593,
    "p": 594,
    "hit": 595,
    "another": 596,
    "player.\");": 597,
    "Wall": 598,
    "w": 599,
    "wall.\");": 600,
    "Undo": 601,
    "u": 602,
    "(state.getUndoQuota().orElse(1).equals(0))": 603,
    "ActionResult.Failed(u,": 604,
    "StringResources.UNDO_QUOTA_RUN_OUT);": 605,
    "state.undo();": 606,
    "ActionResult.Success(u);": 607,
    "ActionResult.Failed(action,": 608,
    "testCheckpointWhenNotNeed()": 609,
    "never()).checkpoint();": 610,
    "SokobanGameForTesting": 611,
    "AbstractSokobanGame": 612,
    "SokobanGameForTesting(GameState": 613,
    "gameState)": 614,
    "super(gameState);": 615,
    "@Override": 616,
    "feedActionForProcessing(Action": 617,
    "testHitAnotherPlayer()": 618,
    "#B...#": 619,
    "#ab.@#": 620,
    "testUndoWithinQuota()": 621,
    "when(gameState.getUndoQuota()).thenReturn(Optional.of(1));": 622,
    "times(1)).undo();": 623,
    "testInvalidInput()": 624,
    "SokobanGameForTesting(mock(GameState.class));": 625,
    "message": 626,
    "String.valueOf(new": 627,
    "Random().nextLong());": 628,
    "message);": 629,
    "game.feedActionForProcessing(action);": 630,
    "testUndoLimitParsing()": 631,
    "testWidthForNonRectangularMap()": 632,
    "TestHelper.parseGameMap(nonRectangularMap);": 633,
    "assertEquals(9,": 634,
    "Set<Integer>": 635,
    "getPlayerIds()": 636,
    "playerIds;": 637,
    "testTwoPlayersMap()": 638,
    "twoPlayersMap": 639,
    "#..B@#": 640,
    "#..b.#": 641,
    "TestHelper.parseGameMap(twoPlayersMap);": 642,
    "playerIds": 643,
    "gameMap.getPlayerIds();": 644,
    "expectedIds": 645,
    "HashSet<Integer>();": 646,
    "expectedIds.add(0);": 647,
    "expectedIds.add(1);": 648,
    "assertEquals(expectedIds,": 649,
    "playerIds);": 650,
    "testMapWithoutPlayer()": 651,
    "invalidMap": 652,
    "###": 653,
    "#.#": 654,
    "assertThrowsExactly(IllegalArgumentException.class,": 655,
    "()": 656,
    "TestHelper.parseGameMap(invalidMap));": 657,
    "@Tag(TestKind.HIDDEN)": 658,
    "@Test": 659,
    "testUnmatchedPlayersAndBoxes()": 660,
    "#a.b@#": 661,
    "#.a.@#": 662,
    "testManyPlayersMap()": 663,
    "manyPlayersMap": 664,
    "#A.P@@#": 665,
    "#vCB@@#": 666,
    "#.cpD@#": 667,
    "#Ga.d@#": 668,
    "#g.bV@#": 669,
    "TestHelper.parseGameMap(manyPlayersMap);": 670,
    "HashSet<>(Arrays.asList(": 671,
    "0,": 672,
    "'P'": 673,
    "'A',": 674,
    "'C'": 675,
    "'B'": 676,
    "'D'": 677,
    "'G'": 678,
    "'V'": 679,
    "'A'": 680,
    "testHeightForNonRectangularMap()": 681,
    "testDuplicatedPlayers()": 682,
    "#..A@#": 683,
    "testParseMapWithoutUndoLimit()": 684,
    "String.join(\"n\",": 685,
    "rectangularMap.lines().skip(1).toList());": 686,
    "assertThrows(Exception.class,": 687,
    "testInsufficientDestinations()": 688,
    "GameMap(int": 689,
    "maxWidth,": 690,
    "maxHeight,": 691,
    "destinations,": 692,
    "undoLimit)": 693,
    "this.maxWidth": 694,
    "this.maxHeight": 695,
    "(undoLimit": 696,
    "Optional.empty()": 697,
    "Optional.of(undoLimit);": 698,
    "Entity[maxWidth][maxHeight];": 699,
    "this.destinations": 700,
    "destinations;": 701,
    "this.playerIds": 702,
    "HashSet<>();": 703,
    "Parses": 704,
    "map": 705,
    "string": 706,
    "representation.": 707,
    "The": 708,
    "first": 709,
    "line": 710,
    "limit.": 711,
    "Starting": 712,
    "second": 713,
    "line,": 714,
    "represented": 715,
    "follows,": 716,
    "<li>#": 717,
    "represents": 718,
    "Wall}</li>": 719,
    "<li>@": 720,
    "destination.</li>": 721,
    "<li>Any": 722,
    "upper-case": 723,
    "letter": 724,
    "Player}.</li>": 725,
    "<li>": 726,
    "Any": 727,
    "lower-case": 728,
    "Box}": 729,
    "only": 730,
    "movable": 731,
    "by": 732,
    "with": 733,
    "corresponding": 734,
    "letter.": 735,
    "For": 736,
    "instance,": 737,
    "moved": 738,
    "\"A\"": 739,
    "and": 740,
    "not": 741,
    "\"B\".": 742,
    "</li>": 743,
    "<li>.": 744,
    "Empty}": 745,
    "position": 746,
    "map,": 747,
    "meaning": 748,
    "no": 749,
    "or": 750,
    "at": 751,
    "this": 752,
    "position.</li>": 753,
    "Notes:": 754,
    "There": 755,
    "most": 756,
    "26": 757,
    "players.": 758,
    "All": 759,
    "implementations": 760,
    "classes": 761,
    "hk.ust.comp3021.game": 762,
    "package": 763,
    "support": 764,
    "up": 765,
    "simplicity,": 766,
    "we": 767,
    "assume": 768,
    "given": 769,
    "bounded": 770,
    "closed": 771,
    "boundary.": 772,
    "need": 773,
    "check": 774,
    "point.": 775,
    "Example": 776,
    "maps": 777,
    "found": 778,
    "\"src/main/resources\".": 779,
    "@param": 780,
    "parsed": 781,
    "object.": 782,
    "@throws": 783,
    "IllegalArgumentException": 784,
    "limit": 785,
    "negative": 786,
    "but": 787,
    "-1.": 788,
    "are": 789,
    "multiple": 790,
    "letters,": 791,
    "one": 792,
    "exist": 793,
    "position.": 794,
    "players": 795,
    "boxes": 796,
    "equal": 797,
    "destinations.": 798,
    "whose": 799,
    "Box#getPlayerId()}": 800,
    "testSuperLargeMap()": 801,
    "try": 802,
    "GameMap(Integer.MAX_VALUE,": 803,
    "Integer.MAX_VALUE,": 804,
    "Collections.emptySet(),": 805,
    "0);": 806,
    "catch": 807,
    "(OutOfMemoryError": 808,
    "e)": 809,
    "throw": 810,
    "RuntimeException(e);": 811,
    "});": 812,
    "testInvalidUndoLimit()": 813,
    "-233": 814,
    "testEmptyMap()": 815,
    "\"\";": 816,
    "getInitiator()": 817,
    "initiator;": 818,
    "testMove(String": 819,
    "input,": 820,
    "name,": 821,
    "playerId)": 822,
    "inputStreamU": 823,
    "fixValueStream(input.toUpperCase());": 824,
    "inputStreamL": 825,
    "fixValueStream(input.toLowerCase());": 826,
    "inputEngineU": 827,
    "TerminalInputEngine(inputStreamU);": 828,
    "inputEngineL": 829,
    "TerminalInputEngine(inputStreamL);": 830,
    "actionU": 831,
    "inputEngineU.fetchAction();": 832,
    "actionL": 833,
    "inputEngineL.fetchAction();": 834,
    "assertTrue(actionU.getClass().getSimpleName().equals(name)": 835,
    "||": 836,
    "actionL.getClass().getSimpleName().equals(name));": 837,
    "assertTrue(actionU.getInitiator()": 838,
    "playerId": 839,
    "actionL.getInitiator()": 840,
    "playerId);": 841,
    "InputStream": 842,
    "fixValueStream(String": 843,
    "bytes": 844,
    "content.getBytes(StandardCharsets.UTF_8);": 845,
    "ByteArrayInputStream(bytes);": 846,
    "testUndo(String": 847,
    "assertTrue(actionU": 848,
    "Undo);": 849,
    "fixValueStream(\"blah": 850,
    "blah\");": 851,
    "InvalidInput);": 852,
    "Box(int": 853,
    "this.playerId": 854,
    "Player(int": 855,
    "this.id": 856,
    "ShouldNotReachException()": 857,
    "super(\"This": 858,
    "branch": 859,
    "reached.\");": 860,
    "testUndoWhenThereIsNoMove()": 861,
    "generateEntity(int": 862,
    "key)": 863,
    "(key": 864,
    "%": 865,
    "4)": 866,
    "Box(0);": 867,
    "1": 868,
    "2": 869,
    "Player(0);": 870,
    "3": 871,
    "Wall();": 872,
    "ShouldNotReachException();": 873,
    "testGetUndoUnlimited()": 874,
    "-1": 875,
    "assertTrue(gameState.getUndoQuota().isEmpty());": 876,
    "putEntity(Position": 877,
    "position,": 878,
    "entity)": 879,
    "maxWidth": 880,
    "maxHeight)": 881,
    "entityArray[position.x()][position.y()]": 882,
    "entity;": 883,
    "(entity": 884,
    "player)": 885,
    "playerIds.add(player.getId());": 886,
    "getMapMaxHeight()": 887,
    "getMapMaxWidth()": 888,
    "height": 889,
    "testMapCopying()": 890,
    "2333;": 891,
    "maxHeight": 892,
    "random": 893,
    "Random();": 894,
    "randomEntities": 895,
    "Stream.generate(()": 896,
    "Position.of(random.nextInt(maxWidth),": 897,
    "random.nextInt(maxHeight)))": 898,
    ".distinct()": 899,
    ".limit(100)": 900,
    ".collect(Collectors.toMap(Function.identity(),": 901,
    "it": 902,
    "generateEntity(it.x())));": 903,
    "firstPos": 904,
    "randomEntities.keySet().stream().findFirst();": 905,
    "assertTrue(firstPos.isPresent());": 906,
    "GameMap(maxWidth,": 907,
    "Collections.singleton(firstPos.get()),": 908,
    "233);": 909,
    "randomEntities.forEach(gameMap::putEntity);": 910,
    "GameState(gameMap);": 911,
    "randomPosition": 912,
    "randomEntities.keySet().stream().findAny();": 913,
    "assertTrue(randomPosition.isPresent());": 914,
    "gameMap.putEntity(randomPosition.get(),": 915,
    "Empty());": 916,
    "randomEntities.forEach((p,": 917,
    "assertEquals(e,": 918,
    "gameState.getEntity(p)));": 919,
    "assertEquals(2333,": 920,
    "gameState.getMapMaxHeight());": 921,
    "gameState.getMapMaxWidth());": 922,
    "assertEquals(1,": 923,
    "gameState.getDestinations().size());": 924,
    "testUndoWhenThereIsMoveButNoCheckpoint()": 925,
    "testGameExit()": 926,
    "when(gameState.isWin()).thenReturn(false,": 927,
    "false,": 928,
    "false);": 929,
    "\"\"),": 930,
    "testGameWin()": 931,
    "true);": 932,
    "\"\"));": 933,
    "atLeastOnce()).isWin();": 934,
    "testMoreThanTwoPlayers()": 935,
    "3))));": 936
}