{
    "0": {
        "dataset": "COMP 3021",
        "project": "kcwongbn",
        "bug_id": "0",
        "T": "void moveUp() { Position.of(233, 232), new Move.Up(-1).nextPosition(pos) ); }",
        "C": "public static @NotNull Position of(int x, int y) { return new Position(x, y); } public Up(int initiator) { super(initiator); }",
        "label": "P"
    },
    "1": {
        "dataset": "COMP 3021",
        "project": "kcwongbn",
        "bug_id": "1",
        "T": "void moveDown() { Position.of(233, 234), new Move.Down(-1).nextPosition(pos) ); }",
        "C": "public static @NotNull Position of(int x, int y) { return new Position(x, y); } public Down(int initiator) { super(initiator); }",
        "label": "P"
    },
    "2": {
        "dataset": "COMP 3021",
        "project": "kcwongbn",
        "bug_id": "2",
        "T": "void moveRight() { Position.of(234, 233), new Move.Right(-1).nextPosition(pos) ); }",
        "C": "public static @NotNull Position of(int x, int y) { return new Position(x, y); } public Right(int initiator) { super(initiator); }",
        "label": "P"
    },
    "3": {
        "dataset": "COMP 3021",
        "project": "kcwongbn",
        "bug_id": "3",
        "T": "void testExceedingUndoQuota() { final var gameState = mock(GameState.class); when(gameState.getPlayerPositionById(anyInt())).thenReturn(Position.of(0, 0)); when(gameState.getUndoQuota()).thenReturn(Optional.of(0)); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Undo(0)); }",
        "C": "public Undo(int initiator) { super(initiator); }",
        "label": "P"
    },
    "4": {
        "dataset": "COMP 3021",
        "project": "kcwongbn",
        "bug_id": "4",
        "T": "void testExit() { final var gameState = mock(GameState.class); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Exit(0)); }",
        "C": "public Exit(int initiator) { super(initiator); }",
        "label": "P"
    },
    "5": {
        "dataset": "COMP 3021",
        "project": "kcwongbn",
        "bug_id": "5",
        "T": "void testUndoUnlimited() { final var gameState = mock(GameState.class); when(gameState.getPlayerPositionById(anyInt())).thenReturn(Position.of(0, 0)); when(gameState.getUndoQuota()).thenReturn(Optional.empty()); final var game = new SokobanGameForTesting(gameState); for (int i = 0; i < 10000; i++) { final var result = game.feedActionForProcessing(new Undo(0)); } verify(gameState, times(10000)).undo(); }",
        "C": "public GameState(@NotNull GameMap map) { // TODO this.map = map; this.initialAllPlayerPosition = this.getCurrentPlayerPosition(this.map.playerPositionMap); this.initialGameBoard = this.getCurrentGameBoard(this.map.gameBoardMap); this.map.undoLimit = this.getUndoQuota().get(); } public Undo(int initiator) { super(initiator); }",
        "label": "F"
    },
    "6": {
        "dataset": "COMP 3021",
        "project": "kcwongbn",
        "bug_id": "6",
        "T": "void testPushOtherPlayerBox() { String mapText = \"\"\" 233 ###### #AB.@# #b.a.# #@...# ###### \"\"\"; final var testMap = TestHelper.parseGameMap(mapText); final var gameState = spy(new GameState(testMap)); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Move.Down(0)); verify(gameState, never()).move(any(), any()); }",
        "C": "public GameState(@NotNull GameMap map) { // TODO this.map = map; this.initialAllPlayerPosition = this.getCurrentPlayerPosition(this.map.playerPositionMap); this.initialGameBoard = this.getCurrentGameBoard(this.map.gameBoardMap); this.map.undoLimit = this.getUndoQuota().get(); } public Down(int initiator) { super(initiator); }",
        "label": "P"
    },
    "7": {
        "dataset": "COMP 3021",
        "project": "kcwongbn",
        "bug_id": "7",
        "T": "void testMoveNonExistingPlayer() { String mapText = \"\"\" 233 ###### #A..@# #a...# ##...# ###### \"\"\"; final var testMap = TestHelper.parseGameMap(mapText); final var gameState = spy(new GameState(testMap)); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Move.Down(23)); }",
        "C": "public GameState(@NotNull GameMap map) { // TODO this.map = map; this.initialAllPlayerPosition = this.getCurrentPlayerPosition(this.map.playerPositionMap); this.initialGameBoard = this.getCurrentGameBoard(this.map.gameBoardMap); this.map.undoLimit = this.getUndoQuota().get(); } public Down(int initiator) { super(initiator); }",
        "label": "F"
    },
    "8": {
        "dataset": "COMP 3021",
        "project": "kcwongbn",
        "bug_id": "8",
        "T": "void testCheckpointWhenNeed() { final var gameState = spy(new GameState(TestHelper.parseGameMap(\"\"\" 233 ###### #.Aa@# #..a@# ###### \"\"\" ))); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Move.Right(0)); verify(gameState, times(1)).checkpoint(); }",
        "C": "public GameState(@NotNull GameMap map) { // TODO this.map = map; this.initialAllPlayerPosition = this.getCurrentPlayerPosition(this.map.playerPositionMap); this.initialGameBoard = this.getCurrentGameBoard(this.map.gameBoardMap); this.map.undoLimit = this.getUndoQuota().get(); } public Right(int initiator) { super(initiator); }",
        "label": "P"
    },
    "9": {
        "dataset": "COMP 3021",
        "project": "kcwongbn",
        "bug_id": "9",
        "T": "void testPushBoxAgainstWall() { String mapText = \"\"\" 233 ###### #A..@# #a...# ##...# ###### \"\"\"; final var testMap = TestHelper.parseGameMap(mapText); final var gameState = spy(new GameState(testMap)); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Move.Down(0)); verify(gameState, never()).move(any(), any()); }",
        "C": "public GameState(@NotNull GameMap map) { // TODO this.map = map; this.initialAllPlayerPosition = this.getCurrentPlayerPosition(this.map.playerPositionMap); this.initialGameBoard = this.getCurrentGameBoard(this.map.gameBoardMap); this.map.undoLimit = this.getUndoQuota().get(); } public Down(int initiator) { super(initiator); }",
        "label": "P"
    },
    "10": {
        "dataset": "COMP 3021",
        "project": "kcwongbn",
        "bug_id": "10",
        "T": "void testCheckpointWhenNotNeed() { final var gameState = spy(new GameState(TestHelper.parseGameMap(\"\"\" 233 ###### #A.a@# #..a@# ###### \"\"\" ))); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Move.Right(0)); verify(gameState, never()).checkpoint(); } private static class SokobanGameForTesting extends AbstractSokobanGame { protected SokobanGameForTesting(GameState gameState) { super(gameState); } @Override public void run() { } public ActionResult feedActionForProcessing(Action action) { return processAction(action); } }",
        "C": "public GameState(@NotNull GameMap map) { // TODO this.map = map; this.initialAllPlayerPosition = this.getCurrentPlayerPosition(this.map.playerPositionMap); this.initialGameBoard = this.getCurrentGameBoard(this.map.gameBoardMap); this.map.undoLimit = this.getUndoQuota().get(); } public Right(int initiator) { super(initiator); } public void run() { // TODO this.renderingEngine.message(\"Sokoban game is ready.\"); boolean exit = false; while (!(this.shouldStop())) { this.renderingEngine.render(this.state); this.renderingEngine.message(\"\"); String undolimit = this.state.getUndoQuota().toString(); undolimit = undolimit.substring(9,undolimit.length()-1); this.renderingEngine.message(\"Undo Quota: \" + undolimit); this.renderingEngine.message(\">>>\"); Action tempAction = this.inputEngine.fetchAction(); ActionResult tempActionResult = this.processAction(tempAction); if (tempActionResult instanceof ActionResult.Failed) { this.renderingEngine.message(((ActionResult.Failed) tempActionResult).getReason()); } if (tempAction instanceof Exit) { exit = true; } } this.renderingEngine.render(this.state); this.renderingEngine.message(\"\"); this.renderingEngine.message(\"Game exits.\"); if (!exit) { this.renderingEngine.message(\"You win.\"); } } protected ActionResult processAction(@NotNull Action action) { // TODO this.action = action; switch(action) { case Exit e -> { return new ActionResult.Success(e); } case InvalidInput m -> { return new ActionResult.Failed(m,\"Invalid Input.\"); } case Undo u -> { if (state.getUndoQuota().get() > 0 || state.getUndoQuota().get() == -1 ) { this.state.undo(); return new ActionResult.Success(u); } else { return new ActionResult.Failed(u,\"You have run out of your undo quota.\"); } } case Move m -> { Position currentPosition = this.state.map.playerPositionMap.get(m.getInitiator()); Position nextPosition = m.nextPosition(currentPosition); var temp = this.state.map.gameBoardMap.get(nextPosition); if ( temp instanceof Wall) { return new ActionResult.Failed(m,\"You hit a wall.\"); } else if (temp instanceof Player) { return new ActionResult.Failed(m,\"You hit another player.\"); } else if (temp instanceof Box) { if (((Box) temp).getPlayerId() != m.getInitiator()) { return new ActionResult.Failed(m,\"You cannot move other players' boxes.\"); } int nextX= nextPosition.x(); int nextY = nextPosition.y(); Position boxNextPosition = null; switch (m) { case Move.Left left -> { boxNextPosition = new Position(nextX-1,nextY); if (! (this.state.map.gameBoardMap.get(boxNextPosition)instanceof Empty)) { return new ActionResult.Failed(m,\"Failed to push the box.\"); } break; } case Move.Right right -> { boxNextPosition = new Position(nextX+1,nextY); if (! (this.state.map.gameBoardMap.get(boxNextPosition)instanceof Empty)) { return new ActionResult.Failed(m,\"Failed to push the box.\"); } break; } case Move.Down down -> { boxNextPosition = new Position(nextX,nextY+1); if (! (this.state.map.gameBoardMap.get(boxNextPosition)instanceof Empty)) { return new ActionResult.Failed(m,\"Failed to push the box.\"); } break; } case Move.Up up -> { boxNextPosition = new Position(nextX,nextY-1); if (! (this.state.map.gameBoardMap.get(boxNextPosition)instanceof Empty)) { return new ActionResult.Failed(m,\"Failed to push the box.\"); } break; } default -> { throw new IllegalArgumentException(); } } state.move(nextPosition,boxNextPosition); state.move(currentPosition,nextPosition); state.checkpoint(); return new ActionResult.Success(m); } else { state.move(currentPosition,nextPosition); return new ActionResult.Success(m); } } default -> { throw new IllegalArgumentException(); } } }",
        "label": "P"
    },
    "11": {
        "dataset": "COMP 3021",
        "project": "kcwongbn",
        "bug_id": "11",
        "T": "void testHitAnotherPlayer() { String mapText = \"\"\" 233 ###### #A..@# #B...# #ab.@# ###### \"\"\"; final var testMap = TestHelper.parseGameMap(mapText); final var gameState = spy(new GameState(testMap)); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Move.Down(0)); verify(gameState, never()).move(any(), any()); }",
        "C": "public GameState(@NotNull GameMap map) { // TODO this.map = map; this.initialAllPlayerPosition = this.getCurrentPlayerPosition(this.map.playerPositionMap); this.initialGameBoard = this.getCurrentGameBoard(this.map.gameBoardMap); this.map.undoLimit = this.getUndoQuota().get(); } public Down(int initiator) { super(initiator); }",
        "label": "P"
    },
    "12": {
        "dataset": "COMP 3021",
        "project": "kcwongbn",
        "bug_id": "12",
        "T": "void testUndoWithinQuota() { final var gameState = mock(GameState.class); when(gameState.getPlayerPositionById(anyInt())).thenReturn(Position.of(0, 0)); when(gameState.getUndoQuota()).thenReturn(Optional.of(1)); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Undo(0)); verify(gameState, times(1)).undo(); }",
        "C": "public Undo(int initiator) { super(initiator); }",
        "label": "P"
    },
    "13": {
        "dataset": "COMP 3021",
        "project": "kcwongbn",
        "bug_id": "13",
        "T": "void testInvalidInput() { final var game = new SokobanGameForTesting(mock(GameState.class)); final var message = String.valueOf(new Random().nextLong()); final var action = new InvalidInput(-1, message); final var result = game.feedActionForProcessing(action); }",
        "C": "public InvalidInput(int initiator, @NotNull String message) { super(initiator); this.message = message; }",
        "label": "P"
    },
    "14": {
        "dataset": "COMP 3021",
        "project": "kcwongbn",
        "bug_id": "14",
        "T": "void testUndoLimitParsing() { final var gameMap = TestHelper.parseGameMap(rectangularMap); }",
        "C": "",
        "label": "P"
    },
    "15": {
        "dataset": "COMP 3021",
        "project": "kcwongbn",
        "bug_id": "15",
        "T": "void testWidthForNonRectangularMap() { final var gameMap = TestHelper.parseGameMap(nonRectangularMap); }",
        "C": "",
        "label": "P"
    },
    "16": {
        "dataset": "COMP 3021",
        "project": "kcwongbn",
        "bug_id": "16",
        "T": "void testTwoPlayersMap() { final var twoPlayersMap = \"\"\" 233 ###### #A..@# #..B@# #....# #.a..# #..b.# ###### \"\"\"; final var gameMap = TestHelper.parseGameMap(twoPlayersMap); final var playerIds = gameMap.getPlayerIds(); final var expectedIds = new HashSet<Integer>(); expectedIds.add(0); expectedIds.add(1); }",
        "C": "public Set<Integer> getPlayerIds() { // TODO return this.playerId; }",
        "label": "P"
    },
    "17": {
        "dataset": "COMP 3021",
        "project": "kcwongbn",
        "bug_id": "17",
        "T": "void testMapWithoutPlayer() { final var invalidMap = \"\"\" 233 ### #.# ### \"\"\"; } // @Tag(TestKind.HIDDEN) // @Test // void testUnmatchedPlayersAndBoxes() { // final var invalidMap = \"\"\" // 233 // ###### // #A..@# // #...@# // #a.b@# // #.a.@# // #..a.# // ###### // \"\"\"; // assertThrowsExactly(IllegalArgumentException.class, () -> TestHelper.parseGameMap(invalidMap)); // }",
        "C": "public GameState(@NotNull GameMap map) { // TODO this.map = map; this.initialAllPlayerPosition = this.getCurrentPlayerPosition(this.map.playerPositionMap); this.initialGameBoard = this.getCurrentGameBoard(this.map.gameBoardMap); this.map.undoLimit = this.getUndoQuota().get(); }",
        "label": "P"
    },
    "18": {
        "dataset": "COMP 3021",
        "project": "kcwongbn",
        "bug_id": "18",
        "T": "void testManyPlayersMap() { final var manyPlayersMap = \"\"\" 233 ###### #A.P@@# #vCB@@# #.cpD@# #Ga.d@# #g.bV@# ###### \"\"\"; final var gameMap = TestHelper.parseGameMap(manyPlayersMap); final var playerIds = gameMap.getPlayerIds(); final var expectedIds = new HashSet<>(Arrays.asList( 0, 'P' - 'A', 'C' - 'A', 'B' - 'A', 'D' - 'A', 'G' - 'A', 'V' - 'A' )); }",
        "C": "public Set<Integer> getPlayerIds() { // TODO return this.playerId; }",
        "label": "P"
    },
    "19": {
        "dataset": "COMP 3021",
        "project": "kcwongbn",
        "bug_id": "19",
        "T": "void testHeightForNonRectangularMap() { final var gameMap = TestHelper.parseGameMap(nonRectangularMap); }",
        "C": "",
        "label": "P"
    },
    "20": {
        "dataset": "COMP 3021",
        "project": "kcwongbn",
        "bug_id": "20",
        "T": "void testDuplicatedPlayers() { final var invalidMap = \"\"\" 233 ###### #A..@# #..A@# #....# #.a..# #..b.# ###### \"\"\"; }",
        "C": "",
        "label": "P"
    },
    "21": {
        "dataset": "COMP 3021",
        "project": "kcwongbn",
        "bug_id": "21",
        "T": "void testParseMapWithoutUndoLimit() { final var invalidMap = String.join(\"\\n\", rectangularMap.lines().skip(1).toList()); }",
        "C": "",
        "label": "P"
    },
    "22": {
        "dataset": "COMP 3021",
        "project": "kcwongbn",
        "bug_id": "22",
        "T": "void testInsufficientDestinations() { final var invalidMap = \"\"\" 233 ###### #A..@# #...@# #a...# #.a..# #..a.# ###### \"\"\"; }",
        "C": "",
        "label": "P"
    },
    "23": {
        "dataset": "COMP 3021",
        "project": "kcwongbn",
        "bug_id": "23",
        "T": "void testSuperLargeMap() { try { new GameMap(Integer.MAX_VALUE, Integer.MAX_VALUE, Collections.emptySet(), 0); } catch (OutOfMemoryError e) { throw new RuntimeException(e); } }); }",
        "C": "public GameMap(int maxWidth, int maxHeight, Set<Position> destinations, int undoLimit) { this.maxWidth = maxWidth; this.maxHeight = maxHeight; this.destinations = destinations; this.undoLimit = undoLimit; } /** * Parses the map from a string representation. * The first line is undo limit. * Starting from the second line, the game map is represented as follows, * <li># represents a {@link Wall}</li> * <li>@ represents a box destination.</li> * <li>Any upper-case letter represents a {@link Player}.</li> * <li> * Any lower-case letter represents a {@link Box} that is only movable by the player with the corresponding upper-case letter. * For instance, box \"a\" can only be moved by player \"A\" and not movable by player \"B\". * </li> * <li>. represents an {@link Empty} position in the map, meaning there is no player or box currently at this position.</li> * <p> * Notes: * <li> * There can be at most 26 players. * All implementations of classes in the hk.ust.comp3021.game package should support up to 26 players. * </li> * <li> * For simplicity, we assume the given map is bounded with a closed boundary. * There is no need to check this point. * </li> * <li> * Example maps can be found in \"src/main/resources\". * </li> * * @param mapText The string representation. * @return The parsed GameMap object. * @throws IllegalArgumentException if undo limit is negative but not -1. * @throws IllegalArgumentException if there are multiple same upper-case letters, i.e., one player can only exist at one position. * @throws IllegalArgumentException if there are no players in the map. * @throws IllegalArgumentException if the number of boxes is not equal to the number of box destinations. * @throws IllegalArgumentException if there are boxes whose {@link Box#getPlayerId()} public GameState(@NotNull GameMap map) { // TODO this.map = map; this.initialAllPlayerPosition = this.getCurrentPlayerPosition(this.map.playerPositionMap); this.initialGameBoard = this.getCurrentGameBoard(this.map.gameBoardMap); this.map.undoLimit = this.getUndoQuota().get(); }",
        "label": "P"
    },
    "24": {
        "dataset": "COMP 3021",
        "project": "kcwongbn",
        "bug_id": "24",
        "T": "void testInvalidUndoLimit() { final var invalidMap = \"\"\" -233 ###### #A..@# #...@# #a.b@# #.a.@# #..a.# ###### \"\"\"; }",
        "C": "",
        "label": "P"
    },
    "25": {
        "dataset": "COMP 3021",
        "project": "kcwongbn",
        "bug_id": "25",
        "T": "void testEmptyMap() { final var invalidMap = \"\"; }",
        "C": "",
        "label": "P"
    },
    "26": {
        "dataset": "COMP 3021",
        "project": "kcwongbn",
        "bug_id": "26",
        "T": "void testMove(String input, String name, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); } private InputStream fixValueStream(String content) { final var bytes = content.getBytes(StandardCharsets.UTF_8); return new ByteArrayInputStream(bytes); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine().toLowerCase(); switch (inputLine) { case \"exit\": { return new Exit(0) ; } case \"u\": { return new Undo(0); } case \"w\": { return new Move.Up(0); } case \"a\": { return new Move.Left(0); } case \"s\": { return new Move.Down(0); } case \"d\": { return new Move.Right(0); } case \"h\": { return new Move.Left(1); } case \"j\": { return new Move.Down(1); } case \"k\": { return new Move.Up(1); } case \"l\": { return new Move.Right(1); } default: { return new InvalidInput(0, \"Invalid Input\"); } } // TODO }",
        "label": "P"
    },
    "27": {
        "dataset": "COMP 3021",
        "project": "kcwongbn",
        "bug_id": "27",
        "T": "void testMove(String input, String name, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); } private InputStream fixValueStream(String content) { final var bytes = content.getBytes(StandardCharsets.UTF_8); return new ByteArrayInputStream(bytes); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine().toLowerCase(); switch (inputLine) { case \"exit\": { return new Exit(0) ; } case \"u\": { return new Undo(0); } case \"w\": { return new Move.Up(0); } case \"a\": { return new Move.Left(0); } case \"s\": { return new Move.Down(0); } case \"d\": { return new Move.Right(0); } case \"h\": { return new Move.Left(1); } case \"j\": { return new Move.Down(1); } case \"k\": { return new Move.Up(1); } case \"l\": { return new Move.Right(1); } default: { return new InvalidInput(0, \"Invalid Input\"); } } // TODO }",
        "label": "P"
    },
    "28": {
        "dataset": "COMP 3021",
        "project": "kcwongbn",
        "bug_id": "28",
        "T": "void testMove(String input, String name, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); } private InputStream fixValueStream(String content) { final var bytes = content.getBytes(StandardCharsets.UTF_8); return new ByteArrayInputStream(bytes); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine().toLowerCase(); switch (inputLine) { case \"exit\": { return new Exit(0) ; } case \"u\": { return new Undo(0); } case \"w\": { return new Move.Up(0); } case \"a\": { return new Move.Left(0); } case \"s\": { return new Move.Down(0); } case \"d\": { return new Move.Right(0); } case \"h\": { return new Move.Left(1); } case \"j\": { return new Move.Down(1); } case \"k\": { return new Move.Up(1); } case \"l\": { return new Move.Right(1); } default: { return new InvalidInput(0, \"Invalid Input\"); } } // TODO }",
        "label": "P"
    },
    "29": {
        "dataset": "COMP 3021",
        "project": "kcwongbn",
        "bug_id": "29",
        "T": "void testMove(String input, String name, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); } private InputStream fixValueStream(String content) { final var bytes = content.getBytes(StandardCharsets.UTF_8); return new ByteArrayInputStream(bytes); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine().toLowerCase(); switch (inputLine) { case \"exit\": { return new Exit(0) ; } case \"u\": { return new Undo(0); } case \"w\": { return new Move.Up(0); } case \"a\": { return new Move.Left(0); } case \"s\": { return new Move.Down(0); } case \"d\": { return new Move.Right(0); } case \"h\": { return new Move.Left(1); } case \"j\": { return new Move.Down(1); } case \"k\": { return new Move.Up(1); } case \"l\": { return new Move.Right(1); } default: { return new InvalidInput(0, \"Invalid Input\"); } } // TODO }",
        "label": "P"
    },
    "30": {
        "dataset": "COMP 3021",
        "project": "kcwongbn",
        "bug_id": "30",
        "T": "void testMove(String input, String name, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); } private InputStream fixValueStream(String content) { final var bytes = content.getBytes(StandardCharsets.UTF_8); return new ByteArrayInputStream(bytes); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine().toLowerCase(); switch (inputLine) { case \"exit\": { return new Exit(0) ; } case \"u\": { return new Undo(0); } case \"w\": { return new Move.Up(0); } case \"a\": { return new Move.Left(0); } case \"s\": { return new Move.Down(0); } case \"d\": { return new Move.Right(0); } case \"h\": { return new Move.Left(1); } case \"j\": { return new Move.Down(1); } case \"k\": { return new Move.Up(1); } case \"l\": { return new Move.Right(1); } default: { return new InvalidInput(0, \"Invalid Input\"); } } // TODO }",
        "label": "P"
    },
    "31": {
        "dataset": "COMP 3021",
        "project": "kcwongbn",
        "bug_id": "31",
        "T": "void testMove(String input, String name, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); } private InputStream fixValueStream(String content) { final var bytes = content.getBytes(StandardCharsets.UTF_8); return new ByteArrayInputStream(bytes); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine().toLowerCase(); switch (inputLine) { case \"exit\": { return new Exit(0) ; } case \"u\": { return new Undo(0); } case \"w\": { return new Move.Up(0); } case \"a\": { return new Move.Left(0); } case \"s\": { return new Move.Down(0); } case \"d\": { return new Move.Right(0); } case \"h\": { return new Move.Left(1); } case \"j\": { return new Move.Down(1); } case \"k\": { return new Move.Up(1); } case \"l\": { return new Move.Right(1); } default: { return new InvalidInput(0, \"Invalid Input\"); } } // TODO }",
        "label": "P"
    },
    "32": {
        "dataset": "COMP 3021",
        "project": "kcwongbn",
        "bug_id": "32",
        "T": "void testMove(String input, String name, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); } private InputStream fixValueStream(String content) { final var bytes = content.getBytes(StandardCharsets.UTF_8); return new ByteArrayInputStream(bytes); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine().toLowerCase(); switch (inputLine) { case \"exit\": { return new Exit(0) ; } case \"u\": { return new Undo(0); } case \"w\": { return new Move.Up(0); } case \"a\": { return new Move.Left(0); } case \"s\": { return new Move.Down(0); } case \"d\": { return new Move.Right(0); } case \"h\": { return new Move.Left(1); } case \"j\": { return new Move.Down(1); } case \"k\": { return new Move.Up(1); } case \"l\": { return new Move.Right(1); } default: { return new InvalidInput(0, \"Invalid Input\"); } } // TODO }",
        "label": "P"
    },
    "33": {
        "dataset": "COMP 3021",
        "project": "kcwongbn",
        "bug_id": "33",
        "T": "void testMove(String input, String name, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); } private InputStream fixValueStream(String content) { final var bytes = content.getBytes(StandardCharsets.UTF_8); return new ByteArrayInputStream(bytes); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine().toLowerCase(); switch (inputLine) { case \"exit\": { return new Exit(0) ; } case \"u\": { return new Undo(0); } case \"w\": { return new Move.Up(0); } case \"a\": { return new Move.Left(0); } case \"s\": { return new Move.Down(0); } case \"d\": { return new Move.Right(0); } case \"h\": { return new Move.Left(1); } case \"j\": { return new Move.Down(1); } case \"k\": { return new Move.Up(1); } case \"l\": { return new Move.Right(1); } default: { return new InvalidInput(0, \"Invalid Input\"); } } // TODO }",
        "label": "P"
    },
    "34": {
        "dataset": "COMP 3021",
        "project": "kcwongbn",
        "bug_id": "34",
        "T": "void testUndo(String input, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine().toLowerCase(); switch (inputLine) { case \"exit\": { return new Exit(0) ; } case \"u\": { return new Undo(0); } case \"w\": { return new Move.Up(0); } case \"a\": { return new Move.Left(0); } case \"s\": { return new Move.Down(0); } case \"d\": { return new Move.Right(0); } case \"h\": { return new Move.Left(1); } case \"j\": { return new Move.Down(1); } case \"k\": { return new Move.Up(1); } case \"l\": { return new Move.Right(1); } default: { return new InvalidInput(0, \"Invalid Input\"); } } // TODO }",
        "label": "P"
    },
    "35": {
        "dataset": "COMP 3021",
        "project": "kcwongbn",
        "bug_id": "35",
        "T": "void testInvalidInput() { final var inputStream = fixValueStream(\"blah blah\"); final var inputEngine = new TerminalInputEngine(inputStream); final var action = inputEngine.fetchAction(); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine().toLowerCase(); switch (inputLine) { case \"exit\": { return new Exit(0) ; } case \"u\": { return new Undo(0); } case \"w\": { return new Move.Up(0); } case \"a\": { return new Move.Left(0); } case \"s\": { return new Move.Down(0); } case \"d\": { return new Move.Right(0); } case \"h\": { return new Move.Left(1); } case \"j\": { return new Move.Down(1); } case \"k\": { return new Move.Up(1); } case \"l\": { return new Move.Right(1); } default: { return new InvalidInput(0, \"Invalid Input\"); } } // TODO }",
        "label": "P"
    },
    "36": {
        "dataset": "COMP 3021",
        "project": "kcwongbn",
        "bug_id": "36",
        "T": "void testUndoWhenThereIsNoMove() { final var gameState = new GameState(TestHelper.parseGameMap(\"\"\" 233 ###### #A.a@# #..a@# ###### \"\"\" )); gameState.undo(); } private Entity generateEntity(int key) { return switch (key % 4) { case 0 -> new Box(0); case 1 -> new Empty(); case 2 -> new Player(0); case 3 -> new Wall(); default -> throw new ShouldNotReachException(); }; }",
        "C": "public GameState(@NotNull GameMap map) { // TODO this.map = map; this.initialAllPlayerPosition = this.getCurrentPlayerPosition(this.map.playerPositionMap); this.initialGameBoard = this.getCurrentGameBoard(this.map.gameBoardMap); this.map.undoLimit = this.getUndoQuota().get(); } public void undo() { // TODO if (this.map.undoLimit >0 || this.map.undoLimit == -1) { if (this.checkPoint.size() == 0) { this.map.playerPositionMap = this.getCurrentPlayerPosition(this.initialAllPlayerPosition); this.map.gameBoardMap = this.getCurrentGameBoard(this.initialGameBoard); } else { if (this.map.undoLimit != -1) { this.map.undoLimit -=1; } this.map.gameBoardMap = this.getCurrentGameBoard(this.checkPoint.get(checkPoint.size()-1)); this.map.playerPositionMap = this.getCurrentPlayerPosition(this.playerCheckPoint.get(this.playerCheckPoint.size()-1)); this.checkPoint.remove(checkPoint.size()-1); this.playerCheckPoint.remove(this.playerCheckPoint.size()-1); } } } /** * Get the maximum width of the game map. * This should be the same as that in {@link GameMap} public GameState(@NotNull GameMap map) { // TODO this.map = map; this.initialAllPlayerPosition = this.getCurrentPlayerPosition(this.map.playerPositionMap); this.initialGameBoard = this.getCurrentGameBoard(this.map.gameBoardMap); this.map.undoLimit = this.getUndoQuota().get(); } public Box(int playerId) { this.playerId = playerId; } public Player(int id) { this.id = id; } public ShouldNotReachException() { super(\"This branch should not be reached.\"); }",
        "label": "P"
    },
    "37": {
        "dataset": "COMP 3021",
        "project": "kcwongbn",
        "bug_id": "37",
        "T": "void testGetUndoUnlimited() { final var gameState = new GameState(TestHelper.parseGameMap(\"\"\" -1 ###### #.Aa@# #..a@# ###### \"\"\" )); }",
        "C": "public GameState(@NotNull GameMap map) { // TODO this.map = map; this.initialAllPlayerPosition = this.getCurrentPlayerPosition(this.map.playerPositionMap); this.initialGameBoard = this.getCurrentGameBoard(this.map.gameBoardMap); this.map.undoLimit = this.getUndoQuota().get(); }",
        "label": "F"
    },
    "38": {
        "dataset": "COMP 3021",
        "project": "kcwongbn",
        "bug_id": "38",
        "T": "void testMapCopying() { final var maxWidth = 2333; final var maxHeight = 2333; final var random = new Random(); final var randomEntities = Stream.generate(() -> Position.of(random.nextInt(maxWidth), random.nextInt(maxHeight))) .distinct() .limit(100) .collect(Collectors.toMap(Function.identity(), it -> generateEntity(it.x()))); final var firstPos = randomEntities.keySet().stream().findFirst(); final var gameMap = new GameMap(maxWidth, maxHeight, Collections.singleton(firstPos.get()), 233); randomEntities.forEach(gameMap::putEntity); final var gameState = new GameState(gameMap); final var randomPosition = randomEntities.keySet().stream().findAny(); gameMap.putEntity(randomPosition.get(), new Empty()); randomEntities.forEach((p, e) -> assertEquals(e, gameState.getEntity(p))); }",
        "C": "public static @NotNull Position of(int x, int y) { return new Position(x, y); } public GameMap(int maxWidth, int maxHeight, Set<Position> destinations, int undoLimit) { this.maxWidth = maxWidth; this.maxHeight = maxHeight; this.destinations = destinations; this.undoLimit = undoLimit; } /** * Parses the map from a string representation. * The first line is undo limit. * Starting from the second line, the game map is represented as follows, * <li># represents a {@link Wall}</li> * <li>@ represents a box destination.</li> * <li>Any upper-case letter represents a {@link Player}.</li> * <li> * Any lower-case letter represents a {@link Box} that is only movable by the player with the corresponding upper-case letter. * For instance, box \"a\" can only be moved by player \"A\" and not movable by player \"B\". * </li> * <li>. represents an {@link Empty} position in the map, meaning there is no player or box currently at this position.</li> * <p> * Notes: * <li> * There can be at most 26 players. * All implementations of classes in the hk.ust.comp3021.game package should support up to 26 players. * </li> * <li> * For simplicity, we assume the given map is bounded with a closed boundary. * There is no need to check this point. * </li> * <li> * Example maps can be found in \"src/main/resources\". * </li> * * @param mapText The string representation. * @return The parsed GameMap object. * @throws IllegalArgumentException if undo limit is negative but not -1. * @throws IllegalArgumentException if there are multiple same upper-case letters, i.e., one player can only exist at one position. * @throws IllegalArgumentException if there are no players in the map. * @throws IllegalArgumentException if the number of boxes is not equal to the number of box destinations. * @throws IllegalArgumentException if there are boxes whose {@link Box#getPlayerId()} public GameState(@NotNull GameMap map) { // TODO this.map = map; this.initialAllPlayerPosition = this.getCurrentPlayerPosition(this.map.playerPositionMap); this.initialGameBoard = this.getCurrentGameBoard(this.map.gameBoardMap); this.map.undoLimit = this.getUndoQuota().get(); } public void putEntity(Position position, Entity entity) { // TODO this.gameBoardMap.replace(position,entity); } public @Nullable Entity getEntity(@NotNull Position position) { // TODO return this.map.getEntity(position); } /** * Get all box destination positions as a set in the game map. * This should be the same as that in {@link GameMap}",
        "label": "F"
    },
    "39": {
        "dataset": "COMP 3021",
        "project": "kcwongbn",
        "bug_id": "39",
        "T": "void testUndoWhenThereIsMoveButNoCheckpoint() { final var gameState = new GameState(TestHelper.parseGameMap(\"\"\" 233 ###### #A.a@# #..a@# ###### \"\"\" )); gameState.move(Position.of(1, 1), Position.of(2, 1)); gameState.undo(); }",
        "C": "public GameState(@NotNull GameMap map) { // TODO this.map = map; this.initialAllPlayerPosition = this.getCurrentPlayerPosition(this.map.playerPositionMap); this.initialGameBoard = this.getCurrentGameBoard(this.map.gameBoardMap); this.map.undoLimit = this.getUndoQuota().get(); } public void move(Position from, Position to) { // TODO Position newPosition = new Position(to.x(),to.y()); Position currentPosition = new Position(from.x(),from.y()); if (this.map.gameBoardMap.get(currentPosition) instanceof Box) { currentGameBoard = this.getCurrentGameBoard(this.map.gameBoardMap); currentPlayerPosition = this.getCurrentPlayerPosition(this.map.playerPositionMap); } else { //id:position this.map.playerPositionMap.replace(((Player) this.map.gameBoardMap.get(currentPosition)).getId(),newPosition); //all position of all player } this.map.putEntity(newPosition,this.map.getEntity(currentPosition)); this.map.putEntity(currentPosition,new Empty()); } /** * Record a checkpoint of the game state, including: * <li>All current positions of entities in the game map.</li> * <li>Current undo quota</li> * <p> * Checkpoint is used in {@link GameState#undo()} public static @NotNull Position of(int x, int y) { return new Position(x, y); } public void undo() { // TODO if (this.map.undoLimit >0 || this.map.undoLimit == -1) { if (this.checkPoint.size() == 0) { this.map.playerPositionMap = this.getCurrentPlayerPosition(this.initialAllPlayerPosition); this.map.gameBoardMap = this.getCurrentGameBoard(this.initialGameBoard); } else { if (this.map.undoLimit != -1) { this.map.undoLimit -=1; } this.map.gameBoardMap = this.getCurrentGameBoard(this.checkPoint.get(checkPoint.size()-1)); this.map.playerPositionMap = this.getCurrentPlayerPosition(this.playerCheckPoint.get(this.playerCheckPoint.size()-1)); this.checkPoint.remove(checkPoint.size()-1); this.playerCheckPoint.remove(this.playerCheckPoint.size()-1); } } } /** * Get the maximum width of the game map. * This should be the same as that in {@link GameMap}",
        "label": "P"
    },
    "40": {
        "dataset": "COMP 3021",
        "project": "kcwongbn",
        "bug_id": "40",
        "T": "void testGameExit() { final var gameState = mock(GameState.class); final var inputEngine = mock(TerminalInputEngine.class); final var renderingEngine = mock(TerminalRenderingEngine.class); when(gameState.isWin()).thenReturn(false, false, false); when(inputEngine.fetchAction()) .thenReturn(new InvalidInput(0, \"\"), new InvalidInput(0, \"\"), new Exit(0)); final var game = new TerminalSokobanGame(gameState, inputEngine, renderingEngine); game.run(); verify(renderingEngine, atLeastOnce()).message(any()); }",
        "C": "public InvalidInput(int initiator, @NotNull String message) { super(initiator); this.message = message; } public Exit(int initiator) { super(initiator); } public TerminalSokobanGame(GameState gameState, TerminalInputEngine inputEngine, TerminalRenderingEngine renderingEngine) { super(gameState); this.inputEngine = inputEngine; this.renderingEngine = renderingEngine; // TODO // Check the number of players if (gameState.getAllPlayerPositions().size()>2) { throw new NotImplementedException(); } } public void run() { // TODO this.renderingEngine.message(\"Sokoban game is ready.\"); boolean exit = false; while (!(this.shouldStop())) { this.renderingEngine.render(this.state); this.renderingEngine.message(\"\"); String undolimit = this.state.getUndoQuota().toString(); undolimit = undolimit.substring(9,undolimit.length()-1); this.renderingEngine.message(\"Undo Quota: \" + undolimit); this.renderingEngine.message(\">>>\"); Action tempAction = this.inputEngine.fetchAction(); ActionResult tempActionResult = this.processAction(tempAction); if (tempActionResult instanceof ActionResult.Failed) { this.renderingEngine.message(((ActionResult.Failed) tempActionResult).getReason()); } if (tempAction instanceof Exit) { exit = true; } } this.renderingEngine.render(this.state); this.renderingEngine.message(\"\"); this.renderingEngine.message(\"Game exits.\"); if (!exit) { this.renderingEngine.message(\"You win.\"); } }",
        "label": "P"
    },
    "41": {
        "dataset": "COMP 3021",
        "project": "kcwongbn",
        "bug_id": "41",
        "T": "void testGameWin() { final var gameState = mock(GameState.class); final var inputEngine = mock(TerminalInputEngine.class); final var renderingEngine = mock(TerminalRenderingEngine.class); when(gameState.isWin()).thenReturn(false, false, false, true); when(inputEngine.fetchAction()) .thenReturn(new InvalidInput(0, \"\")); final var game = new TerminalSokobanGame(gameState, inputEngine, renderingEngine); game.run(); verify(gameState, atLeastOnce()).isWin(); verify(renderingEngine, atLeastOnce()).message(any()); }",
        "C": "public InvalidInput(int initiator, @NotNull String message) { super(initiator); this.message = message; } public TerminalSokobanGame(GameState gameState, TerminalInputEngine inputEngine, TerminalRenderingEngine renderingEngine) { super(gameState); this.inputEngine = inputEngine; this.renderingEngine = renderingEngine; // TODO // Check the number of players if (gameState.getAllPlayerPositions().size()>2) { throw new NotImplementedException(); } } public void run() { // TODO this.renderingEngine.message(\"Sokoban game is ready.\"); boolean exit = false; while (!(this.shouldStop())) { this.renderingEngine.render(this.state); this.renderingEngine.message(\"\"); String undolimit = this.state.getUndoQuota().toString(); undolimit = undolimit.substring(9,undolimit.length()-1); this.renderingEngine.message(\"Undo Quota: \" + undolimit); this.renderingEngine.message(\">>>\"); Action tempAction = this.inputEngine.fetchAction(); ActionResult tempActionResult = this.processAction(tempAction); if (tempActionResult instanceof ActionResult.Failed) { this.renderingEngine.message(((ActionResult.Failed) tempActionResult).getReason()); } if (tempAction instanceof Exit) { exit = true; } } this.renderingEngine.render(this.state); this.renderingEngine.message(\"\"); this.renderingEngine.message(\"Game exits.\"); if (!exit) { this.renderingEngine.message(\"You win.\"); } }",
        "label": "P"
    },
    "42": {
        "dataset": "COMP 3021",
        "project": "kcwongbn",
        "bug_id": "42",
        "T": "void testMoreThanTwoPlayers() { final var gameState = mock(GameState.class); final var inputEngine = mock(TerminalInputEngine.class); final var renderingEngine = mock(TerminalRenderingEngine.class); when(gameState.getAllPlayerPositions()).thenReturn(new HashSet<>(Arrays.asList(Position.of(1, 1), Position.of(1, 2), Position.of(1, 3)))); }",
        "C": "public static @NotNull Position of(int x, int y) { return new Position(x, y); }",
        "label": "F"
    },
    "43": {
        "dataset": "COMP 3021",
        "project": "cyngaz",
        "bug_id": "0",
        "T": "void moveUp() { Position.of(233, 232), new Move.Up(-1).nextPosition(pos) ); }",
        "C": "public static @NotNull Position of(int x, int y) { return new Position(x, y); } public Up(int initiator) { super(initiator); }",
        "label": "P"
    },
    "44": {
        "dataset": "COMP 3021",
        "project": "cyngaz",
        "bug_id": "1",
        "T": "void moveDown() { Position.of(233, 234), new Move.Down(-1).nextPosition(pos) ); }",
        "C": "public static @NotNull Position of(int x, int y) { return new Position(x, y); } public Down(int initiator) { super(initiator); }",
        "label": "P"
    },
    "45": {
        "dataset": "COMP 3021",
        "project": "cyngaz",
        "bug_id": "2",
        "T": "void moveRight() { Position.of(234, 233), new Move.Right(-1).nextPosition(pos) ); }",
        "C": "public static @NotNull Position of(int x, int y) { return new Position(x, y); } public Right(int initiator) { super(initiator); }",
        "label": "P"
    },
    "46": {
        "dataset": "COMP 3021",
        "project": "cyngaz",
        "bug_id": "3",
        "T": "void testExceedingUndoQuota() { final var gameState = mock(GameState.class); when(gameState.getPlayerPositionById(anyInt())).thenReturn(Position.of(0, 0)); when(gameState.getUndoQuota()).thenReturn(Optional.of(0)); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Undo(0)); }",
        "C": "public Undo(int initiator) { super(initiator); }",
        "label": "P"
    },
    "47": {
        "dataset": "COMP 3021",
        "project": "cyngaz",
        "bug_id": "4",
        "T": "void testExit() { final var gameState = mock(GameState.class); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Exit(0)); }",
        "C": "public Exit(int initiator) { super(initiator); }",
        "label": "P"
    },
    "48": {
        "dataset": "COMP 3021",
        "project": "cyngaz",
        "bug_id": "5",
        "T": "void testUndoUnlimited() { final var gameState = mock(GameState.class); when(gameState.getPlayerPositionById(anyInt())).thenReturn(Position.of(0, 0)); when(gameState.getUndoQuota()).thenReturn(Optional.empty()); final var game = new SokobanGameForTesting(gameState); for (int i = 0; i < 10000; i++) { final var result = game.feedActionForProcessing(new Undo(0)); } verify(gameState, times(10000)).undo(); }",
        "C": "public TerminalRenderingEngine(PrintStream outputSteam) { this.outputSteam = outputSteam; } public Undo(int initiator) { super(initiator); }",
        "label": "P"
    },
    "49": {
        "dataset": "COMP 3021",
        "project": "cyngaz",
        "bug_id": "6",
        "T": "void testPushOtherPlayerBox() { String mapText = \"\"\" 233 ###### #AB.@# #b.a.# #@...# ###### \"\"\"; final var testMap = TestHelper.parseGameMap(mapText); final var gameState = spy(new GameState(testMap)); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Move.Down(0)); verify(gameState, never()).move(any(), any()); }",
        "C": "public GameState(@NotNull GameMap map) { // TODO this.map = map; undoQuota = map.getUndoLimit(); mapEntity = new HashMap<>(map.mapEntity()); undoQuota = map.getUndoLimit(); moveHistory.add(new HashMap<>(mapEntity)); } public Down(int initiator) { super(initiator); }",
        "label": "P"
    },
    "50": {
        "dataset": "COMP 3021",
        "project": "cyngaz",
        "bug_id": "7",
        "T": "void testMoveNonExistingPlayer() { String mapText = \"\"\" 233 ###### #A..@# #a...# ##...# ###### \"\"\"; final var testMap = TestHelper.parseGameMap(mapText); final var gameState = spy(new GameState(testMap)); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Move.Down(23)); }",
        "C": "public GameState(@NotNull GameMap map) { // TODO this.map = map; undoQuota = map.getUndoLimit(); mapEntity = new HashMap<>(map.mapEntity()); undoQuota = map.getUndoLimit(); moveHistory.add(new HashMap<>(mapEntity)); } public Down(int initiator) { super(initiator); }",
        "label": "P"
    },
    "51": {
        "dataset": "COMP 3021",
        "project": "cyngaz",
        "bug_id": "8",
        "T": "void testCheckpointWhenNeed() { final var gameState = spy(new GameState(TestHelper.parseGameMap(\"\"\" 233 ###### #.Aa@# #..a@# ###### \"\"\" ))); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Move.Right(0)); verify(gameState, times(1)).checkpoint(); }",
        "C": "public GameState(@NotNull GameMap map) { // TODO this.map = map; undoQuota = map.getUndoLimit(); mapEntity = new HashMap<>(map.mapEntity()); undoQuota = map.getUndoLimit(); moveHistory.add(new HashMap<>(mapEntity)); } public Right(int initiator) { super(initiator); }",
        "label": "P"
    },
    "52": {
        "dataset": "COMP 3021",
        "project": "cyngaz",
        "bug_id": "9",
        "T": "void testPushBoxAgainstWall() { String mapText = \"\"\" 233 ###### #A..@# #a...# ##...# ###### \"\"\"; final var testMap = TestHelper.parseGameMap(mapText); final var gameState = spy(new GameState(testMap)); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Move.Down(0)); verify(gameState, never()).move(any(), any()); }",
        "C": "public GameState(@NotNull GameMap map) { // TODO this.map = map; undoQuota = map.getUndoLimit(); mapEntity = new HashMap<>(map.mapEntity()); undoQuota = map.getUndoLimit(); moveHistory.add(new HashMap<>(mapEntity)); } public Down(int initiator) { super(initiator); }",
        "label": "P"
    },
    "53": {
        "dataset": "COMP 3021",
        "project": "cyngaz",
        "bug_id": "10",
        "T": "void testCheckpointWhenNotNeed() { final var gameState = spy(new GameState(TestHelper.parseGameMap(\"\"\" 233 ###### #A.a@# #..a@# ###### \"\"\" ))); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Move.Right(0)); verify(gameState, never()).checkpoint(); } private static class SokobanGameForTesting extends AbstractSokobanGame { protected SokobanGameForTesting(GameState gameState) { super(gameState); } @Override public void run() { } public ActionResult feedActionForProcessing(Action action) { return processAction(action); } }",
        "C": "public GameState(@NotNull GameMap map) { // TODO this.map = map; undoQuota = map.getUndoLimit(); mapEntity = new HashMap<>(map.mapEntity()); undoQuota = map.getUndoLimit(); moveHistory.add(new HashMap<>(mapEntity)); } public Right(int initiator) { super(initiator); } public void run() { // TODO renderingEngine.message(GAME_READY_MESSAGE); renderingEngine.render(state); while (!shouldStop()) { String quotaText; if (state.getUndoQuota().isEmpty()) { quotaText = UNDO_QUOTA_UNLIMITED; } else { quotaText = String.valueOf(state.getUndoQuota().get()); } String formatedQuotaText = String.format(UNDO_QUOTA_TEMPLATE, quotaText); renderingEngine.message(formatedQuotaText); renderingEngine.message(\"Input(Player1:W/A/S/D, Player2:H/J/K/L):\"); Action action = inputEngine.fetchAction(); ActionResult result = processAction(action); if(result instanceof ActionResult.Failed){ renderingEngine.message(((ActionResult.Failed) result).getReason()); } renderingEngine.render(state); } renderingEngine.message(GAME_EXIT_MESSAGE); if (state.isWin()) { renderingEngine.message(WIN_MESSAGE); } } protected ActionResult processAction(@NotNull Action action) { // TODO return switch (action){ case InvalidInput ignored->new ActionResult.Failed(action, INVALID_INPUT_MESSAGE); case Move ignored->{ if (state.getPlayerPositionById(action.getInitiator()) == null) { yield new ActionResult.Failed(action, PLAYER_NOT_FOUND); } Position playerOriginalPosition = state.getPlayerPositionById(action.getInitiator()); Position playerDestinationPosition = ((Move) action).nextPosition(playerOriginalPosition); Entity originalEntity = state.getEntity(playerOriginalPosition); Entity nextEntity = state.getEntity(playerDestinationPosition); if (nextEntity instanceof Box) { if (((Box) nextEntity).getPlayerId() != ((Player) originalEntity).getId()) { yield new ActionResult.Failed(action, \"You cannot move other players' boxes\"); } Position positionBehindTheBox = ((Move) action).nextPosition(playerDestinationPosition); Entity entityBehindTheBox = state.getEntity(positionBehindTheBox); if (entityBehindTheBox instanceof Box || entityBehindTheBox instanceof Player || entityBehindTheBox instanceof Wall) { yield new ActionResult.Failed(action, \"Failed to push box\"); } else { state.move(playerDestinationPosition, positionBehindTheBox); state.move(playerOriginalPosition, playerDestinationPosition); state.checkpoint(); yield new ActionResult.Success(action); } } if (nextEntity instanceof Player) { yield new ActionResult.Failed(action, \"You hit another player\"); } if (nextEntity instanceof Wall) { yield new ActionResult.Failed(action, \"You hit a wall\"); } state.move(playerOriginalPosition, playerDestinationPosition); yield new ActionResult.Success(action); } case Undo ignored->{ if (state.getUndoQuota().isEmpty() || state.getUndoQuota().get() > 0) { state.undo(); yield new ActionResult.Success(action); } else { yield new ActionResult.Failed(action, UNDO_QUOTA_RUN_OUT); } } case Exit ignored->{ exit = true; yield new ActionResult.Success(action); } default -> throw new ShouldNotReachException(); }; }",
        "label": "P"
    },
    "54": {
        "dataset": "COMP 3021",
        "project": "cyngaz",
        "bug_id": "11",
        "T": "void testHitAnotherPlayer() { String mapText = \"\"\" 233 ###### #A..@# #B...# #ab.@# ###### \"\"\"; final var testMap = TestHelper.parseGameMap(mapText); final var gameState = spy(new GameState(testMap)); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Move.Down(0)); verify(gameState, never()).move(any(), any()); }",
        "C": "public GameState(@NotNull GameMap map) { // TODO this.map = map; undoQuota = map.getUndoLimit(); mapEntity = new HashMap<>(map.mapEntity()); undoQuota = map.getUndoLimit(); moveHistory.add(new HashMap<>(mapEntity)); } public Down(int initiator) { super(initiator); }",
        "label": "P"
    },
    "55": {
        "dataset": "COMP 3021",
        "project": "cyngaz",
        "bug_id": "12",
        "T": "void testUndoWithinQuota() { final var gameState = mock(GameState.class); when(gameState.getPlayerPositionById(anyInt())).thenReturn(Position.of(0, 0)); when(gameState.getUndoQuota()).thenReturn(Optional.of(1)); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Undo(0)); verify(gameState, times(1)).undo(); }",
        "C": "public Undo(int initiator) { super(initiator); }",
        "label": "P"
    },
    "56": {
        "dataset": "COMP 3021",
        "project": "cyngaz",
        "bug_id": "13",
        "T": "void testInvalidInput() { final var game = new SokobanGameForTesting(mock(GameState.class)); final var message = String.valueOf(new Random().nextLong()); final var action = new InvalidInput(-1, message); final var result = game.feedActionForProcessing(action); }",
        "C": "public InvalidInput(int initiator, @NotNull String message) { super(initiator); this.message = message; }",
        "label": "P"
    },
    "57": {
        "dataset": "COMP 3021",
        "project": "cyngaz",
        "bug_id": "14",
        "T": "void testUndoLimitParsing() { final var gameMap = TestHelper.parseGameMap(rectangularMap); }",
        "C": "",
        "label": "P"
    },
    "58": {
        "dataset": "COMP 3021",
        "project": "cyngaz",
        "bug_id": "15",
        "T": "void testWidthForNonRectangularMap() { final var gameMap = TestHelper.parseGameMap(nonRectangularMap); }",
        "C": "",
        "label": "P"
    },
    "59": {
        "dataset": "COMP 3021",
        "project": "cyngaz",
        "bug_id": "16",
        "T": "void testTwoPlayersMap() { final var twoPlayersMap = \"\"\" 233 ###### #A..@# #..B@# #....# #.a..# #..b.# ###### \"\"\"; final var gameMap = TestHelper.parseGameMap(twoPlayersMap); final var playerIds = gameMap.getPlayerIds(); final var expectedIds = new HashSet<Integer>(); expectedIds.add(0); expectedIds.add(1); }",
        "C": "public Set<Integer> getPlayerIds() { // TODO Set<Integer> playerIds = new HashSet<>(); for (Entity entity : mapEntity.values()) { if (entity instanceof Player) { playerIds.add(((Player) entity).getId()); } } return playerIds; }",
        "label": "P"
    },
    "60": {
        "dataset": "COMP 3021",
        "project": "cyngaz",
        "bug_id": "17",
        "T": "void testMapWithoutPlayer() { final var invalidMap = \"\"\" 233 ### #.# ### \"\"\"; } // @Tag(TestKind.HIDDEN) // @Test // void testUnmatchedPlayersAndBoxes() { // final var invalidMap = \"\"\" // 233 // ###### // #A..@# // #...@# // #a.b@# // #.a.@# // #..a.# // ###### // \"\"\"; // assertThrowsExactly(IllegalArgumentException.class, () -> TestHelper.parseGameMap(invalidMap)); // }",
        "C": "public TerminalRenderingEngine(PrintStream outputSteam) { this.outputSteam = outputSteam; }",
        "label": "P"
    },
    "61": {
        "dataset": "COMP 3021",
        "project": "cyngaz",
        "bug_id": "18",
        "T": "void testManyPlayersMap() { final var manyPlayersMap = \"\"\" 233 ###### #A.P@@# #vCB@@# #.cpD@# #Ga.d@# #g.bV@# ###### \"\"\"; final var gameMap = TestHelper.parseGameMap(manyPlayersMap); final var playerIds = gameMap.getPlayerIds(); final var expectedIds = new HashSet<>(Arrays.asList( 0, 'P' - 'A', 'C' - 'A', 'B' - 'A', 'D' - 'A', 'G' - 'A', 'V' - 'A' )); }",
        "C": "public Set<Integer> getPlayerIds() { // TODO Set<Integer> playerIds = new HashSet<>(); for (Entity entity : mapEntity.values()) { if (entity instanceof Player) { playerIds.add(((Player) entity).getId()); } } return playerIds; }",
        "label": "P"
    },
    "62": {
        "dataset": "COMP 3021",
        "project": "cyngaz",
        "bug_id": "19",
        "T": "void testHeightForNonRectangularMap() { final var gameMap = TestHelper.parseGameMap(nonRectangularMap); }",
        "C": "",
        "label": "P"
    },
    "63": {
        "dataset": "COMP 3021",
        "project": "cyngaz",
        "bug_id": "20",
        "T": "void testDuplicatedPlayers() { final var invalidMap = \"\"\" 233 ###### #A..@# #..A@# #....# #.a..# #..b.# ###### \"\"\"; }",
        "C": "",
        "label": "P"
    },
    "64": {
        "dataset": "COMP 3021",
        "project": "cyngaz",
        "bug_id": "21",
        "T": "void testParseMapWithoutUndoLimit() { final var invalidMap = String.join(\"\\n\", rectangularMap.lines().skip(1).toList()); }",
        "C": "",
        "label": "P"
    },
    "65": {
        "dataset": "COMP 3021",
        "project": "cyngaz",
        "bug_id": "22",
        "T": "void testInsufficientDestinations() { final var invalidMap = \"\"\" 233 ###### #A..@# #...@# #a...# #.a..# #..a.# ###### \"\"\"; }",
        "C": "",
        "label": "P"
    },
    "66": {
        "dataset": "COMP 3021",
        "project": "cyngaz",
        "bug_id": "23",
        "T": "void testSuperLargeMap() { try { new GameMap(Integer.MAX_VALUE, Integer.MAX_VALUE, Collections.emptySet(), 0); } catch (OutOfMemoryError e) { throw new RuntimeException(e); } }); }",
        "C": "public GameMap(int maxWidth, int maxHeight, Set<Position> destinations, int undoLimit) { // TODO this.width = maxWidth; this.height = maxHeight; this.destinations = destinations; this.undoLimit = undoLimit; } /** * Parses the map from a string representation. * The first line is undo limit. * Starting from the second line, the game map is represented as follows, * <li># represents a {@link Wall}</li> * <li>@ represents a box destination.</li> * <li>Any upper-case letter represents a {@link Player}.</li> * <li> * Any lower-case letter represents a {@link Box} that is only movable by the player with the corresponding upper-case letter. * For instance, box \"a\" can only be moved by player \"A\" and not movable by player \"B\". * </li> * <li>. represents an {@link Empty} position in the map, meaning there is no player or box currently at this position.</li> * <p> * Notes: * <li> * There can be at most 26 players. * All implementations of classes in the hk.ust.comp3021.game package should support up to 26 players. * </li> * <li> * For simplicity, we assume the given map is bounded with a closed boundary. * There is no need to check this point. * </li> * <li> * Example maps can be found in \"src/main/resources\". * </li> * * @param mapText The string representation. * @return The parsed GameMap object. * @throws IllegalArgumentException if undo limit is negative but not -1. * @throws IllegalArgumentException if there are multiple same upper-case letters, i.e., one player can only exist at one position. * @throws IllegalArgumentException if there are no players in the map. * @throws IllegalArgumentException if the number of boxes is not equal to the number of box destinations. * @throws IllegalArgumentException if there are boxes whose {@link Box#getPlayerId()} public TerminalRenderingEngine(PrintStream outputSteam) { this.outputSteam = outputSteam; }",
        "label": "P"
    },
    "67": {
        "dataset": "COMP 3021",
        "project": "cyngaz",
        "bug_id": "24",
        "T": "void testInvalidUndoLimit() { final var invalidMap = \"\"\" -233 ###### #A..@# #...@# #a.b@# #.a.@# #..a.# ###### \"\"\"; }",
        "C": "",
        "label": "P"
    },
    "68": {
        "dataset": "COMP 3021",
        "project": "cyngaz",
        "bug_id": "25",
        "T": "void testEmptyMap() { final var invalidMap = \"\"; }",
        "C": "",
        "label": "P"
    },
    "69": {
        "dataset": "COMP 3021",
        "project": "cyngaz",
        "bug_id": "26",
        "T": "void testMove(String input, String name, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); } private InputStream fixValueStream(String content) { final var bytes = content.getBytes(StandardCharsets.UTF_8); return new ByteArrayInputStream(bytes); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine(); // TODO int id = -1; int playerOne = 0; int playerTwo = 1; String lowerCaseInput = inputLine.toLowerCase(); return switch (lowerCaseInput) { case \"A\" -> new Move.Left(playerOne); case \"W\" -> new Move.Up(playerOne); case \"S\" -> new Move.Down(playerOne); case \"D\" -> new Move.Right(playerOne); case \"H\" -> new Move.Left(playerTwo); case \"J\" -> new Move.Down(playerTwo); case \"K\" -> new Move.Up(playerTwo); case \"L\" -> new Move.Right(playerTwo); case \"U\" -> new Undo(id); case EXIT_COMMAND_TEXT -> new Exit(id); default -> new InvalidInput(id, INVALID_INPUT_MESSAGE); }; }",
        "label": "F"
    },
    "70": {
        "dataset": "COMP 3021",
        "project": "cyngaz",
        "bug_id": "27",
        "T": "void testMove(String input, String name, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); } private InputStream fixValueStream(String content) { final var bytes = content.getBytes(StandardCharsets.UTF_8); return new ByteArrayInputStream(bytes); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine(); // TODO int id = -1; int playerOne = 0; int playerTwo = 1; String lowerCaseInput = inputLine.toLowerCase(); return switch (lowerCaseInput) { case \"A\" -> new Move.Left(playerOne); case \"W\" -> new Move.Up(playerOne); case \"S\" -> new Move.Down(playerOne); case \"D\" -> new Move.Right(playerOne); case \"H\" -> new Move.Left(playerTwo); case \"J\" -> new Move.Down(playerTwo); case \"K\" -> new Move.Up(playerTwo); case \"L\" -> new Move.Right(playerTwo); case \"U\" -> new Undo(id); case EXIT_COMMAND_TEXT -> new Exit(id); default -> new InvalidInput(id, INVALID_INPUT_MESSAGE); }; }",
        "label": "F"
    },
    "71": {
        "dataset": "COMP 3021",
        "project": "cyngaz",
        "bug_id": "28",
        "T": "void testMove(String input, String name, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); } private InputStream fixValueStream(String content) { final var bytes = content.getBytes(StandardCharsets.UTF_8); return new ByteArrayInputStream(bytes); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine(); // TODO int id = -1; int playerOne = 0; int playerTwo = 1; String lowerCaseInput = inputLine.toLowerCase(); return switch (lowerCaseInput) { case \"A\" -> new Move.Left(playerOne); case \"W\" -> new Move.Up(playerOne); case \"S\" -> new Move.Down(playerOne); case \"D\" -> new Move.Right(playerOne); case \"H\" -> new Move.Left(playerTwo); case \"J\" -> new Move.Down(playerTwo); case \"K\" -> new Move.Up(playerTwo); case \"L\" -> new Move.Right(playerTwo); case \"U\" -> new Undo(id); case EXIT_COMMAND_TEXT -> new Exit(id); default -> new InvalidInput(id, INVALID_INPUT_MESSAGE); }; }",
        "label": "F"
    },
    "72": {
        "dataset": "COMP 3021",
        "project": "cyngaz",
        "bug_id": "29",
        "T": "void testMove(String input, String name, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); } private InputStream fixValueStream(String content) { final var bytes = content.getBytes(StandardCharsets.UTF_8); return new ByteArrayInputStream(bytes); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine(); // TODO int id = -1; int playerOne = 0; int playerTwo = 1; String lowerCaseInput = inputLine.toLowerCase(); return switch (lowerCaseInput) { case \"A\" -> new Move.Left(playerOne); case \"W\" -> new Move.Up(playerOne); case \"S\" -> new Move.Down(playerOne); case \"D\" -> new Move.Right(playerOne); case \"H\" -> new Move.Left(playerTwo); case \"J\" -> new Move.Down(playerTwo); case \"K\" -> new Move.Up(playerTwo); case \"L\" -> new Move.Right(playerTwo); case \"U\" -> new Undo(id); case EXIT_COMMAND_TEXT -> new Exit(id); default -> new InvalidInput(id, INVALID_INPUT_MESSAGE); }; }",
        "label": "F"
    },
    "73": {
        "dataset": "COMP 3021",
        "project": "cyngaz",
        "bug_id": "30",
        "T": "void testMove(String input, String name, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); } private InputStream fixValueStream(String content) { final var bytes = content.getBytes(StandardCharsets.UTF_8); return new ByteArrayInputStream(bytes); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine(); // TODO int id = -1; int playerOne = 0; int playerTwo = 1; String lowerCaseInput = inputLine.toLowerCase(); return switch (lowerCaseInput) { case \"A\" -> new Move.Left(playerOne); case \"W\" -> new Move.Up(playerOne); case \"S\" -> new Move.Down(playerOne); case \"D\" -> new Move.Right(playerOne); case \"H\" -> new Move.Left(playerTwo); case \"J\" -> new Move.Down(playerTwo); case \"K\" -> new Move.Up(playerTwo); case \"L\" -> new Move.Right(playerTwo); case \"U\" -> new Undo(id); case EXIT_COMMAND_TEXT -> new Exit(id); default -> new InvalidInput(id, INVALID_INPUT_MESSAGE); }; }",
        "label": "F"
    },
    "74": {
        "dataset": "COMP 3021",
        "project": "cyngaz",
        "bug_id": "31",
        "T": "void testMove(String input, String name, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); } private InputStream fixValueStream(String content) { final var bytes = content.getBytes(StandardCharsets.UTF_8); return new ByteArrayInputStream(bytes); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine(); // TODO int id = -1; int playerOne = 0; int playerTwo = 1; String lowerCaseInput = inputLine.toLowerCase(); return switch (lowerCaseInput) { case \"A\" -> new Move.Left(playerOne); case \"W\" -> new Move.Up(playerOne); case \"S\" -> new Move.Down(playerOne); case \"D\" -> new Move.Right(playerOne); case \"H\" -> new Move.Left(playerTwo); case \"J\" -> new Move.Down(playerTwo); case \"K\" -> new Move.Up(playerTwo); case \"L\" -> new Move.Right(playerTwo); case \"U\" -> new Undo(id); case EXIT_COMMAND_TEXT -> new Exit(id); default -> new InvalidInput(id, INVALID_INPUT_MESSAGE); }; }",
        "label": "F"
    },
    "75": {
        "dataset": "COMP 3021",
        "project": "cyngaz",
        "bug_id": "32",
        "T": "void testMove(String input, String name, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); } private InputStream fixValueStream(String content) { final var bytes = content.getBytes(StandardCharsets.UTF_8); return new ByteArrayInputStream(bytes); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine(); // TODO int id = -1; int playerOne = 0; int playerTwo = 1; String lowerCaseInput = inputLine.toLowerCase(); return switch (lowerCaseInput) { case \"A\" -> new Move.Left(playerOne); case \"W\" -> new Move.Up(playerOne); case \"S\" -> new Move.Down(playerOne); case \"D\" -> new Move.Right(playerOne); case \"H\" -> new Move.Left(playerTwo); case \"J\" -> new Move.Down(playerTwo); case \"K\" -> new Move.Up(playerTwo); case \"L\" -> new Move.Right(playerTwo); case \"U\" -> new Undo(id); case EXIT_COMMAND_TEXT -> new Exit(id); default -> new InvalidInput(id, INVALID_INPUT_MESSAGE); }; }",
        "label": "F"
    },
    "76": {
        "dataset": "COMP 3021",
        "project": "cyngaz",
        "bug_id": "33",
        "T": "void testMove(String input, String name, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); } private InputStream fixValueStream(String content) { final var bytes = content.getBytes(StandardCharsets.UTF_8); return new ByteArrayInputStream(bytes); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine(); // TODO int id = -1; int playerOne = 0; int playerTwo = 1; String lowerCaseInput = inputLine.toLowerCase(); return switch (lowerCaseInput) { case \"A\" -> new Move.Left(playerOne); case \"W\" -> new Move.Up(playerOne); case \"S\" -> new Move.Down(playerOne); case \"D\" -> new Move.Right(playerOne); case \"H\" -> new Move.Left(playerTwo); case \"J\" -> new Move.Down(playerTwo); case \"K\" -> new Move.Up(playerTwo); case \"L\" -> new Move.Right(playerTwo); case \"U\" -> new Undo(id); case EXIT_COMMAND_TEXT -> new Exit(id); default -> new InvalidInput(id, INVALID_INPUT_MESSAGE); }; }",
        "label": "F"
    },
    "77": {
        "dataset": "COMP 3021",
        "project": "cyngaz",
        "bug_id": "34",
        "T": "void testUndo(String input, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine(); // TODO int id = -1; int playerOne = 0; int playerTwo = 1; String lowerCaseInput = inputLine.toLowerCase(); return switch (lowerCaseInput) { case \"A\" -> new Move.Left(playerOne); case \"W\" -> new Move.Up(playerOne); case \"S\" -> new Move.Down(playerOne); case \"D\" -> new Move.Right(playerOne); case \"H\" -> new Move.Left(playerTwo); case \"J\" -> new Move.Down(playerTwo); case \"K\" -> new Move.Up(playerTwo); case \"L\" -> new Move.Right(playerTwo); case \"U\" -> new Undo(id); case EXIT_COMMAND_TEXT -> new Exit(id); default -> new InvalidInput(id, INVALID_INPUT_MESSAGE); }; }",
        "label": "F"
    },
    "78": {
        "dataset": "COMP 3021",
        "project": "cyngaz",
        "bug_id": "35",
        "T": "void testInvalidInput() { final var inputStream = fixValueStream(\"blah blah\"); final var inputEngine = new TerminalInputEngine(inputStream); final var action = inputEngine.fetchAction(); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine(); // TODO int id = -1; int playerOne = 0; int playerTwo = 1; String lowerCaseInput = inputLine.toLowerCase(); return switch (lowerCaseInput) { case \"A\" -> new Move.Left(playerOne); case \"W\" -> new Move.Up(playerOne); case \"S\" -> new Move.Down(playerOne); case \"D\" -> new Move.Right(playerOne); case \"H\" -> new Move.Left(playerTwo); case \"J\" -> new Move.Down(playerTwo); case \"K\" -> new Move.Up(playerTwo); case \"L\" -> new Move.Right(playerTwo); case \"U\" -> new Undo(id); case EXIT_COMMAND_TEXT -> new Exit(id); default -> new InvalidInput(id, INVALID_INPUT_MESSAGE); }; }",
        "label": "P"
    },
    "79": {
        "dataset": "COMP 3021",
        "project": "cyngaz",
        "bug_id": "36",
        "T": "void testUndoWhenThereIsNoMove() { final var gameState = new GameState(TestHelper.parseGameMap(\"\"\" 233 ###### #A.a@# #..a@# ###### \"\"\" )); gameState.undo(); } private Entity generateEntity(int key) { return switch (key % 4) { case 0 -> new Box(0); case 1 -> new Empty(); case 2 -> new Player(0); case 3 -> new Wall(); default -> throw new ShouldNotReachException(); }; }",
        "C": "public GameState(@NotNull GameMap map) { // TODO this.map = map; undoQuota = map.getUndoLimit(); mapEntity = new HashMap<>(map.mapEntity()); undoQuota = map.getUndoLimit(); moveHistory.add(new HashMap<>(mapEntity)); } public void undo() { // TODO if (moveHistory.size() > 1) { moveHistory.pop(); if (!undoQuota.isEmpty()) { undoQuota = Optional.of(undoQuota.get() - 1); } } mapEntity = new HashMap<>(moveHistory.peek()); } /** * Get the maximum width of the game map. * This should be the same as that in {@link GameMap} public TerminalRenderingEngine(PrintStream outputSteam) { this.outputSteam = outputSteam; } public Box(int playerId) { this.playerId = playerId; } public Player(int id) { this.id = id; } public ShouldNotReachException() { super(\"This branch should not be reached.\"); }",
        "label": "P"
    },
    "80": {
        "dataset": "COMP 3021",
        "project": "cyngaz",
        "bug_id": "37",
        "T": "void testGetUndoUnlimited() { final var gameState = new GameState(TestHelper.parseGameMap(\"\"\" -1 ###### #.Aa@# #..a@# ###### \"\"\" )); }",
        "C": "public GameState(@NotNull GameMap map) { // TODO this.map = map; undoQuota = map.getUndoLimit(); mapEntity = new HashMap<>(map.mapEntity()); undoQuota = map.getUndoLimit(); moveHistory.add(new HashMap<>(mapEntity)); }",
        "label": "F"
    },
    "81": {
        "dataset": "COMP 3021",
        "project": "cyngaz",
        "bug_id": "38",
        "T": "void testMapCopying() { final var maxWidth = 2333; final var maxHeight = 2333; final var random = new Random(); final var randomEntities = Stream.generate(() -> Position.of(random.nextInt(maxWidth), random.nextInt(maxHeight))) .distinct() .limit(100) .collect(Collectors.toMap(Function.identity(), it -> generateEntity(it.x()))); final var firstPos = randomEntities.keySet().stream().findFirst(); final var gameMap = new GameMap(maxWidth, maxHeight, Collections.singleton(firstPos.get()), 233); randomEntities.forEach(gameMap::putEntity); final var gameState = new GameState(gameMap); final var randomPosition = randomEntities.keySet().stream().findAny(); gameMap.putEntity(randomPosition.get(), new Empty()); randomEntities.forEach((p, e) -> assertEquals(e, gameState.getEntity(p))); }",
        "C": "public static @NotNull Position of(int x, int y) { return new Position(x, y); } public GameMap(int maxWidth, int maxHeight, Set<Position> destinations, int undoLimit) { // TODO this.width = maxWidth; this.height = maxHeight; this.destinations = destinations; this.undoLimit = undoLimit; } /** * Parses the map from a string representation. * The first line is undo limit. * Starting from the second line, the game map is represented as follows, * <li># represents a {@link Wall}</li> * <li>@ represents a box destination.</li> * <li>Any upper-case letter represents a {@link Player}.</li> * <li> * Any lower-case letter represents a {@link Box} that is only movable by the player with the corresponding upper-case letter. * For instance, box \"a\" can only be moved by player \"A\" and not movable by player \"B\". * </li> * <li>. represents an {@link Empty} position in the map, meaning there is no player or box currently at this position.</li> * <p> * Notes: * <li> * There can be at most 26 players. * All implementations of classes in the hk.ust.comp3021.game package should support up to 26 players. * </li> * <li> * For simplicity, we assume the given map is bounded with a closed boundary. * There is no need to check this point. * </li> * <li> * Example maps can be found in \"src/main/resources\". * </li> * * @param mapText The string representation. * @return The parsed GameMap object. * @throws IllegalArgumentException if undo limit is negative but not -1. * @throws IllegalArgumentException if there are multiple same upper-case letters, i.e., one player can only exist at one position. * @throws IllegalArgumentException if there are no players in the map. * @throws IllegalArgumentException if the number of boxes is not equal to the number of box destinations. * @throws IllegalArgumentException if there are boxes whose {@link Box#getPlayerId()} public GameState(@NotNull GameMap map) { // TODO this.map = map; undoQuota = map.getUndoLimit(); mapEntity = new HashMap<>(map.mapEntity()); undoQuota = map.getUndoLimit(); moveHistory.add(new HashMap<>(mapEntity)); } public void putEntity(Position position, Entity entity) { // TODO mapEntity.put(position, entity); } public @Nullable Entity getEntity(@NotNull Position position) { // TODO for (Map.Entry<Position, Entity> entry : mapEntity.entrySet()) { if (entry.getKey().equals(position)) { return entry.getValue(); } } return null; } /** * Get all box destination positions as a set in the game map. * This should be the same as that in {@link GameMap}",
        "label": "P"
    },
    "82": {
        "dataset": "COMP 3021",
        "project": "cyngaz",
        "bug_id": "39",
        "T": "void testUndoWhenThereIsMoveButNoCheckpoint() { final var gameState = new GameState(TestHelper.parseGameMap(\"\"\" 233 ###### #A.a@# #..a@# ###### \"\"\" )); gameState.move(Position.of(1, 1), Position.of(2, 1)); gameState.undo(); }",
        "C": "public GameState(@NotNull GameMap map) { // TODO this.map = map; undoQuota = map.getUndoLimit(); mapEntity = new HashMap<>(map.mapEntity()); undoQuota = map.getUndoLimit(); moveHistory.add(new HashMap<>(mapEntity)); } public void move(Position from, Position to) { // TODO Entity move = getEntity(from); mapEntity.put(from, new Empty()); mapEntity.put(to, move); } /** * Record a checkpoint of the game state, including: * <li>All current positions of entities in the game map.</li> * <li>Current undo quota</li> * <p> * Checkpoint is used in {@link GameState#undo()} public static @NotNull Position of(int x, int y) { return new Position(x, y); } public void undo() { // TODO if (moveHistory.size() > 1) { moveHistory.pop(); if (!undoQuota.isEmpty()) { undoQuota = Optional.of(undoQuota.get() - 1); } } mapEntity = new HashMap<>(moveHistory.peek()); } /** * Get the maximum width of the game map. * This should be the same as that in {@link GameMap}",
        "label": "P"
    },
    "83": {
        "dataset": "COMP 3021",
        "project": "cyngaz",
        "bug_id": "40",
        "T": "void testGameExit() { final var gameState = mock(GameState.class); final var inputEngine = mock(TerminalInputEngine.class); final var renderingEngine = mock(TerminalRenderingEngine.class); when(gameState.isWin()).thenReturn(false, false, false); when(inputEngine.fetchAction()) .thenReturn(new InvalidInput(0, \"\"), new InvalidInput(0, \"\"), new Exit(0)); final var game = new TerminalSokobanGame(gameState, inputEngine, renderingEngine); game.run(); verify(renderingEngine, atLeastOnce()).message(any()); }",
        "C": "public InvalidInput(int initiator, @NotNull String message) { super(initiator); this.message = message; } public Exit(int initiator) { super(initiator); } public TerminalSokobanGame(GameState gameState, TerminalInputEngine inputEngine, TerminalRenderingEngine renderingEngine) { super(gameState); this.inputEngine = inputEngine; this.renderingEngine = renderingEngine; // TODO // Check the number of players if (gameState.getAllPlayerPositions().size() > 2) { throw new IllegalArgumentException(INVALID_INPUT_MESSAGE); } } public void run() { // TODO renderingEngine.message(GAME_READY_MESSAGE); renderingEngine.render(state); while (!shouldStop()) { String quotaText; if (state.getUndoQuota().isEmpty()) { quotaText = UNDO_QUOTA_UNLIMITED; } else { quotaText = String.valueOf(state.getUndoQuota().get()); } String formatedQuotaText = String.format(UNDO_QUOTA_TEMPLATE, quotaText); renderingEngine.message(formatedQuotaText); renderingEngine.message(\"Input(Player1:W/A/S/D, Player2:H/J/K/L):\"); Action action = inputEngine.fetchAction(); ActionResult result = processAction(action); if(result instanceof ActionResult.Failed){ renderingEngine.message(((ActionResult.Failed) result).getReason()); } renderingEngine.render(state); } renderingEngine.message(GAME_EXIT_MESSAGE); if (state.isWin()) { renderingEngine.message(WIN_MESSAGE); } }",
        "label": "P"
    },
    "84": {
        "dataset": "COMP 3021",
        "project": "cyngaz",
        "bug_id": "41",
        "T": "void testGameWin() { final var gameState = mock(GameState.class); final var inputEngine = mock(TerminalInputEngine.class); final var renderingEngine = mock(TerminalRenderingEngine.class); when(gameState.isWin()).thenReturn(false, false, false, true); when(inputEngine.fetchAction()) .thenReturn(new InvalidInput(0, \"\")); final var game = new TerminalSokobanGame(gameState, inputEngine, renderingEngine); game.run(); verify(gameState, atLeastOnce()).isWin(); verify(renderingEngine, atLeastOnce()).message(any()); }",
        "C": "public InvalidInput(int initiator, @NotNull String message) { super(initiator); this.message = message; } public TerminalSokobanGame(GameState gameState, TerminalInputEngine inputEngine, TerminalRenderingEngine renderingEngine) { super(gameState); this.inputEngine = inputEngine; this.renderingEngine = renderingEngine; // TODO // Check the number of players if (gameState.getAllPlayerPositions().size() > 2) { throw new IllegalArgumentException(INVALID_INPUT_MESSAGE); } } public void run() { // TODO renderingEngine.message(GAME_READY_MESSAGE); renderingEngine.render(state); while (!shouldStop()) { String quotaText; if (state.getUndoQuota().isEmpty()) { quotaText = UNDO_QUOTA_UNLIMITED; } else { quotaText = String.valueOf(state.getUndoQuota().get()); } String formatedQuotaText = String.format(UNDO_QUOTA_TEMPLATE, quotaText); renderingEngine.message(formatedQuotaText); renderingEngine.message(\"Input(Player1:W/A/S/D, Player2:H/J/K/L):\"); Action action = inputEngine.fetchAction(); ActionResult result = processAction(action); if(result instanceof ActionResult.Failed){ renderingEngine.message(((ActionResult.Failed) result).getReason()); } renderingEngine.render(state); } renderingEngine.message(GAME_EXIT_MESSAGE); if (state.isWin()) { renderingEngine.message(WIN_MESSAGE); } }",
        "label": "P"
    },
    "85": {
        "dataset": "COMP 3021",
        "project": "cyngaz",
        "bug_id": "42",
        "T": "void testMoreThanTwoPlayers() { final var gameState = mock(GameState.class); final var inputEngine = mock(TerminalInputEngine.class); final var renderingEngine = mock(TerminalRenderingEngine.class); when(gameState.getAllPlayerPositions()).thenReturn(new HashSet<>(Arrays.asList(Position.of(1, 1), Position.of(1, 2), Position.of(1, 3)))); }",
        "C": "public static @NotNull Position of(int x, int y) { return new Position(x, y); }",
        "label": "P"
    },
    "86": {
        "dataset": "COMP 3021",
        "project": "owidjaja",
        "bug_id": "0",
        "T": "void moveUp() { Position.of(233, 232), new Move.Up(-1).nextPosition(pos) ); }",
        "C": "public static @NotNull Position of(int x, int y) { return new Position(x, y); } public Up(int initiator) { super(initiator); }",
        "label": "P"
    },
    "87": {
        "dataset": "COMP 3021",
        "project": "owidjaja",
        "bug_id": "1",
        "T": "void moveDown() { Position.of(233, 234), new Move.Down(-1).nextPosition(pos) ); }",
        "C": "public static @NotNull Position of(int x, int y) { return new Position(x, y); } public Down(int initiator) { super(initiator); }",
        "label": "P"
    },
    "88": {
        "dataset": "COMP 3021",
        "project": "owidjaja",
        "bug_id": "2",
        "T": "void moveRight() { Position.of(234, 233), new Move.Right(-1).nextPosition(pos) ); }",
        "C": "public static @NotNull Position of(int x, int y) { return new Position(x, y); } public Right(int initiator) { super(initiator); }",
        "label": "P"
    },
    "89": {
        "dataset": "COMP 3021",
        "project": "owidjaja",
        "bug_id": "3",
        "T": "void testExceedingUndoQuota() { final var gameState = mock(GameState.class); when(gameState.getPlayerPositionById(anyInt())).thenReturn(Position.of(0, 0)); when(gameState.getUndoQuota()).thenReturn(Optional.of(0)); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Undo(0)); }",
        "C": "public Undo(int initiator) { super(initiator); }",
        "label": "P"
    },
    "90": {
        "dataset": "COMP 3021",
        "project": "owidjaja",
        "bug_id": "4",
        "T": "void testExit() { final var gameState = mock(GameState.class); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Exit(0)); }",
        "C": "public Exit(int initiator) { super(initiator); }",
        "label": "P"
    },
    "91": {
        "dataset": "COMP 3021",
        "project": "owidjaja",
        "bug_id": "5",
        "T": "void testUndoUnlimited() { final var gameState = mock(GameState.class); when(gameState.getPlayerPositionById(anyInt())).thenReturn(Position.of(0, 0)); when(gameState.getUndoQuota()).thenReturn(Optional.empty()); final var game = new SokobanGameForTesting(gameState); for (int i = 0; i < 10000; i++) { final var result = game.feedActionForProcessing(new Undo(0)); } verify(gameState, times(10000)).undo(); }",
        "C": "public TerminalRenderingEngine(PrintStream outputSteam) { this.outputSteam = outputSteam; } public Undo(int initiator) { super(initiator); }",
        "label": "F"
    },
    "92": {
        "dataset": "COMP 3021",
        "project": "owidjaja",
        "bug_id": "6",
        "T": "void testPushOtherPlayerBox() { String mapText = \"\"\" 233 ###### #AB.@# #b.a.# #@...# ###### \"\"\"; final var testMap = TestHelper.parseGameMap(mapText); final var gameState = spy(new GameState(testMap)); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Move.Down(0)); verify(gameState, never()).move(any(), any()); }",
        "C": "public GameState(@NotNull GameMap map) { // TODO this.originalMap = map; this.grid = map.grid; this.undoQuota = map.getUndoLimit(); this.playersChar = new ArrayList<>(); this.playersPos = new ArrayList<>(); // deep copy so that originalMap properties not changed for (int i=0; i<map.playersChar.size(); i++){ this.playersChar.add(map.playersChar.get(i)); this.playersPos.add(map.playersPos.get(i)); } this.boxesChar = new ArrayList<>(); this.boxesPos = new ArrayList<>(); for (int i=0; i<map.boxesChar.size(); i++){ this.boxesChar.add(map.boxesChar.get(i)); this.boxesPos.add(map.boxesPos.get(i)); } this.cpCount = 0; } public Down(int initiator) { super(initiator); }",
        "label": "F"
    },
    "93": {
        "dataset": "COMP 3021",
        "project": "owidjaja",
        "bug_id": "7",
        "T": "void testMoveNonExistingPlayer() { String mapText = \"\"\" 233 ###### #A..@# #a...# ##...# ###### \"\"\"; final var testMap = TestHelper.parseGameMap(mapText); final var gameState = spy(new GameState(testMap)); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Move.Down(23)); }",
        "C": "public GameState(@NotNull GameMap map) { // TODO this.originalMap = map; this.grid = map.grid; this.undoQuota = map.getUndoLimit(); this.playersChar = new ArrayList<>(); this.playersPos = new ArrayList<>(); // deep copy so that originalMap properties not changed for (int i=0; i<map.playersChar.size(); i++){ this.playersChar.add(map.playersChar.get(i)); this.playersPos.add(map.playersPos.get(i)); } this.boxesChar = new ArrayList<>(); this.boxesPos = new ArrayList<>(); for (int i=0; i<map.boxesChar.size(); i++){ this.boxesChar.add(map.boxesChar.get(i)); this.boxesPos.add(map.boxesPos.get(i)); } this.cpCount = 0; } public Down(int initiator) { super(initiator); }",
        "label": "F"
    },
    "94": {
        "dataset": "COMP 3021",
        "project": "owidjaja",
        "bug_id": "8",
        "T": "void testCheckpointWhenNeed() { final var gameState = spy(new GameState(TestHelper.parseGameMap(\"\"\" 233 ###### #.Aa@# #..a@# ###### \"\"\" ))); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Move.Right(0)); verify(gameState, times(1)).checkpoint(); }",
        "C": "public GameState(@NotNull GameMap map) { // TODO this.originalMap = map; this.grid = map.grid; this.undoQuota = map.getUndoLimit(); this.playersChar = new ArrayList<>(); this.playersPos = new ArrayList<>(); // deep copy so that originalMap properties not changed for (int i=0; i<map.playersChar.size(); i++){ this.playersChar.add(map.playersChar.get(i)); this.playersPos.add(map.playersPos.get(i)); } this.boxesChar = new ArrayList<>(); this.boxesPos = new ArrayList<>(); for (int i=0; i<map.boxesChar.size(); i++){ this.boxesChar.add(map.boxesChar.get(i)); this.boxesPos.add(map.boxesPos.get(i)); } this.cpCount = 0; } public Right(int initiator) { super(initiator); }",
        "label": "P"
    },
    "95": {
        "dataset": "COMP 3021",
        "project": "owidjaja",
        "bug_id": "9",
        "T": "void testPushBoxAgainstWall() { String mapText = \"\"\" 233 ###### #A..@# #a...# ##...# ###### \"\"\"; final var testMap = TestHelper.parseGameMap(mapText); final var gameState = spy(new GameState(testMap)); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Move.Down(0)); verify(gameState, never()).move(any(), any()); }",
        "C": "public GameState(@NotNull GameMap map) { // TODO this.originalMap = map; this.grid = map.grid; this.undoQuota = map.getUndoLimit(); this.playersChar = new ArrayList<>(); this.playersPos = new ArrayList<>(); // deep copy so that originalMap properties not changed for (int i=0; i<map.playersChar.size(); i++){ this.playersChar.add(map.playersChar.get(i)); this.playersPos.add(map.playersPos.get(i)); } this.boxesChar = new ArrayList<>(); this.boxesPos = new ArrayList<>(); for (int i=0; i<map.boxesChar.size(); i++){ this.boxesChar.add(map.boxesChar.get(i)); this.boxesPos.add(map.boxesPos.get(i)); } this.cpCount = 0; } public Down(int initiator) { super(initiator); }",
        "label": "P"
    },
    "96": {
        "dataset": "COMP 3021",
        "project": "owidjaja",
        "bug_id": "10",
        "T": "void testCheckpointWhenNotNeed() { final var gameState = spy(new GameState(TestHelper.parseGameMap(\"\"\" 233 ###### #A.a@# #..a@# ###### \"\"\" ))); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Move.Right(0)); verify(gameState, never()).checkpoint(); } private static class SokobanGameForTesting extends AbstractSokobanGame { protected SokobanGameForTesting(GameState gameState) { super(gameState); } @Override public void run() { } public ActionResult feedActionForProcessing(Action action) { return processAction(action); } }",
        "C": "public GameState(@NotNull GameMap map) { // TODO this.originalMap = map; this.grid = map.grid; this.undoQuota = map.getUndoLimit(); this.playersChar = new ArrayList<>(); this.playersPos = new ArrayList<>(); // deep copy so that originalMap properties not changed for (int i=0; i<map.playersChar.size(); i++){ this.playersChar.add(map.playersChar.get(i)); this.playersPos.add(map.playersPos.get(i)); } this.boxesChar = new ArrayList<>(); this.boxesPos = new ArrayList<>(); for (int i=0; i<map.boxesChar.size(); i++){ this.boxesChar.add(map.boxesChar.get(i)); this.boxesPos.add(map.boxesPos.get(i)); } this.cpCount = 0; } public Right(int initiator) { super(initiator); } public void run() { // TODO // check isWin // check userinput if (this.state.isWin()){ return; } this.renderingEngine.render(this.state); } protected ActionResult processAction(@NotNull Action action) { // TODO check if (action instanceof Exit){ isExit = true; return new ActionResult.Success(action); } else if (action instanceof InvalidInput) { return new ActionResult.Failed((InvalidInput) action, \"Invalid input.\"); } else if (action instanceof Move) { // todo check move validity if (action instanceof Move.Down){ Position oldpos = state.getPlayerPositionById(action.getInitiator()); int x = oldpos.x(); int y = oldpos.y(); Position newpos = new Position(x, y+1); Entity newEnt = state.getEntity(newpos); if (newEnt instanceof Empty){ state.move(oldpos, newpos); return new ActionResult.Success(action); } else if (newEnt instanceof Box) { Position newpos2 = new Position(x, y+2); if (state.getEntity(newpos2) instanceof Empty){ System.out.println(\"moving\"); state.move(newpos, newpos2); state.move(oldpos, newpos); state.checkpoint(); return new ActionResult.Success(action); } } else{ return new ActionResult.Failed(action, \"Invalid input.\"); } } else if (action instanceof Move.Up){ Position oldpos = state.getPlayerPositionById(action.getInitiator()); int x = oldpos.x(); int y = oldpos.y(); Position newpos = new Position(x, y-1); Entity newEnt = state.getEntity(newpos); if (newEnt instanceof Empty){ state.move(oldpos, newpos); return new ActionResult.Success(action); } else if (newEnt instanceof Box) { Position newpos2 = new Position(x, y-2); if (state.getEntity(newpos2) instanceof Empty){ System.out.println(\"moving\"); state.move(newpos, newpos2); state.move(oldpos, newpos); state.checkpoint(); return new ActionResult.Success(action); } } else{ return new ActionResult.Failed(action, \"Invalid input.\"); } } else if (action instanceof Move.Left){ Position oldpos = state.getPlayerPositionById(action.getInitiator()); int x = oldpos.x(); int y = oldpos.y(); Position newpos = new Position(x-1, y); Entity newEnt = state.getEntity(newpos); if (newEnt instanceof Empty){ state.move(oldpos, newpos); return new ActionResult.Success(action); } else if (newEnt instanceof Box) { Position newpos2 = new Position(x-2, y); if (state.getEntity(newpos2) instanceof Empty){ System.out.println(\"moving\"); state.move(newpos, newpos2); state.move(oldpos, newpos); state.checkpoint(); return new ActionResult.Success(action); } } else{ return new ActionResult.Failed(action, \"Invalid input.\"); } } else if (action instanceof Move.Right){ Position oldpos = state.getPlayerPositionById(action.getInitiator()); int x = oldpos.x(); int y = oldpos.y(); Position newpos = new Position(x+1, y); Entity newEnt = state.getEntity(newpos); if (newEnt instanceof Empty){ state.move(oldpos, newpos); return new ActionResult.Success(action); } else if (newEnt instanceof Box) { Position newpos2 = new Position(x+2, y); if (state.getEntity(newpos2) instanceof Empty){ System.out.println(\"moving\"); state.move(newpos, newpos2); state.move(oldpos, newpos); state.checkpoint(); return new ActionResult.Success(action); } } else{ return new ActionResult.Failed(action, \"Invalid input.\"); } } } return new ActionResult.Failed(action, \"default invalid\"); }",
        "label": "P"
    },
    "97": {
        "dataset": "COMP 3021",
        "project": "owidjaja",
        "bug_id": "11",
        "T": "void testHitAnotherPlayer() { String mapText = \"\"\" 233 ###### #A..@# #B...# #ab.@# ###### \"\"\"; final var testMap = TestHelper.parseGameMap(mapText); final var gameState = spy(new GameState(testMap)); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Move.Down(0)); verify(gameState, never()).move(any(), any()); }",
        "C": "public GameState(@NotNull GameMap map) { // TODO this.originalMap = map; this.grid = map.grid; this.undoQuota = map.getUndoLimit(); this.playersChar = new ArrayList<>(); this.playersPos = new ArrayList<>(); // deep copy so that originalMap properties not changed for (int i=0; i<map.playersChar.size(); i++){ this.playersChar.add(map.playersChar.get(i)); this.playersPos.add(map.playersPos.get(i)); } this.boxesChar = new ArrayList<>(); this.boxesPos = new ArrayList<>(); for (int i=0; i<map.boxesChar.size(); i++){ this.boxesChar.add(map.boxesChar.get(i)); this.boxesPos.add(map.boxesPos.get(i)); } this.cpCount = 0; } public Down(int initiator) { super(initiator); }",
        "label": "P"
    },
    "98": {
        "dataset": "COMP 3021",
        "project": "owidjaja",
        "bug_id": "12",
        "T": "void testUndoWithinQuota() { final var gameState = mock(GameState.class); when(gameState.getPlayerPositionById(anyInt())).thenReturn(Position.of(0, 0)); when(gameState.getUndoQuota()).thenReturn(Optional.of(1)); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Undo(0)); verify(gameState, times(1)).undo(); }",
        "C": "public Undo(int initiator) { super(initiator); }",
        "label": "F"
    },
    "99": {
        "dataset": "COMP 3021",
        "project": "owidjaja",
        "bug_id": "13",
        "T": "void testInvalidInput() { final var game = new SokobanGameForTesting(mock(GameState.class)); final var message = String.valueOf(new Random().nextLong()); final var action = new InvalidInput(-1, message); final var result = game.feedActionForProcessing(action); }",
        "C": "public InvalidInput(int initiator, @NotNull String message) { super(initiator); this.message = message; }",
        "label": "P"
    },
    "100": {
        "dataset": "COMP 3021",
        "project": "owidjaja",
        "bug_id": "14",
        "T": "void testUndoLimitParsing() { final var gameMap = TestHelper.parseGameMap(rectangularMap); }",
        "C": "",
        "label": "P"
    },
    "101": {
        "dataset": "COMP 3021",
        "project": "owidjaja",
        "bug_id": "15",
        "T": "void testWidthForNonRectangularMap() { final var gameMap = TestHelper.parseGameMap(nonRectangularMap); }",
        "C": "",
        "label": "P"
    },
    "102": {
        "dataset": "COMP 3021",
        "project": "owidjaja",
        "bug_id": "16",
        "T": "void testTwoPlayersMap() { final var twoPlayersMap = \"\"\" 233 ###### #A..@# #..B@# #....# #.a..# #..b.# ###### \"\"\"; final var gameMap = TestHelper.parseGameMap(twoPlayersMap); final var playerIds = gameMap.getPlayerIds(); final var expectedIds = new HashSet<Integer>(); expectedIds.add(0); expectedIds.add(1); }",
        "C": "public Set<Integer> getPlayerIds() { // TODOx // duplicate check done on .parse Set<Integer> ret = new HashSet<>(); for (int i=0; i< playersPos.size(); i++){ ret.add(i); } return ret; }",
        "label": "P"
    },
    "103": {
        "dataset": "COMP 3021",
        "project": "owidjaja",
        "bug_id": "17",
        "T": "void testMapWithoutPlayer() { final var invalidMap = \"\"\" 233 ### #.# ### \"\"\"; } // @Tag(TestKind.HIDDEN) // @Test // void testUnmatchedPlayersAndBoxes() { // final var invalidMap = \"\"\" // 233 // ###### // #A..@# // #...@# // #a.b@# // #.a.@# // #..a.# // ###### // \"\"\"; // assertThrowsExactly(IllegalArgumentException.class, () -> TestHelper.parseGameMap(invalidMap)); // }",
        "C": "public TerminalRenderingEngine(PrintStream outputSteam) { this.outputSteam = outputSteam; }",
        "label": "P"
    },
    "104": {
        "dataset": "COMP 3021",
        "project": "owidjaja",
        "bug_id": "18",
        "T": "void testManyPlayersMap() { final var manyPlayersMap = \"\"\" 233 ###### #A.P@@# #vCB@@# #.cpD@# #Ga.d@# #g.bV@# ###### \"\"\"; final var gameMap = TestHelper.parseGameMap(manyPlayersMap); final var playerIds = gameMap.getPlayerIds(); final var expectedIds = new HashSet<>(Arrays.asList( 0, 'P' - 'A', 'C' - 'A', 'B' - 'A', 'D' - 'A', 'G' - 'A', 'V' - 'A' )); }",
        "C": "public Set<Integer> getPlayerIds() { // TODOx // duplicate check done on .parse Set<Integer> ret = new HashSet<>(); for (int i=0; i< playersPos.size(); i++){ ret.add(i); } return ret; }",
        "label": "F"
    },
    "105": {
        "dataset": "COMP 3021",
        "project": "owidjaja",
        "bug_id": "19",
        "T": "void testHeightForNonRectangularMap() { final var gameMap = TestHelper.parseGameMap(nonRectangularMap); }",
        "C": "",
        "label": "P"
    },
    "106": {
        "dataset": "COMP 3021",
        "project": "owidjaja",
        "bug_id": "20",
        "T": "void testDuplicatedPlayers() { final var invalidMap = \"\"\" 233 ###### #A..@# #..A@# #....# #.a..# #..b.# ###### \"\"\"; }",
        "C": "",
        "label": "P"
    },
    "107": {
        "dataset": "COMP 3021",
        "project": "owidjaja",
        "bug_id": "21",
        "T": "void testParseMapWithoutUndoLimit() { final var invalidMap = String.join(\"\\n\", rectangularMap.lines().skip(1).toList()); }",
        "C": "",
        "label": "P"
    },
    "108": {
        "dataset": "COMP 3021",
        "project": "owidjaja",
        "bug_id": "22",
        "T": "void testInsufficientDestinations() { final var invalidMap = \"\"\" 233 ###### #A..@# #...@# #a...# #.a..# #..a.# ###### \"\"\"; }",
        "C": "",
        "label": "P"
    },
    "109": {
        "dataset": "COMP 3021",
        "project": "owidjaja",
        "bug_id": "23",
        "T": "void testSuperLargeMap() { try { new GameMap(Integer.MAX_VALUE, Integer.MAX_VALUE, Collections.emptySet(), 0); } catch (OutOfMemoryError e) { throw new RuntimeException(e); } }); }",
        "C": "public GameMap(int maxWidth, int maxHeight, Set<Position> destinations, int undoLimit) { // TODOx check this.maxWidth = maxWidth; this.maxHeight = maxHeight; this.undoLimit = undoLimit; this.destinations = destinations; } public TerminalRenderingEngine(PrintStream outputSteam) { this.outputSteam = outputSteam; }",
        "label": "P"
    },
    "110": {
        "dataset": "COMP 3021",
        "project": "owidjaja",
        "bug_id": "24",
        "T": "void testInvalidUndoLimit() { final var invalidMap = \"\"\" -233 ###### #A..@# #...@# #a.b@# #.a.@# #..a.# ###### \"\"\"; }",
        "C": "",
        "label": "P"
    },
    "111": {
        "dataset": "COMP 3021",
        "project": "owidjaja",
        "bug_id": "25",
        "T": "void testEmptyMap() { final var invalidMap = \"\"; }",
        "C": "",
        "label": "P"
    },
    "112": {
        "dataset": "COMP 3021",
        "project": "owidjaja",
        "bug_id": "26",
        "T": "void testMove(String input, String name, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); } private InputStream fixValueStream(String content) { final var bytes = content.getBytes(StandardCharsets.UTF_8); return new ByteArrayInputStream(bytes); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine(); if (inputLine == null) { return new InvalidInput(0, StringResources.INVALID_INPUT_MESSAGE); } // TODO check playerid // String[] inputs = inputLine.split(\"\\\\s+\"); // https://www.geeksforgeeks.org/string-in-switch-case-in-java/ switch (inputLine.toLowerCase()){ case StringResources.EXIT_COMMAND_TEXT: // better place elsewhere? System.out.println(StringResources.GAME_EXIT_MESSAGE); return new Exit(0); case \"u\": return new Undo(0); case \"a\": return new Move.Left(0); case \"s\": return new Move.Down(0); case \"w\": return new Move.Up(0); case \"d\": return new Move.Right(0); case \"h\": return new Move.Left(1); case \"j\": return new Move.Down(1); case \"k\": return new Move.Up(1); case \"l\": return new Move.Right(1); default: return new InvalidInput(0,\"Invalid Input.\"); } }",
        "label": "P"
    },
    "113": {
        "dataset": "COMP 3021",
        "project": "owidjaja",
        "bug_id": "27",
        "T": "void testMove(String input, String name, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); } private InputStream fixValueStream(String content) { final var bytes = content.getBytes(StandardCharsets.UTF_8); return new ByteArrayInputStream(bytes); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine(); if (inputLine == null) { return new InvalidInput(0, StringResources.INVALID_INPUT_MESSAGE); } // TODO check playerid // String[] inputs = inputLine.split(\"\\\\s+\"); // https://www.geeksforgeeks.org/string-in-switch-case-in-java/ switch (inputLine.toLowerCase()){ case StringResources.EXIT_COMMAND_TEXT: // better place elsewhere? System.out.println(StringResources.GAME_EXIT_MESSAGE); return new Exit(0); case \"u\": return new Undo(0); case \"a\": return new Move.Left(0); case \"s\": return new Move.Down(0); case \"w\": return new Move.Up(0); case \"d\": return new Move.Right(0); case \"h\": return new Move.Left(1); case \"j\": return new Move.Down(1); case \"k\": return new Move.Up(1); case \"l\": return new Move.Right(1); default: return new InvalidInput(0,\"Invalid Input.\"); } }",
        "label": "P"
    },
    "114": {
        "dataset": "COMP 3021",
        "project": "owidjaja",
        "bug_id": "28",
        "T": "void testMove(String input, String name, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); } private InputStream fixValueStream(String content) { final var bytes = content.getBytes(StandardCharsets.UTF_8); return new ByteArrayInputStream(bytes); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine(); if (inputLine == null) { return new InvalidInput(0, StringResources.INVALID_INPUT_MESSAGE); } // TODO check playerid // String[] inputs = inputLine.split(\"\\\\s+\"); // https://www.geeksforgeeks.org/string-in-switch-case-in-java/ switch (inputLine.toLowerCase()){ case StringResources.EXIT_COMMAND_TEXT: // better place elsewhere? System.out.println(StringResources.GAME_EXIT_MESSAGE); return new Exit(0); case \"u\": return new Undo(0); case \"a\": return new Move.Left(0); case \"s\": return new Move.Down(0); case \"w\": return new Move.Up(0); case \"d\": return new Move.Right(0); case \"h\": return new Move.Left(1); case \"j\": return new Move.Down(1); case \"k\": return new Move.Up(1); case \"l\": return new Move.Right(1); default: return new InvalidInput(0,\"Invalid Input.\"); } }",
        "label": "P"
    },
    "115": {
        "dataset": "COMP 3021",
        "project": "owidjaja",
        "bug_id": "29",
        "T": "void testMove(String input, String name, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); } private InputStream fixValueStream(String content) { final var bytes = content.getBytes(StandardCharsets.UTF_8); return new ByteArrayInputStream(bytes); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine(); if (inputLine == null) { return new InvalidInput(0, StringResources.INVALID_INPUT_MESSAGE); } // TODO check playerid // String[] inputs = inputLine.split(\"\\\\s+\"); // https://www.geeksforgeeks.org/string-in-switch-case-in-java/ switch (inputLine.toLowerCase()){ case StringResources.EXIT_COMMAND_TEXT: // better place elsewhere? System.out.println(StringResources.GAME_EXIT_MESSAGE); return new Exit(0); case \"u\": return new Undo(0); case \"a\": return new Move.Left(0); case \"s\": return new Move.Down(0); case \"w\": return new Move.Up(0); case \"d\": return new Move.Right(0); case \"h\": return new Move.Left(1); case \"j\": return new Move.Down(1); case \"k\": return new Move.Up(1); case \"l\": return new Move.Right(1); default: return new InvalidInput(0,\"Invalid Input.\"); } }",
        "label": "P"
    },
    "116": {
        "dataset": "COMP 3021",
        "project": "owidjaja",
        "bug_id": "30",
        "T": "void testMove(String input, String name, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); } private InputStream fixValueStream(String content) { final var bytes = content.getBytes(StandardCharsets.UTF_8); return new ByteArrayInputStream(bytes); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine(); if (inputLine == null) { return new InvalidInput(0, StringResources.INVALID_INPUT_MESSAGE); } // TODO check playerid // String[] inputs = inputLine.split(\"\\\\s+\"); // https://www.geeksforgeeks.org/string-in-switch-case-in-java/ switch (inputLine.toLowerCase()){ case StringResources.EXIT_COMMAND_TEXT: // better place elsewhere? System.out.println(StringResources.GAME_EXIT_MESSAGE); return new Exit(0); case \"u\": return new Undo(0); case \"a\": return new Move.Left(0); case \"s\": return new Move.Down(0); case \"w\": return new Move.Up(0); case \"d\": return new Move.Right(0); case \"h\": return new Move.Left(1); case \"j\": return new Move.Down(1); case \"k\": return new Move.Up(1); case \"l\": return new Move.Right(1); default: return new InvalidInput(0,\"Invalid Input.\"); } }",
        "label": "P"
    },
    "117": {
        "dataset": "COMP 3021",
        "project": "owidjaja",
        "bug_id": "31",
        "T": "void testMove(String input, String name, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); } private InputStream fixValueStream(String content) { final var bytes = content.getBytes(StandardCharsets.UTF_8); return new ByteArrayInputStream(bytes); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine(); if (inputLine == null) { return new InvalidInput(0, StringResources.INVALID_INPUT_MESSAGE); } // TODO check playerid // String[] inputs = inputLine.split(\"\\\\s+\"); // https://www.geeksforgeeks.org/string-in-switch-case-in-java/ switch (inputLine.toLowerCase()){ case StringResources.EXIT_COMMAND_TEXT: // better place elsewhere? System.out.println(StringResources.GAME_EXIT_MESSAGE); return new Exit(0); case \"u\": return new Undo(0); case \"a\": return new Move.Left(0); case \"s\": return new Move.Down(0); case \"w\": return new Move.Up(0); case \"d\": return new Move.Right(0); case \"h\": return new Move.Left(1); case \"j\": return new Move.Down(1); case \"k\": return new Move.Up(1); case \"l\": return new Move.Right(1); default: return new InvalidInput(0,\"Invalid Input.\"); } }",
        "label": "P"
    },
    "118": {
        "dataset": "COMP 3021",
        "project": "owidjaja",
        "bug_id": "32",
        "T": "void testMove(String input, String name, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); } private InputStream fixValueStream(String content) { final var bytes = content.getBytes(StandardCharsets.UTF_8); return new ByteArrayInputStream(bytes); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine(); if (inputLine == null) { return new InvalidInput(0, StringResources.INVALID_INPUT_MESSAGE); } // TODO check playerid // String[] inputs = inputLine.split(\"\\\\s+\"); // https://www.geeksforgeeks.org/string-in-switch-case-in-java/ switch (inputLine.toLowerCase()){ case StringResources.EXIT_COMMAND_TEXT: // better place elsewhere? System.out.println(StringResources.GAME_EXIT_MESSAGE); return new Exit(0); case \"u\": return new Undo(0); case \"a\": return new Move.Left(0); case \"s\": return new Move.Down(0); case \"w\": return new Move.Up(0); case \"d\": return new Move.Right(0); case \"h\": return new Move.Left(1); case \"j\": return new Move.Down(1); case \"k\": return new Move.Up(1); case \"l\": return new Move.Right(1); default: return new InvalidInput(0,\"Invalid Input.\"); } }",
        "label": "P"
    },
    "119": {
        "dataset": "COMP 3021",
        "project": "owidjaja",
        "bug_id": "33",
        "T": "void testMove(String input, String name, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); } private InputStream fixValueStream(String content) { final var bytes = content.getBytes(StandardCharsets.UTF_8); return new ByteArrayInputStream(bytes); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine(); if (inputLine == null) { return new InvalidInput(0, StringResources.INVALID_INPUT_MESSAGE); } // TODO check playerid // String[] inputs = inputLine.split(\"\\\\s+\"); // https://www.geeksforgeeks.org/string-in-switch-case-in-java/ switch (inputLine.toLowerCase()){ case StringResources.EXIT_COMMAND_TEXT: // better place elsewhere? System.out.println(StringResources.GAME_EXIT_MESSAGE); return new Exit(0); case \"u\": return new Undo(0); case \"a\": return new Move.Left(0); case \"s\": return new Move.Down(0); case \"w\": return new Move.Up(0); case \"d\": return new Move.Right(0); case \"h\": return new Move.Left(1); case \"j\": return new Move.Down(1); case \"k\": return new Move.Up(1); case \"l\": return new Move.Right(1); default: return new InvalidInput(0,\"Invalid Input.\"); } }",
        "label": "P"
    },
    "120": {
        "dataset": "COMP 3021",
        "project": "owidjaja",
        "bug_id": "34",
        "T": "void testUndo(String input, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine(); if (inputLine == null) { return new InvalidInput(0, StringResources.INVALID_INPUT_MESSAGE); } // TODO check playerid // String[] inputs = inputLine.split(\"\\\\s+\"); // https://www.geeksforgeeks.org/string-in-switch-case-in-java/ switch (inputLine.toLowerCase()){ case StringResources.EXIT_COMMAND_TEXT: // better place elsewhere? System.out.println(StringResources.GAME_EXIT_MESSAGE); return new Exit(0); case \"u\": return new Undo(0); case \"a\": return new Move.Left(0); case \"s\": return new Move.Down(0); case \"w\": return new Move.Up(0); case \"d\": return new Move.Right(0); case \"h\": return new Move.Left(1); case \"j\": return new Move.Down(1); case \"k\": return new Move.Up(1); case \"l\": return new Move.Right(1); default: return new InvalidInput(0,\"Invalid Input.\"); } }",
        "label": "P"
    },
    "121": {
        "dataset": "COMP 3021",
        "project": "owidjaja",
        "bug_id": "35",
        "T": "void testInvalidInput() { final var inputStream = fixValueStream(\"blah blah\"); final var inputEngine = new TerminalInputEngine(inputStream); final var action = inputEngine.fetchAction(); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine(); if (inputLine == null) { return new InvalidInput(0, StringResources.INVALID_INPUT_MESSAGE); } // TODO check playerid // String[] inputs = inputLine.split(\"\\\\s+\"); // https://www.geeksforgeeks.org/string-in-switch-case-in-java/ switch (inputLine.toLowerCase()){ case StringResources.EXIT_COMMAND_TEXT: // better place elsewhere? System.out.println(StringResources.GAME_EXIT_MESSAGE); return new Exit(0); case \"u\": return new Undo(0); case \"a\": return new Move.Left(0); case \"s\": return new Move.Down(0); case \"w\": return new Move.Up(0); case \"d\": return new Move.Right(0); case \"h\": return new Move.Left(1); case \"j\": return new Move.Down(1); case \"k\": return new Move.Up(1); case \"l\": return new Move.Right(1); default: return new InvalidInput(0,\"Invalid Input.\"); } }",
        "label": "P"
    },
    "122": {
        "dataset": "COMP 3021",
        "project": "owidjaja",
        "bug_id": "36",
        "T": "void testUndoWhenThereIsNoMove() { final var gameState = new GameState(TestHelper.parseGameMap(\"\"\" 233 ###### #A.a@# #..a@# ###### \"\"\" )); gameState.undo(); } private Entity generateEntity(int key) { return switch (key % 4) { case 0 -> new Box(0); case 1 -> new Empty(); case 2 -> new Player(0); case 3 -> new Wall(); default -> throw new ShouldNotReachException(); }; }",
        "C": "public GameState(@NotNull GameMap map) { // TODO this.originalMap = map; this.grid = map.grid; this.undoQuota = map.getUndoLimit(); this.playersChar = new ArrayList<>(); this.playersPos = new ArrayList<>(); // deep copy so that originalMap properties not changed for (int i=0; i<map.playersChar.size(); i++){ this.playersChar.add(map.playersChar.get(i)); this.playersPos.add(map.playersPos.get(i)); } this.boxesChar = new ArrayList<>(); this.boxesPos = new ArrayList<>(); for (int i=0; i<map.boxesChar.size(); i++){ this.boxesChar.add(map.boxesChar.get(i)); this.boxesPos.add(map.boxesPos.get(i)); } this.cpCount = 0; } public void undo() { // TODO if (this.undoQuota.get() < 1){ System.out.println(\"run out of quota\"); return; } if (this.cpState.empty()){ System.out.println(\"no prev cp\"); return; } System.out.println(\"undoing\"); this.undoQuota = Optional.of(undoQuota.get() - 1); System.out.println(this.getPlayerPositionById(0)); this.grid = (Entity [][]) this.cpState.pop(); this.playersPos = this.plaPosState.pop(); this.boxesPos = this.boxesPosState.pop(); System.out.println(this.getPlayerPositionById(0)); return; } /** * Get the maximum width of the game map. * This should be the same as that in {@link GameMap} public TerminalRenderingEngine(PrintStream outputSteam) { this.outputSteam = outputSteam; } public Box(int playerId) { this.playerId = playerId; } public Player(int id) { this.id = id; } public ShouldNotReachException() { super(\"This branch should not be reached.\"); }",
        "label": "P"
    },
    "123": {
        "dataset": "COMP 3021",
        "project": "owidjaja",
        "bug_id": "37",
        "T": "void testGetUndoUnlimited() { final var gameState = new GameState(TestHelper.parseGameMap(\"\"\" -1 ###### #.Aa@# #..a@# ###### \"\"\" )); }",
        "C": "public GameState(@NotNull GameMap map) { // TODO this.originalMap = map; this.grid = map.grid; this.undoQuota = map.getUndoLimit(); this.playersChar = new ArrayList<>(); this.playersPos = new ArrayList<>(); // deep copy so that originalMap properties not changed for (int i=0; i<map.playersChar.size(); i++){ this.playersChar.add(map.playersChar.get(i)); this.playersPos.add(map.playersPos.get(i)); } this.boxesChar = new ArrayList<>(); this.boxesPos = new ArrayList<>(); for (int i=0; i<map.boxesChar.size(); i++){ this.boxesChar.add(map.boxesChar.get(i)); this.boxesPos.add(map.boxesPos.get(i)); } this.cpCount = 0; }",
        "label": "P"
    },
    "124": {
        "dataset": "COMP 3021",
        "project": "owidjaja",
        "bug_id": "38",
        "T": "void testMapCopying() { final var maxWidth = 2333; final var maxHeight = 2333; final var random = new Random(); final var randomEntities = Stream.generate(() -> Position.of(random.nextInt(maxWidth), random.nextInt(maxHeight))) .distinct() .limit(100) .collect(Collectors.toMap(Function.identity(), it -> generateEntity(it.x()))); final var firstPos = randomEntities.keySet().stream().findFirst(); final var gameMap = new GameMap(maxWidth, maxHeight, Collections.singleton(firstPos.get()), 233); randomEntities.forEach(gameMap::putEntity); final var gameState = new GameState(gameMap); final var randomPosition = randomEntities.keySet().stream().findAny(); gameMap.putEntity(randomPosition.get(), new Empty()); randomEntities.forEach((p, e) -> assertEquals(e, gameState.getEntity(p))); }",
        "C": "public static @NotNull Position of(int x, int y) { return new Position(x, y); } public GameMap(int maxWidth, int maxHeight, Set<Position> destinations, int undoLimit) { // TODOx check this.maxWidth = maxWidth; this.maxHeight = maxHeight; this.undoLimit = undoLimit; this.destinations = destinations; } public GameState(@NotNull GameMap map) { // TODO this.originalMap = map; this.grid = map.grid; this.undoQuota = map.getUndoLimit(); this.playersChar = new ArrayList<>(); this.playersPos = new ArrayList<>(); // deep copy so that originalMap properties not changed for (int i=0; i<map.playersChar.size(); i++){ this.playersChar.add(map.playersChar.get(i)); this.playersPos.add(map.playersPos.get(i)); } this.boxesChar = new ArrayList<>(); this.boxesPos = new ArrayList<>(); for (int i=0; i<map.boxesChar.size(); i++){ this.boxesChar.add(map.boxesChar.get(i)); this.boxesPos.add(map.boxesPos.get(i)); } this.cpCount = 0; } public void putEntity(Position position, Entity entity) { // TODO check: not yet used // maybe to replace grid placement in active game states grid[position.y()][position.x()] = entity; throw new ShouldNotReachException(); } public @Nullable Entity getEntity(@NotNull Position position) { // TODOx: test return this.grid[position.y()][position.x()]; } /** * Get all box destination positions as a set in the game map. * This should be the same as that in {@link GameMap}",
        "label": "F"
    },
    "125": {
        "dataset": "COMP 3021",
        "project": "owidjaja",
        "bug_id": "39",
        "T": "void testUndoWhenThereIsMoveButNoCheckpoint() { final var gameState = new GameState(TestHelper.parseGameMap(\"\"\" 233 ###### #A.a@# #..a@# ###### \"\"\" )); gameState.move(Position.of(1, 1), Position.of(2, 1)); gameState.undo(); }",
        "C": "public GameState(@NotNull GameMap map) { // TODO this.originalMap = map; this.grid = map.grid; this.undoQuota = map.getUndoLimit(); this.playersChar = new ArrayList<>(); this.playersPos = new ArrayList<>(); // deep copy so that originalMap properties not changed for (int i=0; i<map.playersChar.size(); i++){ this.playersChar.add(map.playersChar.get(i)); this.playersPos.add(map.playersPos.get(i)); } this.boxesChar = new ArrayList<>(); this.boxesPos = new ArrayList<>(); for (int i=0; i<map.boxesChar.size(); i++){ this.boxesChar.add(map.boxesChar.get(i)); this.boxesPos.add(map.boxesPos.get(i)); } this.cpCount = 0; } public void move(Position from, Position to) { // TODOx: test Entity entFrom = this.grid[from.y()][from.x()]; this.grid[to.y()][to.x()] = entFrom; this.grid[from.y()][from.x()] = new Empty(); if (entFrom instanceof Player){ int pid = ((Player) entFrom).getId(); int ix = playersChar.indexOf((char) ('A'+pid)); playersPos.set(ix, to); } else if (entFrom instanceof Box) { int pid = ((Box) entFrom).getPlayerId(); int ix = boxesChar.indexOf((char) ('a'+pid)); boxesPos.set(ix, to); } } /** * Record a checkpoint of the game state, including: * <li>All current positions of entities in the game map.</li> * <li>Current undo quota</li> * <p> * Checkpoint is used in {@link GameState#undo()} public static @NotNull Position of(int x, int y) { return new Position(x, y); } public void undo() { // TODO if (this.undoQuota.get() < 1){ System.out.println(\"run out of quota\"); return; } if (this.cpState.empty()){ System.out.println(\"no prev cp\"); return; } System.out.println(\"undoing\"); this.undoQuota = Optional.of(undoQuota.get() - 1); System.out.println(this.getPlayerPositionById(0)); this.grid = (Entity [][]) this.cpState.pop(); this.playersPos = this.plaPosState.pop(); this.boxesPos = this.boxesPosState.pop(); System.out.println(this.getPlayerPositionById(0)); return; } /** * Get the maximum width of the game map. * This should be the same as that in {@link GameMap}",
        "label": "P"
    },
    "126": {
        "dataset": "COMP 3021",
        "project": "owidjaja",
        "bug_id": "40",
        "T": "void testGameExit() { final var gameState = mock(GameState.class); final var inputEngine = mock(TerminalInputEngine.class); final var renderingEngine = mock(TerminalRenderingEngine.class); when(gameState.isWin()).thenReturn(false, false, false); when(inputEngine.fetchAction()) .thenReturn(new InvalidInput(0, \"\"), new InvalidInput(0, \"\"), new Exit(0)); final var game = new TerminalSokobanGame(gameState, inputEngine, renderingEngine); game.run(); verify(renderingEngine, atLeastOnce()).message(any()); }",
        "C": "public InvalidInput(int initiator, @NotNull String message) { super(initiator); this.message = message; } public Exit(int initiator) { super(initiator); } public TerminalSokobanGame(GameState gameState, TerminalInputEngine inputEngine, TerminalRenderingEngine renderingEngine) { super(gameState); this.inputEngine = inputEngine; this.renderingEngine = renderingEngine; // TODO // Check the number of players int numPlayers = gameState.getAllPlayerPositions().size(); this.state = gameState; // throw new NotImplementedException(); } public void run() { // TODO // check isWin // check userinput if (this.state.isWin()){ return; } this.renderingEngine.render(this.state); }",
        "label": "F"
    },
    "127": {
        "dataset": "COMP 3021",
        "project": "owidjaja",
        "bug_id": "41",
        "T": "void testGameWin() { final var gameState = mock(GameState.class); final var inputEngine = mock(TerminalInputEngine.class); final var renderingEngine = mock(TerminalRenderingEngine.class); when(gameState.isWin()).thenReturn(false, false, false, true); when(inputEngine.fetchAction()) .thenReturn(new InvalidInput(0, \"\")); final var game = new TerminalSokobanGame(gameState, inputEngine, renderingEngine); game.run(); verify(gameState, atLeastOnce()).isWin(); verify(renderingEngine, atLeastOnce()).message(any()); }",
        "C": "public InvalidInput(int initiator, @NotNull String message) { super(initiator); this.message = message; } public TerminalSokobanGame(GameState gameState, TerminalInputEngine inputEngine, TerminalRenderingEngine renderingEngine) { super(gameState); this.inputEngine = inputEngine; this.renderingEngine = renderingEngine; // TODO // Check the number of players int numPlayers = gameState.getAllPlayerPositions().size(); this.state = gameState; // throw new NotImplementedException(); } public void run() { // TODO // check isWin // check userinput if (this.state.isWin()){ return; } this.renderingEngine.render(this.state); }",
        "label": "F"
    },
    "128": {
        "dataset": "COMP 3021",
        "project": "owidjaja",
        "bug_id": "42",
        "T": "void testMoreThanTwoPlayers() { final var gameState = mock(GameState.class); final var inputEngine = mock(TerminalInputEngine.class); final var renderingEngine = mock(TerminalRenderingEngine.class); when(gameState.getAllPlayerPositions()).thenReturn(new HashSet<>(Arrays.asList(Position.of(1, 1), Position.of(1, 2), Position.of(1, 3)))); }",
        "C": "public static @NotNull Position of(int x, int y) { return new Position(x, y); }",
        "label": "F"
    },
    "129": {
        "dataset": "COMP 3021",
        "project": "thsze",
        "bug_id": "0",
        "T": "void moveUp() { Position.of(233, 232), new Move.Up(-1).nextPosition(pos) ); }",
        "C": "public static @NotNull Position of(int x, int y) { return new Position(x, y); } public Up(int initiator) { super(initiator); }",
        "label": "F"
    },
    "130": {
        "dataset": "COMP 3021",
        "project": "thsze",
        "bug_id": "1",
        "T": "void moveDown() { Position.of(233, 234), new Move.Down(-1).nextPosition(pos) ); }",
        "C": "public static @NotNull Position of(int x, int y) { return new Position(x, y); } public Down(int initiator) { super(initiator); }",
        "label": "F"
    },
    "131": {
        "dataset": "COMP 3021",
        "project": "thsze",
        "bug_id": "2",
        "T": "void moveRight() { Position.of(234, 233), new Move.Right(-1).nextPosition(pos) ); }",
        "C": "public static @NotNull Position of(int x, int y) { return new Position(x, y); } public Right(int initiator) { super(initiator); }",
        "label": "F"
    },
    "132": {
        "dataset": "COMP 3021",
        "project": "thsze",
        "bug_id": "3",
        "T": "void testExceedingUndoQuota() { final var gameState = mock(GameState.class); when(gameState.getPlayerPositionById(anyInt())).thenReturn(Position.of(0, 0)); when(gameState.getUndoQuota()).thenReturn(Optional.of(0)); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Undo(0)); }",
        "C": "public Undo(int initiator) { super(initiator); }",
        "label": "F"
    },
    "133": {
        "dataset": "COMP 3021",
        "project": "thsze",
        "bug_id": "4",
        "T": "void testExit() { final var gameState = mock(GameState.class); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Exit(0)); }",
        "C": "public Exit(int initiator) { super(initiator); }",
        "label": "F"
    },
    "134": {
        "dataset": "COMP 3021",
        "project": "thsze",
        "bug_id": "5",
        "T": "void testUndoUnlimited() { final var gameState = mock(GameState.class); when(gameState.getPlayerPositionById(anyInt())).thenReturn(Position.of(0, 0)); when(gameState.getUndoQuota()).thenReturn(Optional.empty()); final var game = new SokobanGameForTesting(gameState); for (int i = 0; i < 10000; i++) { final var result = game.feedActionForProcessing(new Undo(0)); } verify(gameState, times(10000)).undo(); }",
        "C": "public TerminalRenderingEngine(PrintStream outputSteam) { this.outputSteam = outputSteam; } public Undo(int initiator) { super(initiator); }",
        "label": "F"
    },
    "135": {
        "dataset": "COMP 3021",
        "project": "thsze",
        "bug_id": "6",
        "T": "void testPushOtherPlayerBox() { String mapText = \"\"\" 233 ###### #AB.@# #b.a.# #@...# ###### \"\"\"; final var testMap = TestHelper.parseGameMap(mapText); final var gameState = spy(new GameState(testMap)); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Move.Down(0)); verify(gameState, never()).move(any(), any()); }",
        "C": "public GameState(@NotNull GameMap map) { // TODO curmap = map; undoquota = map.getUndoLimit().get(); //throw new NotImplementedException(); } public Down(int initiator) { super(initiator); }",
        "label": "F"
    },
    "136": {
        "dataset": "COMP 3021",
        "project": "thsze",
        "bug_id": "7",
        "T": "void testMoveNonExistingPlayer() { String mapText = \"\"\" 233 ###### #A..@# #a...# ##...# ###### \"\"\"; final var testMap = TestHelper.parseGameMap(mapText); final var gameState = spy(new GameState(testMap)); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Move.Down(23)); }",
        "C": "public GameState(@NotNull GameMap map) { // TODO curmap = map; undoquota = map.getUndoLimit().get(); //throw new NotImplementedException(); } public Down(int initiator) { super(initiator); }",
        "label": "F"
    },
    "137": {
        "dataset": "COMP 3021",
        "project": "thsze",
        "bug_id": "8",
        "T": "void testCheckpointWhenNeed() { final var gameState = spy(new GameState(TestHelper.parseGameMap(\"\"\" 233 ###### #.Aa@# #..a@# ###### \"\"\" ))); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Move.Right(0)); verify(gameState, times(1)).checkpoint(); }",
        "C": "public GameState(@NotNull GameMap map) { // TODO curmap = map; undoquota = map.getUndoLimit().get(); //throw new NotImplementedException(); } public Right(int initiator) { super(initiator); }",
        "label": "F"
    },
    "138": {
        "dataset": "COMP 3021",
        "project": "thsze",
        "bug_id": "9",
        "T": "void testPushBoxAgainstWall() { String mapText = \"\"\" 233 ###### #A..@# #a...# ##...# ###### \"\"\"; final var testMap = TestHelper.parseGameMap(mapText); final var gameState = spy(new GameState(testMap)); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Move.Down(0)); verify(gameState, never()).move(any(), any()); }",
        "C": "public GameState(@NotNull GameMap map) { // TODO curmap = map; undoquota = map.getUndoLimit().get(); //throw new NotImplementedException(); } public Down(int initiator) { super(initiator); }",
        "label": "F"
    },
    "139": {
        "dataset": "COMP 3021",
        "project": "thsze",
        "bug_id": "10",
        "T": "void testCheckpointWhenNotNeed() { final var gameState = spy(new GameState(TestHelper.parseGameMap(\"\"\" 233 ###### #A.a@# #..a@# ###### \"\"\" ))); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Move.Right(0)); verify(gameState, never()).checkpoint(); } private static class SokobanGameForTesting extends AbstractSokobanGame { protected SokobanGameForTesting(GameState gameState) { super(gameState); } @Override public void run() { } public ActionResult feedActionForProcessing(Action action) { return processAction(action); } }",
        "C": "public GameState(@NotNull GameMap map) { // TODO curmap = map; undoquota = map.getUndoLimit().get(); //throw new NotImplementedException(); } public Right(int initiator) { super(initiator); } public void run() { // TODO renderingEngine.render(state); inputEngine.fetchAction(); } protected ActionResult processAction(@NotNull Action action) { // TODO throw new NotImplementedException(); }",
        "label": "F"
    },
    "140": {
        "dataset": "COMP 3021",
        "project": "thsze",
        "bug_id": "11",
        "T": "void testHitAnotherPlayer() { String mapText = \"\"\" 233 ###### #A..@# #B...# #ab.@# ###### \"\"\"; final var testMap = TestHelper.parseGameMap(mapText); final var gameState = spy(new GameState(testMap)); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Move.Down(0)); verify(gameState, never()).move(any(), any()); }",
        "C": "public GameState(@NotNull GameMap map) { // TODO curmap = map; undoquota = map.getUndoLimit().get(); //throw new NotImplementedException(); } public Down(int initiator) { super(initiator); }",
        "label": "F"
    },
    "141": {
        "dataset": "COMP 3021",
        "project": "thsze",
        "bug_id": "12",
        "T": "void testUndoWithinQuota() { final var gameState = mock(GameState.class); when(gameState.getPlayerPositionById(anyInt())).thenReturn(Position.of(0, 0)); when(gameState.getUndoQuota()).thenReturn(Optional.of(1)); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Undo(0)); verify(gameState, times(1)).undo(); }",
        "C": "public Undo(int initiator) { super(initiator); }",
        "label": "F"
    },
    "142": {
        "dataset": "COMP 3021",
        "project": "thsze",
        "bug_id": "13",
        "T": "void testInvalidInput() { final var game = new SokobanGameForTesting(mock(GameState.class)); final var message = String.valueOf(new Random().nextLong()); final var action = new InvalidInput(-1, message); final var result = game.feedActionForProcessing(action); }",
        "C": "public InvalidInput(int initiator, @NotNull String message) { super(initiator); this.message = message; }",
        "label": "F"
    },
    "143": {
        "dataset": "COMP 3021",
        "project": "thsze",
        "bug_id": "14",
        "T": "void testUndoLimitParsing() { final var gameMap = TestHelper.parseGameMap(rectangularMap); }",
        "C": "",
        "label": "P"
    },
    "144": {
        "dataset": "COMP 3021",
        "project": "thsze",
        "bug_id": "15",
        "T": "void testWidthForNonRectangularMap() { final var gameMap = TestHelper.parseGameMap(nonRectangularMap); }",
        "C": "",
        "label": "F"
    },
    "145": {
        "dataset": "COMP 3021",
        "project": "thsze",
        "bug_id": "16",
        "T": "void testTwoPlayersMap() { final var twoPlayersMap = \"\"\" 233 ###### #A..@# #..B@# #....# #.a..# #..b.# ###### \"\"\"; final var gameMap = TestHelper.parseGameMap(twoPlayersMap); final var playerIds = gameMap.getPlayerIds(); final var expectedIds = new HashSet<Integer>(); expectedIds.add(0); expectedIds.add(1); }",
        "C": "public Set<Integer> getPlayerIds() { // TODO throw new NotImplementedException(); }",
        "label": "F"
    },
    "146": {
        "dataset": "COMP 3021",
        "project": "thsze",
        "bug_id": "17",
        "T": "void testMapWithoutPlayer() { final var invalidMap = \"\"\" 233 ### #.# ### \"\"\"; } // @Tag(TestKind.HIDDEN) // @Test // void testUnmatchedPlayersAndBoxes() { // final var invalidMap = \"\"\" // 233 // ###### // #A..@# // #...@# // #a.b@# // #.a.@# // #..a.# // ###### // \"\"\"; // assertThrowsExactly(IllegalArgumentException.class, () -> TestHelper.parseGameMap(invalidMap)); // }",
        "C": "public TerminalRenderingEngine(PrintStream outputSteam) { this.outputSteam = outputSteam; }",
        "label": "P"
    },
    "147": {
        "dataset": "COMP 3021",
        "project": "thsze",
        "bug_id": "18",
        "T": "void testManyPlayersMap() { final var manyPlayersMap = \"\"\" 233 ###### #A.P@@# #vCB@@# #.cpD@# #Ga.d@# #g.bV@# ###### \"\"\"; final var gameMap = TestHelper.parseGameMap(manyPlayersMap); final var playerIds = gameMap.getPlayerIds(); final var expectedIds = new HashSet<>(Arrays.asList( 0, 'P' - 'A', 'C' - 'A', 'B' - 'A', 'D' - 'A', 'G' - 'A', 'V' - 'A' )); }",
        "C": "public Set<Integer> getPlayerIds() { // TODO throw new NotImplementedException(); }",
        "label": "F"
    },
    "148": {
        "dataset": "COMP 3021",
        "project": "thsze",
        "bug_id": "19",
        "T": "void testHeightForNonRectangularMap() { final var gameMap = TestHelper.parseGameMap(nonRectangularMap); }",
        "C": "",
        "label": "F"
    },
    "149": {
        "dataset": "COMP 3021",
        "project": "thsze",
        "bug_id": "20",
        "T": "void testDuplicatedPlayers() { final var invalidMap = \"\"\" 233 ###### #A..@# #..A@# #....# #.a..# #..b.# ###### \"\"\"; }",
        "C": "",
        "label": "P"
    },
    "150": {
        "dataset": "COMP 3021",
        "project": "thsze",
        "bug_id": "21",
        "T": "void testParseMapWithoutUndoLimit() { final var invalidMap = String.join(\"\\n\", rectangularMap.lines().skip(1).toList()); }",
        "C": "",
        "label": "P"
    },
    "151": {
        "dataset": "COMP 3021",
        "project": "thsze",
        "bug_id": "22",
        "T": "void testInsufficientDestinations() { final var invalidMap = \"\"\" 233 ###### #A..@# #...@# #a...# #.a..# #..a.# ###### \"\"\"; }",
        "C": "",
        "label": "F"
    },
    "152": {
        "dataset": "COMP 3021",
        "project": "thsze",
        "bug_id": "23",
        "T": "void testSuperLargeMap() { try { new GameMap(Integer.MAX_VALUE, Integer.MAX_VALUE, Collections.emptySet(), 0); } catch (OutOfMemoryError e) { throw new RuntimeException(e); } }); }",
        "C": "public GameMap(int maxWidth, int maxHeight, Set<Position> destinations, int undoLimit) { // TODO width = maxWidth; height = maxHeight; destin = destinations; undonumber = undoLimit; // throw new NotImplementedException(); } /** * Parses the map from a string representation. * The first line is undo limit. * Starting from the second line, the game map is represented as follows, * <li># represents a {@link Wall}</li> * <li>@ represents a box destination.</li> * <li>Any upper-case letter represents a {@link Player}.</li> * <li> * Any lower-case letter represents a {@link Box} that is only movable by the player with the corresponding upper-case letter. * For instance, box \"a\" can only be moved by player \"A\" and not movable by player \"B\". * </li> * <li>. represents an {@link Empty} position in the map, meaning there is no player or box currently at this position.</li> * <p> * Notes: * <li> * There can be at most 26 players. * All implementations of classes in the hk.ust.comp3021.game package should support up to 26 players. * </li> * <li> * For simplicity, we assume the given map is bounded with a closed boundary. * There is no need to check this point. * </li> * <li> * Example maps can be found in \"src/main/resources\". * </li> * * @param mapText The string representation. * @return The parsed GameMap object. * @throws IllegalArgumentException if undo limit is negative but not -1. * @throws IllegalArgumentException if there are multiple same upper-case letters, i.e., one player can only exist at one position. * @throws IllegalArgumentException if there are no players in the map. * @throws IllegalArgumentException if the number of boxes is not equal to the number of box destinations. * @throws IllegalArgumentException if there are boxes whose {@link Box#getPlayerId()} public TerminalRenderingEngine(PrintStream outputSteam) { this.outputSteam = outputSteam; }",
        "label": "P"
    },
    "153": {
        "dataset": "COMP 3021",
        "project": "thsze",
        "bug_id": "24",
        "T": "void testInvalidUndoLimit() { final var invalidMap = \"\"\" -233 ###### #A..@# #...@# #a.b@# #.a.@# #..a.# ###### \"\"\"; }",
        "C": "",
        "label": "P"
    },
    "154": {
        "dataset": "COMP 3021",
        "project": "thsze",
        "bug_id": "25",
        "T": "void testEmptyMap() { final var invalidMap = \"\"; }",
        "C": "",
        "label": "P"
    },
    "155": {
        "dataset": "COMP 3021",
        "project": "thsze",
        "bug_id": "26",
        "T": "void testMove(String input, String name, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); } private InputStream fixValueStream(String content) { final var bytes = content.getBytes(StandardCharsets.UTF_8); return new ByteArrayInputStream(bytes); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine(); // TODO switch (inputLine){ case \"Exit\", \"exit\": return new Exit(0); case \"W\": return new Move.Up(0); case \"A\": return new Move.Left(0); case \"S\": return new Move.Down(0); case \"D\": return new Move.Right(0); case \"H\": return new Move.Left(1); case \"J\": return new Move.Down(1); case \"K\": return new Move.Up(1); case \"L\": return new Move.Right(1); case \"U\", \"u\", \"undo\": return new Undo(0); default: return new InvalidInput(0,\"Invalid input\"); } //throw new NotImplementedException(); }",
        "label": "P"
    },
    "156": {
        "dataset": "COMP 3021",
        "project": "thsze",
        "bug_id": "27",
        "T": "void testMove(String input, String name, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); } private InputStream fixValueStream(String content) { final var bytes = content.getBytes(StandardCharsets.UTF_8); return new ByteArrayInputStream(bytes); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine(); // TODO switch (inputLine){ case \"Exit\", \"exit\": return new Exit(0); case \"W\": return new Move.Up(0); case \"A\": return new Move.Left(0); case \"S\": return new Move.Down(0); case \"D\": return new Move.Right(0); case \"H\": return new Move.Left(1); case \"J\": return new Move.Down(1); case \"K\": return new Move.Up(1); case \"L\": return new Move.Right(1); case \"U\", \"u\", \"undo\": return new Undo(0); default: return new InvalidInput(0,\"Invalid input\"); } //throw new NotImplementedException(); }",
        "label": "P"
    },
    "157": {
        "dataset": "COMP 3021",
        "project": "thsze",
        "bug_id": "28",
        "T": "void testMove(String input, String name, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); } private InputStream fixValueStream(String content) { final var bytes = content.getBytes(StandardCharsets.UTF_8); return new ByteArrayInputStream(bytes); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine(); // TODO switch (inputLine){ case \"Exit\", \"exit\": return new Exit(0); case \"W\": return new Move.Up(0); case \"A\": return new Move.Left(0); case \"S\": return new Move.Down(0); case \"D\": return new Move.Right(0); case \"H\": return new Move.Left(1); case \"J\": return new Move.Down(1); case \"K\": return new Move.Up(1); case \"L\": return new Move.Right(1); case \"U\", \"u\", \"undo\": return new Undo(0); default: return new InvalidInput(0,\"Invalid input\"); } //throw new NotImplementedException(); }",
        "label": "P"
    },
    "158": {
        "dataset": "COMP 3021",
        "project": "thsze",
        "bug_id": "29",
        "T": "void testMove(String input, String name, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); } private InputStream fixValueStream(String content) { final var bytes = content.getBytes(StandardCharsets.UTF_8); return new ByteArrayInputStream(bytes); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine(); // TODO switch (inputLine){ case \"Exit\", \"exit\": return new Exit(0); case \"W\": return new Move.Up(0); case \"A\": return new Move.Left(0); case \"S\": return new Move.Down(0); case \"D\": return new Move.Right(0); case \"H\": return new Move.Left(1); case \"J\": return new Move.Down(1); case \"K\": return new Move.Up(1); case \"L\": return new Move.Right(1); case \"U\", \"u\", \"undo\": return new Undo(0); default: return new InvalidInput(0,\"Invalid input\"); } //throw new NotImplementedException(); }",
        "label": "P"
    },
    "159": {
        "dataset": "COMP 3021",
        "project": "thsze",
        "bug_id": "30",
        "T": "void testMove(String input, String name, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); } private InputStream fixValueStream(String content) { final var bytes = content.getBytes(StandardCharsets.UTF_8); return new ByteArrayInputStream(bytes); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine(); // TODO switch (inputLine){ case \"Exit\", \"exit\": return new Exit(0); case \"W\": return new Move.Up(0); case \"A\": return new Move.Left(0); case \"S\": return new Move.Down(0); case \"D\": return new Move.Right(0); case \"H\": return new Move.Left(1); case \"J\": return new Move.Down(1); case \"K\": return new Move.Up(1); case \"L\": return new Move.Right(1); case \"U\", \"u\", \"undo\": return new Undo(0); default: return new InvalidInput(0,\"Invalid input\"); } //throw new NotImplementedException(); }",
        "label": "P"
    },
    "160": {
        "dataset": "COMP 3021",
        "project": "thsze",
        "bug_id": "31",
        "T": "void testMove(String input, String name, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); } private InputStream fixValueStream(String content) { final var bytes = content.getBytes(StandardCharsets.UTF_8); return new ByteArrayInputStream(bytes); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine(); // TODO switch (inputLine){ case \"Exit\", \"exit\": return new Exit(0); case \"W\": return new Move.Up(0); case \"A\": return new Move.Left(0); case \"S\": return new Move.Down(0); case \"D\": return new Move.Right(0); case \"H\": return new Move.Left(1); case \"J\": return new Move.Down(1); case \"K\": return new Move.Up(1); case \"L\": return new Move.Right(1); case \"U\", \"u\", \"undo\": return new Undo(0); default: return new InvalidInput(0,\"Invalid input\"); } //throw new NotImplementedException(); }",
        "label": "P"
    },
    "161": {
        "dataset": "COMP 3021",
        "project": "thsze",
        "bug_id": "32",
        "T": "void testMove(String input, String name, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); } private InputStream fixValueStream(String content) { final var bytes = content.getBytes(StandardCharsets.UTF_8); return new ByteArrayInputStream(bytes); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine(); // TODO switch (inputLine){ case \"Exit\", \"exit\": return new Exit(0); case \"W\": return new Move.Up(0); case \"A\": return new Move.Left(0); case \"S\": return new Move.Down(0); case \"D\": return new Move.Right(0); case \"H\": return new Move.Left(1); case \"J\": return new Move.Down(1); case \"K\": return new Move.Up(1); case \"L\": return new Move.Right(1); case \"U\", \"u\", \"undo\": return new Undo(0); default: return new InvalidInput(0,\"Invalid input\"); } //throw new NotImplementedException(); }",
        "label": "P"
    },
    "162": {
        "dataset": "COMP 3021",
        "project": "thsze",
        "bug_id": "33",
        "T": "void testMove(String input, String name, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); } private InputStream fixValueStream(String content) { final var bytes = content.getBytes(StandardCharsets.UTF_8); return new ByteArrayInputStream(bytes); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine(); // TODO switch (inputLine){ case \"Exit\", \"exit\": return new Exit(0); case \"W\": return new Move.Up(0); case \"A\": return new Move.Left(0); case \"S\": return new Move.Down(0); case \"D\": return new Move.Right(0); case \"H\": return new Move.Left(1); case \"J\": return new Move.Down(1); case \"K\": return new Move.Up(1); case \"L\": return new Move.Right(1); case \"U\", \"u\", \"undo\": return new Undo(0); default: return new InvalidInput(0,\"Invalid input\"); } //throw new NotImplementedException(); }",
        "label": "P"
    },
    "163": {
        "dataset": "COMP 3021",
        "project": "thsze",
        "bug_id": "34",
        "T": "void testUndo(String input, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine(); // TODO switch (inputLine){ case \"Exit\", \"exit\": return new Exit(0); case \"W\": return new Move.Up(0); case \"A\": return new Move.Left(0); case \"S\": return new Move.Down(0); case \"D\": return new Move.Right(0); case \"H\": return new Move.Left(1); case \"J\": return new Move.Down(1); case \"K\": return new Move.Up(1); case \"L\": return new Move.Right(1); case \"U\", \"u\", \"undo\": return new Undo(0); default: return new InvalidInput(0,\"Invalid input\"); } //throw new NotImplementedException(); }",
        "label": "P"
    },
    "164": {
        "dataset": "COMP 3021",
        "project": "thsze",
        "bug_id": "35",
        "T": "void testInvalidInput() { final var inputStream = fixValueStream(\"blah blah\"); final var inputEngine = new TerminalInputEngine(inputStream); final var action = inputEngine.fetchAction(); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine(); // TODO switch (inputLine){ case \"Exit\", \"exit\": return new Exit(0); case \"W\": return new Move.Up(0); case \"A\": return new Move.Left(0); case \"S\": return new Move.Down(0); case \"D\": return new Move.Right(0); case \"H\": return new Move.Left(1); case \"J\": return new Move.Down(1); case \"K\": return new Move.Up(1); case \"L\": return new Move.Right(1); case \"U\", \"u\", \"undo\": return new Undo(0); default: return new InvalidInput(0,\"Invalid input\"); } //throw new NotImplementedException(); }",
        "label": "P"
    },
    "165": {
        "dataset": "COMP 3021",
        "project": "thsze",
        "bug_id": "36",
        "T": "void testUndoWhenThereIsNoMove() { final var gameState = new GameState(TestHelper.parseGameMap(\"\"\" 233 ###### #A.a@# #..a@# ###### \"\"\" )); gameState.undo(); } private Entity generateEntity(int key) { return switch (key % 4) { case 0 -> new Box(0); case 1 -> new Empty(); case 2 -> new Player(0); case 3 -> new Wall(); default -> throw new ShouldNotReachException(); }; }",
        "C": "public GameState(@NotNull GameMap map) { // TODO curmap = map; undoquota = map.getUndoLimit().get(); //throw new NotImplementedException(); } public void undo() { // TODO throw new NotImplementedException(); } /** * Get the maximum width of the game map. * This should be the same as that in {@link GameMap} public TerminalRenderingEngine(PrintStream outputSteam) { this.outputSteam = outputSteam; } public Box(int playerId) { this.playerId = playerId; numbox ++; } public Player(int id) { this.id = id; numplayer++; } public ShouldNotReachException() { super(\"This branch should not be reached.\"); }",
        "label": "F"
    },
    "166": {
        "dataset": "COMP 3021",
        "project": "thsze",
        "bug_id": "37",
        "T": "void testGetUndoUnlimited() { final var gameState = new GameState(TestHelper.parseGameMap(\"\"\" -1 ###### #.Aa@# #..a@# ###### \"\"\" )); }",
        "C": "public GameState(@NotNull GameMap map) { // TODO curmap = map; undoquota = map.getUndoLimit().get(); //throw new NotImplementedException(); }",
        "label": "F"
    },
    "167": {
        "dataset": "COMP 3021",
        "project": "thsze",
        "bug_id": "38",
        "T": "void testMapCopying() { final var maxWidth = 2333; final var maxHeight = 2333; final var random = new Random(); final var randomEntities = Stream.generate(() -> Position.of(random.nextInt(maxWidth), random.nextInt(maxHeight))) .distinct() .limit(100) .collect(Collectors.toMap(Function.identity(), it -> generateEntity(it.x()))); final var firstPos = randomEntities.keySet().stream().findFirst(); final var gameMap = new GameMap(maxWidth, maxHeight, Collections.singleton(firstPos.get()), 233); randomEntities.forEach(gameMap::putEntity); final var gameState = new GameState(gameMap); final var randomPosition = randomEntities.keySet().stream().findAny(); gameMap.putEntity(randomPosition.get(), new Empty()); randomEntities.forEach((p, e) -> assertEquals(e, gameState.getEntity(p))); }",
        "C": "public static @NotNull Position of(int x, int y) { return new Position(x, y); } public GameMap(int maxWidth, int maxHeight, Set<Position> destinations, int undoLimit) { // TODO width = maxWidth; height = maxHeight; destin = destinations; undonumber = undoLimit; // throw new NotImplementedException(); } /** * Parses the map from a string representation. * The first line is undo limit. * Starting from the second line, the game map is represented as follows, * <li># represents a {@link Wall}</li> * <li>@ represents a box destination.</li> * <li>Any upper-case letter represents a {@link Player}.</li> * <li> * Any lower-case letter represents a {@link Box} that is only movable by the player with the corresponding upper-case letter. * For instance, box \"a\" can only be moved by player \"A\" and not movable by player \"B\". * </li> * <li>. represents an {@link Empty} position in the map, meaning there is no player or box currently at this position.</li> * <p> * Notes: * <li> * There can be at most 26 players. * All implementations of classes in the hk.ust.comp3021.game package should support up to 26 players. * </li> * <li> * For simplicity, we assume the given map is bounded with a closed boundary. * There is no need to check this point. * </li> * <li> * Example maps can be found in \"src/main/resources\". * </li> * * @param mapText The string representation. * @return The parsed GameMap object. * @throws IllegalArgumentException if undo limit is negative but not -1. * @throws IllegalArgumentException if there are multiple same upper-case letters, i.e., one player can only exist at one position. * @throws IllegalArgumentException if there are no players in the map. * @throws IllegalArgumentException if the number of boxes is not equal to the number of box destinations. * @throws IllegalArgumentException if there are boxes whose {@link Box#getPlayerId()} public GameState(@NotNull GameMap map) { // TODO curmap = map; undoquota = map.getUndoLimit().get(); //throw new NotImplementedException(); } public void putEntity(Position position, Entity entity) { // TODO if (entity instanceof Wall) { map.get(position.y()).set(position.x(), \"&\"); } else if (entity instanceof Player) { map.get(position.y()).set(position.x(), String.valueOf((char)((Player) entity).getId())); } else if (entity instanceof Box){ map.get(position.y()).set(position.x(), String.valueOf((char)((Box) entity).getPlayerId())); } else { map.get(position.y()).set(position.x(), \" \"); } //throw new NotImplementedException(); } public @Nullable Entity getEntity(@NotNull Position position) { // TODO return curmap.getEntity(position); //throw new NotImplementedException(); } /** * Get all box destination positions as a set in the game map. * This should be the same as that in {@link GameMap}",
        "label": "F"
    },
    "168": {
        "dataset": "COMP 3021",
        "project": "thsze",
        "bug_id": "39",
        "T": "void testUndoWhenThereIsMoveButNoCheckpoint() { final var gameState = new GameState(TestHelper.parseGameMap(\"\"\" 233 ###### #A.a@# #..a@# ###### \"\"\" )); gameState.move(Position.of(1, 1), Position.of(2, 1)); gameState.undo(); }",
        "C": "public GameState(@NotNull GameMap map) { // TODO curmap = map; undoquota = map.getUndoLimit().get(); //throw new NotImplementedException(); } public void move(Position from, Position to) { // TODO throw new NotImplementedException(); } /** * Record a checkpoint of the game state, including: * <li>All current positions of entities in the game map.</li> * <li>Current undo quota</li> * <p> * Checkpoint is used in {@link GameState#undo()} public static @NotNull Position of(int x, int y) { return new Position(x, y); } public void undo() { // TODO throw new NotImplementedException(); } /** * Get the maximum width of the game map. * This should be the same as that in {@link GameMap}",
        "label": "F"
    },
    "169": {
        "dataset": "COMP 3021",
        "project": "thsze",
        "bug_id": "40",
        "T": "void testGameExit() { final var gameState = mock(GameState.class); final var inputEngine = mock(TerminalInputEngine.class); final var renderingEngine = mock(TerminalRenderingEngine.class); when(gameState.isWin()).thenReturn(false, false, false); when(inputEngine.fetchAction()) .thenReturn(new InvalidInput(0, \"\"), new InvalidInput(0, \"\"), new Exit(0)); final var game = new TerminalSokobanGame(gameState, inputEngine, renderingEngine); game.run(); verify(renderingEngine, atLeastOnce()).message(any()); }",
        "C": "public InvalidInput(int initiator, @NotNull String message) { super(initiator); this.message = message; } public Exit(int initiator) { super(initiator); } public TerminalSokobanGame(GameState gameState, TerminalInputEngine inputEngine, TerminalRenderingEngine renderingEngine) { super(gameState); this.inputEngine = inputEngine; this.renderingEngine = renderingEngine; // TODO // Check the number of players numplayer = gameState.getAllPlayerPositions().size(); // throw new NotImplementedException(); } public void run() { // TODO renderingEngine.render(state); inputEngine.fetchAction(); }",
        "label": "F"
    },
    "170": {
        "dataset": "COMP 3021",
        "project": "thsze",
        "bug_id": "41",
        "T": "void testGameWin() { final var gameState = mock(GameState.class); final var inputEngine = mock(TerminalInputEngine.class); final var renderingEngine = mock(TerminalRenderingEngine.class); when(gameState.isWin()).thenReturn(false, false, false, true); when(inputEngine.fetchAction()) .thenReturn(new InvalidInput(0, \"\")); final var game = new TerminalSokobanGame(gameState, inputEngine, renderingEngine); game.run(); verify(gameState, atLeastOnce()).isWin(); verify(renderingEngine, atLeastOnce()).message(any()); }",
        "C": "public InvalidInput(int initiator, @NotNull String message) { super(initiator); this.message = message; } public TerminalSokobanGame(GameState gameState, TerminalInputEngine inputEngine, TerminalRenderingEngine renderingEngine) { super(gameState); this.inputEngine = inputEngine; this.renderingEngine = renderingEngine; // TODO // Check the number of players numplayer = gameState.getAllPlayerPositions().size(); // throw new NotImplementedException(); } public void run() { // TODO renderingEngine.render(state); inputEngine.fetchAction(); }",
        "label": "F"
    },
    "171": {
        "dataset": "COMP 3021",
        "project": "thsze",
        "bug_id": "42",
        "T": "void testMoreThanTwoPlayers() { final var gameState = mock(GameState.class); final var inputEngine = mock(TerminalInputEngine.class); final var renderingEngine = mock(TerminalRenderingEngine.class); when(gameState.getAllPlayerPositions()).thenReturn(new HashSet<>(Arrays.asList(Position.of(1, 1), Position.of(1, 2), Position.of(1, 3)))); }",
        "C": "public static @NotNull Position of(int x, int y) { return new Position(x, y); }",
        "label": "F"
    },
    "172": {
        "dataset": "COMP 3021",
        "project": "hwangem",
        "bug_id": "0",
        "T": "void moveUp() { Position.of(233, 232), new Move.Up(-1).nextPosition(pos) ); }",
        "C": "public static @NotNull Position of(int x, int y) { return new Position(x, y); } public Up(int initiator) { super(initiator); }",
        "label": "P"
    },
    "173": {
        "dataset": "COMP 3021",
        "project": "hwangem",
        "bug_id": "1",
        "T": "void moveDown() { Position.of(233, 234), new Move.Down(-1).nextPosition(pos) ); }",
        "C": "public static @NotNull Position of(int x, int y) { return new Position(x, y); } public Down(int initiator) { super(initiator); }",
        "label": "P"
    },
    "174": {
        "dataset": "COMP 3021",
        "project": "hwangem",
        "bug_id": "2",
        "T": "void moveRight() { Position.of(234, 233), new Move.Right(-1).nextPosition(pos) ); }",
        "C": "public static @NotNull Position of(int x, int y) { return new Position(x, y); } public Right(int initiator) { super(initiator); }",
        "label": "P"
    },
    "175": {
        "dataset": "COMP 3021",
        "project": "hwangem",
        "bug_id": "3",
        "T": "void testExceedingUndoQuota() { final var gameState = mock(GameState.class); when(gameState.getPlayerPositionById(anyInt())).thenReturn(Position.of(0, 0)); when(gameState.getUndoQuota()).thenReturn(Optional.of(0)); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Undo(0)); }",
        "C": "public Undo(int initiator) { super(initiator); }",
        "label": "P"
    },
    "176": {
        "dataset": "COMP 3021",
        "project": "hwangem",
        "bug_id": "4",
        "T": "void testExit() { final var gameState = mock(GameState.class); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Exit(0)); }",
        "C": "public Exit(int initiator) { super(initiator); }",
        "label": "P"
    },
    "177": {
        "dataset": "COMP 3021",
        "project": "hwangem",
        "bug_id": "5",
        "T": "void testUndoUnlimited() { final var gameState = mock(GameState.class); when(gameState.getPlayerPositionById(anyInt())).thenReturn(Position.of(0, 0)); when(gameState.getUndoQuota()).thenReturn(Optional.empty()); final var game = new SokobanGameForTesting(gameState); for (int i = 0; i < 10000; i++) { final var result = game.feedActionForProcessing(new Undo(0)); } verify(gameState, times(10000)).undo(); }",
        "C": "public TerminalRenderingEngine(PrintStream outputSteam) { this.outputSteam = outputSteam; } public Undo(int initiator) { super(initiator); }",
        "label": "F"
    },
    "178": {
        "dataset": "COMP 3021",
        "project": "hwangem",
        "bug_id": "6",
        "T": "void testPushOtherPlayerBox() { String mapText = \"\"\" 233 ###### #AB.@# #b.a.# #@...# ###### \"\"\"; final var testMap = TestHelper.parseGameMap(mapText); final var gameState = spy(new GameState(testMap)); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Move.Down(0)); verify(gameState, never()).move(any(), any()); }",
        "C": "public GameState(@NotNull GameMap map) { // TODO this.gameMap = map; undoQuota = map.getUndoLimit().get(); history = null; } public Down(int initiator) { super(initiator); }",
        "label": "P"
    },
    "179": {
        "dataset": "COMP 3021",
        "project": "hwangem",
        "bug_id": "7",
        "T": "void testMoveNonExistingPlayer() { String mapText = \"\"\" 233 ###### #A..@# #a...# ##...# ###### \"\"\"; final var testMap = TestHelper.parseGameMap(mapText); final var gameState = spy(new GameState(testMap)); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Move.Down(23)); }",
        "C": "public GameState(@NotNull GameMap map) { // TODO this.gameMap = map; undoQuota = map.getUndoLimit().get(); history = null; } public Down(int initiator) { super(initiator); }",
        "label": "F"
    },
    "180": {
        "dataset": "COMP 3021",
        "project": "hwangem",
        "bug_id": "8",
        "T": "void testCheckpointWhenNeed() { final var gameState = spy(new GameState(TestHelper.parseGameMap(\"\"\" 233 ###### #.Aa@# #..a@# ###### \"\"\" ))); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Move.Right(0)); verify(gameState, times(1)).checkpoint(); }",
        "C": "public GameState(@NotNull GameMap map) { // TODO this.gameMap = map; undoQuota = map.getUndoLimit().get(); history = null; } public Right(int initiator) { super(initiator); }",
        "label": "P"
    },
    "181": {
        "dataset": "COMP 3021",
        "project": "hwangem",
        "bug_id": "9",
        "T": "void testPushBoxAgainstWall() { String mapText = \"\"\" 233 ###### #A..@# #a...# ##...# ###### \"\"\"; final var testMap = TestHelper.parseGameMap(mapText); final var gameState = spy(new GameState(testMap)); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Move.Down(0)); verify(gameState, never()).move(any(), any()); }",
        "C": "public GameState(@NotNull GameMap map) { // TODO this.gameMap = map; undoQuota = map.getUndoLimit().get(); history = null; } public Down(int initiator) { super(initiator); }",
        "label": "P"
    },
    "182": {
        "dataset": "COMP 3021",
        "project": "hwangem",
        "bug_id": "10",
        "T": "void testCheckpointWhenNotNeed() { final var gameState = spy(new GameState(TestHelper.parseGameMap(\"\"\" 233 ###### #A.a@# #..a@# ###### \"\"\" ))); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Move.Right(0)); verify(gameState, never()).checkpoint(); } private static class SokobanGameForTesting extends AbstractSokobanGame { protected SokobanGameForTesting(GameState gameState) { super(gameState); } @Override public void run() { } public ActionResult feedActionForProcessing(Action action) { return processAction(action); } }",
        "C": "public GameState(@NotNull GameMap map) { // TODO this.gameMap = map; undoQuota = map.getUndoLimit().get(); history = null; } public Right(int initiator) { super(initiator); } public void run() { // TODO this.renderingEngine.message(\"Sokoban game is ready.\"); this.renderingEngine.render(this.state); if(this.state.getUndoQuota().isPresent())this.renderingEngine.message(\"Undo Quota: \" + (this.state.getUndoQuota().get() == -1 ? \"unlimited\":this.state.getUndoQuota().get())); while(this.shouldStop() == false){ var result = this.processAction(this.inputEngine.fetchAction()); switch(result){ case ActionResult.Success ignored: break; case ActionResult.Failed failed_: System.out.println(failed_.getReason()); break; } this.renderingEngine.render(this.state); if(this.state.getUndoQuota().isPresent())this.renderingEngine.message(\"Undo Quota: \" + (this.state.getUndoQuota().get() == -1 ? \"unlimited\":this.state.getUndoQuota().get())); } } protected ActionResult processAction(@NotNull Action action) { // TODO ActionResult AR = new ActionResult.Success(action); switch(action){ case Undo ignored : if(this.state.getUndoQuota().get() == -1 || this.state.getUndoQuota().get() > 0) this.state.undo(); else AR = new ActionResult.Failed(action, \"You have run out of your undo quota.\"); break; case Move move_ : Position PlayerPos = this.state.getPlayerPositionById(move_.getInitiator()); Position NextPos = move_.nextPosition(PlayerPos); var entity = this.state.getEntity(NextPos); switch(entity){ case Empty ignored: this.state.move(PlayerPos, NextPos); break; case Box box_: if(box_.getPlayerId() == action.getInitiator()){ Position NextBoxPos = move_.nextPosition(NextPos); if(this.state.isEmpty(NextBoxPos)){ this.state.checkpoint(); this.state.move(NextPos, NextBoxPos); this.state.move(PlayerPos, NextPos); } else AR = new ActionResult.Failed(action,\"Failed to push the box.\"); } else AR = new ActionResult.Failed(action, \"You cannot move other players' boxes.\"); break; case Wall ignored: AR = new ActionResult.Failed(action,\"You hit the wall.\"); break; case Player ignored: AR = new ActionResult.Failed(action,\"You hit another player.\"); break; } break; case Exit ignored : this.isExit = true; break; case default : AR = new ActionResult.Failed(action, \"Invaild Input.\"); break; } return AR; }",
        "label": "P"
    },
    "183": {
        "dataset": "COMP 3021",
        "project": "hwangem",
        "bug_id": "11",
        "T": "void testHitAnotherPlayer() { String mapText = \"\"\" 233 ###### #A..@# #B...# #ab.@# ###### \"\"\"; final var testMap = TestHelper.parseGameMap(mapText); final var gameState = spy(new GameState(testMap)); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Move.Down(0)); verify(gameState, never()).move(any(), any()); }",
        "C": "public GameState(@NotNull GameMap map) { // TODO this.gameMap = map; undoQuota = map.getUndoLimit().get(); history = null; } public Down(int initiator) { super(initiator); }",
        "label": "P"
    },
    "184": {
        "dataset": "COMP 3021",
        "project": "hwangem",
        "bug_id": "12",
        "T": "void testUndoWithinQuota() { final var gameState = mock(GameState.class); when(gameState.getPlayerPositionById(anyInt())).thenReturn(Position.of(0, 0)); when(gameState.getUndoQuota()).thenReturn(Optional.of(1)); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Undo(0)); verify(gameState, times(1)).undo(); }",
        "C": "public Undo(int initiator) { super(initiator); }",
        "label": "P"
    },
    "185": {
        "dataset": "COMP 3021",
        "project": "hwangem",
        "bug_id": "13",
        "T": "void testInvalidInput() { final var game = new SokobanGameForTesting(mock(GameState.class)); final var message = String.valueOf(new Random().nextLong()); final var action = new InvalidInput(-1, message); final var result = game.feedActionForProcessing(action); }",
        "C": "public InvalidInput(int initiator, @NotNull String message) { super(initiator); this.message = message; }",
        "label": "P"
    },
    "186": {
        "dataset": "COMP 3021",
        "project": "hwangem",
        "bug_id": "14",
        "T": "void testUndoLimitParsing() { final var gameMap = TestHelper.parseGameMap(rectangularMap); }",
        "C": "",
        "label": "P"
    },
    "187": {
        "dataset": "COMP 3021",
        "project": "hwangem",
        "bug_id": "15",
        "T": "void testWidthForNonRectangularMap() { final var gameMap = TestHelper.parseGameMap(nonRectangularMap); }",
        "C": "",
        "label": "P"
    },
    "188": {
        "dataset": "COMP 3021",
        "project": "hwangem",
        "bug_id": "16",
        "T": "void testTwoPlayersMap() { final var twoPlayersMap = \"\"\" 233 ###### #A..@# #..B@# #....# #.a..# #..b.# ###### \"\"\"; final var gameMap = TestHelper.parseGameMap(twoPlayersMap); final var playerIds = gameMap.getPlayerIds(); final var expectedIds = new HashSet<Integer>(); expectedIds.add(0); expectedIds.add(1); }",
        "C": "public Set<Integer> getPlayerIds() { // TODO return this.PlayerIds; }",
        "label": "P"
    },
    "189": {
        "dataset": "COMP 3021",
        "project": "hwangem",
        "bug_id": "17",
        "T": "void testMapWithoutPlayer() { final var invalidMap = \"\"\" 233 ### #.# ### \"\"\"; } // @Tag(TestKind.HIDDEN) // @Test // void testUnmatchedPlayersAndBoxes() { // final var invalidMap = \"\"\" // 233 // ###### // #A..@# // #...@# // #a.b@# // #.a.@# // #..a.# // ###### // \"\"\"; // assertThrowsExactly(IllegalArgumentException.class, () -> TestHelper.parseGameMap(invalidMap)); // }",
        "C": "public TerminalRenderingEngine(PrintStream outputSteam) { this.outputSteam = outputSteam; }",
        "label": "P"
    },
    "190": {
        "dataset": "COMP 3021",
        "project": "hwangem",
        "bug_id": "18",
        "T": "void testManyPlayersMap() { final var manyPlayersMap = \"\"\" 233 ###### #A.P@@# #vCB@@# #.cpD@# #Ga.d@# #g.bV@# ###### \"\"\"; final var gameMap = TestHelper.parseGameMap(manyPlayersMap); final var playerIds = gameMap.getPlayerIds(); final var expectedIds = new HashSet<>(Arrays.asList( 0, 'P' - 'A', 'C' - 'A', 'B' - 'A', 'D' - 'A', 'G' - 'A', 'V' - 'A' )); }",
        "C": "public Set<Integer> getPlayerIds() { // TODO return this.PlayerIds; }",
        "label": "P"
    },
    "191": {
        "dataset": "COMP 3021",
        "project": "hwangem",
        "bug_id": "19",
        "T": "void testHeightForNonRectangularMap() { final var gameMap = TestHelper.parseGameMap(nonRectangularMap); }",
        "C": "",
        "label": "P"
    },
    "192": {
        "dataset": "COMP 3021",
        "project": "hwangem",
        "bug_id": "20",
        "T": "void testDuplicatedPlayers() { final var invalidMap = \"\"\" 233 ###### #A..@# #..A@# #....# #.a..# #..b.# ###### \"\"\"; }",
        "C": "",
        "label": "P"
    },
    "193": {
        "dataset": "COMP 3021",
        "project": "hwangem",
        "bug_id": "21",
        "T": "void testParseMapWithoutUndoLimit() { final var invalidMap = String.join(\"\\n\", rectangularMap.lines().skip(1).toList()); }",
        "C": "",
        "label": "P"
    },
    "194": {
        "dataset": "COMP 3021",
        "project": "hwangem",
        "bug_id": "22",
        "T": "void testInsufficientDestinations() { final var invalidMap = \"\"\" 233 ###### #A..@# #...@# #a...# #.a..# #..a.# ###### \"\"\"; }",
        "C": "",
        "label": "P"
    },
    "195": {
        "dataset": "COMP 3021",
        "project": "hwangem",
        "bug_id": "23",
        "T": "void testSuperLargeMap() { try { new GameMap(Integer.MAX_VALUE, Integer.MAX_VALUE, Collections.emptySet(), 0); } catch (OutOfMemoryError e) { throw new RuntimeException(e); } }); }",
        "C": "public GameMap(int maxWidth, int maxHeight, Set<Position> destinations, int undoLimit) { // TODO this.maxHeight = maxHeight; this.maxWidth = maxWidth; this.destinations = destinations; this.undoLimit = undoLimit; } public TerminalRenderingEngine(PrintStream outputSteam) { this.outputSteam = outputSteam; }",
        "label": "P"
    },
    "196": {
        "dataset": "COMP 3021",
        "project": "hwangem",
        "bug_id": "24",
        "T": "void testInvalidUndoLimit() { final var invalidMap = \"\"\" -233 ###### #A..@# #...@# #a.b@# #.a.@# #..a.# ###### \"\"\"; }",
        "C": "",
        "label": "P"
    },
    "197": {
        "dataset": "COMP 3021",
        "project": "hwangem",
        "bug_id": "25",
        "T": "void testEmptyMap() { final var invalidMap = \"\"; }",
        "C": "",
        "label": "P"
    },
    "198": {
        "dataset": "COMP 3021",
        "project": "hwangem",
        "bug_id": "26",
        "T": "void testMove(String input, String name, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); } private InputStream fixValueStream(String content) { final var bytes = content.getBytes(StandardCharsets.UTF_8); return new ByteArrayInputStream(bytes); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine(); // TODO if(inputLine.equalsIgnoreCase(\"Exit\")) return new Exit(0); if(inputLine.equalsIgnoreCase(\"U\")) return new Undo(0); Action result = switch (inputLine){ case \"A\", \"a\" -> new Move.Left(0); case \"S\", \"s\" -> new Move.Down(0); case \"W\", \"w\" -> new Move.Up(0); case \"D\", \"d\" -> new Move.Right(0); case \"H\", \"h\" -> new Move.Left(1); case \"J\", \"j\" -> new Move.Down(1); case \"K\", \"k\" -> new Move.Up(1); case \"L\", \"l\" -> new Move.Right(1); default -> new InvalidInput(0, \"Invalid Input.\"); }; return result; }",
        "label": "P"
    },
    "199": {
        "dataset": "COMP 3021",
        "project": "hwangem",
        "bug_id": "27",
        "T": "void testMove(String input, String name, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); } private InputStream fixValueStream(String content) { final var bytes = content.getBytes(StandardCharsets.UTF_8); return new ByteArrayInputStream(bytes); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine(); // TODO if(inputLine.equalsIgnoreCase(\"Exit\")) return new Exit(0); if(inputLine.equalsIgnoreCase(\"U\")) return new Undo(0); Action result = switch (inputLine){ case \"A\", \"a\" -> new Move.Left(0); case \"S\", \"s\" -> new Move.Down(0); case \"W\", \"w\" -> new Move.Up(0); case \"D\", \"d\" -> new Move.Right(0); case \"H\", \"h\" -> new Move.Left(1); case \"J\", \"j\" -> new Move.Down(1); case \"K\", \"k\" -> new Move.Up(1); case \"L\", \"l\" -> new Move.Right(1); default -> new InvalidInput(0, \"Invalid Input.\"); }; return result; }",
        "label": "P"
    },
    "200": {
        "dataset": "COMP 3021",
        "project": "hwangem",
        "bug_id": "28",
        "T": "void testMove(String input, String name, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); } private InputStream fixValueStream(String content) { final var bytes = content.getBytes(StandardCharsets.UTF_8); return new ByteArrayInputStream(bytes); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine(); // TODO if(inputLine.equalsIgnoreCase(\"Exit\")) return new Exit(0); if(inputLine.equalsIgnoreCase(\"U\")) return new Undo(0); Action result = switch (inputLine){ case \"A\", \"a\" -> new Move.Left(0); case \"S\", \"s\" -> new Move.Down(0); case \"W\", \"w\" -> new Move.Up(0); case \"D\", \"d\" -> new Move.Right(0); case \"H\", \"h\" -> new Move.Left(1); case \"J\", \"j\" -> new Move.Down(1); case \"K\", \"k\" -> new Move.Up(1); case \"L\", \"l\" -> new Move.Right(1); default -> new InvalidInput(0, \"Invalid Input.\"); }; return result; }",
        "label": "P"
    },
    "201": {
        "dataset": "COMP 3021",
        "project": "hwangem",
        "bug_id": "29",
        "T": "void testMove(String input, String name, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); } private InputStream fixValueStream(String content) { final var bytes = content.getBytes(StandardCharsets.UTF_8); return new ByteArrayInputStream(bytes); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine(); // TODO if(inputLine.equalsIgnoreCase(\"Exit\")) return new Exit(0); if(inputLine.equalsIgnoreCase(\"U\")) return new Undo(0); Action result = switch (inputLine){ case \"A\", \"a\" -> new Move.Left(0); case \"S\", \"s\" -> new Move.Down(0); case \"W\", \"w\" -> new Move.Up(0); case \"D\", \"d\" -> new Move.Right(0); case \"H\", \"h\" -> new Move.Left(1); case \"J\", \"j\" -> new Move.Down(1); case \"K\", \"k\" -> new Move.Up(1); case \"L\", \"l\" -> new Move.Right(1); default -> new InvalidInput(0, \"Invalid Input.\"); }; return result; }",
        "label": "P"
    },
    "202": {
        "dataset": "COMP 3021",
        "project": "hwangem",
        "bug_id": "30",
        "T": "void testMove(String input, String name, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); } private InputStream fixValueStream(String content) { final var bytes = content.getBytes(StandardCharsets.UTF_8); return new ByteArrayInputStream(bytes); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine(); // TODO if(inputLine.equalsIgnoreCase(\"Exit\")) return new Exit(0); if(inputLine.equalsIgnoreCase(\"U\")) return new Undo(0); Action result = switch (inputLine){ case \"A\", \"a\" -> new Move.Left(0); case \"S\", \"s\" -> new Move.Down(0); case \"W\", \"w\" -> new Move.Up(0); case \"D\", \"d\" -> new Move.Right(0); case \"H\", \"h\" -> new Move.Left(1); case \"J\", \"j\" -> new Move.Down(1); case \"K\", \"k\" -> new Move.Up(1); case \"L\", \"l\" -> new Move.Right(1); default -> new InvalidInput(0, \"Invalid Input.\"); }; return result; }",
        "label": "P"
    },
    "203": {
        "dataset": "COMP 3021",
        "project": "hwangem",
        "bug_id": "31",
        "T": "void testMove(String input, String name, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); } private InputStream fixValueStream(String content) { final var bytes = content.getBytes(StandardCharsets.UTF_8); return new ByteArrayInputStream(bytes); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine(); // TODO if(inputLine.equalsIgnoreCase(\"Exit\")) return new Exit(0); if(inputLine.equalsIgnoreCase(\"U\")) return new Undo(0); Action result = switch (inputLine){ case \"A\", \"a\" -> new Move.Left(0); case \"S\", \"s\" -> new Move.Down(0); case \"W\", \"w\" -> new Move.Up(0); case \"D\", \"d\" -> new Move.Right(0); case \"H\", \"h\" -> new Move.Left(1); case \"J\", \"j\" -> new Move.Down(1); case \"K\", \"k\" -> new Move.Up(1); case \"L\", \"l\" -> new Move.Right(1); default -> new InvalidInput(0, \"Invalid Input.\"); }; return result; }",
        "label": "P"
    },
    "204": {
        "dataset": "COMP 3021",
        "project": "hwangem",
        "bug_id": "32",
        "T": "void testMove(String input, String name, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); } private InputStream fixValueStream(String content) { final var bytes = content.getBytes(StandardCharsets.UTF_8); return new ByteArrayInputStream(bytes); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine(); // TODO if(inputLine.equalsIgnoreCase(\"Exit\")) return new Exit(0); if(inputLine.equalsIgnoreCase(\"U\")) return new Undo(0); Action result = switch (inputLine){ case \"A\", \"a\" -> new Move.Left(0); case \"S\", \"s\" -> new Move.Down(0); case \"W\", \"w\" -> new Move.Up(0); case \"D\", \"d\" -> new Move.Right(0); case \"H\", \"h\" -> new Move.Left(1); case \"J\", \"j\" -> new Move.Down(1); case \"K\", \"k\" -> new Move.Up(1); case \"L\", \"l\" -> new Move.Right(1); default -> new InvalidInput(0, \"Invalid Input.\"); }; return result; }",
        "label": "P"
    },
    "205": {
        "dataset": "COMP 3021",
        "project": "hwangem",
        "bug_id": "33",
        "T": "void testMove(String input, String name, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); } private InputStream fixValueStream(String content) { final var bytes = content.getBytes(StandardCharsets.UTF_8); return new ByteArrayInputStream(bytes); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine(); // TODO if(inputLine.equalsIgnoreCase(\"Exit\")) return new Exit(0); if(inputLine.equalsIgnoreCase(\"U\")) return new Undo(0); Action result = switch (inputLine){ case \"A\", \"a\" -> new Move.Left(0); case \"S\", \"s\" -> new Move.Down(0); case \"W\", \"w\" -> new Move.Up(0); case \"D\", \"d\" -> new Move.Right(0); case \"H\", \"h\" -> new Move.Left(1); case \"J\", \"j\" -> new Move.Down(1); case \"K\", \"k\" -> new Move.Up(1); case \"L\", \"l\" -> new Move.Right(1); default -> new InvalidInput(0, \"Invalid Input.\"); }; return result; }",
        "label": "P"
    },
    "206": {
        "dataset": "COMP 3021",
        "project": "hwangem",
        "bug_id": "34",
        "T": "void testUndo(String input, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine(); // TODO if(inputLine.equalsIgnoreCase(\"Exit\")) return new Exit(0); if(inputLine.equalsIgnoreCase(\"U\")) return new Undo(0); Action result = switch (inputLine){ case \"A\", \"a\" -> new Move.Left(0); case \"S\", \"s\" -> new Move.Down(0); case \"W\", \"w\" -> new Move.Up(0); case \"D\", \"d\" -> new Move.Right(0); case \"H\", \"h\" -> new Move.Left(1); case \"J\", \"j\" -> new Move.Down(1); case \"K\", \"k\" -> new Move.Up(1); case \"L\", \"l\" -> new Move.Right(1); default -> new InvalidInput(0, \"Invalid Input.\"); }; return result; }",
        "label": "P"
    },
    "207": {
        "dataset": "COMP 3021",
        "project": "hwangem",
        "bug_id": "35",
        "T": "void testInvalidInput() { final var inputStream = fixValueStream(\"blah blah\"); final var inputEngine = new TerminalInputEngine(inputStream); final var action = inputEngine.fetchAction(); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine(); // TODO if(inputLine.equalsIgnoreCase(\"Exit\")) return new Exit(0); if(inputLine.equalsIgnoreCase(\"U\")) return new Undo(0); Action result = switch (inputLine){ case \"A\", \"a\" -> new Move.Left(0); case \"S\", \"s\" -> new Move.Down(0); case \"W\", \"w\" -> new Move.Up(0); case \"D\", \"d\" -> new Move.Right(0); case \"H\", \"h\" -> new Move.Left(1); case \"J\", \"j\" -> new Move.Down(1); case \"K\", \"k\" -> new Move.Up(1); case \"L\", \"l\" -> new Move.Right(1); default -> new InvalidInput(0, \"Invalid Input.\"); }; return result; }",
        "label": "P"
    },
    "208": {
        "dataset": "COMP 3021",
        "project": "hwangem",
        "bug_id": "36",
        "T": "void testUndoWhenThereIsNoMove() { final var gameState = new GameState(TestHelper.parseGameMap(\"\"\" 233 ###### #A.a@# #..a@# ###### \"\"\" )); gameState.undo(); } private Entity generateEntity(int key) { return switch (key % 4) { case 0 -> new Box(0); case 1 -> new Empty(); case 2 -> new Player(0); case 3 -> new Wall(); default -> throw new ShouldNotReachException(); }; }",
        "C": "public GameState(@NotNull GameMap map) { // TODO this.gameMap = map; undoQuota = map.getUndoLimit().get(); history = null; } public void undo() { // TODO if(this.history != null){ if(undoQuota != -1)undoQuota --; this.gameMap = this.history.gameMap; this.history = this.history.history; } else { this.gameMap.Map = GameMap.OriginMap.clone(); } } /** * Get the maximum width of the game map. * This should be the same as that in {@link GameMap} public TerminalRenderingEngine(PrintStream outputSteam) { this.outputSteam = outputSteam; } public Box(int playerId) { this.playerId = playerId; } public Player(int id) { this.id = id; } public ShouldNotReachException() { super(\"This branch should not be reached.\"); }",
        "label": "P"
    },
    "209": {
        "dataset": "COMP 3021",
        "project": "hwangem",
        "bug_id": "37",
        "T": "void testGetUndoUnlimited() { final var gameState = new GameState(TestHelper.parseGameMap(\"\"\" -1 ###### #.Aa@# #..a@# ###### \"\"\" )); }",
        "C": "public GameState(@NotNull GameMap map) { // TODO this.gameMap = map; undoQuota = map.getUndoLimit().get(); history = null; }",
        "label": "F"
    },
    "210": {
        "dataset": "COMP 3021",
        "project": "hwangem",
        "bug_id": "38",
        "T": "void testMapCopying() { final var maxWidth = 2333; final var maxHeight = 2333; final var random = new Random(); final var randomEntities = Stream.generate(() -> Position.of(random.nextInt(maxWidth), random.nextInt(maxHeight))) .distinct() .limit(100) .collect(Collectors.toMap(Function.identity(), it -> generateEntity(it.x()))); final var firstPos = randomEntities.keySet().stream().findFirst(); final var gameMap = new GameMap(maxWidth, maxHeight, Collections.singleton(firstPos.get()), 233); randomEntities.forEach(gameMap::putEntity); final var gameState = new GameState(gameMap); final var randomPosition = randomEntities.keySet().stream().findAny(); gameMap.putEntity(randomPosition.get(), new Empty()); randomEntities.forEach((p, e) -> assertEquals(e, gameState.getEntity(p))); }",
        "C": "public static @NotNull Position of(int x, int y) { return new Position(x, y); } public GameMap(int maxWidth, int maxHeight, Set<Position> destinations, int undoLimit) { // TODO this.maxHeight = maxHeight; this.maxWidth = maxWidth; this.destinations = destinations; this.undoLimit = undoLimit; } public GameState(@NotNull GameMap map) { // TODO this.gameMap = map; undoQuota = map.getUndoLimit().get(); history = null; } public void putEntity(Position position, Entity entity) { // TODO int x = position.x(); int y = position.y(); switch(entity){ case Box box_ : this.Map[y] = this.Map[y].substring(0, x) + (char)(box_.getPlayerId() + (int)'a') + this.Map[y].substring(x+1); break; case Empty ignored : if(isDestination(position) == false) this.Map[y] = this.Map[y].substring(0, x) + '.' + this.Map[y].substring(x+1); else this.Map[y] = this.Map[y].substring(0, x) + '@' + this.Map[y].substring(x+1); break; case Player player_ : this.Map[y] = this.Map[y].substring(0, x) + (char)(player_.getId() + (int)'A') + this.Map[y].substring(x+1); break; case Wall ignored : this.Map[y] = this.Map[y].substring(0, x) + '#' + this.Map[y].substring(x+1); break; }; } public @Nullable Entity getEntity(@NotNull Position position) { // TODO return this.gameMap.getEntity(position); } /** * Get all box destination positions as a set in the game map. * This should be the same as that in {@link GameMap}",
        "label": "F"
    },
    "211": {
        "dataset": "COMP 3021",
        "project": "hwangem",
        "bug_id": "39",
        "T": "void testUndoWhenThereIsMoveButNoCheckpoint() { final var gameState = new GameState(TestHelper.parseGameMap(\"\"\" 233 ###### #A.a@# #..a@# ###### \"\"\" )); gameState.move(Position.of(1, 1), Position.of(2, 1)); gameState.undo(); }",
        "C": "public GameState(@NotNull GameMap map) { // TODO this.gameMap = map; undoQuota = map.getUndoLimit().get(); history = null; } public void move(Position from, Position to) { // TODO var fromT = this.gameMap.getEntity(from); this.gameMap.putEntity(to,fromT); this.gameMap.putEntity(from,new Empty()); } /** * Record a checkpoint of the game state, including: * <li>All current positions of entities in the game map.</li> * <li>Current undo quota</li> * <p> * Checkpoint is used in {@link GameState#undo()} public static @NotNull Position of(int x, int y) { return new Position(x, y); } public void undo() { // TODO if(this.history != null){ if(undoQuota != -1)undoQuota --; this.gameMap = this.history.gameMap; this.history = this.history.history; } else { this.gameMap.Map = GameMap.OriginMap.clone(); } } /** * Get the maximum width of the game map. * This should be the same as that in {@link GameMap}",
        "label": "P"
    },
    "212": {
        "dataset": "COMP 3021",
        "project": "hwangem",
        "bug_id": "40",
        "T": "void testGameExit() { final var gameState = mock(GameState.class); final var inputEngine = mock(TerminalInputEngine.class); final var renderingEngine = mock(TerminalRenderingEngine.class); when(gameState.isWin()).thenReturn(false, false, false); when(inputEngine.fetchAction()) .thenReturn(new InvalidInput(0, \"\"), new InvalidInput(0, \"\"), new Exit(0)); final var game = new TerminalSokobanGame(gameState, inputEngine, renderingEngine); game.run(); verify(renderingEngine, atLeastOnce()).message(any()); }",
        "C": "public InvalidInput(int initiator, @NotNull String message) { super(initiator); this.message = message; } public Exit(int initiator) { super(initiator); } public TerminalSokobanGame(GameState gameState, TerminalInputEngine inputEngine, TerminalRenderingEngine renderingEngine) { super(gameState); this.inputEngine = inputEngine; this.renderingEngine = renderingEngine; // TODO // Check the number of players int Numplayers = gameState.getAllPlayerPositions().size(); if(Numplayers > 2) throw new IllegalArgumentException(); } public void run() { // TODO this.renderingEngine.message(\"Sokoban game is ready.\"); this.renderingEngine.render(this.state); if(this.state.getUndoQuota().isPresent())this.renderingEngine.message(\"Undo Quota: \" + (this.state.getUndoQuota().get() == -1 ? \"unlimited\":this.state.getUndoQuota().get())); while(this.shouldStop() == false){ var result = this.processAction(this.inputEngine.fetchAction()); switch(result){ case ActionResult.Success ignored: break; case ActionResult.Failed failed_: System.out.println(failed_.getReason()); break; } this.renderingEngine.render(this.state); if(this.state.getUndoQuota().isPresent())this.renderingEngine.message(\"Undo Quota: \" + (this.state.getUndoQuota().get() == -1 ? \"unlimited\":this.state.getUndoQuota().get())); } }",
        "label": "P"
    },
    "213": {
        "dataset": "COMP 3021",
        "project": "hwangem",
        "bug_id": "41",
        "T": "void testGameWin() { final var gameState = mock(GameState.class); final var inputEngine = mock(TerminalInputEngine.class); final var renderingEngine = mock(TerminalRenderingEngine.class); when(gameState.isWin()).thenReturn(false, false, false, true); when(inputEngine.fetchAction()) .thenReturn(new InvalidInput(0, \"\")); final var game = new TerminalSokobanGame(gameState, inputEngine, renderingEngine); game.run(); verify(gameState, atLeastOnce()).isWin(); verify(renderingEngine, atLeastOnce()).message(any()); }",
        "C": "public InvalidInput(int initiator, @NotNull String message) { super(initiator); this.message = message; } public TerminalSokobanGame(GameState gameState, TerminalInputEngine inputEngine, TerminalRenderingEngine renderingEngine) { super(gameState); this.inputEngine = inputEngine; this.renderingEngine = renderingEngine; // TODO // Check the number of players int Numplayers = gameState.getAllPlayerPositions().size(); if(Numplayers > 2) throw new IllegalArgumentException(); } public void run() { // TODO this.renderingEngine.message(\"Sokoban game is ready.\"); this.renderingEngine.render(this.state); if(this.state.getUndoQuota().isPresent())this.renderingEngine.message(\"Undo Quota: \" + (this.state.getUndoQuota().get() == -1 ? \"unlimited\":this.state.getUndoQuota().get())); while(this.shouldStop() == false){ var result = this.processAction(this.inputEngine.fetchAction()); switch(result){ case ActionResult.Success ignored: break; case ActionResult.Failed failed_: System.out.println(failed_.getReason()); break; } this.renderingEngine.render(this.state); if(this.state.getUndoQuota().isPresent())this.renderingEngine.message(\"Undo Quota: \" + (this.state.getUndoQuota().get() == -1 ? \"unlimited\":this.state.getUndoQuota().get())); } }",
        "label": "P"
    },
    "214": {
        "dataset": "COMP 3021",
        "project": "hwangem",
        "bug_id": "42",
        "T": "void testMoreThanTwoPlayers() { final var gameState = mock(GameState.class); final var inputEngine = mock(TerminalInputEngine.class); final var renderingEngine = mock(TerminalRenderingEngine.class); when(gameState.getAllPlayerPositions()).thenReturn(new HashSet<>(Arrays.asList(Position.of(1, 1), Position.of(1, 2), Position.of(1, 3)))); }",
        "C": "public static @NotNull Position of(int x, int y) { return new Position(x, y); }",
        "label": "P"
    },
    "215": {
        "dataset": "COMP 3021",
        "project": "yclamam",
        "bug_id": "0",
        "T": "void moveUp() { Position.of(233, 232), new Move.Up(-1).nextPosition(pos) ); }",
        "C": "public static @NotNull Position of(int x, int y) { return new Position(x, y); } public Up(int initiator) { super(initiator); }",
        "label": "F"
    },
    "216": {
        "dataset": "COMP 3021",
        "project": "yclamam",
        "bug_id": "1",
        "T": "void moveDown() { Position.of(233, 234), new Move.Down(-1).nextPosition(pos) ); }",
        "C": "public static @NotNull Position of(int x, int y) { return new Position(x, y); } public Down(int initiator) { super(initiator); }",
        "label": "F"
    },
    "217": {
        "dataset": "COMP 3021",
        "project": "yclamam",
        "bug_id": "2",
        "T": "void moveRight() { Position.of(234, 233), new Move.Right(-1).nextPosition(pos) ); }",
        "C": "public static @NotNull Position of(int x, int y) { return new Position(x, y); } public Right(int initiator) { super(initiator); }",
        "label": "P"
    },
    "218": {
        "dataset": "COMP 3021",
        "project": "yclamam",
        "bug_id": "3",
        "T": "void testExceedingUndoQuota() { final var gameState = mock(GameState.class); when(gameState.getPlayerPositionById(anyInt())).thenReturn(Position.of(0, 0)); when(gameState.getUndoQuota()).thenReturn(Optional.of(0)); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Undo(0)); }",
        "C": "public Undo(int initiator) { super(initiator); }",
        "label": "F"
    },
    "219": {
        "dataset": "COMP 3021",
        "project": "yclamam",
        "bug_id": "4",
        "T": "void testExit() { final var gameState = mock(GameState.class); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Exit(0)); }",
        "C": "public Exit(int initiator) { super(initiator); }",
        "label": "F"
    },
    "220": {
        "dataset": "COMP 3021",
        "project": "yclamam",
        "bug_id": "5",
        "T": "void testUndoUnlimited() { final var gameState = mock(GameState.class); when(gameState.getPlayerPositionById(anyInt())).thenReturn(Position.of(0, 0)); when(gameState.getUndoQuota()).thenReturn(Optional.empty()); final var game = new SokobanGameForTesting(gameState); for (int i = 0; i < 10000; i++) { final var result = game.feedActionForProcessing(new Undo(0)); } verify(gameState, times(10000)).undo(); }",
        "C": "public TerminalRenderingEngine(PrintStream outputSteam) { this.outputSteam = outputSteam; } public Undo(int initiator) { super(initiator); }",
        "label": "P"
    },
    "221": {
        "dataset": "COMP 3021",
        "project": "yclamam",
        "bug_id": "6",
        "T": "void testPushOtherPlayerBox() { String mapText = \"\"\" 233 ###### #AB.@# #b.a.# #@...# ###### \"\"\"; final var testMap = TestHelper.parseGameMap(mapText); final var gameState = spy(new GameState(testMap)); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Move.Down(0)); verify(gameState, never()).move(any(), any()); }",
        "C": "public GameState(@NotNull GameMap map) { // TODO originalMap = map; undoLeft=map.undo; // history = new ArrayList<Entity[][]>(); Entity[][] temp = new Entity[map.height][map.width]; System.out.print(map.height+\"\"); for (int i=0; i<map.height; i++){ for(int j=0; j<map.width; j++){ temp[i][j]=map.entityArr[i][j]; } } history.add(temp); // System.out.print(\"originalmap:\"+temp); // for (int i=0; i<4; i++){ // for (int j=0; j<6; j++){ // System.out.print(history.get(0)[i][j]); // } // System.out.print(System.lineSeparator()); // } // throw new NotImplementedException(); } public Down(int initiator) { super(initiator); }",
        "label": "P"
    },
    "222": {
        "dataset": "COMP 3021",
        "project": "yclamam",
        "bug_id": "7",
        "T": "void testMoveNonExistingPlayer() { String mapText = \"\"\" 233 ###### #A..@# #a...# ##...# ###### \"\"\"; final var testMap = TestHelper.parseGameMap(mapText); final var gameState = spy(new GameState(testMap)); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Move.Down(23)); }",
        "C": "public GameState(@NotNull GameMap map) { // TODO originalMap = map; undoLeft=map.undo; // history = new ArrayList<Entity[][]>(); Entity[][] temp = new Entity[map.height][map.width]; System.out.print(map.height+\"\"); for (int i=0; i<map.height; i++){ for(int j=0; j<map.width; j++){ temp[i][j]=map.entityArr[i][j]; } } history.add(temp); // System.out.print(\"originalmap:\"+temp); // for (int i=0; i<4; i++){ // for (int j=0; j<6; j++){ // System.out.print(history.get(0)[i][j]); // } // System.out.print(System.lineSeparator()); // } // throw new NotImplementedException(); } public Down(int initiator) { super(initiator); }",
        "label": "F"
    },
    "223": {
        "dataset": "COMP 3021",
        "project": "yclamam",
        "bug_id": "8",
        "T": "void testCheckpointWhenNeed() { final var gameState = spy(new GameState(TestHelper.parseGameMap(\"\"\" 233 ###### #.Aa@# #..a@# ###### \"\"\" ))); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Move.Right(0)); verify(gameState, times(1)).checkpoint(); }",
        "C": "public GameState(@NotNull GameMap map) { // TODO originalMap = map; undoLeft=map.undo; // history = new ArrayList<Entity[][]>(); Entity[][] temp = new Entity[map.height][map.width]; System.out.print(map.height+\"\"); for (int i=0; i<map.height; i++){ for(int j=0; j<map.width; j++){ temp[i][j]=map.entityArr[i][j]; } } history.add(temp); // System.out.print(\"originalmap:\"+temp); // for (int i=0; i<4; i++){ // for (int j=0; j<6; j++){ // System.out.print(history.get(0)[i][j]); // } // System.out.print(System.lineSeparator()); // } // throw new NotImplementedException(); } public Right(int initiator) { super(initiator); }",
        "label": "P"
    },
    "224": {
        "dataset": "COMP 3021",
        "project": "yclamam",
        "bug_id": "9",
        "T": "void testPushBoxAgainstWall() { String mapText = \"\"\" 233 ###### #A..@# #a...# ##...# ###### \"\"\"; final var testMap = TestHelper.parseGameMap(mapText); final var gameState = spy(new GameState(testMap)); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Move.Down(0)); verify(gameState, never()).move(any(), any()); }",
        "C": "public GameState(@NotNull GameMap map) { // TODO originalMap = map; undoLeft=map.undo; // history = new ArrayList<Entity[][]>(); Entity[][] temp = new Entity[map.height][map.width]; System.out.print(map.height+\"\"); for (int i=0; i<map.height; i++){ for(int j=0; j<map.width; j++){ temp[i][j]=map.entityArr[i][j]; } } history.add(temp); // System.out.print(\"originalmap:\"+temp); // for (int i=0; i<4; i++){ // for (int j=0; j<6; j++){ // System.out.print(history.get(0)[i][j]); // } // System.out.print(System.lineSeparator()); // } // throw new NotImplementedException(); } public Down(int initiator) { super(initiator); }",
        "label": "P"
    },
    "225": {
        "dataset": "COMP 3021",
        "project": "yclamam",
        "bug_id": "10",
        "T": "void testCheckpointWhenNotNeed() { final var gameState = spy(new GameState(TestHelper.parseGameMap(\"\"\" 233 ###### #A.a@# #..a@# ###### \"\"\" ))); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Move.Right(0)); verify(gameState, never()).checkpoint(); } private static class SokobanGameForTesting extends AbstractSokobanGame { protected SokobanGameForTesting(GameState gameState) { super(gameState); } @Override public void run() { } public ActionResult feedActionForProcessing(Action action) { return processAction(action); } }",
        "C": "public GameState(@NotNull GameMap map) { // TODO originalMap = map; undoLeft=map.undo; // history = new ArrayList<Entity[][]>(); Entity[][] temp = new Entity[map.height][map.width]; System.out.print(map.height+\"\"); for (int i=0; i<map.height; i++){ for(int j=0; j<map.width; j++){ temp[i][j]=map.entityArr[i][j]; } } history.add(temp); // System.out.print(\"originalmap:\"+temp); // for (int i=0; i<4; i++){ // for (int j=0; j<6; j++){ // System.out.print(history.get(0)[i][j]); // } // System.out.print(System.lineSeparator()); // } // throw new NotImplementedException(); } public Right(int initiator) { super(initiator); } public void run() { // TODO while (!shouldStop()){ renderingEngine.render(this.state); inputEngine.fetchAction(); } // throw new NotImplementedException(); } protected ActionResult processAction(@NotNull Action action) { // TODO if(action instanceof Move){ if (action instanceof Move.Down){ Position original = state.getPlayerPositionById(action.getInitiator()); Position newPosition = new Position(original.x(), original.y()+1); if (state.getEntity(newPosition) instanceof Wall) return new ActionResult.Failed(action, \"hit wall\"); if (state.getEntity(newPosition) instanceof Box) { if (((Box) state.getEntity(newPosition)).getPlayerId()==action.getInitiator()){ Position newBoxPosition = new Position(original.x(), original.y()+2); if (state.getEntity(newBoxPosition) instanceof Wall) return new ActionResult.Failed(action, \"hit wall\"); state.move(newPosition,newBoxPosition); } else return new ActionResult.Failed(action, \"hit wall\"); } state.move(original,newPosition); } if (action instanceof Move.Up){ Position original = state.getPlayerPositionById(action.getInitiator()); Position newPosition = new Position(original.x(), original.y()-1); if (state.getEntity(newPosition) instanceof Wall) return new ActionResult.Failed(action, \"hit wall\"); if (state.getEntity(newPosition) instanceof Box) { if (((Box) state.getEntity(newPosition)).getPlayerId()==action.getInitiator()){ Position newBoxPosition = new Position(original.x(), original.y()-2); if (state.getEntity(newBoxPosition) instanceof Wall) return new ActionResult.Failed(action, \"hit wall\"); state.move(newPosition,newBoxPosition); } else return new ActionResult.Failed(action, \"hit wall\"); } state.move(original,newPosition); } if (action instanceof Move.Left){ Position original = state.getPlayerPositionById(action.getInitiator()); Position newPosition = new Position(original.x()-1, original.y()); if (state.getEntity(newPosition) instanceof Wall) return new ActionResult.Failed(action, \"hit wall\"); if (state.getEntity(newPosition) instanceof Box) { if (((Box) state.getEntity(newPosition)).getPlayerId()==action.getInitiator()){ Position newBoxPosition = new Position(original.x()-2, original.y()); if (state.getEntity(newBoxPosition) instanceof Wall) return new ActionResult.Failed(action, \"hit wall\"); state.move(newPosition,newBoxPosition); } else return new ActionResult.Failed(action, \"hit wall\"); } state.move(original,newPosition); } if (action instanceof Move.Right){ Position original = state.getPlayerPositionById(action.getInitiator()); Position newPosition = new Position(original.x()+1, original.y()); if (state.getEntity(newPosition) instanceof Wall) return new ActionResult.Failed(action, \"hit wall\"); if (state.getEntity(newPosition) instanceof Box) { if (((Box) state.getEntity(newPosition)).getPlayerId()==action.getInitiator()){ Position newBoxPosition = new Position(original.x()+2, original.y()); if (state.getEntity(newBoxPosition) instanceof Wall) return new ActionResult.Failed(action, \"hit wall\"); state.move(newPosition,newBoxPosition); } else return new ActionResult.Failed(action, \"hit wall\"); } state.move(original,newPosition); } state.checkpoint(); return new ActionResult.Success(action); } if (action instanceof Undo){ state.undo(); return new ActionResult.Success(action); } if(action instanceof Exit){ return new ActionResult.Success(action); } if(action instanceof InvalidInput) return new ActionResult.Failed(action,INVALID_INPUT_MESSAGE); return new ActionResult.Success(action); // throw new NotImplementedException(); }",
        "label": "F"
    },
    "226": {
        "dataset": "COMP 3021",
        "project": "yclamam",
        "bug_id": "11",
        "T": "void testHitAnotherPlayer() { String mapText = \"\"\" 233 ###### #A..@# #B...# #ab.@# ###### \"\"\"; final var testMap = TestHelper.parseGameMap(mapText); final var gameState = spy(new GameState(testMap)); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Move.Down(0)); verify(gameState, never()).move(any(), any()); }",
        "C": "public GameState(@NotNull GameMap map) { // TODO originalMap = map; undoLeft=map.undo; // history = new ArrayList<Entity[][]>(); Entity[][] temp = new Entity[map.height][map.width]; System.out.print(map.height+\"\"); for (int i=0; i<map.height; i++){ for(int j=0; j<map.width; j++){ temp[i][j]=map.entityArr[i][j]; } } history.add(temp); // System.out.print(\"originalmap:\"+temp); // for (int i=0; i<4; i++){ // for (int j=0; j<6; j++){ // System.out.print(history.get(0)[i][j]); // } // System.out.print(System.lineSeparator()); // } // throw new NotImplementedException(); } public Down(int initiator) { super(initiator); }",
        "label": "F"
    },
    "227": {
        "dataset": "COMP 3021",
        "project": "yclamam",
        "bug_id": "12",
        "T": "void testUndoWithinQuota() { final var gameState = mock(GameState.class); when(gameState.getPlayerPositionById(anyInt())).thenReturn(Position.of(0, 0)); when(gameState.getUndoQuota()).thenReturn(Optional.of(1)); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Undo(0)); verify(gameState, times(1)).undo(); }",
        "C": "public Undo(int initiator) { super(initiator); }",
        "label": "P"
    },
    "228": {
        "dataset": "COMP 3021",
        "project": "yclamam",
        "bug_id": "13",
        "T": "void testInvalidInput() { final var game = new SokobanGameForTesting(mock(GameState.class)); final var message = String.valueOf(new Random().nextLong()); final var action = new InvalidInput(-1, message); final var result = game.feedActionForProcessing(action); }",
        "C": "public InvalidInput(int initiator, @NotNull String message) { super(initiator); this.message = message; }",
        "label": "P"
    },
    "229": {
        "dataset": "COMP 3021",
        "project": "yclamam",
        "bug_id": "14",
        "T": "void testUndoLimitParsing() { final var gameMap = TestHelper.parseGameMap(rectangularMap); }",
        "C": "",
        "label": "P"
    },
    "230": {
        "dataset": "COMP 3021",
        "project": "yclamam",
        "bug_id": "15",
        "T": "void testWidthForNonRectangularMap() { final var gameMap = TestHelper.parseGameMap(nonRectangularMap); }",
        "C": "",
        "label": "P"
    },
    "231": {
        "dataset": "COMP 3021",
        "project": "yclamam",
        "bug_id": "16",
        "T": "void testTwoPlayersMap() { final var twoPlayersMap = \"\"\" 233 ###### #A..@# #..B@# #....# #.a..# #..b.# ###### \"\"\"; final var gameMap = TestHelper.parseGameMap(twoPlayersMap); final var playerIds = gameMap.getPlayerIds(); final var expectedIds = new HashSet<Integer>(); expectedIds.add(0); expectedIds.add(1); }",
        "C": "public Set<Integer> getPlayerIds() { // TODO String[] splited = map.lines().toArray(String[]::new); System.out.print(splited.length); int undoLimit = Integer.parseInt(splited[0]); int height = splited.length-1; int width = splited[1].length(); System.out.print(width); Set<Integer> playerIDs = new HashSet<Integer>(); // for (int i=1; i<height; i++){ // for(int j=0; j<width; j++){ // if(splited[i].charAt(j)=='@'){ // boxPosition.add(new Position(j,i-1)); // } // } // } // boxPosition.add(new Position(4,1)); // boxPosition.add(new Position(4,2)); // GameMap result = new GameMap(width,height,boxPosition,undoLimit); // System.out.print(boxPosition); ///// // if (undoLimit<-1)throw new NotImplementedException(); ///// // int player[] = new int[26]; // int playerBox[] = new int[26]; // int noOfBox = 0; // int noOfBoxDestination = 0; // for (int i=0; i<26; i++){ // player[i]=0; // } for (int i=1; i<height; i++){ for(int j=0; j<width; j++){ int checkchar = (int) splited[i].charAt(j); if(checkchar<91&&checkchar>64){ playerIDs.add(checkchar-65); // System.out.print(checkchar); } } } // System.out.print(PlayerIDs); return playerIDs; // throw new NotImplementedException(); }",
        "label": "P"
    },
    "232": {
        "dataset": "COMP 3021",
        "project": "yclamam",
        "bug_id": "17",
        "T": "void testMapWithoutPlayer() { final var invalidMap = \"\"\" 233 ### #.# ### \"\"\"; } // @Tag(TestKind.HIDDEN) // @Test // void testUnmatchedPlayersAndBoxes() { // final var invalidMap = \"\"\" // 233 // ###### // #A..@# // #...@# // #a.b@# // #.a.@# // #..a.# // ###### // \"\"\"; // assertThrowsExactly(IllegalArgumentException.class, () -> TestHelper.parseGameMap(invalidMap)); // }",
        "C": "public TerminalRenderingEngine(PrintStream outputSteam) { this.outputSteam = outputSteam; }",
        "label": "F"
    },
    "233": {
        "dataset": "COMP 3021",
        "project": "yclamam",
        "bug_id": "18",
        "T": "void testManyPlayersMap() { final var manyPlayersMap = \"\"\" 233 ###### #A.P@@# #vCB@@# #.cpD@# #Ga.d@# #g.bV@# ###### \"\"\"; final var gameMap = TestHelper.parseGameMap(manyPlayersMap); final var playerIds = gameMap.getPlayerIds(); final var expectedIds = new HashSet<>(Arrays.asList( 0, 'P' - 'A', 'C' - 'A', 'B' - 'A', 'D' - 'A', 'G' - 'A', 'V' - 'A' )); }",
        "C": "public Set<Integer> getPlayerIds() { // TODO String[] splited = map.lines().toArray(String[]::new); System.out.print(splited.length); int undoLimit = Integer.parseInt(splited[0]); int height = splited.length-1; int width = splited[1].length(); System.out.print(width); Set<Integer> playerIDs = new HashSet<Integer>(); // for (int i=1; i<height; i++){ // for(int j=0; j<width; j++){ // if(splited[i].charAt(j)=='@'){ // boxPosition.add(new Position(j,i-1)); // } // } // } // boxPosition.add(new Position(4,1)); // boxPosition.add(new Position(4,2)); // GameMap result = new GameMap(width,height,boxPosition,undoLimit); // System.out.print(boxPosition); ///// // if (undoLimit<-1)throw new NotImplementedException(); ///// // int player[] = new int[26]; // int playerBox[] = new int[26]; // int noOfBox = 0; // int noOfBoxDestination = 0; // for (int i=0; i<26; i++){ // player[i]=0; // } for (int i=1; i<height; i++){ for(int j=0; j<width; j++){ int checkchar = (int) splited[i].charAt(j); if(checkchar<91&&checkchar>64){ playerIDs.add(checkchar-65); // System.out.print(checkchar); } } } // System.out.print(PlayerIDs); return playerIDs; // throw new NotImplementedException(); }",
        "label": "P"
    },
    "234": {
        "dataset": "COMP 3021",
        "project": "yclamam",
        "bug_id": "19",
        "T": "void testHeightForNonRectangularMap() { final var gameMap = TestHelper.parseGameMap(nonRectangularMap); }",
        "C": "",
        "label": "P"
    },
    "235": {
        "dataset": "COMP 3021",
        "project": "yclamam",
        "bug_id": "20",
        "T": "void testDuplicatedPlayers() { final var invalidMap = \"\"\" 233 ###### #A..@# #..A@# #....# #.a..# #..b.# ###### \"\"\"; }",
        "C": "",
        "label": "F"
    },
    "236": {
        "dataset": "COMP 3021",
        "project": "yclamam",
        "bug_id": "21",
        "T": "void testParseMapWithoutUndoLimit() { final var invalidMap = String.join(\"\\n\", rectangularMap.lines().skip(1).toList()); }",
        "C": "",
        "label": "P"
    },
    "237": {
        "dataset": "COMP 3021",
        "project": "yclamam",
        "bug_id": "22",
        "T": "void testInsufficientDestinations() { final var invalidMap = \"\"\" 233 ###### #A..@# #...@# #a...# #.a..# #..a.# ###### \"\"\"; }",
        "C": "",
        "label": "F"
    },
    "238": {
        "dataset": "COMP 3021",
        "project": "yclamam",
        "bug_id": "23",
        "T": "void testSuperLargeMap() { try { new GameMap(Integer.MAX_VALUE, Integer.MAX_VALUE, Collections.emptySet(), 0); } catch (OutOfMemoryError e) { throw new RuntimeException(e); } }); }",
        "C": "public GameMap(int maxWidth, int maxHeight, Set<Position> destinations, int undoLimit) { // TODO width = maxWidth; height = maxHeight; positions=destinations; undo=undoLimit; // entityArr = new Entity[height][width]; // for (int i=0; i<height; i++){ // for (int j=0; j<width; j++){ // entityArr[height][width]=new Empty(); // } // } // throw new NotImplementedException(); } /** * Parses the map from a string representation. * The first line is undo limit. * Starting from the second line, the game map is represented as follows, * <li># represents a {@link Wall}</li> * <li>@ represents a box destination.</li> * <li>Any upper-case letter represents a {@link Player}.</li> * <li> * Any lower-case letter represents a {@link Box} that is only movable by the player with the corresponding upper-case letter. * For instance, box \"a\" can only be moved by player \"A\" and not movable by player \"B\". * </li> * <li>. represents an {@link Empty} position in the map, meaning there is no player or box currently at this position.</li> * <p> * Notes: * <li> * There can be at most 26 players. * All implementations of classes in the hk.ust.comp3021.game package should support up to 26 players. * </li> * <li> * For simplicity, we assume the given map is bounded with a closed boundary. * There is no need to check this point. * </li> * <li> * Example maps can be found in \"src/main/resources\". * </li> * * @param mapText The string representation. * @return The parsed GameMap object. * @throws IllegalArgumentException if undo limit is negative but not -1. * @throws IllegalArgumentException if there are multiple same upper-case letters, i.e., one player can only exist at one position. * @throws IllegalArgumentException if there are no players in the map. * @throws IllegalArgumentException if the number of boxes is not equal to the number of box destinations. * @throws IllegalArgumentException if there are boxes whose {@link Box#getPlayerId()} public TerminalRenderingEngine(PrintStream outputSteam) { this.outputSteam = outputSteam; }",
        "label": "P"
    },
    "239": {
        "dataset": "COMP 3021",
        "project": "yclamam",
        "bug_id": "24",
        "T": "void testInvalidUndoLimit() { final var invalidMap = \"\"\" -233 ###### #A..@# #...@# #a.b@# #.a.@# #..a.# ###### \"\"\"; }",
        "C": "",
        "label": "F"
    },
    "240": {
        "dataset": "COMP 3021",
        "project": "yclamam",
        "bug_id": "25",
        "T": "void testEmptyMap() { final var invalidMap = \"\"; }",
        "C": "",
        "label": "P"
    },
    "241": {
        "dataset": "COMP 3021",
        "project": "yclamam",
        "bug_id": "26",
        "T": "void testMove(String input, String name, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); } private InputStream fixValueStream(String content) { final var bytes = content.getBytes(StandardCharsets.UTF_8); return new ByteArrayInputStream(bytes); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine(); // TODO System.out.print(inputLine); if (inputLine.equals(\"A\")||inputLine.equals('a')) return new Move.Left(0); if (inputLine.equals(\"D\")||inputLine.equals('d')) return new Move.Right(0); if (inputLine.equals(\"W\")||inputLine.equals('w')) return new Move.Up(0); if (inputLine.equals(\"S\")||inputLine.equals('s')) return new Move.Down(0); if (inputLine.equals(\"H\")||inputLine.equals('h')) return new Move.Left(1); if (inputLine.equals(\"L\")||inputLine.equals('l')) return new Move.Right(1); if (inputLine.equals(\"K\")||inputLine.equals('k')) return new Move.Up(1); if (inputLine.equals(\"J\")||inputLine.equals('j')) return new Move.Down(1); if (inputLine.equals(\"U\")||inputLine.equals('u')) return new Undo(1); if (inputLine.equals(\"exit\")||inputLine.equals(\"EXIT\")) return new Exit(1); // System.out.print(\"error\"); return new InvalidInput(0,INVALID_INPUT_MESSAGE); // throw new NotImplementedException(); }",
        "label": "P"
    },
    "242": {
        "dataset": "COMP 3021",
        "project": "yclamam",
        "bug_id": "27",
        "T": "void testMove(String input, String name, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); } private InputStream fixValueStream(String content) { final var bytes = content.getBytes(StandardCharsets.UTF_8); return new ByteArrayInputStream(bytes); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine(); // TODO System.out.print(inputLine); if (inputLine.equals(\"A\")||inputLine.equals('a')) return new Move.Left(0); if (inputLine.equals(\"D\")||inputLine.equals('d')) return new Move.Right(0); if (inputLine.equals(\"W\")||inputLine.equals('w')) return new Move.Up(0); if (inputLine.equals(\"S\")||inputLine.equals('s')) return new Move.Down(0); if (inputLine.equals(\"H\")||inputLine.equals('h')) return new Move.Left(1); if (inputLine.equals(\"L\")||inputLine.equals('l')) return new Move.Right(1); if (inputLine.equals(\"K\")||inputLine.equals('k')) return new Move.Up(1); if (inputLine.equals(\"J\")||inputLine.equals('j')) return new Move.Down(1); if (inputLine.equals(\"U\")||inputLine.equals('u')) return new Undo(1); if (inputLine.equals(\"exit\")||inputLine.equals(\"EXIT\")) return new Exit(1); // System.out.print(\"error\"); return new InvalidInput(0,INVALID_INPUT_MESSAGE); // throw new NotImplementedException(); }",
        "label": "P"
    },
    "243": {
        "dataset": "COMP 3021",
        "project": "yclamam",
        "bug_id": "28",
        "T": "void testMove(String input, String name, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); } private InputStream fixValueStream(String content) { final var bytes = content.getBytes(StandardCharsets.UTF_8); return new ByteArrayInputStream(bytes); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine(); // TODO System.out.print(inputLine); if (inputLine.equals(\"A\")||inputLine.equals('a')) return new Move.Left(0); if (inputLine.equals(\"D\")||inputLine.equals('d')) return new Move.Right(0); if (inputLine.equals(\"W\")||inputLine.equals('w')) return new Move.Up(0); if (inputLine.equals(\"S\")||inputLine.equals('s')) return new Move.Down(0); if (inputLine.equals(\"H\")||inputLine.equals('h')) return new Move.Left(1); if (inputLine.equals(\"L\")||inputLine.equals('l')) return new Move.Right(1); if (inputLine.equals(\"K\")||inputLine.equals('k')) return new Move.Up(1); if (inputLine.equals(\"J\")||inputLine.equals('j')) return new Move.Down(1); if (inputLine.equals(\"U\")||inputLine.equals('u')) return new Undo(1); if (inputLine.equals(\"exit\")||inputLine.equals(\"EXIT\")) return new Exit(1); // System.out.print(\"error\"); return new InvalidInput(0,INVALID_INPUT_MESSAGE); // throw new NotImplementedException(); }",
        "label": "P"
    },
    "244": {
        "dataset": "COMP 3021",
        "project": "yclamam",
        "bug_id": "29",
        "T": "void testMove(String input, String name, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); } private InputStream fixValueStream(String content) { final var bytes = content.getBytes(StandardCharsets.UTF_8); return new ByteArrayInputStream(bytes); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine(); // TODO System.out.print(inputLine); if (inputLine.equals(\"A\")||inputLine.equals('a')) return new Move.Left(0); if (inputLine.equals(\"D\")||inputLine.equals('d')) return new Move.Right(0); if (inputLine.equals(\"W\")||inputLine.equals('w')) return new Move.Up(0); if (inputLine.equals(\"S\")||inputLine.equals('s')) return new Move.Down(0); if (inputLine.equals(\"H\")||inputLine.equals('h')) return new Move.Left(1); if (inputLine.equals(\"L\")||inputLine.equals('l')) return new Move.Right(1); if (inputLine.equals(\"K\")||inputLine.equals('k')) return new Move.Up(1); if (inputLine.equals(\"J\")||inputLine.equals('j')) return new Move.Down(1); if (inputLine.equals(\"U\")||inputLine.equals('u')) return new Undo(1); if (inputLine.equals(\"exit\")||inputLine.equals(\"EXIT\")) return new Exit(1); // System.out.print(\"error\"); return new InvalidInput(0,INVALID_INPUT_MESSAGE); // throw new NotImplementedException(); }",
        "label": "P"
    },
    "245": {
        "dataset": "COMP 3021",
        "project": "yclamam",
        "bug_id": "30",
        "T": "void testMove(String input, String name, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); } private InputStream fixValueStream(String content) { final var bytes = content.getBytes(StandardCharsets.UTF_8); return new ByteArrayInputStream(bytes); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine(); // TODO System.out.print(inputLine); if (inputLine.equals(\"A\")||inputLine.equals('a')) return new Move.Left(0); if (inputLine.equals(\"D\")||inputLine.equals('d')) return new Move.Right(0); if (inputLine.equals(\"W\")||inputLine.equals('w')) return new Move.Up(0); if (inputLine.equals(\"S\")||inputLine.equals('s')) return new Move.Down(0); if (inputLine.equals(\"H\")||inputLine.equals('h')) return new Move.Left(1); if (inputLine.equals(\"L\")||inputLine.equals('l')) return new Move.Right(1); if (inputLine.equals(\"K\")||inputLine.equals('k')) return new Move.Up(1); if (inputLine.equals(\"J\")||inputLine.equals('j')) return new Move.Down(1); if (inputLine.equals(\"U\")||inputLine.equals('u')) return new Undo(1); if (inputLine.equals(\"exit\")||inputLine.equals(\"EXIT\")) return new Exit(1); // System.out.print(\"error\"); return new InvalidInput(0,INVALID_INPUT_MESSAGE); // throw new NotImplementedException(); }",
        "label": "P"
    },
    "246": {
        "dataset": "COMP 3021",
        "project": "yclamam",
        "bug_id": "31",
        "T": "void testMove(String input, String name, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); } private InputStream fixValueStream(String content) { final var bytes = content.getBytes(StandardCharsets.UTF_8); return new ByteArrayInputStream(bytes); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine(); // TODO System.out.print(inputLine); if (inputLine.equals(\"A\")||inputLine.equals('a')) return new Move.Left(0); if (inputLine.equals(\"D\")||inputLine.equals('d')) return new Move.Right(0); if (inputLine.equals(\"W\")||inputLine.equals('w')) return new Move.Up(0); if (inputLine.equals(\"S\")||inputLine.equals('s')) return new Move.Down(0); if (inputLine.equals(\"H\")||inputLine.equals('h')) return new Move.Left(1); if (inputLine.equals(\"L\")||inputLine.equals('l')) return new Move.Right(1); if (inputLine.equals(\"K\")||inputLine.equals('k')) return new Move.Up(1); if (inputLine.equals(\"J\")||inputLine.equals('j')) return new Move.Down(1); if (inputLine.equals(\"U\")||inputLine.equals('u')) return new Undo(1); if (inputLine.equals(\"exit\")||inputLine.equals(\"EXIT\")) return new Exit(1); // System.out.print(\"error\"); return new InvalidInput(0,INVALID_INPUT_MESSAGE); // throw new NotImplementedException(); }",
        "label": "P"
    },
    "247": {
        "dataset": "COMP 3021",
        "project": "yclamam",
        "bug_id": "32",
        "T": "void testMove(String input, String name, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); } private InputStream fixValueStream(String content) { final var bytes = content.getBytes(StandardCharsets.UTF_8); return new ByteArrayInputStream(bytes); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine(); // TODO System.out.print(inputLine); if (inputLine.equals(\"A\")||inputLine.equals('a')) return new Move.Left(0); if (inputLine.equals(\"D\")||inputLine.equals('d')) return new Move.Right(0); if (inputLine.equals(\"W\")||inputLine.equals('w')) return new Move.Up(0); if (inputLine.equals(\"S\")||inputLine.equals('s')) return new Move.Down(0); if (inputLine.equals(\"H\")||inputLine.equals('h')) return new Move.Left(1); if (inputLine.equals(\"L\")||inputLine.equals('l')) return new Move.Right(1); if (inputLine.equals(\"K\")||inputLine.equals('k')) return new Move.Up(1); if (inputLine.equals(\"J\")||inputLine.equals('j')) return new Move.Down(1); if (inputLine.equals(\"U\")||inputLine.equals('u')) return new Undo(1); if (inputLine.equals(\"exit\")||inputLine.equals(\"EXIT\")) return new Exit(1); // System.out.print(\"error\"); return new InvalidInput(0,INVALID_INPUT_MESSAGE); // throw new NotImplementedException(); }",
        "label": "P"
    },
    "248": {
        "dataset": "COMP 3021",
        "project": "yclamam",
        "bug_id": "33",
        "T": "void testMove(String input, String name, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); } private InputStream fixValueStream(String content) { final var bytes = content.getBytes(StandardCharsets.UTF_8); return new ByteArrayInputStream(bytes); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine(); // TODO System.out.print(inputLine); if (inputLine.equals(\"A\")||inputLine.equals('a')) return new Move.Left(0); if (inputLine.equals(\"D\")||inputLine.equals('d')) return new Move.Right(0); if (inputLine.equals(\"W\")||inputLine.equals('w')) return new Move.Up(0); if (inputLine.equals(\"S\")||inputLine.equals('s')) return new Move.Down(0); if (inputLine.equals(\"H\")||inputLine.equals('h')) return new Move.Left(1); if (inputLine.equals(\"L\")||inputLine.equals('l')) return new Move.Right(1); if (inputLine.equals(\"K\")||inputLine.equals('k')) return new Move.Up(1); if (inputLine.equals(\"J\")||inputLine.equals('j')) return new Move.Down(1); if (inputLine.equals(\"U\")||inputLine.equals('u')) return new Undo(1); if (inputLine.equals(\"exit\")||inputLine.equals(\"EXIT\")) return new Exit(1); // System.out.print(\"error\"); return new InvalidInput(0,INVALID_INPUT_MESSAGE); // throw new NotImplementedException(); }",
        "label": "P"
    },
    "249": {
        "dataset": "COMP 3021",
        "project": "yclamam",
        "bug_id": "34",
        "T": "void testUndo(String input, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine(); // TODO System.out.print(inputLine); if (inputLine.equals(\"A\")||inputLine.equals('a')) return new Move.Left(0); if (inputLine.equals(\"D\")||inputLine.equals('d')) return new Move.Right(0); if (inputLine.equals(\"W\")||inputLine.equals('w')) return new Move.Up(0); if (inputLine.equals(\"S\")||inputLine.equals('s')) return new Move.Down(0); if (inputLine.equals(\"H\")||inputLine.equals('h')) return new Move.Left(1); if (inputLine.equals(\"L\")||inputLine.equals('l')) return new Move.Right(1); if (inputLine.equals(\"K\")||inputLine.equals('k')) return new Move.Up(1); if (inputLine.equals(\"J\")||inputLine.equals('j')) return new Move.Down(1); if (inputLine.equals(\"U\")||inputLine.equals('u')) return new Undo(1); if (inputLine.equals(\"exit\")||inputLine.equals(\"EXIT\")) return new Exit(1); // System.out.print(\"error\"); return new InvalidInput(0,INVALID_INPUT_MESSAGE); // throw new NotImplementedException(); }",
        "label": "P"
    },
    "250": {
        "dataset": "COMP 3021",
        "project": "yclamam",
        "bug_id": "35",
        "T": "void testInvalidInput() { final var inputStream = fixValueStream(\"blah blah\"); final var inputEngine = new TerminalInputEngine(inputStream); final var action = inputEngine.fetchAction(); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine(); // TODO System.out.print(inputLine); if (inputLine.equals(\"A\")||inputLine.equals('a')) return new Move.Left(0); if (inputLine.equals(\"D\")||inputLine.equals('d')) return new Move.Right(0); if (inputLine.equals(\"W\")||inputLine.equals('w')) return new Move.Up(0); if (inputLine.equals(\"S\")||inputLine.equals('s')) return new Move.Down(0); if (inputLine.equals(\"H\")||inputLine.equals('h')) return new Move.Left(1); if (inputLine.equals(\"L\")||inputLine.equals('l')) return new Move.Right(1); if (inputLine.equals(\"K\")||inputLine.equals('k')) return new Move.Up(1); if (inputLine.equals(\"J\")||inputLine.equals('j')) return new Move.Down(1); if (inputLine.equals(\"U\")||inputLine.equals('u')) return new Undo(1); if (inputLine.equals(\"exit\")||inputLine.equals(\"EXIT\")) return new Exit(1); // System.out.print(\"error\"); return new InvalidInput(0,INVALID_INPUT_MESSAGE); // throw new NotImplementedException(); }",
        "label": "P"
    },
    "251": {
        "dataset": "COMP 3021",
        "project": "yclamam",
        "bug_id": "36",
        "T": "void testUndoWhenThereIsNoMove() { final var gameState = new GameState(TestHelper.parseGameMap(\"\"\" 233 ###### #A.a@# #..a@# ###### \"\"\" )); gameState.undo(); } private Entity generateEntity(int key) { return switch (key % 4) { case 0 -> new Box(0); case 1 -> new Empty(); case 2 -> new Player(0); case 3 -> new Wall(); default -> throw new ShouldNotReachException(); }; }",
        "C": "public GameState(@NotNull GameMap map) { // TODO originalMap = map; undoLeft=map.undo; // history = new ArrayList<Entity[][]>(); Entity[][] temp = new Entity[map.height][map.width]; System.out.print(map.height+\"\"); for (int i=0; i<map.height; i++){ for(int j=0; j<map.width; j++){ temp[i][j]=map.entityArr[i][j]; } } history.add(temp); // System.out.print(\"originalmap:\"+temp); // for (int i=0; i<4; i++){ // for (int j=0; j<6; j++){ // System.out.print(history.get(0)[i][j]); // } // System.out.print(System.lineSeparator()); // } // throw new NotImplementedException(); } public void undo() { // TODO int historyNum = history.size(); // System.out.print(\"historysize: \"+ historyNum); // if(history.get(0).equals(history.get(1)))System.out.print(\"equalssss\"); // else System.out.print(\"notequal\"); // System.out.print(\"old history: \"+ originalMap.entityArr); for (int i=0; i<4; i++){ for (int j=0; j<6; j++){ System.out.print(history.get(0)[i][j]); } System.out.print(System.lineSeparator()); } originalMap.entityArr=history.get(historyNum-2); // System.out.print(\"new history: \"+ originalMap.entityArr); // for (int i=0; i<4; i++){ // for (int j=0; j<6; j++){ // System.out.print(history.get(1)[i][j]); // } // System.out.print(System.lineSeparator()); // } undoLeft-=1; // throw new NotImplementedException(); } /** * Get the maximum width of the game map. * This should be the same as that in {@link GameMap} public TerminalRenderingEngine(PrintStream outputSteam) { this.outputSteam = outputSteam; } public Box(int playerId) { this.playerId = playerId; } public Player(int id) { this.id = id; } public ShouldNotReachException() { super(\"This branch should not be reached.\"); }",
        "label": "F"
    },
    "252": {
        "dataset": "COMP 3021",
        "project": "yclamam",
        "bug_id": "37",
        "T": "void testGetUndoUnlimited() { final var gameState = new GameState(TestHelper.parseGameMap(\"\"\" -1 ###### #.Aa@# #..a@# ###### \"\"\" )); }",
        "C": "public GameState(@NotNull GameMap map) { // TODO originalMap = map; undoLeft=map.undo; // history = new ArrayList<Entity[][]>(); Entity[][] temp = new Entity[map.height][map.width]; System.out.print(map.height+\"\"); for (int i=0; i<map.height; i++){ for(int j=0; j<map.width; j++){ temp[i][j]=map.entityArr[i][j]; } } history.add(temp); // System.out.print(\"originalmap:\"+temp); // for (int i=0; i<4; i++){ // for (int j=0; j<6; j++){ // System.out.print(history.get(0)[i][j]); // } // System.out.print(System.lineSeparator()); // } // throw new NotImplementedException(); }",
        "label": "P"
    },
    "253": {
        "dataset": "COMP 3021",
        "project": "yclamam",
        "bug_id": "38",
        "T": "void testMapCopying() { final var maxWidth = 2333; final var maxHeight = 2333; final var random = new Random(); final var randomEntities = Stream.generate(() -> Position.of(random.nextInt(maxWidth), random.nextInt(maxHeight))) .distinct() .limit(100) .collect(Collectors.toMap(Function.identity(), it -> generateEntity(it.x()))); final var firstPos = randomEntities.keySet().stream().findFirst(); final var gameMap = new GameMap(maxWidth, maxHeight, Collections.singleton(firstPos.get()), 233); randomEntities.forEach(gameMap::putEntity); final var gameState = new GameState(gameMap); final var randomPosition = randomEntities.keySet().stream().findAny(); gameMap.putEntity(randomPosition.get(), new Empty()); randomEntities.forEach((p, e) -> assertEquals(e, gameState.getEntity(p))); }",
        "C": "public static @NotNull Position of(int x, int y) { return new Position(x, y); } public GameMap(int maxWidth, int maxHeight, Set<Position> destinations, int undoLimit) { // TODO width = maxWidth; height = maxHeight; positions=destinations; undo=undoLimit; // entityArr = new Entity[height][width]; // for (int i=0; i<height; i++){ // for (int j=0; j<width; j++){ // entityArr[height][width]=new Empty(); // } // } // throw new NotImplementedException(); } /** * Parses the map from a string representation. * The first line is undo limit. * Starting from the second line, the game map is represented as follows, * <li># represents a {@link Wall}</li> * <li>@ represents a box destination.</li> * <li>Any upper-case letter represents a {@link Player}.</li> * <li> * Any lower-case letter represents a {@link Box} that is only movable by the player with the corresponding upper-case letter. * For instance, box \"a\" can only be moved by player \"A\" and not movable by player \"B\". * </li> * <li>. represents an {@link Empty} position in the map, meaning there is no player or box currently at this position.</li> * <p> * Notes: * <li> * There can be at most 26 players. * All implementations of classes in the hk.ust.comp3021.game package should support up to 26 players. * </li> * <li> * For simplicity, we assume the given map is bounded with a closed boundary. * There is no need to check this point. * </li> * <li> * Example maps can be found in \"src/main/resources\". * </li> * * @param mapText The string representation. * @return The parsed GameMap object. * @throws IllegalArgumentException if undo limit is negative but not -1. * @throws IllegalArgumentException if there are multiple same upper-case letters, i.e., one player can only exist at one position. * @throws IllegalArgumentException if there are no players in the map. * @throws IllegalArgumentException if the number of boxes is not equal to the number of box destinations. * @throws IllegalArgumentException if there are boxes whose {@link Box#getPlayerId()} public GameState(@NotNull GameMap map) { // TODO originalMap = map; undoLeft=map.undo; // history = new ArrayList<Entity[][]>(); Entity[][] temp = new Entity[map.height][map.width]; System.out.print(map.height+\"\"); for (int i=0; i<map.height; i++){ for(int j=0; j<map.width; j++){ temp[i][j]=map.entityArr[i][j]; } } history.add(temp); // System.out.print(\"originalmap:\"+temp); // for (int i=0; i<4; i++){ // for (int j=0; j<6; j++){ // System.out.print(history.get(0)[i][j]); // } // System.out.print(System.lineSeparator()); // } // throw new NotImplementedException(); } public void putEntity(Position position, Entity entity) { // TODO String[] splited = map.lines().toArray(String[]::new); // System.out.print(map); System.out.print(splited[position.y()+1].charAt(position.x())); char entityChar = 0; // System.out.print(\"entity is: \" + entity instanceof Wall); if (entity instanceof Wall) entityChar='#'; if (entity instanceof Box) { entityChar=(char)(((Box) entity).getPlayerId()+97); } if (entity instanceof Player){ entityChar=(char)(((Player) entity).getId()+65); } if (entity instanceof Empty) entityChar='.'; char[] temp = splited[position.y()+1].toCharArray(); // System.out.print(temp); temp[position.x()]= entityChar; splited[position.y()+1]=new String(temp); // System.out.print(new String(temp)); // System.out.print(\"new line:\"); // System.out.print(splited[position.y()+1]); // map = Arrays.toString(splited); for (int i=0; i<height+1; i++){ // System.out.print(\"yooyoyo\"); map=map.concat(splited[i]); map=map.concat(\"System.lineSeparator()\"); map=map.concat(System.lineSeparator()); } // System.out.print(\"new map:\"); // System.out.print(map); // throw new NotImplementedException(); } public @Nullable Entity getEntity(@NotNull Position position) { // TODO return originalMap.entityArr[position.y()][position.x()]; // String[] splited = originalMap.map.lines().toArray(String[]::new); //// System.out.print(map); // System.out.print(splited[position.y()+1].charAt(position.x())); // int checkchar = (int) splited[position.y()+1].charAt(position.x()); // // if(checkchar<91&&checkchar>64){ // return new Player(checkchar-65); //// System.out.print(checkchar); // } // if(checkchar<123&&checkchar>96){ // return new Box(checkchar-97); //// System.out.print(checkchar); // } // if(checkchar==46){ // return new Empty(); // } // if(checkchar==35){ // return new Wall(); // } // return new Empty(); // throw new NotImplementedException(); } /** * Get all box destination positions as a set in the game map. * This should be the same as that in {@link GameMap}",
        "label": "F"
    },
    "254": {
        "dataset": "COMP 3021",
        "project": "yclamam",
        "bug_id": "39",
        "T": "void testUndoWhenThereIsMoveButNoCheckpoint() { final var gameState = new GameState(TestHelper.parseGameMap(\"\"\" 233 ###### #A.a@# #..a@# ###### \"\"\" )); gameState.move(Position.of(1, 1), Position.of(2, 1)); gameState.undo(); }",
        "C": "public GameState(@NotNull GameMap map) { // TODO originalMap = map; undoLeft=map.undo; // history = new ArrayList<Entity[][]>(); Entity[][] temp = new Entity[map.height][map.width]; System.out.print(map.height+\"\"); for (int i=0; i<map.height; i++){ for(int j=0; j<map.width; j++){ temp[i][j]=map.entityArr[i][j]; } } history.add(temp); // System.out.print(\"originalmap:\"+temp); // for (int i=0; i<4; i++){ // for (int j=0; j<6; j++){ // System.out.print(history.get(0)[i][j]); // } // System.out.print(System.lineSeparator()); // } // throw new NotImplementedException(); } public void move(Position from, Position to) { // TODO originalMap.entityArr[to.y()][to.x()]=originalMap.getEntity(from); originalMap.entityArr[from.y()][from.x()]=new Empty(); // Entity moving = originalMap.getEntity(from); originalMap.putEntity(to,moving); // System.out.print(\"111new map:\"); // System.out.print(originalMap.map); GameMap tempMap = originalMap; tempMap.putEntity(from,new Empty()); // System.out.print(\"222new map:\"); // System.out.print(tempMap.map); // throw new NotImplementedException(); } /** * Record a checkpoint of the game state, including: * <li>All current positions of entities in the game map.</li> * <li>Current undo quota</li> * <p> * Checkpoint is used in {@link GameState#undo()} public static @NotNull Position of(int x, int y) { return new Position(x, y); } public void undo() { // TODO int historyNum = history.size(); // System.out.print(\"historysize: \"+ historyNum); // if(history.get(0).equals(history.get(1)))System.out.print(\"equalssss\"); // else System.out.print(\"notequal\"); // System.out.print(\"old history: \"+ originalMap.entityArr); for (int i=0; i<4; i++){ for (int j=0; j<6; j++){ System.out.print(history.get(0)[i][j]); } System.out.print(System.lineSeparator()); } originalMap.entityArr=history.get(historyNum-2); // System.out.print(\"new history: \"+ originalMap.entityArr); // for (int i=0; i<4; i++){ // for (int j=0; j<6; j++){ // System.out.print(history.get(1)[i][j]); // } // System.out.print(System.lineSeparator()); // } undoLeft-=1; // throw new NotImplementedException(); } /** * Get the maximum width of the game map. * This should be the same as that in {@link GameMap}",
        "label": "F"
    },
    "255": {
        "dataset": "COMP 3021",
        "project": "yclamam",
        "bug_id": "40",
        "T": "void testGameExit() { final var gameState = mock(GameState.class); final var inputEngine = mock(TerminalInputEngine.class); final var renderingEngine = mock(TerminalRenderingEngine.class); when(gameState.isWin()).thenReturn(false, false, false); when(inputEngine.fetchAction()) .thenReturn(new InvalidInput(0, \"\"), new InvalidInput(0, \"\"), new Exit(0)); final var game = new TerminalSokobanGame(gameState, inputEngine, renderingEngine); game.run(); verify(renderingEngine, atLeastOnce()).message(any()); }",
        "C": "public InvalidInput(int initiator, @NotNull String message) { super(initiator); this.message = message; } public Exit(int initiator) { super(initiator); } public TerminalSokobanGame(GameState gameState, TerminalInputEngine inputEngine, TerminalRenderingEngine renderingEngine) { super(gameState); this.inputEngine = inputEngine; this.renderingEngine = renderingEngine; // TODO // Check the number of players if(gameState.getAllPlayerPositions().size()>2) throw new NotImplementedException(); } public void run() { // TODO while (!shouldStop()){ renderingEngine.render(this.state); inputEngine.fetchAction(); } // throw new NotImplementedException(); }",
        "label": "F"
    },
    "256": {
        "dataset": "COMP 3021",
        "project": "yclamam",
        "bug_id": "41",
        "T": "void testGameWin() { final var gameState = mock(GameState.class); final var inputEngine = mock(TerminalInputEngine.class); final var renderingEngine = mock(TerminalRenderingEngine.class); when(gameState.isWin()).thenReturn(false, false, false, true); when(inputEngine.fetchAction()) .thenReturn(new InvalidInput(0, \"\")); final var game = new TerminalSokobanGame(gameState, inputEngine, renderingEngine); game.run(); verify(gameState, atLeastOnce()).isWin(); verify(renderingEngine, atLeastOnce()).message(any()); }",
        "C": "public InvalidInput(int initiator, @NotNull String message) { super(initiator); this.message = message; } public TerminalSokobanGame(GameState gameState, TerminalInputEngine inputEngine, TerminalRenderingEngine renderingEngine) { super(gameState); this.inputEngine = inputEngine; this.renderingEngine = renderingEngine; // TODO // Check the number of players if(gameState.getAllPlayerPositions().size()>2) throw new NotImplementedException(); } public void run() { // TODO while (!shouldStop()){ renderingEngine.render(this.state); inputEngine.fetchAction(); } // throw new NotImplementedException(); }",
        "label": "F"
    },
    "257": {
        "dataset": "COMP 3021",
        "project": "yclamam",
        "bug_id": "42",
        "T": "void testMoreThanTwoPlayers() { final var gameState = mock(GameState.class); final var inputEngine = mock(TerminalInputEngine.class); final var renderingEngine = mock(TerminalRenderingEngine.class); when(gameState.getAllPlayerPositions()).thenReturn(new HashSet<>(Arrays.asList(Position.of(1, 1), Position.of(1, 2), Position.of(1, 3)))); }",
        "C": "public static @NotNull Position of(int x, int y) { return new Position(x, y); }",
        "label": "F"
    },
    "258": {
        "dataset": "COMP 3021",
        "project": "cowongab",
        "bug_id": "0",
        "T": "void moveUp() { Position.of(233, 232), new Move.Up(-1).nextPosition(pos) ); }",
        "C": "public static @NotNull Position of(int x, int y) { return new Position(x, y); } public Up(int initiator) { super(initiator); }",
        "label": "P"
    },
    "259": {
        "dataset": "COMP 3021",
        "project": "cowongab",
        "bug_id": "1",
        "T": "void moveDown() { Position.of(233, 234), new Move.Down(-1).nextPosition(pos) ); }",
        "C": "public static @NotNull Position of(int x, int y) { return new Position(x, y); } public Down(int initiator) { super(initiator); }",
        "label": "P"
    },
    "260": {
        "dataset": "COMP 3021",
        "project": "cowongab",
        "bug_id": "2",
        "T": "void moveRight() { Position.of(234, 233), new Move.Right(-1).nextPosition(pos) ); }",
        "C": "public static @NotNull Position of(int x, int y) { return new Position(x, y); } public Right(int initiator) { super(initiator); }",
        "label": "P"
    },
    "261": {
        "dataset": "COMP 3021",
        "project": "cowongab",
        "bug_id": "3",
        "T": "void testExceedingUndoQuota() { final var gameState = mock(GameState.class); when(gameState.getPlayerPositionById(anyInt())).thenReturn(Position.of(0, 0)); when(gameState.getUndoQuota()).thenReturn(Optional.of(0)); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Undo(0)); }",
        "C": "public Undo(int initiator) { super(initiator); }",
        "label": "P"
    },
    "262": {
        "dataset": "COMP 3021",
        "project": "cowongab",
        "bug_id": "4",
        "T": "void testExit() { final var gameState = mock(GameState.class); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Exit(0)); }",
        "C": "public Exit(int initiator) { super(initiator); }",
        "label": "P"
    },
    "263": {
        "dataset": "COMP 3021",
        "project": "cowongab",
        "bug_id": "5",
        "T": "void testUndoUnlimited() { final var gameState = mock(GameState.class); when(gameState.getPlayerPositionById(anyInt())).thenReturn(Position.of(0, 0)); when(gameState.getUndoQuota()).thenReturn(Optional.empty()); final var game = new SokobanGameForTesting(gameState); for (int i = 0; i < 10000; i++) { final var result = game.feedActionForProcessing(new Undo(0)); } verify(gameState, times(10000)).undo(); }",
        "C": "public TerminalRenderingEngine(PrintStream outputSteam) { this.outputSteam = outputSteam; } public Undo(int initiator) { super(initiator); }",
        "label": "F"
    },
    "264": {
        "dataset": "COMP 3021",
        "project": "cowongab",
        "bug_id": "6",
        "T": "void testPushOtherPlayerBox() { String mapText = \"\"\" 233 ###### #AB.@# #b.a.# #@...# ###### \"\"\"; final var testMap = TestHelper.parseGameMap(mapText); final var gameState = spy(new GameState(testMap)); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Move.Down(0)); verify(gameState, never()).move(any(), any()); }",
        "C": "public GameState(@NotNull GameMap map) { // TODO this.map = map; this.currentMap = new ArrayList<>(map.mapArrayList); this.remainingUndos = map.undoLimit; this.checkpointMap = new ArrayList<>(currentMap); //throw new NotImplementedException(); } public Down(int initiator) { super(initiator); }",
        "label": "P"
    },
    "265": {
        "dataset": "COMP 3021",
        "project": "cowongab",
        "bug_id": "7",
        "T": "void testMoveNonExistingPlayer() { String mapText = \"\"\" 233 ###### #A..@# #a...# ##...# ###### \"\"\"; final var testMap = TestHelper.parseGameMap(mapText); final var gameState = spy(new GameState(testMap)); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Move.Down(23)); }",
        "C": "public GameState(@NotNull GameMap map) { // TODO this.map = map; this.currentMap = new ArrayList<>(map.mapArrayList); this.remainingUndos = map.undoLimit; this.checkpointMap = new ArrayList<>(currentMap); //throw new NotImplementedException(); } public Down(int initiator) { super(initiator); }",
        "label": "F"
    },
    "266": {
        "dataset": "COMP 3021",
        "project": "cowongab",
        "bug_id": "8",
        "T": "void testCheckpointWhenNeed() { final var gameState = spy(new GameState(TestHelper.parseGameMap(\"\"\" 233 ###### #.Aa@# #..a@# ###### \"\"\" ))); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Move.Right(0)); verify(gameState, times(1)).checkpoint(); }",
        "C": "public GameState(@NotNull GameMap map) { // TODO this.map = map; this.currentMap = new ArrayList<>(map.mapArrayList); this.remainingUndos = map.undoLimit; this.checkpointMap = new ArrayList<>(currentMap); //throw new NotImplementedException(); } public Right(int initiator) { super(initiator); }",
        "label": "P"
    },
    "267": {
        "dataset": "COMP 3021",
        "project": "cowongab",
        "bug_id": "9",
        "T": "void testPushBoxAgainstWall() { String mapText = \"\"\" 233 ###### #A..@# #a...# ##...# ###### \"\"\"; final var testMap = TestHelper.parseGameMap(mapText); final var gameState = spy(new GameState(testMap)); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Move.Down(0)); verify(gameState, never()).move(any(), any()); }",
        "C": "public GameState(@NotNull GameMap map) { // TODO this.map = map; this.currentMap = new ArrayList<>(map.mapArrayList); this.remainingUndos = map.undoLimit; this.checkpointMap = new ArrayList<>(currentMap); //throw new NotImplementedException(); } public Down(int initiator) { super(initiator); }",
        "label": "P"
    },
    "268": {
        "dataset": "COMP 3021",
        "project": "cowongab",
        "bug_id": "10",
        "T": "void testCheckpointWhenNotNeed() { final var gameState = spy(new GameState(TestHelper.parseGameMap(\"\"\" 233 ###### #A.a@# #..a@# ###### \"\"\" ))); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Move.Right(0)); verify(gameState, never()).checkpoint(); } private static class SokobanGameForTesting extends AbstractSokobanGame { protected SokobanGameForTesting(GameState gameState) { super(gameState); } @Override public void run() { } public ActionResult feedActionForProcessing(Action action) { return processAction(action); } }",
        "C": "public GameState(@NotNull GameMap map) { // TODO this.map = map; this.currentMap = new ArrayList<>(map.mapArrayList); this.remainingUndos = map.undoLimit; this.checkpointMap = new ArrayList<>(currentMap); //throw new NotImplementedException(); } public Right(int initiator) { super(initiator); } public void run() { // TODO //int round =1; //boolean afterfirstround = false; renderingEngine.message(\"Sokoban game is ready.\"); //renderingEngine.render(this.state); //inputEngine.r Action temp =null; while (shouldStop()!= true) //this.state.isWin()!=true { renderingEngine.render(this.state); String stringQuota = String.valueOf(this.state.getUndoQuota()); stringQuota = stringQuota.replace(\"Optional[\",\"\"); stringQuota = stringQuota.replace(\"]\",\"\"); renderingEngine.message(\"Undo Quota: \"+ stringQuota);//\"Undo Quota: \"+String.valueOf(this.state.getUndoQuota()) renderingEngine.message(\">>>\"); temp = this.inputEngine.fetchAction(); //renderingEngine.render(state); // ActionResult actionResult = this.processAction(temp); //renderingEngine.render(state); // if(actionResult instanceof ActionResult.Success){continue;} else if (actionResult instanceof ActionResult.Failed) { renderingEngine.message(((ActionResult.Failed) actionResult).getReason()); } // // if(temp instanceof Exit){break;} //if(round ==3){break;}; //round += 1; }; renderingEngine.render(state); if(this.state.isWin()){ renderingEngine.message(\"Game exits.\"); renderingEngine.message(\"You win.\");} else {renderingEngine.message(\"Game exits.\");}; } protected ActionResult processAction(@NotNull Action action) { // TODO fectchedAction = action; switch (action) { case InvalidInput ignored: return new ActionResult.Failed(action,\"Invalid input\"); //break; case Undo ignored: if(this.state.remainingUndos == 0) {return new ActionResult.Failed(action, \"You have run out of your undo quota.\"); } else { this.state.undo(); return new ActionResult.Success(action); } //break; case Exit ignored: return new ActionResult.Success(action); //break; case Move move: int playerX = this.state.getPlayerPositionById(action.getInitiator()).x(); int playerY = this.state.getPlayerPositionById(action.getInitiator()).y(); switch (move) { case Move.Left ignored: if (this.state.getEntity(new Position( playerX-1,playerY)) instanceof Wall) { return new ActionResult.Failed(action, \"You hit a wall.\"); } else if (this.state.getEntity(new Position( playerX-1,playerY)) instanceof Player) { return new ActionResult.Failed(action, \"You hit another player.\"); } else if (this.state.getEntity(new Position( playerX-1,playerY)) instanceof Empty) {//empty on left this.state.move(new Position(playerX,playerY),new Position(playerX-1,playerY)); return new ActionResult.Success(action); } else if (this.state.getEntity(new Position( playerX-1,playerY)) instanceof Box) { if (this.state.getEntity(new Position( playerX-2,playerY)) instanceof Empty)//nth on left of box { if(((Box) this.state.getEntity(new Position( playerX-1,playerY))).getPlayerId()== action.getInitiator()) { this.state.checkpoint(); this.state.move(new Position(playerX-1,playerY),new Position(playerX-2,playerY)); this.state.move(new Position(playerX,playerY),new Position(playerX-1,playerY)); return new ActionResult.Success(action);} else {return new ActionResult.Failed(action, \"You cannot move other players' boxes.\");} }// can push the box else {return new ActionResult.Failed(action, \"Failed to push the Box\");} } break; case Move.Right ignored: if (this.state.getEntity(new Position( playerX+1,playerY)) instanceof Wall) { return new ActionResult.Failed(action, \"You hit a wall.\"); } else if (this.state.getEntity(new Position( playerX+1,playerY)) instanceof Player) { return new ActionResult.Failed(action, \"You hit another player.\"); } else if (this.state.getEntity(new Position( playerX+1,playerY)) instanceof Empty) {//empty on right this.state.move(new Position(playerX,playerY),new Position(playerX+1,playerY)); return new ActionResult.Success(action); } else if (this.state.getEntity(new Position( playerX+1,playerY)) instanceof Box) { if (this.state.getEntity(new Position( playerX+2,playerY)) instanceof Empty)//nth on left of box { if(((Box) this.state.getEntity(new Position( playerX+1,playerY))).getPlayerId()== action.getInitiator()) { this.state.checkpoint(); this.state.move(new Position(playerX+1,playerY),new Position(playerX+2,playerY)); this.state.move(new Position(playerX,playerY),new Position(playerX+1,playerY)); return new ActionResult.Success(action);} else {return new ActionResult.Failed(action, \"You cannot move other players' boxes.\");} }// can push the box else {return new ActionResult.Failed(action, \"Failed to push the Box\");} } break; case Move.Up ignored: if (this.state.getEntity(new Position( playerX,playerY-1)) instanceof Wall) { return new ActionResult.Failed(action, \"You hit a wall.\"); } else if (this.state.getEntity(new Position( playerX,playerY-1)) instanceof Player) { return new ActionResult.Failed(action, \"You hit another player.\"); } else if (this.state.getEntity(new Position( playerX,playerY-1)) instanceof Empty) {//empty on top this.state.move(new Position(playerX,playerY),new Position(playerX,playerY-1)); return new ActionResult.Success(action); } else if (this.state.getEntity(new Position( playerX,playerY-1)) instanceof Box) { if (this.state.getEntity(new Position( playerX,playerY-2)) instanceof Empty)//nth on left of box { if(((Box) this.state.getEntity(new Position( playerX,playerY-1))).getPlayerId()== action.getInitiator()) { this.state.checkpoint(); this.state.move(new Position(playerX,playerY-1),new Position(playerX,playerY-2)); this.state.move(new Position(playerX,playerY),new Position(playerX,playerY-1)); return new ActionResult.Success(action);} else {return new ActionResult.Failed(action, \"You cannot move other players' boxes.\");} }// can push the box else {return new ActionResult.Failed(action, \"Failed to push the Box\");} } break; case Move.Down ignored: if (this.state.getEntity(new Position( playerX,playerY+1)) instanceof Wall) { return new ActionResult.Failed(action, \"You hit a wall.\"); } else if (this.state.getEntity(new Position( playerX,playerY+1)) instanceof Player) { return new ActionResult.Failed(action, \"You hit another player.\"); } else if (this.state.getEntity(new Position( playerX,playerY+1)) instanceof Empty) {//empty on down this.state.move(new Position(playerX,playerY),new Position(playerX,playerY+1)); return new ActionResult.Success(action); } else if (this.state.getEntity(new Position( playerX,playerY+1)) instanceof Box) { if (this.state.getEntity(new Position( playerX,playerY+2)) instanceof Empty)//nth on left of box { if(((Box) this.state.getEntity(new Position( playerX,playerY+1))).getPlayerId()== action.getInitiator()) {this.state.checkpoint(); this.state.move(new Position(playerX,playerY+1),new Position(playerX,playerY+2)); this.state.move(new Position(playerX,playerY),new Position(playerX,playerY+1)); return new ActionResult.Success(action);} else {return new ActionResult.Failed(action, \"You cannot move other players' boxes.\");} }// can push the box else {return new ActionResult.Failed(action, \"Failed to push the Box\");} } break; } break; } return null; //throw new NotImplementedException(); }",
        "label": "P"
    },
    "269": {
        "dataset": "COMP 3021",
        "project": "cowongab",
        "bug_id": "11",
        "T": "void testHitAnotherPlayer() { String mapText = \"\"\" 233 ###### #A..@# #B...# #ab.@# ###### \"\"\"; final var testMap = TestHelper.parseGameMap(mapText); final var gameState = spy(new GameState(testMap)); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Move.Down(0)); verify(gameState, never()).move(any(), any()); }",
        "C": "public GameState(@NotNull GameMap map) { // TODO this.map = map; this.currentMap = new ArrayList<>(map.mapArrayList); this.remainingUndos = map.undoLimit; this.checkpointMap = new ArrayList<>(currentMap); //throw new NotImplementedException(); } public Down(int initiator) { super(initiator); }",
        "label": "P"
    },
    "270": {
        "dataset": "COMP 3021",
        "project": "cowongab",
        "bug_id": "12",
        "T": "void testUndoWithinQuota() { final var gameState = mock(GameState.class); when(gameState.getPlayerPositionById(anyInt())).thenReturn(Position.of(0, 0)); when(gameState.getUndoQuota()).thenReturn(Optional.of(1)); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Undo(0)); verify(gameState, times(1)).undo(); }",
        "C": "public Undo(int initiator) { super(initiator); }",
        "label": "F"
    },
    "271": {
        "dataset": "COMP 3021",
        "project": "cowongab",
        "bug_id": "13",
        "T": "void testInvalidInput() { final var game = new SokobanGameForTesting(mock(GameState.class)); final var message = String.valueOf(new Random().nextLong()); final var action = new InvalidInput(-1, message); final var result = game.feedActionForProcessing(action); }",
        "C": "public InvalidInput(int initiator, @NotNull String message) { super(initiator); this.message = message; }",
        "label": "P"
    },
    "272": {
        "dataset": "COMP 3021",
        "project": "cowongab",
        "bug_id": "14",
        "T": "void testUndoLimitParsing() { final var gameMap = TestHelper.parseGameMap(rectangularMap); }",
        "C": "",
        "label": "P"
    },
    "273": {
        "dataset": "COMP 3021",
        "project": "cowongab",
        "bug_id": "15",
        "T": "void testWidthForNonRectangularMap() { final var gameMap = TestHelper.parseGameMap(nonRectangularMap); }",
        "C": "",
        "label": "P"
    },
    "274": {
        "dataset": "COMP 3021",
        "project": "cowongab",
        "bug_id": "16",
        "T": "void testTwoPlayersMap() { final var twoPlayersMap = \"\"\" 233 ###### #A..@# #..B@# #....# #.a..# #..b.# ###### \"\"\"; final var gameMap = TestHelper.parseGameMap(twoPlayersMap); final var playerIds = gameMap.getPlayerIds(); final var expectedIds = new HashSet<Integer>(); expectedIds.add(0); expectedIds.add(1); }",
        "C": "public Set<Integer> getPlayerIds() { // TODO Set<Integer> tempPlayerIds = new HashSet<Integer>(); for(int i=0; i < this.mapArrayList.size();i++ ) { for (int j=0; j < this.mapArrayList.get(i).length();j++) { if(Character.isUpperCase(this.mapArrayList.get(i).charAt(j))) { tempPlayerIds.add(Integer.valueOf((int)(this.mapArrayList.get(i).charAt(j)-'A'))); }; }; }; return tempPlayerIds; //throw new NotImplementedException(); }",
        "label": "P"
    },
    "275": {
        "dataset": "COMP 3021",
        "project": "cowongab",
        "bug_id": "17",
        "T": "void testMapWithoutPlayer() { final var invalidMap = \"\"\" 233 ### #.# ### \"\"\"; } // @Tag(TestKind.HIDDEN) // @Test // void testUnmatchedPlayersAndBoxes() { // final var invalidMap = \"\"\" // 233 // ###### // #A..@# // #...@# // #a.b@# // #.a.@# // #..a.# // ###### // \"\"\"; // assertThrowsExactly(IllegalArgumentException.class, () -> TestHelper.parseGameMap(invalidMap)); // }",
        "C": "public TerminalRenderingEngine(PrintStream outputSteam) { this.outputSteam = outputSteam; }",
        "label": "P"
    },
    "276": {
        "dataset": "COMP 3021",
        "project": "cowongab",
        "bug_id": "18",
        "T": "void testManyPlayersMap() { final var manyPlayersMap = \"\"\" 233 ###### #A.P@@# #vCB@@# #.cpD@# #Ga.d@# #g.bV@# ###### \"\"\"; final var gameMap = TestHelper.parseGameMap(manyPlayersMap); final var playerIds = gameMap.getPlayerIds(); final var expectedIds = new HashSet<>(Arrays.asList( 0, 'P' - 'A', 'C' - 'A', 'B' - 'A', 'D' - 'A', 'G' - 'A', 'V' - 'A' )); }",
        "C": "public Set<Integer> getPlayerIds() { // TODO Set<Integer> tempPlayerIds = new HashSet<Integer>(); for(int i=0; i < this.mapArrayList.size();i++ ) { for (int j=0; j < this.mapArrayList.get(i).length();j++) { if(Character.isUpperCase(this.mapArrayList.get(i).charAt(j))) { tempPlayerIds.add(Integer.valueOf((int)(this.mapArrayList.get(i).charAt(j)-'A'))); }; }; }; return tempPlayerIds; //throw new NotImplementedException(); }",
        "label": "P"
    },
    "277": {
        "dataset": "COMP 3021",
        "project": "cowongab",
        "bug_id": "19",
        "T": "void testHeightForNonRectangularMap() { final var gameMap = TestHelper.parseGameMap(nonRectangularMap); }",
        "C": "",
        "label": "P"
    },
    "278": {
        "dataset": "COMP 3021",
        "project": "cowongab",
        "bug_id": "20",
        "T": "void testDuplicatedPlayers() { final var invalidMap = \"\"\" 233 ###### #A..@# #..A@# #....# #.a..# #..b.# ###### \"\"\"; }",
        "C": "",
        "label": "P"
    },
    "279": {
        "dataset": "COMP 3021",
        "project": "cowongab",
        "bug_id": "21",
        "T": "void testParseMapWithoutUndoLimit() { final var invalidMap = String.join(\"\\n\", rectangularMap.lines().skip(1).toList()); }",
        "C": "",
        "label": "P"
    },
    "280": {
        "dataset": "COMP 3021",
        "project": "cowongab",
        "bug_id": "22",
        "T": "void testInsufficientDestinations() { final var invalidMap = \"\"\" 233 ###### #A..@# #...@# #a...# #.a..# #..a.# ###### \"\"\"; }",
        "C": "",
        "label": "P"
    },
    "281": {
        "dataset": "COMP 3021",
        "project": "cowongab",
        "bug_id": "23",
        "T": "void testSuperLargeMap() { try { new GameMap(Integer.MAX_VALUE, Integer.MAX_VALUE, Collections.emptySet(), 0); } catch (OutOfMemoryError e) { throw new RuntimeException(e); } }); }",
        "C": "public GameMap(int maxWidth, int maxHeight, Set<Position> destinations, int undoLimit) { // TODO this.maxWidth = maxWidth; this.maxHeight = maxHeight; this.destination = destinations; this.undoLimit = undoLimit; //throw new NotImplementedException(); } /** * Parses the map from a string representation. * The first line is undo limit. * Starting from the second line, the game map is represented as follows, * <li># represents a {@link Wall}</li> * <li>@ represents a box destination.</li> * <li>Any upper-case letter represents a {@link Player}.</li> * <li> * Any lower-case letter represents a {@link Box} that is only movable by the player with the corresponding upper-case letter. * For instance, box \"a\" can only be moved by player \"A\" and not movable by player \"B\". * </li> * <li>. represents an {@link Empty} position in the map, meaning there is no player or box currently at this position.</li> * <p> * Notes: * <li> * There can be at most 26 players. * All implementations of classes in the hk.ust.comp3021.game package should support up to 26 players. * </li> * <li> * For simplicity, we assume the given map is bounded with a closed boundary. * There is no need to check this point. * </li> * <li> * Example maps can be found in \"src/main/resources\". * </li> * * @param mapText The string representation. * @return The parsed GameMap object. * @throws IllegalArgumentException if undo limit is negative but not -1. * @throws IllegalArgumentException if there are multiple same upper-case letters, i.e., one player can only exist at one position. * @throws IllegalArgumentException if there are no players in the map. * @throws IllegalArgumentException if the number of boxes is not equal to the number of box destinations. * @throws IllegalArgumentException if there are boxes whose {@link Box#getPlayerId()} public TerminalRenderingEngine(PrintStream outputSteam) { this.outputSteam = outputSteam; }",
        "label": "P"
    },
    "282": {
        "dataset": "COMP 3021",
        "project": "cowongab",
        "bug_id": "24",
        "T": "void testInvalidUndoLimit() { final var invalidMap = \"\"\" -233 ###### #A..@# #...@# #a.b@# #.a.@# #..a.# ###### \"\"\"; }",
        "C": "",
        "label": "P"
    },
    "283": {
        "dataset": "COMP 3021",
        "project": "cowongab",
        "bug_id": "25",
        "T": "void testEmptyMap() { final var invalidMap = \"\"; }",
        "C": "",
        "label": "P"
    },
    "284": {
        "dataset": "COMP 3021",
        "project": "cowongab",
        "bug_id": "26",
        "T": "void testMove(String input, String name, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); } private InputStream fixValueStream(String content) { final var bytes = content.getBytes(StandardCharsets.UTF_8); return new ByteArrayInputStream(bytes); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine(); // TODO switch (inputLine.toLowerCase()){ case \"w\":return new Move.Up(0); case \"a\":return new Move.Left(0); case \"s\":return new Move.Down(0); case \"d\":return new Move.Right(0); case \"h\":return new Move.Left(0); case \"j\":return new Move.Down(0); case \"k\":return new Move.Up(0); case \"l\":return new Move.Right(0); case \"u\":return new Undo(0); case \"exit\": return new Exit(0); } return null; //throw new NotImplementedException(); }",
        "label": "P"
    },
    "285": {
        "dataset": "COMP 3021",
        "project": "cowongab",
        "bug_id": "27",
        "T": "void testMove(String input, String name, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); } private InputStream fixValueStream(String content) { final var bytes = content.getBytes(StandardCharsets.UTF_8); return new ByteArrayInputStream(bytes); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine(); // TODO switch (inputLine.toLowerCase()){ case \"w\":return new Move.Up(0); case \"a\":return new Move.Left(0); case \"s\":return new Move.Down(0); case \"d\":return new Move.Right(0); case \"h\":return new Move.Left(0); case \"j\":return new Move.Down(0); case \"k\":return new Move.Up(0); case \"l\":return new Move.Right(0); case \"u\":return new Undo(0); case \"exit\": return new Exit(0); } return null; //throw new NotImplementedException(); }",
        "label": "P"
    },
    "286": {
        "dataset": "COMP 3021",
        "project": "cowongab",
        "bug_id": "28",
        "T": "void testMove(String input, String name, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); } private InputStream fixValueStream(String content) { final var bytes = content.getBytes(StandardCharsets.UTF_8); return new ByteArrayInputStream(bytes); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine(); // TODO switch (inputLine.toLowerCase()){ case \"w\":return new Move.Up(0); case \"a\":return new Move.Left(0); case \"s\":return new Move.Down(0); case \"d\":return new Move.Right(0); case \"h\":return new Move.Left(0); case \"j\":return new Move.Down(0); case \"k\":return new Move.Up(0); case \"l\":return new Move.Right(0); case \"u\":return new Undo(0); case \"exit\": return new Exit(0); } return null; //throw new NotImplementedException(); }",
        "label": "P"
    },
    "287": {
        "dataset": "COMP 3021",
        "project": "cowongab",
        "bug_id": "29",
        "T": "void testMove(String input, String name, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); } private InputStream fixValueStream(String content) { final var bytes = content.getBytes(StandardCharsets.UTF_8); return new ByteArrayInputStream(bytes); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine(); // TODO switch (inputLine.toLowerCase()){ case \"w\":return new Move.Up(0); case \"a\":return new Move.Left(0); case \"s\":return new Move.Down(0); case \"d\":return new Move.Right(0); case \"h\":return new Move.Left(0); case \"j\":return new Move.Down(0); case \"k\":return new Move.Up(0); case \"l\":return new Move.Right(0); case \"u\":return new Undo(0); case \"exit\": return new Exit(0); } return null; //throw new NotImplementedException(); }",
        "label": "P"
    },
    "288": {
        "dataset": "COMP 3021",
        "project": "cowongab",
        "bug_id": "30",
        "T": "void testMove(String input, String name, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); } private InputStream fixValueStream(String content) { final var bytes = content.getBytes(StandardCharsets.UTF_8); return new ByteArrayInputStream(bytes); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine(); // TODO switch (inputLine.toLowerCase()){ case \"w\":return new Move.Up(0); case \"a\":return new Move.Left(0); case \"s\":return new Move.Down(0); case \"d\":return new Move.Right(0); case \"h\":return new Move.Left(0); case \"j\":return new Move.Down(0); case \"k\":return new Move.Up(0); case \"l\":return new Move.Right(0); case \"u\":return new Undo(0); case \"exit\": return new Exit(0); } return null; //throw new NotImplementedException(); }",
        "label": "F"
    },
    "289": {
        "dataset": "COMP 3021",
        "project": "cowongab",
        "bug_id": "31",
        "T": "void testMove(String input, String name, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); } private InputStream fixValueStream(String content) { final var bytes = content.getBytes(StandardCharsets.UTF_8); return new ByteArrayInputStream(bytes); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine(); // TODO switch (inputLine.toLowerCase()){ case \"w\":return new Move.Up(0); case \"a\":return new Move.Left(0); case \"s\":return new Move.Down(0); case \"d\":return new Move.Right(0); case \"h\":return new Move.Left(0); case \"j\":return new Move.Down(0); case \"k\":return new Move.Up(0); case \"l\":return new Move.Right(0); case \"u\":return new Undo(0); case \"exit\": return new Exit(0); } return null; //throw new NotImplementedException(); }",
        "label": "F"
    },
    "290": {
        "dataset": "COMP 3021",
        "project": "cowongab",
        "bug_id": "32",
        "T": "void testMove(String input, String name, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); } private InputStream fixValueStream(String content) { final var bytes = content.getBytes(StandardCharsets.UTF_8); return new ByteArrayInputStream(bytes); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine(); // TODO switch (inputLine.toLowerCase()){ case \"w\":return new Move.Up(0); case \"a\":return new Move.Left(0); case \"s\":return new Move.Down(0); case \"d\":return new Move.Right(0); case \"h\":return new Move.Left(0); case \"j\":return new Move.Down(0); case \"k\":return new Move.Up(0); case \"l\":return new Move.Right(0); case \"u\":return new Undo(0); case \"exit\": return new Exit(0); } return null; //throw new NotImplementedException(); }",
        "label": "F"
    },
    "291": {
        "dataset": "COMP 3021",
        "project": "cowongab",
        "bug_id": "33",
        "T": "void testMove(String input, String name, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); } private InputStream fixValueStream(String content) { final var bytes = content.getBytes(StandardCharsets.UTF_8); return new ByteArrayInputStream(bytes); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine(); // TODO switch (inputLine.toLowerCase()){ case \"w\":return new Move.Up(0); case \"a\":return new Move.Left(0); case \"s\":return new Move.Down(0); case \"d\":return new Move.Right(0); case \"h\":return new Move.Left(0); case \"j\":return new Move.Down(0); case \"k\":return new Move.Up(0); case \"l\":return new Move.Right(0); case \"u\":return new Undo(0); case \"exit\": return new Exit(0); } return null; //throw new NotImplementedException(); }",
        "label": "F"
    },
    "292": {
        "dataset": "COMP 3021",
        "project": "cowongab",
        "bug_id": "34",
        "T": "void testUndo(String input, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine(); // TODO switch (inputLine.toLowerCase()){ case \"w\":return new Move.Up(0); case \"a\":return new Move.Left(0); case \"s\":return new Move.Down(0); case \"d\":return new Move.Right(0); case \"h\":return new Move.Left(0); case \"j\":return new Move.Down(0); case \"k\":return new Move.Up(0); case \"l\":return new Move.Right(0); case \"u\":return new Undo(0); case \"exit\": return new Exit(0); } return null; //throw new NotImplementedException(); }",
        "label": "P"
    },
    "293": {
        "dataset": "COMP 3021",
        "project": "cowongab",
        "bug_id": "35",
        "T": "void testInvalidInput() { final var inputStream = fixValueStream(\"blah blah\"); final var inputEngine = new TerminalInputEngine(inputStream); final var action = inputEngine.fetchAction(); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine(); // TODO switch (inputLine.toLowerCase()){ case \"w\":return new Move.Up(0); case \"a\":return new Move.Left(0); case \"s\":return new Move.Down(0); case \"d\":return new Move.Right(0); case \"h\":return new Move.Left(0); case \"j\":return new Move.Down(0); case \"k\":return new Move.Up(0); case \"l\":return new Move.Right(0); case \"u\":return new Undo(0); case \"exit\": return new Exit(0); } return null; //throw new NotImplementedException(); }",
        "label": "F"
    },
    "294": {
        "dataset": "COMP 3021",
        "project": "cowongab",
        "bug_id": "36",
        "T": "void testUndoWhenThereIsNoMove() { final var gameState = new GameState(TestHelper.parseGameMap(\"\"\" 233 ###### #A.a@# #..a@# ###### \"\"\" )); gameState.undo(); } private Entity generateEntity(int key) { return switch (key % 4) { case 0 -> new Box(0); case 1 -> new Empty(); case 2 -> new Player(0); case 3 -> new Wall(); default -> throw new ShouldNotReachException(); }; }",
        "C": "public GameState(@NotNull GameMap map) { // TODO this.map = map; this.currentMap = new ArrayList<>(map.mapArrayList); this.remainingUndos = map.undoLimit; this.checkpointMap = new ArrayList<>(currentMap); //throw new NotImplementedException(); } public void undo() { // TODO if(historyCheckPoints.size()!=0) { //this.currentMap = new ArrayList<>(this.checkpointMap);//this.checkpointMap; //System.out.println(historyCheckPoints.get(0)); this.currentMap = new ArrayList<>(historyCheckPoints.get(historyCheckPoints.size()-1)); this.remainingUndos -= 1; //System.out.println(historyCheckPoints.get(0)); historyCheckPoints.remove(historyCheckPoints.size()-1); } else if (historyCheckPoints.size() == 0) { this.currentMap = new ArrayList<>(this.map.mapArrayList); //System.out.println(\"hiiiiiiiii\"); //this.remainingUndos-=1; } //throw new NotImplementedException(); } /** * Get the maximum width of the game map. * This should be the same as that in {@link GameMap} public TerminalRenderingEngine(PrintStream outputSteam) { this.outputSteam = outputSteam; } public Box(int playerId) { this.playerId = playerId; } public Player(int id) { this.id = id; } public ShouldNotReachException() { super(\"This branch should not be reached.\"); }",
        "label": "P"
    },
    "295": {
        "dataset": "COMP 3021",
        "project": "cowongab",
        "bug_id": "37",
        "T": "void testGetUndoUnlimited() { final var gameState = new GameState(TestHelper.parseGameMap(\"\"\" -1 ###### #.Aa@# #..a@# ###### \"\"\" )); }",
        "C": "public GameState(@NotNull GameMap map) { // TODO this.map = map; this.currentMap = new ArrayList<>(map.mapArrayList); this.remainingUndos = map.undoLimit; this.checkpointMap = new ArrayList<>(currentMap); //throw new NotImplementedException(); }",
        "label": "F"
    },
    "296": {
        "dataset": "COMP 3021",
        "project": "cowongab",
        "bug_id": "38",
        "T": "void testMapCopying() { final var maxWidth = 2333; final var maxHeight = 2333; final var random = new Random(); final var randomEntities = Stream.generate(() -> Position.of(random.nextInt(maxWidth), random.nextInt(maxHeight))) .distinct() .limit(100) .collect(Collectors.toMap(Function.identity(), it -> generateEntity(it.x()))); final var firstPos = randomEntities.keySet().stream().findFirst(); final var gameMap = new GameMap(maxWidth, maxHeight, Collections.singleton(firstPos.get()), 233); randomEntities.forEach(gameMap::putEntity); final var gameState = new GameState(gameMap); final var randomPosition = randomEntities.keySet().stream().findAny(); gameMap.putEntity(randomPosition.get(), new Empty()); randomEntities.forEach((p, e) -> assertEquals(e, gameState.getEntity(p))); }",
        "C": "public static @NotNull Position of(int x, int y) { return new Position(x, y); } public GameMap(int maxWidth, int maxHeight, Set<Position> destinations, int undoLimit) { // TODO this.maxWidth = maxWidth; this.maxHeight = maxHeight; this.destination = destinations; this.undoLimit = undoLimit; //throw new NotImplementedException(); } /** * Parses the map from a string representation. * The first line is undo limit. * Starting from the second line, the game map is represented as follows, * <li># represents a {@link Wall}</li> * <li>@ represents a box destination.</li> * <li>Any upper-case letter represents a {@link Player}.</li> * <li> * Any lower-case letter represents a {@link Box} that is only movable by the player with the corresponding upper-case letter. * For instance, box \"a\" can only be moved by player \"A\" and not movable by player \"B\". * </li> * <li>. represents an {@link Empty} position in the map, meaning there is no player or box currently at this position.</li> * <p> * Notes: * <li> * There can be at most 26 players. * All implementations of classes in the hk.ust.comp3021.game package should support up to 26 players. * </li> * <li> * For simplicity, we assume the given map is bounded with a closed boundary. * There is no need to check this point. * </li> * <li> * Example maps can be found in \"src/main/resources\". * </li> * * @param mapText The string representation. * @return The parsed GameMap object. * @throws IllegalArgumentException if undo limit is negative but not -1. * @throws IllegalArgumentException if there are multiple same upper-case letters, i.e., one player can only exist at one position. * @throws IllegalArgumentException if there are no players in the map. * @throws IllegalArgumentException if the number of boxes is not equal to the number of box destinations. * @throws IllegalArgumentException if there are boxes whose {@link Box#getPlayerId()} public GameState(@NotNull GameMap map) { // TODO this.map = map; this.currentMap = new ArrayList<>(map.mapArrayList); this.remainingUndos = map.undoLimit; this.checkpointMap = new ArrayList<>(currentMap); //throw new NotImplementedException(); } public void putEntity(Position position, Entity entity) { // TODO char[] temp = this.mapArrayList.get(position.y()).toCharArray(); if(entity instanceof Wall) {temp[position.x()]='#'; this.mapArrayList.set(position.y(), String.valueOf(temp));} else if (entity instanceof Empty) { temp[position.x()]='.'; this.mapArrayList.set(position.y(), String.valueOf(temp)); } else if (entity instanceof Player) { temp[position.x()]=(char)('A'+((Player) entity).getId()); this.mapArrayList.set(position.y(), String.valueOf(temp)); } else if (entity instanceof Box) { temp[position.x()]=(char)('a'+((Box) entity).getPlayerId()); this.mapArrayList.set(position.y(), String.valueOf(temp)); } //throw new NotImplementedException(); } public @Nullable Entity getEntity(@NotNull Position position) { // TODO if(currentMap.get(position.y()).length() <= position.x()){return null;}; switch(currentMap.get(position.y()).charAt(position.x())) { case '#': // code block return new Wall(); //break; case '.': // code block return new Empty(); //break; case '@': // code block return new Empty();//this.mapArrayList.get(position.y()).charAt(position.x())) //break; case ' ': return null; default: if(Character.isUpperCase(currentMap.get(position.y()).charAt(position.x()))) {return new Player((int)(currentMap.get(position.y()).charAt(position.x()) - 'A'));} else if (Character.isLowerCase(currentMap.get(position.y()).charAt(position.x()))) { return new Box((int)(currentMap.get(position.y()).charAt(position.x()) - 'a')); } }; return null; //throw new NotImplementedException(); } /** * Get all box destination positions as a set in the game map. * This should be the same as that in {@link GameMap}",
        "label": "F"
    },
    "297": {
        "dataset": "COMP 3021",
        "project": "cowongab",
        "bug_id": "39",
        "T": "void testUndoWhenThereIsMoveButNoCheckpoint() { final var gameState = new GameState(TestHelper.parseGameMap(\"\"\" 233 ###### #A.a@# #..a@# ###### \"\"\" )); gameState.move(Position.of(1, 1), Position.of(2, 1)); gameState.undo(); }",
        "C": "public GameState(@NotNull GameMap map) { // TODO this.map = map; this.currentMap = new ArrayList<>(map.mapArrayList); this.remainingUndos = map.undoLimit; this.checkpointMap = new ArrayList<>(currentMap); //throw new NotImplementedException(); } public void move(Position from, Position to) { // TODO if(Character.isLowerCase(currentMap.get(from.y()).charAt(from.x()))) { //this.checkpointMap = new ArrayList<>(this.currentMap); historyCheckPoints.add(new ArrayList<>(this.currentMap)); //System.out.println(\"I reached here, stored checkpoint =\"); //for (int i=0; i< historyCheckPoints.get(0);i++) //System.out.println(historyCheckPoints.get(0)); }; char objToBeMoved = this.currentMap.get(from.y()).charAt(from.x()); char[] tempString = currentMap.get(from.y()).toCharArray();//for horizontal char[] tempStringFrom = currentMap.get(from.y()).toCharArray(); // for vertical char[] tempStringTo = currentMap.get(to.y()).toCharArray(); if(from.y() == to.y()) //horizontal movement { tempString[to.x()] = objToBeMoved; tempString[from.x()]= '.'; this.currentMap.set(from.y(), String.valueOf(tempString)); } else if (from.y() != to.y()) { tempStringTo[from.x()] = objToBeMoved; tempStringFrom[from.x()] = '.'; this.currentMap.set(from.y(), String.valueOf(tempStringFrom)); this.currentMap.set(to.y(), String.valueOf(tempStringTo)); } //throw new NotImplementedException(); } /** * Record a checkpoint of the game state, including: * <li>All current positions of entities in the game map.</li> * <li>Current undo quota</li> * <p> * Checkpoint is used in {@link GameState#undo()} public static @NotNull Position of(int x, int y) { return new Position(x, y); } public void undo() { // TODO if(historyCheckPoints.size()!=0) { //this.currentMap = new ArrayList<>(this.checkpointMap);//this.checkpointMap; //System.out.println(historyCheckPoints.get(0)); this.currentMap = new ArrayList<>(historyCheckPoints.get(historyCheckPoints.size()-1)); this.remainingUndos -= 1; //System.out.println(historyCheckPoints.get(0)); historyCheckPoints.remove(historyCheckPoints.size()-1); } else if (historyCheckPoints.size() == 0) { this.currentMap = new ArrayList<>(this.map.mapArrayList); //System.out.println(\"hiiiiiiiii\"); //this.remainingUndos-=1; } //throw new NotImplementedException(); } /** * Get the maximum width of the game map. * This should be the same as that in {@link GameMap}",
        "label": "P"
    },
    "298": {
        "dataset": "COMP 3021",
        "project": "cowongab",
        "bug_id": "40",
        "T": "void testGameExit() { final var gameState = mock(GameState.class); final var inputEngine = mock(TerminalInputEngine.class); final var renderingEngine = mock(TerminalRenderingEngine.class); when(gameState.isWin()).thenReturn(false, false, false); when(inputEngine.fetchAction()) .thenReturn(new InvalidInput(0, \"\"), new InvalidInput(0, \"\"), new Exit(0)); final var game = new TerminalSokobanGame(gameState, inputEngine, renderingEngine); game.run(); verify(renderingEngine, atLeastOnce()).message(any()); }",
        "C": "public InvalidInput(int initiator, @NotNull String message) { super(initiator); this.message = message; } public Exit(int initiator) { super(initiator); } public TerminalSokobanGame(GameState gameState, TerminalInputEngine inputEngine, TerminalRenderingEngine renderingEngine) { super(gameState); this.inputEngine = inputEngine; this.renderingEngine = renderingEngine; // TODO if(gameState.getAllPlayerPositions().size() > 2) { throw new IllegalArgumentException(); }; // Check the number of players //throw new NotImplementedException(); } public void run() { // TODO //int round =1; //boolean afterfirstround = false; renderingEngine.message(\"Sokoban game is ready.\"); //renderingEngine.render(this.state); //inputEngine.r Action temp =null; while (shouldStop()!= true) //this.state.isWin()!=true { renderingEngine.render(this.state); String stringQuota = String.valueOf(this.state.getUndoQuota()); stringQuota = stringQuota.replace(\"Optional[\",\"\"); stringQuota = stringQuota.replace(\"]\",\"\"); renderingEngine.message(\"Undo Quota: \"+ stringQuota);//\"Undo Quota: \"+String.valueOf(this.state.getUndoQuota()) renderingEngine.message(\">>>\"); temp = this.inputEngine.fetchAction(); //renderingEngine.render(state); // ActionResult actionResult = this.processAction(temp); //renderingEngine.render(state); // if(actionResult instanceof ActionResult.Success){continue;} else if (actionResult instanceof ActionResult.Failed) { renderingEngine.message(((ActionResult.Failed) actionResult).getReason()); } // // if(temp instanceof Exit){break;} //if(round ==3){break;}; //round += 1; }; renderingEngine.render(state); if(this.state.isWin()){ renderingEngine.message(\"Game exits.\"); renderingEngine.message(\"You win.\");} else {renderingEngine.message(\"Game exits.\");}; }",
        "label": "P"
    },
    "299": {
        "dataset": "COMP 3021",
        "project": "cowongab",
        "bug_id": "41",
        "T": "void testGameWin() { final var gameState = mock(GameState.class); final var inputEngine = mock(TerminalInputEngine.class); final var renderingEngine = mock(TerminalRenderingEngine.class); when(gameState.isWin()).thenReturn(false, false, false, true); when(inputEngine.fetchAction()) .thenReturn(new InvalidInput(0, \"\")); final var game = new TerminalSokobanGame(gameState, inputEngine, renderingEngine); game.run(); verify(gameState, atLeastOnce()).isWin(); verify(renderingEngine, atLeastOnce()).message(any()); }",
        "C": "public InvalidInput(int initiator, @NotNull String message) { super(initiator); this.message = message; } public TerminalSokobanGame(GameState gameState, TerminalInputEngine inputEngine, TerminalRenderingEngine renderingEngine) { super(gameState); this.inputEngine = inputEngine; this.renderingEngine = renderingEngine; // TODO if(gameState.getAllPlayerPositions().size() > 2) { throw new IllegalArgumentException(); }; // Check the number of players //throw new NotImplementedException(); } public void run() { // TODO //int round =1; //boolean afterfirstround = false; renderingEngine.message(\"Sokoban game is ready.\"); //renderingEngine.render(this.state); //inputEngine.r Action temp =null; while (shouldStop()!= true) //this.state.isWin()!=true { renderingEngine.render(this.state); String stringQuota = String.valueOf(this.state.getUndoQuota()); stringQuota = stringQuota.replace(\"Optional[\",\"\"); stringQuota = stringQuota.replace(\"]\",\"\"); renderingEngine.message(\"Undo Quota: \"+ stringQuota);//\"Undo Quota: \"+String.valueOf(this.state.getUndoQuota()) renderingEngine.message(\">>>\"); temp = this.inputEngine.fetchAction(); //renderingEngine.render(state); // ActionResult actionResult = this.processAction(temp); //renderingEngine.render(state); // if(actionResult instanceof ActionResult.Success){continue;} else if (actionResult instanceof ActionResult.Failed) { renderingEngine.message(((ActionResult.Failed) actionResult).getReason()); } // // if(temp instanceof Exit){break;} //if(round ==3){break;}; //round += 1; }; renderingEngine.render(state); if(this.state.isWin()){ renderingEngine.message(\"Game exits.\"); renderingEngine.message(\"You win.\");} else {renderingEngine.message(\"Game exits.\");}; }",
        "label": "P"
    },
    "300": {
        "dataset": "COMP 3021",
        "project": "cowongab",
        "bug_id": "42",
        "T": "void testMoreThanTwoPlayers() { final var gameState = mock(GameState.class); final var inputEngine = mock(TerminalInputEngine.class); final var renderingEngine = mock(TerminalRenderingEngine.class); when(gameState.getAllPlayerPositions()).thenReturn(new HashSet<>(Arrays.asList(Position.of(1, 1), Position.of(1, 2), Position.of(1, 3)))); }",
        "C": "public static @NotNull Position of(int x, int y) { return new Position(x, y); }",
        "label": "P"
    },
    "301": {
        "dataset": "COMP 3021",
        "project": "wychowac",
        "bug_id": "0",
        "T": "void moveUp() { Position.of(233, 232), new Move.Up(-1).nextPosition(pos) ); }",
        "C": "public static @NotNull Position of(int x, int y) { return new Position(x, y); } public Up(int initiator) { super(initiator); }",
        "label": "P"
    },
    "302": {
        "dataset": "COMP 3021",
        "project": "wychowac",
        "bug_id": "1",
        "T": "void moveDown() { Position.of(233, 234), new Move.Down(-1).nextPosition(pos) ); }",
        "C": "public static @NotNull Position of(int x, int y) { return new Position(x, y); } public Down(int initiator) { super(initiator); }",
        "label": "P"
    },
    "303": {
        "dataset": "COMP 3021",
        "project": "wychowac",
        "bug_id": "2",
        "T": "void moveRight() { Position.of(234, 233), new Move.Right(-1).nextPosition(pos) ); }",
        "C": "public static @NotNull Position of(int x, int y) { return new Position(x, y); } public Right(int initiator) { super(initiator); }",
        "label": "P"
    },
    "304": {
        "dataset": "COMP 3021",
        "project": "wychowac",
        "bug_id": "3",
        "T": "void testExceedingUndoQuota() { final var gameState = mock(GameState.class); when(gameState.getPlayerPositionById(anyInt())).thenReturn(Position.of(0, 0)); when(gameState.getUndoQuota()).thenReturn(Optional.of(0)); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Undo(0)); }",
        "C": "public Undo(int initiator) { super(initiator); }",
        "label": "F"
    },
    "305": {
        "dataset": "COMP 3021",
        "project": "wychowac",
        "bug_id": "4",
        "T": "void testExit() { final var gameState = mock(GameState.class); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Exit(0)); }",
        "C": "public Exit(int initiator) { super(initiator); }",
        "label": "P"
    },
    "306": {
        "dataset": "COMP 3021",
        "project": "wychowac",
        "bug_id": "5",
        "T": "void testUndoUnlimited() { final var gameState = mock(GameState.class); when(gameState.getPlayerPositionById(anyInt())).thenReturn(Position.of(0, 0)); when(gameState.getUndoQuota()).thenReturn(Optional.empty()); final var game = new SokobanGameForTesting(gameState); for (int i = 0; i < 10000; i++) { final var result = game.feedActionForProcessing(new Undo(0)); } verify(gameState, times(10000)).undo(); }",
        "C": "public TerminalRenderingEngine(PrintStream outputSteam) { this.outputSteam = outputSteam; } public Undo(int initiator) { super(initiator); }",
        "label": "P"
    },
    "307": {
        "dataset": "COMP 3021",
        "project": "wychowac",
        "bug_id": "6",
        "T": "void testPushOtherPlayerBox() { String mapText = \"\"\" 233 ###### #AB.@# #b.a.# #@...# ###### \"\"\"; final var testMap = TestHelper.parseGameMap(mapText); final var gameState = spy(new GameState(testMap)); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Move.Down(0)); verify(gameState, never()).move(any(), any()); }",
        "C": "public GameState(@NotNull GameMap map) { // TODO this.gameMap = map; undoQuota = map.undolimit; // throw new NotImplementedException(); } public Down(int initiator) { super(initiator); }",
        "label": "F"
    },
    "308": {
        "dataset": "COMP 3021",
        "project": "wychowac",
        "bug_id": "7",
        "T": "void testMoveNonExistingPlayer() { String mapText = \"\"\" 233 ###### #A..@# #a...# ##...# ###### \"\"\"; final var testMap = TestHelper.parseGameMap(mapText); final var gameState = spy(new GameState(testMap)); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Move.Down(23)); }",
        "C": "public GameState(@NotNull GameMap map) { // TODO this.gameMap = map; undoQuota = map.undolimit; // throw new NotImplementedException(); } public Down(int initiator) { super(initiator); }",
        "label": "P"
    },
    "309": {
        "dataset": "COMP 3021",
        "project": "wychowac",
        "bug_id": "8",
        "T": "void testCheckpointWhenNeed() { final var gameState = spy(new GameState(TestHelper.parseGameMap(\"\"\" 233 ###### #.Aa@# #..a@# ###### \"\"\" ))); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Move.Right(0)); verify(gameState, times(1)).checkpoint(); }",
        "C": "public GameState(@NotNull GameMap map) { // TODO this.gameMap = map; undoQuota = map.undolimit; // throw new NotImplementedException(); } public Right(int initiator) { super(initiator); }",
        "label": "P"
    },
    "310": {
        "dataset": "COMP 3021",
        "project": "wychowac",
        "bug_id": "9",
        "T": "void testPushBoxAgainstWall() { String mapText = \"\"\" 233 ###### #A..@# #a...# ##...# ###### \"\"\"; final var testMap = TestHelper.parseGameMap(mapText); final var gameState = spy(new GameState(testMap)); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Move.Down(0)); verify(gameState, never()).move(any(), any()); }",
        "C": "public GameState(@NotNull GameMap map) { // TODO this.gameMap = map; undoQuota = map.undolimit; // throw new NotImplementedException(); } public Down(int initiator) { super(initiator); }",
        "label": "P"
    },
    "311": {
        "dataset": "COMP 3021",
        "project": "wychowac",
        "bug_id": "10",
        "T": "void testCheckpointWhenNotNeed() { final var gameState = spy(new GameState(TestHelper.parseGameMap(\"\"\" 233 ###### #A.a@# #..a@# ###### \"\"\" ))); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Move.Right(0)); verify(gameState, never()).checkpoint(); } private static class SokobanGameForTesting extends AbstractSokobanGame { protected SokobanGameForTesting(GameState gameState) { super(gameState); } @Override public void run() { } public ActionResult feedActionForProcessing(Action action) { return processAction(action); } }",
        "C": "public GameState(@NotNull GameMap map) { // TODO this.gameMap = map; undoQuota = map.undolimit; // throw new NotImplementedException(); } public Right(int initiator) { super(initiator); } public void run() { // TODO //while ! stop, render, input engine while(!shouldStop()){ renderingEngine.render(this.state); System.out.println(this.state); processAction(inputEngine.fetchAction()); System.out.println(\"end\"); } // throw new NotImplementedException(); } protected ActionResult processAction(@NotNull Action action) { // TODO System.out.println(\"processAction\"); if (action instanceof Exit){ this.exit = true; }else if (action instanceof Undo){ this.state.undo(); } else if (action instanceof Move){ Move currmove = (Move) action; Position playerpostion = this.state.getPlayerPositionById(action.getInitiator()); Position nextposition = currmove.nextPosition(playerpostion); System.out.println(\"processAction\"); System.out.println(this.state.gameMap.getEntity(playerpostion)); System.out.println(this.state.gameMap.getEntity(nextposition)); System.out.println(this.state.gameMap.getEntity(new Position(2,1))); System.out.println(nextposition.x()); System.out.println(nextposition.y()); if (this.state.gameMap.getEntity(nextposition) instanceof Box){ if ( this.state.gameMap.getEntity(currmove.nextPosition(nextposition))instanceof Wall ){ return new ActionResult.Failed(action,\"wall\"); } this.state.move(nextposition, currmove.nextPosition(nextposition)); this.state.move(playerpostion, nextposition); this.state.checkpoint(); }else if (this.state.gameMap.getEntity(nextposition) instanceof Empty){ this.state.move(playerpostion, nextposition); }else if (this.state.gameMap.getEntity(nextposition) instanceof Wall){ // what to include in reason ????? return new ActionResult.Failed(action,\"wall\"); } } return new ActionResult.Success(action); // throw new NotImplementedException(); }",
        "label": "P"
    },
    "312": {
        "dataset": "COMP 3021",
        "project": "wychowac",
        "bug_id": "11",
        "T": "void testHitAnotherPlayer() { String mapText = \"\"\" 233 ###### #A..@# #B...# #ab.@# ###### \"\"\"; final var testMap = TestHelper.parseGameMap(mapText); final var gameState = spy(new GameState(testMap)); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Move.Down(0)); verify(gameState, never()).move(any(), any()); }",
        "C": "public GameState(@NotNull GameMap map) { // TODO this.gameMap = map; undoQuota = map.undolimit; // throw new NotImplementedException(); } public Down(int initiator) { super(initiator); }",
        "label": "F"
    },
    "313": {
        "dataset": "COMP 3021",
        "project": "wychowac",
        "bug_id": "12",
        "T": "void testUndoWithinQuota() { final var gameState = mock(GameState.class); when(gameState.getPlayerPositionById(anyInt())).thenReturn(Position.of(0, 0)); when(gameState.getUndoQuota()).thenReturn(Optional.of(1)); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Undo(0)); verify(gameState, times(1)).undo(); }",
        "C": "public Undo(int initiator) { super(initiator); }",
        "label": "P"
    },
    "314": {
        "dataset": "COMP 3021",
        "project": "wychowac",
        "bug_id": "13",
        "T": "void testInvalidInput() { final var game = new SokobanGameForTesting(mock(GameState.class)); final var message = String.valueOf(new Random().nextLong()); final var action = new InvalidInput(-1, message); final var result = game.feedActionForProcessing(action); }",
        "C": "public InvalidInput(int initiator, @NotNull String message) { super(initiator); this.message = message; }",
        "label": "F"
    },
    "315": {
        "dataset": "COMP 3021",
        "project": "wychowac",
        "bug_id": "14",
        "T": "void testUndoLimitParsing() { final var gameMap = TestHelper.parseGameMap(rectangularMap); }",
        "C": "",
        "label": "P"
    },
    "316": {
        "dataset": "COMP 3021",
        "project": "wychowac",
        "bug_id": "15",
        "T": "void testWidthForNonRectangularMap() { final var gameMap = TestHelper.parseGameMap(nonRectangularMap); }",
        "C": "",
        "label": "P"
    },
    "317": {
        "dataset": "COMP 3021",
        "project": "wychowac",
        "bug_id": "16",
        "T": "void testTwoPlayersMap() { final var twoPlayersMap = \"\"\" 233 ###### #A..@# #..B@# #....# #.a..# #..b.# ###### \"\"\"; final var gameMap = TestHelper.parseGameMap(twoPlayersMap); final var playerIds = gameMap.getPlayerIds(); final var expectedIds = new HashSet<Integer>(); expectedIds.add(0); expectedIds.add(1); }",
        "C": "public Set<Integer> getPlayerIds() { // TODO Set<Integer> curr = new HashSet<>(); System.out.println(\"getPlayer\"); for (int i = 0 ; i < 26 ; i ++){ if (players[i]) curr.add(i); } return curr; }",
        "label": "P"
    },
    "318": {
        "dataset": "COMP 3021",
        "project": "wychowac",
        "bug_id": "17",
        "T": "void testMapWithoutPlayer() { final var invalidMap = \"\"\" 233 ### #.# ### \"\"\"; } // @Tag(TestKind.HIDDEN) // @Test // void testUnmatchedPlayersAndBoxes() { // final var invalidMap = \"\"\" // 233 // ###### // #A..@# // #...@# // #a.b@# // #.a.@# // #..a.# // ###### // \"\"\"; // assertThrowsExactly(IllegalArgumentException.class, () -> TestHelper.parseGameMap(invalidMap)); // }",
        "C": "public TerminalRenderingEngine(PrintStream outputSteam) { this.outputSteam = outputSteam; }",
        "label": "P"
    },
    "319": {
        "dataset": "COMP 3021",
        "project": "wychowac",
        "bug_id": "18",
        "T": "void testManyPlayersMap() { final var manyPlayersMap = \"\"\" 233 ###### #A.P@@# #vCB@@# #.cpD@# #Ga.d@# #g.bV@# ###### \"\"\"; final var gameMap = TestHelper.parseGameMap(manyPlayersMap); final var playerIds = gameMap.getPlayerIds(); final var expectedIds = new HashSet<>(Arrays.asList( 0, 'P' - 'A', 'C' - 'A', 'B' - 'A', 'D' - 'A', 'G' - 'A', 'V' - 'A' )); }",
        "C": "public Set<Integer> getPlayerIds() { // TODO Set<Integer> curr = new HashSet<>(); System.out.println(\"getPlayer\"); for (int i = 0 ; i < 26 ; i ++){ if (players[i]) curr.add(i); } return curr; }",
        "label": "P"
    },
    "320": {
        "dataset": "COMP 3021",
        "project": "wychowac",
        "bug_id": "19",
        "T": "void testHeightForNonRectangularMap() { final var gameMap = TestHelper.parseGameMap(nonRectangularMap); }",
        "C": "",
        "label": "P"
    },
    "321": {
        "dataset": "COMP 3021",
        "project": "wychowac",
        "bug_id": "20",
        "T": "void testDuplicatedPlayers() { final var invalidMap = \"\"\" 233 ###### #A..@# #..A@# #....# #.a..# #..b.# ###### \"\"\"; }",
        "C": "",
        "label": "P"
    },
    "322": {
        "dataset": "COMP 3021",
        "project": "wychowac",
        "bug_id": "21",
        "T": "void testParseMapWithoutUndoLimit() { final var invalidMap = String.join(\"\\n\", rectangularMap.lines().skip(1).toList()); }",
        "C": "",
        "label": "P"
    },
    "323": {
        "dataset": "COMP 3021",
        "project": "wychowac",
        "bug_id": "22",
        "T": "void testInsufficientDestinations() { final var invalidMap = \"\"\" 233 ###### #A..@# #...@# #a...# #.a..# #..a.# ###### \"\"\"; }",
        "C": "",
        "label": "P"
    },
    "324": {
        "dataset": "COMP 3021",
        "project": "wychowac",
        "bug_id": "23",
        "T": "void testSuperLargeMap() { try { new GameMap(Integer.MAX_VALUE, Integer.MAX_VALUE, Collections.emptySet(), 0); } catch (OutOfMemoryError e) { throw new RuntimeException(e); } }); }",
        "C": "public GameMap(int maxWidth, int maxHeight, Set<Position> destinations, int undoLimit) { // TODO this.maxwidth = maxWidth; this.maxheigth = maxHeight; this.undolimit = undoLimit; destination = destinations; // throw new NotImplementedException(); } /** * Parses the map from a string representation. * The first line is undo limit. * Starting from the second line, the game map is represented as follows, * <li># represents a {@link Wall}</li> * <li>@ represents a box destination.</li> * <li>Any upper-case letter represents a {@link Player}.</li> * <li> * Any lower-case letter represents a {@link Box} that is only movable by the player with the corresponding upper-case letter. * For instance, box \"a\" can only be moved by player \"A\" and not movable by player \"B\". * </li> * <li>. represents an {@link Empty} position in the map, meaning there is no player or box currently at this position.</li> * <p> * Notes: * <li> * There can be at most 26 players. * All implementations of classes in the hk.ust.comp3021.game package should support up to 26 players. * </li> * <li> * For simplicity, we assume the given map is bounded with a closed boundary. * There is no need to check this point. * </li> * <li> * Example maps can be found in \"src/main/resources\". * </li> * * @param mapText The string representation. * @return The parsed GameMap object. * @throws IllegalArgumentException if undo limit is negative but not -1. * @throws IllegalArgumentException if there are multiple same upper-case letters, i.e., one player can only exist at one position. * @throws IllegalArgumentException if there are no players in the map. * @throws IllegalArgumentException if the number of boxes is not equal to the number of box destinations. * @throws IllegalArgumentException if there are boxes whose {@link Box#getPlayerId()} public TerminalRenderingEngine(PrintStream outputSteam) { this.outputSteam = outputSteam; }",
        "label": "P"
    },
    "325": {
        "dataset": "COMP 3021",
        "project": "wychowac",
        "bug_id": "24",
        "T": "void testInvalidUndoLimit() { final var invalidMap = \"\"\" -233 ###### #A..@# #...@# #a.b@# #.a.@# #..a.# ###### \"\"\"; }",
        "C": "",
        "label": "P"
    },
    "326": {
        "dataset": "COMP 3021",
        "project": "wychowac",
        "bug_id": "25",
        "T": "void testEmptyMap() { final var invalidMap = \"\"; }",
        "C": "",
        "label": "P"
    },
    "327": {
        "dataset": "COMP 3021",
        "project": "wychowac",
        "bug_id": "26",
        "T": "void testMove(String input, String name, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); } private InputStream fixValueStream(String content) { final var bytes = content.getBytes(StandardCharsets.UTF_8); return new ByteArrayInputStream(bytes); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. System.out.println(\"type your input: \"); final var inputLine = terminalScanner.nextLine(); System.out.println(\"terminal\"); System.out.println(inputLine); if (inputLine.equals(\"exit\")){ // what is the initiator value return new Exit(0); } else if (inputLine.equals(\"A\")){ return new Move.Left(0); } else if (inputLine.equals(\"S\")){ return new Move.Down(0); } else if (inputLine.equals(\"W\")){ return new Move.Up(0); } else if (inputLine.equals(\"D\")){ return new Move.Right(0); } else if (inputLine.equals(\"H\")){ return new Move.Left(1); } else if (inputLine.equals(\"J\")){ return new Move.Down(1); } else if (inputLine.equals(\"K\")){ return new Move.Up(1); } else if (inputLine.equals(\"L\")){ return new Move.Right(1); } else if (inputLine.equals(\"U\")){ return new Undo(0); } // TODO throw new NotImplementedException(); }",
        "label": "F"
    },
    "328": {
        "dataset": "COMP 3021",
        "project": "wychowac",
        "bug_id": "27",
        "T": "void testMove(String input, String name, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); } private InputStream fixValueStream(String content) { final var bytes = content.getBytes(StandardCharsets.UTF_8); return new ByteArrayInputStream(bytes); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. System.out.println(\"type your input: \"); final var inputLine = terminalScanner.nextLine(); System.out.println(\"terminal\"); System.out.println(inputLine); if (inputLine.equals(\"exit\")){ // what is the initiator value return new Exit(0); } else if (inputLine.equals(\"A\")){ return new Move.Left(0); } else if (inputLine.equals(\"S\")){ return new Move.Down(0); } else if (inputLine.equals(\"W\")){ return new Move.Up(0); } else if (inputLine.equals(\"D\")){ return new Move.Right(0); } else if (inputLine.equals(\"H\")){ return new Move.Left(1); } else if (inputLine.equals(\"J\")){ return new Move.Down(1); } else if (inputLine.equals(\"K\")){ return new Move.Up(1); } else if (inputLine.equals(\"L\")){ return new Move.Right(1); } else if (inputLine.equals(\"U\")){ return new Undo(0); } // TODO throw new NotImplementedException(); }",
        "label": "F"
    },
    "329": {
        "dataset": "COMP 3021",
        "project": "wychowac",
        "bug_id": "28",
        "T": "void testMove(String input, String name, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); } private InputStream fixValueStream(String content) { final var bytes = content.getBytes(StandardCharsets.UTF_8); return new ByteArrayInputStream(bytes); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. System.out.println(\"type your input: \"); final var inputLine = terminalScanner.nextLine(); System.out.println(\"terminal\"); System.out.println(inputLine); if (inputLine.equals(\"exit\")){ // what is the initiator value return new Exit(0); } else if (inputLine.equals(\"A\")){ return new Move.Left(0); } else if (inputLine.equals(\"S\")){ return new Move.Down(0); } else if (inputLine.equals(\"W\")){ return new Move.Up(0); } else if (inputLine.equals(\"D\")){ return new Move.Right(0); } else if (inputLine.equals(\"H\")){ return new Move.Left(1); } else if (inputLine.equals(\"J\")){ return new Move.Down(1); } else if (inputLine.equals(\"K\")){ return new Move.Up(1); } else if (inputLine.equals(\"L\")){ return new Move.Right(1); } else if (inputLine.equals(\"U\")){ return new Undo(0); } // TODO throw new NotImplementedException(); }",
        "label": "F"
    },
    "330": {
        "dataset": "COMP 3021",
        "project": "wychowac",
        "bug_id": "29",
        "T": "void testMove(String input, String name, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); } private InputStream fixValueStream(String content) { final var bytes = content.getBytes(StandardCharsets.UTF_8); return new ByteArrayInputStream(bytes); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. System.out.println(\"type your input: \"); final var inputLine = terminalScanner.nextLine(); System.out.println(\"terminal\"); System.out.println(inputLine); if (inputLine.equals(\"exit\")){ // what is the initiator value return new Exit(0); } else if (inputLine.equals(\"A\")){ return new Move.Left(0); } else if (inputLine.equals(\"S\")){ return new Move.Down(0); } else if (inputLine.equals(\"W\")){ return new Move.Up(0); } else if (inputLine.equals(\"D\")){ return new Move.Right(0); } else if (inputLine.equals(\"H\")){ return new Move.Left(1); } else if (inputLine.equals(\"J\")){ return new Move.Down(1); } else if (inputLine.equals(\"K\")){ return new Move.Up(1); } else if (inputLine.equals(\"L\")){ return new Move.Right(1); } else if (inputLine.equals(\"U\")){ return new Undo(0); } // TODO throw new NotImplementedException(); }",
        "label": "F"
    },
    "331": {
        "dataset": "COMP 3021",
        "project": "wychowac",
        "bug_id": "30",
        "T": "void testMove(String input, String name, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); } private InputStream fixValueStream(String content) { final var bytes = content.getBytes(StandardCharsets.UTF_8); return new ByteArrayInputStream(bytes); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. System.out.println(\"type your input: \"); final var inputLine = terminalScanner.nextLine(); System.out.println(\"terminal\"); System.out.println(inputLine); if (inputLine.equals(\"exit\")){ // what is the initiator value return new Exit(0); } else if (inputLine.equals(\"A\")){ return new Move.Left(0); } else if (inputLine.equals(\"S\")){ return new Move.Down(0); } else if (inputLine.equals(\"W\")){ return new Move.Up(0); } else if (inputLine.equals(\"D\")){ return new Move.Right(0); } else if (inputLine.equals(\"H\")){ return new Move.Left(1); } else if (inputLine.equals(\"J\")){ return new Move.Down(1); } else if (inputLine.equals(\"K\")){ return new Move.Up(1); } else if (inputLine.equals(\"L\")){ return new Move.Right(1); } else if (inputLine.equals(\"U\")){ return new Undo(0); } // TODO throw new NotImplementedException(); }",
        "label": "F"
    },
    "332": {
        "dataset": "COMP 3021",
        "project": "wychowac",
        "bug_id": "31",
        "T": "void testMove(String input, String name, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); } private InputStream fixValueStream(String content) { final var bytes = content.getBytes(StandardCharsets.UTF_8); return new ByteArrayInputStream(bytes); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. System.out.println(\"type your input: \"); final var inputLine = terminalScanner.nextLine(); System.out.println(\"terminal\"); System.out.println(inputLine); if (inputLine.equals(\"exit\")){ // what is the initiator value return new Exit(0); } else if (inputLine.equals(\"A\")){ return new Move.Left(0); } else if (inputLine.equals(\"S\")){ return new Move.Down(0); } else if (inputLine.equals(\"W\")){ return new Move.Up(0); } else if (inputLine.equals(\"D\")){ return new Move.Right(0); } else if (inputLine.equals(\"H\")){ return new Move.Left(1); } else if (inputLine.equals(\"J\")){ return new Move.Down(1); } else if (inputLine.equals(\"K\")){ return new Move.Up(1); } else if (inputLine.equals(\"L\")){ return new Move.Right(1); } else if (inputLine.equals(\"U\")){ return new Undo(0); } // TODO throw new NotImplementedException(); }",
        "label": "F"
    },
    "333": {
        "dataset": "COMP 3021",
        "project": "wychowac",
        "bug_id": "32",
        "T": "void testMove(String input, String name, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); } private InputStream fixValueStream(String content) { final var bytes = content.getBytes(StandardCharsets.UTF_8); return new ByteArrayInputStream(bytes); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. System.out.println(\"type your input: \"); final var inputLine = terminalScanner.nextLine(); System.out.println(\"terminal\"); System.out.println(inputLine); if (inputLine.equals(\"exit\")){ // what is the initiator value return new Exit(0); } else if (inputLine.equals(\"A\")){ return new Move.Left(0); } else if (inputLine.equals(\"S\")){ return new Move.Down(0); } else if (inputLine.equals(\"W\")){ return new Move.Up(0); } else if (inputLine.equals(\"D\")){ return new Move.Right(0); } else if (inputLine.equals(\"H\")){ return new Move.Left(1); } else if (inputLine.equals(\"J\")){ return new Move.Down(1); } else if (inputLine.equals(\"K\")){ return new Move.Up(1); } else if (inputLine.equals(\"L\")){ return new Move.Right(1); } else if (inputLine.equals(\"U\")){ return new Undo(0); } // TODO throw new NotImplementedException(); }",
        "label": "F"
    },
    "334": {
        "dataset": "COMP 3021",
        "project": "wychowac",
        "bug_id": "33",
        "T": "void testMove(String input, String name, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); } private InputStream fixValueStream(String content) { final var bytes = content.getBytes(StandardCharsets.UTF_8); return new ByteArrayInputStream(bytes); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. System.out.println(\"type your input: \"); final var inputLine = terminalScanner.nextLine(); System.out.println(\"terminal\"); System.out.println(inputLine); if (inputLine.equals(\"exit\")){ // what is the initiator value return new Exit(0); } else if (inputLine.equals(\"A\")){ return new Move.Left(0); } else if (inputLine.equals(\"S\")){ return new Move.Down(0); } else if (inputLine.equals(\"W\")){ return new Move.Up(0); } else if (inputLine.equals(\"D\")){ return new Move.Right(0); } else if (inputLine.equals(\"H\")){ return new Move.Left(1); } else if (inputLine.equals(\"J\")){ return new Move.Down(1); } else if (inputLine.equals(\"K\")){ return new Move.Up(1); } else if (inputLine.equals(\"L\")){ return new Move.Right(1); } else if (inputLine.equals(\"U\")){ return new Undo(0); } // TODO throw new NotImplementedException(); }",
        "label": "F"
    },
    "335": {
        "dataset": "COMP 3021",
        "project": "wychowac",
        "bug_id": "34",
        "T": "void testUndo(String input, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. System.out.println(\"type your input: \"); final var inputLine = terminalScanner.nextLine(); System.out.println(\"terminal\"); System.out.println(inputLine); if (inputLine.equals(\"exit\")){ // what is the initiator value return new Exit(0); } else if (inputLine.equals(\"A\")){ return new Move.Left(0); } else if (inputLine.equals(\"S\")){ return new Move.Down(0); } else if (inputLine.equals(\"W\")){ return new Move.Up(0); } else if (inputLine.equals(\"D\")){ return new Move.Right(0); } else if (inputLine.equals(\"H\")){ return new Move.Left(1); } else if (inputLine.equals(\"J\")){ return new Move.Down(1); } else if (inputLine.equals(\"K\")){ return new Move.Up(1); } else if (inputLine.equals(\"L\")){ return new Move.Right(1); } else if (inputLine.equals(\"U\")){ return new Undo(0); } // TODO throw new NotImplementedException(); }",
        "label": "F"
    },
    "336": {
        "dataset": "COMP 3021",
        "project": "wychowac",
        "bug_id": "35",
        "T": "void testInvalidInput() { final var inputStream = fixValueStream(\"blah blah\"); final var inputEngine = new TerminalInputEngine(inputStream); final var action = inputEngine.fetchAction(); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. System.out.println(\"type your input: \"); final var inputLine = terminalScanner.nextLine(); System.out.println(\"terminal\"); System.out.println(inputLine); if (inputLine.equals(\"exit\")){ // what is the initiator value return new Exit(0); } else if (inputLine.equals(\"A\")){ return new Move.Left(0); } else if (inputLine.equals(\"S\")){ return new Move.Down(0); } else if (inputLine.equals(\"W\")){ return new Move.Up(0); } else if (inputLine.equals(\"D\")){ return new Move.Right(0); } else if (inputLine.equals(\"H\")){ return new Move.Left(1); } else if (inputLine.equals(\"J\")){ return new Move.Down(1); } else if (inputLine.equals(\"K\")){ return new Move.Up(1); } else if (inputLine.equals(\"L\")){ return new Move.Right(1); } else if (inputLine.equals(\"U\")){ return new Undo(0); } // TODO throw new NotImplementedException(); }",
        "label": "F"
    },
    "337": {
        "dataset": "COMP 3021",
        "project": "wychowac",
        "bug_id": "36",
        "T": "void testUndoWhenThereIsNoMove() { final var gameState = new GameState(TestHelper.parseGameMap(\"\"\" 233 ###### #A.a@# #..a@# ###### \"\"\" )); gameState.undo(); } private Entity generateEntity(int key) { return switch (key % 4) { case 0 -> new Box(0); case 1 -> new Empty(); case 2 -> new Player(0); case 3 -> new Wall(); default -> throw new ShouldNotReachException(); }; }",
        "C": "public GameState(@NotNull GameMap map) { // TODO this.gameMap = map; undoQuota = map.undolimit; // throw new NotImplementedException(); } public void undo() { // TODO undoQuota --; System.out.println(\"undo\"); System.out.println(GameMap.mapArray[3][1]); History last_history; if (this.gameMap.historyArray.size()==0){ for (int i = 0; i < GameMap.mapArray.length; i ++ ){ for (int j = 0; j < GameMap.mapArray[0].length ; j ++){ GameMap.original_mapArray [i][j] = GameMap.mapArray[i][j]; } } } if (this.gameMap.historyArray.size() ==1){ System.out.println(\"revert to original map\"); for (int i = 0; i < GameMap.mapArray.length; i ++ ){ for (int j = 0; j < GameMap.mapArray[0].length ; j ++){ GameMap.mapArray[i][j] = GameMap.original_mapArray [i][j]; } } } else{ last_history = this.gameMap.historyArray.get(this.gameMap.historyArray.size()-2); Entity [][] lastEntity = last_history.arrayMap(); for (int i = 0; i < GameMap.mapArray.length; i ++ ){ for (int j = 0; j < GameMap.mapArray[0].length ; j ++){ GameMap.mapArray[i][j] = lastEntity [i][j]; } } } this.gameMap.historyArray.remove(this.gameMap.historyArray.size()-1); System.out.println(\"undo\"); // throw new NotImplementedException(); } /** * Get the maximum width of the game map. * This should be the same as that in {@link GameMap} public TerminalRenderingEngine(PrintStream outputSteam) { this.outputSteam = outputSteam; } public Box(int playerId) { this.playerId = playerId; } public Player(int id) { this.id = id; } public ShouldNotReachException() { super(\"This branch should not be reached.\"); }",
        "label": "F"
    },
    "338": {
        "dataset": "COMP 3021",
        "project": "wychowac",
        "bug_id": "37",
        "T": "void testGetUndoUnlimited() { final var gameState = new GameState(TestHelper.parseGameMap(\"\"\" -1 ###### #.Aa@# #..a@# ###### \"\"\" )); }",
        "C": "public GameState(@NotNull GameMap map) { // TODO this.gameMap = map; undoQuota = map.undolimit; // throw new NotImplementedException(); }",
        "label": "F"
    },
    "339": {
        "dataset": "COMP 3021",
        "project": "wychowac",
        "bug_id": "38",
        "T": "void testMapCopying() { final var maxWidth = 2333; final var maxHeight = 2333; final var random = new Random(); final var randomEntities = Stream.generate(() -> Position.of(random.nextInt(maxWidth), random.nextInt(maxHeight))) .distinct() .limit(100) .collect(Collectors.toMap(Function.identity(), it -> generateEntity(it.x()))); final var firstPos = randomEntities.keySet().stream().findFirst(); final var gameMap = new GameMap(maxWidth, maxHeight, Collections.singleton(firstPos.get()), 233); randomEntities.forEach(gameMap::putEntity); final var gameState = new GameState(gameMap); final var randomPosition = randomEntities.keySet().stream().findAny(); gameMap.putEntity(randomPosition.get(), new Empty()); randomEntities.forEach((p, e) -> assertEquals(e, gameState.getEntity(p))); }",
        "C": "public static @NotNull Position of(int x, int y) { return new Position(x, y); } public GameMap(int maxWidth, int maxHeight, Set<Position> destinations, int undoLimit) { // TODO this.maxwidth = maxWidth; this.maxheigth = maxHeight; this.undolimit = undoLimit; destination = destinations; // throw new NotImplementedException(); } /** * Parses the map from a string representation. * The first line is undo limit. * Starting from the second line, the game map is represented as follows, * <li># represents a {@link Wall}</li> * <li>@ represents a box destination.</li> * <li>Any upper-case letter represents a {@link Player}.</li> * <li> * Any lower-case letter represents a {@link Box} that is only movable by the player with the corresponding upper-case letter. * For instance, box \"a\" can only be moved by player \"A\" and not movable by player \"B\". * </li> * <li>. represents an {@link Empty} position in the map, meaning there is no player or box currently at this position.</li> * <p> * Notes: * <li> * There can be at most 26 players. * All implementations of classes in the hk.ust.comp3021.game package should support up to 26 players. * </li> * <li> * For simplicity, we assume the given map is bounded with a closed boundary. * There is no need to check this point. * </li> * <li> * Example maps can be found in \"src/main/resources\". * </li> * * @param mapText The string representation. * @return The parsed GameMap object. * @throws IllegalArgumentException if undo limit is negative but not -1. * @throws IllegalArgumentException if there are multiple same upper-case letters, i.e., one player can only exist at one position. * @throws IllegalArgumentException if there are no players in the map. * @throws IllegalArgumentException if the number of boxes is not equal to the number of box destinations. * @throws IllegalArgumentException if there are boxes whose {@link Box#getPlayerId()} public GameState(@NotNull GameMap map) { // TODO this.gameMap = map; undoQuota = map.undolimit; // throw new NotImplementedException(); } public void putEntity(Position position, Entity entity) { // TODO System.out.println(\"putEntity\"); mapArray[position.x()][position.y()]= entity; } public @Nullable Entity getEntity(@NotNull Position position) { // TODO return this.gameMap.getEntity(position); // throw new NotImplementedException(); } /** * Get all box destination positions as a set in the game map. * This should be the same as that in {@link GameMap}",
        "label": "F"
    },
    "340": {
        "dataset": "COMP 3021",
        "project": "wychowac",
        "bug_id": "39",
        "T": "void testUndoWhenThereIsMoveButNoCheckpoint() { final var gameState = new GameState(TestHelper.parseGameMap(\"\"\" 233 ###### #A.a@# #..a@# ###### \"\"\" )); gameState.move(Position.of(1, 1), Position.of(2, 1)); gameState.undo(); }",
        "C": "public GameState(@NotNull GameMap map) { // TODO this.gameMap = map; undoQuota = map.undolimit; // throw new NotImplementedException(); } public void move(Position from, Position to) { // TODO // this.checkpoint(); System.out.println(\"move\"); System.out.println(gameMap.getEntity(from)); System.out.print(to.x()); System.out.println(to.y()); GameMap.mapArray[to.y()][to.x()]=this.gameMap.getEntity(from); GameMap.mapArray[from.y()][from.x()]=new Empty(); // throw new NotImplementedException(); } /** * Record a checkpoint of the game state, including: * <li>All current positions of entities in the game map.</li> * <li>Current undo quota</li> * <p> * Checkpoint is used in {@link GameState#undo()} public static @NotNull Position of(int x, int y) { return new Position(x, y); } public void undo() { // TODO undoQuota --; System.out.println(\"undo\"); System.out.println(GameMap.mapArray[3][1]); History last_history; if (this.gameMap.historyArray.size()==0){ for (int i = 0; i < GameMap.mapArray.length; i ++ ){ for (int j = 0; j < GameMap.mapArray[0].length ; j ++){ GameMap.original_mapArray [i][j] = GameMap.mapArray[i][j]; } } } if (this.gameMap.historyArray.size() ==1){ System.out.println(\"revert to original map\"); for (int i = 0; i < GameMap.mapArray.length; i ++ ){ for (int j = 0; j < GameMap.mapArray[0].length ; j ++){ GameMap.mapArray[i][j] = GameMap.original_mapArray [i][j]; } } } else{ last_history = this.gameMap.historyArray.get(this.gameMap.historyArray.size()-2); Entity [][] lastEntity = last_history.arrayMap(); for (int i = 0; i < GameMap.mapArray.length; i ++ ){ for (int j = 0; j < GameMap.mapArray[0].length ; j ++){ GameMap.mapArray[i][j] = lastEntity [i][j]; } } } this.gameMap.historyArray.remove(this.gameMap.historyArray.size()-1); System.out.println(\"undo\"); // throw new NotImplementedException(); } /** * Get the maximum width of the game map. * This should be the same as that in {@link GameMap}",
        "label": "F"
    },
    "341": {
        "dataset": "COMP 3021",
        "project": "wychowac",
        "bug_id": "40",
        "T": "void testGameExit() { final var gameState = mock(GameState.class); final var inputEngine = mock(TerminalInputEngine.class); final var renderingEngine = mock(TerminalRenderingEngine.class); when(gameState.isWin()).thenReturn(false, false, false); when(inputEngine.fetchAction()) .thenReturn(new InvalidInput(0, \"\"), new InvalidInput(0, \"\"), new Exit(0)); final var game = new TerminalSokobanGame(gameState, inputEngine, renderingEngine); game.run(); verify(renderingEngine, atLeastOnce()).message(any()); }",
        "C": "public InvalidInput(int initiator, @NotNull String message) { super(initiator); this.message = message; } public Exit(int initiator) { super(initiator); } public TerminalSokobanGame(GameState gameState, TerminalInputEngine inputEngine, TerminalRenderingEngine renderingEngine) { super(gameState); this.inputEngine = inputEngine; this.renderingEngine = renderingEngine; // TODO System.out.println(\"construct\"); int count =0; for (int i = 0; i < GameMap.mapArray.length; i ++ ){ for (int j = 0; j < GameMap.mapArray[0].length ; j ++){ if (GameMap.mapArray[i][j] instanceof Player){ count++; if (count >= 3){ throw new IllegalArgumentException(); } } } } // Check the number of players } public void run() { // TODO //while ! stop, render, input engine while(!shouldStop()){ renderingEngine.render(this.state); System.out.println(this.state); processAction(inputEngine.fetchAction()); System.out.println(\"end\"); } // throw new NotImplementedException(); }",
        "label": "F"
    },
    "342": {
        "dataset": "COMP 3021",
        "project": "wychowac",
        "bug_id": "41",
        "T": "void testGameWin() { final var gameState = mock(GameState.class); final var inputEngine = mock(TerminalInputEngine.class); final var renderingEngine = mock(TerminalRenderingEngine.class); when(gameState.isWin()).thenReturn(false, false, false, true); when(inputEngine.fetchAction()) .thenReturn(new InvalidInput(0, \"\")); final var game = new TerminalSokobanGame(gameState, inputEngine, renderingEngine); game.run(); verify(gameState, atLeastOnce()).isWin(); verify(renderingEngine, atLeastOnce()).message(any()); }",
        "C": "public InvalidInput(int initiator, @NotNull String message) { super(initiator); this.message = message; } public TerminalSokobanGame(GameState gameState, TerminalInputEngine inputEngine, TerminalRenderingEngine renderingEngine) { super(gameState); this.inputEngine = inputEngine; this.renderingEngine = renderingEngine; // TODO System.out.println(\"construct\"); int count =0; for (int i = 0; i < GameMap.mapArray.length; i ++ ){ for (int j = 0; j < GameMap.mapArray[0].length ; j ++){ if (GameMap.mapArray[i][j] instanceof Player){ count++; if (count >= 3){ throw new IllegalArgumentException(); } } } } // Check the number of players } public void run() { // TODO //while ! stop, render, input engine while(!shouldStop()){ renderingEngine.render(this.state); System.out.println(this.state); processAction(inputEngine.fetchAction()); System.out.println(\"end\"); } // throw new NotImplementedException(); }",
        "label": "F"
    },
    "343": {
        "dataset": "COMP 3021",
        "project": "wychowac",
        "bug_id": "42",
        "T": "void testMoreThanTwoPlayers() { final var gameState = mock(GameState.class); final var inputEngine = mock(TerminalInputEngine.class); final var renderingEngine = mock(TerminalRenderingEngine.class); when(gameState.getAllPlayerPositions()).thenReturn(new HashSet<>(Arrays.asList(Position.of(1, 1), Position.of(1, 2), Position.of(1, 3)))); }",
        "C": "public static @NotNull Position of(int x, int y) { return new Position(x, y); }",
        "label": "F"
    },
    "344": {
        "dataset": "COMP 3021",
        "project": "kwwongbw",
        "bug_id": "0",
        "T": "void moveUp() { Position.of(233, 232), new Move.Up(-1).nextPosition(pos) ); }",
        "C": "public static @NotNull Position of(int x, int y) { return new Position(x, y); } public Up(int initiator) { super(initiator); }",
        "label": "P"
    },
    "345": {
        "dataset": "COMP 3021",
        "project": "kwwongbw",
        "bug_id": "1",
        "T": "void moveDown() { Position.of(233, 234), new Move.Down(-1).nextPosition(pos) ); }",
        "C": "public static @NotNull Position of(int x, int y) { return new Position(x, y); } public Down(int initiator) { super(initiator); }",
        "label": "P"
    },
    "346": {
        "dataset": "COMP 3021",
        "project": "kwwongbw",
        "bug_id": "2",
        "T": "void moveRight() { Position.of(234, 233), new Move.Right(-1).nextPosition(pos) ); }",
        "C": "public static @NotNull Position of(int x, int y) { return new Position(x, y); } public Right(int initiator) { super(initiator); }",
        "label": "P"
    },
    "347": {
        "dataset": "COMP 3021",
        "project": "kwwongbw",
        "bug_id": "3",
        "T": "void testExceedingUndoQuota() { final var gameState = mock(GameState.class); when(gameState.getPlayerPositionById(anyInt())).thenReturn(Position.of(0, 0)); when(gameState.getUndoQuota()).thenReturn(Optional.of(0)); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Undo(0)); }",
        "C": "public Undo(int initiator) { super(initiator); }",
        "label": "P"
    },
    "348": {
        "dataset": "COMP 3021",
        "project": "kwwongbw",
        "bug_id": "4",
        "T": "void testExit() { final var gameState = mock(GameState.class); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Exit(0)); }",
        "C": "public Exit(int initiator) { super(initiator); }",
        "label": "F"
    },
    "349": {
        "dataset": "COMP 3021",
        "project": "kwwongbw",
        "bug_id": "5",
        "T": "void testUndoUnlimited() { final var gameState = mock(GameState.class); when(gameState.getPlayerPositionById(anyInt())).thenReturn(Position.of(0, 0)); when(gameState.getUndoQuota()).thenReturn(Optional.empty()); final var game = new SokobanGameForTesting(gameState); for (int i = 0; i < 10000; i++) { final var result = game.feedActionForProcessing(new Undo(0)); } verify(gameState, times(10000)).undo(); }",
        "C": "public Undo(int initiator) { super(initiator); }",
        "label": "P"
    },
    "350": {
        "dataset": "COMP 3021",
        "project": "kwwongbw",
        "bug_id": "6",
        "T": "void testPushOtherPlayerBox() { String mapText = \"\"\" 233 ###### #AB.@# #b.a.# #@...# ###### \"\"\"; final var testMap = TestHelper.parseGameMap(mapText); final var gameState = spy(new GameState(testMap)); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Move.Down(0)); verify(gameState, never()).move(any(), any()); }",
        "C": "public GameState(@NotNull GameMap map) { // TODO this.map = map; this.entityLocations = cloneEntityLocations(map.entityLocations); this.undoQuota = map.getUndoLimit(); this.moveHistory = new ArrayList<ArrayList<ArrayList<Entity>>>(); //this.currentPlayerLocation = new ArrayList<Player>(); } public Down(int initiator) { super(initiator); }",
        "label": "F"
    },
    "351": {
        "dataset": "COMP 3021",
        "project": "kwwongbw",
        "bug_id": "7",
        "T": "void testMoveNonExistingPlayer() { String mapText = \"\"\" 233 ###### #A..@# #a...# ##...# ###### \"\"\"; final var testMap = TestHelper.parseGameMap(mapText); final var gameState = spy(new GameState(testMap)); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Move.Down(23)); }",
        "C": "public GameState(@NotNull GameMap map) { // TODO this.map = map; this.entityLocations = cloneEntityLocations(map.entityLocations); this.undoQuota = map.getUndoLimit(); this.moveHistory = new ArrayList<ArrayList<ArrayList<Entity>>>(); //this.currentPlayerLocation = new ArrayList<Player>(); } public Down(int initiator) { super(initiator); }",
        "label": "P"
    },
    "352": {
        "dataset": "COMP 3021",
        "project": "kwwongbw",
        "bug_id": "8",
        "T": "void testCheckpointWhenNeed() { final var gameState = spy(new GameState(TestHelper.parseGameMap(\"\"\" 233 ###### #.Aa@# #..a@# ###### \"\"\" ))); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Move.Right(0)); verify(gameState, times(1)).checkpoint(); }",
        "C": "public GameState(@NotNull GameMap map) { // TODO this.map = map; this.entityLocations = cloneEntityLocations(map.entityLocations); this.undoQuota = map.getUndoLimit(); this.moveHistory = new ArrayList<ArrayList<ArrayList<Entity>>>(); //this.currentPlayerLocation = new ArrayList<Player>(); } public Right(int initiator) { super(initiator); }",
        "label": "P"
    },
    "353": {
        "dataset": "COMP 3021",
        "project": "kwwongbw",
        "bug_id": "9",
        "T": "void testPushBoxAgainstWall() { String mapText = \"\"\" 233 ###### #A..@# #a...# ##...# ###### \"\"\"; final var testMap = TestHelper.parseGameMap(mapText); final var gameState = spy(new GameState(testMap)); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Move.Down(0)); verify(gameState, never()).move(any(), any()); }",
        "C": "public GameState(@NotNull GameMap map) { // TODO this.map = map; this.entityLocations = cloneEntityLocations(map.entityLocations); this.undoQuota = map.getUndoLimit(); this.moveHistory = new ArrayList<ArrayList<ArrayList<Entity>>>(); //this.currentPlayerLocation = new ArrayList<Player>(); } public Down(int initiator) { super(initiator); }",
        "label": "P"
    },
    "354": {
        "dataset": "COMP 3021",
        "project": "kwwongbw",
        "bug_id": "10",
        "T": "void testCheckpointWhenNotNeed() { final var gameState = spy(new GameState(TestHelper.parseGameMap(\"\"\" 233 ###### #A.a@# #..a@# ###### \"\"\" ))); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Move.Right(0)); verify(gameState, never()).checkpoint(); } private static class SokobanGameForTesting extends AbstractSokobanGame { protected SokobanGameForTesting(GameState gameState) { super(gameState); } @Override public void run() { } public ActionResult feedActionForProcessing(Action action) { return processAction(action); } }",
        "C": "public GameState(@NotNull GameMap map) { // TODO this.map = map; this.entityLocations = cloneEntityLocations(map.entityLocations); this.undoQuota = map.getUndoLimit(); this.moveHistory = new ArrayList<ArrayList<ArrayList<Entity>>>(); //this.currentPlayerLocation = new ArrayList<Player>(); } public Right(int initiator) { super(initiator); } public void run() { // TODO renderingEngine.render(state); String quotaMessage = \"\"; if(state.getUndoQuota().equals(Optional.empty())) quotaMessage = \"Undo Quota: Infinity\"; else if(state.getUndoQuota().isPresent() && state.getUndoQuota().get() >= 0) quotaMessage = \"Undo Quota: \" + state.getUndoQuota().get(); else quotaMessage = \"Undo Quota: 0\"; renderingEngine.message(quotaMessage); renderingEngine.message(\">>>\"); while(!shouldStop()) { quotaMessage = \"\"; if(state.getUndoQuota().equals(Optional.empty())) quotaMessage = \"Undo Quota: Infinity\"; else if(state.getUndoQuota().isPresent() && state.getUndoQuota().get() >= 0) quotaMessage = \"Undo Quota: \" + state.getUndoQuota().get(); else quotaMessage = \"Undo Quota: 0\"; renderingEngine.message(quotaMessage); renderingEngine.message(\">>>\"); } } protected ActionResult processAction(@NotNull Action action) { // TODO //check if the action is Exit first if( action instanceof Exit) { return new ActionResult.Success(action); } else if(action instanceof Undo) { //check if the action is of type Undo if(state.getUndoQuota().equals(Optional.empty())) { state.undo(); return new ActionResult.Success(action); } else if(state.getUndoQuota().isPresent() && state.getUndoQuota().get() >= 1) { state.undo(); return new ActionResult.Success(action); } else return new ActionResult.Failed(action,\"You have run out of your undo quota.\"); } else if(action instanceof Move) { //get the current player id of the action Move move = (Move)action; int playerId = move.getInitiator(); //get the current position of the player Position playerPositon = state.getPlayerPositionById(playerId); if(playerPositon == null) { return new ActionResult.Failed(action, \"Player not found\"); } else { //check the validity of the move Entity toEntity = state.getEntity(move.nextPosition(playerPositon)); if(toEntity instanceof Empty) { state.move(playerPositon,move.nextPosition(playerPositon)); return new ActionResult.Success(action); } else if(toEntity instanceof Wall) return new ActionResult.Failed(action, \"You hit a wall.\"); else if(toEntity instanceof Player) return new ActionResult.Failed(action, \"You hit a player.\"); else if(toEntity instanceof Box) { //we have to check the successive position whenever we encounter a box Entity secondToEntity = state.getEntity(move.nextPosition(move.nextPosition(playerPositon))); if(!(secondToEntity instanceof Empty)) return new ActionResult.Failed(action, \"Failed to push the box.\"); else { state.move(move.nextPosition(playerPositon),move.nextPosition(move.nextPosition(playerPositon))); state.move(playerPositon,move.nextPosition(playerPositon)); state.checkpoint(); return new ActionResult.Success(action); } } } } return new ActionResult.Failed(action, \"Invalid Input.\"); }",
        "label": "P"
    },
    "355": {
        "dataset": "COMP 3021",
        "project": "kwwongbw",
        "bug_id": "11",
        "T": "void testHitAnotherPlayer() { String mapText = \"\"\" 233 ###### #A..@# #B...# #ab.@# ###### \"\"\"; final var testMap = TestHelper.parseGameMap(mapText); final var gameState = spy(new GameState(testMap)); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Move.Down(0)); verify(gameState, never()).move(any(), any()); }",
        "C": "public GameState(@NotNull GameMap map) { // TODO this.map = map; this.entityLocations = cloneEntityLocations(map.entityLocations); this.undoQuota = map.getUndoLimit(); this.moveHistory = new ArrayList<ArrayList<ArrayList<Entity>>>(); //this.currentPlayerLocation = new ArrayList<Player>(); } public Down(int initiator) { super(initiator); }",
        "label": "P"
    },
    "356": {
        "dataset": "COMP 3021",
        "project": "kwwongbw",
        "bug_id": "12",
        "T": "void testUndoWithinQuota() { final var gameState = mock(GameState.class); when(gameState.getPlayerPositionById(anyInt())).thenReturn(Position.of(0, 0)); when(gameState.getUndoQuota()).thenReturn(Optional.of(1)); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Undo(0)); verify(gameState, times(1)).undo(); }",
        "C": "public Undo(int initiator) { super(initiator); }",
        "label": "P"
    },
    "357": {
        "dataset": "COMP 3021",
        "project": "kwwongbw",
        "bug_id": "13",
        "T": "void testInvalidInput() { final var game = new SokobanGameForTesting(mock(GameState.class)); final var message = String.valueOf(new Random().nextLong()); final var action = new InvalidInput(-1, message); final var result = game.feedActionForProcessing(action); }",
        "C": "public InvalidInput(int initiator, @NotNull String message) { super(initiator); this.message = message; }",
        "label": "P"
    },
    "358": {
        "dataset": "COMP 3021",
        "project": "kwwongbw",
        "bug_id": "14",
        "T": "void testUndoLimitParsing() { final var gameMap = TestHelper.parseGameMap(rectangularMap); }",
        "C": "",
        "label": "P"
    },
    "359": {
        "dataset": "COMP 3021",
        "project": "kwwongbw",
        "bug_id": "15",
        "T": "void testWidthForNonRectangularMap() { final var gameMap = TestHelper.parseGameMap(nonRectangularMap); }",
        "C": "",
        "label": "P"
    },
    "360": {
        "dataset": "COMP 3021",
        "project": "kwwongbw",
        "bug_id": "16",
        "T": "void testTwoPlayersMap() { final var twoPlayersMap = \"\"\" 233 ###### #A..@# #..B@# #....# #.a..# #..b.# ###### \"\"\"; final var gameMap = TestHelper.parseGameMap(twoPlayersMap); final var playerIds = gameMap.getPlayerIds(); final var expectedIds = new HashSet<Integer>(); expectedIds.add(0); expectedIds.add(1); }",
        "C": "public Set<Integer> getPlayerIds() { // TODO return playerIdList; }",
        "label": "P"
    },
    "361": {
        "dataset": "COMP 3021",
        "project": "kwwongbw",
        "bug_id": "17",
        "T": "void testMapWithoutPlayer() { final var invalidMap = \"\"\" 233 ### #.# ### \"\"\"; } // @Tag(TestKind.HIDDEN) // @Test // void testUnmatchedPlayersAndBoxes() { // final var invalidMap = \"\"\" // 233 // ###### // #A..@# // #...@# // #a.b@# // #.a.@# // #..a.# // ###### // \"\"\"; // assertThrowsExactly(IllegalArgumentException.class, () -> TestHelper.parseGameMap(invalidMap)); // }",
        "C": "",
        "label": "P"
    },
    "362": {
        "dataset": "COMP 3021",
        "project": "kwwongbw",
        "bug_id": "18",
        "T": "void testManyPlayersMap() { final var manyPlayersMap = \"\"\" 233 ###### #A.P@@# #vCB@@# #.cpD@# #Ga.d@# #g.bV@# ###### \"\"\"; final var gameMap = TestHelper.parseGameMap(manyPlayersMap); final var playerIds = gameMap.getPlayerIds(); final var expectedIds = new HashSet<>(Arrays.asList( 0, 'P' - 'A', 'C' - 'A', 'B' - 'A', 'D' - 'A', 'G' - 'A', 'V' - 'A' )); }",
        "C": "public Set<Integer> getPlayerIds() { // TODO return playerIdList; }",
        "label": "P"
    },
    "363": {
        "dataset": "COMP 3021",
        "project": "kwwongbw",
        "bug_id": "19",
        "T": "void testHeightForNonRectangularMap() { final var gameMap = TestHelper.parseGameMap(nonRectangularMap); }",
        "C": "",
        "label": "P"
    },
    "364": {
        "dataset": "COMP 3021",
        "project": "kwwongbw",
        "bug_id": "20",
        "T": "void testDuplicatedPlayers() { final var invalidMap = \"\"\" 233 ###### #A..@# #..A@# #....# #.a..# #..b.# ###### \"\"\"; }",
        "C": "",
        "label": "P"
    },
    "365": {
        "dataset": "COMP 3021",
        "project": "kwwongbw",
        "bug_id": "21",
        "T": "void testParseMapWithoutUndoLimit() { final var invalidMap = String.join(\"\\n\", rectangularMap.lines().skip(1).toList()); }",
        "C": "",
        "label": "P"
    },
    "366": {
        "dataset": "COMP 3021",
        "project": "kwwongbw",
        "bug_id": "22",
        "T": "void testInsufficientDestinations() { final var invalidMap = \"\"\" 233 ###### #A..@# #...@# #a...# #.a..# #..a.# ###### \"\"\"; }",
        "C": "",
        "label": "P"
    },
    "367": {
        "dataset": "COMP 3021",
        "project": "kwwongbw",
        "bug_id": "23",
        "T": "void testSuperLargeMap() { try { new GameMap(Integer.MAX_VALUE, Integer.MAX_VALUE, Collections.emptySet(), 0); } catch (OutOfMemoryError e) { throw new RuntimeException(e); } }); }",
        "C": "public GameMap(int maxWidth, int maxHeight, Set<Position> destinations, int undoLimit) { // TODO this.maxWidth = maxWidth; this.maxHeight = maxHeight; this.destinations = destinations; this.undoLimit = undoLimit; } /** * Parses the map from a string representation. * The first line is undo limit. * Starting from the second line, the game map is represented as follows, * <li># represents a {@link Wall}</li> * <li>@ represents a box destination.</li> * <li>Any upper-case letter represents a {@link Player}.</li> * <li> * Any lower-case letter represents a {@link Box} that is only movable by the player with the corresponding upper-case letter. * For instance, box \"a\" can only be moved by player \"A\" and not movable by player \"B\". * </li> * <li>. represents an {@link Empty} position in the map, meaning there is no player or box currently at this position.</li> * <p> * Notes: * <li> * There can be at most 26 players. * All implementations of classes in the hk.ust.comp3021.game package should support up to 26 players. * </li> * <li> * For simplicity, we assume the given map is bounded with a closed boundary. * There is no need to check this point. * </li> * <li> * Example maps can be found in \"src/main/resources\". * </li> * * @param mapText The string representation. * @return The parsed GameMap object. * @throws IllegalArgumentException if undo limit is negative but not -1. * @throws IllegalArgumentException if there are multiple same upper-case letters, i.e., one player can only exist at one position. * @throws IllegalArgumentException if there are no players in the map. * @throws IllegalArgumentException if the number of boxes is not equal to the number of box destinations. * @throws IllegalArgumentException if there are boxes whose {@link Box#getPlayerId()}",
        "label": "P"
    },
    "368": {
        "dataset": "COMP 3021",
        "project": "kwwongbw",
        "bug_id": "24",
        "T": "void testInvalidUndoLimit() { final var invalidMap = \"\"\" -233 ###### #A..@# #...@# #a.b@# #.a.@# #..a.# ###### \"\"\"; }",
        "C": "",
        "label": "P"
    },
    "369": {
        "dataset": "COMP 3021",
        "project": "kwwongbw",
        "bug_id": "25",
        "T": "void testEmptyMap() { final var invalidMap = \"\"; }",
        "C": "",
        "label": "P"
    },
    "370": {
        "dataset": "COMP 3021",
        "project": "kwwongbw",
        "bug_id": "26",
        "T": "void testMove(String input, String name, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); } private InputStream fixValueStream(String content) { final var bytes = content.getBytes(StandardCharsets.UTF_8); return new ByteArrayInputStream(bytes); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine(); // TODO String lowerCaseInputLine = inputLine.toLowerCase(); if(lowerCaseInputLine.equals(\"exit\")) { return new Exit(-1); } if(inputLine.length() > 1 || inputLine.length() <= 0) return new InvalidInput(-1,\"Invalid Input.\"); char letter = lowerCaseInputLine.charAt(0); if(letter == 'a') return new Move.Left(0); else if(letter == 's') return new Move.Down(0); else if(letter == 'w') return new Move.Up(0); else if(letter == 'd') return new Move.Right(0); else if(letter == 'h') return new Move.Left(1); else if(letter == 'j') return new Move.Down(1); else if(letter == 'k') return new Move.Up(1); else if(letter == 'l') return new Move.Right(1); else if(letter == 'u') return new Undo(-1); else return new InvalidInput(-1,\"Invalid Input\"); }",
        "label": "P"
    },
    "371": {
        "dataset": "COMP 3021",
        "project": "kwwongbw",
        "bug_id": "27",
        "T": "void testMove(String input, String name, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); } private InputStream fixValueStream(String content) { final var bytes = content.getBytes(StandardCharsets.UTF_8); return new ByteArrayInputStream(bytes); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine(); // TODO String lowerCaseInputLine = inputLine.toLowerCase(); if(lowerCaseInputLine.equals(\"exit\")) { return new Exit(-1); } if(inputLine.length() > 1 || inputLine.length() <= 0) return new InvalidInput(-1,\"Invalid Input.\"); char letter = lowerCaseInputLine.charAt(0); if(letter == 'a') return new Move.Left(0); else if(letter == 's') return new Move.Down(0); else if(letter == 'w') return new Move.Up(0); else if(letter == 'd') return new Move.Right(0); else if(letter == 'h') return new Move.Left(1); else if(letter == 'j') return new Move.Down(1); else if(letter == 'k') return new Move.Up(1); else if(letter == 'l') return new Move.Right(1); else if(letter == 'u') return new Undo(-1); else return new InvalidInput(-1,\"Invalid Input\"); }",
        "label": "P"
    },
    "372": {
        "dataset": "COMP 3021",
        "project": "kwwongbw",
        "bug_id": "28",
        "T": "void testMove(String input, String name, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); } private InputStream fixValueStream(String content) { final var bytes = content.getBytes(StandardCharsets.UTF_8); return new ByteArrayInputStream(bytes); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine(); // TODO String lowerCaseInputLine = inputLine.toLowerCase(); if(lowerCaseInputLine.equals(\"exit\")) { return new Exit(-1); } if(inputLine.length() > 1 || inputLine.length() <= 0) return new InvalidInput(-1,\"Invalid Input.\"); char letter = lowerCaseInputLine.charAt(0); if(letter == 'a') return new Move.Left(0); else if(letter == 's') return new Move.Down(0); else if(letter == 'w') return new Move.Up(0); else if(letter == 'd') return new Move.Right(0); else if(letter == 'h') return new Move.Left(1); else if(letter == 'j') return new Move.Down(1); else if(letter == 'k') return new Move.Up(1); else if(letter == 'l') return new Move.Right(1); else if(letter == 'u') return new Undo(-1); else return new InvalidInput(-1,\"Invalid Input\"); }",
        "label": "P"
    },
    "373": {
        "dataset": "COMP 3021",
        "project": "kwwongbw",
        "bug_id": "29",
        "T": "void testMove(String input, String name, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); } private InputStream fixValueStream(String content) { final var bytes = content.getBytes(StandardCharsets.UTF_8); return new ByteArrayInputStream(bytes); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine(); // TODO String lowerCaseInputLine = inputLine.toLowerCase(); if(lowerCaseInputLine.equals(\"exit\")) { return new Exit(-1); } if(inputLine.length() > 1 || inputLine.length() <= 0) return new InvalidInput(-1,\"Invalid Input.\"); char letter = lowerCaseInputLine.charAt(0); if(letter == 'a') return new Move.Left(0); else if(letter == 's') return new Move.Down(0); else if(letter == 'w') return new Move.Up(0); else if(letter == 'd') return new Move.Right(0); else if(letter == 'h') return new Move.Left(1); else if(letter == 'j') return new Move.Down(1); else if(letter == 'k') return new Move.Up(1); else if(letter == 'l') return new Move.Right(1); else if(letter == 'u') return new Undo(-1); else return new InvalidInput(-1,\"Invalid Input\"); }",
        "label": "P"
    },
    "374": {
        "dataset": "COMP 3021",
        "project": "kwwongbw",
        "bug_id": "30",
        "T": "void testMove(String input, String name, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); } private InputStream fixValueStream(String content) { final var bytes = content.getBytes(StandardCharsets.UTF_8); return new ByteArrayInputStream(bytes); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine(); // TODO String lowerCaseInputLine = inputLine.toLowerCase(); if(lowerCaseInputLine.equals(\"exit\")) { return new Exit(-1); } if(inputLine.length() > 1 || inputLine.length() <= 0) return new InvalidInput(-1,\"Invalid Input.\"); char letter = lowerCaseInputLine.charAt(0); if(letter == 'a') return new Move.Left(0); else if(letter == 's') return new Move.Down(0); else if(letter == 'w') return new Move.Up(0); else if(letter == 'd') return new Move.Right(0); else if(letter == 'h') return new Move.Left(1); else if(letter == 'j') return new Move.Down(1); else if(letter == 'k') return new Move.Up(1); else if(letter == 'l') return new Move.Right(1); else if(letter == 'u') return new Undo(-1); else return new InvalidInput(-1,\"Invalid Input\"); }",
        "label": "P"
    },
    "375": {
        "dataset": "COMP 3021",
        "project": "kwwongbw",
        "bug_id": "31",
        "T": "void testMove(String input, String name, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); } private InputStream fixValueStream(String content) { final var bytes = content.getBytes(StandardCharsets.UTF_8); return new ByteArrayInputStream(bytes); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine(); // TODO String lowerCaseInputLine = inputLine.toLowerCase(); if(lowerCaseInputLine.equals(\"exit\")) { return new Exit(-1); } if(inputLine.length() > 1 || inputLine.length() <= 0) return new InvalidInput(-1,\"Invalid Input.\"); char letter = lowerCaseInputLine.charAt(0); if(letter == 'a') return new Move.Left(0); else if(letter == 's') return new Move.Down(0); else if(letter == 'w') return new Move.Up(0); else if(letter == 'd') return new Move.Right(0); else if(letter == 'h') return new Move.Left(1); else if(letter == 'j') return new Move.Down(1); else if(letter == 'k') return new Move.Up(1); else if(letter == 'l') return new Move.Right(1); else if(letter == 'u') return new Undo(-1); else return new InvalidInput(-1,\"Invalid Input\"); }",
        "label": "P"
    },
    "376": {
        "dataset": "COMP 3021",
        "project": "kwwongbw",
        "bug_id": "32",
        "T": "void testMove(String input, String name, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); } private InputStream fixValueStream(String content) { final var bytes = content.getBytes(StandardCharsets.UTF_8); return new ByteArrayInputStream(bytes); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine(); // TODO String lowerCaseInputLine = inputLine.toLowerCase(); if(lowerCaseInputLine.equals(\"exit\")) { return new Exit(-1); } if(inputLine.length() > 1 || inputLine.length() <= 0) return new InvalidInput(-1,\"Invalid Input.\"); char letter = lowerCaseInputLine.charAt(0); if(letter == 'a') return new Move.Left(0); else if(letter == 's') return new Move.Down(0); else if(letter == 'w') return new Move.Up(0); else if(letter == 'd') return new Move.Right(0); else if(letter == 'h') return new Move.Left(1); else if(letter == 'j') return new Move.Down(1); else if(letter == 'k') return new Move.Up(1); else if(letter == 'l') return new Move.Right(1); else if(letter == 'u') return new Undo(-1); else return new InvalidInput(-1,\"Invalid Input\"); }",
        "label": "P"
    },
    "377": {
        "dataset": "COMP 3021",
        "project": "kwwongbw",
        "bug_id": "33",
        "T": "void testMove(String input, String name, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); } private InputStream fixValueStream(String content) { final var bytes = content.getBytes(StandardCharsets.UTF_8); return new ByteArrayInputStream(bytes); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine(); // TODO String lowerCaseInputLine = inputLine.toLowerCase(); if(lowerCaseInputLine.equals(\"exit\")) { return new Exit(-1); } if(inputLine.length() > 1 || inputLine.length() <= 0) return new InvalidInput(-1,\"Invalid Input.\"); char letter = lowerCaseInputLine.charAt(0); if(letter == 'a') return new Move.Left(0); else if(letter == 's') return new Move.Down(0); else if(letter == 'w') return new Move.Up(0); else if(letter == 'd') return new Move.Right(0); else if(letter == 'h') return new Move.Left(1); else if(letter == 'j') return new Move.Down(1); else if(letter == 'k') return new Move.Up(1); else if(letter == 'l') return new Move.Right(1); else if(letter == 'u') return new Undo(-1); else return new InvalidInput(-1,\"Invalid Input\"); }",
        "label": "P"
    },
    "378": {
        "dataset": "COMP 3021",
        "project": "kwwongbw",
        "bug_id": "34",
        "T": "void testUndo(String input, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine(); // TODO String lowerCaseInputLine = inputLine.toLowerCase(); if(lowerCaseInputLine.equals(\"exit\")) { return new Exit(-1); } if(inputLine.length() > 1 || inputLine.length() <= 0) return new InvalidInput(-1,\"Invalid Input.\"); char letter = lowerCaseInputLine.charAt(0); if(letter == 'a') return new Move.Left(0); else if(letter == 's') return new Move.Down(0); else if(letter == 'w') return new Move.Up(0); else if(letter == 'd') return new Move.Right(0); else if(letter == 'h') return new Move.Left(1); else if(letter == 'j') return new Move.Down(1); else if(letter == 'k') return new Move.Up(1); else if(letter == 'l') return new Move.Right(1); else if(letter == 'u') return new Undo(-1); else return new InvalidInput(-1,\"Invalid Input\"); }",
        "label": "P"
    },
    "379": {
        "dataset": "COMP 3021",
        "project": "kwwongbw",
        "bug_id": "35",
        "T": "void testInvalidInput() { final var inputStream = fixValueStream(\"blah blah\"); final var inputEngine = new TerminalInputEngine(inputStream); final var action = inputEngine.fetchAction(); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine(); // TODO String lowerCaseInputLine = inputLine.toLowerCase(); if(lowerCaseInputLine.equals(\"exit\")) { return new Exit(-1); } if(inputLine.length() > 1 || inputLine.length() <= 0) return new InvalidInput(-1,\"Invalid Input.\"); char letter = lowerCaseInputLine.charAt(0); if(letter == 'a') return new Move.Left(0); else if(letter == 's') return new Move.Down(0); else if(letter == 'w') return new Move.Up(0); else if(letter == 'd') return new Move.Right(0); else if(letter == 'h') return new Move.Left(1); else if(letter == 'j') return new Move.Down(1); else if(letter == 'k') return new Move.Up(1); else if(letter == 'l') return new Move.Right(1); else if(letter == 'u') return new Undo(-1); else return new InvalidInput(-1,\"Invalid Input\"); }",
        "label": "P"
    },
    "380": {
        "dataset": "COMP 3021",
        "project": "kwwongbw",
        "bug_id": "36",
        "T": "void testUndoWhenThereIsNoMove() { final var gameState = new GameState(TestHelper.parseGameMap(\"\"\" 233 ###### #A.a@# #..a@# ###### \"\"\" )); gameState.undo(); } private Entity generateEntity(int key) { return switch (key % 4) { case 0 -> new Box(0); case 1 -> new Empty(); case 2 -> new Player(0); case 3 -> new Wall(); default -> throw new ShouldNotReachException(); }; }",
        "C": "public GameState(@NotNull GameMap map) { // TODO this.map = map; this.entityLocations = cloneEntityLocations(map.entityLocations); this.undoQuota = map.getUndoLimit(); this.moveHistory = new ArrayList<ArrayList<ArrayList<Entity>>>(); //this.currentPlayerLocation = new ArrayList<Player>(); } public void undo() { // TODO if(moveHistory.size() == 0){ this.entityLocations = this.cloneEntityLocations(map.entityLocations); } else if(moveHistory.size() == 1) { this.entityLocations = this.cloneEntityLocations(map.entityLocations); //conduct arithmetic on the undoQuota (if necessary) if(undoQuota.isPresent()){ int newUndoQuota = this.undoQuota.get(); newUndoQuota--; this.undoQuota = Optional.of(newUndoQuota); } } else{ //conduct arithmetic on the undoQuota (if necessary) if(undoQuota.isPresent()){ int newUndoQuota = this.undoQuota.get(); newUndoQuota--; this.undoQuota = Optional.of(newUndoQuota); } //revert the gamestate to the latest snapchat this.entityLocations = this.cloneEntityLocations(moveHistory.get(moveHistory.size()-2)); //remove the last snapshot from the moveHistory moveHistory.remove(moveHistory.size()-1); } } /** * Get the maximum width of the game map. * This should be the same as that in {@link GameMap} public Box(int playerId) { this.playerId = playerId; } public Player(int id) { this.id = id; } public ShouldNotReachException() { super(\"This branch should not be reached.\"); }",
        "label": "P"
    },
    "381": {
        "dataset": "COMP 3021",
        "project": "kwwongbw",
        "bug_id": "37",
        "T": "void testGetUndoUnlimited() { final var gameState = new GameState(TestHelper.parseGameMap(\"\"\" -1 ###### #.Aa@# #..a@# ###### \"\"\" )); }",
        "C": "public GameState(@NotNull GameMap map) { // TODO this.map = map; this.entityLocations = cloneEntityLocations(map.entityLocations); this.undoQuota = map.getUndoLimit(); this.moveHistory = new ArrayList<ArrayList<ArrayList<Entity>>>(); //this.currentPlayerLocation = new ArrayList<Player>(); }",
        "label": "P"
    },
    "382": {
        "dataset": "COMP 3021",
        "project": "kwwongbw",
        "bug_id": "38",
        "T": "void testMapCopying() { final var maxWidth = 2333; final var maxHeight = 2333; final var random = new Random(); final var randomEntities = Stream.generate(() -> Position.of(random.nextInt(maxWidth), random.nextInt(maxHeight))) .distinct() .limit(100) .collect(Collectors.toMap(Function.identity(), it -> generateEntity(it.x()))); final var firstPos = randomEntities.keySet().stream().findFirst(); final var gameMap = new GameMap(maxWidth, maxHeight, Collections.singleton(firstPos.get()), 233); randomEntities.forEach(gameMap::putEntity); final var gameState = new GameState(gameMap); final var randomPosition = randomEntities.keySet().stream().findAny(); gameMap.putEntity(randomPosition.get(), new Empty()); randomEntities.forEach((p, e) -> assertEquals(e, gameState.getEntity(p))); }",
        "C": "public static @NotNull Position of(int x, int y) { return new Position(x, y); } public GameMap(int maxWidth, int maxHeight, Set<Position> destinations, int undoLimit) { // TODO this.maxWidth = maxWidth; this.maxHeight = maxHeight; this.destinations = destinations; this.undoLimit = undoLimit; } /** * Parses the map from a string representation. * The first line is undo limit. * Starting from the second line, the game map is represented as follows, * <li># represents a {@link Wall}</li> * <li>@ represents a box destination.</li> * <li>Any upper-case letter represents a {@link Player}.</li> * <li> * Any lower-case letter represents a {@link Box} that is only movable by the player with the corresponding upper-case letter. * For instance, box \"a\" can only be moved by player \"A\" and not movable by player \"B\". * </li> * <li>. represents an {@link Empty} position in the map, meaning there is no player or box currently at this position.</li> * <p> * Notes: * <li> * There can be at most 26 players. * All implementations of classes in the hk.ust.comp3021.game package should support up to 26 players. * </li> * <li> * For simplicity, we assume the given map is bounded with a closed boundary. * There is no need to check this point. * </li> * <li> * Example maps can be found in \"src/main/resources\". * </li> * * @param mapText The string representation. * @return The parsed GameMap object. * @throws IllegalArgumentException if undo limit is negative but not -1. * @throws IllegalArgumentException if there are multiple same upper-case letters, i.e., one player can only exist at one position. * @throws IllegalArgumentException if there are no players in the map. * @throws IllegalArgumentException if the number of boxes is not equal to the number of box destinations. * @throws IllegalArgumentException if there are boxes whose {@link Box#getPlayerId()} public GameState(@NotNull GameMap map) { // TODO this.map = map; this.entityLocations = cloneEntityLocations(map.entityLocations); this.undoQuota = map.getUndoLimit(); this.moveHistory = new ArrayList<ArrayList<ArrayList<Entity>>>(); //this.currentPlayerLocation = new ArrayList<Player>(); } public void putEntity(Position position, Entity entity) { // TODO entityLocations.get(position.y()).add(position.x(),entity); } public ArrayList<ArrayList<Entity>> getEntityLocations() { return this.entityLocations; }",
        "label": "F"
    },
    "383": {
        "dataset": "COMP 3021",
        "project": "kwwongbw",
        "bug_id": "39",
        "T": "void testUndoWhenThereIsMoveButNoCheckpoint() { final var gameState = new GameState(TestHelper.parseGameMap(\"\"\" 233 ###### #A.a@# #..a@# ###### \"\"\" )); gameState.move(Position.of(1, 1), Position.of(2, 1)); gameState.undo(); }",
        "C": "public GameState(@NotNull GameMap map) { // TODO this.map = map; this.entityLocations = cloneEntityLocations(map.entityLocations); this.undoQuota = map.getUndoLimit(); this.moveHistory = new ArrayList<ArrayList<ArrayList<Entity>>>(); //this.currentPlayerLocation = new ArrayList<Player>(); } public void move(Position from, Position to) { // TODO Entity fromEntity = this.getEntity(from); entityLocations.get(to.y()).set(to.x(),fromEntity); entityLocations.get(from.y()).set(from.x(),new Empty()); } /** * Record a checkpoint of the game state, including: * <li>All current positions of entities in the game map.</li> * <li>Current undo quota</li> * <p> * Checkpoint is used in {@link GameState#undo()} public static @NotNull Position of(int x, int y) { return new Position(x, y); } public void undo() { // TODO if(moveHistory.size() == 0){ this.entityLocations = this.cloneEntityLocations(map.entityLocations); } else if(moveHistory.size() == 1) { this.entityLocations = this.cloneEntityLocations(map.entityLocations); //conduct arithmetic on the undoQuota (if necessary) if(undoQuota.isPresent()){ int newUndoQuota = this.undoQuota.get(); newUndoQuota--; this.undoQuota = Optional.of(newUndoQuota); } } else{ //conduct arithmetic on the undoQuota (if necessary) if(undoQuota.isPresent()){ int newUndoQuota = this.undoQuota.get(); newUndoQuota--; this.undoQuota = Optional.of(newUndoQuota); } //revert the gamestate to the latest snapchat this.entityLocations = this.cloneEntityLocations(moveHistory.get(moveHistory.size()-2)); //remove the last snapshot from the moveHistory moveHistory.remove(moveHistory.size()-1); } } /** * Get the maximum width of the game map. * This should be the same as that in {@link GameMap}",
        "label": "P"
    },
    "384": {
        "dataset": "COMP 3021",
        "project": "kwwongbw",
        "bug_id": "40",
        "T": "void testGameExit() { final var gameState = mock(GameState.class); final var inputEngine = mock(TerminalInputEngine.class); final var renderingEngine = mock(TerminalRenderingEngine.class); when(gameState.isWin()).thenReturn(false, false, false); when(inputEngine.fetchAction()) .thenReturn(new InvalidInput(0, \"\"), new InvalidInput(0, \"\"), new Exit(0)); final var game = new TerminalSokobanGame(gameState, inputEngine, renderingEngine); game.run(); verify(renderingEngine, atLeastOnce()).message(any()); }",
        "C": "public InvalidInput(int initiator, @NotNull String message) { super(initiator); this.message = message; } public Exit(int initiator) { super(initiator); } public TerminalSokobanGame(GameState gameState, TerminalInputEngine inputEngine, TerminalRenderingEngine renderingEngine) { super(gameState); this.inputEngine = inputEngine; this.renderingEngine = renderingEngine; // TODO // Check the number of players if(gameState.getAllPlayerPositions().size() > 2){ throw new IllegalArgumentException(); } } public void run() { // TODO renderingEngine.render(state); String quotaMessage = \"\"; if(state.getUndoQuota().equals(Optional.empty())) quotaMessage = \"Undo Quota: Infinity\"; else if(state.getUndoQuota().isPresent() && state.getUndoQuota().get() >= 0) quotaMessage = \"Undo Quota: \" + state.getUndoQuota().get(); else quotaMessage = \"Undo Quota: 0\"; renderingEngine.message(quotaMessage); renderingEngine.message(\">>>\"); while(!shouldStop()) { quotaMessage = \"\"; if(state.getUndoQuota().equals(Optional.empty())) quotaMessage = \"Undo Quota: Infinity\"; else if(state.getUndoQuota().isPresent() && state.getUndoQuota().get() >= 0) quotaMessage = \"Undo Quota: \" + state.getUndoQuota().get(); else quotaMessage = \"Undo Quota: 0\"; renderingEngine.message(quotaMessage); renderingEngine.message(\">>>\"); } }",
        "label": "P"
    },
    "385": {
        "dataset": "COMP 3021",
        "project": "kwwongbw",
        "bug_id": "41",
        "T": "void testGameWin() { final var gameState = mock(GameState.class); final var inputEngine = mock(TerminalInputEngine.class); final var renderingEngine = mock(TerminalRenderingEngine.class); when(gameState.isWin()).thenReturn(false, false, false, true); when(inputEngine.fetchAction()) .thenReturn(new InvalidInput(0, \"\")); final var game = new TerminalSokobanGame(gameState, inputEngine, renderingEngine); game.run(); verify(gameState, atLeastOnce()).isWin(); verify(renderingEngine, atLeastOnce()).message(any()); }",
        "C": "public InvalidInput(int initiator, @NotNull String message) { super(initiator); this.message = message; } public TerminalSokobanGame(GameState gameState, TerminalInputEngine inputEngine, TerminalRenderingEngine renderingEngine) { super(gameState); this.inputEngine = inputEngine; this.renderingEngine = renderingEngine; // TODO // Check the number of players if(gameState.getAllPlayerPositions().size() > 2){ throw new IllegalArgumentException(); } } public void run() { // TODO renderingEngine.render(state); String quotaMessage = \"\"; if(state.getUndoQuota().equals(Optional.empty())) quotaMessage = \"Undo Quota: Infinity\"; else if(state.getUndoQuota().isPresent() && state.getUndoQuota().get() >= 0) quotaMessage = \"Undo Quota: \" + state.getUndoQuota().get(); else quotaMessage = \"Undo Quota: 0\"; renderingEngine.message(quotaMessage); renderingEngine.message(\">>>\"); while(!shouldStop()) { quotaMessage = \"\"; if(state.getUndoQuota().equals(Optional.empty())) quotaMessage = \"Undo Quota: Infinity\"; else if(state.getUndoQuota().isPresent() && state.getUndoQuota().get() >= 0) quotaMessage = \"Undo Quota: \" + state.getUndoQuota().get(); else quotaMessage = \"Undo Quota: 0\"; renderingEngine.message(quotaMessage); renderingEngine.message(\">>>\"); } }",
        "label": "P"
    },
    "386": {
        "dataset": "COMP 3021",
        "project": "kwwongbw",
        "bug_id": "42",
        "T": "void testMoreThanTwoPlayers() { final var gameState = mock(GameState.class); final var inputEngine = mock(TerminalInputEngine.class); final var renderingEngine = mock(TerminalRenderingEngine.class); when(gameState.getAllPlayerPositions()).thenReturn(new HashSet<>(Arrays.asList(Position.of(1, 1), Position.of(1, 2), Position.of(1, 3)))); }",
        "C": "public static @NotNull Position of(int x, int y) { return new Position(x, y); }",
        "label": "P"
    },
    "387": {
        "dataset": "COMP 3021",
        "project": "tckwanac",
        "bug_id": "0",
        "T": "void moveUp() { Position.of(233, 232), new Move.Up(-1).nextPosition(pos) ); }",
        "C": "public static @NotNull Position of(int x, int y) { return new Position(x, y); } public Up(int initiator) { super(initiator); }",
        "label": "P"
    },
    "388": {
        "dataset": "COMP 3021",
        "project": "tckwanac",
        "bug_id": "1",
        "T": "void moveDown() { Position.of(233, 234), new Move.Down(-1).nextPosition(pos) ); }",
        "C": "public static @NotNull Position of(int x, int y) { return new Position(x, y); } public Down(int initiator) { super(initiator); }",
        "label": "P"
    },
    "389": {
        "dataset": "COMP 3021",
        "project": "tckwanac",
        "bug_id": "2",
        "T": "void moveRight() { Position.of(234, 233), new Move.Right(-1).nextPosition(pos) ); }",
        "C": "public static @NotNull Position of(int x, int y) { return new Position(x, y); } public Right(int initiator) { super(initiator); }",
        "label": "P"
    },
    "390": {
        "dataset": "COMP 3021",
        "project": "tckwanac",
        "bug_id": "3",
        "T": "void testExceedingUndoQuota() { final var gameState = mock(GameState.class); when(gameState.getPlayerPositionById(anyInt())).thenReturn(Position.of(0, 0)); when(gameState.getUndoQuota()).thenReturn(Optional.of(0)); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Undo(0)); }",
        "C": "public Undo(int initiator) { super(initiator); }",
        "label": "P"
    },
    "391": {
        "dataset": "COMP 3021",
        "project": "tckwanac",
        "bug_id": "4",
        "T": "void testExit() { final var gameState = mock(GameState.class); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Exit(0)); }",
        "C": "public Exit(int initiator) { super(initiator); }",
        "label": "P"
    },
    "392": {
        "dataset": "COMP 3021",
        "project": "tckwanac",
        "bug_id": "5",
        "T": "void testUndoUnlimited() { final var gameState = mock(GameState.class); when(gameState.getPlayerPositionById(anyInt())).thenReturn(Position.of(0, 0)); when(gameState.getUndoQuota()).thenReturn(Optional.empty()); final var game = new SokobanGameForTesting(gameState); for (int i = 0; i < 10000; i++) { final var result = game.feedActionForProcessing(new Undo(0)); } verify(gameState, times(10000)).undo(); }",
        "C": "public TerminalRenderingEngine(PrintStream outputSteam) { this.outputSteam = outputSteam; } public Undo(int initiator) { super(initiator); }",
        "label": "P"
    },
    "393": {
        "dataset": "COMP 3021",
        "project": "tckwanac",
        "bug_id": "6",
        "T": "void testPushOtherPlayerBox() { String mapText = \"\"\" 233 ###### #AB.@# #b.a.# #@...# ###### \"\"\"; final var testMap = TestHelper.parseGameMap(mapText); final var gameState = spy(new GameState(testMap)); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Move.Down(0)); verify(gameState, never()).move(any(), any()); }",
        "C": "public GameState(@NotNull GameMap map) { // TODO this.gameMap = map; this.undoQuota = map.getUndoLimit(); this.entitiesMap = new Entity[map.getMaxHeight()][map.getMaxWidth()]; for(int i = 0; i < map.getMaxHeight(); i++){ this.entitiesMap[i] = map.getMap()[i].clone(); } this.boxPosition = new HashSet<Position>(map.getBoxPosition()); this.playerPosition = new HashMap<Integer,Position>(map.getPlayerPosition()); this.moveHistory = new Stack<CheckPointData>(); } public Down(int initiator) { super(initiator); }",
        "label": "P"
    },
    "394": {
        "dataset": "COMP 3021",
        "project": "tckwanac",
        "bug_id": "7",
        "T": "void testMoveNonExistingPlayer() { String mapText = \"\"\" 233 ###### #A..@# #a...# ##...# ###### \"\"\"; final var testMap = TestHelper.parseGameMap(mapText); final var gameState = spy(new GameState(testMap)); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Move.Down(23)); }",
        "C": "public GameState(@NotNull GameMap map) { // TODO this.gameMap = map; this.undoQuota = map.getUndoLimit(); this.entitiesMap = new Entity[map.getMaxHeight()][map.getMaxWidth()]; for(int i = 0; i < map.getMaxHeight(); i++){ this.entitiesMap[i] = map.getMap()[i].clone(); } this.boxPosition = new HashSet<Position>(map.getBoxPosition()); this.playerPosition = new HashMap<Integer,Position>(map.getPlayerPosition()); this.moveHistory = new Stack<CheckPointData>(); } public Down(int initiator) { super(initiator); }",
        "label": "P"
    },
    "395": {
        "dataset": "COMP 3021",
        "project": "tckwanac",
        "bug_id": "8",
        "T": "void testCheckpointWhenNeed() { final var gameState = spy(new GameState(TestHelper.parseGameMap(\"\"\" 233 ###### #.Aa@# #..a@# ###### \"\"\" ))); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Move.Right(0)); verify(gameState, times(1)).checkpoint(); }",
        "C": "public GameState(@NotNull GameMap map) { // TODO this.gameMap = map; this.undoQuota = map.getUndoLimit(); this.entitiesMap = new Entity[map.getMaxHeight()][map.getMaxWidth()]; for(int i = 0; i < map.getMaxHeight(); i++){ this.entitiesMap[i] = map.getMap()[i].clone(); } this.boxPosition = new HashSet<Position>(map.getBoxPosition()); this.playerPosition = new HashMap<Integer,Position>(map.getPlayerPosition()); this.moveHistory = new Stack<CheckPointData>(); } public Right(int initiator) { super(initiator); }",
        "label": "P"
    },
    "396": {
        "dataset": "COMP 3021",
        "project": "tckwanac",
        "bug_id": "9",
        "T": "void testPushBoxAgainstWall() { String mapText = \"\"\" 233 ###### #A..@# #a...# ##...# ###### \"\"\"; final var testMap = TestHelper.parseGameMap(mapText); final var gameState = spy(new GameState(testMap)); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Move.Down(0)); verify(gameState, never()).move(any(), any()); }",
        "C": "public GameState(@NotNull GameMap map) { // TODO this.gameMap = map; this.undoQuota = map.getUndoLimit(); this.entitiesMap = new Entity[map.getMaxHeight()][map.getMaxWidth()]; for(int i = 0; i < map.getMaxHeight(); i++){ this.entitiesMap[i] = map.getMap()[i].clone(); } this.boxPosition = new HashSet<Position>(map.getBoxPosition()); this.playerPosition = new HashMap<Integer,Position>(map.getPlayerPosition()); this.moveHistory = new Stack<CheckPointData>(); } public Down(int initiator) { super(initiator); }",
        "label": "P"
    },
    "397": {
        "dataset": "COMP 3021",
        "project": "tckwanac",
        "bug_id": "10",
        "T": "void testCheckpointWhenNotNeed() { final var gameState = spy(new GameState(TestHelper.parseGameMap(\"\"\" 233 ###### #A.a@# #..a@# ###### \"\"\" ))); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Move.Right(0)); verify(gameState, never()).checkpoint(); } private static class SokobanGameForTesting extends AbstractSokobanGame { protected SokobanGameForTesting(GameState gameState) { super(gameState); } @Override public void run() { } public ActionResult feedActionForProcessing(Action action) { return processAction(action); } }",
        "C": "public GameState(@NotNull GameMap map) { // TODO this.gameMap = map; this.undoQuota = map.getUndoLimit(); this.entitiesMap = new Entity[map.getMaxHeight()][map.getMaxWidth()]; for(int i = 0; i < map.getMaxHeight(); i++){ this.entitiesMap[i] = map.getMap()[i].clone(); } this.boxPosition = new HashSet<Position>(map.getBoxPosition()); this.playerPosition = new HashMap<Integer,Position>(map.getPlayerPosition()); this.moveHistory = new Stack<CheckPointData>(); } public Right(int initiator) { super(initiator); } public void run() { // TODO renderingEngine.message(\"Sokoban game is ready.\"); while(!shouldStop()) { renderingEngine.render(state); renderingEngine.message(\"\"); if(state.getUndoQuota().isEmpty()){ renderingEngine.message(\"Unlimited\"); } else{ renderingEngine.message(\"Undo Quota: \" + String.valueOf(state.getUndoQuota().get())); } Action action = inputEngine.fetchAction(); ActionResult result = processAction(action); if(result instanceof ActionResult.Failed f){ renderingEngine.message(f.getReason()); } else{ renderingEngine.message(\"\"); } } renderingEngine.render(state); renderingEngine.message(\"\"); renderingEngine.message(\"Game exits.\"); if(state.isWin()){ renderingEngine.message(\"You win.\"); } } protected ActionResult processAction(@NotNull Action action) { // TODO switch(action){ case Move move: Position currentPos = state.getPlayerPositionById(move.getInitiator()); if(currentPos == null){ return new ActionResult.Failed(move,\"Player not found.\"); } Position nextPos = move.nextPosition(currentPos); Position nextNextPos = move.nextPosition(nextPos); if(state.getEntity(nextPos) instanceof Player){ return new ActionResult.Failed(move,\"You hit another player.\"); } else if(state.getEntity(nextPos) instanceof Wall){ return new ActionResult.Failed(move,\"You hit a wall.\"); } else if(state.getEntity(nextPos) instanceof Empty){ state.move(currentPos,nextPos); return new ActionResult.Success(move); } else if(state.getEntity(nextPos) instanceof Box box){ if(box.getPlayerId() != move.getInitiator()){ return new ActionResult.Failed(move,\"You cannot move other players' boxes.\"); } if(!(state.getEntity(nextNextPos) instanceof Empty)){ return new ActionResult.Failed(move,\"Failed to push the box.\"); } state.move(nextPos,nextNextPos); state.move(currentPos,nextPos); state.checkpoint(); return new ActionResult.Success(move); } else{ throw new RuntimeException(); } case Exit exit: this.exit = true; return new ActionResult.Success(exit); case Undo undo: if(!(state.getUndoQuota().isEmpty())){ if(state.getUndoQuota().get().equals(0)){ return new ActionResult.Failed(undo,\"You have run out of your undo quota.\"); } } state.undo(); return new ActionResult.Success(undo); case InvalidInput invalidInput: return new ActionResult.Failed(invalidInput,invalidInput.getMessage()); default: throw new RuntimeException(); } }",
        "label": "P"
    },
    "398": {
        "dataset": "COMP 3021",
        "project": "tckwanac",
        "bug_id": "11",
        "T": "void testHitAnotherPlayer() { String mapText = \"\"\" 233 ###### #A..@# #B...# #ab.@# ###### \"\"\"; final var testMap = TestHelper.parseGameMap(mapText); final var gameState = spy(new GameState(testMap)); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Move.Down(0)); verify(gameState, never()).move(any(), any()); }",
        "C": "public GameState(@NotNull GameMap map) { // TODO this.gameMap = map; this.undoQuota = map.getUndoLimit(); this.entitiesMap = new Entity[map.getMaxHeight()][map.getMaxWidth()]; for(int i = 0; i < map.getMaxHeight(); i++){ this.entitiesMap[i] = map.getMap()[i].clone(); } this.boxPosition = new HashSet<Position>(map.getBoxPosition()); this.playerPosition = new HashMap<Integer,Position>(map.getPlayerPosition()); this.moveHistory = new Stack<CheckPointData>(); } public Down(int initiator) { super(initiator); }",
        "label": "P"
    },
    "399": {
        "dataset": "COMP 3021",
        "project": "tckwanac",
        "bug_id": "12",
        "T": "void testUndoWithinQuota() { final var gameState = mock(GameState.class); when(gameState.getPlayerPositionById(anyInt())).thenReturn(Position.of(0, 0)); when(gameState.getUndoQuota()).thenReturn(Optional.of(1)); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Undo(0)); verify(gameState, times(1)).undo(); }",
        "C": "public Undo(int initiator) { super(initiator); }",
        "label": "P"
    },
    "400": {
        "dataset": "COMP 3021",
        "project": "tckwanac",
        "bug_id": "13",
        "T": "void testInvalidInput() { final var game = new SokobanGameForTesting(mock(GameState.class)); final var message = String.valueOf(new Random().nextLong()); final var action = new InvalidInput(-1, message); final var result = game.feedActionForProcessing(action); }",
        "C": "public InvalidInput(int initiator, @NotNull String message) { super(initiator); this.message = message; }",
        "label": "P"
    },
    "401": {
        "dataset": "COMP 3021",
        "project": "tckwanac",
        "bug_id": "14",
        "T": "void testUndoLimitParsing() { final var gameMap = TestHelper.parseGameMap(rectangularMap); }",
        "C": "",
        "label": "P"
    },
    "402": {
        "dataset": "COMP 3021",
        "project": "tckwanac",
        "bug_id": "15",
        "T": "void testWidthForNonRectangularMap() { final var gameMap = TestHelper.parseGameMap(nonRectangularMap); }",
        "C": "",
        "label": "P"
    },
    "403": {
        "dataset": "COMP 3021",
        "project": "tckwanac",
        "bug_id": "16",
        "T": "void testTwoPlayersMap() { final var twoPlayersMap = \"\"\" 233 ###### #A..@# #..B@# #....# #.a..# #..b.# ###### \"\"\"; final var gameMap = TestHelper.parseGameMap(twoPlayersMap); final var playerIds = gameMap.getPlayerIds(); final var expectedIds = new HashSet<Integer>(); expectedIds.add(0); expectedIds.add(1); }",
        "C": "public Set<Integer> getPlayerIds() { // TODO return playerPosition.keySet(); }",
        "label": "P"
    },
    "404": {
        "dataset": "COMP 3021",
        "project": "tckwanac",
        "bug_id": "17",
        "T": "void testMapWithoutPlayer() { final var invalidMap = \"\"\" 233 ### #.# ### \"\"\"; } // @Tag(TestKind.HIDDEN) // @Test // void testUnmatchedPlayersAndBoxes() { // final var invalidMap = \"\"\" // 233 // ###### // #A..@# // #...@# // #a.b@# // #.a.@# // #..a.# // ###### // \"\"\"; // assertThrowsExactly(IllegalArgumentException.class, () -> TestHelper.parseGameMap(invalidMap)); // }",
        "C": "public TerminalRenderingEngine(PrintStream outputSteam) { this.outputSteam = outputSteam; }",
        "label": "P"
    },
    "405": {
        "dataset": "COMP 3021",
        "project": "tckwanac",
        "bug_id": "18",
        "T": "void testManyPlayersMap() { final var manyPlayersMap = \"\"\" 233 ###### #A.P@@# #vCB@@# #.cpD@# #Ga.d@# #g.bV@# ###### \"\"\"; final var gameMap = TestHelper.parseGameMap(manyPlayersMap); final var playerIds = gameMap.getPlayerIds(); final var expectedIds = new HashSet<>(Arrays.asList( 0, 'P' - 'A', 'C' - 'A', 'B' - 'A', 'D' - 'A', 'G' - 'A', 'V' - 'A' )); }",
        "C": "public Set<Integer> getPlayerIds() { // TODO return playerPosition.keySet(); }",
        "label": "P"
    },
    "406": {
        "dataset": "COMP 3021",
        "project": "tckwanac",
        "bug_id": "19",
        "T": "void testHeightForNonRectangularMap() { final var gameMap = TestHelper.parseGameMap(nonRectangularMap); }",
        "C": "",
        "label": "P"
    },
    "407": {
        "dataset": "COMP 3021",
        "project": "tckwanac",
        "bug_id": "20",
        "T": "void testDuplicatedPlayers() { final var invalidMap = \"\"\" 233 ###### #A..@# #..A@# #....# #.a..# #..b.# ###### \"\"\"; }",
        "C": "",
        "label": "P"
    },
    "408": {
        "dataset": "COMP 3021",
        "project": "tckwanac",
        "bug_id": "21",
        "T": "void testParseMapWithoutUndoLimit() { final var invalidMap = String.join(\"\\n\", rectangularMap.lines().skip(1).toList()); }",
        "C": "",
        "label": "P"
    },
    "409": {
        "dataset": "COMP 3021",
        "project": "tckwanac",
        "bug_id": "22",
        "T": "void testInsufficientDestinations() { final var invalidMap = \"\"\" 233 ###### #A..@# #...@# #a...# #.a..# #..a.# ###### \"\"\"; }",
        "C": "",
        "label": "P"
    },
    "410": {
        "dataset": "COMP 3021",
        "project": "tckwanac",
        "bug_id": "23",
        "T": "void testSuperLargeMap() { try { new GameMap(Integer.MAX_VALUE, Integer.MAX_VALUE, Collections.emptySet(), 0); } catch (OutOfMemoryError e) { throw new RuntimeException(e); } }); }",
        "C": "public GameMap(int maxWidth, int maxHeight, Set<Position> destinations, int undoLimit) { // TODO this.maxWidth = maxWidth; this.maxHeight = maxHeight; this.destinations = destinations; this.undoLimit = undoLimit; //throw new NotImplementedException(); } /** * Parses the map from a string representation. * The first line is undo limit. * Starting from the second line, the game map is represented as follows, * <li># represents a {@link Wall}</li> * <li>@ represents a box destination.</li> * <li>Any upper-case letter represents a {@link Player}.</li> * <li> * Any lower-case letter represents a {@link Box} that is only movable by the player with the corresponding upper-case letter. * For instance, box \"a\" can only be moved by player \"A\" and not movable by player \"B\". * </li> * <li>. represents an {@link Empty} position in the map, meaning there is no player or box currently at this position.</li> * <p> * Notes: * <li> * There can be at most 26 players. * All implementations of classes in the hk.ust.comp3021.game package should support up to 26 players. * </li> * <li> * For simplicity, we assume the given map is bounded with a closed boundary. * There is no need to check this point. * </li> * <li> * Example maps can be found in \"src/main/resources\". * </li> * * @param mapText The string representation. * @return The parsed GameMap object. * @throws IllegalArgumentException if undo limit is negative but not -1. * @throws IllegalArgumentException if there are multiple same upper-case letters, i.e., one player can only exist at one position. * @throws IllegalArgumentException if there are no players in the map. * @throws IllegalArgumentException if the number of boxes is not equal to the number of box destinations. * @throws IllegalArgumentException if there are boxes whose {@link Box#getPlayerId()} public TerminalRenderingEngine(PrintStream outputSteam) { this.outputSteam = outputSteam; }",
        "label": "P"
    },
    "411": {
        "dataset": "COMP 3021",
        "project": "tckwanac",
        "bug_id": "24",
        "T": "void testInvalidUndoLimit() { final var invalidMap = \"\"\" -233 ###### #A..@# #...@# #a.b@# #.a.@# #..a.# ###### \"\"\"; }",
        "C": "",
        "label": "P"
    },
    "412": {
        "dataset": "COMP 3021",
        "project": "tckwanac",
        "bug_id": "25",
        "T": "void testEmptyMap() { final var invalidMap = \"\"; }",
        "C": "",
        "label": "P"
    },
    "413": {
        "dataset": "COMP 3021",
        "project": "tckwanac",
        "bug_id": "26",
        "T": "void testMove(String input, String name, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); } private InputStream fixValueStream(String content) { final var bytes = content.getBytes(StandardCharsets.UTF_8); return new ByteArrayInputStream(bytes); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. String inputLine = terminalScanner.nextLine().toLowerCase(); // TODO Action result = switch (inputLine) { case \"w\" -> new Move.Up(0); case \"a\" -> new Move.Left(0); case \"s\" -> new Move.Down(0); case \"d\" -> new Move.Right(0); case \"h\" -> new Move.Left(1); case \"j\" -> new Move.Down(1); case \"k\" -> new Move.Up(1); case \"l\" -> new Move.Right(1); case \"u\" -> new Undo(0); case \"exit\" -> new Exit(0); default -> new InvalidInput(0,\"Invalid Input.\"); }; return result; }",
        "label": "P"
    },
    "414": {
        "dataset": "COMP 3021",
        "project": "tckwanac",
        "bug_id": "27",
        "T": "void testMove(String input, String name, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); } private InputStream fixValueStream(String content) { final var bytes = content.getBytes(StandardCharsets.UTF_8); return new ByteArrayInputStream(bytes); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. String inputLine = terminalScanner.nextLine().toLowerCase(); // TODO Action result = switch (inputLine) { case \"w\" -> new Move.Up(0); case \"a\" -> new Move.Left(0); case \"s\" -> new Move.Down(0); case \"d\" -> new Move.Right(0); case \"h\" -> new Move.Left(1); case \"j\" -> new Move.Down(1); case \"k\" -> new Move.Up(1); case \"l\" -> new Move.Right(1); case \"u\" -> new Undo(0); case \"exit\" -> new Exit(0); default -> new InvalidInput(0,\"Invalid Input.\"); }; return result; }",
        "label": "P"
    },
    "415": {
        "dataset": "COMP 3021",
        "project": "tckwanac",
        "bug_id": "28",
        "T": "void testMove(String input, String name, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); } private InputStream fixValueStream(String content) { final var bytes = content.getBytes(StandardCharsets.UTF_8); return new ByteArrayInputStream(bytes); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. String inputLine = terminalScanner.nextLine().toLowerCase(); // TODO Action result = switch (inputLine) { case \"w\" -> new Move.Up(0); case \"a\" -> new Move.Left(0); case \"s\" -> new Move.Down(0); case \"d\" -> new Move.Right(0); case \"h\" -> new Move.Left(1); case \"j\" -> new Move.Down(1); case \"k\" -> new Move.Up(1); case \"l\" -> new Move.Right(1); case \"u\" -> new Undo(0); case \"exit\" -> new Exit(0); default -> new InvalidInput(0,\"Invalid Input.\"); }; return result; }",
        "label": "P"
    },
    "416": {
        "dataset": "COMP 3021",
        "project": "tckwanac",
        "bug_id": "29",
        "T": "void testMove(String input, String name, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); } private InputStream fixValueStream(String content) { final var bytes = content.getBytes(StandardCharsets.UTF_8); return new ByteArrayInputStream(bytes); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. String inputLine = terminalScanner.nextLine().toLowerCase(); // TODO Action result = switch (inputLine) { case \"w\" -> new Move.Up(0); case \"a\" -> new Move.Left(0); case \"s\" -> new Move.Down(0); case \"d\" -> new Move.Right(0); case \"h\" -> new Move.Left(1); case \"j\" -> new Move.Down(1); case \"k\" -> new Move.Up(1); case \"l\" -> new Move.Right(1); case \"u\" -> new Undo(0); case \"exit\" -> new Exit(0); default -> new InvalidInput(0,\"Invalid Input.\"); }; return result; }",
        "label": "P"
    },
    "417": {
        "dataset": "COMP 3021",
        "project": "tckwanac",
        "bug_id": "30",
        "T": "void testMove(String input, String name, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); } private InputStream fixValueStream(String content) { final var bytes = content.getBytes(StandardCharsets.UTF_8); return new ByteArrayInputStream(bytes); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. String inputLine = terminalScanner.nextLine().toLowerCase(); // TODO Action result = switch (inputLine) { case \"w\" -> new Move.Up(0); case \"a\" -> new Move.Left(0); case \"s\" -> new Move.Down(0); case \"d\" -> new Move.Right(0); case \"h\" -> new Move.Left(1); case \"j\" -> new Move.Down(1); case \"k\" -> new Move.Up(1); case \"l\" -> new Move.Right(1); case \"u\" -> new Undo(0); case \"exit\" -> new Exit(0); default -> new InvalidInput(0,\"Invalid Input.\"); }; return result; }",
        "label": "P"
    },
    "418": {
        "dataset": "COMP 3021",
        "project": "tckwanac",
        "bug_id": "31",
        "T": "void testMove(String input, String name, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); } private InputStream fixValueStream(String content) { final var bytes = content.getBytes(StandardCharsets.UTF_8); return new ByteArrayInputStream(bytes); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. String inputLine = terminalScanner.nextLine().toLowerCase(); // TODO Action result = switch (inputLine) { case \"w\" -> new Move.Up(0); case \"a\" -> new Move.Left(0); case \"s\" -> new Move.Down(0); case \"d\" -> new Move.Right(0); case \"h\" -> new Move.Left(1); case \"j\" -> new Move.Down(1); case \"k\" -> new Move.Up(1); case \"l\" -> new Move.Right(1); case \"u\" -> new Undo(0); case \"exit\" -> new Exit(0); default -> new InvalidInput(0,\"Invalid Input.\"); }; return result; }",
        "label": "P"
    },
    "419": {
        "dataset": "COMP 3021",
        "project": "tckwanac",
        "bug_id": "32",
        "T": "void testMove(String input, String name, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); } private InputStream fixValueStream(String content) { final var bytes = content.getBytes(StandardCharsets.UTF_8); return new ByteArrayInputStream(bytes); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. String inputLine = terminalScanner.nextLine().toLowerCase(); // TODO Action result = switch (inputLine) { case \"w\" -> new Move.Up(0); case \"a\" -> new Move.Left(0); case \"s\" -> new Move.Down(0); case \"d\" -> new Move.Right(0); case \"h\" -> new Move.Left(1); case \"j\" -> new Move.Down(1); case \"k\" -> new Move.Up(1); case \"l\" -> new Move.Right(1); case \"u\" -> new Undo(0); case \"exit\" -> new Exit(0); default -> new InvalidInput(0,\"Invalid Input.\"); }; return result; }",
        "label": "P"
    },
    "420": {
        "dataset": "COMP 3021",
        "project": "tckwanac",
        "bug_id": "33",
        "T": "void testMove(String input, String name, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); } private InputStream fixValueStream(String content) { final var bytes = content.getBytes(StandardCharsets.UTF_8); return new ByteArrayInputStream(bytes); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. String inputLine = terminalScanner.nextLine().toLowerCase(); // TODO Action result = switch (inputLine) { case \"w\" -> new Move.Up(0); case \"a\" -> new Move.Left(0); case \"s\" -> new Move.Down(0); case \"d\" -> new Move.Right(0); case \"h\" -> new Move.Left(1); case \"j\" -> new Move.Down(1); case \"k\" -> new Move.Up(1); case \"l\" -> new Move.Right(1); case \"u\" -> new Undo(0); case \"exit\" -> new Exit(0); default -> new InvalidInput(0,\"Invalid Input.\"); }; return result; }",
        "label": "P"
    },
    "421": {
        "dataset": "COMP 3021",
        "project": "tckwanac",
        "bug_id": "34",
        "T": "void testUndo(String input, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. String inputLine = terminalScanner.nextLine().toLowerCase(); // TODO Action result = switch (inputLine) { case \"w\" -> new Move.Up(0); case \"a\" -> new Move.Left(0); case \"s\" -> new Move.Down(0); case \"d\" -> new Move.Right(0); case \"h\" -> new Move.Left(1); case \"j\" -> new Move.Down(1); case \"k\" -> new Move.Up(1); case \"l\" -> new Move.Right(1); case \"u\" -> new Undo(0); case \"exit\" -> new Exit(0); default -> new InvalidInput(0,\"Invalid Input.\"); }; return result; }",
        "label": "P"
    },
    "422": {
        "dataset": "COMP 3021",
        "project": "tckwanac",
        "bug_id": "35",
        "T": "void testInvalidInput() { final var inputStream = fixValueStream(\"blah blah\"); final var inputEngine = new TerminalInputEngine(inputStream); final var action = inputEngine.fetchAction(); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. String inputLine = terminalScanner.nextLine().toLowerCase(); // TODO Action result = switch (inputLine) { case \"w\" -> new Move.Up(0); case \"a\" -> new Move.Left(0); case \"s\" -> new Move.Down(0); case \"d\" -> new Move.Right(0); case \"h\" -> new Move.Left(1); case \"j\" -> new Move.Down(1); case \"k\" -> new Move.Up(1); case \"l\" -> new Move.Right(1); case \"u\" -> new Undo(0); case \"exit\" -> new Exit(0); default -> new InvalidInput(0,\"Invalid Input.\"); }; return result; }",
        "label": "P"
    },
    "423": {
        "dataset": "COMP 3021",
        "project": "tckwanac",
        "bug_id": "36",
        "T": "void testUndoWhenThereIsNoMove() { final var gameState = new GameState(TestHelper.parseGameMap(\"\"\" 233 ###### #A.a@# #..a@# ###### \"\"\" )); gameState.undo(); } private Entity generateEntity(int key) { return switch (key % 4) { case 0 -> new Box(0); case 1 -> new Empty(); case 2 -> new Player(0); case 3 -> new Wall(); default -> throw new ShouldNotReachException(); }; }",
        "C": "public GameState(@NotNull GameMap map) { // TODO this.gameMap = map; this.undoQuota = map.getUndoLimit(); this.entitiesMap = new Entity[map.getMaxHeight()][map.getMaxWidth()]; for(int i = 0; i < map.getMaxHeight(); i++){ this.entitiesMap[i] = map.getMap()[i].clone(); } this.boxPosition = new HashSet<Position>(map.getBoxPosition()); this.playerPosition = new HashMap<Integer,Position>(map.getPlayerPosition()); this.moveHistory = new Stack<CheckPointData>(); } public void undo() { // TODO if(!moveHistory.empty()){ if(undoQuota.isPresent()){ undoQuota = Optional.of(undoQuota.get()-1); } moveHistory.pop(); //remove the last checkpoint record } if(!(moveHistory.empty())){ entitiesMap = moveHistory.peek().getEntitiesMap(); //restore data from the top element of the stack boxPosition = moveHistory.peek().getBoxPosition(); playerPosition = moveHistory.peek().getPlayerPosition(); } else{ CheckPointData initialRecord = new CheckPointData(gameMap.getMap(),gameMap.getBoxPosition(), gameMap.getPlayerPosition()); entitiesMap = initialRecord.getEntitiesMap(); //restore data from initial status boxPosition = initialRecord.getBoxPosition(); playerPosition = initialRecord.getPlayerPosition(); } } /** * Get the maximum width of the game map. * This should be the same as that in {@link GameMap} public TerminalRenderingEngine(PrintStream outputSteam) { this.outputSteam = outputSteam; } public Box(int playerId) { this.playerId = playerId; } public Player(int id) { this.id = id; } public ShouldNotReachException() { super(\"This branch should not be reached.\"); }",
        "label": "P"
    },
    "424": {
        "dataset": "COMP 3021",
        "project": "tckwanac",
        "bug_id": "37",
        "T": "void testGetUndoUnlimited() { final var gameState = new GameState(TestHelper.parseGameMap(\"\"\" -1 ###### #.Aa@# #..a@# ###### \"\"\" )); }",
        "C": "public GameState(@NotNull GameMap map) { // TODO this.gameMap = map; this.undoQuota = map.getUndoLimit(); this.entitiesMap = new Entity[map.getMaxHeight()][map.getMaxWidth()]; for(int i = 0; i < map.getMaxHeight(); i++){ this.entitiesMap[i] = map.getMap()[i].clone(); } this.boxPosition = new HashSet<Position>(map.getBoxPosition()); this.playerPosition = new HashMap<Integer,Position>(map.getPlayerPosition()); this.moveHistory = new Stack<CheckPointData>(); }",
        "label": "P"
    },
    "425": {
        "dataset": "COMP 3021",
        "project": "tckwanac",
        "bug_id": "38",
        "T": "void testMapCopying() { final var maxWidth = 2333; final var maxHeight = 2333; final var random = new Random(); final var randomEntities = Stream.generate(() -> Position.of(random.nextInt(maxWidth), random.nextInt(maxHeight))) .distinct() .limit(100) .collect(Collectors.toMap(Function.identity(), it -> generateEntity(it.x()))); final var firstPos = randomEntities.keySet().stream().findFirst(); final var gameMap = new GameMap(maxWidth, maxHeight, Collections.singleton(firstPos.get()), 233); randomEntities.forEach(gameMap::putEntity); final var gameState = new GameState(gameMap); final var randomPosition = randomEntities.keySet().stream().findAny(); gameMap.putEntity(randomPosition.get(), new Empty()); randomEntities.forEach((p, e) -> assertEquals(e, gameState.getEntity(p))); }",
        "C": "public static @NotNull Position of(int x, int y) { return new Position(x, y); } public GameMap(int maxWidth, int maxHeight, Set<Position> destinations, int undoLimit) { // TODO this.maxWidth = maxWidth; this.maxHeight = maxHeight; this.destinations = destinations; this.undoLimit = undoLimit; //throw new NotImplementedException(); } /** * Parses the map from a string representation. * The first line is undo limit. * Starting from the second line, the game map is represented as follows, * <li># represents a {@link Wall}</li> * <li>@ represents a box destination.</li> * <li>Any upper-case letter represents a {@link Player}.</li> * <li> * Any lower-case letter represents a {@link Box} that is only movable by the player with the corresponding upper-case letter. * For instance, box \"a\" can only be moved by player \"A\" and not movable by player \"B\". * </li> * <li>. represents an {@link Empty} position in the map, meaning there is no player or box currently at this position.</li> * <p> * Notes: * <li> * There can be at most 26 players. * All implementations of classes in the hk.ust.comp3021.game package should support up to 26 players. * </li> * <li> * For simplicity, we assume the given map is bounded with a closed boundary. * There is no need to check this point. * </li> * <li> * Example maps can be found in \"src/main/resources\". * </li> * * @param mapText The string representation. * @return The parsed GameMap object. * @throws IllegalArgumentException if undo limit is negative but not -1. * @throws IllegalArgumentException if there are multiple same upper-case letters, i.e., one player can only exist at one position. * @throws IllegalArgumentException if there are no players in the map. * @throws IllegalArgumentException if the number of boxes is not equal to the number of box destinations. * @throws IllegalArgumentException if there are boxes whose {@link Box#getPlayerId()} public GameState(@NotNull GameMap map) { // TODO this.gameMap = map; this.undoQuota = map.getUndoLimit(); this.entitiesMap = new Entity[map.getMaxHeight()][map.getMaxWidth()]; for(int i = 0; i < map.getMaxHeight(); i++){ this.entitiesMap[i] = map.getMap()[i].clone(); } this.boxPosition = new HashSet<Position>(map.getBoxPosition()); this.playerPosition = new HashMap<Integer,Position>(map.getPlayerPosition()); this.moveHistory = new Stack<CheckPointData>(); } public void putEntity(Position position, Entity entity) { // TODO map[position.y()][position.x()] = entity; } public @Nullable Entity getEntity(@NotNull Position position) { // TODO return entitiesMap[position.y()][position.x()]; } /** * Get all box destination positions as a set in the game map. * This should be the same as that in {@link GameMap}",
        "label": "F"
    },
    "426": {
        "dataset": "COMP 3021",
        "project": "tckwanac",
        "bug_id": "39",
        "T": "void testUndoWhenThereIsMoveButNoCheckpoint() { final var gameState = new GameState(TestHelper.parseGameMap(\"\"\" 233 ###### #A.a@# #..a@# ###### \"\"\" )); gameState.move(Position.of(1, 1), Position.of(2, 1)); gameState.undo(); }",
        "C": "public GameState(@NotNull GameMap map) { // TODO this.gameMap = map; this.undoQuota = map.getUndoLimit(); this.entitiesMap = new Entity[map.getMaxHeight()][map.getMaxWidth()]; for(int i = 0; i < map.getMaxHeight(); i++){ this.entitiesMap[i] = map.getMap()[i].clone(); } this.boxPosition = new HashSet<Position>(map.getBoxPosition()); this.playerPosition = new HashMap<Integer,Position>(map.getPlayerPosition()); this.moveHistory = new Stack<CheckPointData>(); } public void move(Position from, Position to) { // TODO if(entitiesMap[from.y()][from.x()] instanceof Box){ //need to change boxPosition when move box if(!boxPosition.remove(from)){ throw new RuntimeException(); } boxPosition.add(to); } else if(entitiesMap[from.y()][from.x()] instanceof Player){ //change playerPosition when move player playerPosition.replace(((Player)entitiesMap[from.y()][from.x()]).getId(), to); } entitiesMap[to.y()][to.x()] = entitiesMap[from.y()][from.x()]; entitiesMap[from.y()][from.x()] = new Empty(); } /** * Record a checkpoint of the game state, including: * <li>All current positions of entities in the game map.</li> * <li>Current undo quota</li> * <p> * Checkpoint is used in {@link GameState#undo()} public static @NotNull Position of(int x, int y) { return new Position(x, y); } public void undo() { // TODO if(!moveHistory.empty()){ if(undoQuota.isPresent()){ undoQuota = Optional.of(undoQuota.get()-1); } moveHistory.pop(); //remove the last checkpoint record } if(!(moveHistory.empty())){ entitiesMap = moveHistory.peek().getEntitiesMap(); //restore data from the top element of the stack boxPosition = moveHistory.peek().getBoxPosition(); playerPosition = moveHistory.peek().getPlayerPosition(); } else{ CheckPointData initialRecord = new CheckPointData(gameMap.getMap(),gameMap.getBoxPosition(), gameMap.getPlayerPosition()); entitiesMap = initialRecord.getEntitiesMap(); //restore data from initial status boxPosition = initialRecord.getBoxPosition(); playerPosition = initialRecord.getPlayerPosition(); } } /** * Get the maximum width of the game map. * This should be the same as that in {@link GameMap}",
        "label": "P"
    },
    "427": {
        "dataset": "COMP 3021",
        "project": "tckwanac",
        "bug_id": "40",
        "T": "void testGameExit() { final var gameState = mock(GameState.class); final var inputEngine = mock(TerminalInputEngine.class); final var renderingEngine = mock(TerminalRenderingEngine.class); when(gameState.isWin()).thenReturn(false, false, false); when(inputEngine.fetchAction()) .thenReturn(new InvalidInput(0, \"\"), new InvalidInput(0, \"\"), new Exit(0)); final var game = new TerminalSokobanGame(gameState, inputEngine, renderingEngine); game.run(); verify(renderingEngine, atLeastOnce()).message(any()); }",
        "C": "public InvalidInput(int initiator, @NotNull String message) { super(initiator); this.message = message; } public Exit(int initiator) { super(initiator); } public TerminalSokobanGame(GameState gameState, TerminalInputEngine inputEngine, TerminalRenderingEngine renderingEngine) { super(gameState); this.inputEngine = inputEngine; this.renderingEngine = renderingEngine; // TODO // Check the number of players if(gameState.getAllPlayerPositions().size() > 2){ throw new IllegalArgumentException(); } } public void run() { // TODO renderingEngine.message(\"Sokoban game is ready.\"); while(!shouldStop()) { renderingEngine.render(state); renderingEngine.message(\"\"); if(state.getUndoQuota().isEmpty()){ renderingEngine.message(\"Unlimited\"); } else{ renderingEngine.message(\"Undo Quota: \" + String.valueOf(state.getUndoQuota().get())); } Action action = inputEngine.fetchAction(); ActionResult result = processAction(action); if(result instanceof ActionResult.Failed f){ renderingEngine.message(f.getReason()); } else{ renderingEngine.message(\"\"); } } renderingEngine.render(state); renderingEngine.message(\"\"); renderingEngine.message(\"Game exits.\"); if(state.isWin()){ renderingEngine.message(\"You win.\"); } }",
        "label": "P"
    },
    "428": {
        "dataset": "COMP 3021",
        "project": "tckwanac",
        "bug_id": "41",
        "T": "void testGameWin() { final var gameState = mock(GameState.class); final var inputEngine = mock(TerminalInputEngine.class); final var renderingEngine = mock(TerminalRenderingEngine.class); when(gameState.isWin()).thenReturn(false, false, false, true); when(inputEngine.fetchAction()) .thenReturn(new InvalidInput(0, \"\")); final var game = new TerminalSokobanGame(gameState, inputEngine, renderingEngine); game.run(); verify(gameState, atLeastOnce()).isWin(); verify(renderingEngine, atLeastOnce()).message(any()); }",
        "C": "public InvalidInput(int initiator, @NotNull String message) { super(initiator); this.message = message; } public TerminalSokobanGame(GameState gameState, TerminalInputEngine inputEngine, TerminalRenderingEngine renderingEngine) { super(gameState); this.inputEngine = inputEngine; this.renderingEngine = renderingEngine; // TODO // Check the number of players if(gameState.getAllPlayerPositions().size() > 2){ throw new IllegalArgumentException(); } } public void run() { // TODO renderingEngine.message(\"Sokoban game is ready.\"); while(!shouldStop()) { renderingEngine.render(state); renderingEngine.message(\"\"); if(state.getUndoQuota().isEmpty()){ renderingEngine.message(\"Unlimited\"); } else{ renderingEngine.message(\"Undo Quota: \" + String.valueOf(state.getUndoQuota().get())); } Action action = inputEngine.fetchAction(); ActionResult result = processAction(action); if(result instanceof ActionResult.Failed f){ renderingEngine.message(f.getReason()); } else{ renderingEngine.message(\"\"); } } renderingEngine.render(state); renderingEngine.message(\"\"); renderingEngine.message(\"Game exits.\"); if(state.isWin()){ renderingEngine.message(\"You win.\"); } }",
        "label": "P"
    },
    "429": {
        "dataset": "COMP 3021",
        "project": "tckwanac",
        "bug_id": "42",
        "T": "void testMoreThanTwoPlayers() { final var gameState = mock(GameState.class); final var inputEngine = mock(TerminalInputEngine.class); final var renderingEngine = mock(TerminalRenderingEngine.class); when(gameState.getAllPlayerPositions()).thenReturn(new HashSet<>(Arrays.asList(Position.of(1, 1), Position.of(1, 2), Position.of(1, 3)))); }",
        "C": "public static @NotNull Position of(int x, int y) { return new Position(x, y); }",
        "label": "P"
    },
    "430": {
        "dataset": "COMP 3021",
        "project": "ythau",
        "bug_id": "0",
        "T": "void moveUp() { Position.of(233, 232), new Move.Up(-1).nextPosition(pos) ); }",
        "C": "public static @NotNull Position of(int x, int y) { return new Position(x, y); } public Up(int initiator) { super(initiator); }",
        "label": "P"
    },
    "431": {
        "dataset": "COMP 3021",
        "project": "ythau",
        "bug_id": "1",
        "T": "void moveDown() { Position.of(233, 234), new Move.Down(-1).nextPosition(pos) ); }",
        "C": "public static @NotNull Position of(int x, int y) { return new Position(x, y); } public Down(int initiator) { super(initiator); }",
        "label": "P"
    },
    "432": {
        "dataset": "COMP 3021",
        "project": "ythau",
        "bug_id": "2",
        "T": "void moveRight() { Position.of(234, 233), new Move.Right(-1).nextPosition(pos) ); }",
        "C": "public static @NotNull Position of(int x, int y) { return new Position(x, y); } public Right(int initiator) { super(initiator); }",
        "label": "P"
    },
    "433": {
        "dataset": "COMP 3021",
        "project": "ythau",
        "bug_id": "3",
        "T": "void testExceedingUndoQuota() { final var gameState = mock(GameState.class); when(gameState.getPlayerPositionById(anyInt())).thenReturn(Position.of(0, 0)); when(gameState.getUndoQuota()).thenReturn(Optional.of(0)); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Undo(0)); }",
        "C": "public Undo(int initiator) { super(initiator); }",
        "label": "P"
    },
    "434": {
        "dataset": "COMP 3021",
        "project": "ythau",
        "bug_id": "4",
        "T": "void testExit() { final var gameState = mock(GameState.class); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Exit(0)); }",
        "C": "public Exit(int initiator) { super(initiator); }",
        "label": "P"
    },
    "435": {
        "dataset": "COMP 3021",
        "project": "ythau",
        "bug_id": "5",
        "T": "void testUndoUnlimited() { final var gameState = mock(GameState.class); when(gameState.getPlayerPositionById(anyInt())).thenReturn(Position.of(0, 0)); when(gameState.getUndoQuota()).thenReturn(Optional.empty()); final var game = new SokobanGameForTesting(gameState); for (int i = 0; i < 10000; i++) { final var result = game.feedActionForProcessing(new Undo(0)); } verify(gameState, times(10000)).undo(); }",
        "C": "public TerminalRenderingEngine(PrintStream outputSteam) { this.outputSteam = outputSteam; } public Undo(int initiator) { super(initiator); }",
        "label": "P"
    },
    "436": {
        "dataset": "COMP 3021",
        "project": "ythau",
        "bug_id": "6",
        "T": "void testPushOtherPlayerBox() { String mapText = \"\"\" 233 ###### #AB.@# #b.a.# #@...# ###### \"\"\"; final var testMap = TestHelper.parseGameMap(mapText); final var gameState = spy(new GameState(testMap)); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Move.Down(0)); verify(gameState, never()).move(any(), any()); }",
        "C": "public GameState(@NotNull GameMap map) { // TODO this.map=map; history=new Stack<Checkpoint>(); undoQuota=map.getUndoLimit(); this.players=map.getPlayerMap(); // this.boxes=map.getBoxMap(); this.entityArr=map.getEntityArr(); width=map.getMaxWidth(); height=map.getMaxHeight(); // throw new NotImplementedException(); } public Down(int initiator) { super(initiator); }",
        "label": "P"
    },
    "437": {
        "dataset": "COMP 3021",
        "project": "ythau",
        "bug_id": "7",
        "T": "void testMoveNonExistingPlayer() { String mapText = \"\"\" 233 ###### #A..@# #a...# ##...# ###### \"\"\"; final var testMap = TestHelper.parseGameMap(mapText); final var gameState = spy(new GameState(testMap)); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Move.Down(23)); }",
        "C": "public GameState(@NotNull GameMap map) { // TODO this.map=map; history=new Stack<Checkpoint>(); undoQuota=map.getUndoLimit(); this.players=map.getPlayerMap(); // this.boxes=map.getBoxMap(); this.entityArr=map.getEntityArr(); width=map.getMaxWidth(); height=map.getMaxHeight(); // throw new NotImplementedException(); } public Down(int initiator) { super(initiator); }",
        "label": "P"
    },
    "438": {
        "dataset": "COMP 3021",
        "project": "ythau",
        "bug_id": "8",
        "T": "void testCheckpointWhenNeed() { final var gameState = spy(new GameState(TestHelper.parseGameMap(\"\"\" 233 ###### #.Aa@# #..a@# ###### \"\"\" ))); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Move.Right(0)); verify(gameState, times(1)).checkpoint(); }",
        "C": "public GameState(@NotNull GameMap map) { // TODO this.map=map; history=new Stack<Checkpoint>(); undoQuota=map.getUndoLimit(); this.players=map.getPlayerMap(); // this.boxes=map.getBoxMap(); this.entityArr=map.getEntityArr(); width=map.getMaxWidth(); height=map.getMaxHeight(); // throw new NotImplementedException(); } public Right(int initiator) { super(initiator); }",
        "label": "P"
    },
    "439": {
        "dataset": "COMP 3021",
        "project": "ythau",
        "bug_id": "9",
        "T": "void testPushBoxAgainstWall() { String mapText = \"\"\" 233 ###### #A..@# #a...# ##...# ###### \"\"\"; final var testMap = TestHelper.parseGameMap(mapText); final var gameState = spy(new GameState(testMap)); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Move.Down(0)); verify(gameState, never()).move(any(), any()); }",
        "C": "public GameState(@NotNull GameMap map) { // TODO this.map=map; history=new Stack<Checkpoint>(); undoQuota=map.getUndoLimit(); this.players=map.getPlayerMap(); // this.boxes=map.getBoxMap(); this.entityArr=map.getEntityArr(); width=map.getMaxWidth(); height=map.getMaxHeight(); // throw new NotImplementedException(); } public Down(int initiator) { super(initiator); }",
        "label": "P"
    },
    "440": {
        "dataset": "COMP 3021",
        "project": "ythau",
        "bug_id": "10",
        "T": "void testCheckpointWhenNotNeed() { final var gameState = spy(new GameState(TestHelper.parseGameMap(\"\"\" 233 ###### #A.a@# #..a@# ###### \"\"\" ))); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Move.Right(0)); verify(gameState, never()).checkpoint(); } private static class SokobanGameForTesting extends AbstractSokobanGame { protected SokobanGameForTesting(GameState gameState) { super(gameState); } @Override public void run() { } public ActionResult feedActionForProcessing(Action action) { return processAction(action); } }",
        "C": "public GameState(@NotNull GameMap map) { // TODO this.map=map; history=new Stack<Checkpoint>(); undoQuota=map.getUndoLimit(); this.players=map.getPlayerMap(); // this.boxes=map.getBoxMap(); this.entityArr=map.getEntityArr(); width=map.getMaxWidth(); height=map.getMaxHeight(); // throw new NotImplementedException(); } public Right(int initiator) { super(initiator); } public void run() { renderingEngine.message(GAME_READY_MESSAGE); renderingEngine.render(state); while (!shouldStop()){ if (state.getUndoQuota().isEmpty()) renderingEngine.message(UNDO_QUOTA_UNLIMITED); else renderingEngine.message(String.format(UNDO_QUOTA_TEMPLATE,state.getUndoQuota().get())); renderingEngine.message(\">>>\"); Action input=inputEngine.fetchAction(); ActionResult result=processAction(input); if (result instanceof ActionResult.Failed f) renderingEngine.message(f.getReason()); renderingEngine.render(state); } renderingEngine.message(GAME_EXIT_MESSAGE); if (state.isWin()) renderingEngine.message(WIN_MESSAGE); // TODO // throw new NotImplementedException(); } protected ActionResult processAction(@NotNull Action action) { // TODO // if (action.getInitiator()!=-1 && !state.isPlayer(action.getInitiator())) // return new ActionResult.Failed(action,\"Player not found.\"); // Position curr=state.getPlayerPositionById(action.getInitiator()); // // if (curr==null) // throw new RuntimeException(\"Action from invalid player.\"); switch (action){ case Undo o ->{ if (state.getUndoQuota().isPresent() &&state.getUndoQuota().get()==0) return new ActionResult.Failed(o,UNDO_QUOTA_RUN_OUT); else { state.undo(); return new ActionResult.Success(o); } } case Move o->{ if (!state.isPlayer(o.getInitiator())) return new ActionResult.Failed(o,PLAYER_NOT_FOUND); int dir=switch (o){ case Move.Up m->0; case Move.Down m->1; case Move.Left m-> 2; case Move.Right m->3; }; Position curr=state.getPlayerPositionById(o.getInitiator()); int i=state.isMovable(curr,dir); Position dest=o.nextPosition(curr); switch (i) { case 1: { state.move(curr, o.nextPosition(curr)); return new ActionResult.Success(o); } case 2:{ state.move(dest,o.nextPosition(dest)); state.move(curr,dest); state.checkpoint(); return new ActionResult.Success(o); } default: return new ActionResult.Failed(o, failMsg.get(i)); } } case Exit o->{ endSig=true; return new ActionResult.Success(o) ; } case InvalidInput o->{ return new ActionResult.Failed(o,o.getMessage()); } } throw new ShouldNotReachException(); // throw new NotImplementedException(); }",
        "label": "P"
    },
    "441": {
        "dataset": "COMP 3021",
        "project": "ythau",
        "bug_id": "11",
        "T": "void testHitAnotherPlayer() { String mapText = \"\"\" 233 ###### #A..@# #B...# #ab.@# ###### \"\"\"; final var testMap = TestHelper.parseGameMap(mapText); final var gameState = spy(new GameState(testMap)); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Move.Down(0)); verify(gameState, never()).move(any(), any()); }",
        "C": "public GameState(@NotNull GameMap map) { // TODO this.map=map; history=new Stack<Checkpoint>(); undoQuota=map.getUndoLimit(); this.players=map.getPlayerMap(); // this.boxes=map.getBoxMap(); this.entityArr=map.getEntityArr(); width=map.getMaxWidth(); height=map.getMaxHeight(); // throw new NotImplementedException(); } public Down(int initiator) { super(initiator); }",
        "label": "P"
    },
    "442": {
        "dataset": "COMP 3021",
        "project": "ythau",
        "bug_id": "12",
        "T": "void testUndoWithinQuota() { final var gameState = mock(GameState.class); when(gameState.getPlayerPositionById(anyInt())).thenReturn(Position.of(0, 0)); when(gameState.getUndoQuota()).thenReturn(Optional.of(1)); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Undo(0)); verify(gameState, times(1)).undo(); }",
        "C": "public Undo(int initiator) { super(initiator); }",
        "label": "P"
    },
    "443": {
        "dataset": "COMP 3021",
        "project": "ythau",
        "bug_id": "13",
        "T": "void testInvalidInput() { final var game = new SokobanGameForTesting(mock(GameState.class)); final var message = String.valueOf(new Random().nextLong()); final var action = new InvalidInput(-1, message); final var result = game.feedActionForProcessing(action); }",
        "C": "public InvalidInput(int initiator, @NotNull String message) { super(initiator); this.message = message; }",
        "label": "P"
    },
    "444": {
        "dataset": "COMP 3021",
        "project": "ythau",
        "bug_id": "14",
        "T": "void testUndoLimitParsing() { final var gameMap = TestHelper.parseGameMap(rectangularMap); }",
        "C": "",
        "label": "P"
    },
    "445": {
        "dataset": "COMP 3021",
        "project": "ythau",
        "bug_id": "15",
        "T": "void testWidthForNonRectangularMap() { final var gameMap = TestHelper.parseGameMap(nonRectangularMap); }",
        "C": "",
        "label": "P"
    },
    "446": {
        "dataset": "COMP 3021",
        "project": "ythau",
        "bug_id": "16",
        "T": "void testTwoPlayersMap() { final var twoPlayersMap = \"\"\" 233 ###### #A..@# #..B@# #....# #.a..# #..b.# ###### \"\"\"; final var gameMap = TestHelper.parseGameMap(twoPlayersMap); final var playerIds = gameMap.getPlayerIds(); final var expectedIds = new HashSet<Integer>(); expectedIds.add(0); expectedIds.add(1); }",
        "C": "public Set<Integer> getPlayerIds() { // TODO return Collections.unmodifiableSet(players.keySet()); // throw new NotImplementedException(); }",
        "label": "P"
    },
    "447": {
        "dataset": "COMP 3021",
        "project": "ythau",
        "bug_id": "17",
        "T": "void testMapWithoutPlayer() { final var invalidMap = \"\"\" 233 ### #.# ### \"\"\"; } // @Tag(TestKind.HIDDEN) // @Test // void testUnmatchedPlayersAndBoxes() { // final var invalidMap = \"\"\" // 233 // ###### // #A..@# // #...@# // #a.b@# // #.a.@# // #..a.# // ###### // \"\"\"; // assertThrowsExactly(IllegalArgumentException.class, () -> TestHelper.parseGameMap(invalidMap)); // }",
        "C": "public TerminalRenderingEngine(PrintStream outputSteam) { this.outputSteam = outputSteam; }",
        "label": "P"
    },
    "448": {
        "dataset": "COMP 3021",
        "project": "ythau",
        "bug_id": "18",
        "T": "void testManyPlayersMap() { final var manyPlayersMap = \"\"\" 233 ###### #A.P@@# #vCB@@# #.cpD@# #Ga.d@# #g.bV@# ###### \"\"\"; final var gameMap = TestHelper.parseGameMap(manyPlayersMap); final var playerIds = gameMap.getPlayerIds(); final var expectedIds = new HashSet<>(Arrays.asList( 0, 'P' - 'A', 'C' - 'A', 'B' - 'A', 'D' - 'A', 'G' - 'A', 'V' - 'A' )); }",
        "C": "public Set<Integer> getPlayerIds() { // TODO return Collections.unmodifiableSet(players.keySet()); // throw new NotImplementedException(); }",
        "label": "P"
    },
    "449": {
        "dataset": "COMP 3021",
        "project": "ythau",
        "bug_id": "19",
        "T": "void testHeightForNonRectangularMap() { final var gameMap = TestHelper.parseGameMap(nonRectangularMap); }",
        "C": "",
        "label": "P"
    },
    "450": {
        "dataset": "COMP 3021",
        "project": "ythau",
        "bug_id": "20",
        "T": "void testDuplicatedPlayers() { final var invalidMap = \"\"\" 233 ###### #A..@# #..A@# #....# #.a..# #..b.# ###### \"\"\"; }",
        "C": "",
        "label": "P"
    },
    "451": {
        "dataset": "COMP 3021",
        "project": "ythau",
        "bug_id": "21",
        "T": "void testParseMapWithoutUndoLimit() { final var invalidMap = String.join(\"\\n\", rectangularMap.lines().skip(1).toList()); }",
        "C": "",
        "label": "P"
    },
    "452": {
        "dataset": "COMP 3021",
        "project": "ythau",
        "bug_id": "22",
        "T": "void testInsufficientDestinations() { final var invalidMap = \"\"\" 233 ###### #A..@# #...@# #a...# #.a..# #..a.# ###### \"\"\"; }",
        "C": "",
        "label": "P"
    },
    "453": {
        "dataset": "COMP 3021",
        "project": "ythau",
        "bug_id": "23",
        "T": "void testSuperLargeMap() { try { new GameMap(Integer.MAX_VALUE, Integer.MAX_VALUE, Collections.emptySet(), 0); } catch (OutOfMemoryError e) { throw new RuntimeException(e); } }); }",
        "C": "public GameMap(int maxWidth, int maxHeight, Set<Position> destinations, int undoLimit) { // TODO width=maxWidth; height=maxHeight; this.destinations=destinations; if (undoLimit<-1) throw new IllegalArgumentException(\"Invalid undo limit (<-1)\"); this.undoLimit=undoLimit; entityArr=new Entity[maxHeight][maxWidth]; walls=new HashSet<Position>(); players=new HashMap<Integer,Position>(); boxes=new HashMap<Integer,ArrayList<Position>>(); // throw new NotImplementedException(); } // public GameMap(int maxWidth, int maxHeight, int undoLimit, Entity[][] entityArr, // Set<Position> destinations, Set<Position> Wall, // Map<Integer,Position> playerMap,Map<Integer,ArrayList<Position>> boxMap){ // width=maxWidth; // height=maxHeight; // this.undoLimit=undoLimit; // this.entityArr=entityArr; // this.destinations=destinations; // this.walls=walls; // this.players=playerMap; // this.boxes=boxMap; // } private void assignContent(Entity[][] entityArr, Set<Position> walls, Map<Integer,Position> playerMap,Map<Integer,ArrayList<Position>> boxMap){ this.entityArr=entityArr; this.walls=walls; this.players=playerMap; this.boxes=boxMap; } /** * Parses the map from a string representation. * The first line is undo limit. * Starting from the second line, the game map is represented as follows, * <li># represents a {@link Wall}</li> * <li>@ represents a box destination.</li> * <li>Any upper-case letter represents a {@link Player}.</li> * <li> * Any lower-case letter represents a {@link Box} that is only movable by the player with the corresponding upper-case letter. * For instance, box \"a\" can only be moved by player \"A\" and not movable by player \"B\". * </li> * <li>. represents an {@link Empty} position in the map, meaning there is no player or box currently at this position.</li> * <p> * Notes: * <li> * There can be at most 26 players. * All implementations of classes in the hk.ust.comp3021.game package should support up to 26 players. * </li> * <li> * For simplicity, we assume the given map is bounded with a closed boundary. * There is no need to check this point. * </li> * <li> * Example maps can be found in \"src/main/resources\". * </li> * * @param mapText The string representation. * @return The parsed GameMap object. * @throws IllegalArgumentException if undo limit is negative but not -1. * @throws IllegalArgumentException if there are multiple same upper-case letters, i.e., one player can only exist at one position. * @throws IllegalArgumentException if there are no players in the map. * @throws IllegalArgumentException if the number of boxes is not equal to the number of box destinations. * @throws IllegalArgumentException if there are boxes whose {@link Box#getPlayerId()} public TerminalRenderingEngine(PrintStream outputSteam) { this.outputSteam = outputSteam; }",
        "label": "F"
    },
    "454": {
        "dataset": "COMP 3021",
        "project": "ythau",
        "bug_id": "24",
        "T": "void testInvalidUndoLimit() { final var invalidMap = \"\"\" -233 ###### #A..@# #...@# #a.b@# #.a.@# #..a.# ###### \"\"\"; }",
        "C": "",
        "label": "P"
    },
    "455": {
        "dataset": "COMP 3021",
        "project": "ythau",
        "bug_id": "25",
        "T": "void testEmptyMap() { final var invalidMap = \"\"; }",
        "C": "",
        "label": "P"
    },
    "456": {
        "dataset": "COMP 3021",
        "project": "ythau",
        "bug_id": "26",
        "T": "void testMove(String input, String name, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); } private InputStream fixValueStream(String content) { final var bytes = content.getBytes(StandardCharsets.UTF_8); return new ByteArrayInputStream(bytes); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine(); if (inputLine.toLowerCase().equals(\"exit\")) return new Exit(-1); if (inputLine.length()==1) { if (\"wasd\".indexOf(inputLine.toLowerCase())!=-1){ switch (inputLine.toLowerCase().charAt(0)) { case 'w': return new Move.Up(0); case 'a': return new Move.Left(0); case 's': return new Move.Down(0); default: return new Move.Right(0); } } else if ((\"hjkl\".indexOf(inputLine.toLowerCase())!=-1)) { switch (inputLine.toLowerCase().charAt(0)) { case 'k': return new Move.Up(1); case 'h': return new Move.Left(1); case 'j': return new Move.Down(1); default: return new Move.Right(1); } } else if (inputLine.toLowerCase().equals(\"u\")) return new Undo(-1); } return new InvalidInput(-1,INVALID_INPUT_MESSAGE); // TODO // throw new NotImplementedException(); }",
        "label": "P"
    },
    "457": {
        "dataset": "COMP 3021",
        "project": "ythau",
        "bug_id": "27",
        "T": "void testMove(String input, String name, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); } private InputStream fixValueStream(String content) { final var bytes = content.getBytes(StandardCharsets.UTF_8); return new ByteArrayInputStream(bytes); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine(); if (inputLine.toLowerCase().equals(\"exit\")) return new Exit(-1); if (inputLine.length()==1) { if (\"wasd\".indexOf(inputLine.toLowerCase())!=-1){ switch (inputLine.toLowerCase().charAt(0)) { case 'w': return new Move.Up(0); case 'a': return new Move.Left(0); case 's': return new Move.Down(0); default: return new Move.Right(0); } } else if ((\"hjkl\".indexOf(inputLine.toLowerCase())!=-1)) { switch (inputLine.toLowerCase().charAt(0)) { case 'k': return new Move.Up(1); case 'h': return new Move.Left(1); case 'j': return new Move.Down(1); default: return new Move.Right(1); } } else if (inputLine.toLowerCase().equals(\"u\")) return new Undo(-1); } return new InvalidInput(-1,INVALID_INPUT_MESSAGE); // TODO // throw new NotImplementedException(); }",
        "label": "P"
    },
    "458": {
        "dataset": "COMP 3021",
        "project": "ythau",
        "bug_id": "28",
        "T": "void testMove(String input, String name, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); } private InputStream fixValueStream(String content) { final var bytes = content.getBytes(StandardCharsets.UTF_8); return new ByteArrayInputStream(bytes); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine(); if (inputLine.toLowerCase().equals(\"exit\")) return new Exit(-1); if (inputLine.length()==1) { if (\"wasd\".indexOf(inputLine.toLowerCase())!=-1){ switch (inputLine.toLowerCase().charAt(0)) { case 'w': return new Move.Up(0); case 'a': return new Move.Left(0); case 's': return new Move.Down(0); default: return new Move.Right(0); } } else if ((\"hjkl\".indexOf(inputLine.toLowerCase())!=-1)) { switch (inputLine.toLowerCase().charAt(0)) { case 'k': return new Move.Up(1); case 'h': return new Move.Left(1); case 'j': return new Move.Down(1); default: return new Move.Right(1); } } else if (inputLine.toLowerCase().equals(\"u\")) return new Undo(-1); } return new InvalidInput(-1,INVALID_INPUT_MESSAGE); // TODO // throw new NotImplementedException(); }",
        "label": "P"
    },
    "459": {
        "dataset": "COMP 3021",
        "project": "ythau",
        "bug_id": "29",
        "T": "void testMove(String input, String name, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); } private InputStream fixValueStream(String content) { final var bytes = content.getBytes(StandardCharsets.UTF_8); return new ByteArrayInputStream(bytes); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine(); if (inputLine.toLowerCase().equals(\"exit\")) return new Exit(-1); if (inputLine.length()==1) { if (\"wasd\".indexOf(inputLine.toLowerCase())!=-1){ switch (inputLine.toLowerCase().charAt(0)) { case 'w': return new Move.Up(0); case 'a': return new Move.Left(0); case 's': return new Move.Down(0); default: return new Move.Right(0); } } else if ((\"hjkl\".indexOf(inputLine.toLowerCase())!=-1)) { switch (inputLine.toLowerCase().charAt(0)) { case 'k': return new Move.Up(1); case 'h': return new Move.Left(1); case 'j': return new Move.Down(1); default: return new Move.Right(1); } } else if (inputLine.toLowerCase().equals(\"u\")) return new Undo(-1); } return new InvalidInput(-1,INVALID_INPUT_MESSAGE); // TODO // throw new NotImplementedException(); }",
        "label": "P"
    },
    "460": {
        "dataset": "COMP 3021",
        "project": "ythau",
        "bug_id": "30",
        "T": "void testMove(String input, String name, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); } private InputStream fixValueStream(String content) { final var bytes = content.getBytes(StandardCharsets.UTF_8); return new ByteArrayInputStream(bytes); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine(); if (inputLine.toLowerCase().equals(\"exit\")) return new Exit(-1); if (inputLine.length()==1) { if (\"wasd\".indexOf(inputLine.toLowerCase())!=-1){ switch (inputLine.toLowerCase().charAt(0)) { case 'w': return new Move.Up(0); case 'a': return new Move.Left(0); case 's': return new Move.Down(0); default: return new Move.Right(0); } } else if ((\"hjkl\".indexOf(inputLine.toLowerCase())!=-1)) { switch (inputLine.toLowerCase().charAt(0)) { case 'k': return new Move.Up(1); case 'h': return new Move.Left(1); case 'j': return new Move.Down(1); default: return new Move.Right(1); } } else if (inputLine.toLowerCase().equals(\"u\")) return new Undo(-1); } return new InvalidInput(-1,INVALID_INPUT_MESSAGE); // TODO // throw new NotImplementedException(); }",
        "label": "P"
    },
    "461": {
        "dataset": "COMP 3021",
        "project": "ythau",
        "bug_id": "31",
        "T": "void testMove(String input, String name, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); } private InputStream fixValueStream(String content) { final var bytes = content.getBytes(StandardCharsets.UTF_8); return new ByteArrayInputStream(bytes); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine(); if (inputLine.toLowerCase().equals(\"exit\")) return new Exit(-1); if (inputLine.length()==1) { if (\"wasd\".indexOf(inputLine.toLowerCase())!=-1){ switch (inputLine.toLowerCase().charAt(0)) { case 'w': return new Move.Up(0); case 'a': return new Move.Left(0); case 's': return new Move.Down(0); default: return new Move.Right(0); } } else if ((\"hjkl\".indexOf(inputLine.toLowerCase())!=-1)) { switch (inputLine.toLowerCase().charAt(0)) { case 'k': return new Move.Up(1); case 'h': return new Move.Left(1); case 'j': return new Move.Down(1); default: return new Move.Right(1); } } else if (inputLine.toLowerCase().equals(\"u\")) return new Undo(-1); } return new InvalidInput(-1,INVALID_INPUT_MESSAGE); // TODO // throw new NotImplementedException(); }",
        "label": "P"
    },
    "462": {
        "dataset": "COMP 3021",
        "project": "ythau",
        "bug_id": "32",
        "T": "void testMove(String input, String name, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); } private InputStream fixValueStream(String content) { final var bytes = content.getBytes(StandardCharsets.UTF_8); return new ByteArrayInputStream(bytes); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine(); if (inputLine.toLowerCase().equals(\"exit\")) return new Exit(-1); if (inputLine.length()==1) { if (\"wasd\".indexOf(inputLine.toLowerCase())!=-1){ switch (inputLine.toLowerCase().charAt(0)) { case 'w': return new Move.Up(0); case 'a': return new Move.Left(0); case 's': return new Move.Down(0); default: return new Move.Right(0); } } else if ((\"hjkl\".indexOf(inputLine.toLowerCase())!=-1)) { switch (inputLine.toLowerCase().charAt(0)) { case 'k': return new Move.Up(1); case 'h': return new Move.Left(1); case 'j': return new Move.Down(1); default: return new Move.Right(1); } } else if (inputLine.toLowerCase().equals(\"u\")) return new Undo(-1); } return new InvalidInput(-1,INVALID_INPUT_MESSAGE); // TODO // throw new NotImplementedException(); }",
        "label": "P"
    },
    "463": {
        "dataset": "COMP 3021",
        "project": "ythau",
        "bug_id": "33",
        "T": "void testMove(String input, String name, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); } private InputStream fixValueStream(String content) { final var bytes = content.getBytes(StandardCharsets.UTF_8); return new ByteArrayInputStream(bytes); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine(); if (inputLine.toLowerCase().equals(\"exit\")) return new Exit(-1); if (inputLine.length()==1) { if (\"wasd\".indexOf(inputLine.toLowerCase())!=-1){ switch (inputLine.toLowerCase().charAt(0)) { case 'w': return new Move.Up(0); case 'a': return new Move.Left(0); case 's': return new Move.Down(0); default: return new Move.Right(0); } } else if ((\"hjkl\".indexOf(inputLine.toLowerCase())!=-1)) { switch (inputLine.toLowerCase().charAt(0)) { case 'k': return new Move.Up(1); case 'h': return new Move.Left(1); case 'j': return new Move.Down(1); default: return new Move.Right(1); } } else if (inputLine.toLowerCase().equals(\"u\")) return new Undo(-1); } return new InvalidInput(-1,INVALID_INPUT_MESSAGE); // TODO // throw new NotImplementedException(); }",
        "label": "P"
    },
    "464": {
        "dataset": "COMP 3021",
        "project": "ythau",
        "bug_id": "34",
        "T": "void testUndo(String input, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine(); if (inputLine.toLowerCase().equals(\"exit\")) return new Exit(-1); if (inputLine.length()==1) { if (\"wasd\".indexOf(inputLine.toLowerCase())!=-1){ switch (inputLine.toLowerCase().charAt(0)) { case 'w': return new Move.Up(0); case 'a': return new Move.Left(0); case 's': return new Move.Down(0); default: return new Move.Right(0); } } else if ((\"hjkl\".indexOf(inputLine.toLowerCase())!=-1)) { switch (inputLine.toLowerCase().charAt(0)) { case 'k': return new Move.Up(1); case 'h': return new Move.Left(1); case 'j': return new Move.Down(1); default: return new Move.Right(1); } } else if (inputLine.toLowerCase().equals(\"u\")) return new Undo(-1); } return new InvalidInput(-1,INVALID_INPUT_MESSAGE); // TODO // throw new NotImplementedException(); }",
        "label": "P"
    },
    "465": {
        "dataset": "COMP 3021",
        "project": "ythau",
        "bug_id": "35",
        "T": "void testInvalidInput() { final var inputStream = fixValueStream(\"blah blah\"); final var inputEngine = new TerminalInputEngine(inputStream); final var action = inputEngine.fetchAction(); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine(); if (inputLine.toLowerCase().equals(\"exit\")) return new Exit(-1); if (inputLine.length()==1) { if (\"wasd\".indexOf(inputLine.toLowerCase())!=-1){ switch (inputLine.toLowerCase().charAt(0)) { case 'w': return new Move.Up(0); case 'a': return new Move.Left(0); case 's': return new Move.Down(0); default: return new Move.Right(0); } } else if ((\"hjkl\".indexOf(inputLine.toLowerCase())!=-1)) { switch (inputLine.toLowerCase().charAt(0)) { case 'k': return new Move.Up(1); case 'h': return new Move.Left(1); case 'j': return new Move.Down(1); default: return new Move.Right(1); } } else if (inputLine.toLowerCase().equals(\"u\")) return new Undo(-1); } return new InvalidInput(-1,INVALID_INPUT_MESSAGE); // TODO // throw new NotImplementedException(); }",
        "label": "P"
    },
    "466": {
        "dataset": "COMP 3021",
        "project": "ythau",
        "bug_id": "36",
        "T": "void testUndoWhenThereIsNoMove() { final var gameState = new GameState(TestHelper.parseGameMap(\"\"\" 233 ###### #A.a@# #..a@# ###### \"\"\" )); gameState.undo(); } private Entity generateEntity(int key) { return switch (key % 4) { case 0 -> new Box(0); case 1 -> new Empty(); case 2 -> new Player(0); case 3 -> new Wall(); default -> throw new ShouldNotReachException(); }; }",
        "C": "public GameState(@NotNull GameMap map) { // TODO this.map=map; history=new Stack<Checkpoint>(); undoQuota=map.getUndoLimit(); this.players=map.getPlayerMap(); // this.boxes=map.getBoxMap(); this.entityArr=map.getEntityArr(); width=map.getMaxWidth(); height=map.getMaxHeight(); // throw new NotImplementedException(); } public void undo() { if (undoQuota.isPresent() && undoQuota.get()<=0) return; if (!history.isEmpty()) { history.pop(); if (undoQuota.isPresent()) undoQuota=Optional.of(undoQuota.get()-1); } if (!history.isEmpty()) { Checkpoint c = history.peek(); entityArr = c.getEntityArr(); players=c.getPlayerMap(); } else{ entityArr=map.getEntityArr(); players=map.getPlayerMap(); } // TODO // throw new NotImplementedException(); } /** * Get the maximum width of the game map. * This should be the same as that in {@link GameMap} public TerminalRenderingEngine(PrintStream outputSteam) { this.outputSteam = outputSteam; } public Box(int playerId) { this.playerId = playerId; } public Player(int id) { this.id = id; } public ShouldNotReachException() { super(\"This branch should not be reached.\"); }",
        "label": "P"
    },
    "467": {
        "dataset": "COMP 3021",
        "project": "ythau",
        "bug_id": "37",
        "T": "void testGetUndoUnlimited() { final var gameState = new GameState(TestHelper.parseGameMap(\"\"\" -1 ###### #.Aa@# #..a@# ###### \"\"\" )); }",
        "C": "public GameState(@NotNull GameMap map) { // TODO this.map=map; history=new Stack<Checkpoint>(); undoQuota=map.getUndoLimit(); this.players=map.getPlayerMap(); // this.boxes=map.getBoxMap(); this.entityArr=map.getEntityArr(); width=map.getMaxWidth(); height=map.getMaxHeight(); // throw new NotImplementedException(); }",
        "label": "P"
    },
    "468": {
        "dataset": "COMP 3021",
        "project": "ythau",
        "bug_id": "38",
        "T": "void testMapCopying() { final var maxWidth = 2333; final var maxHeight = 2333; final var random = new Random(); final var randomEntities = Stream.generate(() -> Position.of(random.nextInt(maxWidth), random.nextInt(maxHeight))) .distinct() .limit(100) .collect(Collectors.toMap(Function.identity(), it -> generateEntity(it.x()))); final var firstPos = randomEntities.keySet().stream().findFirst(); final var gameMap = new GameMap(maxWidth, maxHeight, Collections.singleton(firstPos.get()), 233); randomEntities.forEach(gameMap::putEntity); final var gameState = new GameState(gameMap); final var randomPosition = randomEntities.keySet().stream().findAny(); gameMap.putEntity(randomPosition.get(), new Empty()); randomEntities.forEach((p, e) -> assertEquals(e, gameState.getEntity(p))); }",
        "C": "public static @NotNull Position of(int x, int y) { return new Position(x, y); } public GameMap(int maxWidth, int maxHeight, Set<Position> destinations, int undoLimit) { // TODO width=maxWidth; height=maxHeight; this.destinations=destinations; if (undoLimit<-1) throw new IllegalArgumentException(\"Invalid undo limit (<-1)\"); this.undoLimit=undoLimit; entityArr=new Entity[maxHeight][maxWidth]; walls=new HashSet<Position>(); players=new HashMap<Integer,Position>(); boxes=new HashMap<Integer,ArrayList<Position>>(); // throw new NotImplementedException(); } // public GameMap(int maxWidth, int maxHeight, int undoLimit, Entity[][] entityArr, // Set<Position> destinations, Set<Position> Wall, // Map<Integer,Position> playerMap,Map<Integer,ArrayList<Position>> boxMap){ // width=maxWidth; // height=maxHeight; // this.undoLimit=undoLimit; // this.entityArr=entityArr; // this.destinations=destinations; // this.walls=walls; // this.players=playerMap; // this.boxes=boxMap; // } private void assignContent(Entity[][] entityArr, Set<Position> walls, Map<Integer,Position> playerMap,Map<Integer,ArrayList<Position>> boxMap){ this.entityArr=entityArr; this.walls=walls; this.players=playerMap; this.boxes=boxMap; } /** * Parses the map from a string representation. * The first line is undo limit. * Starting from the second line, the game map is represented as follows, * <li># represents a {@link Wall}</li> * <li>@ represents a box destination.</li> * <li>Any upper-case letter represents a {@link Player}.</li> * <li> * Any lower-case letter represents a {@link Box} that is only movable by the player with the corresponding upper-case letter. * For instance, box \"a\" can only be moved by player \"A\" and not movable by player \"B\". * </li> * <li>. represents an {@link Empty} position in the map, meaning there is no player or box currently at this position.</li> * <p> * Notes: * <li> * There can be at most 26 players. * All implementations of classes in the hk.ust.comp3021.game package should support up to 26 players. * </li> * <li> * For simplicity, we assume the given map is bounded with a closed boundary. * There is no need to check this point. * </li> * <li> * Example maps can be found in \"src/main/resources\". * </li> * * @param mapText The string representation. * @return The parsed GameMap object. * @throws IllegalArgumentException if undo limit is negative but not -1. * @throws IllegalArgumentException if there are multiple same upper-case letters, i.e., one player can only exist at one position. * @throws IllegalArgumentException if there are no players in the map. * @throws IllegalArgumentException if the number of boxes is not equal to the number of box destinations. * @throws IllegalArgumentException if there are boxes whose {@link Box#getPlayerId()} public GameState(@NotNull GameMap map) { // TODO this.map=map; history=new Stack<Checkpoint>(); undoQuota=map.getUndoLimit(); this.players=map.getPlayerMap(); // this.boxes=map.getBoxMap(); this.entityArr=map.getEntityArr(); width=map.getMaxWidth(); height=map.getMaxHeight(); // throw new NotImplementedException(); } public void putEntity(Position position, Entity entity) { // TODO if (position.x()>=width || position.y()>=height) return; switch (entity){ case Empty o-> { entityArr[position.y()][position.x()]=o; } case Wall o->{ entityArr[position.y()][position.x()]=o; walls.add(position); } case Box o->{ if (boxes.containsKey(o.getPlayerId())) { boxes.get(o.getPlayerId()).add(position); } else{ boxes.put(o.getPlayerId(),new ArrayList<Position>()); boxes.get(o.getPlayerId()).add(position); } this.boxCount++; entityArr[position.y()][position.x()]=o; } case Player o->{ if (players.containsKey(o.getId())) throw new IllegalArgumentException(\"duplicate players detected in the map\"); players.put(o.getId(),position); entityArr[position.y()][position.x()]=o; } default->throw new ShouldNotReachException(); } // throw new NotImplementedException(); } public @Nullable Entity getEntity(@NotNull Position position) { // TODO if (position.x()>=width || position.y()>=height) return null; return entityArr[position.y()][position.x()]; // throw new NotImplementedException(); } /** * Get all box destination positions as a set in the game map. * This should be the same as that in {@link GameMap}",
        "label": "F"
    },
    "469": {
        "dataset": "COMP 3021",
        "project": "ythau",
        "bug_id": "39",
        "T": "void testUndoWhenThereIsMoveButNoCheckpoint() { final var gameState = new GameState(TestHelper.parseGameMap(\"\"\" 233 ###### #A.a@# #..a@# ###### \"\"\" )); gameState.move(Position.of(1, 1), Position.of(2, 1)); gameState.undo(); }",
        "C": "public GameState(@NotNull GameMap map) { // TODO this.map=map; history=new Stack<Checkpoint>(); undoQuota=map.getUndoLimit(); this.players=map.getPlayerMap(); // this.boxes=map.getBoxMap(); this.entityArr=map.getEntityArr(); width=map.getMaxWidth(); height=map.getMaxHeight(); // throw new NotImplementedException(); } public void move(Position from, Position to) { // TODO Entity e=entityArr[from.y()][from.x()]; entityArr[to.y()][to.x()]=e; entityArr[from.y()][from.x()]=new Empty(); if (e instanceof Player o) players.put(o.getId(), Position.of(to.x(),to.y())); // throw new NotImplementedException(); } /** * Record a checkpoint of the game state, including: * <li>All current positions of entities in the game map.</li> * <li>Current undo quota</li> * <p> * Checkpoint is used in {@link GameState#undo()} public static @NotNull Position of(int x, int y) { return new Position(x, y); } public void undo() { if (undoQuota.isPresent() && undoQuota.get()<=0) return; if (!history.isEmpty()) { history.pop(); if (undoQuota.isPresent()) undoQuota=Optional.of(undoQuota.get()-1); } if (!history.isEmpty()) { Checkpoint c = history.peek(); entityArr = c.getEntityArr(); players=c.getPlayerMap(); } else{ entityArr=map.getEntityArr(); players=map.getPlayerMap(); } // TODO // throw new NotImplementedException(); } /** * Get the maximum width of the game map. * This should be the same as that in {@link GameMap}",
        "label": "P"
    },
    "470": {
        "dataset": "COMP 3021",
        "project": "ythau",
        "bug_id": "40",
        "T": "void testGameExit() { final var gameState = mock(GameState.class); final var inputEngine = mock(TerminalInputEngine.class); final var renderingEngine = mock(TerminalRenderingEngine.class); when(gameState.isWin()).thenReturn(false, false, false); when(inputEngine.fetchAction()) .thenReturn(new InvalidInput(0, \"\"), new InvalidInput(0, \"\"), new Exit(0)); final var game = new TerminalSokobanGame(gameState, inputEngine, renderingEngine); game.run(); verify(renderingEngine, atLeastOnce()).message(any()); }",
        "C": "public InvalidInput(int initiator, @NotNull String message) { super(initiator); this.message = message; } public Exit(int initiator) { super(initiator); } public TerminalSokobanGame(GameState gameState, TerminalInputEngine inputEngine, TerminalRenderingEngine renderingEngine) { super(gameState); this.inputEngine = inputEngine; this.renderingEngine = renderingEngine; // TODO if (gameState.getAllPlayerPositions().size()>2) throw new IllegalArgumentException(\"TerminalSokobanGame only support at most two players.\"); // Check the number of players // throw new NotImplementedException(); } public void run() { renderingEngine.message(GAME_READY_MESSAGE); renderingEngine.render(state); while (!shouldStop()){ if (state.getUndoQuota().isEmpty()) renderingEngine.message(UNDO_QUOTA_UNLIMITED); else renderingEngine.message(String.format(UNDO_QUOTA_TEMPLATE,state.getUndoQuota().get())); renderingEngine.message(\">>>\"); Action input=inputEngine.fetchAction(); ActionResult result=processAction(input); if (result instanceof ActionResult.Failed f) renderingEngine.message(f.getReason()); renderingEngine.render(state); } renderingEngine.message(GAME_EXIT_MESSAGE); if (state.isWin()) renderingEngine.message(WIN_MESSAGE); // TODO // throw new NotImplementedException(); }",
        "label": "P"
    },
    "471": {
        "dataset": "COMP 3021",
        "project": "ythau",
        "bug_id": "41",
        "T": "void testGameWin() { final var gameState = mock(GameState.class); final var inputEngine = mock(TerminalInputEngine.class); final var renderingEngine = mock(TerminalRenderingEngine.class); when(gameState.isWin()).thenReturn(false, false, false, true); when(inputEngine.fetchAction()) .thenReturn(new InvalidInput(0, \"\")); final var game = new TerminalSokobanGame(gameState, inputEngine, renderingEngine); game.run(); verify(gameState, atLeastOnce()).isWin(); verify(renderingEngine, atLeastOnce()).message(any()); }",
        "C": "public InvalidInput(int initiator, @NotNull String message) { super(initiator); this.message = message; } public TerminalSokobanGame(GameState gameState, TerminalInputEngine inputEngine, TerminalRenderingEngine renderingEngine) { super(gameState); this.inputEngine = inputEngine; this.renderingEngine = renderingEngine; // TODO if (gameState.getAllPlayerPositions().size()>2) throw new IllegalArgumentException(\"TerminalSokobanGame only support at most two players.\"); // Check the number of players // throw new NotImplementedException(); } public void run() { renderingEngine.message(GAME_READY_MESSAGE); renderingEngine.render(state); while (!shouldStop()){ if (state.getUndoQuota().isEmpty()) renderingEngine.message(UNDO_QUOTA_UNLIMITED); else renderingEngine.message(String.format(UNDO_QUOTA_TEMPLATE,state.getUndoQuota().get())); renderingEngine.message(\">>>\"); Action input=inputEngine.fetchAction(); ActionResult result=processAction(input); if (result instanceof ActionResult.Failed f) renderingEngine.message(f.getReason()); renderingEngine.render(state); } renderingEngine.message(GAME_EXIT_MESSAGE); if (state.isWin()) renderingEngine.message(WIN_MESSAGE); // TODO // throw new NotImplementedException(); }",
        "label": "P"
    },
    "472": {
        "dataset": "COMP 3021",
        "project": "ythau",
        "bug_id": "42",
        "T": "void testMoreThanTwoPlayers() { final var gameState = mock(GameState.class); final var inputEngine = mock(TerminalInputEngine.class); final var renderingEngine = mock(TerminalRenderingEngine.class); when(gameState.getAllPlayerPositions()).thenReturn(new HashSet<>(Arrays.asList(Position.of(1, 1), Position.of(1, 2), Position.of(1, 3)))); }",
        "C": "public static @NotNull Position of(int x, int y) { return new Position(x, y); }",
        "label": "P"
    },
    "473": {
        "dataset": "COMP 3021",
        "project": "cwhoal",
        "bug_id": "0",
        "T": "void moveUp() { Position.of(233, 232), new Move.Up(-1).nextPosition(pos) ); }",
        "C": "public static @NotNull Position of(int x, int y) { return new Position(x, y); } public Up(int initiator) { super(initiator); }",
        "label": "P"
    },
    "474": {
        "dataset": "COMP 3021",
        "project": "cwhoal",
        "bug_id": "1",
        "T": "void moveDown() { Position.of(233, 234), new Move.Down(-1).nextPosition(pos) ); }",
        "C": "public static @NotNull Position of(int x, int y) { return new Position(x, y); } public Down(int initiator) { super(initiator); }",
        "label": "P"
    },
    "475": {
        "dataset": "COMP 3021",
        "project": "cwhoal",
        "bug_id": "2",
        "T": "void moveRight() { Position.of(234, 233), new Move.Right(-1).nextPosition(pos) ); }",
        "C": "public static @NotNull Position of(int x, int y) { return new Position(x, y); } public Right(int initiator) { super(initiator); }",
        "label": "P"
    },
    "476": {
        "dataset": "COMP 3021",
        "project": "cwhoal",
        "bug_id": "3",
        "T": "void testExceedingUndoQuota() { final var gameState = mock(GameState.class); when(gameState.getPlayerPositionById(anyInt())).thenReturn(Position.of(0, 0)); when(gameState.getUndoQuota()).thenReturn(Optional.of(0)); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Undo(0)); }",
        "C": "public Undo(int initiator) { super(initiator); }",
        "label": "P"
    },
    "477": {
        "dataset": "COMP 3021",
        "project": "cwhoal",
        "bug_id": "4",
        "T": "void testExit() { final var gameState = mock(GameState.class); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Exit(0)); }",
        "C": "public Exit(int initiator) { super(initiator); }",
        "label": "P"
    },
    "478": {
        "dataset": "COMP 3021",
        "project": "cwhoal",
        "bug_id": "5",
        "T": "void testUndoUnlimited() { final var gameState = mock(GameState.class); when(gameState.getPlayerPositionById(anyInt())).thenReturn(Position.of(0, 0)); when(gameState.getUndoQuota()).thenReturn(Optional.empty()); final var game = new SokobanGameForTesting(gameState); for (int i = 0; i < 10000; i++) { final var result = game.feedActionForProcessing(new Undo(0)); } verify(gameState, times(10000)).undo(); }",
        "C": "public TerminalRenderingEngine(PrintStream outputSteam) { this.outputSteam = outputSteam; } public Undo(int initiator) { super(initiator); }",
        "label": "F"
    },
    "479": {
        "dataset": "COMP 3021",
        "project": "cwhoal",
        "bug_id": "6",
        "T": "void testPushOtherPlayerBox() { String mapText = \"\"\" 233 ###### #AB.@# #b.a.# #@...# ###### \"\"\"; final var testMap = TestHelper.parseGameMap(mapText); final var gameState = spy(new GameState(testMap)); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Move.Down(0)); verify(gameState, never()).move(any(), any()); }",
        "C": "public GameState(@NotNull GameMap map) { // TODO gameMap = map; undoCheckpoint.clear(); boxCheckpoint.clear(); playerCheckpoint.clear(); checkpoint(); } public Down(int initiator) { super(initiator); }",
        "label": "P"
    },
    "480": {
        "dataset": "COMP 3021",
        "project": "cwhoal",
        "bug_id": "7",
        "T": "void testMoveNonExistingPlayer() { String mapText = \"\"\" 233 ###### #A..@# #a...# ##...# ###### \"\"\"; final var testMap = TestHelper.parseGameMap(mapText); final var gameState = spy(new GameState(testMap)); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Move.Down(23)); }",
        "C": "public GameState(@NotNull GameMap map) { // TODO gameMap = map; undoCheckpoint.clear(); boxCheckpoint.clear(); playerCheckpoint.clear(); checkpoint(); } public Down(int initiator) { super(initiator); }",
        "label": "P"
    },
    "481": {
        "dataset": "COMP 3021",
        "project": "cwhoal",
        "bug_id": "8",
        "T": "void testCheckpointWhenNeed() { final var gameState = spy(new GameState(TestHelper.parseGameMap(\"\"\" 233 ###### #.Aa@# #..a@# ###### \"\"\" ))); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Move.Right(0)); verify(gameState, times(1)).checkpoint(); }",
        "C": "public GameState(@NotNull GameMap map) { // TODO gameMap = map; undoCheckpoint.clear(); boxCheckpoint.clear(); playerCheckpoint.clear(); checkpoint(); } public Right(int initiator) { super(initiator); }",
        "label": "P"
    },
    "482": {
        "dataset": "COMP 3021",
        "project": "cwhoal",
        "bug_id": "9",
        "T": "void testPushBoxAgainstWall() { String mapText = \"\"\" 233 ###### #A..@# #a...# ##...# ###### \"\"\"; final var testMap = TestHelper.parseGameMap(mapText); final var gameState = spy(new GameState(testMap)); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Move.Down(0)); verify(gameState, never()).move(any(), any()); }",
        "C": "public GameState(@NotNull GameMap map) { // TODO gameMap = map; undoCheckpoint.clear(); boxCheckpoint.clear(); playerCheckpoint.clear(); checkpoint(); } public Down(int initiator) { super(initiator); }",
        "label": "P"
    },
    "483": {
        "dataset": "COMP 3021",
        "project": "cwhoal",
        "bug_id": "10",
        "T": "void testCheckpointWhenNotNeed() { final var gameState = spy(new GameState(TestHelper.parseGameMap(\"\"\" 233 ###### #A.a@# #..a@# ###### \"\"\" ))); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Move.Right(0)); verify(gameState, never()).checkpoint(); } private static class SokobanGameForTesting extends AbstractSokobanGame { protected SokobanGameForTesting(GameState gameState) { super(gameState); } @Override public void run() { } public ActionResult feedActionForProcessing(Action action) { return processAction(action); } }",
        "C": "public GameState(@NotNull GameMap map) { // TODO gameMap = map; undoCheckpoint.clear(); boxCheckpoint.clear(); playerCheckpoint.clear(); checkpoint(); } public Right(int initiator) { super(initiator); } public void run() { // TODO exitFlag = false; renderingEngine.message(StringResources.GAME_READY_MESSAGE); renderingEngine.render(this.state); renderingEngine.message(\"\"); if (state.getUndoQuota().orElse(0) != -1) { renderingEngine.message(String.format(StringResources.UNDO_QUOTA_TEMPLATE,state.getUndoQuota().orElse(0).toString())); } else { renderingEngine.message(String.format(StringResources.UNDO_QUOTA_TEMPLATE,StringResources.UNDO_QUOTA_UNLIMITED)); } while(!shouldStop()) { var actionResult = processAction(inputEngine.fetchAction()); if (actionResult instanceof ActionResult.Failed) { renderingEngine.message(((ActionResult.Failed) actionResult).getReason()); } renderingEngine.render(this.state); renderingEngine.message(\"\"); if (state.getUndoQuota().orElse(0) != -1) { renderingEngine.message(String.format(StringResources.UNDO_QUOTA_TEMPLATE,state.getUndoQuota().orElse(0).toString())); } else { renderingEngine.message(String.format(StringResources.UNDO_QUOTA_TEMPLATE,StringResources.UNDO_QUOTA_UNLIMITED)); } if (shouldStop()) { if (exitFlag) { renderingEngine.message(StringResources.GAME_EXIT_MESSAGE); } else { renderingEngine.message(StringResources.WIN_MESSAGE); } //exit(0); } } } protected ActionResult processAction(@NotNull Action action) { // TODO if (action instanceof InvalidInput) { return new ActionResult.Failed(action,StringResources.INVALID_INPUT_MESSAGE); } if (action instanceof Undo) { if (state.getUndoQuota().orElse(0) == 0) { return new ActionResult.Failed(action,StringResources.UNDO_QUOTA_RUN_OUT); } state.undo(); return new ActionResult.Success(action); } if (action instanceof Exit) { exitFlag = true; return new ActionResult.Success(action); } if (!state.gameMap.getPlayerIds().contains(action.getInitiator())) {//filter player not found return new ActionResult.Failed(action,StringResources.PLAYER_NOT_FOUND); } if (action instanceof Move.Up) { //Up Position playerPos = state.getPlayerPositionById(action.getInitiator()); char[][] map = state.gameMap.getMap(); if (playerPos.y() <= 0) {//bound of map return new ActionResult.Failed(action,StringResources.INVALID_INPUT_MESSAGE); } if (map[playerPos.x()][playerPos.y() - 1] == '.' || map[playerPos.x()][playerPos.y() - 1] == '@') { state.move(playerPos, playerPos.of(playerPos.x(), playerPos.y() - 1)); return new ActionResult.Success(action); } if (map[playerPos.x()][playerPos.y() - 1] == (char) ('a' + action.getInitiator())) { //push box if (playerPos.y() <= 1) { return new ActionResult.Failed(action,StringResources.INVALID_INPUT_MESSAGE); } if (!(map[playerPos.x()][playerPos.y() - 2] == '.' || map[playerPos.x()][playerPos.y() - 2] == '@')) { return new ActionResult.Failed(action,StringResources.INVALID_INPUT_MESSAGE); } state.move(playerPos.of(playerPos.x(), playerPos.y() - 1),playerPos.of(playerPos.x(), playerPos.y() - 2)); state.move(playerPos, playerPos.of(playerPos.x(), playerPos.y() - 1)); state.checkpoint(); return new ActionResult.Success(action); } return new ActionResult.Failed(action,StringResources.INVALID_INPUT_MESSAGE); } if (action instanceof Move.Left) { //Left Position playerPos = state.getPlayerPositionById(action.getInitiator()); char[][] map = state.gameMap.getMap(); if (playerPos.x() <= 0) { //bound of map return new ActionResult.Failed(action,StringResources.INVALID_INPUT_MESSAGE); } if (map[playerPos.x() - 1][playerPos.y()] == '.' || map[playerPos.x() - 1][playerPos.y()] == '@') { state.move(playerPos, playerPos.of(playerPos.x() - 1, playerPos.y())); return new ActionResult.Success(action); } if (map[playerPos.x() - 1][playerPos.y()] == (char) ('a' + action.getInitiator())) { //push box if (playerPos.x() <= 1) { return new ActionResult.Failed(action,StringResources.INVALID_INPUT_MESSAGE); } if (!(map[playerPos.x() - 2][playerPos.y()] == '.' || map[playerPos.x() - 2][playerPos.y()] == '@')) { return new ActionResult.Failed(action,StringResources.INVALID_INPUT_MESSAGE); } state.move(playerPos.of(playerPos.x() - 1, playerPos.y()),playerPos.of(playerPos.x() - 2, playerPos.y())); state.move(playerPos, playerPos.of(playerPos.x() - 1, playerPos.y())); state.checkpoint(); return new ActionResult.Success(action); } return new ActionResult.Failed(action,StringResources.INVALID_INPUT_MESSAGE); } if (action instanceof Move.Right) { //Right Position playerPos = state.getPlayerPositionById(action.getInitiator()); char[][] map = state.gameMap.getMap(); if (playerPos.x() >= state.gameMap.getMaxWidth()) { //bound of map return new ActionResult.Failed(action,StringResources.INVALID_INPUT_MESSAGE); } if (map[playerPos.x() + 1][playerPos.y()] == '.' || map[playerPos.x() + 1][playerPos.y()] == '@') { state.move(playerPos, playerPos.of(playerPos.x() + 1, playerPos.y())); return new ActionResult.Success(action); } if (map[playerPos.x() + 1][playerPos.y()] == (char) ('a' + action.getInitiator())) {//push box if (playerPos.x() + 1 >= state.gameMap.getMaxWidth()) { return new ActionResult.Failed(action,StringResources.INVALID_INPUT_MESSAGE); } if (!(map[playerPos.x() + 2][playerPos.y()] == '.' || map[playerPos.x() + 2][playerPos.y()] == '@')) { return new ActionResult.Failed(action,StringResources.INVALID_INPUT_MESSAGE); } state.move(playerPos.of(playerPos.x() + 1, playerPos.y()),playerPos.of(playerPos.x() + 2, playerPos.y())); state.move(playerPos, playerPos.of(playerPos.x() + 1, playerPos.y())); state.checkpoint(); return new ActionResult.Success(action); } return new ActionResult.Failed(action,StringResources.INVALID_INPUT_MESSAGE); } if (action instanceof Move.Down) { //Down Position playerPos = state.getPlayerPositionById(action.getInitiator()); char[][] map = state.gameMap.getMap(); if (playerPos.y() >= state.gameMap.getMaxHeight()) {//bound of map return new ActionResult.Failed(action,StringResources.INVALID_INPUT_MESSAGE); } if (map[playerPos.x()][playerPos.y() + 1] == '.' || map[playerPos.x()][playerPos.y() + 1] == '@') { state.move(playerPos, playerPos.of(playerPos.x(), playerPos.y() + 1)); return new ActionResult.Success(action); } if (map[playerPos.x()][playerPos.y() + 1] == (char) ('a' + action.getInitiator())) { //push box if (playerPos.y() + 1 >= state.gameMap.getMaxHeight()) { return new ActionResult.Failed(action, StringResources.INVALID_INPUT_MESSAGE); } if (!(map[playerPos.x()][playerPos.y() + 2] == '.' || map[playerPos.x()][playerPos.y() + 2] == '@')) { return new ActionResult.Failed(action,StringResources.INVALID_INPUT_MESSAGE); } state.move(playerPos.of(playerPos.x(), playerPos.y() + 1),playerPos.of(playerPos.x(), playerPos.y() + 2)); state.move(playerPos, playerPos.of(playerPos.x(), playerPos.y() + 1)); state.checkpoint(); return new ActionResult.Success(action); } return new ActionResult.Failed(action,StringResources.INVALID_INPUT_MESSAGE); } return new ActionResult.Failed(action,StringResources.INVALID_INPUT_MESSAGE); }",
        "label": "P"
    },
    "484": {
        "dataset": "COMP 3021",
        "project": "cwhoal",
        "bug_id": "11",
        "T": "void testHitAnotherPlayer() { String mapText = \"\"\" 233 ###### #A..@# #B...# #ab.@# ###### \"\"\"; final var testMap = TestHelper.parseGameMap(mapText); final var gameState = spy(new GameState(testMap)); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Move.Down(0)); verify(gameState, never()).move(any(), any()); }",
        "C": "public GameState(@NotNull GameMap map) { // TODO gameMap = map; undoCheckpoint.clear(); boxCheckpoint.clear(); playerCheckpoint.clear(); checkpoint(); } public Down(int initiator) { super(initiator); }",
        "label": "P"
    },
    "485": {
        "dataset": "COMP 3021",
        "project": "cwhoal",
        "bug_id": "12",
        "T": "void testUndoWithinQuota() { final var gameState = mock(GameState.class); when(gameState.getPlayerPositionById(anyInt())).thenReturn(Position.of(0, 0)); when(gameState.getUndoQuota()).thenReturn(Optional.of(1)); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Undo(0)); verify(gameState, times(1)).undo(); }",
        "C": "public Undo(int initiator) { super(initiator); }",
        "label": "P"
    },
    "486": {
        "dataset": "COMP 3021",
        "project": "cwhoal",
        "bug_id": "13",
        "T": "void testInvalidInput() { final var game = new SokobanGameForTesting(mock(GameState.class)); final var message = String.valueOf(new Random().nextLong()); final var action = new InvalidInput(-1, message); final var result = game.feedActionForProcessing(action); }",
        "C": "public InvalidInput(int initiator, @NotNull String message) { super(initiator); this.message = message; }",
        "label": "P"
    },
    "487": {
        "dataset": "COMP 3021",
        "project": "cwhoal",
        "bug_id": "14",
        "T": "void testUndoLimitParsing() { final var gameMap = TestHelper.parseGameMap(rectangularMap); }",
        "C": "",
        "label": "P"
    },
    "488": {
        "dataset": "COMP 3021",
        "project": "cwhoal",
        "bug_id": "15",
        "T": "void testWidthForNonRectangularMap() { final var gameMap = TestHelper.parseGameMap(nonRectangularMap); }",
        "C": "",
        "label": "P"
    },
    "489": {
        "dataset": "COMP 3021",
        "project": "cwhoal",
        "bug_id": "16",
        "T": "void testTwoPlayersMap() { final var twoPlayersMap = \"\"\" 233 ###### #A..@# #..B@# #....# #.a..# #..b.# ###### \"\"\"; final var gameMap = TestHelper.parseGameMap(twoPlayersMap); final var playerIds = gameMap.getPlayerIds(); final var expectedIds = new HashSet<Integer>(); expectedIds.add(0); expectedIds.add(1); }",
        "C": "public Set<Integer> getPlayerIds() { // TODO return playerID; }",
        "label": "P"
    },
    "490": {
        "dataset": "COMP 3021",
        "project": "cwhoal",
        "bug_id": "17",
        "T": "void testMapWithoutPlayer() { final var invalidMap = \"\"\" 233 ### #.# ### \"\"\"; } // @Tag(TestKind.HIDDEN) // @Test // void testUnmatchedPlayersAndBoxes() { // final var invalidMap = \"\"\" // 233 // ###### // #A..@# // #...@# // #a.b@# // #.a.@# // #..a.# // ###### // \"\"\"; // assertThrowsExactly(IllegalArgumentException.class, () -> TestHelper.parseGameMap(invalidMap)); // }",
        "C": "public TerminalRenderingEngine(PrintStream outputSteam) { this.outputSteam = outputSteam; }",
        "label": "P"
    },
    "491": {
        "dataset": "COMP 3021",
        "project": "cwhoal",
        "bug_id": "18",
        "T": "void testManyPlayersMap() { final var manyPlayersMap = \"\"\" 233 ###### #A.P@@# #vCB@@# #.cpD@# #Ga.d@# #g.bV@# ###### \"\"\"; final var gameMap = TestHelper.parseGameMap(manyPlayersMap); final var playerIds = gameMap.getPlayerIds(); final var expectedIds = new HashSet<>(Arrays.asList( 0, 'P' - 'A', 'C' - 'A', 'B' - 'A', 'D' - 'A', 'G' - 'A', 'V' - 'A' )); }",
        "C": "public Set<Integer> getPlayerIds() { // TODO return playerID; }",
        "label": "P"
    },
    "492": {
        "dataset": "COMP 3021",
        "project": "cwhoal",
        "bug_id": "19",
        "T": "void testHeightForNonRectangularMap() { final var gameMap = TestHelper.parseGameMap(nonRectangularMap); }",
        "C": "",
        "label": "P"
    },
    "493": {
        "dataset": "COMP 3021",
        "project": "cwhoal",
        "bug_id": "20",
        "T": "void testDuplicatedPlayers() { final var invalidMap = \"\"\" 233 ###### #A..@# #..A@# #....# #.a..# #..b.# ###### \"\"\"; }",
        "C": "",
        "label": "P"
    },
    "494": {
        "dataset": "COMP 3021",
        "project": "cwhoal",
        "bug_id": "21",
        "T": "void testParseMapWithoutUndoLimit() { final var invalidMap = String.join(\"\\n\", rectangularMap.lines().skip(1).toList()); }",
        "C": "",
        "label": "P"
    },
    "495": {
        "dataset": "COMP 3021",
        "project": "cwhoal",
        "bug_id": "22",
        "T": "void testInsufficientDestinations() { final var invalidMap = \"\"\" 233 ###### #A..@# #...@# #a...# #.a..# #..a.# ###### \"\"\"; }",
        "C": "",
        "label": "P"
    },
    "496": {
        "dataset": "COMP 3021",
        "project": "cwhoal",
        "bug_id": "23",
        "T": "void testSuperLargeMap() { try { new GameMap(Integer.MAX_VALUE, Integer.MAX_VALUE, Collections.emptySet(), 0); } catch (OutOfMemoryError e) { throw new RuntimeException(e); } }); }",
        "C": "public GameMap(int maxWidth, int maxHeight, Set<Position> destinations, int undoLimit) { // TODO this.width = maxWidth; this.height = maxHeight - 1; this.boxDestinations = destinations; this.undoLimit = undoLimit; } /** * Parses the map from a string representation. * The first line is undo limit. * Starting from the second line, the game map is represented as follows, * <li># represents a {@link Wall}</li> * <li>@ represents a box destination.</li> * <li>Any upper-case letter represents a {@link Player}.</li> * <li> * Any lower-case letter represents a {@link Box} that is only movable by the player with the corresponding upper-case letter. * For instance, box \"a\" can only be moved by player \"A\" and not movable by player \"B\". * </li> * <li>. represents an {@link Empty} position in the map, meaning there is no player or box currently at this position.</li> * <p> * Notes: * <li> * There can be at most 26 players. * All implementations of classes in the hk.ust.comp3021.game package should support up to 26 players. * </li> * <li> * For simplicity, we assume the given map is bounded with a closed boundary. * There is no need to check this point. * </li> * <li> * Example maps can be found in \"src/main/resources\". * </li> * * @param mapText The string representation. * @return The parsed GameMap object. * @throws IllegalArgumentException if undo limit is negative but not -1. done * @throws IllegalArgumentException if there are multiple same upper-case letters, i.e., one player can only exist at one position. done * @throws IllegalArgumentException if there are no players in the map. done * @throws IllegalArgumentException if the number of boxes is not equal to the number of box destinations. done * @throws IllegalArgumentException if there are boxes whose {@link Box#getPlayerId()} public TerminalRenderingEngine(PrintStream outputSteam) { this.outputSteam = outputSteam; }",
        "label": "P"
    },
    "497": {
        "dataset": "COMP 3021",
        "project": "cwhoal",
        "bug_id": "24",
        "T": "void testInvalidUndoLimit() { final var invalidMap = \"\"\" -233 ###### #A..@# #...@# #a.b@# #.a.@# #..a.# ###### \"\"\"; }",
        "C": "",
        "label": "P"
    },
    "498": {
        "dataset": "COMP 3021",
        "project": "cwhoal",
        "bug_id": "25",
        "T": "void testEmptyMap() { final var invalidMap = \"\"; }",
        "C": "",
        "label": "P"
    },
    "499": {
        "dataset": "COMP 3021",
        "project": "cwhoal",
        "bug_id": "26",
        "T": "void testMove(String input, String name, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); } private InputStream fixValueStream(String content) { final var bytes = content.getBytes(StandardCharsets.UTF_8); return new ByteArrayInputStream(bytes); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. //TODO final var inputLine = terminalScanner.nextLine(); switch (inputLine) { case StringResources.EXIT_COMMAND_TEXT: return new Exit(0); case \"u\",\"U\": return new Undo(0); case \"W\",\"w\": return new Move.Up(0); case \"A\",\"a\": return new Move.Left(0); case \"S\", \"s\": return new Move.Down(0); case \"D\",\"d\": return new Move.Right(0); case \"H\",\"h\": return new Move.Left(1); case \"J\", \"j\": return new Move.Down(1); case \"K\",\"k\": return new Move.Up(1); case \"L\",\"l\": return new Move.Right(1); default: return new InvalidInput(0,\"Invalid Input.\"); } }",
        "label": "P"
    },
    "500": {
        "dataset": "COMP 3021",
        "project": "cwhoal",
        "bug_id": "27",
        "T": "void testMove(String input, String name, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); } private InputStream fixValueStream(String content) { final var bytes = content.getBytes(StandardCharsets.UTF_8); return new ByteArrayInputStream(bytes); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. //TODO final var inputLine = terminalScanner.nextLine(); switch (inputLine) { case StringResources.EXIT_COMMAND_TEXT: return new Exit(0); case \"u\",\"U\": return new Undo(0); case \"W\",\"w\": return new Move.Up(0); case \"A\",\"a\": return new Move.Left(0); case \"S\", \"s\": return new Move.Down(0); case \"D\",\"d\": return new Move.Right(0); case \"H\",\"h\": return new Move.Left(1); case \"J\", \"j\": return new Move.Down(1); case \"K\",\"k\": return new Move.Up(1); case \"L\",\"l\": return new Move.Right(1); default: return new InvalidInput(0,\"Invalid Input.\"); } }",
        "label": "P"
    },
    "501": {
        "dataset": "COMP 3021",
        "project": "cwhoal",
        "bug_id": "28",
        "T": "void testMove(String input, String name, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); } private InputStream fixValueStream(String content) { final var bytes = content.getBytes(StandardCharsets.UTF_8); return new ByteArrayInputStream(bytes); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. //TODO final var inputLine = terminalScanner.nextLine(); switch (inputLine) { case StringResources.EXIT_COMMAND_TEXT: return new Exit(0); case \"u\",\"U\": return new Undo(0); case \"W\",\"w\": return new Move.Up(0); case \"A\",\"a\": return new Move.Left(0); case \"S\", \"s\": return new Move.Down(0); case \"D\",\"d\": return new Move.Right(0); case \"H\",\"h\": return new Move.Left(1); case \"J\", \"j\": return new Move.Down(1); case \"K\",\"k\": return new Move.Up(1); case \"L\",\"l\": return new Move.Right(1); default: return new InvalidInput(0,\"Invalid Input.\"); } }",
        "label": "P"
    },
    "502": {
        "dataset": "COMP 3021",
        "project": "cwhoal",
        "bug_id": "29",
        "T": "void testMove(String input, String name, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); } private InputStream fixValueStream(String content) { final var bytes = content.getBytes(StandardCharsets.UTF_8); return new ByteArrayInputStream(bytes); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. //TODO final var inputLine = terminalScanner.nextLine(); switch (inputLine) { case StringResources.EXIT_COMMAND_TEXT: return new Exit(0); case \"u\",\"U\": return new Undo(0); case \"W\",\"w\": return new Move.Up(0); case \"A\",\"a\": return new Move.Left(0); case \"S\", \"s\": return new Move.Down(0); case \"D\",\"d\": return new Move.Right(0); case \"H\",\"h\": return new Move.Left(1); case \"J\", \"j\": return new Move.Down(1); case \"K\",\"k\": return new Move.Up(1); case \"L\",\"l\": return new Move.Right(1); default: return new InvalidInput(0,\"Invalid Input.\"); } }",
        "label": "P"
    },
    "503": {
        "dataset": "COMP 3021",
        "project": "cwhoal",
        "bug_id": "30",
        "T": "void testMove(String input, String name, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); } private InputStream fixValueStream(String content) { final var bytes = content.getBytes(StandardCharsets.UTF_8); return new ByteArrayInputStream(bytes); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. //TODO final var inputLine = terminalScanner.nextLine(); switch (inputLine) { case StringResources.EXIT_COMMAND_TEXT: return new Exit(0); case \"u\",\"U\": return new Undo(0); case \"W\",\"w\": return new Move.Up(0); case \"A\",\"a\": return new Move.Left(0); case \"S\", \"s\": return new Move.Down(0); case \"D\",\"d\": return new Move.Right(0); case \"H\",\"h\": return new Move.Left(1); case \"J\", \"j\": return new Move.Down(1); case \"K\",\"k\": return new Move.Up(1); case \"L\",\"l\": return new Move.Right(1); default: return new InvalidInput(0,\"Invalid Input.\"); } }",
        "label": "P"
    },
    "504": {
        "dataset": "COMP 3021",
        "project": "cwhoal",
        "bug_id": "31",
        "T": "void testMove(String input, String name, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); } private InputStream fixValueStream(String content) { final var bytes = content.getBytes(StandardCharsets.UTF_8); return new ByteArrayInputStream(bytes); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. //TODO final var inputLine = terminalScanner.nextLine(); switch (inputLine) { case StringResources.EXIT_COMMAND_TEXT: return new Exit(0); case \"u\",\"U\": return new Undo(0); case \"W\",\"w\": return new Move.Up(0); case \"A\",\"a\": return new Move.Left(0); case \"S\", \"s\": return new Move.Down(0); case \"D\",\"d\": return new Move.Right(0); case \"H\",\"h\": return new Move.Left(1); case \"J\", \"j\": return new Move.Down(1); case \"K\",\"k\": return new Move.Up(1); case \"L\",\"l\": return new Move.Right(1); default: return new InvalidInput(0,\"Invalid Input.\"); } }",
        "label": "P"
    },
    "505": {
        "dataset": "COMP 3021",
        "project": "cwhoal",
        "bug_id": "32",
        "T": "void testMove(String input, String name, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); } private InputStream fixValueStream(String content) { final var bytes = content.getBytes(StandardCharsets.UTF_8); return new ByteArrayInputStream(bytes); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. //TODO final var inputLine = terminalScanner.nextLine(); switch (inputLine) { case StringResources.EXIT_COMMAND_TEXT: return new Exit(0); case \"u\",\"U\": return new Undo(0); case \"W\",\"w\": return new Move.Up(0); case \"A\",\"a\": return new Move.Left(0); case \"S\", \"s\": return new Move.Down(0); case \"D\",\"d\": return new Move.Right(0); case \"H\",\"h\": return new Move.Left(1); case \"J\", \"j\": return new Move.Down(1); case \"K\",\"k\": return new Move.Up(1); case \"L\",\"l\": return new Move.Right(1); default: return new InvalidInput(0,\"Invalid Input.\"); } }",
        "label": "P"
    },
    "506": {
        "dataset": "COMP 3021",
        "project": "cwhoal",
        "bug_id": "33",
        "T": "void testMove(String input, String name, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); } private InputStream fixValueStream(String content) { final var bytes = content.getBytes(StandardCharsets.UTF_8); return new ByteArrayInputStream(bytes); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. //TODO final var inputLine = terminalScanner.nextLine(); switch (inputLine) { case StringResources.EXIT_COMMAND_TEXT: return new Exit(0); case \"u\",\"U\": return new Undo(0); case \"W\",\"w\": return new Move.Up(0); case \"A\",\"a\": return new Move.Left(0); case \"S\", \"s\": return new Move.Down(0); case \"D\",\"d\": return new Move.Right(0); case \"H\",\"h\": return new Move.Left(1); case \"J\", \"j\": return new Move.Down(1); case \"K\",\"k\": return new Move.Up(1); case \"L\",\"l\": return new Move.Right(1); default: return new InvalidInput(0,\"Invalid Input.\"); } }",
        "label": "P"
    },
    "507": {
        "dataset": "COMP 3021",
        "project": "cwhoal",
        "bug_id": "34",
        "T": "void testUndo(String input, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. //TODO final var inputLine = terminalScanner.nextLine(); switch (inputLine) { case StringResources.EXIT_COMMAND_TEXT: return new Exit(0); case \"u\",\"U\": return new Undo(0); case \"W\",\"w\": return new Move.Up(0); case \"A\",\"a\": return new Move.Left(0); case \"S\", \"s\": return new Move.Down(0); case \"D\",\"d\": return new Move.Right(0); case \"H\",\"h\": return new Move.Left(1); case \"J\", \"j\": return new Move.Down(1); case \"K\",\"k\": return new Move.Up(1); case \"L\",\"l\": return new Move.Right(1); default: return new InvalidInput(0,\"Invalid Input.\"); } }",
        "label": "P"
    },
    "508": {
        "dataset": "COMP 3021",
        "project": "cwhoal",
        "bug_id": "35",
        "T": "void testInvalidInput() { final var inputStream = fixValueStream(\"blah blah\"); final var inputEngine = new TerminalInputEngine(inputStream); final var action = inputEngine.fetchAction(); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. //TODO final var inputLine = terminalScanner.nextLine(); switch (inputLine) { case StringResources.EXIT_COMMAND_TEXT: return new Exit(0); case \"u\",\"U\": return new Undo(0); case \"W\",\"w\": return new Move.Up(0); case \"A\",\"a\": return new Move.Left(0); case \"S\", \"s\": return new Move.Down(0); case \"D\",\"d\": return new Move.Right(0); case \"H\",\"h\": return new Move.Left(1); case \"J\", \"j\": return new Move.Down(1); case \"K\",\"k\": return new Move.Up(1); case \"L\",\"l\": return new Move.Right(1); default: return new InvalidInput(0,\"Invalid Input.\"); } }",
        "label": "P"
    },
    "509": {
        "dataset": "COMP 3021",
        "project": "cwhoal",
        "bug_id": "36",
        "T": "void testUndoWhenThereIsNoMove() { final var gameState = new GameState(TestHelper.parseGameMap(\"\"\" 233 ###### #A.a@# #..a@# ###### \"\"\" )); gameState.undo(); } private Entity generateEntity(int key) { return switch (key % 4) { case 0 -> new Box(0); case 1 -> new Empty(); case 2 -> new Player(0); case 3 -> new Wall(); default -> throw new ShouldNotReachException(); }; }",
        "C": "public GameState(@NotNull GameMap map) { // TODO gameMap = map; undoCheckpoint.clear(); boxCheckpoint.clear(); playerCheckpoint.clear(); checkpoint(); } public void undo() { // TODO int undoNum = getUndoQuota().orElse(0); int lastUndoIndex = undoCheckpoint.size(); if (undoCheckpoint.isEmpty()) { return; } if (undoNum != 0) { if (!(lastUndoIndex == 1)) { gameMap.updateMap(undoCheckpoint.get(lastUndoIndex - 2)); gameMap.updateBoxList(boxCheckpoint.get(lastUndoIndex - 2)); gameMap.updatePlayerLocation(playerCheckpoint.get(lastUndoIndex - 2)); undoCheckpoint.remove(lastUndoIndex - 1); boxCheckpoint.remove(lastUndoIndex - 1); playerCheckpoint.remove(lastUndoIndex - 1); if (undoNum != -1) { undoNum -= 1; } } gameMap.updateUndoLimit(undoNum); //gameMap.printMap(undoCheckpoint.get(0)); } } /** * Get the maximum width of the game map. * This should be the same as that in {@link GameMap} public TerminalRenderingEngine(PrintStream outputSteam) { this.outputSteam = outputSteam; } public Box(int playerId) { this.playerId = playerId; } public Player(int id) { this.id = id; } public ShouldNotReachException() { super(\"This branch should not be reached.\"); }",
        "label": "P"
    },
    "510": {
        "dataset": "COMP 3021",
        "project": "cwhoal",
        "bug_id": "37",
        "T": "void testGetUndoUnlimited() { final var gameState = new GameState(TestHelper.parseGameMap(\"\"\" -1 ###### #.Aa@# #..a@# ###### \"\"\" )); }",
        "C": "public GameState(@NotNull GameMap map) { // TODO gameMap = map; undoCheckpoint.clear(); boxCheckpoint.clear(); playerCheckpoint.clear(); checkpoint(); }",
        "label": "F"
    },
    "511": {
        "dataset": "COMP 3021",
        "project": "cwhoal",
        "bug_id": "38",
        "T": "void testMapCopying() { final var maxWidth = 2333; final var maxHeight = 2333; final var random = new Random(); final var randomEntities = Stream.generate(() -> Position.of(random.nextInt(maxWidth), random.nextInt(maxHeight))) .distinct() .limit(100) .collect(Collectors.toMap(Function.identity(), it -> generateEntity(it.x()))); final var firstPos = randomEntities.keySet().stream().findFirst(); final var gameMap = new GameMap(maxWidth, maxHeight, Collections.singleton(firstPos.get()), 233); randomEntities.forEach(gameMap::putEntity); final var gameState = new GameState(gameMap); final var randomPosition = randomEntities.keySet().stream().findAny(); gameMap.putEntity(randomPosition.get(), new Empty()); randomEntities.forEach((p, e) -> assertEquals(e, gameState.getEntity(p))); }",
        "C": "public static @NotNull Position of(int x, int y) { return new Position(x, y); } public GameMap(int maxWidth, int maxHeight, Set<Position> destinations, int undoLimit) { // TODO this.width = maxWidth; this.height = maxHeight - 1; this.boxDestinations = destinations; this.undoLimit = undoLimit; } /** * Parses the map from a string representation. * The first line is undo limit. * Starting from the second line, the game map is represented as follows, * <li># represents a {@link Wall}</li> * <li>@ represents a box destination.</li> * <li>Any upper-case letter represents a {@link Player}.</li> * <li> * Any lower-case letter represents a {@link Box} that is only movable by the player with the corresponding upper-case letter. * For instance, box \"a\" can only be moved by player \"A\" and not movable by player \"B\". * </li> * <li>. represents an {@link Empty} position in the map, meaning there is no player or box currently at this position.</li> * <p> * Notes: * <li> * There can be at most 26 players. * All implementations of classes in the hk.ust.comp3021.game package should support up to 26 players. * </li> * <li> * For simplicity, we assume the given map is bounded with a closed boundary. * There is no need to check this point. * </li> * <li> * Example maps can be found in \"src/main/resources\". * </li> * * @param mapText The string representation. * @return The parsed GameMap object. * @throws IllegalArgumentException if undo limit is negative but not -1. done * @throws IllegalArgumentException if there are multiple same upper-case letters, i.e., one player can only exist at one position. done * @throws IllegalArgumentException if there are no players in the map. done * @throws IllegalArgumentException if the number of boxes is not equal to the number of box destinations. done * @throws IllegalArgumentException if there are boxes whose {@link Box#getPlayerId()} public GameState(@NotNull GameMap map) { // TODO gameMap = map; undoCheckpoint.clear(); boxCheckpoint.clear(); playerCheckpoint.clear(); checkpoint(); } public void putEntity(Position position, Entity entity) { // TODO if (entity instanceof Empty) { mapDevided[position.x()][position.y()] = '.'; return; } else if (entity instanceof Wall) { mapDevided[position.x()][position.y()] = '#'; return; } else if (entity instanceof Player) { char player = (char) ('A' + ((Player) entity).getId()); mapDevided[position.x()][position.y()] = player; this.player[((Player) entity).getId()] = position; return; } else if (entity instanceof Box) { char box = (char) ('a' + ((Box) entity).getPlayerId()); mapDevided[position.x()][position.y()] = box; this.box.get(((Box) entity).getPlayerId()).add(position); //update position of box in set return; } } public @Nullable Entity getEntity(@NotNull Position position) { // TODO return gameMap.getEntity(position); } /** * Get all box destination positions as a set in the game map. * This should be the same as that in {@link GameMap}",
        "label": "F"
    },
    "512": {
        "dataset": "COMP 3021",
        "project": "cwhoal",
        "bug_id": "39",
        "T": "void testUndoWhenThereIsMoveButNoCheckpoint() { final var gameState = new GameState(TestHelper.parseGameMap(\"\"\" 233 ###### #A.a@# #..a@# ###### \"\"\" )); gameState.move(Position.of(1, 1), Position.of(2, 1)); gameState.undo(); }",
        "C": "public GameState(@NotNull GameMap map) { // TODO gameMap = map; undoCheckpoint.clear(); boxCheckpoint.clear(); playerCheckpoint.clear(); checkpoint(); } public void move(Position from, Position to) { // TODO Entity original = getEntity(from); //System.out.println(original.getClass().getName()); Entity dest = getEntity(to); if (original == null || dest == null) { throw new ShouldNotReachException(); } if (original instanceof Box) { gameMap.removeBox(((Box) original).getPlayerId(),from); } if (gameMap.getMap()[from.x()][from.y()] == '@') { //prevent move the dest gameMap.getMap()[from.x()][from.y()] = '.'; } if (gameMap.getMap()[to.x()][to.y()] == '@') { gameMap.getMap()[to.x()][to.y()] = '.'; } //System.out.println(dest.getClass().getName()); gameMap.putEntity(to, original); gameMap.putEntity(from, dest); //gameMap.printMap(); if (getDestinations().contains(from) && gameMap.getMap()[from.x()][from.y()] == '.') { //add back the '@' gameMap.getMap()[from.x()][from.y()] = '@'; } if(getDestinations().contains(to) && gameMap.getMap()[to.x()][to.y()] == '.') { gameMap.getMap()[to.x()][to.y()] = '@'; } } /** * Record a checkpoint of the game state, including: * <li>All current positions of entities in the game map.</li> * <li>Current undo quota</li> * <p> * Checkpoint is used in {@link GameState#undo()} public static @NotNull Position of(int x, int y) { return new Position(x, y); } public void undo() { // TODO int undoNum = getUndoQuota().orElse(0); int lastUndoIndex = undoCheckpoint.size(); if (undoCheckpoint.isEmpty()) { return; } if (undoNum != 0) { if (!(lastUndoIndex == 1)) { gameMap.updateMap(undoCheckpoint.get(lastUndoIndex - 2)); gameMap.updateBoxList(boxCheckpoint.get(lastUndoIndex - 2)); gameMap.updatePlayerLocation(playerCheckpoint.get(lastUndoIndex - 2)); undoCheckpoint.remove(lastUndoIndex - 1); boxCheckpoint.remove(lastUndoIndex - 1); playerCheckpoint.remove(lastUndoIndex - 1); if (undoNum != -1) { undoNum -= 1; } } gameMap.updateUndoLimit(undoNum); //gameMap.printMap(undoCheckpoint.get(0)); } } /** * Get the maximum width of the game map. * This should be the same as that in {@link GameMap}",
        "label": "P"
    },
    "513": {
        "dataset": "COMP 3021",
        "project": "cwhoal",
        "bug_id": "40",
        "T": "void testGameExit() { final var gameState = mock(GameState.class); final var inputEngine = mock(TerminalInputEngine.class); final var renderingEngine = mock(TerminalRenderingEngine.class); when(gameState.isWin()).thenReturn(false, false, false); when(inputEngine.fetchAction()) .thenReturn(new InvalidInput(0, \"\"), new InvalidInput(0, \"\"), new Exit(0)); final var game = new TerminalSokobanGame(gameState, inputEngine, renderingEngine); game.run(); verify(renderingEngine, atLeastOnce()).message(any()); }",
        "C": "public InvalidInput(int initiator, @NotNull String message) { super(initiator); this.message = message; } public Exit(int initiator) { super(initiator); } public TerminalSokobanGame(GameState gameState, TerminalInputEngine inputEngine, TerminalRenderingEngine renderingEngine) { super(gameState); this.inputEngine = inputEngine; this.renderingEngine = renderingEngine; // TODO // Check the number of players if (gameState.getAllPlayerPositions().size() > 2) { throw new IllegalArgumentException(); } for (var i: gameState.getPlayerIDs()) { if (i != 0 && i != 1) { throw new IllegalArgumentException(); } } } public void run() { // TODO exitFlag = false; renderingEngine.message(StringResources.GAME_READY_MESSAGE); renderingEngine.render(this.state); renderingEngine.message(\"\"); if (state.getUndoQuota().orElse(0) != -1) { renderingEngine.message(String.format(StringResources.UNDO_QUOTA_TEMPLATE,state.getUndoQuota().orElse(0).toString())); } else { renderingEngine.message(String.format(StringResources.UNDO_QUOTA_TEMPLATE,StringResources.UNDO_QUOTA_UNLIMITED)); } while(!shouldStop()) { var actionResult = processAction(inputEngine.fetchAction()); if (actionResult instanceof ActionResult.Failed) { renderingEngine.message(((ActionResult.Failed) actionResult).getReason()); } renderingEngine.render(this.state); renderingEngine.message(\"\"); if (state.getUndoQuota().orElse(0) != -1) { renderingEngine.message(String.format(StringResources.UNDO_QUOTA_TEMPLATE,state.getUndoQuota().orElse(0).toString())); } else { renderingEngine.message(String.format(StringResources.UNDO_QUOTA_TEMPLATE,StringResources.UNDO_QUOTA_UNLIMITED)); } if (shouldStop()) { if (exitFlag) { renderingEngine.message(StringResources.GAME_EXIT_MESSAGE); } else { renderingEngine.message(StringResources.WIN_MESSAGE); } //exit(0); } } }",
        "label": "P"
    },
    "514": {
        "dataset": "COMP 3021",
        "project": "cwhoal",
        "bug_id": "41",
        "T": "void testGameWin() { final var gameState = mock(GameState.class); final var inputEngine = mock(TerminalInputEngine.class); final var renderingEngine = mock(TerminalRenderingEngine.class); when(gameState.isWin()).thenReturn(false, false, false, true); when(inputEngine.fetchAction()) .thenReturn(new InvalidInput(0, \"\")); final var game = new TerminalSokobanGame(gameState, inputEngine, renderingEngine); game.run(); verify(gameState, atLeastOnce()).isWin(); verify(renderingEngine, atLeastOnce()).message(any()); }",
        "C": "public InvalidInput(int initiator, @NotNull String message) { super(initiator); this.message = message; } public TerminalSokobanGame(GameState gameState, TerminalInputEngine inputEngine, TerminalRenderingEngine renderingEngine) { super(gameState); this.inputEngine = inputEngine; this.renderingEngine = renderingEngine; // TODO // Check the number of players if (gameState.getAllPlayerPositions().size() > 2) { throw new IllegalArgumentException(); } for (var i: gameState.getPlayerIDs()) { if (i != 0 && i != 1) { throw new IllegalArgumentException(); } } } public void run() { // TODO exitFlag = false; renderingEngine.message(StringResources.GAME_READY_MESSAGE); renderingEngine.render(this.state); renderingEngine.message(\"\"); if (state.getUndoQuota().orElse(0) != -1) { renderingEngine.message(String.format(StringResources.UNDO_QUOTA_TEMPLATE,state.getUndoQuota().orElse(0).toString())); } else { renderingEngine.message(String.format(StringResources.UNDO_QUOTA_TEMPLATE,StringResources.UNDO_QUOTA_UNLIMITED)); } while(!shouldStop()) { var actionResult = processAction(inputEngine.fetchAction()); if (actionResult instanceof ActionResult.Failed) { renderingEngine.message(((ActionResult.Failed) actionResult).getReason()); } renderingEngine.render(this.state); renderingEngine.message(\"\"); if (state.getUndoQuota().orElse(0) != -1) { renderingEngine.message(String.format(StringResources.UNDO_QUOTA_TEMPLATE,state.getUndoQuota().orElse(0).toString())); } else { renderingEngine.message(String.format(StringResources.UNDO_QUOTA_TEMPLATE,StringResources.UNDO_QUOTA_UNLIMITED)); } if (shouldStop()) { if (exitFlag) { renderingEngine.message(StringResources.GAME_EXIT_MESSAGE); } else { renderingEngine.message(StringResources.WIN_MESSAGE); } //exit(0); } } }",
        "label": "P"
    },
    "515": {
        "dataset": "COMP 3021",
        "project": "cwhoal",
        "bug_id": "42",
        "T": "void testMoreThanTwoPlayers() { final var gameState = mock(GameState.class); final var inputEngine = mock(TerminalInputEngine.class); final var renderingEngine = mock(TerminalRenderingEngine.class); when(gameState.getAllPlayerPositions()).thenReturn(new HashSet<>(Arrays.asList(Position.of(1, 1), Position.of(1, 2), Position.of(1, 3)))); }",
        "C": "public static @NotNull Position of(int x, int y) { return new Position(x, y); }",
        "label": "P"
    },
    "516": {
        "dataset": "COMP 3021",
        "project": "mchon",
        "bug_id": "0",
        "T": "void moveUp() { Position.of(233, 232), new Move.Up(-1).nextPosition(pos) ); }",
        "C": "public static @NotNull Position of(int x, int y) { return new Position(x, y); } public Up(int initiator) { super(initiator); }",
        "label": "P"
    },
    "517": {
        "dataset": "COMP 3021",
        "project": "mchon",
        "bug_id": "1",
        "T": "void moveDown() { Position.of(233, 234), new Move.Down(-1).nextPosition(pos) ); }",
        "C": "public static @NotNull Position of(int x, int y) { return new Position(x, y); } public Down(int initiator) { super(initiator); }",
        "label": "P"
    },
    "518": {
        "dataset": "COMP 3021",
        "project": "mchon",
        "bug_id": "2",
        "T": "void moveRight() { Position.of(234, 233), new Move.Right(-1).nextPosition(pos) ); }",
        "C": "public static @NotNull Position of(int x, int y) { return new Position(x, y); } public Right(int initiator) { super(initiator); }",
        "label": "P"
    },
    "519": {
        "dataset": "COMP 3021",
        "project": "mchon",
        "bug_id": "3",
        "T": "void testExceedingUndoQuota() { final var gameState = mock(GameState.class); when(gameState.getPlayerPositionById(anyInt())).thenReturn(Position.of(0, 0)); when(gameState.getUndoQuota()).thenReturn(Optional.of(0)); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Undo(0)); }",
        "C": "public Undo(int initiator) { super(initiator); }",
        "label": "P"
    },
    "520": {
        "dataset": "COMP 3021",
        "project": "mchon",
        "bug_id": "4",
        "T": "void testExit() { final var gameState = mock(GameState.class); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Exit(0)); }",
        "C": "public Exit(int initiator) { super(initiator); }",
        "label": "P"
    },
    "521": {
        "dataset": "COMP 3021",
        "project": "mchon",
        "bug_id": "5",
        "T": "void testUndoUnlimited() { final var gameState = mock(GameState.class); when(gameState.getPlayerPositionById(anyInt())).thenReturn(Position.of(0, 0)); when(gameState.getUndoQuota()).thenReturn(Optional.empty()); final var game = new SokobanGameForTesting(gameState); for (int i = 0; i < 10000; i++) { final var result = game.feedActionForProcessing(new Undo(0)); } verify(gameState, times(10000)).undo(); }",
        "C": "public TerminalRenderingEngine(PrintStream outputSteam) { this.outputSteam = outputSteam; } public Undo(int initiator) { super(initiator); }",
        "label": "P"
    },
    "522": {
        "dataset": "COMP 3021",
        "project": "mchon",
        "bug_id": "6",
        "T": "void testPushOtherPlayerBox() { String mapText = \"\"\" 233 ###### #AB.@# #b.a.# #@...# ###### \"\"\"; final var testMap = TestHelper.parseGameMap(mapText); final var gameState = spy(new GameState(testMap)); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Move.Down(0)); verify(gameState, never()).move(any(), any()); }",
        "C": "public GameState(@NotNull GameMap map) { // TOD this.maxwidth = map.getMaxWidth(); this.maxheight =map.getMaxHeight(); this.destinations = map.getDestinations(); this.walls = map.getWalls(); this.emptys = map.getEmptys(); this.boxsloc = map.getBoxsloc(); this.playersloc = map.getPlayersloc(); this.boxs = map.getBoxs(); this.players = map.getPlayers(); this.undolimit = map.getUndoLimit().orElse(0); drawGamestate(); //throw new NotImplementedException(); } public Down(int initiator) { super(initiator); }",
        "label": "P"
    },
    "523": {
        "dataset": "COMP 3021",
        "project": "mchon",
        "bug_id": "7",
        "T": "void testMoveNonExistingPlayer() { String mapText = \"\"\" 233 ###### #A..@# #a...# ##...# ###### \"\"\"; final var testMap = TestHelper.parseGameMap(mapText); final var gameState = spy(new GameState(testMap)); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Move.Down(23)); }",
        "C": "public GameState(@NotNull GameMap map) { // TOD this.maxwidth = map.getMaxWidth(); this.maxheight =map.getMaxHeight(); this.destinations = map.getDestinations(); this.walls = map.getWalls(); this.emptys = map.getEmptys(); this.boxsloc = map.getBoxsloc(); this.playersloc = map.getPlayersloc(); this.boxs = map.getBoxs(); this.players = map.getPlayers(); this.undolimit = map.getUndoLimit().orElse(0); drawGamestate(); //throw new NotImplementedException(); } public Down(int initiator) { super(initiator); }",
        "label": "F"
    },
    "524": {
        "dataset": "COMP 3021",
        "project": "mchon",
        "bug_id": "8",
        "T": "void testCheckpointWhenNeed() { final var gameState = spy(new GameState(TestHelper.parseGameMap(\"\"\" 233 ###### #.Aa@# #..a@# ###### \"\"\" ))); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Move.Right(0)); verify(gameState, times(1)).checkpoint(); }",
        "C": "public GameState(@NotNull GameMap map) { // TOD this.maxwidth = map.getMaxWidth(); this.maxheight =map.getMaxHeight(); this.destinations = map.getDestinations(); this.walls = map.getWalls(); this.emptys = map.getEmptys(); this.boxsloc = map.getBoxsloc(); this.playersloc = map.getPlayersloc(); this.boxs = map.getBoxs(); this.players = map.getPlayers(); this.undolimit = map.getUndoLimit().orElse(0); drawGamestate(); //throw new NotImplementedException(); } public Right(int initiator) { super(initiator); }",
        "label": "P"
    },
    "525": {
        "dataset": "COMP 3021",
        "project": "mchon",
        "bug_id": "9",
        "T": "void testPushBoxAgainstWall() { String mapText = \"\"\" 233 ###### #A..@# #a...# ##...# ###### \"\"\"; final var testMap = TestHelper.parseGameMap(mapText); final var gameState = spy(new GameState(testMap)); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Move.Down(0)); verify(gameState, never()).move(any(), any()); }",
        "C": "public GameState(@NotNull GameMap map) { // TOD this.maxwidth = map.getMaxWidth(); this.maxheight =map.getMaxHeight(); this.destinations = map.getDestinations(); this.walls = map.getWalls(); this.emptys = map.getEmptys(); this.boxsloc = map.getBoxsloc(); this.playersloc = map.getPlayersloc(); this.boxs = map.getBoxs(); this.players = map.getPlayers(); this.undolimit = map.getUndoLimit().orElse(0); drawGamestate(); //throw new NotImplementedException(); } public Down(int initiator) { super(initiator); }",
        "label": "P"
    },
    "526": {
        "dataset": "COMP 3021",
        "project": "mchon",
        "bug_id": "10",
        "T": "void testCheckpointWhenNotNeed() { final var gameState = spy(new GameState(TestHelper.parseGameMap(\"\"\" 233 ###### #A.a@# #..a@# ###### \"\"\" ))); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Move.Right(0)); verify(gameState, never()).checkpoint(); } private static class SokobanGameForTesting extends AbstractSokobanGame { protected SokobanGameForTesting(GameState gameState) { super(gameState); } @Override public void run() { } public ActionResult feedActionForProcessing(Action action) { return processAction(action); } }",
        "C": "public GameState(@NotNull GameMap map) { // TOD this.maxwidth = map.getMaxWidth(); this.maxheight =map.getMaxHeight(); this.destinations = map.getDestinations(); this.walls = map.getWalls(); this.emptys = map.getEmptys(); this.boxsloc = map.getBoxsloc(); this.playersloc = map.getPlayersloc(); this.boxs = map.getBoxs(); this.players = map.getPlayers(); this.undolimit = map.getUndoLimit().orElse(0); drawGamestate(); //throw new NotImplementedException(); } public Right(int initiator) { super(initiator); } public void run() { // TOD renderingEngine.message(\"Sokoban game is ready.\"); while (!shouldStop()) { renderingEngine.render(super.state); renderingEngine.message(\"\"); if (super.state.getUndoQuota().isPresent()) renderingEngine.message(\"Undo Quata: \" + super.state.getUndoQuota().get().toString()); else renderingEngine.message(\"Unlimited\"); Action inputaction = inputEngine.fetchAction(); ActionResult inputresult = processAction(inputaction); renderingEngine.message(\"\"); if (inputresult instanceof ActionResult.Failed) renderingEngine.message(((ActionResult.Failed) inputresult).getReason()); } renderingEngine.render(super.state); renderingEngine.message(\"\"); renderingEngine.message(\"Game exits.\"); if (!(super.a instanceof Exit)) { renderingEngine.message(\"You win.\"); } //throw new NotImplementedException(); } protected ActionResult processAction(@NotNull Action action) { // TOD Position playerTolocation = new Position(0,0); Position boxTolocation = new Position(0,0); Position playnowlocation = state.getPlayerPositionById(action.getInitiator()); if (action instanceof Exit) { a = action; return new ActionResult.Success(action); } if (action instanceof Undo) { if (state.getUndoQuota().isPresent()) { if (state.getUndoQuota().get() == 0) return new ActionResult.Failed(action, \"You have run out of your undo quota.\"); } state.undo(); return new ActionResult.Success(action); } if (action instanceof InvalidInput) { //System.out.println(((InvalidInput) action).getMessage()); return new ActionResult.Failed(action, ((InvalidInput) action).getMessage()); } if (action instanceof Move.Down) { playerTolocation = Position.of(playnowlocation.x(), playnowlocation.y()+1); boxTolocation = Position.of(playnowlocation.x(), playnowlocation.y()+2); } if (action instanceof Move.Left) { playerTolocation = Position.of(playnowlocation.x()-1, playnowlocation.y()); boxTolocation = Position.of(playnowlocation.x()-2, playnowlocation.y()); } if (action instanceof Move.Right) { playerTolocation = Position.of(playnowlocation.x()+1, playnowlocation.y()); boxTolocation = Position.of(playnowlocation.x()+2, playnowlocation.y()); } if (action instanceof Move.Up) { playerTolocation = Position.of(playnowlocation.x(), playnowlocation.y()-1); boxTolocation = Position.of(playnowlocation.x(), playnowlocation.y()-2); } if (state.getEntity(playerTolocation)instanceof Empty) { state.move(playnowlocation,playerTolocation); return new ActionResult.Success(action); } if (state.getEntity(playerTolocation)instanceof Wall) { return new ActionResult.Failed(action,\"You hit a wall.\"); } if (state.getEntity(playerTolocation)instanceof Player) { return new ActionResult.Failed(action,\"You hit another player.\"); } //playerTolocation entity must be a box if (((Box) state.getEntity(playerTolocation)).getPlayerId()!=action.getInitiator()) return new ActionResult.Failed(action,\"You cannot move other players' boxes.\"); if (state.getEntity(boxTolocation)instanceof Empty) { state.move(playerTolocation,boxTolocation); state.move(playnowlocation,playerTolocation); state.checkpoint(); return new ActionResult.Success(action); } return new ActionResult.Failed(action,\"Failed to push the box.\"); //throw new NotImplementedException(); }",
        "label": "P"
    },
    "527": {
        "dataset": "COMP 3021",
        "project": "mchon",
        "bug_id": "11",
        "T": "void testHitAnotherPlayer() { String mapText = \"\"\" 233 ###### #A..@# #B...# #ab.@# ###### \"\"\"; final var testMap = TestHelper.parseGameMap(mapText); final var gameState = spy(new GameState(testMap)); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Move.Down(0)); verify(gameState, never()).move(any(), any()); }",
        "C": "public GameState(@NotNull GameMap map) { // TOD this.maxwidth = map.getMaxWidth(); this.maxheight =map.getMaxHeight(); this.destinations = map.getDestinations(); this.walls = map.getWalls(); this.emptys = map.getEmptys(); this.boxsloc = map.getBoxsloc(); this.playersloc = map.getPlayersloc(); this.boxs = map.getBoxs(); this.players = map.getPlayers(); this.undolimit = map.getUndoLimit().orElse(0); drawGamestate(); //throw new NotImplementedException(); } public Down(int initiator) { super(initiator); }",
        "label": "P"
    },
    "528": {
        "dataset": "COMP 3021",
        "project": "mchon",
        "bug_id": "12",
        "T": "void testUndoWithinQuota() { final var gameState = mock(GameState.class); when(gameState.getPlayerPositionById(anyInt())).thenReturn(Position.of(0, 0)); when(gameState.getUndoQuota()).thenReturn(Optional.of(1)); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Undo(0)); verify(gameState, times(1)).undo(); }",
        "C": "public Undo(int initiator) { super(initiator); }",
        "label": "P"
    },
    "529": {
        "dataset": "COMP 3021",
        "project": "mchon",
        "bug_id": "13",
        "T": "void testInvalidInput() { final var game = new SokobanGameForTesting(mock(GameState.class)); final var message = String.valueOf(new Random().nextLong()); final var action = new InvalidInput(-1, message); final var result = game.feedActionForProcessing(action); }",
        "C": "public InvalidInput(int initiator, @NotNull String message) { super(initiator); this.message = message; }",
        "label": "P"
    },
    "530": {
        "dataset": "COMP 3021",
        "project": "mchon",
        "bug_id": "14",
        "T": "void testUndoLimitParsing() { final var gameMap = TestHelper.parseGameMap(rectangularMap); }",
        "C": "",
        "label": "P"
    },
    "531": {
        "dataset": "COMP 3021",
        "project": "mchon",
        "bug_id": "15",
        "T": "void testWidthForNonRectangularMap() { final var gameMap = TestHelper.parseGameMap(nonRectangularMap); }",
        "C": "",
        "label": "P"
    },
    "532": {
        "dataset": "COMP 3021",
        "project": "mchon",
        "bug_id": "16",
        "T": "void testTwoPlayersMap() { final var twoPlayersMap = \"\"\" 233 ###### #A..@# #..B@# #....# #.a..# #..b.# ###### \"\"\"; final var gameMap = TestHelper.parseGameMap(twoPlayersMap); final var playerIds = gameMap.getPlayerIds(); final var expectedIds = new HashSet<Integer>(); expectedIds.add(0); expectedIds.add(1); }",
        "C": "public Set<Integer> getPlayerIds() { // TOD Set<Integer> playerIdset = new HashSet<Integer>(); players.forEach(n -> playerIdset.add(n.getId())); return playerIdset; //throw new NotImplementedException(); }",
        "label": "P"
    },
    "533": {
        "dataset": "COMP 3021",
        "project": "mchon",
        "bug_id": "17",
        "T": "void testMapWithoutPlayer() { final var invalidMap = \"\"\" 233 ### #.# ### \"\"\"; } // @Tag(TestKind.HIDDEN) // @Test // void testUnmatchedPlayersAndBoxes() { // final var invalidMap = \"\"\" // 233 // ###### // #A..@# // #...@# // #a.b@# // #.a.@# // #..a.# // ###### // \"\"\"; // assertThrowsExactly(IllegalArgumentException.class, () -> TestHelper.parseGameMap(invalidMap)); // }",
        "C": "public TerminalRenderingEngine(PrintStream outputSteam) { this.outputSteam = outputSteam; }",
        "label": "F"
    },
    "534": {
        "dataset": "COMP 3021",
        "project": "mchon",
        "bug_id": "18",
        "T": "void testManyPlayersMap() { final var manyPlayersMap = \"\"\" 233 ###### #A.P@@# #vCB@@# #.cpD@# #Ga.d@# #g.bV@# ###### \"\"\"; final var gameMap = TestHelper.parseGameMap(manyPlayersMap); final var playerIds = gameMap.getPlayerIds(); final var expectedIds = new HashSet<>(Arrays.asList( 0, 'P' - 'A', 'C' - 'A', 'B' - 'A', 'D' - 'A', 'G' - 'A', 'V' - 'A' )); }",
        "C": "public Set<Integer> getPlayerIds() { // TOD Set<Integer> playerIdset = new HashSet<Integer>(); players.forEach(n -> playerIdset.add(n.getId())); return playerIdset; //throw new NotImplementedException(); }",
        "label": "P"
    },
    "535": {
        "dataset": "COMP 3021",
        "project": "mchon",
        "bug_id": "19",
        "T": "void testHeightForNonRectangularMap() { final var gameMap = TestHelper.parseGameMap(nonRectangularMap); }",
        "C": "",
        "label": "P"
    },
    "536": {
        "dataset": "COMP 3021",
        "project": "mchon",
        "bug_id": "20",
        "T": "void testDuplicatedPlayers() { final var invalidMap = \"\"\" 233 ###### #A..@# #..A@# #....# #.a..# #..b.# ###### \"\"\"; }",
        "C": "",
        "label": "P"
    },
    "537": {
        "dataset": "COMP 3021",
        "project": "mchon",
        "bug_id": "21",
        "T": "void testParseMapWithoutUndoLimit() { final var invalidMap = String.join(\"\\n\", rectangularMap.lines().skip(1).toList()); }",
        "C": "",
        "label": "P"
    },
    "538": {
        "dataset": "COMP 3021",
        "project": "mchon",
        "bug_id": "22",
        "T": "void testInsufficientDestinations() { final var invalidMap = \"\"\" 233 ###### #A..@# #...@# #a...# #.a..# #..a.# ###### \"\"\"; }",
        "C": "",
        "label": "F"
    },
    "539": {
        "dataset": "COMP 3021",
        "project": "mchon",
        "bug_id": "23",
        "T": "void testSuperLargeMap() { try { new GameMap(Integer.MAX_VALUE, Integer.MAX_VALUE, Collections.emptySet(), 0); } catch (OutOfMemoryError e) { throw new RuntimeException(e); } }); }",
        "C": "public GameMap(int maxWidth, int maxHeight, Set<Position> destinations, int undoLimit) { // TOD this.maxwidth = maxWidth; this.maxheight = maxHeight; this.destinations = destinations; this.undolimit = undoLimit; //drawmap(); //throw new NotImplementedException(); } public TerminalRenderingEngine(PrintStream outputSteam) { this.outputSteam = outputSteam; }",
        "label": "P"
    },
    "540": {
        "dataset": "COMP 3021",
        "project": "mchon",
        "bug_id": "24",
        "T": "void testInvalidUndoLimit() { final var invalidMap = \"\"\" -233 ###### #A..@# #...@# #a.b@# #.a.@# #..a.# ###### \"\"\"; }",
        "C": "",
        "label": "P"
    },
    "541": {
        "dataset": "COMP 3021",
        "project": "mchon",
        "bug_id": "25",
        "T": "void testEmptyMap() { final var invalidMap = \"\"; }",
        "C": "",
        "label": "P"
    },
    "542": {
        "dataset": "COMP 3021",
        "project": "mchon",
        "bug_id": "26",
        "T": "void testMove(String input, String name, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); } private InputStream fixValueStream(String content) { final var bytes = content.getBytes(StandardCharsets.UTF_8); return new ByteArrayInputStream(bytes); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine(); // TOD inputLine.toLowerCase(); if (inputLine.equals(\"exit\")) return new Exit(0); if (inputLine.equals(\"u\")) return new Undo(0); if (inputLine.equals(\"s\")) return new Move.Down(GameMap.playersId.get(0)); if (inputLine.equals(\"a\")) return new Move.Left(GameMap.playersId.get(0)); if (inputLine.equals(\"d\")) return new Move.Right(GameMap.playersId.get(0)); if (inputLine.equals(\"w\")) return new Move.Up(GameMap.playersId.get(0)); if (GameMap.playersId.size()<2) { if (inputLine.equals(\"h\")) return new InvalidInput(0,\"Player not found.\"); if (inputLine.equals(\"j\")) return new InvalidInput(0,\"Player not found.\"); if (inputLine.equals(\"k\")) return new InvalidInput(0,\"Player not found.\"); if (inputLine.equals(\"l\")) return new InvalidInput(0,\"Player not found.\"); } if (inputLine.equals(\"h\")) return new Move.Left(GameMap.playersId.get(1)); if (inputLine.equals(\"j\")) return new Move.Down(GameMap.playersId.get(1)); if (inputLine.equals(\"k\")) return new Move.Up(GameMap.playersId.get(1)); if (inputLine.equals(\"l\")) return new Move.Right(GameMap.playersId.get(1)); return new InvalidInput(0,\"Invalid Input.\"); //throw new NotImplementedException(); }",
        "label": "P"
    },
    "543": {
        "dataset": "COMP 3021",
        "project": "mchon",
        "bug_id": "27",
        "T": "void testMove(String input, String name, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); } private InputStream fixValueStream(String content) { final var bytes = content.getBytes(StandardCharsets.UTF_8); return new ByteArrayInputStream(bytes); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine(); // TOD inputLine.toLowerCase(); if (inputLine.equals(\"exit\")) return new Exit(0); if (inputLine.equals(\"u\")) return new Undo(0); if (inputLine.equals(\"s\")) return new Move.Down(GameMap.playersId.get(0)); if (inputLine.equals(\"a\")) return new Move.Left(GameMap.playersId.get(0)); if (inputLine.equals(\"d\")) return new Move.Right(GameMap.playersId.get(0)); if (inputLine.equals(\"w\")) return new Move.Up(GameMap.playersId.get(0)); if (GameMap.playersId.size()<2) { if (inputLine.equals(\"h\")) return new InvalidInput(0,\"Player not found.\"); if (inputLine.equals(\"j\")) return new InvalidInput(0,\"Player not found.\"); if (inputLine.equals(\"k\")) return new InvalidInput(0,\"Player not found.\"); if (inputLine.equals(\"l\")) return new InvalidInput(0,\"Player not found.\"); } if (inputLine.equals(\"h\")) return new Move.Left(GameMap.playersId.get(1)); if (inputLine.equals(\"j\")) return new Move.Down(GameMap.playersId.get(1)); if (inputLine.equals(\"k\")) return new Move.Up(GameMap.playersId.get(1)); if (inputLine.equals(\"l\")) return new Move.Right(GameMap.playersId.get(1)); return new InvalidInput(0,\"Invalid Input.\"); //throw new NotImplementedException(); }",
        "label": "P"
    },
    "544": {
        "dataset": "COMP 3021",
        "project": "mchon",
        "bug_id": "28",
        "T": "void testMove(String input, String name, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); } private InputStream fixValueStream(String content) { final var bytes = content.getBytes(StandardCharsets.UTF_8); return new ByteArrayInputStream(bytes); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine(); // TOD inputLine.toLowerCase(); if (inputLine.equals(\"exit\")) return new Exit(0); if (inputLine.equals(\"u\")) return new Undo(0); if (inputLine.equals(\"s\")) return new Move.Down(GameMap.playersId.get(0)); if (inputLine.equals(\"a\")) return new Move.Left(GameMap.playersId.get(0)); if (inputLine.equals(\"d\")) return new Move.Right(GameMap.playersId.get(0)); if (inputLine.equals(\"w\")) return new Move.Up(GameMap.playersId.get(0)); if (GameMap.playersId.size()<2) { if (inputLine.equals(\"h\")) return new InvalidInput(0,\"Player not found.\"); if (inputLine.equals(\"j\")) return new InvalidInput(0,\"Player not found.\"); if (inputLine.equals(\"k\")) return new InvalidInput(0,\"Player not found.\"); if (inputLine.equals(\"l\")) return new InvalidInput(0,\"Player not found.\"); } if (inputLine.equals(\"h\")) return new Move.Left(GameMap.playersId.get(1)); if (inputLine.equals(\"j\")) return new Move.Down(GameMap.playersId.get(1)); if (inputLine.equals(\"k\")) return new Move.Up(GameMap.playersId.get(1)); if (inputLine.equals(\"l\")) return new Move.Right(GameMap.playersId.get(1)); return new InvalidInput(0,\"Invalid Input.\"); //throw new NotImplementedException(); }",
        "label": "P"
    },
    "545": {
        "dataset": "COMP 3021",
        "project": "mchon",
        "bug_id": "29",
        "T": "void testMove(String input, String name, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); } private InputStream fixValueStream(String content) { final var bytes = content.getBytes(StandardCharsets.UTF_8); return new ByteArrayInputStream(bytes); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine(); // TOD inputLine.toLowerCase(); if (inputLine.equals(\"exit\")) return new Exit(0); if (inputLine.equals(\"u\")) return new Undo(0); if (inputLine.equals(\"s\")) return new Move.Down(GameMap.playersId.get(0)); if (inputLine.equals(\"a\")) return new Move.Left(GameMap.playersId.get(0)); if (inputLine.equals(\"d\")) return new Move.Right(GameMap.playersId.get(0)); if (inputLine.equals(\"w\")) return new Move.Up(GameMap.playersId.get(0)); if (GameMap.playersId.size()<2) { if (inputLine.equals(\"h\")) return new InvalidInput(0,\"Player not found.\"); if (inputLine.equals(\"j\")) return new InvalidInput(0,\"Player not found.\"); if (inputLine.equals(\"k\")) return new InvalidInput(0,\"Player not found.\"); if (inputLine.equals(\"l\")) return new InvalidInput(0,\"Player not found.\"); } if (inputLine.equals(\"h\")) return new Move.Left(GameMap.playersId.get(1)); if (inputLine.equals(\"j\")) return new Move.Down(GameMap.playersId.get(1)); if (inputLine.equals(\"k\")) return new Move.Up(GameMap.playersId.get(1)); if (inputLine.equals(\"l\")) return new Move.Right(GameMap.playersId.get(1)); return new InvalidInput(0,\"Invalid Input.\"); //throw new NotImplementedException(); }",
        "label": "P"
    },
    "546": {
        "dataset": "COMP 3021",
        "project": "mchon",
        "bug_id": "30",
        "T": "void testMove(String input, String name, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); } private InputStream fixValueStream(String content) { final var bytes = content.getBytes(StandardCharsets.UTF_8); return new ByteArrayInputStream(bytes); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine(); // TOD inputLine.toLowerCase(); if (inputLine.equals(\"exit\")) return new Exit(0); if (inputLine.equals(\"u\")) return new Undo(0); if (inputLine.equals(\"s\")) return new Move.Down(GameMap.playersId.get(0)); if (inputLine.equals(\"a\")) return new Move.Left(GameMap.playersId.get(0)); if (inputLine.equals(\"d\")) return new Move.Right(GameMap.playersId.get(0)); if (inputLine.equals(\"w\")) return new Move.Up(GameMap.playersId.get(0)); if (GameMap.playersId.size()<2) { if (inputLine.equals(\"h\")) return new InvalidInput(0,\"Player not found.\"); if (inputLine.equals(\"j\")) return new InvalidInput(0,\"Player not found.\"); if (inputLine.equals(\"k\")) return new InvalidInput(0,\"Player not found.\"); if (inputLine.equals(\"l\")) return new InvalidInput(0,\"Player not found.\"); } if (inputLine.equals(\"h\")) return new Move.Left(GameMap.playersId.get(1)); if (inputLine.equals(\"j\")) return new Move.Down(GameMap.playersId.get(1)); if (inputLine.equals(\"k\")) return new Move.Up(GameMap.playersId.get(1)); if (inputLine.equals(\"l\")) return new Move.Right(GameMap.playersId.get(1)); return new InvalidInput(0,\"Invalid Input.\"); //throw new NotImplementedException(); }",
        "label": "F"
    },
    "547": {
        "dataset": "COMP 3021",
        "project": "mchon",
        "bug_id": "31",
        "T": "void testMove(String input, String name, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); } private InputStream fixValueStream(String content) { final var bytes = content.getBytes(StandardCharsets.UTF_8); return new ByteArrayInputStream(bytes); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine(); // TOD inputLine.toLowerCase(); if (inputLine.equals(\"exit\")) return new Exit(0); if (inputLine.equals(\"u\")) return new Undo(0); if (inputLine.equals(\"s\")) return new Move.Down(GameMap.playersId.get(0)); if (inputLine.equals(\"a\")) return new Move.Left(GameMap.playersId.get(0)); if (inputLine.equals(\"d\")) return new Move.Right(GameMap.playersId.get(0)); if (inputLine.equals(\"w\")) return new Move.Up(GameMap.playersId.get(0)); if (GameMap.playersId.size()<2) { if (inputLine.equals(\"h\")) return new InvalidInput(0,\"Player not found.\"); if (inputLine.equals(\"j\")) return new InvalidInput(0,\"Player not found.\"); if (inputLine.equals(\"k\")) return new InvalidInput(0,\"Player not found.\"); if (inputLine.equals(\"l\")) return new InvalidInput(0,\"Player not found.\"); } if (inputLine.equals(\"h\")) return new Move.Left(GameMap.playersId.get(1)); if (inputLine.equals(\"j\")) return new Move.Down(GameMap.playersId.get(1)); if (inputLine.equals(\"k\")) return new Move.Up(GameMap.playersId.get(1)); if (inputLine.equals(\"l\")) return new Move.Right(GameMap.playersId.get(1)); return new InvalidInput(0,\"Invalid Input.\"); //throw new NotImplementedException(); }",
        "label": "F"
    },
    "548": {
        "dataset": "COMP 3021",
        "project": "mchon",
        "bug_id": "32",
        "T": "void testMove(String input, String name, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); } private InputStream fixValueStream(String content) { final var bytes = content.getBytes(StandardCharsets.UTF_8); return new ByteArrayInputStream(bytes); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine(); // TOD inputLine.toLowerCase(); if (inputLine.equals(\"exit\")) return new Exit(0); if (inputLine.equals(\"u\")) return new Undo(0); if (inputLine.equals(\"s\")) return new Move.Down(GameMap.playersId.get(0)); if (inputLine.equals(\"a\")) return new Move.Left(GameMap.playersId.get(0)); if (inputLine.equals(\"d\")) return new Move.Right(GameMap.playersId.get(0)); if (inputLine.equals(\"w\")) return new Move.Up(GameMap.playersId.get(0)); if (GameMap.playersId.size()<2) { if (inputLine.equals(\"h\")) return new InvalidInput(0,\"Player not found.\"); if (inputLine.equals(\"j\")) return new InvalidInput(0,\"Player not found.\"); if (inputLine.equals(\"k\")) return new InvalidInput(0,\"Player not found.\"); if (inputLine.equals(\"l\")) return new InvalidInput(0,\"Player not found.\"); } if (inputLine.equals(\"h\")) return new Move.Left(GameMap.playersId.get(1)); if (inputLine.equals(\"j\")) return new Move.Down(GameMap.playersId.get(1)); if (inputLine.equals(\"k\")) return new Move.Up(GameMap.playersId.get(1)); if (inputLine.equals(\"l\")) return new Move.Right(GameMap.playersId.get(1)); return new InvalidInput(0,\"Invalid Input.\"); //throw new NotImplementedException(); }",
        "label": "F"
    },
    "549": {
        "dataset": "COMP 3021",
        "project": "mchon",
        "bug_id": "33",
        "T": "void testMove(String input, String name, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); } private InputStream fixValueStream(String content) { final var bytes = content.getBytes(StandardCharsets.UTF_8); return new ByteArrayInputStream(bytes); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine(); // TOD inputLine.toLowerCase(); if (inputLine.equals(\"exit\")) return new Exit(0); if (inputLine.equals(\"u\")) return new Undo(0); if (inputLine.equals(\"s\")) return new Move.Down(GameMap.playersId.get(0)); if (inputLine.equals(\"a\")) return new Move.Left(GameMap.playersId.get(0)); if (inputLine.equals(\"d\")) return new Move.Right(GameMap.playersId.get(0)); if (inputLine.equals(\"w\")) return new Move.Up(GameMap.playersId.get(0)); if (GameMap.playersId.size()<2) { if (inputLine.equals(\"h\")) return new InvalidInput(0,\"Player not found.\"); if (inputLine.equals(\"j\")) return new InvalidInput(0,\"Player not found.\"); if (inputLine.equals(\"k\")) return new InvalidInput(0,\"Player not found.\"); if (inputLine.equals(\"l\")) return new InvalidInput(0,\"Player not found.\"); } if (inputLine.equals(\"h\")) return new Move.Left(GameMap.playersId.get(1)); if (inputLine.equals(\"j\")) return new Move.Down(GameMap.playersId.get(1)); if (inputLine.equals(\"k\")) return new Move.Up(GameMap.playersId.get(1)); if (inputLine.equals(\"l\")) return new Move.Right(GameMap.playersId.get(1)); return new InvalidInput(0,\"Invalid Input.\"); //throw new NotImplementedException(); }",
        "label": "F"
    },
    "550": {
        "dataset": "COMP 3021",
        "project": "mchon",
        "bug_id": "34",
        "T": "void testUndo(String input, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine(); // TOD inputLine.toLowerCase(); if (inputLine.equals(\"exit\")) return new Exit(0); if (inputLine.equals(\"u\")) return new Undo(0); if (inputLine.equals(\"s\")) return new Move.Down(GameMap.playersId.get(0)); if (inputLine.equals(\"a\")) return new Move.Left(GameMap.playersId.get(0)); if (inputLine.equals(\"d\")) return new Move.Right(GameMap.playersId.get(0)); if (inputLine.equals(\"w\")) return new Move.Up(GameMap.playersId.get(0)); if (GameMap.playersId.size()<2) { if (inputLine.equals(\"h\")) return new InvalidInput(0,\"Player not found.\"); if (inputLine.equals(\"j\")) return new InvalidInput(0,\"Player not found.\"); if (inputLine.equals(\"k\")) return new InvalidInput(0,\"Player not found.\"); if (inputLine.equals(\"l\")) return new InvalidInput(0,\"Player not found.\"); } if (inputLine.equals(\"h\")) return new Move.Left(GameMap.playersId.get(1)); if (inputLine.equals(\"j\")) return new Move.Down(GameMap.playersId.get(1)); if (inputLine.equals(\"k\")) return new Move.Up(GameMap.playersId.get(1)); if (inputLine.equals(\"l\")) return new Move.Right(GameMap.playersId.get(1)); return new InvalidInput(0,\"Invalid Input.\"); //throw new NotImplementedException(); }",
        "label": "P"
    },
    "551": {
        "dataset": "COMP 3021",
        "project": "mchon",
        "bug_id": "35",
        "T": "void testInvalidInput() { final var inputStream = fixValueStream(\"blah blah\"); final var inputEngine = new TerminalInputEngine(inputStream); final var action = inputEngine.fetchAction(); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine(); // TOD inputLine.toLowerCase(); if (inputLine.equals(\"exit\")) return new Exit(0); if (inputLine.equals(\"u\")) return new Undo(0); if (inputLine.equals(\"s\")) return new Move.Down(GameMap.playersId.get(0)); if (inputLine.equals(\"a\")) return new Move.Left(GameMap.playersId.get(0)); if (inputLine.equals(\"d\")) return new Move.Right(GameMap.playersId.get(0)); if (inputLine.equals(\"w\")) return new Move.Up(GameMap.playersId.get(0)); if (GameMap.playersId.size()<2) { if (inputLine.equals(\"h\")) return new InvalidInput(0,\"Player not found.\"); if (inputLine.equals(\"j\")) return new InvalidInput(0,\"Player not found.\"); if (inputLine.equals(\"k\")) return new InvalidInput(0,\"Player not found.\"); if (inputLine.equals(\"l\")) return new InvalidInput(0,\"Player not found.\"); } if (inputLine.equals(\"h\")) return new Move.Left(GameMap.playersId.get(1)); if (inputLine.equals(\"j\")) return new Move.Down(GameMap.playersId.get(1)); if (inputLine.equals(\"k\")) return new Move.Up(GameMap.playersId.get(1)); if (inputLine.equals(\"l\")) return new Move.Right(GameMap.playersId.get(1)); return new InvalidInput(0,\"Invalid Input.\"); //throw new NotImplementedException(); }",
        "label": "P"
    },
    "552": {
        "dataset": "COMP 3021",
        "project": "mchon",
        "bug_id": "36",
        "T": "void testUndoWhenThereIsNoMove() { final var gameState = new GameState(TestHelper.parseGameMap(\"\"\" 233 ###### #A.a@# #..a@# ###### \"\"\" )); gameState.undo(); } private Entity generateEntity(int key) { return switch (key % 4) { case 0 -> new Box(0); case 1 -> new Empty(); case 2 -> new Player(0); case 3 -> new Wall(); default -> throw new ShouldNotReachException(); }; }",
        "C": "public GameState(@NotNull GameMap map) { // TOD this.maxwidth = map.getMaxWidth(); this.maxheight =map.getMaxHeight(); this.destinations = map.getDestinations(); this.walls = map.getWalls(); this.emptys = map.getEmptys(); this.boxsloc = map.getBoxsloc(); this.playersloc = map.getPlayersloc(); this.boxs = map.getBoxs(); this.players = map.getPlayers(); this.undolimit = map.getUndoLimit().orElse(0); drawGamestate(); //throw new NotImplementedException(); } public void undo() { // TOD if (checkpt.empty()) { for (int i = 0;i<worldgamestate.length;i++) worldgamestate[i] = GameMap.getWorld()[i]; for (int i = 0;i<worldgamestate.length;i++) { if (GameMap.getWorld()[i]instanceof Player) { for (int j=0;j<players.size();j++) { if (players.get(j).getId()==((Player) GameMap.getWorld()[i]).getId()) playersloc.set(j,Position.of(i%maxwidth,i/maxwidth)); } } } return; } else if (checkpt.size()==1) { checkpt.pop(); if (undolimit>=1) undolimit-=1; for (int i = 0;i<worldgamestate.length;i++) { if (GameMap.getWorld()[i]instanceof Player) { for (int j=0;j<players.size();j++) { if (players.get(j).getId()==((Player) GameMap.getWorld()[i]).getId()) playersloc.set(j,Position.of(i%maxwidth,i/maxwidth)); } } else if (GameMap.getWorld()[i]instanceof Box) { if (worldgamestate[i]instanceof Player) { boxsloc.set(boxIndexmoved, Position.of(i % maxwidth, i / maxwidth)); } } } for (int i = 0;i<worldgamestate.length;i++) worldgamestate[i] = GameMap.getWorld()[i]; return; } else { boolean b = true; if (b) { checkpt.pop(); Entity[] undocheckpt = checkpt.get(checkpt.size()-1); if (undolimit >= 1) undolimit -= 1; for (int i = 0; i < worldgamestate.length; i++) { if (undocheckpt[i] instanceof Player) { for (int j = 0; j < players.size(); j++) { if (players.get(j).getId() == ((Player) undocheckpt[i]).getId()) playersloc.set(j, Position.of(i % maxwidth, i / maxwidth)); } } else if (undocheckpt[i] instanceof Box) { boxsloc.set(boxIndexmoved, Position.of(i % maxwidth, i / maxwidth)); } } for (int i = 0; i < worldgamestate.length; i++) { worldgamestate[i] = undocheckpt[i]; } return; } } //throw new NotImplementedException(); } /** * Get the maximum width of the game map. * This should be the same as that in {@link GameMap} public TerminalRenderingEngine(PrintStream outputSteam) { this.outputSteam = outputSteam; } public Box(int playerId) { this.playerId = playerId; } public Player(int id) { this.id = id; } public ShouldNotReachException() { super(\"This branch should not be reached.\"); }",
        "label": "P"
    },
    "553": {
        "dataset": "COMP 3021",
        "project": "mchon",
        "bug_id": "37",
        "T": "void testGetUndoUnlimited() { final var gameState = new GameState(TestHelper.parseGameMap(\"\"\" -1 ###### #.Aa@# #..a@# ###### \"\"\" )); }",
        "C": "public GameState(@NotNull GameMap map) { // TOD this.maxwidth = map.getMaxWidth(); this.maxheight =map.getMaxHeight(); this.destinations = map.getDestinations(); this.walls = map.getWalls(); this.emptys = map.getEmptys(); this.boxsloc = map.getBoxsloc(); this.playersloc = map.getPlayersloc(); this.boxs = map.getBoxs(); this.players = map.getPlayers(); this.undolimit = map.getUndoLimit().orElse(0); drawGamestate(); //throw new NotImplementedException(); }",
        "label": "P"
    },
    "554": {
        "dataset": "COMP 3021",
        "project": "mchon",
        "bug_id": "38",
        "T": "void testMapCopying() { final var maxWidth = 2333; final var maxHeight = 2333; final var random = new Random(); final var randomEntities = Stream.generate(() -> Position.of(random.nextInt(maxWidth), random.nextInt(maxHeight))) .distinct() .limit(100) .collect(Collectors.toMap(Function.identity(), it -> generateEntity(it.x()))); final var firstPos = randomEntities.keySet().stream().findFirst(); final var gameMap = new GameMap(maxWidth, maxHeight, Collections.singleton(firstPos.get()), 233); randomEntities.forEach(gameMap::putEntity); final var gameState = new GameState(gameMap); final var randomPosition = randomEntities.keySet().stream().findAny(); gameMap.putEntity(randomPosition.get(), new Empty()); randomEntities.forEach((p, e) -> assertEquals(e, gameState.getEntity(p))); }",
        "C": "public static @NotNull Position of(int x, int y) { return new Position(x, y); } public GameMap(int maxWidth, int maxHeight, Set<Position> destinations, int undoLimit) { // TOD this.maxwidth = maxWidth; this.maxheight = maxHeight; this.destinations = destinations; this.undolimit = undoLimit; //drawmap(); //throw new NotImplementedException(); } public GameState(@NotNull GameMap map) { // TOD this.maxwidth = map.getMaxWidth(); this.maxheight =map.getMaxHeight(); this.destinations = map.getDestinations(); this.walls = map.getWalls(); this.emptys = map.getEmptys(); this.boxsloc = map.getBoxsloc(); this.playersloc = map.getPlayersloc(); this.boxs = map.getBoxs(); this.players = map.getPlayers(); this.undolimit = map.getUndoLimit().orElse(0); drawGamestate(); //throw new NotImplementedException(); } public void putEntity(Position position, Entity entity) { // TOD world[position.x()+position.y()*maxwidth] = entity; //throw new NotImplementedException(); } public @Nullable Entity getEntity(@NotNull Position position) { // TOD return worldgamestate[position.x()+position.y()*maxwidth]; //throw new NotImplementedException(); } /** * Get all box destination positions as a set in the game map. * This should be the same as that in {@link GameMap}",
        "label": "F"
    },
    "555": {
        "dataset": "COMP 3021",
        "project": "mchon",
        "bug_id": "39",
        "T": "void testUndoWhenThereIsMoveButNoCheckpoint() { final var gameState = new GameState(TestHelper.parseGameMap(\"\"\" 233 ###### #A.a@# #..a@# ###### \"\"\" )); gameState.move(Position.of(1, 1), Position.of(2, 1)); gameState.undo(); }",
        "C": "public GameState(@NotNull GameMap map) { // TOD this.maxwidth = map.getMaxWidth(); this.maxheight =map.getMaxHeight(); this.destinations = map.getDestinations(); this.walls = map.getWalls(); this.emptys = map.getEmptys(); this.boxsloc = map.getBoxsloc(); this.playersloc = map.getPlayersloc(); this.boxs = map.getBoxs(); this.players = map.getPlayers(); this.undolimit = map.getUndoLimit().orElse(0); drawGamestate(); //throw new NotImplementedException(); } public void move(Position from, Position to) { // TOD boolean bool = worldgamestate[from.x()+from.y()*maxwidth]instanceof Box; if (bool) { for (int i=0;i<boxsloc.size();i++) { if (worldgamestate[from.x()+from.y()*maxwidth].equals(boxs.get(i))) boxIndexmoved=i; } worldgamestate[to.x()+ to.y()*maxwidth] = worldgamestate[from.x()+from.y()*maxwidth]; worldgamestate[from.x()+from.y()*maxwidth] = new Empty(); for (int i = 0; i < boxsloc.size(); i++) { if (boxsloc.get(i).equals(from)) boxsloc.set(i, to); } }else { worldgamestate[to.x()+ to.y()*maxwidth] = worldgamestate[from.x()+from.y()*maxwidth]; worldgamestate[from.x()+from.y()*maxwidth] = new Empty(); for (int i = 0; i < playersloc.size(); i++) { if (playersloc.get(i).equals(from)) playersloc.set(i, to); } }//System.out.print(boxsloc); //throw new NotImplementedException(); } /** * Record a checkpoint of the game state, including: * <li>All current positions of entities in the game map.</li> * <li>Current undo quota</li> * <p> * Checkpoint is used in {@link GameState#undo()} public static @NotNull Position of(int x, int y) { return new Position(x, y); } public void undo() { // TOD if (checkpt.empty()) { for (int i = 0;i<worldgamestate.length;i++) worldgamestate[i] = GameMap.getWorld()[i]; for (int i = 0;i<worldgamestate.length;i++) { if (GameMap.getWorld()[i]instanceof Player) { for (int j=0;j<players.size();j++) { if (players.get(j).getId()==((Player) GameMap.getWorld()[i]).getId()) playersloc.set(j,Position.of(i%maxwidth,i/maxwidth)); } } } return; } else if (checkpt.size()==1) { checkpt.pop(); if (undolimit>=1) undolimit-=1; for (int i = 0;i<worldgamestate.length;i++) { if (GameMap.getWorld()[i]instanceof Player) { for (int j=0;j<players.size();j++) { if (players.get(j).getId()==((Player) GameMap.getWorld()[i]).getId()) playersloc.set(j,Position.of(i%maxwidth,i/maxwidth)); } } else if (GameMap.getWorld()[i]instanceof Box) { if (worldgamestate[i]instanceof Player) { boxsloc.set(boxIndexmoved, Position.of(i % maxwidth, i / maxwidth)); } } } for (int i = 0;i<worldgamestate.length;i++) worldgamestate[i] = GameMap.getWorld()[i]; return; } else { boolean b = true; if (b) { checkpt.pop(); Entity[] undocheckpt = checkpt.get(checkpt.size()-1); if (undolimit >= 1) undolimit -= 1; for (int i = 0; i < worldgamestate.length; i++) { if (undocheckpt[i] instanceof Player) { for (int j = 0; j < players.size(); j++) { if (players.get(j).getId() == ((Player) undocheckpt[i]).getId()) playersloc.set(j, Position.of(i % maxwidth, i / maxwidth)); } } else if (undocheckpt[i] instanceof Box) { boxsloc.set(boxIndexmoved, Position.of(i % maxwidth, i / maxwidth)); } } for (int i = 0; i < worldgamestate.length; i++) { worldgamestate[i] = undocheckpt[i]; } return; } } //throw new NotImplementedException(); } /** * Get the maximum width of the game map. * This should be the same as that in {@link GameMap}",
        "label": "P"
    },
    "556": {
        "dataset": "COMP 3021",
        "project": "mchon",
        "bug_id": "40",
        "T": "void testGameExit() { final var gameState = mock(GameState.class); final var inputEngine = mock(TerminalInputEngine.class); final var renderingEngine = mock(TerminalRenderingEngine.class); when(gameState.isWin()).thenReturn(false, false, false); when(inputEngine.fetchAction()) .thenReturn(new InvalidInput(0, \"\"), new InvalidInput(0, \"\"), new Exit(0)); final var game = new TerminalSokobanGame(gameState, inputEngine, renderingEngine); game.run(); verify(renderingEngine, atLeastOnce()).message(any()); }",
        "C": "public InvalidInput(int initiator, @NotNull String message) { super(initiator); this.message = message; } public Exit(int initiator) { super(initiator); } public TerminalSokobanGame(GameState gameState, TerminalInputEngine inputEngine, TerminalRenderingEngine renderingEngine) { super(gameState); this.inputEngine = inputEngine; this.renderingEngine = renderingEngine; // TOD if (gameState.getPlayers().size()>2) throw new IllegalArgumentException(\"TerminalSokobanGame only support at most two players.\"); // Check the number of players //throw new NotImplementedException(); } public void run() { // TOD renderingEngine.message(\"Sokoban game is ready.\"); while (!shouldStop()) { renderingEngine.render(super.state); renderingEngine.message(\"\"); if (super.state.getUndoQuota().isPresent()) renderingEngine.message(\"Undo Quata: \" + super.state.getUndoQuota().get().toString()); else renderingEngine.message(\"Unlimited\"); Action inputaction = inputEngine.fetchAction(); ActionResult inputresult = processAction(inputaction); renderingEngine.message(\"\"); if (inputresult instanceof ActionResult.Failed) renderingEngine.message(((ActionResult.Failed) inputresult).getReason()); } renderingEngine.render(super.state); renderingEngine.message(\"\"); renderingEngine.message(\"Game exits.\"); if (!(super.a instanceof Exit)) { renderingEngine.message(\"You win.\"); } //throw new NotImplementedException(); }",
        "label": "P"
    },
    "557": {
        "dataset": "COMP 3021",
        "project": "mchon",
        "bug_id": "41",
        "T": "void testGameWin() { final var gameState = mock(GameState.class); final var inputEngine = mock(TerminalInputEngine.class); final var renderingEngine = mock(TerminalRenderingEngine.class); when(gameState.isWin()).thenReturn(false, false, false, true); when(inputEngine.fetchAction()) .thenReturn(new InvalidInput(0, \"\")); final var game = new TerminalSokobanGame(gameState, inputEngine, renderingEngine); game.run(); verify(gameState, atLeastOnce()).isWin(); verify(renderingEngine, atLeastOnce()).message(any()); }",
        "C": "public InvalidInput(int initiator, @NotNull String message) { super(initiator); this.message = message; } public TerminalSokobanGame(GameState gameState, TerminalInputEngine inputEngine, TerminalRenderingEngine renderingEngine) { super(gameState); this.inputEngine = inputEngine; this.renderingEngine = renderingEngine; // TOD if (gameState.getPlayers().size()>2) throw new IllegalArgumentException(\"TerminalSokobanGame only support at most two players.\"); // Check the number of players //throw new NotImplementedException(); } public void run() { // TOD renderingEngine.message(\"Sokoban game is ready.\"); while (!shouldStop()) { renderingEngine.render(super.state); renderingEngine.message(\"\"); if (super.state.getUndoQuota().isPresent()) renderingEngine.message(\"Undo Quata: \" + super.state.getUndoQuota().get().toString()); else renderingEngine.message(\"Unlimited\"); Action inputaction = inputEngine.fetchAction(); ActionResult inputresult = processAction(inputaction); renderingEngine.message(\"\"); if (inputresult instanceof ActionResult.Failed) renderingEngine.message(((ActionResult.Failed) inputresult).getReason()); } renderingEngine.render(super.state); renderingEngine.message(\"\"); renderingEngine.message(\"Game exits.\"); if (!(super.a instanceof Exit)) { renderingEngine.message(\"You win.\"); } //throw new NotImplementedException(); }",
        "label": "P"
    },
    "558": {
        "dataset": "COMP 3021",
        "project": "mchon",
        "bug_id": "42",
        "T": "void testMoreThanTwoPlayers() { final var gameState = mock(GameState.class); final var inputEngine = mock(TerminalInputEngine.class); final var renderingEngine = mock(TerminalRenderingEngine.class); when(gameState.getAllPlayerPositions()).thenReturn(new HashSet<>(Arrays.asList(Position.of(1, 1), Position.of(1, 2), Position.of(1, 3)))); }",
        "C": "public static @NotNull Position of(int x, int y) { return new Position(x, y); }",
        "label": "F"
    },
    "559": {
        "dataset": "COMP 3021",
        "project": "jzhanggc",
        "bug_id": "0",
        "T": "void moveUp() { Position.of(233, 232), new Move.Up(-1).nextPosition(pos) ); }",
        "C": "public static @NotNull Position of(int x, int y) { return new Position(x, y); } public Up(int initiator) { super(initiator); }",
        "label": "P"
    },
    "560": {
        "dataset": "COMP 3021",
        "project": "jzhanggc",
        "bug_id": "1",
        "T": "void moveDown() { Position.of(233, 234), new Move.Down(-1).nextPosition(pos) ); }",
        "C": "public static @NotNull Position of(int x, int y) { return new Position(x, y); } public Down(int initiator) { super(initiator); }",
        "label": "P"
    },
    "561": {
        "dataset": "COMP 3021",
        "project": "jzhanggc",
        "bug_id": "2",
        "T": "void moveRight() { Position.of(234, 233), new Move.Right(-1).nextPosition(pos) ); }",
        "C": "public static @NotNull Position of(int x, int y) { return new Position(x, y); } public Right(int initiator) { super(initiator); }",
        "label": "P"
    },
    "562": {
        "dataset": "COMP 3021",
        "project": "jzhanggc",
        "bug_id": "3",
        "T": "void testExceedingUndoQuota() { final var gameState = mock(GameState.class); when(gameState.getPlayerPositionById(anyInt())).thenReturn(Position.of(0, 0)); when(gameState.getUndoQuota()).thenReturn(Optional.of(0)); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Undo(0)); }",
        "C": "public Undo(int initiator) { super(initiator); }",
        "label": "P"
    },
    "563": {
        "dataset": "COMP 3021",
        "project": "jzhanggc",
        "bug_id": "4",
        "T": "void testExit() { final var gameState = mock(GameState.class); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Exit(0)); }",
        "C": "public Exit(int initiator) { super(initiator); }",
        "label": "P"
    },
    "564": {
        "dataset": "COMP 3021",
        "project": "jzhanggc",
        "bug_id": "5",
        "T": "void testUndoUnlimited() { final var gameState = mock(GameState.class); when(gameState.getPlayerPositionById(anyInt())).thenReturn(Position.of(0, 0)); when(gameState.getUndoQuota()).thenReturn(Optional.empty()); final var game = new SokobanGameForTesting(gameState); for (int i = 0; i < 10000; i++) { final var result = game.feedActionForProcessing(new Undo(0)); } verify(gameState, times(10000)).undo(); }",
        "C": "public TerminalRenderingEngine(PrintStream outputSteam) { this.outputSteam = outputSteam; } public Undo(int initiator) { super(initiator); }",
        "label": "P"
    },
    "565": {
        "dataset": "COMP 3021",
        "project": "jzhanggc",
        "bug_id": "6",
        "T": "void testPushOtherPlayerBox() { String mapText = \"\"\" 233 ###### #AB.@# #b.a.# #@...# ###### \"\"\"; final var testMap = TestHelper.parseGameMap(mapText); final var gameState = spy(new GameState(testMap)); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Move.Down(0)); verify(gameState, never()).move(any(), any()); }",
        "C": "public GameState(@NotNull GameMap map) { // TODO this.gameMap = map; this.map = this.deepCopyMap(GameMap.initialMap); this.destinations = this.gameMap.destinations; this.checkPoints = new Stack(); this.undoQuota = map.undoLimit; } public Down(int initiator) { super(initiator); }",
        "label": "P"
    },
    "566": {
        "dataset": "COMP 3021",
        "project": "jzhanggc",
        "bug_id": "7",
        "T": "void testMoveNonExistingPlayer() { String mapText = \"\"\" 233 ###### #A..@# #a...# ##...# ###### \"\"\"; final var testMap = TestHelper.parseGameMap(mapText); final var gameState = spy(new GameState(testMap)); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Move.Down(23)); }",
        "C": "public GameState(@NotNull GameMap map) { // TODO this.gameMap = map; this.map = this.deepCopyMap(GameMap.initialMap); this.destinations = this.gameMap.destinations; this.checkPoints = new Stack(); this.undoQuota = map.undoLimit; } public Down(int initiator) { super(initiator); }",
        "label": "P"
    },
    "567": {
        "dataset": "COMP 3021",
        "project": "jzhanggc",
        "bug_id": "8",
        "T": "void testCheckpointWhenNeed() { final var gameState = spy(new GameState(TestHelper.parseGameMap(\"\"\" 233 ###### #.Aa@# #..a@# ###### \"\"\" ))); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Move.Right(0)); verify(gameState, times(1)).checkpoint(); }",
        "C": "public GameState(@NotNull GameMap map) { // TODO this.gameMap = map; this.map = this.deepCopyMap(GameMap.initialMap); this.destinations = this.gameMap.destinations; this.checkPoints = new Stack(); this.undoQuota = map.undoLimit; } public Right(int initiator) { super(initiator); }",
        "label": "P"
    },
    "568": {
        "dataset": "COMP 3021",
        "project": "jzhanggc",
        "bug_id": "9",
        "T": "void testPushBoxAgainstWall() { String mapText = \"\"\" 233 ###### #A..@# #a...# ##...# ###### \"\"\"; final var testMap = TestHelper.parseGameMap(mapText); final var gameState = spy(new GameState(testMap)); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Move.Down(0)); verify(gameState, never()).move(any(), any()); }",
        "C": "public GameState(@NotNull GameMap map) { // TODO this.gameMap = map; this.map = this.deepCopyMap(GameMap.initialMap); this.destinations = this.gameMap.destinations; this.checkPoints = new Stack(); this.undoQuota = map.undoLimit; } public Down(int initiator) { super(initiator); }",
        "label": "P"
    },
    "569": {
        "dataset": "COMP 3021",
        "project": "jzhanggc",
        "bug_id": "10",
        "T": "void testCheckpointWhenNotNeed() { final var gameState = spy(new GameState(TestHelper.parseGameMap(\"\"\" 233 ###### #A.a@# #..a@# ###### \"\"\" ))); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Move.Right(0)); verify(gameState, never()).checkpoint(); } private static class SokobanGameForTesting extends AbstractSokobanGame { protected SokobanGameForTesting(GameState gameState) { super(gameState); } @Override public void run() { } public ActionResult feedActionForProcessing(Action action) { return processAction(action); } }",
        "C": "public GameState(@NotNull GameMap map) { // TODO this.gameMap = map; this.map = this.deepCopyMap(GameMap.initialMap); this.destinations = this.gameMap.destinations; this.checkPoints = new Stack(); this.undoQuota = map.undoLimit; } public Right(int initiator) { super(initiator); } public void run() { // TODO this.renderingEngine.message(StringResources.GAME_READY_MESSAGE); while(!this.shouldStop()) { this.renderingEngine.render(this.state); if (this.state.getUndoQuota().isEmpty()) this.renderingEngine.message(StringResources.UNDO_QUOTA_UNLIMITED); else this.renderingEngine.message(\"Undo Quota: \" + this.state.getUndoQuota().get()); Action action = this.inputEngine.fetchAction(); ActionResult result = this.processAction(action); if (result instanceof ActionResult.Failed) { this.renderingEngine.message(((ActionResult.Failed)result).getReason()); } } this.renderingEngine.render(this.state); renderingEngine.message(StringResources.GAME_EXIT_MESSAGE); if (state.isWin()) this.renderingEngine.message(StringResources.WIN_MESSAGE); } protected ActionResult processAction(@NotNull Action action) { // TODO switch (action) { case Move m-> { Position currPos=state.getPlayerPositionById(m.getInitiator()); if (currPos==null) return new ActionResult.Failed(action, StringResources.PLAYER_NOT_FOUND); Position nextPos=m.nextPosition(currPos); Entity destinationEntity=state.getEntity(nextPos); switch (destinationEntity) { case Box b-> { if (b.getPlayerId()!=m.getInitiator()) return new ActionResult.Failed(action, \"You cannot move other player's box.\"); Position boxNextPos=m.nextPosition(nextPos); if (!(state.getEntity(boxNextPos) instanceof Empty)) return new ActionResult.Failed(action, \"Failed to push the box.\"); state.move(nextPos, boxNextPos); state.move(currPos, nextPos); state.checkpoint(); return new ActionResult.Success(action); } case Player ignored-> { return new ActionResult.Failed(action, \"You hit another player.\"); } case Wall ignored-> { return new ActionResult.Failed(action, \"You hit a wall.\"); } case Empty ignored-> { this.state.move(currPos, nextPos); return new ActionResult.Success(action); } case null -> { return new ActionResult.Failed(action, \"!!!!1/2, moving to null position!!!!\"); } } } case Undo ignored-> { if (!this.state.getUndoQuota().isEmpty() && this.state.getUndoQuota().get() <= 0) return new ActionResult.Failed(action, StringResources.UNDO_QUOTA_RUN_OUT); this.state.undo(); return new ActionResult.Success(action); } case InvalidInput i-> { return new ActionResult.Failed(action, i.getMessage()); } case Exit ignored-> { shouldStop=true; return new ActionResult.Success(action); } } return new ActionResult.Failed(action, \"!!!!2/2, processAction failed!!!!\"); }",
        "label": "P"
    },
    "570": {
        "dataset": "COMP 3021",
        "project": "jzhanggc",
        "bug_id": "11",
        "T": "void testHitAnotherPlayer() { String mapText = \"\"\" 233 ###### #A..@# #B...# #ab.@# ###### \"\"\"; final var testMap = TestHelper.parseGameMap(mapText); final var gameState = spy(new GameState(testMap)); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Move.Down(0)); verify(gameState, never()).move(any(), any()); }",
        "C": "public GameState(@NotNull GameMap map) { // TODO this.gameMap = map; this.map = this.deepCopyMap(GameMap.initialMap); this.destinations = this.gameMap.destinations; this.checkPoints = new Stack(); this.undoQuota = map.undoLimit; } public Down(int initiator) { super(initiator); }",
        "label": "P"
    },
    "571": {
        "dataset": "COMP 3021",
        "project": "jzhanggc",
        "bug_id": "12",
        "T": "void testUndoWithinQuota() { final var gameState = mock(GameState.class); when(gameState.getPlayerPositionById(anyInt())).thenReturn(Position.of(0, 0)); when(gameState.getUndoQuota()).thenReturn(Optional.of(1)); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Undo(0)); verify(gameState, times(1)).undo(); }",
        "C": "public Undo(int initiator) { super(initiator); }",
        "label": "P"
    },
    "572": {
        "dataset": "COMP 3021",
        "project": "jzhanggc",
        "bug_id": "13",
        "T": "void testInvalidInput() { final var game = new SokobanGameForTesting(mock(GameState.class)); final var message = String.valueOf(new Random().nextLong()); final var action = new InvalidInput(-1, message); final var result = game.feedActionForProcessing(action); }",
        "C": "public InvalidInput(int initiator, @NotNull String message) { super(initiator); this.message = message; }",
        "label": "P"
    },
    "573": {
        "dataset": "COMP 3021",
        "project": "jzhanggc",
        "bug_id": "14",
        "T": "void testUndoLimitParsing() { final var gameMap = TestHelper.parseGameMap(rectangularMap); }",
        "C": "",
        "label": "P"
    },
    "574": {
        "dataset": "COMP 3021",
        "project": "jzhanggc",
        "bug_id": "15",
        "T": "void testWidthForNonRectangularMap() { final var gameMap = TestHelper.parseGameMap(nonRectangularMap); }",
        "C": "",
        "label": "P"
    },
    "575": {
        "dataset": "COMP 3021",
        "project": "jzhanggc",
        "bug_id": "16",
        "T": "void testTwoPlayersMap() { final var twoPlayersMap = \"\"\" 233 ###### #A..@# #..B@# #....# #.a..# #..b.# ###### \"\"\"; final var gameMap = TestHelper.parseGameMap(twoPlayersMap); final var playerIds = gameMap.getPlayerIds(); final var expectedIds = new HashSet<Integer>(); expectedIds.add(0); expectedIds.add(1); }",
        "C": "public Set<Integer> getPlayerIds() { // TODO return playerID; }",
        "label": "P"
    },
    "576": {
        "dataset": "COMP 3021",
        "project": "jzhanggc",
        "bug_id": "17",
        "T": "void testMapWithoutPlayer() { final var invalidMap = \"\"\" 233 ### #.# ### \"\"\"; } // @Tag(TestKind.HIDDEN) // @Test // void testUnmatchedPlayersAndBoxes() { // final var invalidMap = \"\"\" // 233 // ###### // #A..@# // #...@# // #a.b@# // #.a.@# // #..a.# // ###### // \"\"\"; // assertThrowsExactly(IllegalArgumentException.class, () -> TestHelper.parseGameMap(invalidMap)); // }",
        "C": "public TerminalRenderingEngine(PrintStream outputSteam) { this.outputSteam = outputSteam; }",
        "label": "P"
    },
    "577": {
        "dataset": "COMP 3021",
        "project": "jzhanggc",
        "bug_id": "18",
        "T": "void testManyPlayersMap() { final var manyPlayersMap = \"\"\" 233 ###### #A.P@@# #vCB@@# #.cpD@# #Ga.d@# #g.bV@# ###### \"\"\"; final var gameMap = TestHelper.parseGameMap(manyPlayersMap); final var playerIds = gameMap.getPlayerIds(); final var expectedIds = new HashSet<>(Arrays.asList( 0, 'P' - 'A', 'C' - 'A', 'B' - 'A', 'D' - 'A', 'G' - 'A', 'V' - 'A' )); }",
        "C": "public Set<Integer> getPlayerIds() { // TODO return playerID; }",
        "label": "P"
    },
    "578": {
        "dataset": "COMP 3021",
        "project": "jzhanggc",
        "bug_id": "19",
        "T": "void testHeightForNonRectangularMap() { final var gameMap = TestHelper.parseGameMap(nonRectangularMap); }",
        "C": "",
        "label": "P"
    },
    "579": {
        "dataset": "COMP 3021",
        "project": "jzhanggc",
        "bug_id": "20",
        "T": "void testDuplicatedPlayers() { final var invalidMap = \"\"\" 233 ###### #A..@# #..A@# #....# #.a..# #..b.# ###### \"\"\"; }",
        "C": "",
        "label": "P"
    },
    "580": {
        "dataset": "COMP 3021",
        "project": "jzhanggc",
        "bug_id": "21",
        "T": "void testParseMapWithoutUndoLimit() { final var invalidMap = String.join(\"\\n\", rectangularMap.lines().skip(1).toList()); }",
        "C": "",
        "label": "P"
    },
    "581": {
        "dataset": "COMP 3021",
        "project": "jzhanggc",
        "bug_id": "22",
        "T": "void testInsufficientDestinations() { final var invalidMap = \"\"\" 233 ###### #A..@# #...@# #a...# #.a..# #..a.# ###### \"\"\"; }",
        "C": "",
        "label": "P"
    },
    "582": {
        "dataset": "COMP 3021",
        "project": "jzhanggc",
        "bug_id": "23",
        "T": "void testSuperLargeMap() { try { new GameMap(Integer.MAX_VALUE, Integer.MAX_VALUE, Collections.emptySet(), 0); } catch (OutOfMemoryError e) { throw new RuntimeException(e); } }); }",
        "C": "public GameMap(int maxWidth, int maxHeight, Set<Position> destinations, int undoLimit) { // TODO this.maxWidth = maxWidth; this.maxHeight = maxHeight; this.destinations = destinations; this.undoLimit = undoLimit; } /** * Parses the map from a string representation. * The first line is undo limit. * Starting from the second line, the game map is represented as follows, * <li># represents a {@link Wall}</li> * <li>@ represents a box destination.</li> * <li>Any upper-case letter represents a {@link Player}.</li> * <li> * Any lower-case letter represents a {@link Box} that is only movable by the player with the corresponding upper-case letter. * For instance, box \"a\" can only be moved by player \"A\" and not movable by player \"B\". * </li> * <li>. represents an {@link Empty} position in the map, meaning there is no player or box currently at this position.</li> * <p> * Notes: * <li> * There can be at most 26 players. * All implementations of classes in the hk.ust.comp3021.game package should support up to 26 players. * </li> * <li> * For simplicity, we assume the given map is bounded with a closed boundary. * There is no need to check this point. * </li> * <li> * Example maps can be found in \"src/main/resources\". * </li> * * @param mapText The string representation. * @return The parsed GameMap object. * @throws IllegalArgumentException if undo limit is negative but not -1. * @throws IllegalArgumentException if there are multiple same upper-case letters, i.e., one player can only exist at one position. * @throws IllegalArgumentException if there are no players in the map. * @throws IllegalArgumentException if the number of boxes is not equal to the number of box destinations. * @throws IllegalArgumentException if there are boxes whose {@link Box#getPlayerId()} public TerminalRenderingEngine(PrintStream outputSteam) { this.outputSteam = outputSteam; }",
        "label": "P"
    },
    "583": {
        "dataset": "COMP 3021",
        "project": "jzhanggc",
        "bug_id": "24",
        "T": "void testInvalidUndoLimit() { final var invalidMap = \"\"\" -233 ###### #A..@# #...@# #a.b@# #.a.@# #..a.# ###### \"\"\"; }",
        "C": "",
        "label": "P"
    },
    "584": {
        "dataset": "COMP 3021",
        "project": "jzhanggc",
        "bug_id": "25",
        "T": "void testEmptyMap() { final var invalidMap = \"\"; }",
        "C": "",
        "label": "P"
    },
    "585": {
        "dataset": "COMP 3021",
        "project": "jzhanggc",
        "bug_id": "26",
        "T": "void testMove(String input, String name, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); } private InputStream fixValueStream(String content) { final var bytes = content.getBytes(StandardCharsets.UTF_8); return new ByteArrayInputStream(bytes); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine(); // TODO inputLine.toLowerCase(); if (inputLine.equalsIgnoreCase(StringResources.EXIT_COMMAND_TEXT)) return new Exit(-1); else if (inputLine.equalsIgnoreCase(\"a\")) return new Move.Left(0); else if (inputLine.equalsIgnoreCase(\"s\")) return new Move.Down(0); else if (inputLine.equalsIgnoreCase(\"w\")) return new Move.Up(0); else if (inputLine.equalsIgnoreCase(\"d\")) return new Move.Right(0); else if (inputLine.equalsIgnoreCase(\"h\")) return new Move.Left(1); else if (inputLine.equalsIgnoreCase(\"j\")) return new Move.Down(1); else if (inputLine.equalsIgnoreCase(\"k\")) return new Move.Up(1); else if (inputLine.equalsIgnoreCase(\"l\")) return new Move.Right(1); else if (inputLine.equalsIgnoreCase(\"u\")) return new Undo(-1); else return new InvalidInput(-1, StringResources.INVALID_INPUT_MESSAGE); }",
        "label": "P"
    },
    "586": {
        "dataset": "COMP 3021",
        "project": "jzhanggc",
        "bug_id": "27",
        "T": "void testMove(String input, String name, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); } private InputStream fixValueStream(String content) { final var bytes = content.getBytes(StandardCharsets.UTF_8); return new ByteArrayInputStream(bytes); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine(); // TODO inputLine.toLowerCase(); if (inputLine.equalsIgnoreCase(StringResources.EXIT_COMMAND_TEXT)) return new Exit(-1); else if (inputLine.equalsIgnoreCase(\"a\")) return new Move.Left(0); else if (inputLine.equalsIgnoreCase(\"s\")) return new Move.Down(0); else if (inputLine.equalsIgnoreCase(\"w\")) return new Move.Up(0); else if (inputLine.equalsIgnoreCase(\"d\")) return new Move.Right(0); else if (inputLine.equalsIgnoreCase(\"h\")) return new Move.Left(1); else if (inputLine.equalsIgnoreCase(\"j\")) return new Move.Down(1); else if (inputLine.equalsIgnoreCase(\"k\")) return new Move.Up(1); else if (inputLine.equalsIgnoreCase(\"l\")) return new Move.Right(1); else if (inputLine.equalsIgnoreCase(\"u\")) return new Undo(-1); else return new InvalidInput(-1, StringResources.INVALID_INPUT_MESSAGE); }",
        "label": "P"
    },
    "587": {
        "dataset": "COMP 3021",
        "project": "jzhanggc",
        "bug_id": "28",
        "T": "void testMove(String input, String name, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); } private InputStream fixValueStream(String content) { final var bytes = content.getBytes(StandardCharsets.UTF_8); return new ByteArrayInputStream(bytes); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine(); // TODO inputLine.toLowerCase(); if (inputLine.equalsIgnoreCase(StringResources.EXIT_COMMAND_TEXT)) return new Exit(-1); else if (inputLine.equalsIgnoreCase(\"a\")) return new Move.Left(0); else if (inputLine.equalsIgnoreCase(\"s\")) return new Move.Down(0); else if (inputLine.equalsIgnoreCase(\"w\")) return new Move.Up(0); else if (inputLine.equalsIgnoreCase(\"d\")) return new Move.Right(0); else if (inputLine.equalsIgnoreCase(\"h\")) return new Move.Left(1); else if (inputLine.equalsIgnoreCase(\"j\")) return new Move.Down(1); else if (inputLine.equalsIgnoreCase(\"k\")) return new Move.Up(1); else if (inputLine.equalsIgnoreCase(\"l\")) return new Move.Right(1); else if (inputLine.equalsIgnoreCase(\"u\")) return new Undo(-1); else return new InvalidInput(-1, StringResources.INVALID_INPUT_MESSAGE); }",
        "label": "P"
    },
    "588": {
        "dataset": "COMP 3021",
        "project": "jzhanggc",
        "bug_id": "29",
        "T": "void testMove(String input, String name, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); } private InputStream fixValueStream(String content) { final var bytes = content.getBytes(StandardCharsets.UTF_8); return new ByteArrayInputStream(bytes); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine(); // TODO inputLine.toLowerCase(); if (inputLine.equalsIgnoreCase(StringResources.EXIT_COMMAND_TEXT)) return new Exit(-1); else if (inputLine.equalsIgnoreCase(\"a\")) return new Move.Left(0); else if (inputLine.equalsIgnoreCase(\"s\")) return new Move.Down(0); else if (inputLine.equalsIgnoreCase(\"w\")) return new Move.Up(0); else if (inputLine.equalsIgnoreCase(\"d\")) return new Move.Right(0); else if (inputLine.equalsIgnoreCase(\"h\")) return new Move.Left(1); else if (inputLine.equalsIgnoreCase(\"j\")) return new Move.Down(1); else if (inputLine.equalsIgnoreCase(\"k\")) return new Move.Up(1); else if (inputLine.equalsIgnoreCase(\"l\")) return new Move.Right(1); else if (inputLine.equalsIgnoreCase(\"u\")) return new Undo(-1); else return new InvalidInput(-1, StringResources.INVALID_INPUT_MESSAGE); }",
        "label": "P"
    },
    "589": {
        "dataset": "COMP 3021",
        "project": "jzhanggc",
        "bug_id": "30",
        "T": "void testMove(String input, String name, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); } private InputStream fixValueStream(String content) { final var bytes = content.getBytes(StandardCharsets.UTF_8); return new ByteArrayInputStream(bytes); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine(); // TODO inputLine.toLowerCase(); if (inputLine.equalsIgnoreCase(StringResources.EXIT_COMMAND_TEXT)) return new Exit(-1); else if (inputLine.equalsIgnoreCase(\"a\")) return new Move.Left(0); else if (inputLine.equalsIgnoreCase(\"s\")) return new Move.Down(0); else if (inputLine.equalsIgnoreCase(\"w\")) return new Move.Up(0); else if (inputLine.equalsIgnoreCase(\"d\")) return new Move.Right(0); else if (inputLine.equalsIgnoreCase(\"h\")) return new Move.Left(1); else if (inputLine.equalsIgnoreCase(\"j\")) return new Move.Down(1); else if (inputLine.equalsIgnoreCase(\"k\")) return new Move.Up(1); else if (inputLine.equalsIgnoreCase(\"l\")) return new Move.Right(1); else if (inputLine.equalsIgnoreCase(\"u\")) return new Undo(-1); else return new InvalidInput(-1, StringResources.INVALID_INPUT_MESSAGE); }",
        "label": "P"
    },
    "590": {
        "dataset": "COMP 3021",
        "project": "jzhanggc",
        "bug_id": "31",
        "T": "void testMove(String input, String name, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); } private InputStream fixValueStream(String content) { final var bytes = content.getBytes(StandardCharsets.UTF_8); return new ByteArrayInputStream(bytes); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine(); // TODO inputLine.toLowerCase(); if (inputLine.equalsIgnoreCase(StringResources.EXIT_COMMAND_TEXT)) return new Exit(-1); else if (inputLine.equalsIgnoreCase(\"a\")) return new Move.Left(0); else if (inputLine.equalsIgnoreCase(\"s\")) return new Move.Down(0); else if (inputLine.equalsIgnoreCase(\"w\")) return new Move.Up(0); else if (inputLine.equalsIgnoreCase(\"d\")) return new Move.Right(0); else if (inputLine.equalsIgnoreCase(\"h\")) return new Move.Left(1); else if (inputLine.equalsIgnoreCase(\"j\")) return new Move.Down(1); else if (inputLine.equalsIgnoreCase(\"k\")) return new Move.Up(1); else if (inputLine.equalsIgnoreCase(\"l\")) return new Move.Right(1); else if (inputLine.equalsIgnoreCase(\"u\")) return new Undo(-1); else return new InvalidInput(-1, StringResources.INVALID_INPUT_MESSAGE); }",
        "label": "P"
    },
    "591": {
        "dataset": "COMP 3021",
        "project": "jzhanggc",
        "bug_id": "32",
        "T": "void testMove(String input, String name, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); } private InputStream fixValueStream(String content) { final var bytes = content.getBytes(StandardCharsets.UTF_8); return new ByteArrayInputStream(bytes); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine(); // TODO inputLine.toLowerCase(); if (inputLine.equalsIgnoreCase(StringResources.EXIT_COMMAND_TEXT)) return new Exit(-1); else if (inputLine.equalsIgnoreCase(\"a\")) return new Move.Left(0); else if (inputLine.equalsIgnoreCase(\"s\")) return new Move.Down(0); else if (inputLine.equalsIgnoreCase(\"w\")) return new Move.Up(0); else if (inputLine.equalsIgnoreCase(\"d\")) return new Move.Right(0); else if (inputLine.equalsIgnoreCase(\"h\")) return new Move.Left(1); else if (inputLine.equalsIgnoreCase(\"j\")) return new Move.Down(1); else if (inputLine.equalsIgnoreCase(\"k\")) return new Move.Up(1); else if (inputLine.equalsIgnoreCase(\"l\")) return new Move.Right(1); else if (inputLine.equalsIgnoreCase(\"u\")) return new Undo(-1); else return new InvalidInput(-1, StringResources.INVALID_INPUT_MESSAGE); }",
        "label": "P"
    },
    "592": {
        "dataset": "COMP 3021",
        "project": "jzhanggc",
        "bug_id": "33",
        "T": "void testMove(String input, String name, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); } private InputStream fixValueStream(String content) { final var bytes = content.getBytes(StandardCharsets.UTF_8); return new ByteArrayInputStream(bytes); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine(); // TODO inputLine.toLowerCase(); if (inputLine.equalsIgnoreCase(StringResources.EXIT_COMMAND_TEXT)) return new Exit(-1); else if (inputLine.equalsIgnoreCase(\"a\")) return new Move.Left(0); else if (inputLine.equalsIgnoreCase(\"s\")) return new Move.Down(0); else if (inputLine.equalsIgnoreCase(\"w\")) return new Move.Up(0); else if (inputLine.equalsIgnoreCase(\"d\")) return new Move.Right(0); else if (inputLine.equalsIgnoreCase(\"h\")) return new Move.Left(1); else if (inputLine.equalsIgnoreCase(\"j\")) return new Move.Down(1); else if (inputLine.equalsIgnoreCase(\"k\")) return new Move.Up(1); else if (inputLine.equalsIgnoreCase(\"l\")) return new Move.Right(1); else if (inputLine.equalsIgnoreCase(\"u\")) return new Undo(-1); else return new InvalidInput(-1, StringResources.INVALID_INPUT_MESSAGE); }",
        "label": "P"
    },
    "593": {
        "dataset": "COMP 3021",
        "project": "jzhanggc",
        "bug_id": "34",
        "T": "void testUndo(String input, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine(); // TODO inputLine.toLowerCase(); if (inputLine.equalsIgnoreCase(StringResources.EXIT_COMMAND_TEXT)) return new Exit(-1); else if (inputLine.equalsIgnoreCase(\"a\")) return new Move.Left(0); else if (inputLine.equalsIgnoreCase(\"s\")) return new Move.Down(0); else if (inputLine.equalsIgnoreCase(\"w\")) return new Move.Up(0); else if (inputLine.equalsIgnoreCase(\"d\")) return new Move.Right(0); else if (inputLine.equalsIgnoreCase(\"h\")) return new Move.Left(1); else if (inputLine.equalsIgnoreCase(\"j\")) return new Move.Down(1); else if (inputLine.equalsIgnoreCase(\"k\")) return new Move.Up(1); else if (inputLine.equalsIgnoreCase(\"l\")) return new Move.Right(1); else if (inputLine.equalsIgnoreCase(\"u\")) return new Undo(-1); else return new InvalidInput(-1, StringResources.INVALID_INPUT_MESSAGE); }",
        "label": "P"
    },
    "594": {
        "dataset": "COMP 3021",
        "project": "jzhanggc",
        "bug_id": "35",
        "T": "void testInvalidInput() { final var inputStream = fixValueStream(\"blah blah\"); final var inputEngine = new TerminalInputEngine(inputStream); final var action = inputEngine.fetchAction(); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine(); // TODO inputLine.toLowerCase(); if (inputLine.equalsIgnoreCase(StringResources.EXIT_COMMAND_TEXT)) return new Exit(-1); else if (inputLine.equalsIgnoreCase(\"a\")) return new Move.Left(0); else if (inputLine.equalsIgnoreCase(\"s\")) return new Move.Down(0); else if (inputLine.equalsIgnoreCase(\"w\")) return new Move.Up(0); else if (inputLine.equalsIgnoreCase(\"d\")) return new Move.Right(0); else if (inputLine.equalsIgnoreCase(\"h\")) return new Move.Left(1); else if (inputLine.equalsIgnoreCase(\"j\")) return new Move.Down(1); else if (inputLine.equalsIgnoreCase(\"k\")) return new Move.Up(1); else if (inputLine.equalsIgnoreCase(\"l\")) return new Move.Right(1); else if (inputLine.equalsIgnoreCase(\"u\")) return new Undo(-1); else return new InvalidInput(-1, StringResources.INVALID_INPUT_MESSAGE); }",
        "label": "P"
    },
    "595": {
        "dataset": "COMP 3021",
        "project": "jzhanggc",
        "bug_id": "36",
        "T": "void testUndoWhenThereIsNoMove() { final var gameState = new GameState(TestHelper.parseGameMap(\"\"\" 233 ###### #A.a@# #..a@# ###### \"\"\" )); gameState.undo(); } private Entity generateEntity(int key) { return switch (key % 4) { case 0 -> new Box(0); case 1 -> new Empty(); case 2 -> new Player(0); case 3 -> new Wall(); default -> throw new ShouldNotReachException(); }; }",
        "C": "public GameState(@NotNull GameMap map) { // TODO this.gameMap = map; this.map = this.deepCopyMap(GameMap.initialMap); this.destinations = this.gameMap.destinations; this.checkPoints = new Stack(); this.undoQuota = map.undoLimit; } public void undo() { // TODO if (this.undoQuota > 0 && !this.checkPoints.isEmpty()) --this.undoQuota; if (!this.checkPoints.empty()) this.checkPoints.pop(); if (this.checkPoints.empty()) this.map = this.deepCopyMap(GameMap.initialMap); else this.map = this.deepCopyMap((char[][])this.checkPoints.peek()); } /** * Get the maximum width of the game map. * This should be the same as that in {@link GameMap} public TerminalRenderingEngine(PrintStream outputSteam) { this.outputSteam = outputSteam; } public Box(int playerId) { this.playerId = playerId; } public Player(int id) { this.id = id; } public ShouldNotReachException() { super(\"This branch should not be reached.\"); }",
        "label": "P"
    },
    "596": {
        "dataset": "COMP 3021",
        "project": "jzhanggc",
        "bug_id": "37",
        "T": "void testGetUndoUnlimited() { final var gameState = new GameState(TestHelper.parseGameMap(\"\"\" -1 ###### #.Aa@# #..a@# ###### \"\"\" )); }",
        "C": "public GameState(@NotNull GameMap map) { // TODO this.gameMap = map; this.map = this.deepCopyMap(GameMap.initialMap); this.destinations = this.gameMap.destinations; this.checkPoints = new Stack(); this.undoQuota = map.undoLimit; }",
        "label": "P"
    },
    "597": {
        "dataset": "COMP 3021",
        "project": "jzhanggc",
        "bug_id": "38",
        "T": "void testMapCopying() { final var maxWidth = 2333; final var maxHeight = 2333; final var random = new Random(); final var randomEntities = Stream.generate(() -> Position.of(random.nextInt(maxWidth), random.nextInt(maxHeight))) .distinct() .limit(100) .collect(Collectors.toMap(Function.identity(), it -> generateEntity(it.x()))); final var firstPos = randomEntities.keySet().stream().findFirst(); final var gameMap = new GameMap(maxWidth, maxHeight, Collections.singleton(firstPos.get()), 233); randomEntities.forEach(gameMap::putEntity); final var gameState = new GameState(gameMap); final var randomPosition = randomEntities.keySet().stream().findAny(); gameMap.putEntity(randomPosition.get(), new Empty()); randomEntities.forEach((p, e) -> assertEquals(e, gameState.getEntity(p))); }",
        "C": "public static @NotNull Position of(int x, int y) { return new Position(x, y); } public GameMap(int maxWidth, int maxHeight, Set<Position> destinations, int undoLimit) { // TODO this.maxWidth = maxWidth; this.maxHeight = maxHeight; this.destinations = destinations; this.undoLimit = undoLimit; } /** * Parses the map from a string representation. * The first line is undo limit. * Starting from the second line, the game map is represented as follows, * <li># represents a {@link Wall}</li> * <li>@ represents a box destination.</li> * <li>Any upper-case letter represents a {@link Player}.</li> * <li> * Any lower-case letter represents a {@link Box} that is only movable by the player with the corresponding upper-case letter. * For instance, box \"a\" can only be moved by player \"A\" and not movable by player \"B\". * </li> * <li>. represents an {@link Empty} position in the map, meaning there is no player or box currently at this position.</li> * <p> * Notes: * <li> * There can be at most 26 players. * All implementations of classes in the hk.ust.comp3021.game package should support up to 26 players. * </li> * <li> * For simplicity, we assume the given map is bounded with a closed boundary. * There is no need to check this point. * </li> * <li> * Example maps can be found in \"src/main/resources\". * </li> * * @param mapText The string representation. * @return The parsed GameMap object. * @throws IllegalArgumentException if undo limit is negative but not -1. * @throws IllegalArgumentException if there are multiple same upper-case letters, i.e., one player can only exist at one position. * @throws IllegalArgumentException if there are no players in the map. * @throws IllegalArgumentException if the number of boxes is not equal to the number of box destinations. * @throws IllegalArgumentException if there are boxes whose {@link Box#getPlayerId()} public GameState(@NotNull GameMap map) { // TODO this.gameMap = map; this.map = this.deepCopyMap(GameMap.initialMap); this.destinations = this.gameMap.destinations; this.checkPoints = new Stack(); this.undoQuota = map.undoLimit; } public void putEntity(Position position, Entity entity) { // TODO switch (entity) { case Box b: map[position.y()][position.x()] = (char) (b.getPlayerId() + 'a'); break; case Empty ignored: map[position.y()][position.x()] = '.'; break; case Player p: map[position.y()][position.x()] = (char) (p.getId() + 'A'); break; case Wall ignored: map[position.y()][position.x()] = '#'; break; } } public @Nullable Entity getEntity(@NotNull Position position) { // TODO if (position.x() >= 0 && position.y() >= 0 && position.y() < this.map.length && position.x() < this.map[position.y()].length) { char c = this.map[position.y()][position.x()]; if (c == ' ') return null; else if (c == '#') return new Wall(); else if (c == '.' || c == '@') return new Empty(); else if (Character.isLowerCase(c)) return new Box(c - 'a'); else if (Character.isUpperCase(c)) return new Player(c - 'A'); else return null; } else return null; } /** * Get all box destination positions as a set in the game map. * This should be the same as that in {@link GameMap}",
        "label": "F"
    },
    "598": {
        "dataset": "COMP 3021",
        "project": "jzhanggc",
        "bug_id": "39",
        "T": "void testUndoWhenThereIsMoveButNoCheckpoint() { final var gameState = new GameState(TestHelper.parseGameMap(\"\"\" 233 ###### #A.a@# #..a@# ###### \"\"\" )); gameState.move(Position.of(1, 1), Position.of(2, 1)); gameState.undo(); }",
        "C": "public GameState(@NotNull GameMap map) { // TODO this.gameMap = map; this.map = this.deepCopyMap(GameMap.initialMap); this.destinations = this.gameMap.destinations; this.checkPoints = new Stack(); this.undoQuota = map.undoLimit; } public void move(Position from, Position to) { // TODO char fromEntity = this.map[from.y()][from.x()]; //char toEntity = this.map[to.y()][to.x()]; this.map[from.y()][from.x()] = (char)(this.destinations.contains(from) ? '@' : '.'); this.map[to.y()][to.x()] = fromEntity; } /** * Record a checkpoint of the game state, including: * <li>All current positions of entities in the game map.</li> * <li>Current undo quota</li> * <p> * Checkpoint is used in {@link GameState#undo()} public static @NotNull Position of(int x, int y) { return new Position(x, y); } public void undo() { // TODO if (this.undoQuota > 0 && !this.checkPoints.isEmpty()) --this.undoQuota; if (!this.checkPoints.empty()) this.checkPoints.pop(); if (this.checkPoints.empty()) this.map = this.deepCopyMap(GameMap.initialMap); else this.map = this.deepCopyMap((char[][])this.checkPoints.peek()); } /** * Get the maximum width of the game map. * This should be the same as that in {@link GameMap}",
        "label": "P"
    },
    "599": {
        "dataset": "COMP 3021",
        "project": "jzhanggc",
        "bug_id": "40",
        "T": "void testGameExit() { final var gameState = mock(GameState.class); final var inputEngine = mock(TerminalInputEngine.class); final var renderingEngine = mock(TerminalRenderingEngine.class); when(gameState.isWin()).thenReturn(false, false, false); when(inputEngine.fetchAction()) .thenReturn(new InvalidInput(0, \"\"), new InvalidInput(0, \"\"), new Exit(0)); final var game = new TerminalSokobanGame(gameState, inputEngine, renderingEngine); game.run(); verify(renderingEngine, atLeastOnce()).message(any()); }",
        "C": "public InvalidInput(int initiator, @NotNull String message) { super(initiator); this.message = message; } public Exit(int initiator) { super(initiator); } public TerminalSokobanGame(GameState gameState, TerminalInputEngine inputEngine, TerminalRenderingEngine renderingEngine) { super(gameState); this.inputEngine = inputEngine; this.renderingEngine = renderingEngine; // TODO // Check the number of players if(gameState.getAllPlayerPositions().size()>2) throw new IllegalArgumentException(); } public void run() { // TODO this.renderingEngine.message(StringResources.GAME_READY_MESSAGE); while(!this.shouldStop()) { this.renderingEngine.render(this.state); if (this.state.getUndoQuota().isEmpty()) this.renderingEngine.message(StringResources.UNDO_QUOTA_UNLIMITED); else this.renderingEngine.message(\"Undo Quota: \" + this.state.getUndoQuota().get()); Action action = this.inputEngine.fetchAction(); ActionResult result = this.processAction(action); if (result instanceof ActionResult.Failed) { this.renderingEngine.message(((ActionResult.Failed)result).getReason()); } } this.renderingEngine.render(this.state); renderingEngine.message(StringResources.GAME_EXIT_MESSAGE); if (state.isWin()) this.renderingEngine.message(StringResources.WIN_MESSAGE); }",
        "label": "P"
    },
    "600": {
        "dataset": "COMP 3021",
        "project": "jzhanggc",
        "bug_id": "41",
        "T": "void testGameWin() { final var gameState = mock(GameState.class); final var inputEngine = mock(TerminalInputEngine.class); final var renderingEngine = mock(TerminalRenderingEngine.class); when(gameState.isWin()).thenReturn(false, false, false, true); when(inputEngine.fetchAction()) .thenReturn(new InvalidInput(0, \"\")); final var game = new TerminalSokobanGame(gameState, inputEngine, renderingEngine); game.run(); verify(gameState, atLeastOnce()).isWin(); verify(renderingEngine, atLeastOnce()).message(any()); }",
        "C": "public InvalidInput(int initiator, @NotNull String message) { super(initiator); this.message = message; } public TerminalSokobanGame(GameState gameState, TerminalInputEngine inputEngine, TerminalRenderingEngine renderingEngine) { super(gameState); this.inputEngine = inputEngine; this.renderingEngine = renderingEngine; // TODO // Check the number of players if(gameState.getAllPlayerPositions().size()>2) throw new IllegalArgumentException(); } public void run() { // TODO this.renderingEngine.message(StringResources.GAME_READY_MESSAGE); while(!this.shouldStop()) { this.renderingEngine.render(this.state); if (this.state.getUndoQuota().isEmpty()) this.renderingEngine.message(StringResources.UNDO_QUOTA_UNLIMITED); else this.renderingEngine.message(\"Undo Quota: \" + this.state.getUndoQuota().get()); Action action = this.inputEngine.fetchAction(); ActionResult result = this.processAction(action); if (result instanceof ActionResult.Failed) { this.renderingEngine.message(((ActionResult.Failed)result).getReason()); } } this.renderingEngine.render(this.state); renderingEngine.message(StringResources.GAME_EXIT_MESSAGE); if (state.isWin()) this.renderingEngine.message(StringResources.WIN_MESSAGE); }",
        "label": "P"
    },
    "601": {
        "dataset": "COMP 3021",
        "project": "jzhanggc",
        "bug_id": "42",
        "T": "void testMoreThanTwoPlayers() { final var gameState = mock(GameState.class); final var inputEngine = mock(TerminalInputEngine.class); final var renderingEngine = mock(TerminalRenderingEngine.class); when(gameState.getAllPlayerPositions()).thenReturn(new HashSet<>(Arrays.asList(Position.of(1, 1), Position.of(1, 2), Position.of(1, 3)))); }",
        "C": "public static @NotNull Position of(int x, int y) { return new Position(x, y); }",
        "label": "P"
    },
    "602": {
        "dataset": "COMP 3021",
        "project": "mjlaurent",
        "bug_id": "0",
        "T": "void moveUp() { Position.of(233, 232), new Move.Up(-1).nextPosition(pos) ); }",
        "C": "public static @NotNull Position of(int x, int y) { return new Position(x, y); } public Up(int initiator) { super(initiator); }",
        "label": "P"
    },
    "603": {
        "dataset": "COMP 3021",
        "project": "mjlaurent",
        "bug_id": "1",
        "T": "void moveDown() { Position.of(233, 234), new Move.Down(-1).nextPosition(pos) ); }",
        "C": "public static @NotNull Position of(int x, int y) { return new Position(x, y); } public Down(int initiator) { super(initiator); }",
        "label": "P"
    },
    "604": {
        "dataset": "COMP 3021",
        "project": "mjlaurent",
        "bug_id": "2",
        "T": "void moveRight() { Position.of(234, 233), new Move.Right(-1).nextPosition(pos) ); }",
        "C": "public static @NotNull Position of(int x, int y) { return new Position(x, y); } public Right(int initiator) { super(initiator); }",
        "label": "P"
    },
    "605": {
        "dataset": "COMP 3021",
        "project": "mjlaurent",
        "bug_id": "3",
        "T": "void testExceedingUndoQuota() { final var gameState = mock(GameState.class); when(gameState.getPlayerPositionById(anyInt())).thenReturn(Position.of(0, 0)); when(gameState.getUndoQuota()).thenReturn(Optional.of(0)); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Undo(0)); }",
        "C": "public Undo(int initiator) { super(initiator); }",
        "label": "P"
    },
    "606": {
        "dataset": "COMP 3021",
        "project": "mjlaurent",
        "bug_id": "4",
        "T": "void testExit() { final var gameState = mock(GameState.class); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Exit(0)); }",
        "C": "public Exit(int initiator) { super(initiator); }",
        "label": "P"
    },
    "607": {
        "dataset": "COMP 3021",
        "project": "mjlaurent",
        "bug_id": "5",
        "T": "void testUndoUnlimited() { final var gameState = mock(GameState.class); when(gameState.getPlayerPositionById(anyInt())).thenReturn(Position.of(0, 0)); when(gameState.getUndoQuota()).thenReturn(Optional.empty()); final var game = new SokobanGameForTesting(gameState); for (int i = 0; i < 10000; i++) { final var result = game.feedActionForProcessing(new Undo(0)); } verify(gameState, times(10000)).undo(); }",
        "C": "public TerminalRenderingEngine(PrintStream outputSteam) { this.outputSteam = outputSteam; } public Undo(int initiator) { super(initiator); }",
        "label": "F"
    },
    "608": {
        "dataset": "COMP 3021",
        "project": "mjlaurent",
        "bug_id": "6",
        "T": "void testPushOtherPlayerBox() { String mapText = \"\"\" 233 ###### #AB.@# #b.a.# #@...# ###### \"\"\"; final var testMap = TestHelper.parseGameMap(mapText); final var gameState = spy(new GameState(testMap)); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Move.Down(0)); verify(gameState, never()).move(any(), any()); }",
        "C": "public GameState(@NotNull GameMap map) { // TODO this.map = map; this.undoQuota = map.undoLimit; this.currentMap = map.getGameMap(); this.playersPosition = map.playersPosition; this.checkpoint(); } public Down(int initiator) { super(initiator); }",
        "label": "P"
    },
    "609": {
        "dataset": "COMP 3021",
        "project": "mjlaurent",
        "bug_id": "7",
        "T": "void testMoveNonExistingPlayer() { String mapText = \"\"\" 233 ###### #A..@# #a...# ##...# ###### \"\"\"; final var testMap = TestHelper.parseGameMap(mapText); final var gameState = spy(new GameState(testMap)); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Move.Down(23)); }",
        "C": "public GameState(@NotNull GameMap map) { // TODO this.map = map; this.undoQuota = map.undoLimit; this.currentMap = map.getGameMap(); this.playersPosition = map.playersPosition; this.checkpoint(); } public Down(int initiator) { super(initiator); }",
        "label": "P"
    },
    "610": {
        "dataset": "COMP 3021",
        "project": "mjlaurent",
        "bug_id": "8",
        "T": "void testCheckpointWhenNeed() { final var gameState = spy(new GameState(TestHelper.parseGameMap(\"\"\" 233 ###### #.Aa@# #..a@# ###### \"\"\" ))); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Move.Right(0)); verify(gameState, times(1)).checkpoint(); }",
        "C": "public GameState(@NotNull GameMap map) { // TODO this.map = map; this.undoQuota = map.undoLimit; this.currentMap = map.getGameMap(); this.playersPosition = map.playersPosition; this.checkpoint(); } public Right(int initiator) { super(initiator); }",
        "label": "P"
    },
    "611": {
        "dataset": "COMP 3021",
        "project": "mjlaurent",
        "bug_id": "9",
        "T": "void testPushBoxAgainstWall() { String mapText = \"\"\" 233 ###### #A..@# #a...# ##...# ###### \"\"\"; final var testMap = TestHelper.parseGameMap(mapText); final var gameState = spy(new GameState(testMap)); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Move.Down(0)); verify(gameState, never()).move(any(), any()); }",
        "C": "public GameState(@NotNull GameMap map) { // TODO this.map = map; this.undoQuota = map.undoLimit; this.currentMap = map.getGameMap(); this.playersPosition = map.playersPosition; this.checkpoint(); } public Down(int initiator) { super(initiator); }",
        "label": "P"
    },
    "612": {
        "dataset": "COMP 3021",
        "project": "mjlaurent",
        "bug_id": "10",
        "T": "void testCheckpointWhenNotNeed() { final var gameState = spy(new GameState(TestHelper.parseGameMap(\"\"\" 233 ###### #A.a@# #..a@# ###### \"\"\" ))); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Move.Right(0)); verify(gameState, never()).checkpoint(); } private static class SokobanGameForTesting extends AbstractSokobanGame { protected SokobanGameForTesting(GameState gameState) { super(gameState); } @Override public void run() { } public ActionResult feedActionForProcessing(Action action) { return processAction(action); } }",
        "C": "public GameState(@NotNull GameMap map) { // TODO this.map = map; this.undoQuota = map.undoLimit; this.currentMap = map.getGameMap(); this.playersPosition = map.playersPosition; this.checkpoint(); } public Right(int initiator) { super(initiator); } public void run() { // TODO this.renderingEngine.message(StringResources.GAME_READY_MESSAGE); while(!this.shouldStop()){ this.renderingEngine.render(state); if(state.getUndoQuota().isPresent()){ var undoQuota = Integer.valueOf(state.getUndoQuota().get()); if(undoQuota == -1){ this.renderingEngine.message(StringResources.UNDO_QUOTA_UNLIMITED); } else { this.renderingEngine.message(String.format(StringResources.UNDO_QUOTA_TEMPLATE, undoQuota)); } } this.renderingEngine.message(StringResources.LINE_BREAKERS); Action action = inputEngine.fetchAction(); ActionResult result = this.processAction(action); if(result instanceof ActionResult.Failed){ this.renderingEngine.message(((ActionResult.Failed) result).getReason()); } } this.renderingEngine.render(state); this.renderingEngine.message(StringResources.GAME_EXIT_MESSAGE); if(state.isWin()){ this.renderingEngine.message(StringResources.WIN_MESSAGE); } } protected ActionResult processAction(@NotNull Action action) { // TODO return switch (action) { case Move move -> { int id = move.getInitiator(); if (!state.map.getPlayerIds().contains(id)) { yield new ActionResult.Failed(move, StringResources.PLAYER_NOT_FOUND); } Position position = state.getPlayerPositionById(id); Position nextPosition = move.nextPosition(position); Entity nextEntity = state.getEntity(nextPosition); if (nextEntity instanceof Wall) { yield new ActionResult.Failed(move, StringResources.HIT_A_WALL); } else if (nextEntity instanceof Box) { if (((Box) nextEntity).getPlayerId() != action.getInitiator()) { yield new ActionResult.Failed(move, StringResources.MOVE_OTHER_PLAYER); } if (!(state.getEntity(move.nextPosition(nextPosition)) instanceof Empty)) { yield new ActionResult.Failed(move, StringResources.FAILED_TO_PUSH_BOX); } else { state.move(nextPosition, move.nextPosition(nextPosition)); state.move(position, nextPosition); state.checkpoint(); yield new ActionResult.Success(move); } } else if (nextEntity instanceof Empty) { state.move(position, nextPosition); yield new ActionResult.Success(move); } else if (nextEntity instanceof Player) { yield new ActionResult.Failed(move, StringResources.HIT_OTHER_PLAYER); } else { yield new ActionResult.Failed(move, StringResources.UNKNOWN_ENTITY); } } case Exit exit -> { this.isExit = true; yield new ActionResult.Success(exit); } case Undo undo -> { if (state.getUndoQuota().get() == 0) { yield new ActionResult.Failed(undo, StringResources.UNDO_QUOTA_RUN_OUT); } else { state.undo(); yield new ActionResult.Success(undo); } } case InvalidInput invalidInput -> new ActionResult.Failed(invalidInput, StringResources.INVALID_INPUT_MESSAGE); default -> new ActionResult.Failed(action, StringResources.UNKNOWN_ACTION); }; }",
        "label": "P"
    },
    "613": {
        "dataset": "COMP 3021",
        "project": "mjlaurent",
        "bug_id": "11",
        "T": "void testHitAnotherPlayer() { String mapText = \"\"\" 233 ###### #A..@# #B...# #ab.@# ###### \"\"\"; final var testMap = TestHelper.parseGameMap(mapText); final var gameState = spy(new GameState(testMap)); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Move.Down(0)); verify(gameState, never()).move(any(), any()); }",
        "C": "public GameState(@NotNull GameMap map) { // TODO this.map = map; this.undoQuota = map.undoLimit; this.currentMap = map.getGameMap(); this.playersPosition = map.playersPosition; this.checkpoint(); } public Down(int initiator) { super(initiator); }",
        "label": "P"
    },
    "614": {
        "dataset": "COMP 3021",
        "project": "mjlaurent",
        "bug_id": "12",
        "T": "void testUndoWithinQuota() { final var gameState = mock(GameState.class); when(gameState.getPlayerPositionById(anyInt())).thenReturn(Position.of(0, 0)); when(gameState.getUndoQuota()).thenReturn(Optional.of(1)); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Undo(0)); verify(gameState, times(1)).undo(); }",
        "C": "public Undo(int initiator) { super(initiator); }",
        "label": "P"
    },
    "615": {
        "dataset": "COMP 3021",
        "project": "mjlaurent",
        "bug_id": "13",
        "T": "void testInvalidInput() { final var game = new SokobanGameForTesting(mock(GameState.class)); final var message = String.valueOf(new Random().nextLong()); final var action = new InvalidInput(-1, message); final var result = game.feedActionForProcessing(action); }",
        "C": "public InvalidInput(int initiator, @NotNull String message) { super(initiator); this.message = message; }",
        "label": "P"
    },
    "616": {
        "dataset": "COMP 3021",
        "project": "mjlaurent",
        "bug_id": "14",
        "T": "void testUndoLimitParsing() { final var gameMap = TestHelper.parseGameMap(rectangularMap); }",
        "C": "",
        "label": "P"
    },
    "617": {
        "dataset": "COMP 3021",
        "project": "mjlaurent",
        "bug_id": "15",
        "T": "void testWidthForNonRectangularMap() { final var gameMap = TestHelper.parseGameMap(nonRectangularMap); }",
        "C": "",
        "label": "P"
    },
    "618": {
        "dataset": "COMP 3021",
        "project": "mjlaurent",
        "bug_id": "16",
        "T": "void testTwoPlayersMap() { final var twoPlayersMap = \"\"\" 233 ###### #A..@# #..B@# #....# #.a..# #..b.# ###### \"\"\"; final var gameMap = TestHelper.parseGameMap(twoPlayersMap); final var playerIds = gameMap.getPlayerIds(); final var expectedIds = new HashSet<Integer>(); expectedIds.add(0); expectedIds.add(1); }",
        "C": "public Set<Integer> getPlayerIds() { // TODO return this.playerIds; }",
        "label": "P"
    },
    "619": {
        "dataset": "COMP 3021",
        "project": "mjlaurent",
        "bug_id": "17",
        "T": "void testMapWithoutPlayer() { final var invalidMap = \"\"\" 233 ### #.# ### \"\"\"; } // @Tag(TestKind.HIDDEN) // @Test // void testUnmatchedPlayersAndBoxes() { // final var invalidMap = \"\"\" // 233 // ###### // #A..@# // #...@# // #a.b@# // #.a.@# // #..a.# // ###### // \"\"\"; // assertThrowsExactly(IllegalArgumentException.class, () -> TestHelper.parseGameMap(invalidMap)); // }",
        "C": "public TerminalRenderingEngine(PrintStream outputSteam) { this.outputSteam = outputSteam; }",
        "label": "P"
    },
    "620": {
        "dataset": "COMP 3021",
        "project": "mjlaurent",
        "bug_id": "18",
        "T": "void testManyPlayersMap() { final var manyPlayersMap = \"\"\" 233 ###### #A.P@@# #vCB@@# #.cpD@# #Ga.d@# #g.bV@# ###### \"\"\"; final var gameMap = TestHelper.parseGameMap(manyPlayersMap); final var playerIds = gameMap.getPlayerIds(); final var expectedIds = new HashSet<>(Arrays.asList( 0, 'P' - 'A', 'C' - 'A', 'B' - 'A', 'D' - 'A', 'G' - 'A', 'V' - 'A' )); }",
        "C": "public Set<Integer> getPlayerIds() { // TODO return this.playerIds; }",
        "label": "P"
    },
    "621": {
        "dataset": "COMP 3021",
        "project": "mjlaurent",
        "bug_id": "19",
        "T": "void testHeightForNonRectangularMap() { final var gameMap = TestHelper.parseGameMap(nonRectangularMap); }",
        "C": "",
        "label": "P"
    },
    "622": {
        "dataset": "COMP 3021",
        "project": "mjlaurent",
        "bug_id": "20",
        "T": "void testDuplicatedPlayers() { final var invalidMap = \"\"\" 233 ###### #A..@# #..A@# #....# #.a..# #..b.# ###### \"\"\"; }",
        "C": "",
        "label": "P"
    },
    "623": {
        "dataset": "COMP 3021",
        "project": "mjlaurent",
        "bug_id": "21",
        "T": "void testParseMapWithoutUndoLimit() { final var invalidMap = String.join(\"\\n\", rectangularMap.lines().skip(1).toList()); }",
        "C": "",
        "label": "P"
    },
    "624": {
        "dataset": "COMP 3021",
        "project": "mjlaurent",
        "bug_id": "22",
        "T": "void testInsufficientDestinations() { final var invalidMap = \"\"\" 233 ###### #A..@# #...@# #a...# #.a..# #..a.# ###### \"\"\"; }",
        "C": "",
        "label": "P"
    },
    "625": {
        "dataset": "COMP 3021",
        "project": "mjlaurent",
        "bug_id": "23",
        "T": "void testSuperLargeMap() { try { new GameMap(Integer.MAX_VALUE, Integer.MAX_VALUE, Collections.emptySet(), 0); } catch (OutOfMemoryError e) { throw new RuntimeException(e); } }); }",
        "C": "public GameMap(int maxWidth, int maxHeight, Set<Position> destinations, int undoLimit) { // TODO this.maxWidth = maxWidth; this.maxHeight = maxHeight; this.destinations = destinations; this.undoLimit = Optional.of(undoLimit); this.gameMap = new HashMap<Position, Entity>(); this.playersPosition = new HashMap<Integer, Position>(); } public TerminalRenderingEngine(PrintStream outputSteam) { this.outputSteam = outputSteam; }",
        "label": "P"
    },
    "626": {
        "dataset": "COMP 3021",
        "project": "mjlaurent",
        "bug_id": "24",
        "T": "void testInvalidUndoLimit() { final var invalidMap = \"\"\" -233 ###### #A..@# #...@# #a.b@# #.a.@# #..a.# ###### \"\"\"; }",
        "C": "",
        "label": "P"
    },
    "627": {
        "dataset": "COMP 3021",
        "project": "mjlaurent",
        "bug_id": "25",
        "T": "void testEmptyMap() { final var invalidMap = \"\"; }",
        "C": "",
        "label": "P"
    },
    "628": {
        "dataset": "COMP 3021",
        "project": "mjlaurent",
        "bug_id": "26",
        "T": "void testMove(String input, String name, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); } private InputStream fixValueStream(String content) { final var bytes = content.getBytes(StandardCharsets.UTF_8); return new ByteArrayInputStream(bytes); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine(); // TODO switch (inputLine.toLowerCase()){ case \"exit\": return new Exit(-1); case \"a\": return new Move.Left(0); case \"s\": return new Move.Down(0); case \"w\": return new Move.Up(0); case \"d\": return new Move.Right(0); case \"h\": return new Move.Left(1); case \"j\": return new Move.Down(1); case \"k\": return new Move.Up(1); case \"l\": return new Move.Right(1); case \"u\": return new Undo(-1); default: return new InvalidInput(-1, StringResources.INVALID_INPUT_MESSAGE); } }",
        "label": "P"
    },
    "629": {
        "dataset": "COMP 3021",
        "project": "mjlaurent",
        "bug_id": "27",
        "T": "void testMove(String input, String name, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); } private InputStream fixValueStream(String content) { final var bytes = content.getBytes(StandardCharsets.UTF_8); return new ByteArrayInputStream(bytes); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine(); // TODO switch (inputLine.toLowerCase()){ case \"exit\": return new Exit(-1); case \"a\": return new Move.Left(0); case \"s\": return new Move.Down(0); case \"w\": return new Move.Up(0); case \"d\": return new Move.Right(0); case \"h\": return new Move.Left(1); case \"j\": return new Move.Down(1); case \"k\": return new Move.Up(1); case \"l\": return new Move.Right(1); case \"u\": return new Undo(-1); default: return new InvalidInput(-1, StringResources.INVALID_INPUT_MESSAGE); } }",
        "label": "P"
    },
    "630": {
        "dataset": "COMP 3021",
        "project": "mjlaurent",
        "bug_id": "28",
        "T": "void testMove(String input, String name, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); } private InputStream fixValueStream(String content) { final var bytes = content.getBytes(StandardCharsets.UTF_8); return new ByteArrayInputStream(bytes); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine(); // TODO switch (inputLine.toLowerCase()){ case \"exit\": return new Exit(-1); case \"a\": return new Move.Left(0); case \"s\": return new Move.Down(0); case \"w\": return new Move.Up(0); case \"d\": return new Move.Right(0); case \"h\": return new Move.Left(1); case \"j\": return new Move.Down(1); case \"k\": return new Move.Up(1); case \"l\": return new Move.Right(1); case \"u\": return new Undo(-1); default: return new InvalidInput(-1, StringResources.INVALID_INPUT_MESSAGE); } }",
        "label": "P"
    },
    "631": {
        "dataset": "COMP 3021",
        "project": "mjlaurent",
        "bug_id": "29",
        "T": "void testMove(String input, String name, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); } private InputStream fixValueStream(String content) { final var bytes = content.getBytes(StandardCharsets.UTF_8); return new ByteArrayInputStream(bytes); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine(); // TODO switch (inputLine.toLowerCase()){ case \"exit\": return new Exit(-1); case \"a\": return new Move.Left(0); case \"s\": return new Move.Down(0); case \"w\": return new Move.Up(0); case \"d\": return new Move.Right(0); case \"h\": return new Move.Left(1); case \"j\": return new Move.Down(1); case \"k\": return new Move.Up(1); case \"l\": return new Move.Right(1); case \"u\": return new Undo(-1); default: return new InvalidInput(-1, StringResources.INVALID_INPUT_MESSAGE); } }",
        "label": "P"
    },
    "632": {
        "dataset": "COMP 3021",
        "project": "mjlaurent",
        "bug_id": "30",
        "T": "void testMove(String input, String name, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); } private InputStream fixValueStream(String content) { final var bytes = content.getBytes(StandardCharsets.UTF_8); return new ByteArrayInputStream(bytes); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine(); // TODO switch (inputLine.toLowerCase()){ case \"exit\": return new Exit(-1); case \"a\": return new Move.Left(0); case \"s\": return new Move.Down(0); case \"w\": return new Move.Up(0); case \"d\": return new Move.Right(0); case \"h\": return new Move.Left(1); case \"j\": return new Move.Down(1); case \"k\": return new Move.Up(1); case \"l\": return new Move.Right(1); case \"u\": return new Undo(-1); default: return new InvalidInput(-1, StringResources.INVALID_INPUT_MESSAGE); } }",
        "label": "P"
    },
    "633": {
        "dataset": "COMP 3021",
        "project": "mjlaurent",
        "bug_id": "31",
        "T": "void testMove(String input, String name, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); } private InputStream fixValueStream(String content) { final var bytes = content.getBytes(StandardCharsets.UTF_8); return new ByteArrayInputStream(bytes); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine(); // TODO switch (inputLine.toLowerCase()){ case \"exit\": return new Exit(-1); case \"a\": return new Move.Left(0); case \"s\": return new Move.Down(0); case \"w\": return new Move.Up(0); case \"d\": return new Move.Right(0); case \"h\": return new Move.Left(1); case \"j\": return new Move.Down(1); case \"k\": return new Move.Up(1); case \"l\": return new Move.Right(1); case \"u\": return new Undo(-1); default: return new InvalidInput(-1, StringResources.INVALID_INPUT_MESSAGE); } }",
        "label": "P"
    },
    "634": {
        "dataset": "COMP 3021",
        "project": "mjlaurent",
        "bug_id": "32",
        "T": "void testMove(String input, String name, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); } private InputStream fixValueStream(String content) { final var bytes = content.getBytes(StandardCharsets.UTF_8); return new ByteArrayInputStream(bytes); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine(); // TODO switch (inputLine.toLowerCase()){ case \"exit\": return new Exit(-1); case \"a\": return new Move.Left(0); case \"s\": return new Move.Down(0); case \"w\": return new Move.Up(0); case \"d\": return new Move.Right(0); case \"h\": return new Move.Left(1); case \"j\": return new Move.Down(1); case \"k\": return new Move.Up(1); case \"l\": return new Move.Right(1); case \"u\": return new Undo(-1); default: return new InvalidInput(-1, StringResources.INVALID_INPUT_MESSAGE); } }",
        "label": "P"
    },
    "635": {
        "dataset": "COMP 3021",
        "project": "mjlaurent",
        "bug_id": "33",
        "T": "void testMove(String input, String name, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); } private InputStream fixValueStream(String content) { final var bytes = content.getBytes(StandardCharsets.UTF_8); return new ByteArrayInputStream(bytes); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine(); // TODO switch (inputLine.toLowerCase()){ case \"exit\": return new Exit(-1); case \"a\": return new Move.Left(0); case \"s\": return new Move.Down(0); case \"w\": return new Move.Up(0); case \"d\": return new Move.Right(0); case \"h\": return new Move.Left(1); case \"j\": return new Move.Down(1); case \"k\": return new Move.Up(1); case \"l\": return new Move.Right(1); case \"u\": return new Undo(-1); default: return new InvalidInput(-1, StringResources.INVALID_INPUT_MESSAGE); } }",
        "label": "P"
    },
    "636": {
        "dataset": "COMP 3021",
        "project": "mjlaurent",
        "bug_id": "34",
        "T": "void testUndo(String input, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine(); // TODO switch (inputLine.toLowerCase()){ case \"exit\": return new Exit(-1); case \"a\": return new Move.Left(0); case \"s\": return new Move.Down(0); case \"w\": return new Move.Up(0); case \"d\": return new Move.Right(0); case \"h\": return new Move.Left(1); case \"j\": return new Move.Down(1); case \"k\": return new Move.Up(1); case \"l\": return new Move.Right(1); case \"u\": return new Undo(-1); default: return new InvalidInput(-1, StringResources.INVALID_INPUT_MESSAGE); } }",
        "label": "P"
    },
    "637": {
        "dataset": "COMP 3021",
        "project": "mjlaurent",
        "bug_id": "35",
        "T": "void testInvalidInput() { final var inputStream = fixValueStream(\"blah blah\"); final var inputEngine = new TerminalInputEngine(inputStream); final var action = inputEngine.fetchAction(); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine(); // TODO switch (inputLine.toLowerCase()){ case \"exit\": return new Exit(-1); case \"a\": return new Move.Left(0); case \"s\": return new Move.Down(0); case \"w\": return new Move.Up(0); case \"d\": return new Move.Right(0); case \"h\": return new Move.Left(1); case \"j\": return new Move.Down(1); case \"k\": return new Move.Up(1); case \"l\": return new Move.Right(1); case \"u\": return new Undo(-1); default: return new InvalidInput(-1, StringResources.INVALID_INPUT_MESSAGE); } }",
        "label": "P"
    },
    "638": {
        "dataset": "COMP 3021",
        "project": "mjlaurent",
        "bug_id": "36",
        "T": "void testUndoWhenThereIsNoMove() { final var gameState = new GameState(TestHelper.parseGameMap(\"\"\" 233 ###### #A.a@# #..a@# ###### \"\"\" )); gameState.undo(); } private Entity generateEntity(int key) { return switch (key % 4) { case 0 -> new Box(0); case 1 -> new Empty(); case 2 -> new Player(0); case 3 -> new Wall(); default -> throw new ShouldNotReachException(); }; }",
        "C": "public GameState(@NotNull GameMap map) { // TODO this.map = map; this.undoQuota = map.undoLimit; this.currentMap = map.getGameMap(); this.playersPosition = map.playersPosition; this.checkpoint(); } public void undo() { // TODO if (this.undoQuota.isPresent()) { var value = this.undoQuota.get(); if (this.checkpoints.size() > 1) { if (value > 0) { this.undoQuota = Optional.of(value - 1); this.currentMap = copy(this.checkpoints.get(this.checkpoints.size() - 2)); this.checkpoints.remove(this.checkpoints.size() - 1); } else if (value == -1) { this.currentMap = copy(this.checkpoints.get(this.checkpoints.size() - 2)); this.checkpoints.remove(this.checkpoints.size() - 1); } else { return; } parsePlayerPosition(); } else if (this.checkpoints.size() == 1) { if (value > 0) { this.currentMap = copy(this.checkpoints.get(0)); } else if (value == -1) { this.currentMap = copy(this.checkpoints.get(0)); } else { return; } parsePlayerPosition(); } else { return; } } } /** * Get the maximum width of the game map. * This should be the same as that in {@link GameMap} public TerminalRenderingEngine(PrintStream outputSteam) { this.outputSteam = outputSteam; } public Box(int playerId) { this.playerId = playerId; } public Player(int id) { this.id = id; } public ShouldNotReachException() { super(\"This branch should not be reached.\"); }",
        "label": "P"
    },
    "639": {
        "dataset": "COMP 3021",
        "project": "mjlaurent",
        "bug_id": "37",
        "T": "void testGetUndoUnlimited() { final var gameState = new GameState(TestHelper.parseGameMap(\"\"\" -1 ###### #.Aa@# #..a@# ###### \"\"\" )); }",
        "C": "public GameState(@NotNull GameMap map) { // TODO this.map = map; this.undoQuota = map.undoLimit; this.currentMap = map.getGameMap(); this.playersPosition = map.playersPosition; this.checkpoint(); }",
        "label": "F"
    },
    "640": {
        "dataset": "COMP 3021",
        "project": "mjlaurent",
        "bug_id": "38",
        "T": "void testMapCopying() { final var maxWidth = 2333; final var maxHeight = 2333; final var random = new Random(); final var randomEntities = Stream.generate(() -> Position.of(random.nextInt(maxWidth), random.nextInt(maxHeight))) .distinct() .limit(100) .collect(Collectors.toMap(Function.identity(), it -> generateEntity(it.x()))); final var firstPos = randomEntities.keySet().stream().findFirst(); final var gameMap = new GameMap(maxWidth, maxHeight, Collections.singleton(firstPos.get()), 233); randomEntities.forEach(gameMap::putEntity); final var gameState = new GameState(gameMap); final var randomPosition = randomEntities.keySet().stream().findAny(); gameMap.putEntity(randomPosition.get(), new Empty()); randomEntities.forEach((p, e) -> assertEquals(e, gameState.getEntity(p))); }",
        "C": "public static @NotNull Position of(int x, int y) { return new Position(x, y); } public GameMap(int maxWidth, int maxHeight, Set<Position> destinations, int undoLimit) { // TODO this.maxWidth = maxWidth; this.maxHeight = maxHeight; this.destinations = destinations; this.undoLimit = Optional.of(undoLimit); this.gameMap = new HashMap<Position, Entity>(); this.playersPosition = new HashMap<Integer, Position>(); } public GameState(@NotNull GameMap map) { // TODO this.map = map; this.undoQuota = map.undoLimit; this.currentMap = map.getGameMap(); this.playersPosition = map.playersPosition; this.checkpoint(); } public void putEntity(Position position, Entity entity) { // TODO this.gameMap.put(position, entity); } public @Nullable Entity getEntity(@NotNull Position position) { // TODO return this.currentMap.get(position); } /** * Get all box destination positions as a set in the game map. * This should be the same as that in {@link GameMap}",
        "label": "F"
    },
    "641": {
        "dataset": "COMP 3021",
        "project": "mjlaurent",
        "bug_id": "39",
        "T": "void testUndoWhenThereIsMoveButNoCheckpoint() { final var gameState = new GameState(TestHelper.parseGameMap(\"\"\" 233 ###### #A.a@# #..a@# ###### \"\"\" )); gameState.move(Position.of(1, 1), Position.of(2, 1)); gameState.undo(); }",
        "C": "public GameState(@NotNull GameMap map) { // TODO this.map = map; this.undoQuota = map.undoLimit; this.currentMap = map.getGameMap(); this.playersPosition = map.playersPosition; this.checkpoint(); } public void move(Position from, Position to) { // TODO this.currentMap.put(to, this.currentMap.get(from)); this.currentMap.put(from, new Empty()); parsePlayerPosition(); } public static @NotNull Position of(int x, int y) { return new Position(x, y); } public void undo() { // TODO if (this.undoQuota.isPresent()) { var value = this.undoQuota.get(); if (this.checkpoints.size() > 1) { if (value > 0) { this.undoQuota = Optional.of(value - 1); this.currentMap = copy(this.checkpoints.get(this.checkpoints.size() - 2)); this.checkpoints.remove(this.checkpoints.size() - 1); } else if (value == -1) { this.currentMap = copy(this.checkpoints.get(this.checkpoints.size() - 2)); this.checkpoints.remove(this.checkpoints.size() - 1); } else { return; } parsePlayerPosition(); } else if (this.checkpoints.size() == 1) { if (value > 0) { this.currentMap = copy(this.checkpoints.get(0)); } else if (value == -1) { this.currentMap = copy(this.checkpoints.get(0)); } else { return; } parsePlayerPosition(); } else { return; } } } /** * Get the maximum width of the game map. * This should be the same as that in {@link GameMap}",
        "label": "P"
    },
    "642": {
        "dataset": "COMP 3021",
        "project": "mjlaurent",
        "bug_id": "40",
        "T": "void testGameExit() { final var gameState = mock(GameState.class); final var inputEngine = mock(TerminalInputEngine.class); final var renderingEngine = mock(TerminalRenderingEngine.class); when(gameState.isWin()).thenReturn(false, false, false); when(inputEngine.fetchAction()) .thenReturn(new InvalidInput(0, \"\"), new InvalidInput(0, \"\"), new Exit(0)); final var game = new TerminalSokobanGame(gameState, inputEngine, renderingEngine); game.run(); verify(renderingEngine, atLeastOnce()).message(any()); }",
        "C": "public InvalidInput(int initiator, @NotNull String message) { super(initiator); this.message = message; } public Exit(int initiator) { super(initiator); } public TerminalSokobanGame(GameState gameState, TerminalInputEngine inputEngine, TerminalRenderingEngine renderingEngine) { super(gameState); this.inputEngine = inputEngine; this.renderingEngine = renderingEngine; // TODO // Check the number of players if(gameState.getAllPlayerPositions().size() > 2){ throw new IllegalArgumentException(); } } public void run() { // TODO this.renderingEngine.message(StringResources.GAME_READY_MESSAGE); while(!this.shouldStop()){ this.renderingEngine.render(state); if(state.getUndoQuota().isPresent()){ var undoQuota = Integer.valueOf(state.getUndoQuota().get()); if(undoQuota == -1){ this.renderingEngine.message(StringResources.UNDO_QUOTA_UNLIMITED); } else { this.renderingEngine.message(String.format(StringResources.UNDO_QUOTA_TEMPLATE, undoQuota)); } } this.renderingEngine.message(StringResources.LINE_BREAKERS); Action action = inputEngine.fetchAction(); ActionResult result = this.processAction(action); if(result instanceof ActionResult.Failed){ this.renderingEngine.message(((ActionResult.Failed) result).getReason()); } } this.renderingEngine.render(state); this.renderingEngine.message(StringResources.GAME_EXIT_MESSAGE); if(state.isWin()){ this.renderingEngine.message(StringResources.WIN_MESSAGE); } }",
        "label": "P"
    },
    "643": {
        "dataset": "COMP 3021",
        "project": "mjlaurent",
        "bug_id": "41",
        "T": "void testGameWin() { final var gameState = mock(GameState.class); final var inputEngine = mock(TerminalInputEngine.class); final var renderingEngine = mock(TerminalRenderingEngine.class); when(gameState.isWin()).thenReturn(false, false, false, true); when(inputEngine.fetchAction()) .thenReturn(new InvalidInput(0, \"\")); final var game = new TerminalSokobanGame(gameState, inputEngine, renderingEngine); game.run(); verify(gameState, atLeastOnce()).isWin(); verify(renderingEngine, atLeastOnce()).message(any()); }",
        "C": "public InvalidInput(int initiator, @NotNull String message) { super(initiator); this.message = message; } public TerminalSokobanGame(GameState gameState, TerminalInputEngine inputEngine, TerminalRenderingEngine renderingEngine) { super(gameState); this.inputEngine = inputEngine; this.renderingEngine = renderingEngine; // TODO // Check the number of players if(gameState.getAllPlayerPositions().size() > 2){ throw new IllegalArgumentException(); } } public void run() { // TODO this.renderingEngine.message(StringResources.GAME_READY_MESSAGE); while(!this.shouldStop()){ this.renderingEngine.render(state); if(state.getUndoQuota().isPresent()){ var undoQuota = Integer.valueOf(state.getUndoQuota().get()); if(undoQuota == -1){ this.renderingEngine.message(StringResources.UNDO_QUOTA_UNLIMITED); } else { this.renderingEngine.message(String.format(StringResources.UNDO_QUOTA_TEMPLATE, undoQuota)); } } this.renderingEngine.message(StringResources.LINE_BREAKERS); Action action = inputEngine.fetchAction(); ActionResult result = this.processAction(action); if(result instanceof ActionResult.Failed){ this.renderingEngine.message(((ActionResult.Failed) result).getReason()); } } this.renderingEngine.render(state); this.renderingEngine.message(StringResources.GAME_EXIT_MESSAGE); if(state.isWin()){ this.renderingEngine.message(StringResources.WIN_MESSAGE); } }",
        "label": "P"
    },
    "644": {
        "dataset": "COMP 3021",
        "project": "mjlaurent",
        "bug_id": "42",
        "T": "void testMoreThanTwoPlayers() { final var gameState = mock(GameState.class); final var inputEngine = mock(TerminalInputEngine.class); final var renderingEngine = mock(TerminalRenderingEngine.class); when(gameState.getAllPlayerPositions()).thenReturn(new HashSet<>(Arrays.asList(Position.of(1, 1), Position.of(1, 2), Position.of(1, 3)))); }",
        "C": "public static @NotNull Position of(int x, int y) { return new Position(x, y); }",
        "label": "P"
    },
    "645": {
        "dataset": "COMP 3021",
        "project": "thliai",
        "bug_id": "0",
        "T": "void moveUp() { Position.of(233, 232), new Move.Up(-1).nextPosition(pos) ); }",
        "C": "public static @NotNull Position of(int x, int y) { return new Position(x, y); } public Up(int initiator) { super(initiator); }",
        "label": "P"
    },
    "646": {
        "dataset": "COMP 3021",
        "project": "thliai",
        "bug_id": "1",
        "T": "void moveDown() { Position.of(233, 234), new Move.Down(-1).nextPosition(pos) ); }",
        "C": "public static @NotNull Position of(int x, int y) { return new Position(x, y); } public Down(int initiator) { super(initiator); }",
        "label": "P"
    },
    "647": {
        "dataset": "COMP 3021",
        "project": "thliai",
        "bug_id": "2",
        "T": "void moveRight() { Position.of(234, 233), new Move.Right(-1).nextPosition(pos) ); }",
        "C": "public static @NotNull Position of(int x, int y) { return new Position(x, y); } public Right(int initiator) { super(initiator); }",
        "label": "P"
    },
    "648": {
        "dataset": "COMP 3021",
        "project": "thliai",
        "bug_id": "3",
        "T": "void testExceedingUndoQuota() { final var gameState = mock(GameState.class); when(gameState.getPlayerPositionById(anyInt())).thenReturn(Position.of(0, 0)); when(gameState.getUndoQuota()).thenReturn(Optional.of(0)); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Undo(0)); }",
        "C": "public Undo(int initiator) { super(initiator); }",
        "label": "P"
    },
    "649": {
        "dataset": "COMP 3021",
        "project": "thliai",
        "bug_id": "4",
        "T": "void testExit() { final var gameState = mock(GameState.class); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Exit(0)); }",
        "C": "public Exit(int initiator) { super(initiator); }",
        "label": "F"
    },
    "650": {
        "dataset": "COMP 3021",
        "project": "thliai",
        "bug_id": "5",
        "T": "void testUndoUnlimited() { final var gameState = mock(GameState.class); when(gameState.getPlayerPositionById(anyInt())).thenReturn(Position.of(0, 0)); when(gameState.getUndoQuota()).thenReturn(Optional.empty()); final var game = new SokobanGameForTesting(gameState); for (int i = 0; i < 10000; i++) { final var result = game.feedActionForProcessing(new Undo(0)); } verify(gameState, times(10000)).undo(); }",
        "C": "public TerminalRenderingEngine(PrintStream outputSteam) { this.outputSteam = outputSteam; } public Undo(int initiator) { super(initiator); }",
        "label": "F"
    },
    "651": {
        "dataset": "COMP 3021",
        "project": "thliai",
        "bug_id": "6",
        "T": "void testPushOtherPlayerBox() { String mapText = \"\"\" 233 ###### #AB.@# #b.a.# #@...# ###### \"\"\"; final var testMap = TestHelper.parseGameMap(mapText); final var gameState = spy(new GameState(testMap)); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Move.Down(0)); verify(gameState, never()).move(any(), any()); }",
        "C": "public GameState(@NotNull GameMap map) { this.gameMap = map; this.currentBoxLocations = new HashMap<>(); this.currentPlayerLocations = new HashMap<>(); this.moveHistoryOfEntity = new Stack<>(); if (map.getUndoLimit().isEmpty()) { this.undoQuota = -1; } else { this.undoQuota = map.getUndoLimit().get(); } this.exitCondition = false; // all the current locations come from GameMap at first for (int i = 0; i < getMapMaxHeight(); i++) { for (int j = 0; j < getMapMaxWidth(); j++) { Entity entity = map.getEntity(new Position(j, i)); if (entity instanceof Box) { currentBoxLocations.put(new Position(j, i), (char)(((Box)entity).getPlayerId()+97)); } else if (entity instanceof Player) { currentPlayerLocations.put((char)(((Player)entity).getId()+65), new Position(j, i)); } } } checkpoint(); // record the init state } public Down(int initiator) { super(initiator); }",
        "label": "P"
    },
    "652": {
        "dataset": "COMP 3021",
        "project": "thliai",
        "bug_id": "7",
        "T": "void testMoveNonExistingPlayer() { String mapText = \"\"\" 233 ###### #A..@# #a...# ##...# ###### \"\"\"; final var testMap = TestHelper.parseGameMap(mapText); final var gameState = spy(new GameState(testMap)); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Move.Down(23)); }",
        "C": "public GameState(@NotNull GameMap map) { this.gameMap = map; this.currentBoxLocations = new HashMap<>(); this.currentPlayerLocations = new HashMap<>(); this.moveHistoryOfEntity = new Stack<>(); if (map.getUndoLimit().isEmpty()) { this.undoQuota = -1; } else { this.undoQuota = map.getUndoLimit().get(); } this.exitCondition = false; // all the current locations come from GameMap at first for (int i = 0; i < getMapMaxHeight(); i++) { for (int j = 0; j < getMapMaxWidth(); j++) { Entity entity = map.getEntity(new Position(j, i)); if (entity instanceof Box) { currentBoxLocations.put(new Position(j, i), (char)(((Box)entity).getPlayerId()+97)); } else if (entity instanceof Player) { currentPlayerLocations.put((char)(((Player)entity).getId()+65), new Position(j, i)); } } } checkpoint(); // record the init state } public Down(int initiator) { super(initiator); }",
        "label": "P"
    },
    "653": {
        "dataset": "COMP 3021",
        "project": "thliai",
        "bug_id": "8",
        "T": "void testCheckpointWhenNeed() { final var gameState = spy(new GameState(TestHelper.parseGameMap(\"\"\" 233 ###### #.Aa@# #..a@# ###### \"\"\" ))); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Move.Right(0)); verify(gameState, times(1)).checkpoint(); }",
        "C": "public GameState(@NotNull GameMap map) { this.gameMap = map; this.currentBoxLocations = new HashMap<>(); this.currentPlayerLocations = new HashMap<>(); this.moveHistoryOfEntity = new Stack<>(); if (map.getUndoLimit().isEmpty()) { this.undoQuota = -1; } else { this.undoQuota = map.getUndoLimit().get(); } this.exitCondition = false; // all the current locations come from GameMap at first for (int i = 0; i < getMapMaxHeight(); i++) { for (int j = 0; j < getMapMaxWidth(); j++) { Entity entity = map.getEntity(new Position(j, i)); if (entity instanceof Box) { currentBoxLocations.put(new Position(j, i), (char)(((Box)entity).getPlayerId()+97)); } else if (entity instanceof Player) { currentPlayerLocations.put((char)(((Player)entity).getId()+65), new Position(j, i)); } } } checkpoint(); // record the init state } public Right(int initiator) { super(initiator); }",
        "label": "P"
    },
    "654": {
        "dataset": "COMP 3021",
        "project": "thliai",
        "bug_id": "9",
        "T": "void testPushBoxAgainstWall() { String mapText = \"\"\" 233 ###### #A..@# #a...# ##...# ###### \"\"\"; final var testMap = TestHelper.parseGameMap(mapText); final var gameState = spy(new GameState(testMap)); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Move.Down(0)); verify(gameState, never()).move(any(), any()); }",
        "C": "public GameState(@NotNull GameMap map) { this.gameMap = map; this.currentBoxLocations = new HashMap<>(); this.currentPlayerLocations = new HashMap<>(); this.moveHistoryOfEntity = new Stack<>(); if (map.getUndoLimit().isEmpty()) { this.undoQuota = -1; } else { this.undoQuota = map.getUndoLimit().get(); } this.exitCondition = false; // all the current locations come from GameMap at first for (int i = 0; i < getMapMaxHeight(); i++) { for (int j = 0; j < getMapMaxWidth(); j++) { Entity entity = map.getEntity(new Position(j, i)); if (entity instanceof Box) { currentBoxLocations.put(new Position(j, i), (char)(((Box)entity).getPlayerId()+97)); } else if (entity instanceof Player) { currentPlayerLocations.put((char)(((Player)entity).getId()+65), new Position(j, i)); } } } checkpoint(); // record the init state } public Down(int initiator) { super(initiator); }",
        "label": "P"
    },
    "655": {
        "dataset": "COMP 3021",
        "project": "thliai",
        "bug_id": "10",
        "T": "void testCheckpointWhenNotNeed() { final var gameState = spy(new GameState(TestHelper.parseGameMap(\"\"\" 233 ###### #A.a@# #..a@# ###### \"\"\" ))); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Move.Right(0)); verify(gameState, never()).checkpoint(); } private static class SokobanGameForTesting extends AbstractSokobanGame { protected SokobanGameForTesting(GameState gameState) { super(gameState); } @Override public void run() { } public ActionResult feedActionForProcessing(Action action) { return processAction(action); } }",
        "C": "public GameState(@NotNull GameMap map) { this.gameMap = map; this.currentBoxLocations = new HashMap<>(); this.currentPlayerLocations = new HashMap<>(); this.moveHistoryOfEntity = new Stack<>(); if (map.getUndoLimit().isEmpty()) { this.undoQuota = -1; } else { this.undoQuota = map.getUndoLimit().get(); } this.exitCondition = false; // all the current locations come from GameMap at first for (int i = 0; i < getMapMaxHeight(); i++) { for (int j = 0; j < getMapMaxWidth(); j++) { Entity entity = map.getEntity(new Position(j, i)); if (entity instanceof Box) { currentBoxLocations.put(new Position(j, i), (char)(((Box)entity).getPlayerId()+97)); } else if (entity instanceof Player) { currentPlayerLocations.put((char)(((Player)entity).getId()+65), new Position(j, i)); } } } checkpoint(); // record the init state } public Right(int initiator) { super(initiator); } public void run() { renderingEngine.message(StringResources.GAME_READY_MESSAGE); do { // game loop renderingEngine.render(state); renderingEngine.message(\"\"); if (state.getUndoQuota().isEmpty()) { // unlimited undo quota renderingEngine.message(String.format(StringResources.UNDO_QUOTA_TEMPLATE, StringResources.UNDO_QUOTA_UNLIMITED)); } else { // limited undo quota renderingEngine.message(String.format(StringResources.UNDO_QUOTA_TEMPLATE, state.getUndoQuota().get())); } renderingEngine.message(\">>>\"); Action action = inputEngine.fetchAction(); // get the action ActionResult result = processAction(action); // process the action // if fail to process, give message; if success, process if (result instanceof ActionResult.Failed) { renderingEngine.message(((ActionResult.Failed)result).getReason()); } else if (action instanceof InvalidInput) { renderingEngine.message(((InvalidInput)action).getMessage()); } else if (action instanceof Exit) { break; } else if (action instanceof Undo) { state.undo(); } // ignore Move since handled in AbstractSokobanGame::processAction } while (!shouldStop()); // end of game if (state.isWin()) { // win the game renderingEngine.render(state); renderingEngine.message(\"\"); renderingEngine.message(StringResources.WIN_MESSAGE); } else { // exit the game renderingEngine.render(state); renderingEngine.message(\"\"); renderingEngine.message(StringResources.GAME_EXIT_MESSAGE); } } protected ActionResult processAction(@NotNull Action action) { if (action instanceof Exit) { state.changeExitCondition(); return new ActionResult.Success(action); } else if (action instanceof InvalidInput) { return new ActionResult.Success(action); } else if (action instanceof Move.Up) { // does player exist? Position position = state.getPlayerPositionById(action.getInitiator()); if (position == null) { return new ActionResult.Failed(action, StringResources.PLAYER_NOT_FOUND); } // check upper location // case 1: Box if (state.getEntity(new Position(position.x(), position.y()-1)) instanceof Box) { int id = ((Box)state.getEntity(new Position(position.x(), position.y()-1))).getPlayerId(); // does the box belongs to you? if (id == action.getInitiator()) { // further check the upper position // moveable only when there is empty if (state.getEntity(new Position(position.x(), position.y()-2)) instanceof Empty) { state.move(new Position(position.x(), position.y()-1), new Position(position.x(), position.y()-2)); state.move(new Position(position.x(), position.y()), new Position(position.x(), position.y()-1)); state.checkpoint(); return new ActionResult.Success(action); } else { return new ActionResult.Failed(action, \"Failed to push the box.\"); } } else { return new ActionResult.Failed(action, \"You cannot move other players' boxes.\"); } } else if (state.getEntity(new Position(position.x(), position.y()-1)) instanceof Wall) { // case 2: Wall return new ActionResult.Failed(action, \"You hit a wall.\"); } else if (state.getEntity(new Position(position.x(), position.y()-1)) instanceof Player) { // case 3: Player return new ActionResult.Failed(action, \"You hit another player.\"); } else { // case 4: Empty state.move(new Position(position.x(), position.y()), new Position(position.x(), position.y()-1)); state.checkpoint(); return new ActionResult.Success(action); } } else if (action instanceof Move.Down) { // does player exist? Position position = state.getPlayerPositionById(action.getInitiator()); if (position == null) { return new ActionResult.Failed(action, StringResources.PLAYER_NOT_FOUND); } // check upper location // case 1: Box if (state.getEntity(new Position(position.x(), position.y() + 1)) instanceof Box) { int id = ((Box) state.getEntity(new Position(position.x(), position.y() + 1))).getPlayerId(); // does the box belongs to you? if (id == action.getInitiator()) { // further check the lower position // moveable only when there is empty if (state.getEntity(new Position(position.x(), position.y() + 2)) instanceof Empty) { state.move(new Position(position.x(), position.y() + 1), new Position(position.x(), position.y() + 2)); state.move(new Position(position.x(), position.y()), new Position(position.x(), position.y() + 1)); state.checkpoint(); return new ActionResult.Success(action); } else { return new ActionResult.Failed(action, \"Failed to push the box.\"); } } else { return new ActionResult.Failed(action, \"You cannot move other players' boxes.\"); } } else if (state.getEntity(new Position(position.x(), position.y() + 1)) instanceof Wall) { // case 2: Wall return new ActionResult.Failed(action, \"You hit a wall.\"); } else if (state.getEntity(new Position(position.x(), position.y() + 1)) instanceof Player) { // case 3: Player return new ActionResult.Failed(action, \"You hit another player.\"); } else { // case 4: Empty state.move(new Position(position.x(), position.y()), new Position(position.x(), position.y() + 1)); state.checkpoint(); return new ActionResult.Success(action); } } else if (action instanceof Move.Left) { // does player exist? Position position = state.getPlayerPositionById(action.getInitiator()); if (position == null) { return new ActionResult.Failed(action, StringResources.PLAYER_NOT_FOUND); } // check upper location // case 1: Box if (state.getEntity(new Position(position.x()-1, position.y())) instanceof Box) { int id = ((Box)state.getEntity(new Position(position.x()-1, position.y()))).getPlayerId(); // does the box belongs to you? if (id == action.getInitiator()) { // further check the left position // moveable only when there is empty if (state.getEntity(new Position(position.x()-2, position.y())) instanceof Empty) { state.move(new Position(position.x()-1, position.y()), new Position(position.x()-2, position.y())); state.move(new Position(position.x(), position.y()), new Position(position.x()-1, position.y())); state.checkpoint(); return new ActionResult.Success(action); } else { return new ActionResult.Failed(action, \"Failed to push the box.\"); } } else { return new ActionResult.Failed(action, \"You cannot move other players' boxes.\"); } } else if (state.getEntity(new Position(position.x()-1, position.y())) instanceof Wall) { // case 2: Wall return new ActionResult.Failed(action, \"You hit a wall.\"); } else if (state.getEntity(new Position(position.x()-1, position.y())) instanceof Player) { // case 3: Player return new ActionResult.Failed(action, \"You hit another player.\"); } else { // case 4: Empty state.move(new Position(position.x(), position.y()), new Position(position.x()-1, position.y())); state.checkpoint(); return new ActionResult.Success(action); } } else if (action instanceof Move.Right) { // does player exist? Position position = state.getPlayerPositionById(action.getInitiator()); if (position == null) { return new ActionResult.Failed(action, StringResources.PLAYER_NOT_FOUND); } // check upper location // case 1: Box if (state.getEntity(new Position(position.x()+1, position.y())) instanceof Box) { int id = ((Box)state.getEntity(new Position(position.x()+1, position.y()))).getPlayerId(); // does the box belongs to you? if (id == action.getInitiator()) { // further check the right position // moveable only when there is empty if (state.getEntity(new Position(position.x()+2, position.y())) instanceof Empty) { state.move(new Position(position.x()+1, position.y()), new Position(position.x()+2, position.y())); state.move(new Position(position.x(), position.y()), new Position(position.x()+1, position.y())); state.checkpoint(); return new ActionResult.Success(action); } else { return new ActionResult.Failed(action, \"Failed to push the box.\"); } } else { return new ActionResult.Failed(action, \"You cannot move other players' boxes.\"); } } else if (state.getEntity(new Position(position.x()+1, position.y())) instanceof Wall) { // case 2: Wall return new ActionResult.Failed(action, \"You hit a wall.\"); } else if (state.getEntity(new Position(position.x()+1, position.y())) instanceof Player) { // case 3: Player return new ActionResult.Failed(action, \"You hit another player.\"); } else { // case 4: Empty state.move(new Position(position.x(), position.y()), new Position(position.x()+1, position.y())); state.checkpoint(); return new ActionResult.Success(action); } } else { // undo Optional<Integer> undoQuota = state.getUndoQuota(); if (undoQuota.isPresent()) { // limited quota if (undoQuota.get() == 0) { // 0 quota left -> cannot undo anymore return new ActionResult.Failed(action, StringResources.UNDO_QUOTA_RUN_OUT); } else { // quota > 0 -> can undo return new ActionResult.Success(action); } } else { // unlimited quota return new ActionResult.Success(action); } } }",
        "label": "F"
    },
    "656": {
        "dataset": "COMP 3021",
        "project": "thliai",
        "bug_id": "11",
        "T": "void testHitAnotherPlayer() { String mapText = \"\"\" 233 ###### #A..@# #B...# #ab.@# ###### \"\"\"; final var testMap = TestHelper.parseGameMap(mapText); final var gameState = spy(new GameState(testMap)); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Move.Down(0)); verify(gameState, never()).move(any(), any()); }",
        "C": "public GameState(@NotNull GameMap map) { this.gameMap = map; this.currentBoxLocations = new HashMap<>(); this.currentPlayerLocations = new HashMap<>(); this.moveHistoryOfEntity = new Stack<>(); if (map.getUndoLimit().isEmpty()) { this.undoQuota = -1; } else { this.undoQuota = map.getUndoLimit().get(); } this.exitCondition = false; // all the current locations come from GameMap at first for (int i = 0; i < getMapMaxHeight(); i++) { for (int j = 0; j < getMapMaxWidth(); j++) { Entity entity = map.getEntity(new Position(j, i)); if (entity instanceof Box) { currentBoxLocations.put(new Position(j, i), (char)(((Box)entity).getPlayerId()+97)); } else if (entity instanceof Player) { currentPlayerLocations.put((char)(((Player)entity).getId()+65), new Position(j, i)); } } } checkpoint(); // record the init state } public Down(int initiator) { super(initiator); }",
        "label": "P"
    },
    "657": {
        "dataset": "COMP 3021",
        "project": "thliai",
        "bug_id": "12",
        "T": "void testUndoWithinQuota() { final var gameState = mock(GameState.class); when(gameState.getPlayerPositionById(anyInt())).thenReturn(Position.of(0, 0)); when(gameState.getUndoQuota()).thenReturn(Optional.of(1)); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Undo(0)); verify(gameState, times(1)).undo(); }",
        "C": "public Undo(int initiator) { super(initiator); }",
        "label": "F"
    },
    "658": {
        "dataset": "COMP 3021",
        "project": "thliai",
        "bug_id": "13",
        "T": "void testInvalidInput() { final var game = new SokobanGameForTesting(mock(GameState.class)); final var message = String.valueOf(new Random().nextLong()); final var action = new InvalidInput(-1, message); final var result = game.feedActionForProcessing(action); }",
        "C": "public InvalidInput(int initiator, @NotNull String message) { super(initiator); this.message = message; }",
        "label": "F"
    },
    "659": {
        "dataset": "COMP 3021",
        "project": "thliai",
        "bug_id": "14",
        "T": "void testUndoLimitParsing() { final var gameMap = TestHelper.parseGameMap(rectangularMap); }",
        "C": "",
        "label": "P"
    },
    "660": {
        "dataset": "COMP 3021",
        "project": "thliai",
        "bug_id": "15",
        "T": "void testWidthForNonRectangularMap() { final var gameMap = TestHelper.parseGameMap(nonRectangularMap); }",
        "C": "",
        "label": "P"
    },
    "661": {
        "dataset": "COMP 3021",
        "project": "thliai",
        "bug_id": "16",
        "T": "void testTwoPlayersMap() { final var twoPlayersMap = \"\"\" 233 ###### #A..@# #..B@# #....# #.a..# #..b.# ###### \"\"\"; final var gameMap = TestHelper.parseGameMap(twoPlayersMap); final var playerIds = gameMap.getPlayerIds(); final var expectedIds = new HashSet<Integer>(); expectedIds.add(0); expectedIds.add(1); }",
        "C": "public Set<Integer> getPlayerIds() { return playerIDs; }",
        "label": "F"
    },
    "662": {
        "dataset": "COMP 3021",
        "project": "thliai",
        "bug_id": "17",
        "T": "void testMapWithoutPlayer() { final var invalidMap = \"\"\" 233 ### #.# ### \"\"\"; } // @Tag(TestKind.HIDDEN) // @Test // void testUnmatchedPlayersAndBoxes() { // final var invalidMap = \"\"\" // 233 // ###### // #A..@# // #...@# // #a.b@# // #.a.@# // #..a.# // ###### // \"\"\"; // assertThrowsExactly(IllegalArgumentException.class, () -> TestHelper.parseGameMap(invalidMap)); // }",
        "C": "public TerminalRenderingEngine(PrintStream outputSteam) { this.outputSteam = outputSteam; }",
        "label": "P"
    },
    "663": {
        "dataset": "COMP 3021",
        "project": "thliai",
        "bug_id": "18",
        "T": "void testManyPlayersMap() { final var manyPlayersMap = \"\"\" 233 ###### #A.P@@# #vCB@@# #.cpD@# #Ga.d@# #g.bV@# ###### \"\"\"; final var gameMap = TestHelper.parseGameMap(manyPlayersMap); final var playerIds = gameMap.getPlayerIds(); final var expectedIds = new HashSet<>(Arrays.asList( 0, 'P' - 'A', 'C' - 'A', 'B' - 'A', 'D' - 'A', 'G' - 'A', 'V' - 'A' )); }",
        "C": "public Set<Integer> getPlayerIds() { return playerIDs; }",
        "label": "F"
    },
    "664": {
        "dataset": "COMP 3021",
        "project": "thliai",
        "bug_id": "19",
        "T": "void testHeightForNonRectangularMap() { final var gameMap = TestHelper.parseGameMap(nonRectangularMap); }",
        "C": "",
        "label": "P"
    },
    "665": {
        "dataset": "COMP 3021",
        "project": "thliai",
        "bug_id": "20",
        "T": "void testDuplicatedPlayers() { final var invalidMap = \"\"\" 233 ###### #A..@# #..A@# #....# #.a..# #..b.# ###### \"\"\"; }",
        "C": "",
        "label": "P"
    },
    "666": {
        "dataset": "COMP 3021",
        "project": "thliai",
        "bug_id": "21",
        "T": "void testParseMapWithoutUndoLimit() { final var invalidMap = String.join(\"\\n\", rectangularMap.lines().skip(1).toList()); }",
        "C": "",
        "label": "P"
    },
    "667": {
        "dataset": "COMP 3021",
        "project": "thliai",
        "bug_id": "22",
        "T": "void testInsufficientDestinations() { final var invalidMap = \"\"\" 233 ###### #A..@# #...@# #a...# #.a..# #..a.# ###### \"\"\"; }",
        "C": "",
        "label": "P"
    },
    "668": {
        "dataset": "COMP 3021",
        "project": "thliai",
        "bug_id": "23",
        "T": "void testSuperLargeMap() { try { new GameMap(Integer.MAX_VALUE, Integer.MAX_VALUE, Collections.emptySet(), 0); } catch (OutOfMemoryError e) { throw new RuntimeException(e); } }); }",
        "C": "public GameMap(int maxWidth, int maxHeight, Set<Position> destinations, int undoLimit) { this(maxWidth, maxHeight, destinations, Optional.ofNullable(undoLimit)); } public TerminalRenderingEngine(PrintStream outputSteam) { this.outputSteam = outputSteam; }",
        "label": "F"
    },
    "669": {
        "dataset": "COMP 3021",
        "project": "thliai",
        "bug_id": "24",
        "T": "void testInvalidUndoLimit() { final var invalidMap = \"\"\" -233 ###### #A..@# #...@# #a.b@# #.a.@# #..a.# ###### \"\"\"; }",
        "C": "",
        "label": "P"
    },
    "670": {
        "dataset": "COMP 3021",
        "project": "thliai",
        "bug_id": "25",
        "T": "void testEmptyMap() { final var invalidMap = \"\"; }",
        "C": "",
        "label": "P"
    },
    "671": {
        "dataset": "COMP 3021",
        "project": "thliai",
        "bug_id": "26",
        "T": "void testMove(String input, String name, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); } private InputStream fixValueStream(String content) { final var bytes = content.getBytes(StandardCharsets.UTF_8); return new ByteArrayInputStream(bytes); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine(); var inputLineUP = inputLine.toUpperCase(); switch (inputLineUP) { case \"W\": // player A move up return new Move.Up(0); case \"A\": // player A move left return new Move.Left(0); case \"S\": // player A move down return new Move.Down(0); case \"D\": // player A move right return new Move.Right(0); case \"K\": // player B move up return new Move.Up(1); case \"H\": // player B move left return new Move.Left(1); case \"J\": // player B move down return new Move.Down(1); case \"L\": // player B move down return new Move.Right(1); case \"U\": // undo return new Undo(-1); case \"EXIT\": // exit return new Exit(-1); default: // invalid return new InvalidInput(-1, StringResources.INVALID_INPUT_MESSAGE); } }",
        "label": "P"
    },
    "672": {
        "dataset": "COMP 3021",
        "project": "thliai",
        "bug_id": "27",
        "T": "void testMove(String input, String name, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); } private InputStream fixValueStream(String content) { final var bytes = content.getBytes(StandardCharsets.UTF_8); return new ByteArrayInputStream(bytes); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine(); var inputLineUP = inputLine.toUpperCase(); switch (inputLineUP) { case \"W\": // player A move up return new Move.Up(0); case \"A\": // player A move left return new Move.Left(0); case \"S\": // player A move down return new Move.Down(0); case \"D\": // player A move right return new Move.Right(0); case \"K\": // player B move up return new Move.Up(1); case \"H\": // player B move left return new Move.Left(1); case \"J\": // player B move down return new Move.Down(1); case \"L\": // player B move down return new Move.Right(1); case \"U\": // undo return new Undo(-1); case \"EXIT\": // exit return new Exit(-1); default: // invalid return new InvalidInput(-1, StringResources.INVALID_INPUT_MESSAGE); } }",
        "label": "P"
    },
    "673": {
        "dataset": "COMP 3021",
        "project": "thliai",
        "bug_id": "28",
        "T": "void testMove(String input, String name, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); } private InputStream fixValueStream(String content) { final var bytes = content.getBytes(StandardCharsets.UTF_8); return new ByteArrayInputStream(bytes); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine(); var inputLineUP = inputLine.toUpperCase(); switch (inputLineUP) { case \"W\": // player A move up return new Move.Up(0); case \"A\": // player A move left return new Move.Left(0); case \"S\": // player A move down return new Move.Down(0); case \"D\": // player A move right return new Move.Right(0); case \"K\": // player B move up return new Move.Up(1); case \"H\": // player B move left return new Move.Left(1); case \"J\": // player B move down return new Move.Down(1); case \"L\": // player B move down return new Move.Right(1); case \"U\": // undo return new Undo(-1); case \"EXIT\": // exit return new Exit(-1); default: // invalid return new InvalidInput(-1, StringResources.INVALID_INPUT_MESSAGE); } }",
        "label": "P"
    },
    "674": {
        "dataset": "COMP 3021",
        "project": "thliai",
        "bug_id": "29",
        "T": "void testMove(String input, String name, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); } private InputStream fixValueStream(String content) { final var bytes = content.getBytes(StandardCharsets.UTF_8); return new ByteArrayInputStream(bytes); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine(); var inputLineUP = inputLine.toUpperCase(); switch (inputLineUP) { case \"W\": // player A move up return new Move.Up(0); case \"A\": // player A move left return new Move.Left(0); case \"S\": // player A move down return new Move.Down(0); case \"D\": // player A move right return new Move.Right(0); case \"K\": // player B move up return new Move.Up(1); case \"H\": // player B move left return new Move.Left(1); case \"J\": // player B move down return new Move.Down(1); case \"L\": // player B move down return new Move.Right(1); case \"U\": // undo return new Undo(-1); case \"EXIT\": // exit return new Exit(-1); default: // invalid return new InvalidInput(-1, StringResources.INVALID_INPUT_MESSAGE); } }",
        "label": "P"
    },
    "675": {
        "dataset": "COMP 3021",
        "project": "thliai",
        "bug_id": "30",
        "T": "void testMove(String input, String name, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); } private InputStream fixValueStream(String content) { final var bytes = content.getBytes(StandardCharsets.UTF_8); return new ByteArrayInputStream(bytes); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine(); var inputLineUP = inputLine.toUpperCase(); switch (inputLineUP) { case \"W\": // player A move up return new Move.Up(0); case \"A\": // player A move left return new Move.Left(0); case \"S\": // player A move down return new Move.Down(0); case \"D\": // player A move right return new Move.Right(0); case \"K\": // player B move up return new Move.Up(1); case \"H\": // player B move left return new Move.Left(1); case \"J\": // player B move down return new Move.Down(1); case \"L\": // player B move down return new Move.Right(1); case \"U\": // undo return new Undo(-1); case \"EXIT\": // exit return new Exit(-1); default: // invalid return new InvalidInput(-1, StringResources.INVALID_INPUT_MESSAGE); } }",
        "label": "P"
    },
    "676": {
        "dataset": "COMP 3021",
        "project": "thliai",
        "bug_id": "31",
        "T": "void testMove(String input, String name, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); } private InputStream fixValueStream(String content) { final var bytes = content.getBytes(StandardCharsets.UTF_8); return new ByteArrayInputStream(bytes); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine(); var inputLineUP = inputLine.toUpperCase(); switch (inputLineUP) { case \"W\": // player A move up return new Move.Up(0); case \"A\": // player A move left return new Move.Left(0); case \"S\": // player A move down return new Move.Down(0); case \"D\": // player A move right return new Move.Right(0); case \"K\": // player B move up return new Move.Up(1); case \"H\": // player B move left return new Move.Left(1); case \"J\": // player B move down return new Move.Down(1); case \"L\": // player B move down return new Move.Right(1); case \"U\": // undo return new Undo(-1); case \"EXIT\": // exit return new Exit(-1); default: // invalid return new InvalidInput(-1, StringResources.INVALID_INPUT_MESSAGE); } }",
        "label": "P"
    },
    "677": {
        "dataset": "COMP 3021",
        "project": "thliai",
        "bug_id": "32",
        "T": "void testMove(String input, String name, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); } private InputStream fixValueStream(String content) { final var bytes = content.getBytes(StandardCharsets.UTF_8); return new ByteArrayInputStream(bytes); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine(); var inputLineUP = inputLine.toUpperCase(); switch (inputLineUP) { case \"W\": // player A move up return new Move.Up(0); case \"A\": // player A move left return new Move.Left(0); case \"S\": // player A move down return new Move.Down(0); case \"D\": // player A move right return new Move.Right(0); case \"K\": // player B move up return new Move.Up(1); case \"H\": // player B move left return new Move.Left(1); case \"J\": // player B move down return new Move.Down(1); case \"L\": // player B move down return new Move.Right(1); case \"U\": // undo return new Undo(-1); case \"EXIT\": // exit return new Exit(-1); default: // invalid return new InvalidInput(-1, StringResources.INVALID_INPUT_MESSAGE); } }",
        "label": "P"
    },
    "678": {
        "dataset": "COMP 3021",
        "project": "thliai",
        "bug_id": "33",
        "T": "void testMove(String input, String name, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); } private InputStream fixValueStream(String content) { final var bytes = content.getBytes(StandardCharsets.UTF_8); return new ByteArrayInputStream(bytes); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine(); var inputLineUP = inputLine.toUpperCase(); switch (inputLineUP) { case \"W\": // player A move up return new Move.Up(0); case \"A\": // player A move left return new Move.Left(0); case \"S\": // player A move down return new Move.Down(0); case \"D\": // player A move right return new Move.Right(0); case \"K\": // player B move up return new Move.Up(1); case \"H\": // player B move left return new Move.Left(1); case \"J\": // player B move down return new Move.Down(1); case \"L\": // player B move down return new Move.Right(1); case \"U\": // undo return new Undo(-1); case \"EXIT\": // exit return new Exit(-1); default: // invalid return new InvalidInput(-1, StringResources.INVALID_INPUT_MESSAGE); } }",
        "label": "P"
    },
    "679": {
        "dataset": "COMP 3021",
        "project": "thliai",
        "bug_id": "34",
        "T": "void testUndo(String input, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine(); var inputLineUP = inputLine.toUpperCase(); switch (inputLineUP) { case \"W\": // player A move up return new Move.Up(0); case \"A\": // player A move left return new Move.Left(0); case \"S\": // player A move down return new Move.Down(0); case \"D\": // player A move right return new Move.Right(0); case \"K\": // player B move up return new Move.Up(1); case \"H\": // player B move left return new Move.Left(1); case \"J\": // player B move down return new Move.Down(1); case \"L\": // player B move down return new Move.Right(1); case \"U\": // undo return new Undo(-1); case \"EXIT\": // exit return new Exit(-1); default: // invalid return new InvalidInput(-1, StringResources.INVALID_INPUT_MESSAGE); } }",
        "label": "P"
    },
    "680": {
        "dataset": "COMP 3021",
        "project": "thliai",
        "bug_id": "35",
        "T": "void testInvalidInput() { final var inputStream = fixValueStream(\"blah blah\"); final var inputEngine = new TerminalInputEngine(inputStream); final var action = inputEngine.fetchAction(); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine(); var inputLineUP = inputLine.toUpperCase(); switch (inputLineUP) { case \"W\": // player A move up return new Move.Up(0); case \"A\": // player A move left return new Move.Left(0); case \"S\": // player A move down return new Move.Down(0); case \"D\": // player A move right return new Move.Right(0); case \"K\": // player B move up return new Move.Up(1); case \"H\": // player B move left return new Move.Left(1); case \"J\": // player B move down return new Move.Down(1); case \"L\": // player B move down return new Move.Right(1); case \"U\": // undo return new Undo(-1); case \"EXIT\": // exit return new Exit(-1); default: // invalid return new InvalidInput(-1, StringResources.INVALID_INPUT_MESSAGE); } }",
        "label": "P"
    },
    "681": {
        "dataset": "COMP 3021",
        "project": "thliai",
        "bug_id": "36",
        "T": "void testUndoWhenThereIsNoMove() { final var gameState = new GameState(TestHelper.parseGameMap(\"\"\" 233 ###### #A.a@# #..a@# ###### \"\"\" )); gameState.undo(); } private Entity generateEntity(int key) { return switch (key % 4) { case 0 -> new Box(0); case 1 -> new Empty(); case 2 -> new Player(0); case 3 -> new Wall(); default -> throw new ShouldNotReachException(); }; }",
        "C": "public GameState(@NotNull GameMap map) { this.gameMap = map; this.currentBoxLocations = new HashMap<>(); this.currentPlayerLocations = new HashMap<>(); this.moveHistoryOfEntity = new Stack<>(); if (map.getUndoLimit().isEmpty()) { this.undoQuota = -1; } else { this.undoQuota = map.getUndoLimit().get(); } this.exitCondition = false; // all the current locations come from GameMap at first for (int i = 0; i < getMapMaxHeight(); i++) { for (int j = 0; j < getMapMaxWidth(); j++) { Entity entity = map.getEntity(new Position(j, i)); if (entity instanceof Box) { currentBoxLocations.put(new Position(j, i), (char)(((Box)entity).getPlayerId()+97)); } else if (entity instanceof Player) { currentPlayerLocations.put((char)(((Player)entity).getId()+65), new Position(j, i)); } } } checkpoint(); // record the init state } public void undo() { if (moveHistoryOfEntity.size() > 1) { // have move history (not only init state) moveHistoryOfEntity.pop(); // remove the recent move // perform deep copy to get back previous state Entity[][] entityArrayCheckpoint = moveHistoryOfEntity.peek(); // get the last move for (int i = 0; i < entityArrayCheckpoint.length; i++) { for (int j = 0; j < entityArrayCheckpoint[0].length; j++) { Entity entity = entityArrayCheckpoint[i][j]; if (entity instanceof Player) { int id = ((Player) entity).getId(); char charID = (char) (id + 65); gameMap.entityArray[i][j] = new Player(id); currentPlayerLocations.remove(charID); currentPlayerLocations.put(charID, new Position(j, i)); } else if (entity instanceof Box) { int id = ((Box) entity).getPlayerId(); char charID = (char) (id + 97); gameMap.entityArray[i][j] = new Box(id); currentBoxLocations.remove(new Position(j, i)); currentBoxLocations.put(new Position(j, i), charID); } else if (entity instanceof Wall) { gameMap.entityArray[i][j] = new Wall(); } else if (entity instanceof Empty) { gameMap.entityArray[i][j] = new Empty(); } else { // outside the wall gameMap.entityArray[i][j] = null; } } } if (undoQuota != -1) { undoQuota--; } } } /** * Get the maximum width of the game map. * This should be the same as that in {@link GameMap} public TerminalRenderingEngine(PrintStream outputSteam) { this.outputSteam = outputSteam; } public Box(int playerId) { this.playerId = playerId; } public Player(int id) { this.id = id; } public ShouldNotReachException() { super(\"This branch should not be reached.\"); }",
        "label": "P"
    },
    "682": {
        "dataset": "COMP 3021",
        "project": "thliai",
        "bug_id": "37",
        "T": "void testGetUndoUnlimited() { final var gameState = new GameState(TestHelper.parseGameMap(\"\"\" -1 ###### #.Aa@# #..a@# ###### \"\"\" )); }",
        "C": "public GameState(@NotNull GameMap map) { this.gameMap = map; this.currentBoxLocations = new HashMap<>(); this.currentPlayerLocations = new HashMap<>(); this.moveHistoryOfEntity = new Stack<>(); if (map.getUndoLimit().isEmpty()) { this.undoQuota = -1; } else { this.undoQuota = map.getUndoLimit().get(); } this.exitCondition = false; // all the current locations come from GameMap at first for (int i = 0; i < getMapMaxHeight(); i++) { for (int j = 0; j < getMapMaxWidth(); j++) { Entity entity = map.getEntity(new Position(j, i)); if (entity instanceof Box) { currentBoxLocations.put(new Position(j, i), (char)(((Box)entity).getPlayerId()+97)); } else if (entity instanceof Player) { currentPlayerLocations.put((char)(((Player)entity).getId()+65), new Position(j, i)); } } } checkpoint(); // record the init state }",
        "label": "P"
    },
    "683": {
        "dataset": "COMP 3021",
        "project": "thliai",
        "bug_id": "38",
        "T": "void testMapCopying() { final var maxWidth = 2333; final var maxHeight = 2333; final var random = new Random(); final var randomEntities = Stream.generate(() -> Position.of(random.nextInt(maxWidth), random.nextInt(maxHeight))) .distinct() .limit(100) .collect(Collectors.toMap(Function.identity(), it -> generateEntity(it.x()))); final var firstPos = randomEntities.keySet().stream().findFirst(); final var gameMap = new GameMap(maxWidth, maxHeight, Collections.singleton(firstPos.get()), 233); randomEntities.forEach(gameMap::putEntity); final var gameState = new GameState(gameMap); final var randomPosition = randomEntities.keySet().stream().findAny(); gameMap.putEntity(randomPosition.get(), new Empty()); randomEntities.forEach((p, e) -> assertEquals(e, gameState.getEntity(p))); }",
        "C": "public static @NotNull Position of(int x, int y) { return new Position(x, y); } public GameMap(int maxWidth, int maxHeight, Set<Position> destinations, int undoLimit) { this(maxWidth, maxHeight, destinations, Optional.ofNullable(undoLimit)); } public GameState(@NotNull GameMap map) { this.gameMap = map; this.currentBoxLocations = new HashMap<>(); this.currentPlayerLocations = new HashMap<>(); this.moveHistoryOfEntity = new Stack<>(); if (map.getUndoLimit().isEmpty()) { this.undoQuota = -1; } else { this.undoQuota = map.getUndoLimit().get(); } this.exitCondition = false; // all the current locations come from GameMap at first for (int i = 0; i < getMapMaxHeight(); i++) { for (int j = 0; j < getMapMaxWidth(); j++) { Entity entity = map.getEntity(new Position(j, i)); if (entity instanceof Box) { currentBoxLocations.put(new Position(j, i), (char)(((Box)entity).getPlayerId()+97)); } else if (entity instanceof Player) { currentPlayerLocations.put((char)(((Player)entity).getId()+65), new Position(j, i)); } } } checkpoint(); // record the init state } public void putEntity(Position position, Entity entity) { entityArray[position.y()][position.x()] = entity; } public @Nullable Entity getEntity(@NotNull Position position) { return gameMap.entityArray[position.y()][position.x()]; } /** * Get all box destination positions as a set in the game map. * This should be the same as that in {@link GameMap}",
        "label": "F"
    },
    "684": {
        "dataset": "COMP 3021",
        "project": "thliai",
        "bug_id": "39",
        "T": "void testUndoWhenThereIsMoveButNoCheckpoint() { final var gameState = new GameState(TestHelper.parseGameMap(\"\"\" 233 ###### #A.a@# #..a@# ###### \"\"\" )); gameState.move(Position.of(1, 1), Position.of(2, 1)); gameState.undo(); }",
        "C": "public GameState(@NotNull GameMap map) { this.gameMap = map; this.currentBoxLocations = new HashMap<>(); this.currentPlayerLocations = new HashMap<>(); this.moveHistoryOfEntity = new Stack<>(); if (map.getUndoLimit().isEmpty()) { this.undoQuota = -1; } else { this.undoQuota = map.getUndoLimit().get(); } this.exitCondition = false; // all the current locations come from GameMap at first for (int i = 0; i < getMapMaxHeight(); i++) { for (int j = 0; j < getMapMaxWidth(); j++) { Entity entity = map.getEntity(new Position(j, i)); if (entity instanceof Box) { currentBoxLocations.put(new Position(j, i), (char)(((Box)entity).getPlayerId()+97)); } else if (entity instanceof Player) { currentPlayerLocations.put((char)(((Player)entity).getId()+65), new Position(j, i)); } } } checkpoint(); // record the init state } public void move(Position from, Position to) { Entity entity = getEntity(from); if (entity instanceof Player) { int id = ((Player)entity).getId(); char charID = (char)(id+65); currentPlayerLocations.remove(charID); currentPlayerLocations.put(charID, new Position(to.x(), to.y())); } else if (entity instanceof Box) { int id = ((Box)entity).getPlayerId(); char charID = (char)(id+97); currentBoxLocations.remove(from); currentBoxLocations.put(to, charID); } GameMap.entityArray[to.y()][to.x()] = GameMap.entityArray[from.y()][from.x()]; GameMap.entityArray[from.y()][from.x()] = new Empty(); } /** * Record a checkpoint of the game state, including: * <li>All current positions of entities in the game map.</li> * <li>Current undo quota</li> * <p> * Checkpoint is used in {@link GameState#undo()} public static @NotNull Position of(int x, int y) { return new Position(x, y); } public void undo() { if (moveHistoryOfEntity.size() > 1) { // have move history (not only init state) moveHistoryOfEntity.pop(); // remove the recent move // perform deep copy to get back previous state Entity[][] entityArrayCheckpoint = moveHistoryOfEntity.peek(); // get the last move for (int i = 0; i < entityArrayCheckpoint.length; i++) { for (int j = 0; j < entityArrayCheckpoint[0].length; j++) { Entity entity = entityArrayCheckpoint[i][j]; if (entity instanceof Player) { int id = ((Player) entity).getId(); char charID = (char) (id + 65); gameMap.entityArray[i][j] = new Player(id); currentPlayerLocations.remove(charID); currentPlayerLocations.put(charID, new Position(j, i)); } else if (entity instanceof Box) { int id = ((Box) entity).getPlayerId(); char charID = (char) (id + 97); gameMap.entityArray[i][j] = new Box(id); currentBoxLocations.remove(new Position(j, i)); currentBoxLocations.put(new Position(j, i), charID); } else if (entity instanceof Wall) { gameMap.entityArray[i][j] = new Wall(); } else if (entity instanceof Empty) { gameMap.entityArray[i][j] = new Empty(); } else { // outside the wall gameMap.entityArray[i][j] = null; } } } if (undoQuota != -1) { undoQuota--; } } } /** * Get the maximum width of the game map. * This should be the same as that in {@link GameMap}",
        "label": "P"
    },
    "685": {
        "dataset": "COMP 3021",
        "project": "thliai",
        "bug_id": "40",
        "T": "void testGameExit() { final var gameState = mock(GameState.class); final var inputEngine = mock(TerminalInputEngine.class); final var renderingEngine = mock(TerminalRenderingEngine.class); when(gameState.isWin()).thenReturn(false, false, false); when(inputEngine.fetchAction()) .thenReturn(new InvalidInput(0, \"\"), new InvalidInput(0, \"\"), new Exit(0)); final var game = new TerminalSokobanGame(gameState, inputEngine, renderingEngine); game.run(); verify(renderingEngine, atLeastOnce()).message(any()); }",
        "C": "public InvalidInput(int initiator, @NotNull String message) { super(initiator); this.message = message; } public Exit(int initiator) { super(initiator); } public TerminalSokobanGame(GameState gameState, TerminalInputEngine inputEngine, TerminalRenderingEngine renderingEngine) { super(gameState); this.inputEngine = inputEngine; this.renderingEngine = renderingEngine; // Check the number of players int numOfPlayers = 0; for (int i = 0; i < gameState.getMapMaxHeight(); i++) { for (int j = 0; j < gameState.getMapMaxWidth(); j++) { if (gameState.getEntity(new Position(j, i)) instanceof Player) { numOfPlayers++; } } } if (numOfPlayers > 2) { throw new IllegalArgumentException(); } } public void run() { renderingEngine.message(StringResources.GAME_READY_MESSAGE); do { // game loop renderingEngine.render(state); renderingEngine.message(\"\"); if (state.getUndoQuota().isEmpty()) { // unlimited undo quota renderingEngine.message(String.format(StringResources.UNDO_QUOTA_TEMPLATE, StringResources.UNDO_QUOTA_UNLIMITED)); } else { // limited undo quota renderingEngine.message(String.format(StringResources.UNDO_QUOTA_TEMPLATE, state.getUndoQuota().get())); } renderingEngine.message(\">>>\"); Action action = inputEngine.fetchAction(); // get the action ActionResult result = processAction(action); // process the action // if fail to process, give message; if success, process if (result instanceof ActionResult.Failed) { renderingEngine.message(((ActionResult.Failed)result).getReason()); } else if (action instanceof InvalidInput) { renderingEngine.message(((InvalidInput)action).getMessage()); } else if (action instanceof Exit) { break; } else if (action instanceof Undo) { state.undo(); } // ignore Move since handled in AbstractSokobanGame::processAction } while (!shouldStop()); // end of game if (state.isWin()) { // win the game renderingEngine.render(state); renderingEngine.message(\"\"); renderingEngine.message(StringResources.WIN_MESSAGE); } else { // exit the game renderingEngine.render(state); renderingEngine.message(\"\"); renderingEngine.message(StringResources.GAME_EXIT_MESSAGE); } }",
        "label": "P"
    },
    "686": {
        "dataset": "COMP 3021",
        "project": "thliai",
        "bug_id": "41",
        "T": "void testGameWin() { final var gameState = mock(GameState.class); final var inputEngine = mock(TerminalInputEngine.class); final var renderingEngine = mock(TerminalRenderingEngine.class); when(gameState.isWin()).thenReturn(false, false, false, true); when(inputEngine.fetchAction()) .thenReturn(new InvalidInput(0, \"\")); final var game = new TerminalSokobanGame(gameState, inputEngine, renderingEngine); game.run(); verify(gameState, atLeastOnce()).isWin(); verify(renderingEngine, atLeastOnce()).message(any()); }",
        "C": "public InvalidInput(int initiator, @NotNull String message) { super(initiator); this.message = message; } public TerminalSokobanGame(GameState gameState, TerminalInputEngine inputEngine, TerminalRenderingEngine renderingEngine) { super(gameState); this.inputEngine = inputEngine; this.renderingEngine = renderingEngine; // Check the number of players int numOfPlayers = 0; for (int i = 0; i < gameState.getMapMaxHeight(); i++) { for (int j = 0; j < gameState.getMapMaxWidth(); j++) { if (gameState.getEntity(new Position(j, i)) instanceof Player) { numOfPlayers++; } } } if (numOfPlayers > 2) { throw new IllegalArgumentException(); } } public void run() { renderingEngine.message(StringResources.GAME_READY_MESSAGE); do { // game loop renderingEngine.render(state); renderingEngine.message(\"\"); if (state.getUndoQuota().isEmpty()) { // unlimited undo quota renderingEngine.message(String.format(StringResources.UNDO_QUOTA_TEMPLATE, StringResources.UNDO_QUOTA_UNLIMITED)); } else { // limited undo quota renderingEngine.message(String.format(StringResources.UNDO_QUOTA_TEMPLATE, state.getUndoQuota().get())); } renderingEngine.message(\">>>\"); Action action = inputEngine.fetchAction(); // get the action ActionResult result = processAction(action); // process the action // if fail to process, give message; if success, process if (result instanceof ActionResult.Failed) { renderingEngine.message(((ActionResult.Failed)result).getReason()); } else if (action instanceof InvalidInput) { renderingEngine.message(((InvalidInput)action).getMessage()); } else if (action instanceof Exit) { break; } else if (action instanceof Undo) { state.undo(); } // ignore Move since handled in AbstractSokobanGame::processAction } while (!shouldStop()); // end of game if (state.isWin()) { // win the game renderingEngine.render(state); renderingEngine.message(\"\"); renderingEngine.message(StringResources.WIN_MESSAGE); } else { // exit the game renderingEngine.render(state); renderingEngine.message(\"\"); renderingEngine.message(StringResources.GAME_EXIT_MESSAGE); } }",
        "label": "P"
    },
    "687": {
        "dataset": "COMP 3021",
        "project": "thliai",
        "bug_id": "42",
        "T": "void testMoreThanTwoPlayers() { final var gameState = mock(GameState.class); final var inputEngine = mock(TerminalInputEngine.class); final var renderingEngine = mock(TerminalRenderingEngine.class); when(gameState.getAllPlayerPositions()).thenReturn(new HashSet<>(Arrays.asList(Position.of(1, 1), Position.of(1, 2), Position.of(1, 3)))); }",
        "C": "public static @NotNull Position of(int x, int y) { return new Position(x, y); }",
        "label": "F"
    },
    "688": {
        "dataset": "COMP 3021",
        "project": "rliba",
        "bug_id": "0",
        "T": "void moveUp() { Position.of(233, 232), new Move.Up(-1).nextPosition(pos) ); }",
        "C": "public static @NotNull Position of(int x, int y) { return new Position(x, y); } public Up(int initiator) { super(initiator); }",
        "label": "P"
    },
    "689": {
        "dataset": "COMP 3021",
        "project": "rliba",
        "bug_id": "1",
        "T": "void moveDown() { Position.of(233, 234), new Move.Down(-1).nextPosition(pos) ); }",
        "C": "public static @NotNull Position of(int x, int y) { return new Position(x, y); } public Down(int initiator) { super(initiator); }",
        "label": "P"
    },
    "690": {
        "dataset": "COMP 3021",
        "project": "rliba",
        "bug_id": "2",
        "T": "void moveRight() { Position.of(234, 233), new Move.Right(-1).nextPosition(pos) ); }",
        "C": "public static @NotNull Position of(int x, int y) { return new Position(x, y); } public Right(int initiator) { super(initiator); }",
        "label": "P"
    },
    "691": {
        "dataset": "COMP 3021",
        "project": "rliba",
        "bug_id": "3",
        "T": "void testExceedingUndoQuota() { final var gameState = mock(GameState.class); when(gameState.getPlayerPositionById(anyInt())).thenReturn(Position.of(0, 0)); when(gameState.getUndoQuota()).thenReturn(Optional.of(0)); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Undo(0)); }",
        "C": "public Undo(int initiator) { super(initiator); }",
        "label": "P"
    },
    "692": {
        "dataset": "COMP 3021",
        "project": "rliba",
        "bug_id": "4",
        "T": "void testExit() { final var gameState = mock(GameState.class); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Exit(0)); }",
        "C": "public Exit(int initiator) { super(initiator); }",
        "label": "F"
    },
    "693": {
        "dataset": "COMP 3021",
        "project": "rliba",
        "bug_id": "5",
        "T": "void testUndoUnlimited() { final var gameState = mock(GameState.class); when(gameState.getPlayerPositionById(anyInt())).thenReturn(Position.of(0, 0)); when(gameState.getUndoQuota()).thenReturn(Optional.empty()); final var game = new SokobanGameForTesting(gameState); for (int i = 0; i < 10000; i++) { final var result = game.feedActionForProcessing(new Undo(0)); } verify(gameState, times(10000)).undo(); }",
        "C": "public TerminalRenderingEngine(PrintStream outputSteam) { this.outputSteam = outputSteam; } public Undo(int initiator) { super(initiator); }",
        "label": "F"
    },
    "694": {
        "dataset": "COMP 3021",
        "project": "rliba",
        "bug_id": "6",
        "T": "void testPushOtherPlayerBox() { String mapText = \"\"\" 233 ###### #AB.@# #b.a.# #@...# ###### \"\"\"; final var testMap = TestHelper.parseGameMap(mapText); final var gameState = spy(new GameState(testMap)); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Move.Down(0)); verify(gameState, never()).move(any(), any()); }",
        "C": "public GameState(@NotNull GameMap map) { // TODO originalMap = new GameMap(map.getMaxWidth(), map.getMaxHeight(), map.getDestinations(), map.getUndoLimit().get()); originalMap.putMap(map.getMap()); currentState = map; lastMap = new GameMap(map.getMaxWidth(), map.getMaxHeight(), map.getDestinations(), map.getUndoLimit().get()); lastMap.putMap(map.getMap()); undoQuota = map.getUndoLimit(); checkPointList = new ArrayList<>(); return; //throw new NotImplementedException(); } public Down(int initiator) { super(initiator); }",
        "label": "P"
    },
    "695": {
        "dataset": "COMP 3021",
        "project": "rliba",
        "bug_id": "7",
        "T": "void testMoveNonExistingPlayer() { String mapText = \"\"\" 233 ###### #A..@# #a...# ##...# ###### \"\"\"; final var testMap = TestHelper.parseGameMap(mapText); final var gameState = spy(new GameState(testMap)); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Move.Down(23)); }",
        "C": "public GameState(@NotNull GameMap map) { // TODO originalMap = new GameMap(map.getMaxWidth(), map.getMaxHeight(), map.getDestinations(), map.getUndoLimit().get()); originalMap.putMap(map.getMap()); currentState = map; lastMap = new GameMap(map.getMaxWidth(), map.getMaxHeight(), map.getDestinations(), map.getUndoLimit().get()); lastMap.putMap(map.getMap()); undoQuota = map.getUndoLimit(); checkPointList = new ArrayList<>(); return; //throw new NotImplementedException(); } public Down(int initiator) { super(initiator); }",
        "label": "F"
    },
    "696": {
        "dataset": "COMP 3021",
        "project": "rliba",
        "bug_id": "8",
        "T": "void testCheckpointWhenNeed() { final var gameState = spy(new GameState(TestHelper.parseGameMap(\"\"\" 233 ###### #.Aa@# #..a@# ###### \"\"\" ))); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Move.Right(0)); verify(gameState, times(1)).checkpoint(); }",
        "C": "public GameState(@NotNull GameMap map) { // TODO originalMap = new GameMap(map.getMaxWidth(), map.getMaxHeight(), map.getDestinations(), map.getUndoLimit().get()); originalMap.putMap(map.getMap()); currentState = map; lastMap = new GameMap(map.getMaxWidth(), map.getMaxHeight(), map.getDestinations(), map.getUndoLimit().get()); lastMap.putMap(map.getMap()); undoQuota = map.getUndoLimit(); checkPointList = new ArrayList<>(); return; //throw new NotImplementedException(); } public Right(int initiator) { super(initiator); }",
        "label": "P"
    },
    "697": {
        "dataset": "COMP 3021",
        "project": "rliba",
        "bug_id": "9",
        "T": "void testPushBoxAgainstWall() { String mapText = \"\"\" 233 ###### #A..@# #a...# ##...# ###### \"\"\"; final var testMap = TestHelper.parseGameMap(mapText); final var gameState = spy(new GameState(testMap)); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Move.Down(0)); verify(gameState, never()).move(any(), any()); }",
        "C": "public GameState(@NotNull GameMap map) { // TODO originalMap = new GameMap(map.getMaxWidth(), map.getMaxHeight(), map.getDestinations(), map.getUndoLimit().get()); originalMap.putMap(map.getMap()); currentState = map; lastMap = new GameMap(map.getMaxWidth(), map.getMaxHeight(), map.getDestinations(), map.getUndoLimit().get()); lastMap.putMap(map.getMap()); undoQuota = map.getUndoLimit(); checkPointList = new ArrayList<>(); return; //throw new NotImplementedException(); } public Down(int initiator) { super(initiator); }",
        "label": "P"
    },
    "698": {
        "dataset": "COMP 3021",
        "project": "rliba",
        "bug_id": "10",
        "T": "void testCheckpointWhenNotNeed() { final var gameState = spy(new GameState(TestHelper.parseGameMap(\"\"\" 233 ###### #A.a@# #..a@# ###### \"\"\" ))); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Move.Right(0)); verify(gameState, never()).checkpoint(); } private static class SokobanGameForTesting extends AbstractSokobanGame { protected SokobanGameForTesting(GameState gameState) { super(gameState); } @Override public void run() { } public ActionResult feedActionForProcessing(Action action) { return processAction(action); } }",
        "C": "public GameState(@NotNull GameMap map) { // TODO originalMap = new GameMap(map.getMaxWidth(), map.getMaxHeight(), map.getDestinations(), map.getUndoLimit().get()); originalMap.putMap(map.getMap()); currentState = map; lastMap = new GameMap(map.getMaxWidth(), map.getMaxHeight(), map.getDestinations(), map.getUndoLimit().get()); lastMap.putMap(map.getMap()); undoQuota = map.getUndoLimit(); checkPointList = new ArrayList<>(); return; //throw new NotImplementedException(); } public Right(int initiator) { super(initiator); } public void run() { // TODO System.out.println(\"Sokoban game is ready.\"); renderingEngine.render(gameState); System.out.println(\"Undo Quota: \" + gameState.getUndoQuota()); while (true) { if (shouldStop() || inputEngine.fetchAction() instanceof Exit) return; else { var action = inputEngine.fetchAction(); processAction(action); renderingEngine.render(state); } } //throw new NotImplementedException(); } protected ActionResult processAction(@NotNull Action action) { // TODO if (action instanceof Exit) return new ActionResult.Success(action); else if (action instanceof Undo) if (state.getUndoQuota().get() <= 0) return new ActionResult.Failed(action, \"You have run out of your undo quota.\"); else return new ActionResult.Success(action); else if(action instanceof Move) { var nextPos = ((Move) action).nextPosition(state.getPlayerPositionById(action.getInitiator())); Entity nextEnt = state.getEntity(nextPos); if (nextEnt instanceof Empty) { state.move(state.getPlayerPositionById(action.getInitiator()), nextPos); return new ActionResult.Success(action); } else if (nextEnt instanceof Wall) return new ActionResult.Failed(action, \"You hit a Wall.\"); else if (nextEnt instanceof Box) { var id = ((Box) nextEnt).getPlayerId(); if (id != action.getInitiator()) return new ActionResult.Failed(action, \"Failed to push the box.\"); var nextNextPos = ((Move) action).nextPosition(nextPos); if (state.getEntity(nextNextPos) instanceof Wall || state.getEntity(nextNextPos) instanceof Box) return new ActionResult.Failed(action, \"Failed to push the box.\"); else state.move(nextPos, nextNextPos); state.move(state.getPlayerPositionById(action.getInitiator()), nextPos); return new ActionResult.Success(action); } } throw new IllegalArgumentException(); //throw new NotImplementedException(); }",
        "label": "P"
    },
    "699": {
        "dataset": "COMP 3021",
        "project": "rliba",
        "bug_id": "11",
        "T": "void testHitAnotherPlayer() { String mapText = \"\"\" 233 ###### #A..@# #B...# #ab.@# ###### \"\"\"; final var testMap = TestHelper.parseGameMap(mapText); final var gameState = spy(new GameState(testMap)); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Move.Down(0)); verify(gameState, never()).move(any(), any()); }",
        "C": "public GameState(@NotNull GameMap map) { // TODO originalMap = new GameMap(map.getMaxWidth(), map.getMaxHeight(), map.getDestinations(), map.getUndoLimit().get()); originalMap.putMap(map.getMap()); currentState = map; lastMap = new GameMap(map.getMaxWidth(), map.getMaxHeight(), map.getDestinations(), map.getUndoLimit().get()); lastMap.putMap(map.getMap()); undoQuota = map.getUndoLimit(); checkPointList = new ArrayList<>(); return; //throw new NotImplementedException(); } public Down(int initiator) { super(initiator); }",
        "label": "F"
    },
    "700": {
        "dataset": "COMP 3021",
        "project": "rliba",
        "bug_id": "12",
        "T": "void testUndoWithinQuota() { final var gameState = mock(GameState.class); when(gameState.getPlayerPositionById(anyInt())).thenReturn(Position.of(0, 0)); when(gameState.getUndoQuota()).thenReturn(Optional.of(1)); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Undo(0)); verify(gameState, times(1)).undo(); }",
        "C": "public Undo(int initiator) { super(initiator); }",
        "label": "F"
    },
    "701": {
        "dataset": "COMP 3021",
        "project": "rliba",
        "bug_id": "13",
        "T": "void testInvalidInput() { final var game = new SokobanGameForTesting(mock(GameState.class)); final var message = String.valueOf(new Random().nextLong()); final var action = new InvalidInput(-1, message); final var result = game.feedActionForProcessing(action); }",
        "C": "public InvalidInput(int initiator, @NotNull String message) { super(initiator); this.message = message; }",
        "label": "F"
    },
    "702": {
        "dataset": "COMP 3021",
        "project": "rliba",
        "bug_id": "14",
        "T": "void testUndoLimitParsing() { final var gameMap = TestHelper.parseGameMap(rectangularMap); }",
        "C": "",
        "label": "P"
    },
    "703": {
        "dataset": "COMP 3021",
        "project": "rliba",
        "bug_id": "15",
        "T": "void testWidthForNonRectangularMap() { final var gameMap = TestHelper.parseGameMap(nonRectangularMap); }",
        "C": "",
        "label": "P"
    },
    "704": {
        "dataset": "COMP 3021",
        "project": "rliba",
        "bug_id": "16",
        "T": "void testTwoPlayersMap() { final var twoPlayersMap = \"\"\" 233 ###### #A..@# #..B@# #....# #.a..# #..b.# ###### \"\"\"; final var gameMap = TestHelper.parseGameMap(twoPlayersMap); final var playerIds = gameMap.getPlayerIds(); final var expectedIds = new HashSet<Integer>(); expectedIds.add(0); expectedIds.add(1); }",
        "C": "public Set<Integer> getPlayerIds() { // TODO Set<Integer> players = new HashSet<>(); for (var i : playerList) players.add(i.getId()); return players; //throw new NotImplementedException(); }",
        "label": "P"
    },
    "705": {
        "dataset": "COMP 3021",
        "project": "rliba",
        "bug_id": "17",
        "T": "void testMapWithoutPlayer() { final var invalidMap = \"\"\" 233 ### #.# ### \"\"\"; } // @Tag(TestKind.HIDDEN) // @Test // void testUnmatchedPlayersAndBoxes() { // final var invalidMap = \"\"\" // 233 // ###### // #A..@# // #...@# // #a.b@# // #.a.@# // #..a.# // ###### // \"\"\"; // assertThrowsExactly(IllegalArgumentException.class, () -> TestHelper.parseGameMap(invalidMap)); // }",
        "C": "public TerminalRenderingEngine(PrintStream outputSteam) { this.outputSteam = outputSteam; }",
        "label": "P"
    },
    "706": {
        "dataset": "COMP 3021",
        "project": "rliba",
        "bug_id": "18",
        "T": "void testManyPlayersMap() { final var manyPlayersMap = \"\"\" 233 ###### #A.P@@# #vCB@@# #.cpD@# #Ga.d@# #g.bV@# ###### \"\"\"; final var gameMap = TestHelper.parseGameMap(manyPlayersMap); final var playerIds = gameMap.getPlayerIds(); final var expectedIds = new HashSet<>(Arrays.asList( 0, 'P' - 'A', 'C' - 'A', 'B' - 'A', 'D' - 'A', 'G' - 'A', 'V' - 'A' )); }",
        "C": "public Set<Integer> getPlayerIds() { // TODO Set<Integer> players = new HashSet<>(); for (var i : playerList) players.add(i.getId()); return players; //throw new NotImplementedException(); }",
        "label": "P"
    },
    "707": {
        "dataset": "COMP 3021",
        "project": "rliba",
        "bug_id": "19",
        "T": "void testHeightForNonRectangularMap() { final var gameMap = TestHelper.parseGameMap(nonRectangularMap); }",
        "C": "",
        "label": "P"
    },
    "708": {
        "dataset": "COMP 3021",
        "project": "rliba",
        "bug_id": "20",
        "T": "void testDuplicatedPlayers() { final var invalidMap = \"\"\" 233 ###### #A..@# #..A@# #....# #.a..# #..b.# ###### \"\"\"; }",
        "C": "",
        "label": "P"
    },
    "709": {
        "dataset": "COMP 3021",
        "project": "rliba",
        "bug_id": "21",
        "T": "void testParseMapWithoutUndoLimit() { final var invalidMap = String.join(\"\\n\", rectangularMap.lines().skip(1).toList()); }",
        "C": "",
        "label": "P"
    },
    "710": {
        "dataset": "COMP 3021",
        "project": "rliba",
        "bug_id": "22",
        "T": "void testInsufficientDestinations() { final var invalidMap = \"\"\" 233 ###### #A..@# #...@# #a...# #.a..# #..a.# ###### \"\"\"; }",
        "C": "",
        "label": "P"
    },
    "711": {
        "dataset": "COMP 3021",
        "project": "rliba",
        "bug_id": "23",
        "T": "void testSuperLargeMap() { try { new GameMap(Integer.MAX_VALUE, Integer.MAX_VALUE, Collections.emptySet(), 0); } catch (OutOfMemoryError e) { throw new RuntimeException(e); } }); }",
        "C": "public GameMap(int maxWidth, int maxHeight, Set<Position> destinations, int undoLimit) { // TODO mapWidth = maxWidth; mapHeight = maxHeight; for (var i : destinations) this.destinations.add(i); this.undoLimit = undoLimit; this.map = new ArrayList<>(); this.playerList = new ArrayList<>(); return; //throw new NotImplementedException(); } /** * Parses the map from a string representation. * The first line is undo limit. * Starting from the second line, the game map is represented as follows, * <li># represents a {@link Wall}</li> * <li>@ represents a box destination.</li> * <li>Any upper-case letter represents a {@link Player}.</li> * <li> * Any lower-case letter represents a {@link Box} that is only movable by the player with the corresponding upper-case letter. * For instance, box \"a\" can only be moved by player \"A\" and not movable by player \"B\". * </li> * <li>. represents an {@link Empty} position in the map, meaning there is no player or box currently at this position.</li> * <p> * Notes: * <li> * There can be at most 26 players. * All implementations of classes in the hk.ust.comp3021.game package should support up to 26 players. * </li> * <li> * For simplicity, we assume the given map is bounded with a closed boundary. * There is no need to check this point. * </li> * <li> * Example maps can be found in \"src/main/resources\". * </li> * * @param mapText The string representation. * @return The parsed GameMap object. * @throws IllegalArgumentException if undo limit is negative but not -1. * @throws IllegalArgumentException if there are multiple same upper-case letters, i.e., one player can only exist at one position. * @throws IllegalArgumentException if there are no players in the map. * @throws IllegalArgumentException if the number of boxes is not equal to the number of box destinations. * @throws IllegalArgumentException if there are boxes whose {@link Box#getPlayerId()} public TerminalRenderingEngine(PrintStream outputSteam) { this.outputSteam = outputSteam; }",
        "label": "P"
    },
    "712": {
        "dataset": "COMP 3021",
        "project": "rliba",
        "bug_id": "24",
        "T": "void testInvalidUndoLimit() { final var invalidMap = \"\"\" -233 ###### #A..@# #...@# #a.b@# #.a.@# #..a.# ###### \"\"\"; }",
        "C": "",
        "label": "P"
    },
    "713": {
        "dataset": "COMP 3021",
        "project": "rliba",
        "bug_id": "25",
        "T": "void testEmptyMap() { final var invalidMap = \"\"; }",
        "C": "",
        "label": "P"
    },
    "714": {
        "dataset": "COMP 3021",
        "project": "rliba",
        "bug_id": "26",
        "T": "void testMove(String input, String name, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); } private InputStream fixValueStream(String content) { final var bytes = content.getBytes(StandardCharsets.UTF_8); return new ByteArrayInputStream(bytes); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine(); inputLine.toLowerCase(); Action action; if (inputLine.equals(\"exit\")) { action = new Exit(0); return action; } // TODO if (inputLine.charAt(0) == 'w') action = new Move.Up(0); else if (inputLine.charAt(0) == 'a') action = new Move.Left(0); else if (inputLine.charAt(0) == 's') action = new Move.Down(0); else if (inputLine.charAt(0) == 'd') action = new Move.Right(0); else if (inputLine.charAt(0) == 'j') action = new Move.Left(1); else if (inputLine.charAt(0) == 'i') action = new Move.Up(1); else if (inputLine.charAt(0) == 'k') action = new Move.Down(1); else if (inputLine.charAt(0) == 'l') action = new Move.Right(1); else if (inputLine.charAt(0) == 'u') action = new Undo(0); else throw new IllegalArgumentException(); return action; //throw new NotImplementedException(); }",
        "label": "F"
    },
    "715": {
        "dataset": "COMP 3021",
        "project": "rliba",
        "bug_id": "27",
        "T": "void testMove(String input, String name, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); } private InputStream fixValueStream(String content) { final var bytes = content.getBytes(StandardCharsets.UTF_8); return new ByteArrayInputStream(bytes); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine(); inputLine.toLowerCase(); Action action; if (inputLine.equals(\"exit\")) { action = new Exit(0); return action; } // TODO if (inputLine.charAt(0) == 'w') action = new Move.Up(0); else if (inputLine.charAt(0) == 'a') action = new Move.Left(0); else if (inputLine.charAt(0) == 's') action = new Move.Down(0); else if (inputLine.charAt(0) == 'd') action = new Move.Right(0); else if (inputLine.charAt(0) == 'j') action = new Move.Left(1); else if (inputLine.charAt(0) == 'i') action = new Move.Up(1); else if (inputLine.charAt(0) == 'k') action = new Move.Down(1); else if (inputLine.charAt(0) == 'l') action = new Move.Right(1); else if (inputLine.charAt(0) == 'u') action = new Undo(0); else throw new IllegalArgumentException(); return action; //throw new NotImplementedException(); }",
        "label": "F"
    },
    "716": {
        "dataset": "COMP 3021",
        "project": "rliba",
        "bug_id": "28",
        "T": "void testMove(String input, String name, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); } private InputStream fixValueStream(String content) { final var bytes = content.getBytes(StandardCharsets.UTF_8); return new ByteArrayInputStream(bytes); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine(); inputLine.toLowerCase(); Action action; if (inputLine.equals(\"exit\")) { action = new Exit(0); return action; } // TODO if (inputLine.charAt(0) == 'w') action = new Move.Up(0); else if (inputLine.charAt(0) == 'a') action = new Move.Left(0); else if (inputLine.charAt(0) == 's') action = new Move.Down(0); else if (inputLine.charAt(0) == 'd') action = new Move.Right(0); else if (inputLine.charAt(0) == 'j') action = new Move.Left(1); else if (inputLine.charAt(0) == 'i') action = new Move.Up(1); else if (inputLine.charAt(0) == 'k') action = new Move.Down(1); else if (inputLine.charAt(0) == 'l') action = new Move.Right(1); else if (inputLine.charAt(0) == 'u') action = new Undo(0); else throw new IllegalArgumentException(); return action; //throw new NotImplementedException(); }",
        "label": "F"
    },
    "717": {
        "dataset": "COMP 3021",
        "project": "rliba",
        "bug_id": "29",
        "T": "void testMove(String input, String name, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); } private InputStream fixValueStream(String content) { final var bytes = content.getBytes(StandardCharsets.UTF_8); return new ByteArrayInputStream(bytes); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine(); inputLine.toLowerCase(); Action action; if (inputLine.equals(\"exit\")) { action = new Exit(0); return action; } // TODO if (inputLine.charAt(0) == 'w') action = new Move.Up(0); else if (inputLine.charAt(0) == 'a') action = new Move.Left(0); else if (inputLine.charAt(0) == 's') action = new Move.Down(0); else if (inputLine.charAt(0) == 'd') action = new Move.Right(0); else if (inputLine.charAt(0) == 'j') action = new Move.Left(1); else if (inputLine.charAt(0) == 'i') action = new Move.Up(1); else if (inputLine.charAt(0) == 'k') action = new Move.Down(1); else if (inputLine.charAt(0) == 'l') action = new Move.Right(1); else if (inputLine.charAt(0) == 'u') action = new Undo(0); else throw new IllegalArgumentException(); return action; //throw new NotImplementedException(); }",
        "label": "F"
    },
    "718": {
        "dataset": "COMP 3021",
        "project": "rliba",
        "bug_id": "30",
        "T": "void testMove(String input, String name, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); } private InputStream fixValueStream(String content) { final var bytes = content.getBytes(StandardCharsets.UTF_8); return new ByteArrayInputStream(bytes); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine(); inputLine.toLowerCase(); Action action; if (inputLine.equals(\"exit\")) { action = new Exit(0); return action; } // TODO if (inputLine.charAt(0) == 'w') action = new Move.Up(0); else if (inputLine.charAt(0) == 'a') action = new Move.Left(0); else if (inputLine.charAt(0) == 's') action = new Move.Down(0); else if (inputLine.charAt(0) == 'd') action = new Move.Right(0); else if (inputLine.charAt(0) == 'j') action = new Move.Left(1); else if (inputLine.charAt(0) == 'i') action = new Move.Up(1); else if (inputLine.charAt(0) == 'k') action = new Move.Down(1); else if (inputLine.charAt(0) == 'l') action = new Move.Right(1); else if (inputLine.charAt(0) == 'u') action = new Undo(0); else throw new IllegalArgumentException(); return action; //throw new NotImplementedException(); }",
        "label": "F"
    },
    "719": {
        "dataset": "COMP 3021",
        "project": "rliba",
        "bug_id": "31",
        "T": "void testMove(String input, String name, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); } private InputStream fixValueStream(String content) { final var bytes = content.getBytes(StandardCharsets.UTF_8); return new ByteArrayInputStream(bytes); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine(); inputLine.toLowerCase(); Action action; if (inputLine.equals(\"exit\")) { action = new Exit(0); return action; } // TODO if (inputLine.charAt(0) == 'w') action = new Move.Up(0); else if (inputLine.charAt(0) == 'a') action = new Move.Left(0); else if (inputLine.charAt(0) == 's') action = new Move.Down(0); else if (inputLine.charAt(0) == 'd') action = new Move.Right(0); else if (inputLine.charAt(0) == 'j') action = new Move.Left(1); else if (inputLine.charAt(0) == 'i') action = new Move.Up(1); else if (inputLine.charAt(0) == 'k') action = new Move.Down(1); else if (inputLine.charAt(0) == 'l') action = new Move.Right(1); else if (inputLine.charAt(0) == 'u') action = new Undo(0); else throw new IllegalArgumentException(); return action; //throw new NotImplementedException(); }",
        "label": "F"
    },
    "720": {
        "dataset": "COMP 3021",
        "project": "rliba",
        "bug_id": "32",
        "T": "void testMove(String input, String name, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); } private InputStream fixValueStream(String content) { final var bytes = content.getBytes(StandardCharsets.UTF_8); return new ByteArrayInputStream(bytes); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine(); inputLine.toLowerCase(); Action action; if (inputLine.equals(\"exit\")) { action = new Exit(0); return action; } // TODO if (inputLine.charAt(0) == 'w') action = new Move.Up(0); else if (inputLine.charAt(0) == 'a') action = new Move.Left(0); else if (inputLine.charAt(0) == 's') action = new Move.Down(0); else if (inputLine.charAt(0) == 'd') action = new Move.Right(0); else if (inputLine.charAt(0) == 'j') action = new Move.Left(1); else if (inputLine.charAt(0) == 'i') action = new Move.Up(1); else if (inputLine.charAt(0) == 'k') action = new Move.Down(1); else if (inputLine.charAt(0) == 'l') action = new Move.Right(1); else if (inputLine.charAt(0) == 'u') action = new Undo(0); else throw new IllegalArgumentException(); return action; //throw new NotImplementedException(); }",
        "label": "F"
    },
    "721": {
        "dataset": "COMP 3021",
        "project": "rliba",
        "bug_id": "33",
        "T": "void testMove(String input, String name, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); } private InputStream fixValueStream(String content) { final var bytes = content.getBytes(StandardCharsets.UTF_8); return new ByteArrayInputStream(bytes); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine(); inputLine.toLowerCase(); Action action; if (inputLine.equals(\"exit\")) { action = new Exit(0); return action; } // TODO if (inputLine.charAt(0) == 'w') action = new Move.Up(0); else if (inputLine.charAt(0) == 'a') action = new Move.Left(0); else if (inputLine.charAt(0) == 's') action = new Move.Down(0); else if (inputLine.charAt(0) == 'd') action = new Move.Right(0); else if (inputLine.charAt(0) == 'j') action = new Move.Left(1); else if (inputLine.charAt(0) == 'i') action = new Move.Up(1); else if (inputLine.charAt(0) == 'k') action = new Move.Down(1); else if (inputLine.charAt(0) == 'l') action = new Move.Right(1); else if (inputLine.charAt(0) == 'u') action = new Undo(0); else throw new IllegalArgumentException(); return action; //throw new NotImplementedException(); }",
        "label": "F"
    },
    "722": {
        "dataset": "COMP 3021",
        "project": "rliba",
        "bug_id": "34",
        "T": "void testUndo(String input, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine(); inputLine.toLowerCase(); Action action; if (inputLine.equals(\"exit\")) { action = new Exit(0); return action; } // TODO if (inputLine.charAt(0) == 'w') action = new Move.Up(0); else if (inputLine.charAt(0) == 'a') action = new Move.Left(0); else if (inputLine.charAt(0) == 's') action = new Move.Down(0); else if (inputLine.charAt(0) == 'd') action = new Move.Right(0); else if (inputLine.charAt(0) == 'j') action = new Move.Left(1); else if (inputLine.charAt(0) == 'i') action = new Move.Up(1); else if (inputLine.charAt(0) == 'k') action = new Move.Down(1); else if (inputLine.charAt(0) == 'l') action = new Move.Right(1); else if (inputLine.charAt(0) == 'u') action = new Undo(0); else throw new IllegalArgumentException(); return action; //throw new NotImplementedException(); }",
        "label": "F"
    },
    "723": {
        "dataset": "COMP 3021",
        "project": "rliba",
        "bug_id": "35",
        "T": "void testInvalidInput() { final var inputStream = fixValueStream(\"blah blah\"); final var inputEngine = new TerminalInputEngine(inputStream); final var action = inputEngine.fetchAction(); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine(); inputLine.toLowerCase(); Action action; if (inputLine.equals(\"exit\")) { action = new Exit(0); return action; } // TODO if (inputLine.charAt(0) == 'w') action = new Move.Up(0); else if (inputLine.charAt(0) == 'a') action = new Move.Left(0); else if (inputLine.charAt(0) == 's') action = new Move.Down(0); else if (inputLine.charAt(0) == 'd') action = new Move.Right(0); else if (inputLine.charAt(0) == 'j') action = new Move.Left(1); else if (inputLine.charAt(0) == 'i') action = new Move.Up(1); else if (inputLine.charAt(0) == 'k') action = new Move.Down(1); else if (inputLine.charAt(0) == 'l') action = new Move.Right(1); else if (inputLine.charAt(0) == 'u') action = new Undo(0); else throw new IllegalArgumentException(); return action; //throw new NotImplementedException(); }",
        "label": "F"
    },
    "724": {
        "dataset": "COMP 3021",
        "project": "rliba",
        "bug_id": "36",
        "T": "void testUndoWhenThereIsNoMove() { final var gameState = new GameState(TestHelper.parseGameMap(\"\"\" 233 ###### #A.a@# #..a@# ###### \"\"\" )); gameState.undo(); } private Entity generateEntity(int key) { return switch (key % 4) { case 0 -> new Box(0); case 1 -> new Empty(); case 2 -> new Player(0); case 3 -> new Wall(); default -> throw new ShouldNotReachException(); }; }",
        "C": "public GameState(@NotNull GameMap map) { // TODO originalMap = new GameMap(map.getMaxWidth(), map.getMaxHeight(), map.getDestinations(), map.getUndoLimit().get()); originalMap.putMap(map.getMap()); currentState = map; lastMap = new GameMap(map.getMaxWidth(), map.getMaxHeight(), map.getDestinations(), map.getUndoLimit().get()); lastMap.putMap(map.getMap()); undoQuota = map.getUndoLimit(); checkPointList = new ArrayList<>(); return; //throw new NotImplementedException(); } public void undo() { // TODO //printMap(); int index = checkPointList.size() - 1; if(index < 0) currentState.putMap(originalMap.getMap()); else { currentState.putMap(checkPointList.get(index)); if (index == 0) lastMap.putMap(originalMap.getMap()); else lastMap.putMap(checkPointList.get(index - 1)); //printMap(); checkPointList.remove(index); var undoLeft = undoQuota.get(); undoLeft = Integer.valueOf((undoLeft.intValue() - 1)); undoQuota = Optional.of(undoLeft); } return; //throw new NotImplementedException(); } /** * Get the maximum width of the game map. * This should be the same as that in {@link GameMap} public TerminalRenderingEngine(PrintStream outputSteam) { this.outputSteam = outputSteam; } public Box(int playerId) { this.playerId = playerId; } public Player(int id) { this.id = id; } public ShouldNotReachException() { super(\"This branch should not be reached.\"); }",
        "label": "P"
    },
    "725": {
        "dataset": "COMP 3021",
        "project": "rliba",
        "bug_id": "37",
        "T": "void testGetUndoUnlimited() { final var gameState = new GameState(TestHelper.parseGameMap(\"\"\" -1 ###### #.Aa@# #..a@# ###### \"\"\" )); }",
        "C": "public GameState(@NotNull GameMap map) { // TODO originalMap = new GameMap(map.getMaxWidth(), map.getMaxHeight(), map.getDestinations(), map.getUndoLimit().get()); originalMap.putMap(map.getMap()); currentState = map; lastMap = new GameMap(map.getMaxWidth(), map.getMaxHeight(), map.getDestinations(), map.getUndoLimit().get()); lastMap.putMap(map.getMap()); undoQuota = map.getUndoLimit(); checkPointList = new ArrayList<>(); return; //throw new NotImplementedException(); }",
        "label": "F"
    },
    "726": {
        "dataset": "COMP 3021",
        "project": "rliba",
        "bug_id": "38",
        "T": "void testMapCopying() { final var maxWidth = 2333; final var maxHeight = 2333; final var random = new Random(); final var randomEntities = Stream.generate(() -> Position.of(random.nextInt(maxWidth), random.nextInt(maxHeight))) .distinct() .limit(100) .collect(Collectors.toMap(Function.identity(), it -> generateEntity(it.x()))); final var firstPos = randomEntities.keySet().stream().findFirst(); final var gameMap = new GameMap(maxWidth, maxHeight, Collections.singleton(firstPos.get()), 233); randomEntities.forEach(gameMap::putEntity); final var gameState = new GameState(gameMap); final var randomPosition = randomEntities.keySet().stream().findAny(); gameMap.putEntity(randomPosition.get(), new Empty()); randomEntities.forEach((p, e) -> assertEquals(e, gameState.getEntity(p))); }",
        "C": "public static @NotNull Position of(int x, int y) { return new Position(x, y); } public GameMap(int maxWidth, int maxHeight, Set<Position> destinations, int undoLimit) { // TODO mapWidth = maxWidth; mapHeight = maxHeight; for (var i : destinations) this.destinations.add(i); this.undoLimit = undoLimit; this.map = new ArrayList<>(); this.playerList = new ArrayList<>(); return; //throw new NotImplementedException(); } /** * Parses the map from a string representation. * The first line is undo limit. * Starting from the second line, the game map is represented as follows, * <li># represents a {@link Wall}</li> * <li>@ represents a box destination.</li> * <li>Any upper-case letter represents a {@link Player}.</li> * <li> * Any lower-case letter represents a {@link Box} that is only movable by the player with the corresponding upper-case letter. * For instance, box \"a\" can only be moved by player \"A\" and not movable by player \"B\". * </li> * <li>. represents an {@link Empty} position in the map, meaning there is no player or box currently at this position.</li> * <p> * Notes: * <li> * There can be at most 26 players. * All implementations of classes in the hk.ust.comp3021.game package should support up to 26 players. * </li> * <li> * For simplicity, we assume the given map is bounded with a closed boundary. * There is no need to check this point. * </li> * <li> * Example maps can be found in \"src/main/resources\". * </li> * * @param mapText The string representation. * @return The parsed GameMap object. * @throws IllegalArgumentException if undo limit is negative but not -1. * @throws IllegalArgumentException if there are multiple same upper-case letters, i.e., one player can only exist at one position. * @throws IllegalArgumentException if there are no players in the map. * @throws IllegalArgumentException if the number of boxes is not equal to the number of box destinations. * @throws IllegalArgumentException if there are boxes whose {@link Box#getPlayerId()} public GameState(@NotNull GameMap map) { // TODO originalMap = new GameMap(map.getMaxWidth(), map.getMaxHeight(), map.getDestinations(), map.getUndoLimit().get()); originalMap.putMap(map.getMap()); currentState = map; lastMap = new GameMap(map.getMaxWidth(), map.getMaxHeight(), map.getDestinations(), map.getUndoLimit().get()); lastMap.putMap(map.getMap()); undoQuota = map.getUndoLimit(); checkPointList = new ArrayList<>(); return; //throw new NotImplementedException(); } public void putEntity(Position position, Entity entity) { // TODO //System.out.println(\"Tring to put at (\"+position.x()+\", \"+position.y()+\")\"); this.map.get(position.y()).set(position.x(), entity); return; //throw new NotImplementedException(); } public @Nullable Entity getEntity(@NotNull Position position) { // TODO return currentState.getMap().get(position.y()).get(position.x()); //throw new NotImplementedException(); } /** * Get all box destination positions as a set in the game map. * This should be the same as that in {@link GameMap}",
        "label": "F"
    },
    "727": {
        "dataset": "COMP 3021",
        "project": "rliba",
        "bug_id": "39",
        "T": "void testUndoWhenThereIsMoveButNoCheckpoint() { final var gameState = new GameState(TestHelper.parseGameMap(\"\"\" 233 ###### #A.a@# #..a@# ###### \"\"\" )); gameState.move(Position.of(1, 1), Position.of(2, 1)); gameState.undo(); }",
        "C": "public GameState(@NotNull GameMap map) { // TODO originalMap = new GameMap(map.getMaxWidth(), map.getMaxHeight(), map.getDestinations(), map.getUndoLimit().get()); originalMap.putMap(map.getMap()); currentState = map; lastMap = new GameMap(map.getMaxWidth(), map.getMaxHeight(), map.getDestinations(), map.getUndoLimit().get()); lastMap.putMap(map.getMap()); undoQuota = map.getUndoLimit(); checkPointList = new ArrayList<>(); return; //throw new NotImplementedException(); } public void move(Position from, Position to) { // TODO var obj = getEntity(from); if (obj instanceof Box) checkpoint(); currentState.putEntity(to, obj); currentState.putEntity(from, new Empty()); //printMap(); return; //throw new NotImplementedException(); } /** * Record a checkpoint of the game state, including: * <li>All current positions of entities in the game map.</li> * <li>Current undo quota</li> * <p> * Checkpoint is used in {@link GameState#undo()} public static @NotNull Position of(int x, int y) { return new Position(x, y); } public void undo() { // TODO //printMap(); int index = checkPointList.size() - 1; if(index < 0) currentState.putMap(originalMap.getMap()); else { currentState.putMap(checkPointList.get(index)); if (index == 0) lastMap.putMap(originalMap.getMap()); else lastMap.putMap(checkPointList.get(index - 1)); //printMap(); checkPointList.remove(index); var undoLeft = undoQuota.get(); undoLeft = Integer.valueOf((undoLeft.intValue() - 1)); undoQuota = Optional.of(undoLeft); } return; //throw new NotImplementedException(); } /** * Get the maximum width of the game map. * This should be the same as that in {@link GameMap}",
        "label": "P"
    },
    "728": {
        "dataset": "COMP 3021",
        "project": "rliba",
        "bug_id": "40",
        "T": "void testGameExit() { final var gameState = mock(GameState.class); final var inputEngine = mock(TerminalInputEngine.class); final var renderingEngine = mock(TerminalRenderingEngine.class); when(gameState.isWin()).thenReturn(false, false, false); when(inputEngine.fetchAction()) .thenReturn(new InvalidInput(0, \"\"), new InvalidInput(0, \"\"), new Exit(0)); final var game = new TerminalSokobanGame(gameState, inputEngine, renderingEngine); game.run(); verify(renderingEngine, atLeastOnce()).message(any()); }",
        "C": "public InvalidInput(int initiator, @NotNull String message) { super(initiator); this.message = message; } public Exit(int initiator) { super(initiator); } public TerminalSokobanGame(GameState gameState, TerminalInputEngine inputEngine, TerminalRenderingEngine renderingEngine) { super(gameState); this.inputEngine = inputEngine; this.renderingEngine = renderingEngine; this.gameState = gameState; // TODO // Check the number of players if (gameState.getAllPlayerPositions().size() > 2) throw new IllegalArgumentException(); //throw new NotImplementedException(); } public void run() { // TODO System.out.println(\"Sokoban game is ready.\"); renderingEngine.render(gameState); System.out.println(\"Undo Quota: \" + gameState.getUndoQuota()); while (true) { if (shouldStop() || inputEngine.fetchAction() instanceof Exit) return; else { var action = inputEngine.fetchAction(); processAction(action); renderingEngine.render(state); } } //throw new NotImplementedException(); }",
        "label": "F"
    },
    "729": {
        "dataset": "COMP 3021",
        "project": "rliba",
        "bug_id": "41",
        "T": "void testGameWin() { final var gameState = mock(GameState.class); final var inputEngine = mock(TerminalInputEngine.class); final var renderingEngine = mock(TerminalRenderingEngine.class); when(gameState.isWin()).thenReturn(false, false, false, true); when(inputEngine.fetchAction()) .thenReturn(new InvalidInput(0, \"\")); final var game = new TerminalSokobanGame(gameState, inputEngine, renderingEngine); game.run(); verify(gameState, atLeastOnce()).isWin(); verify(renderingEngine, atLeastOnce()).message(any()); }",
        "C": "public InvalidInput(int initiator, @NotNull String message) { super(initiator); this.message = message; } public TerminalSokobanGame(GameState gameState, TerminalInputEngine inputEngine, TerminalRenderingEngine renderingEngine) { super(gameState); this.inputEngine = inputEngine; this.renderingEngine = renderingEngine; this.gameState = gameState; // TODO // Check the number of players if (gameState.getAllPlayerPositions().size() > 2) throw new IllegalArgumentException(); //throw new NotImplementedException(); } public void run() { // TODO System.out.println(\"Sokoban game is ready.\"); renderingEngine.render(gameState); System.out.println(\"Undo Quota: \" + gameState.getUndoQuota()); while (true) { if (shouldStop() || inputEngine.fetchAction() instanceof Exit) return; else { var action = inputEngine.fetchAction(); processAction(action); renderingEngine.render(state); } } //throw new NotImplementedException(); }",
        "label": "F"
    },
    "730": {
        "dataset": "COMP 3021",
        "project": "rliba",
        "bug_id": "42",
        "T": "void testMoreThanTwoPlayers() { final var gameState = mock(GameState.class); final var inputEngine = mock(TerminalInputEngine.class); final var renderingEngine = mock(TerminalRenderingEngine.class); when(gameState.getAllPlayerPositions()).thenReturn(new HashSet<>(Arrays.asList(Position.of(1, 1), Position.of(1, 2), Position.of(1, 3)))); }",
        "C": "public static @NotNull Position of(int x, int y) { return new Position(x, y); }",
        "label": "P"
    },
    "731": {
        "dataset": "COMP 3021",
        "project": "zgaoao",
        "bug_id": "0",
        "T": "void moveUp() { Position.of(233, 232), new Move.Up(-1).nextPosition(pos) ); }",
        "C": "public static @NotNull Position of(int x, int y) { return new Position(x, y); } public Up(int initiator) { super(initiator); }",
        "label": "P"
    },
    "732": {
        "dataset": "COMP 3021",
        "project": "zgaoao",
        "bug_id": "1",
        "T": "void moveDown() { Position.of(233, 234), new Move.Down(-1).nextPosition(pos) ); }",
        "C": "public static @NotNull Position of(int x, int y) { return new Position(x, y); } public Down(int initiator) { super(initiator); }",
        "label": "P"
    },
    "733": {
        "dataset": "COMP 3021",
        "project": "zgaoao",
        "bug_id": "2",
        "T": "void moveRight() { Position.of(234, 233), new Move.Right(-1).nextPosition(pos) ); }",
        "C": "public static @NotNull Position of(int x, int y) { return new Position(x, y); } public Right(int initiator) { super(initiator); }",
        "label": "P"
    },
    "734": {
        "dataset": "COMP 3021",
        "project": "zgaoao",
        "bug_id": "3",
        "T": "void testExceedingUndoQuota() { final var gameState = mock(GameState.class); when(gameState.getPlayerPositionById(anyInt())).thenReturn(Position.of(0, 0)); when(gameState.getUndoQuota()).thenReturn(Optional.of(0)); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Undo(0)); }",
        "C": "public Undo(int initiator) { super(initiator); }",
        "label": "P"
    },
    "735": {
        "dataset": "COMP 3021",
        "project": "zgaoao",
        "bug_id": "4",
        "T": "void testExit() { final var gameState = mock(GameState.class); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Exit(0)); }",
        "C": "public Exit(int initiator) { super(initiator); }",
        "label": "P"
    },
    "736": {
        "dataset": "COMP 3021",
        "project": "zgaoao",
        "bug_id": "5",
        "T": "void testUndoUnlimited() { final var gameState = mock(GameState.class); when(gameState.getPlayerPositionById(anyInt())).thenReturn(Position.of(0, 0)); when(gameState.getUndoQuota()).thenReturn(Optional.empty()); final var game = new SokobanGameForTesting(gameState); for (int i = 0; i < 10000; i++) { final var result = game.feedActionForProcessing(new Undo(0)); } verify(gameState, times(10000)).undo(); }",
        "C": "public TerminalRenderingEngine(PrintStream outputSteam) { this.outputSteam = outputSteam; } public Undo(int initiator) { super(initiator); }",
        "label": "F"
    },
    "737": {
        "dataset": "COMP 3021",
        "project": "zgaoao",
        "bug_id": "6",
        "T": "void testPushOtherPlayerBox() { String mapText = \"\"\" 233 ###### #AB.@# #b.a.# #@...# ###### \"\"\"; final var testMap = TestHelper.parseGameMap(mapText); final var gameState = spy(new GameState(testMap)); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Move.Down(0)); verify(gameState, never()).move(any(), any()); }",
        "C": "public GameState(@NotNull GameMap map) { moveHistory = new ArrayList<>(); if (map.getUndoLimit().isPresent()) { undoQuotaLeft = map.getUndoLimit().get(); } else { undoQuotaLeft = -1; } gameMap = map; playerPosition = new HashMap<>(); boxPosition = new HashMap<>(); this.map = new HashMap<>(); for (int x = 0; x < map.getMaxWidth(); ++x) { for (int y = 0; y < map.getMaxHeight(); ++y) { Position position = Position.of(x, y); var entity = map.getEntity(position); if (entity instanceof Player) { var player = (Player)entity; playerPosition.put(player.getId(), position); } else if (entity instanceof Box) { var box = (Box)entity; boxPosition.put(box, position); } this.map.put(position, entity); } } this.checkpoint(); } public Down(int initiator) { super(initiator); }",
        "label": "P"
    },
    "738": {
        "dataset": "COMP 3021",
        "project": "zgaoao",
        "bug_id": "7",
        "T": "void testMoveNonExistingPlayer() { String mapText = \"\"\" 233 ###### #A..@# #a...# ##...# ###### \"\"\"; final var testMap = TestHelper.parseGameMap(mapText); final var gameState = spy(new GameState(testMap)); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Move.Down(23)); }",
        "C": "public GameState(@NotNull GameMap map) { moveHistory = new ArrayList<>(); if (map.getUndoLimit().isPresent()) { undoQuotaLeft = map.getUndoLimit().get(); } else { undoQuotaLeft = -1; } gameMap = map; playerPosition = new HashMap<>(); boxPosition = new HashMap<>(); this.map = new HashMap<>(); for (int x = 0; x < map.getMaxWidth(); ++x) { for (int y = 0; y < map.getMaxHeight(); ++y) { Position position = Position.of(x, y); var entity = map.getEntity(position); if (entity instanceof Player) { var player = (Player)entity; playerPosition.put(player.getId(), position); } else if (entity instanceof Box) { var box = (Box)entity; boxPosition.put(box, position); } this.map.put(position, entity); } } this.checkpoint(); } public Down(int initiator) { super(initiator); }",
        "label": "P"
    },
    "739": {
        "dataset": "COMP 3021",
        "project": "zgaoao",
        "bug_id": "8",
        "T": "void testCheckpointWhenNeed() { final var gameState = spy(new GameState(TestHelper.parseGameMap(\"\"\" 233 ###### #.Aa@# #..a@# ###### \"\"\" ))); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Move.Right(0)); verify(gameState, times(1)).checkpoint(); }",
        "C": "public GameState(@NotNull GameMap map) { moveHistory = new ArrayList<>(); if (map.getUndoLimit().isPresent()) { undoQuotaLeft = map.getUndoLimit().get(); } else { undoQuotaLeft = -1; } gameMap = map; playerPosition = new HashMap<>(); boxPosition = new HashMap<>(); this.map = new HashMap<>(); for (int x = 0; x < map.getMaxWidth(); ++x) { for (int y = 0; y < map.getMaxHeight(); ++y) { Position position = Position.of(x, y); var entity = map.getEntity(position); if (entity instanceof Player) { var player = (Player)entity; playerPosition.put(player.getId(), position); } else if (entity instanceof Box) { var box = (Box)entity; boxPosition.put(box, position); } this.map.put(position, entity); } } this.checkpoint(); } public Right(int initiator) { super(initiator); }",
        "label": "P"
    },
    "740": {
        "dataset": "COMP 3021",
        "project": "zgaoao",
        "bug_id": "9",
        "T": "void testPushBoxAgainstWall() { String mapText = \"\"\" 233 ###### #A..@# #a...# ##...# ###### \"\"\"; final var testMap = TestHelper.parseGameMap(mapText); final var gameState = spy(new GameState(testMap)); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Move.Down(0)); verify(gameState, never()).move(any(), any()); }",
        "C": "public GameState(@NotNull GameMap map) { moveHistory = new ArrayList<>(); if (map.getUndoLimit().isPresent()) { undoQuotaLeft = map.getUndoLimit().get(); } else { undoQuotaLeft = -1; } gameMap = map; playerPosition = new HashMap<>(); boxPosition = new HashMap<>(); this.map = new HashMap<>(); for (int x = 0; x < map.getMaxWidth(); ++x) { for (int y = 0; y < map.getMaxHeight(); ++y) { Position position = Position.of(x, y); var entity = map.getEntity(position); if (entity instanceof Player) { var player = (Player)entity; playerPosition.put(player.getId(), position); } else if (entity instanceof Box) { var box = (Box)entity; boxPosition.put(box, position); } this.map.put(position, entity); } } this.checkpoint(); } public Down(int initiator) { super(initiator); }",
        "label": "P"
    },
    "741": {
        "dataset": "COMP 3021",
        "project": "zgaoao",
        "bug_id": "10",
        "T": "void testCheckpointWhenNotNeed() { final var gameState = spy(new GameState(TestHelper.parseGameMap(\"\"\" 233 ###### #A.a@# #..a@# ###### \"\"\" ))); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Move.Right(0)); verify(gameState, never()).checkpoint(); } private static class SokobanGameForTesting extends AbstractSokobanGame { protected SokobanGameForTesting(GameState gameState) { super(gameState); } @Override public void run() { } public ActionResult feedActionForProcessing(Action action) { return processAction(action); } }",
        "C": "public GameState(@NotNull GameMap map) { moveHistory = new ArrayList<>(); if (map.getUndoLimit().isPresent()) { undoQuotaLeft = map.getUndoLimit().get(); } else { undoQuotaLeft = -1; } gameMap = map; playerPosition = new HashMap<>(); boxPosition = new HashMap<>(); this.map = new HashMap<>(); for (int x = 0; x < map.getMaxWidth(); ++x) { for (int y = 0; y < map.getMaxHeight(); ++y) { Position position = Position.of(x, y); var entity = map.getEntity(position); if (entity instanceof Player) { var player = (Player)entity; playerPosition.put(player.getId(), position); } else if (entity instanceof Box) { var box = (Box)entity; boxPosition.put(box, position); } this.map.put(position, entity); } } this.checkpoint(); } public Right(int initiator) { super(initiator); } public void run() { System.out.println(\"Sokoban game is ready.\"); renderingEngine.render(this.gameState); while (!shouldStop()) { if (state.getUndoQuota().isPresent()) { renderingEngine.message(\"Undo Quota: \" + state.getUndoQuota().get().toString()); } else { renderingEngine.message(\"Unlimited\"); } renderingEngine.message(\">>>\"); Action action = inputEngine.fetchAction(); ActionResult actionResult = processAction(action); if (actionResult instanceof ActionResult.Failed) { ActionResult.Failed failActionResult = (ActionResult.Failed) actionResult; if (!failActionResult.getReason().isEmpty()) { renderingEngine.message(failActionResult.getReason()); } } renderingEngine.render(this.gameState); } renderingEngine.message(\"Game exits.\"); if (state.isWin()) { renderingEngine.message(\"You win.\"); } } protected ActionResult processAction(@NotNull Action action) { switch (action) { case Exit ignored -> { this.ifExit = true; return new ActionResult.Success(action); } case Move m -> { int playerId = m.getInitiator(); if (!state.gameMap.getPlayerIds().contains(playerId)) { return new ActionResult.Failed(action, \"Player not found.\"); } Position fromPosition = state.getPlayerPositionById(playerId); Position toPosition = m.nextPosition(fromPosition); if (!state.positionInMap(toPosition)) { return new ActionResult.Failed(action, \"Cannot move outside map.\"); } Entity entity = state.getEntity(toPosition); switch (entity) { case Box b -> { if (b.getPlayerId() != playerId) { return new ActionResult.Failed(action, \"You cannot move other players' boxes.\"); } else { Position newToPosition = m.nextPosition(toPosition); Entity newEntity = state.getEntity(newToPosition); if (newEntity instanceof Empty) { state.move(toPosition, newToPosition); state.move(fromPosition, toPosition); state.checkpoint(); state.equalInitialMap = false; return new ActionResult.Success(action); } else { return new ActionResult.Failed(action, \"Failed to push the box.\"); } } } case Player ignored -> { return new ActionResult.Failed(action, \"You hit another player.\"); } case Empty ignored -> { state.move(fromPosition, toPosition); state.equalInitialMap = false; return new ActionResult.Success(action); } case Wall ignored -> { return new ActionResult.Failed(action, \"You hit a wall.\"); } default -> { return null; } } } case Undo ignored -> { if (state.getUndoQuota().isPresent()) { if (state.getUndoQuota().get() > 0) { if (state.moveHistory.size() > 0 && !state.equalInitialMap){ state.undo(); return new ActionResult.Success(action); } else { return new ActionResult.Failed(action, \"\"); } } else { return new ActionResult.Failed(action, \"You have run out of your undo quota.\"); } } else { if (state.moveHistory.size() > 0 && !state.equalInitialMap){ state.undo(); return new ActionResult.Success(action); } else { return new ActionResult.Failed(action, \"\"); } } } case InvalidInput ignored -> { return new ActionResult.Failed(action, \"Invalid Input.\"); } default -> { return null; } } }",
        "label": "P"
    },
    "742": {
        "dataset": "COMP 3021",
        "project": "zgaoao",
        "bug_id": "11",
        "T": "void testHitAnotherPlayer() { String mapText = \"\"\" 233 ###### #A..@# #B...# #ab.@# ###### \"\"\"; final var testMap = TestHelper.parseGameMap(mapText); final var gameState = spy(new GameState(testMap)); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Move.Down(0)); verify(gameState, never()).move(any(), any()); }",
        "C": "public GameState(@NotNull GameMap map) { moveHistory = new ArrayList<>(); if (map.getUndoLimit().isPresent()) { undoQuotaLeft = map.getUndoLimit().get(); } else { undoQuotaLeft = -1; } gameMap = map; playerPosition = new HashMap<>(); boxPosition = new HashMap<>(); this.map = new HashMap<>(); for (int x = 0; x < map.getMaxWidth(); ++x) { for (int y = 0; y < map.getMaxHeight(); ++y) { Position position = Position.of(x, y); var entity = map.getEntity(position); if (entity instanceof Player) { var player = (Player)entity; playerPosition.put(player.getId(), position); } else if (entity instanceof Box) { var box = (Box)entity; boxPosition.put(box, position); } this.map.put(position, entity); } } this.checkpoint(); } public Down(int initiator) { super(initiator); }",
        "label": "P"
    },
    "743": {
        "dataset": "COMP 3021",
        "project": "zgaoao",
        "bug_id": "12",
        "T": "void testUndoWithinQuota() { final var gameState = mock(GameState.class); when(gameState.getPlayerPositionById(anyInt())).thenReturn(Position.of(0, 0)); when(gameState.getUndoQuota()).thenReturn(Optional.of(1)); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Undo(0)); verify(gameState, times(1)).undo(); }",
        "C": "public Undo(int initiator) { super(initiator); }",
        "label": "F"
    },
    "744": {
        "dataset": "COMP 3021",
        "project": "zgaoao",
        "bug_id": "13",
        "T": "void testInvalidInput() { final var game = new SokobanGameForTesting(mock(GameState.class)); final var message = String.valueOf(new Random().nextLong()); final var action = new InvalidInput(-1, message); final var result = game.feedActionForProcessing(action); }",
        "C": "public InvalidInput(int initiator, @NotNull String message) { super(initiator); this.message = message; }",
        "label": "P"
    },
    "745": {
        "dataset": "COMP 3021",
        "project": "zgaoao",
        "bug_id": "14",
        "T": "void testUndoLimitParsing() { final var gameMap = TestHelper.parseGameMap(rectangularMap); }",
        "C": "",
        "label": "P"
    },
    "746": {
        "dataset": "COMP 3021",
        "project": "zgaoao",
        "bug_id": "15",
        "T": "void testWidthForNonRectangularMap() { final var gameMap = TestHelper.parseGameMap(nonRectangularMap); }",
        "C": "",
        "label": "P"
    },
    "747": {
        "dataset": "COMP 3021",
        "project": "zgaoao",
        "bug_id": "16",
        "T": "void testTwoPlayersMap() { final var twoPlayersMap = \"\"\" 233 ###### #A..@# #..B@# #....# #.a..# #..b.# ###### \"\"\"; final var gameMap = TestHelper.parseGameMap(twoPlayersMap); final var playerIds = gameMap.getPlayerIds(); final var expectedIds = new HashSet<Integer>(); expectedIds.add(0); expectedIds.add(1); }",
        "C": "public Set<Integer> getPlayerIds() { HashSet<Integer> playerIds = new HashSet<Integer>(); for(var entity: map.values()) { if (entity instanceof Player) { var player = (Player)entity; playerIds.add(player.getId()); } } return playerIds; }",
        "label": "P"
    },
    "748": {
        "dataset": "COMP 3021",
        "project": "zgaoao",
        "bug_id": "17",
        "T": "void testMapWithoutPlayer() { final var invalidMap = \"\"\" 233 ### #.# ### \"\"\"; } // @Tag(TestKind.HIDDEN) // @Test // void testUnmatchedPlayersAndBoxes() { // final var invalidMap = \"\"\" // 233 // ###### // #A..@# // #...@# // #a.b@# // #.a.@# // #..a.# // ###### // \"\"\"; // assertThrowsExactly(IllegalArgumentException.class, () -> TestHelper.parseGameMap(invalidMap)); // }",
        "C": "public TerminalRenderingEngine(PrintStream outputSteam) { this.outputSteam = outputSteam; }",
        "label": "P"
    },
    "749": {
        "dataset": "COMP 3021",
        "project": "zgaoao",
        "bug_id": "18",
        "T": "void testManyPlayersMap() { final var manyPlayersMap = \"\"\" 233 ###### #A.P@@# #vCB@@# #.cpD@# #Ga.d@# #g.bV@# ###### \"\"\"; final var gameMap = TestHelper.parseGameMap(manyPlayersMap); final var playerIds = gameMap.getPlayerIds(); final var expectedIds = new HashSet<>(Arrays.asList( 0, 'P' - 'A', 'C' - 'A', 'B' - 'A', 'D' - 'A', 'G' - 'A', 'V' - 'A' )); }",
        "C": "public Set<Integer> getPlayerIds() { HashSet<Integer> playerIds = new HashSet<Integer>(); for(var entity: map.values()) { if (entity instanceof Player) { var player = (Player)entity; playerIds.add(player.getId()); } } return playerIds; }",
        "label": "P"
    },
    "750": {
        "dataset": "COMP 3021",
        "project": "zgaoao",
        "bug_id": "19",
        "T": "void testHeightForNonRectangularMap() { final var gameMap = TestHelper.parseGameMap(nonRectangularMap); }",
        "C": "",
        "label": "P"
    },
    "751": {
        "dataset": "COMP 3021",
        "project": "zgaoao",
        "bug_id": "20",
        "T": "void testDuplicatedPlayers() { final var invalidMap = \"\"\" 233 ###### #A..@# #..A@# #....# #.a..# #..b.# ###### \"\"\"; }",
        "C": "",
        "label": "P"
    },
    "752": {
        "dataset": "COMP 3021",
        "project": "zgaoao",
        "bug_id": "21",
        "T": "void testParseMapWithoutUndoLimit() { final var invalidMap = String.join(\"\\n\", rectangularMap.lines().skip(1).toList()); }",
        "C": "",
        "label": "P"
    },
    "753": {
        "dataset": "COMP 3021",
        "project": "zgaoao",
        "bug_id": "22",
        "T": "void testInsufficientDestinations() { final var invalidMap = \"\"\" 233 ###### #A..@# #...@# #a...# #.a..# #..a.# ###### \"\"\"; }",
        "C": "",
        "label": "P"
    },
    "754": {
        "dataset": "COMP 3021",
        "project": "zgaoao",
        "bug_id": "23",
        "T": "void testSuperLargeMap() { try { new GameMap(Integer.MAX_VALUE, Integer.MAX_VALUE, Collections.emptySet(), 0); } catch (OutOfMemoryError e) { throw new RuntimeException(e); } }); }",
        "C": "public GameMap(int maxWidth, int maxHeight, Set<Position> destinations, int undoLimit) { this.maxHeight = maxHeight; this.maxWidth = maxWidth; this.undoLimit = undoLimit; this.destinations = new HashSet<>(); this.destinations.addAll(destinations); } /** * Parses the map from a string representation. * The first line is undo limit. * Starting from the second line, the game map is represented as follows, * <li># represents a {@link Wall}</li> * <li>@ represents a box destination.</li> * <li>Any upper-case letter represents a {@link Player}.</li> * <li> * Any lower-case letter represents a {@link Box} that is only movable by the player with the corresponding upper-case letter. * For instance, box \"a\" can only be moved by player \"A\" and not movable by player \"B\". * </li> * <li>. represents an {@link Empty} position in the map, meaning there is no player or box currently at this position.</li> * <p> * Notes: * <li> * There can be at most 26 players. * All implementations of classes in the hk.ust.comp3021.game package should support up to 26 players. * </li> * <li> * For simplicity, we assume the given map is bounded with a closed boundary. * There is no need to check this point. * </li> * <li> * Example maps can be found in \"src/main/resources\". * </li> * * @param mapText The string representation. * @return The parsed GameMap object. * @throws IllegalArgumentException if undo limit is negative but not -1. * @throws IllegalArgumentException if there are multiple same upper-case letters, i.e., one player can only exist at one position. * @throws IllegalArgumentException if there are no players in the map. * @throws IllegalArgumentException if the number of boxes is not equal to the number of box destinations. * @throws IllegalArgumentException if there are boxes whose {@link Box#getPlayerId()} public TerminalRenderingEngine(PrintStream outputSteam) { this.outputSteam = outputSteam; }",
        "label": "P"
    },
    "755": {
        "dataset": "COMP 3021",
        "project": "zgaoao",
        "bug_id": "24",
        "T": "void testInvalidUndoLimit() { final var invalidMap = \"\"\" -233 ###### #A..@# #...@# #a.b@# #.a.@# #..a.# ###### \"\"\"; }",
        "C": "",
        "label": "P"
    },
    "756": {
        "dataset": "COMP 3021",
        "project": "zgaoao",
        "bug_id": "25",
        "T": "void testEmptyMap() { final var invalidMap = \"\"; }",
        "C": "",
        "label": "P"
    },
    "757": {
        "dataset": "COMP 3021",
        "project": "zgaoao",
        "bug_id": "26",
        "T": "void testMove(String input, String name, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); } private InputStream fixValueStream(String content) { final var bytes = content.getBytes(StandardCharsets.UTF_8); return new ByteArrayInputStream(bytes); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine(); var action = switch (inputLine.toUpperCase()) { case \"U\" -> new Undo(0); case \"A\" -> new Move.Left(0); case \"S\" -> new Move.Down(0); case \"W\" -> new Move.Up(0); case \"D\" -> new Move.Right(0); case \"H\" -> new Move.Left(1); case \"J\" -> new Move.Down(1); case \"K\" -> new Move.Up(1); case \"L\" -> new Move.Right(1); case \"EXIT\" -> new Exit(0); default -> new InvalidInput(0, \"Invalid Input\"); }; return action; }",
        "label": "P"
    },
    "758": {
        "dataset": "COMP 3021",
        "project": "zgaoao",
        "bug_id": "27",
        "T": "void testMove(String input, String name, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); } private InputStream fixValueStream(String content) { final var bytes = content.getBytes(StandardCharsets.UTF_8); return new ByteArrayInputStream(bytes); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine(); var action = switch (inputLine.toUpperCase()) { case \"U\" -> new Undo(0); case \"A\" -> new Move.Left(0); case \"S\" -> new Move.Down(0); case \"W\" -> new Move.Up(0); case \"D\" -> new Move.Right(0); case \"H\" -> new Move.Left(1); case \"J\" -> new Move.Down(1); case \"K\" -> new Move.Up(1); case \"L\" -> new Move.Right(1); case \"EXIT\" -> new Exit(0); default -> new InvalidInput(0, \"Invalid Input\"); }; return action; }",
        "label": "P"
    },
    "759": {
        "dataset": "COMP 3021",
        "project": "zgaoao",
        "bug_id": "28",
        "T": "void testMove(String input, String name, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); } private InputStream fixValueStream(String content) { final var bytes = content.getBytes(StandardCharsets.UTF_8); return new ByteArrayInputStream(bytes); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine(); var action = switch (inputLine.toUpperCase()) { case \"U\" -> new Undo(0); case \"A\" -> new Move.Left(0); case \"S\" -> new Move.Down(0); case \"W\" -> new Move.Up(0); case \"D\" -> new Move.Right(0); case \"H\" -> new Move.Left(1); case \"J\" -> new Move.Down(1); case \"K\" -> new Move.Up(1); case \"L\" -> new Move.Right(1); case \"EXIT\" -> new Exit(0); default -> new InvalidInput(0, \"Invalid Input\"); }; return action; }",
        "label": "P"
    },
    "760": {
        "dataset": "COMP 3021",
        "project": "zgaoao",
        "bug_id": "29",
        "T": "void testMove(String input, String name, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); } private InputStream fixValueStream(String content) { final var bytes = content.getBytes(StandardCharsets.UTF_8); return new ByteArrayInputStream(bytes); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine(); var action = switch (inputLine.toUpperCase()) { case \"U\" -> new Undo(0); case \"A\" -> new Move.Left(0); case \"S\" -> new Move.Down(0); case \"W\" -> new Move.Up(0); case \"D\" -> new Move.Right(0); case \"H\" -> new Move.Left(1); case \"J\" -> new Move.Down(1); case \"K\" -> new Move.Up(1); case \"L\" -> new Move.Right(1); case \"EXIT\" -> new Exit(0); default -> new InvalidInput(0, \"Invalid Input\"); }; return action; }",
        "label": "P"
    },
    "761": {
        "dataset": "COMP 3021",
        "project": "zgaoao",
        "bug_id": "30",
        "T": "void testMove(String input, String name, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); } private InputStream fixValueStream(String content) { final var bytes = content.getBytes(StandardCharsets.UTF_8); return new ByteArrayInputStream(bytes); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine(); var action = switch (inputLine.toUpperCase()) { case \"U\" -> new Undo(0); case \"A\" -> new Move.Left(0); case \"S\" -> new Move.Down(0); case \"W\" -> new Move.Up(0); case \"D\" -> new Move.Right(0); case \"H\" -> new Move.Left(1); case \"J\" -> new Move.Down(1); case \"K\" -> new Move.Up(1); case \"L\" -> new Move.Right(1); case \"EXIT\" -> new Exit(0); default -> new InvalidInput(0, \"Invalid Input\"); }; return action; }",
        "label": "P"
    },
    "762": {
        "dataset": "COMP 3021",
        "project": "zgaoao",
        "bug_id": "31",
        "T": "void testMove(String input, String name, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); } private InputStream fixValueStream(String content) { final var bytes = content.getBytes(StandardCharsets.UTF_8); return new ByteArrayInputStream(bytes); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine(); var action = switch (inputLine.toUpperCase()) { case \"U\" -> new Undo(0); case \"A\" -> new Move.Left(0); case \"S\" -> new Move.Down(0); case \"W\" -> new Move.Up(0); case \"D\" -> new Move.Right(0); case \"H\" -> new Move.Left(1); case \"J\" -> new Move.Down(1); case \"K\" -> new Move.Up(1); case \"L\" -> new Move.Right(1); case \"EXIT\" -> new Exit(0); default -> new InvalidInput(0, \"Invalid Input\"); }; return action; }",
        "label": "P"
    },
    "763": {
        "dataset": "COMP 3021",
        "project": "zgaoao",
        "bug_id": "32",
        "T": "void testMove(String input, String name, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); } private InputStream fixValueStream(String content) { final var bytes = content.getBytes(StandardCharsets.UTF_8); return new ByteArrayInputStream(bytes); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine(); var action = switch (inputLine.toUpperCase()) { case \"U\" -> new Undo(0); case \"A\" -> new Move.Left(0); case \"S\" -> new Move.Down(0); case \"W\" -> new Move.Up(0); case \"D\" -> new Move.Right(0); case \"H\" -> new Move.Left(1); case \"J\" -> new Move.Down(1); case \"K\" -> new Move.Up(1); case \"L\" -> new Move.Right(1); case \"EXIT\" -> new Exit(0); default -> new InvalidInput(0, \"Invalid Input\"); }; return action; }",
        "label": "P"
    },
    "764": {
        "dataset": "COMP 3021",
        "project": "zgaoao",
        "bug_id": "33",
        "T": "void testMove(String input, String name, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); } private InputStream fixValueStream(String content) { final var bytes = content.getBytes(StandardCharsets.UTF_8); return new ByteArrayInputStream(bytes); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine(); var action = switch (inputLine.toUpperCase()) { case \"U\" -> new Undo(0); case \"A\" -> new Move.Left(0); case \"S\" -> new Move.Down(0); case \"W\" -> new Move.Up(0); case \"D\" -> new Move.Right(0); case \"H\" -> new Move.Left(1); case \"J\" -> new Move.Down(1); case \"K\" -> new Move.Up(1); case \"L\" -> new Move.Right(1); case \"EXIT\" -> new Exit(0); default -> new InvalidInput(0, \"Invalid Input\"); }; return action; }",
        "label": "P"
    },
    "765": {
        "dataset": "COMP 3021",
        "project": "zgaoao",
        "bug_id": "34",
        "T": "void testUndo(String input, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine(); var action = switch (inputLine.toUpperCase()) { case \"U\" -> new Undo(0); case \"A\" -> new Move.Left(0); case \"S\" -> new Move.Down(0); case \"W\" -> new Move.Up(0); case \"D\" -> new Move.Right(0); case \"H\" -> new Move.Left(1); case \"J\" -> new Move.Down(1); case \"K\" -> new Move.Up(1); case \"L\" -> new Move.Right(1); case \"EXIT\" -> new Exit(0); default -> new InvalidInput(0, \"Invalid Input\"); }; return action; }",
        "label": "P"
    },
    "766": {
        "dataset": "COMP 3021",
        "project": "zgaoao",
        "bug_id": "35",
        "T": "void testInvalidInput() { final var inputStream = fixValueStream(\"blah blah\"); final var inputEngine = new TerminalInputEngine(inputStream); final var action = inputEngine.fetchAction(); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine(); var action = switch (inputLine.toUpperCase()) { case \"U\" -> new Undo(0); case \"A\" -> new Move.Left(0); case \"S\" -> new Move.Down(0); case \"W\" -> new Move.Up(0); case \"D\" -> new Move.Right(0); case \"H\" -> new Move.Left(1); case \"J\" -> new Move.Down(1); case \"K\" -> new Move.Up(1); case \"L\" -> new Move.Right(1); case \"EXIT\" -> new Exit(0); default -> new InvalidInput(0, \"Invalid Input\"); }; return action; }",
        "label": "P"
    },
    "767": {
        "dataset": "COMP 3021",
        "project": "zgaoao",
        "bug_id": "36",
        "T": "void testUndoWhenThereIsNoMove() { final var gameState = new GameState(TestHelper.parseGameMap(\"\"\" 233 ###### #A.a@# #..a@# ###### \"\"\" )); gameState.undo(); } private Entity generateEntity(int key) { return switch (key % 4) { case 0 -> new Box(0); case 1 -> new Empty(); case 2 -> new Player(0); case 3 -> new Wall(); default -> throw new ShouldNotReachException(); }; }",
        "C": "public GameState(@NotNull GameMap map) { moveHistory = new ArrayList<>(); if (map.getUndoLimit().isPresent()) { undoQuotaLeft = map.getUndoLimit().get(); } else { undoQuotaLeft = -1; } gameMap = map; playerPosition = new HashMap<>(); boxPosition = new HashMap<>(); this.map = new HashMap<>(); for (int x = 0; x < map.getMaxWidth(); ++x) { for (int y = 0; y < map.getMaxHeight(); ++y) { Position position = Position.of(x, y); var entity = map.getEntity(position); if (entity instanceof Player) { var player = (Player)entity; playerPosition.put(player.getId(), position); } else if (entity instanceof Box) { var box = (Box)entity; boxPosition.put(box, position); } this.map.put(position, entity); } } this.checkpoint(); } public void undo() { if (undoQuotaLeft > 0) { undoQuotaLeft -= 1; } Map<Position, Entity> mapToCopy; if (moveHistory.size() == 1) { mapToCopy = moveHistory.get(0); this.equalInitialMap = true; } else { if (moveHistory.size() == 2) { this.equalInitialMap = true; } mapToCopy = moveHistory.get(moveHistory.size() - 2); moveHistory.remove(moveHistory.size() - 1); } this.map = new HashMap<>(); playerPosition = new HashMap<>(); boxPosition = new HashMap<>(); for (int x = 0; x < this.gameMap.getMaxWidth(); ++x) { for (int y = 0; y < this.gameMap.getMaxHeight(); ++y) { Position position = Position.of(x, y); var entity = mapToCopy.get(position); this.map.put(position, entity); if (entity instanceof Player) { var player = (Player)entity; playerPosition.put(player.getId(), position); } else if (entity instanceof Box) { var box = (Box)entity; boxPosition.put(box, position); } } } } /** * Get the maximum width of the game map. * This should be the same as that in {@link GameMap} public TerminalRenderingEngine(PrintStream outputSteam) { this.outputSteam = outputSteam; } public Box(int playerId) { this.playerId = playerId; } public Player(int id) { this.id = id; } public ShouldNotReachException() { super(\"This branch should not be reached.\"); }",
        "label": "F"
    },
    "768": {
        "dataset": "COMP 3021",
        "project": "zgaoao",
        "bug_id": "37",
        "T": "void testGetUndoUnlimited() { final var gameState = new GameState(TestHelper.parseGameMap(\"\"\" -1 ###### #.Aa@# #..a@# ###### \"\"\" )); }",
        "C": "public GameState(@NotNull GameMap map) { moveHistory = new ArrayList<>(); if (map.getUndoLimit().isPresent()) { undoQuotaLeft = map.getUndoLimit().get(); } else { undoQuotaLeft = -1; } gameMap = map; playerPosition = new HashMap<>(); boxPosition = new HashMap<>(); this.map = new HashMap<>(); for (int x = 0; x < map.getMaxWidth(); ++x) { for (int y = 0; y < map.getMaxHeight(); ++y) { Position position = Position.of(x, y); var entity = map.getEntity(position); if (entity instanceof Player) { var player = (Player)entity; playerPosition.put(player.getId(), position); } else if (entity instanceof Box) { var box = (Box)entity; boxPosition.put(box, position); } this.map.put(position, entity); } } this.checkpoint(); }",
        "label": "P"
    },
    "769": {
        "dataset": "COMP 3021",
        "project": "zgaoao",
        "bug_id": "38",
        "T": "void testMapCopying() { final var maxWidth = 2333; final var maxHeight = 2333; final var random = new Random(); final var randomEntities = Stream.generate(() -> Position.of(random.nextInt(maxWidth), random.nextInt(maxHeight))) .distinct() .limit(100) .collect(Collectors.toMap(Function.identity(), it -> generateEntity(it.x()))); final var firstPos = randomEntities.keySet().stream().findFirst(); final var gameMap = new GameMap(maxWidth, maxHeight, Collections.singleton(firstPos.get()), 233); randomEntities.forEach(gameMap::putEntity); final var gameState = new GameState(gameMap); final var randomPosition = randomEntities.keySet().stream().findAny(); gameMap.putEntity(randomPosition.get(), new Empty()); randomEntities.forEach((p, e) -> assertEquals(e, gameState.getEntity(p))); }",
        "C": "public static @NotNull Position of(int x, int y) { return new Position(x, y); } public GameMap(int maxWidth, int maxHeight, Set<Position> destinations, int undoLimit) { this.maxHeight = maxHeight; this.maxWidth = maxWidth; this.undoLimit = undoLimit; this.destinations = new HashSet<>(); this.destinations.addAll(destinations); } /** * Parses the map from a string representation. * The first line is undo limit. * Starting from the second line, the game map is represented as follows, * <li># represents a {@link Wall}</li> * <li>@ represents a box destination.</li> * <li>Any upper-case letter represents a {@link Player}.</li> * <li> * Any lower-case letter represents a {@link Box} that is only movable by the player with the corresponding upper-case letter. * For instance, box \"a\" can only be moved by player \"A\" and not movable by player \"B\". * </li> * <li>. represents an {@link Empty} position in the map, meaning there is no player or box currently at this position.</li> * <p> * Notes: * <li> * There can be at most 26 players. * All implementations of classes in the hk.ust.comp3021.game package should support up to 26 players. * </li> * <li> * For simplicity, we assume the given map is bounded with a closed boundary. * There is no need to check this point. * </li> * <li> * Example maps can be found in \"src/main/resources\". * </li> * * @param mapText The string representation. * @return The parsed GameMap object. * @throws IllegalArgumentException if undo limit is negative but not -1. * @throws IllegalArgumentException if there are multiple same upper-case letters, i.e., one player can only exist at one position. * @throws IllegalArgumentException if there are no players in the map. * @throws IllegalArgumentException if the number of boxes is not equal to the number of box destinations. * @throws IllegalArgumentException if there are boxes whose {@link Box#getPlayerId()} public GameState(@NotNull GameMap map) { moveHistory = new ArrayList<>(); if (map.getUndoLimit().isPresent()) { undoQuotaLeft = map.getUndoLimit().get(); } else { undoQuotaLeft = -1; } gameMap = map; playerPosition = new HashMap<>(); boxPosition = new HashMap<>(); this.map = new HashMap<>(); for (int x = 0; x < map.getMaxWidth(); ++x) { for (int y = 0; y < map.getMaxHeight(); ++y) { Position position = Position.of(x, y); var entity = map.getEntity(position); if (entity instanceof Player) { var player = (Player)entity; playerPosition.put(player.getId(), position); } else if (entity instanceof Box) { var box = (Box)entity; boxPosition.put(box, position); } this.map.put(position, entity); } } this.checkpoint(); } public void putEntity(Position position, Entity entity) { if (map.containsKey(position)) { map.replace(position, entity); } else { map.put(position, entity); } } public @Nullable Entity getEntity(@NotNull Position position) { return map.get(position); } /** * Get all box destination positions as a set in the game map. * This should be the same as that in {@link GameMap}",
        "label": "F"
    },
    "770": {
        "dataset": "COMP 3021",
        "project": "zgaoao",
        "bug_id": "39",
        "T": "void testUndoWhenThereIsMoveButNoCheckpoint() { final var gameState = new GameState(TestHelper.parseGameMap(\"\"\" 233 ###### #A.a@# #..a@# ###### \"\"\" )); gameState.move(Position.of(1, 1), Position.of(2, 1)); gameState.undo(); }",
        "C": "public GameState(@NotNull GameMap map) { moveHistory = new ArrayList<>(); if (map.getUndoLimit().isPresent()) { undoQuotaLeft = map.getUndoLimit().get(); } else { undoQuotaLeft = -1; } gameMap = map; playerPosition = new HashMap<>(); boxPosition = new HashMap<>(); this.map = new HashMap<>(); for (int x = 0; x < map.getMaxWidth(); ++x) { for (int y = 0; y < map.getMaxHeight(); ++y) { Position position = Position.of(x, y); var entity = map.getEntity(position); if (entity instanceof Player) { var player = (Player)entity; playerPosition.put(player.getId(), position); } else if (entity instanceof Box) { var box = (Box)entity; boxPosition.put(box, position); } this.map.put(position, entity); } } this.checkpoint(); } public void move(Position from, Position to) { Object entity = map.get(from); map.replace(to, map.get(from)); map.replace(from, new Empty()); if (entity instanceof Player) { Player player = (Player) entity; playerPosition.replace(player.getId(), to); } else if (entity instanceof Box) { Box box = (Box) entity; boxPosition.replace(box, to); } } /** * Record a checkpoint of the game state, including: * <li>All current positions of entities in the game map.</li> * <li>Current undo quota</li> * <p> * Checkpoint is used in {@link GameState#undo()} public static @NotNull Position of(int x, int y) { return new Position(x, y); } public void undo() { if (undoQuotaLeft > 0) { undoQuotaLeft -= 1; } Map<Position, Entity> mapToCopy; if (moveHistory.size() == 1) { mapToCopy = moveHistory.get(0); this.equalInitialMap = true; } else { if (moveHistory.size() == 2) { this.equalInitialMap = true; } mapToCopy = moveHistory.get(moveHistory.size() - 2); moveHistory.remove(moveHistory.size() - 1); } this.map = new HashMap<>(); playerPosition = new HashMap<>(); boxPosition = new HashMap<>(); for (int x = 0; x < this.gameMap.getMaxWidth(); ++x) { for (int y = 0; y < this.gameMap.getMaxHeight(); ++y) { Position position = Position.of(x, y); var entity = mapToCopy.get(position); this.map.put(position, entity); if (entity instanceof Player) { var player = (Player)entity; playerPosition.put(player.getId(), position); } else if (entity instanceof Box) { var box = (Box)entity; boxPosition.put(box, position); } } } } /** * Get the maximum width of the game map. * This should be the same as that in {@link GameMap}",
        "label": "F"
    },
    "771": {
        "dataset": "COMP 3021",
        "project": "zgaoao",
        "bug_id": "40",
        "T": "void testGameExit() { final var gameState = mock(GameState.class); final var inputEngine = mock(TerminalInputEngine.class); final var renderingEngine = mock(TerminalRenderingEngine.class); when(gameState.isWin()).thenReturn(false, false, false); when(inputEngine.fetchAction()) .thenReturn(new InvalidInput(0, \"\"), new InvalidInput(0, \"\"), new Exit(0)); final var game = new TerminalSokobanGame(gameState, inputEngine, renderingEngine); game.run(); verify(renderingEngine, atLeastOnce()).message(any()); }",
        "C": "public InvalidInput(int initiator, @NotNull String message) { super(initiator); this.message = message; } public Exit(int initiator) { super(initiator); } public TerminalSokobanGame(GameState gameState, TerminalInputEngine inputEngine, TerminalRenderingEngine renderingEngine) { super(gameState); this.gameState = gameState; this.inputEngine = inputEngine; this.renderingEngine = renderingEngine; int numPlayer = gameState.getAllPlayerPositions().size(); if (numPlayer > 2) { throw new IllegalArgumentException(\"There are more than two players in the map.\"); } } public void run() { System.out.println(\"Sokoban game is ready.\"); renderingEngine.render(this.gameState); while (!shouldStop()) { if (state.getUndoQuota().isPresent()) { renderingEngine.message(\"Undo Quota: \" + state.getUndoQuota().get().toString()); } else { renderingEngine.message(\"Unlimited\"); } renderingEngine.message(\">>>\"); Action action = inputEngine.fetchAction(); ActionResult actionResult = processAction(action); if (actionResult instanceof ActionResult.Failed) { ActionResult.Failed failActionResult = (ActionResult.Failed) actionResult; if (!failActionResult.getReason().isEmpty()) { renderingEngine.message(failActionResult.getReason()); } } renderingEngine.render(this.gameState); } renderingEngine.message(\"Game exits.\"); if (state.isWin()) { renderingEngine.message(\"You win.\"); } }",
        "label": "P"
    },
    "772": {
        "dataset": "COMP 3021",
        "project": "zgaoao",
        "bug_id": "41",
        "T": "void testGameWin() { final var gameState = mock(GameState.class); final var inputEngine = mock(TerminalInputEngine.class); final var renderingEngine = mock(TerminalRenderingEngine.class); when(gameState.isWin()).thenReturn(false, false, false, true); when(inputEngine.fetchAction()) .thenReturn(new InvalidInput(0, \"\")); final var game = new TerminalSokobanGame(gameState, inputEngine, renderingEngine); game.run(); verify(gameState, atLeastOnce()).isWin(); verify(renderingEngine, atLeastOnce()).message(any()); }",
        "C": "public InvalidInput(int initiator, @NotNull String message) { super(initiator); this.message = message; } public TerminalSokobanGame(GameState gameState, TerminalInputEngine inputEngine, TerminalRenderingEngine renderingEngine) { super(gameState); this.gameState = gameState; this.inputEngine = inputEngine; this.renderingEngine = renderingEngine; int numPlayer = gameState.getAllPlayerPositions().size(); if (numPlayer > 2) { throw new IllegalArgumentException(\"There are more than two players in the map.\"); } } public void run() { System.out.println(\"Sokoban game is ready.\"); renderingEngine.render(this.gameState); while (!shouldStop()) { if (state.getUndoQuota().isPresent()) { renderingEngine.message(\"Undo Quota: \" + state.getUndoQuota().get().toString()); } else { renderingEngine.message(\"Unlimited\"); } renderingEngine.message(\">>>\"); Action action = inputEngine.fetchAction(); ActionResult actionResult = processAction(action); if (actionResult instanceof ActionResult.Failed) { ActionResult.Failed failActionResult = (ActionResult.Failed) actionResult; if (!failActionResult.getReason().isEmpty()) { renderingEngine.message(failActionResult.getReason()); } } renderingEngine.render(this.gameState); } renderingEngine.message(\"Game exits.\"); if (state.isWin()) { renderingEngine.message(\"You win.\"); } }",
        "label": "P"
    },
    "773": {
        "dataset": "COMP 3021",
        "project": "zgaoao",
        "bug_id": "42",
        "T": "void testMoreThanTwoPlayers() { final var gameState = mock(GameState.class); final var inputEngine = mock(TerminalInputEngine.class); final var renderingEngine = mock(TerminalRenderingEngine.class); when(gameState.getAllPlayerPositions()).thenReturn(new HashSet<>(Arrays.asList(Position.of(1, 1), Position.of(1, 2), Position.of(1, 3)))); }",
        "C": "public static @NotNull Position of(int x, int y) { return new Position(x, y); }",
        "label": "P"
    },
    "774": {
        "dataset": "COMP 3021",
        "project": "khyanaa",
        "bug_id": "0",
        "T": "void moveUp() { Position.of(233, 232), new Move.Up(-1).nextPosition(pos) ); }",
        "C": "public static @NotNull Position of(int x, int y) { return new Position(x, y); } public Up(int initiator) { super(initiator); }",
        "label": "P"
    },
    "775": {
        "dataset": "COMP 3021",
        "project": "khyanaa",
        "bug_id": "1",
        "T": "void moveDown() { Position.of(233, 234), new Move.Down(-1).nextPosition(pos) ); }",
        "C": "public static @NotNull Position of(int x, int y) { return new Position(x, y); } public Down(int initiator) { super(initiator); }",
        "label": "P"
    },
    "776": {
        "dataset": "COMP 3021",
        "project": "khyanaa",
        "bug_id": "2",
        "T": "void moveRight() { Position.of(234, 233), new Move.Right(-1).nextPosition(pos) ); }",
        "C": "public static @NotNull Position of(int x, int y) { return new Position(x, y); } public Right(int initiator) { super(initiator); }",
        "label": "P"
    },
    "777": {
        "dataset": "COMP 3021",
        "project": "khyanaa",
        "bug_id": "3",
        "T": "void testExceedingUndoQuota() { final var gameState = mock(GameState.class); when(gameState.getPlayerPositionById(anyInt())).thenReturn(Position.of(0, 0)); when(gameState.getUndoQuota()).thenReturn(Optional.of(0)); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Undo(0)); }",
        "C": "public Undo(int initiator) { super(initiator); }",
        "label": "P"
    },
    "778": {
        "dataset": "COMP 3021",
        "project": "khyanaa",
        "bug_id": "4",
        "T": "void testExit() { final var gameState = mock(GameState.class); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Exit(0)); }",
        "C": "public Exit(int initiator) { super(initiator); }",
        "label": "F"
    },
    "779": {
        "dataset": "COMP 3021",
        "project": "khyanaa",
        "bug_id": "5",
        "T": "void testUndoUnlimited() { final var gameState = mock(GameState.class); when(gameState.getPlayerPositionById(anyInt())).thenReturn(Position.of(0, 0)); when(gameState.getUndoQuota()).thenReturn(Optional.empty()); final var game = new SokobanGameForTesting(gameState); for (int i = 0; i < 10000; i++) { final var result = game.feedActionForProcessing(new Undo(0)); } verify(gameState, times(10000)).undo(); }",
        "C": "public TerminalRenderingEngine(PrintStream outputSteam) { this.outputSteam = outputSteam; } public Undo(int initiator) { super(initiator); }",
        "label": "F"
    },
    "780": {
        "dataset": "COMP 3021",
        "project": "khyanaa",
        "bug_id": "6",
        "T": "void testPushOtherPlayerBox() { String mapText = \"\"\" 233 ###### #AB.@# #b.a.# #@...# ###### \"\"\"; final var testMap = TestHelper.parseGameMap(mapText); final var gameState = spy(new GameState(testMap)); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Move.Down(0)); verify(gameState, never()).move(any(), any()); }",
        "C": "public GameState(@NotNull GameMap map) { this.map = map; player_loc = map.getInit_player_loc(); player = map.getInit_player(); if(map.getUndoLimit().isPresent()){ undo = map.getUndoLimit().get(); } box = map.getInit_box(); box_loc = map.getInit_box_loc(); effective_loc = map.getEffective_loc(); move_history = new ArrayList<>(); checkpoint = new ArrayList<>(); move_times = new ArrayList<>(); } public Down(int initiator) { super(initiator); }",
        "label": "F"
    },
    "781": {
        "dataset": "COMP 3021",
        "project": "khyanaa",
        "bug_id": "7",
        "T": "void testMoveNonExistingPlayer() { String mapText = \"\"\" 233 ###### #A..@# #a...# ##...# ###### \"\"\"; final var testMap = TestHelper.parseGameMap(mapText); final var gameState = spy(new GameState(testMap)); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Move.Down(23)); }",
        "C": "public GameState(@NotNull GameMap map) { this.map = map; player_loc = map.getInit_player_loc(); player = map.getInit_player(); if(map.getUndoLimit().isPresent()){ undo = map.getUndoLimit().get(); } box = map.getInit_box(); box_loc = map.getInit_box_loc(); effective_loc = map.getEffective_loc(); move_history = new ArrayList<>(); checkpoint = new ArrayList<>(); move_times = new ArrayList<>(); } public Down(int initiator) { super(initiator); }",
        "label": "P"
    },
    "782": {
        "dataset": "COMP 3021",
        "project": "khyanaa",
        "bug_id": "8",
        "T": "void testCheckpointWhenNeed() { final var gameState = spy(new GameState(TestHelper.parseGameMap(\"\"\" 233 ###### #.Aa@# #..a@# ###### \"\"\" ))); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Move.Right(0)); verify(gameState, times(1)).checkpoint(); }",
        "C": "public GameState(@NotNull GameMap map) { this.map = map; player_loc = map.getInit_player_loc(); player = map.getInit_player(); if(map.getUndoLimit().isPresent()){ undo = map.getUndoLimit().get(); } box = map.getInit_box(); box_loc = map.getInit_box_loc(); effective_loc = map.getEffective_loc(); move_history = new ArrayList<>(); checkpoint = new ArrayList<>(); move_times = new ArrayList<>(); } public Right(int initiator) { super(initiator); }",
        "label": "P"
    },
    "783": {
        "dataset": "COMP 3021",
        "project": "khyanaa",
        "bug_id": "9",
        "T": "void testPushBoxAgainstWall() { String mapText = \"\"\" 233 ###### #A..@# #a...# ##...# ###### \"\"\"; final var testMap = TestHelper.parseGameMap(mapText); final var gameState = spy(new GameState(testMap)); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Move.Down(0)); verify(gameState, never()).move(any(), any()); }",
        "C": "public GameState(@NotNull GameMap map) { this.map = map; player_loc = map.getInit_player_loc(); player = map.getInit_player(); if(map.getUndoLimit().isPresent()){ undo = map.getUndoLimit().get(); } box = map.getInit_box(); box_loc = map.getInit_box_loc(); effective_loc = map.getEffective_loc(); move_history = new ArrayList<>(); checkpoint = new ArrayList<>(); move_times = new ArrayList<>(); } public Down(int initiator) { super(initiator); }",
        "label": "P"
    },
    "784": {
        "dataset": "COMP 3021",
        "project": "khyanaa",
        "bug_id": "10",
        "T": "void testCheckpointWhenNotNeed() { final var gameState = spy(new GameState(TestHelper.parseGameMap(\"\"\" 233 ###### #A.a@# #..a@# ###### \"\"\" ))); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Move.Right(0)); verify(gameState, never()).checkpoint(); } private static class SokobanGameForTesting extends AbstractSokobanGame { protected SokobanGameForTesting(GameState gameState) { super(gameState); } @Override public void run() { } public ActionResult feedActionForProcessing(Action action) { return processAction(action); } }",
        "C": "public GameState(@NotNull GameMap map) { this.map = map; player_loc = map.getInit_player_loc(); player = map.getInit_player(); if(map.getUndoLimit().isPresent()){ undo = map.getUndoLimit().get(); } box = map.getInit_box(); box_loc = map.getInit_box_loc(); effective_loc = map.getEffective_loc(); move_history = new ArrayList<>(); checkpoint = new ArrayList<>(); move_times = new ArrayList<>(); } public Right(int initiator) { super(initiator); } public void run() { // TODO renderingEngine.message(\"Sokoban game is ready.\\n\"); renderingEngine.render(state); if(state.getUndoQuota().orElse(0) != -1){renderingEngine.message(\"\\nUndo Quota: \"+state.getUndoQuota().orElse(0)+\"\\n\");} else{renderingEngine.message(\"\\nUnlimited\\n\");} while (true){ var actionResult = processAction(inputEngine.fetchAction()); if (actionResult instanceof ActionResult.Failed fail) { renderingEngine.message(fail.getReason()); } renderingEngine.render(state); if(state.getUndoQuota().orElse(0) != -1){renderingEngine.message(\"\\nUndo Quota: \"+state.getUndoQuota().orElse(0)+\"\\n\");} else{renderingEngine.message(\"\\nUnlimited\\n\");} if (actionResult.getAction() instanceof Exit || shouldStop()){ renderingEngine.message(\"Game exits.\\n\"); break; } } if (state.isWin()){ renderingEngine.message(\"You win.\"); } } protected ActionResult processAction(@NotNull Action action) { // TODO if (action instanceof Move m && Objects.requireNonNull(state.getPlayerPositionById(m.getInitiator())).x() == -10000 && Objects.requireNonNull(state.getPlayerPositionById(m.getInitiator())).y() == -10000){ return new ActionResult.Failed(action, \"Player not found.\\n\"); } return switch (action){ case Move.Down d ->{ Position player_pos = state.getPlayerPositionById(d.getInitiator()); Position down = Position.of(player_pos.x(), player_pos.y()+1); if (state.getEntity(down) instanceof Wall){ yield new ActionResult.Failed(action,\"You hit a wall.\\n\"); } else if(state.getEntity(down) instanceof Box){ Position check = Position.of(player_pos.x(), player_pos.y()+2); if (state.getEntity(check) instanceof Box || state.getEntity(check) instanceof Wall || state.getEntity(check) instanceof Player){ yield new ActionResult.Failed(action,\"Failed to push the box.\\n\"); } else if(state.getEntity(check) instanceof Empty){ state.move(down, Position.of(down.x(), down.y()+1)); state.move(player_pos, Position.of(player_pos.x(), player_pos.y()+1)); state.checkpoint(); System.out.println(state.getEntity(Position.of(down.x(), down.y()+1))); yield new ActionResult.Success(action); } else{ throw new IllegalArgumentException(\"This branch should not be reached\"); } } else if(state.getAllPlayerPositions().contains(down)){ yield new ActionResult.Failed(action,\"You hit another player.\\n\"); } else if(state.getEntity(down) instanceof Empty){ state.move(player_pos, Position.of(player_pos.x(), player_pos.y()+1)); state.checkpoint(); yield new ActionResult.Success(action); } else{ throw new IllegalArgumentException(\"This branch should not be reached\"); } } case Move.Left l -> { Position player_pos = state.getPlayerPositionById(l.getInitiator()); Position left = Position.of(player_pos.x()-1, player_pos.y()); if (state.getEntity(left) instanceof Wall){ yield new ActionResult.Failed(action,\"You hit a wall.\\n\"); } else if(state.getEntity(left) instanceof Box){ Position check = Position.of(player_pos.x()-2, player_pos.y()); if (state.getEntity(check) instanceof Box || state.getEntity(check) instanceof Wall || state.getEntity(check) instanceof Player){ yield new ActionResult.Failed(action,\"Failed to push the box.\\n\"); } else if(state.getEntity(check) instanceof Empty){ state.move(left, Position.of(left.x()-1, left.y())); state.move(player_pos, Position.of(player_pos.x()-1, player_pos.y())); state.checkpoint(); yield new ActionResult.Success(action); } else{ throw new IllegalArgumentException(\"This branch should not be reached\"); } } else if(state.getAllPlayerPositions().contains(left)){ yield new ActionResult.Failed(action,\"You hit another player.\\n\"); } else if(state.getEntity(left) instanceof Empty){ state.move(player_pos, Position.of(player_pos.x()-1, player_pos.y())); state.checkpoint(); yield new ActionResult.Success(action); } else{ yield new ActionResult.Failed(action,\"This branch should not be reached\"); } } case Move.Right r -> { Position player_pos = state.getPlayerPositionById(r.getInitiator()); Position right = Position.of(player_pos.x()+1, player_pos.y()); if (state.getEntity(right) instanceof Wall){ yield new ActionResult.Failed(action,\"You hit a wall.\\n\"); } else if(state.getEntity(right) instanceof Box){ Position check = Position.of(player_pos.x()+2, player_pos.y()); if (state.getEntity(check) instanceof Box || state.getEntity(check) instanceof Wall || state.getEntity(check) instanceof Player){ yield new ActionResult.Failed(action,\"Failed to push the box.\\n\"); } else if(state.getEntity(check) instanceof Empty){ state.move(right, Position.of(right.x()+1, right.y())); state.move(player_pos, Position.of(player_pos.x()+1, player_pos.y())); state.checkpoint(); yield new ActionResult.Success(action); } else{ throw new IllegalArgumentException(\"This branch should not be reached\"); } } else if(state.getAllPlayerPositions().contains(right)){ yield new ActionResult.Failed(action,\"You hit another player.\\n\"); } else if(state.getEntity(right) instanceof Empty){ state.move(player_pos, Position.of(player_pos.x()+1, player_pos.y())); state.checkpoint(); yield new ActionResult.Success(action); } else{ yield new ActionResult.Failed(action,\"This branch should not be reached\"); } } case Move.Up u ->{ Position player_pos = state.getPlayerPositionById(u.getInitiator()); Position up = Position.of(player_pos.x(), player_pos.y()-1); if (state.getEntity(up) instanceof Wall){ yield new ActionResult.Failed(action,\"You hit a wall.\\n\"); } else if(state.getEntity(up) instanceof Box){ Position check = Position.of(player_pos.x(), player_pos.y()-2); if (state.getEntity(check) instanceof Box || state.getEntity(check) instanceof Wall || state.getEntity(check) instanceof Player){ yield new ActionResult.Failed(action,\"Failed to push the box.\\n\"); } else if(state.getEntity(check) instanceof Empty){ state.move(up, Position.of(up.x(), up.y()-1)); state.move(player_pos, Position.of(player_pos.x(), player_pos.y()-1)); state.checkpoint(); yield new ActionResult.Success(action); } else{ yield new ActionResult.Failed(action,\"This branch should not be reached\"); } } else if(state.getAllPlayerPositions().contains(up)){ yield new ActionResult.Failed(action,\"You hit another player.\\n\"); } else if(state.getEntity(up) instanceof Empty){ state.move(player_pos, Position.of(player_pos.x(), player_pos.y()-1)); state.checkpoint(); yield new ActionResult.Success(action); } else{ yield new ActionResult.Failed(action,\"This branch should not be reached\"); } } case Exit ignored2 -> new ActionResult.Success(action); case Undo ignored1 -> { if (state.getUndoQuota().orElse(0)==0){ yield new ActionResult.Failed(action, \"You have run out of your undo quota.\\n\"); } else{ state.undo(); yield new ActionResult.Success(action); } } case InvalidInput ignored -> new ActionResult.Failed(action,\"Invalid Input.\\n\"); }; }",
        "label": "F"
    },
    "785": {
        "dataset": "COMP 3021",
        "project": "khyanaa",
        "bug_id": "11",
        "T": "void testHitAnotherPlayer() { String mapText = \"\"\" 233 ###### #A..@# #B...# #ab.@# ###### \"\"\"; final var testMap = TestHelper.parseGameMap(mapText); final var gameState = spy(new GameState(testMap)); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Move.Down(0)); verify(gameState, never()).move(any(), any()); }",
        "C": "public GameState(@NotNull GameMap map) { this.map = map; player_loc = map.getInit_player_loc(); player = map.getInit_player(); if(map.getUndoLimit().isPresent()){ undo = map.getUndoLimit().get(); } box = map.getInit_box(); box_loc = map.getInit_box_loc(); effective_loc = map.getEffective_loc(); move_history = new ArrayList<>(); checkpoint = new ArrayList<>(); move_times = new ArrayList<>(); } public Down(int initiator) { super(initiator); }",
        "label": "P"
    },
    "786": {
        "dataset": "COMP 3021",
        "project": "khyanaa",
        "bug_id": "12",
        "T": "void testUndoWithinQuota() { final var gameState = mock(GameState.class); when(gameState.getPlayerPositionById(anyInt())).thenReturn(Position.of(0, 0)); when(gameState.getUndoQuota()).thenReturn(Optional.of(1)); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Undo(0)); verify(gameState, times(1)).undo(); }",
        "C": "public Undo(int initiator) { super(initiator); }",
        "label": "P"
    },
    "787": {
        "dataset": "COMP 3021",
        "project": "khyanaa",
        "bug_id": "13",
        "T": "void testInvalidInput() { final var game = new SokobanGameForTesting(mock(GameState.class)); final var message = String.valueOf(new Random().nextLong()); final var action = new InvalidInput(-1, message); final var result = game.feedActionForProcessing(action); }",
        "C": "public InvalidInput(int initiator, @NotNull String message) { super(initiator); this.message = message; }",
        "label": "P"
    },
    "788": {
        "dataset": "COMP 3021",
        "project": "khyanaa",
        "bug_id": "14",
        "T": "void testUndoLimitParsing() { final var gameMap = TestHelper.parseGameMap(rectangularMap); }",
        "C": "",
        "label": "P"
    },
    "789": {
        "dataset": "COMP 3021",
        "project": "khyanaa",
        "bug_id": "15",
        "T": "void testWidthForNonRectangularMap() { final var gameMap = TestHelper.parseGameMap(nonRectangularMap); }",
        "C": "",
        "label": "P"
    },
    "790": {
        "dataset": "COMP 3021",
        "project": "khyanaa",
        "bug_id": "16",
        "T": "void testTwoPlayersMap() { final var twoPlayersMap = \"\"\" 233 ###### #A..@# #..B@# #....# #.a..# #..b.# ###### \"\"\"; final var gameMap = TestHelper.parseGameMap(twoPlayersMap); final var playerIds = gameMap.getPlayerIds(); final var expectedIds = new HashSet<Integer>(); expectedIds.add(0); expectedIds.add(1); }",
        "C": "public Set<Integer> getPlayerIds() { //TODO HashSet<Integer> player = new HashSet<>(); player.addAll(init_player); return player; }",
        "label": "P"
    },
    "791": {
        "dataset": "COMP 3021",
        "project": "khyanaa",
        "bug_id": "17",
        "T": "void testMapWithoutPlayer() { final var invalidMap = \"\"\" 233 ### #.# ### \"\"\"; } // @Tag(TestKind.HIDDEN) // @Test // void testUnmatchedPlayersAndBoxes() { // final var invalidMap = \"\"\" // 233 // ###### // #A..@# // #...@# // #a.b@# // #.a.@# // #..a.# // ###### // \"\"\"; // assertThrowsExactly(IllegalArgumentException.class, () -> TestHelper.parseGameMap(invalidMap)); // }",
        "C": "public TerminalRenderingEngine(PrintStream outputSteam) { this.outputSteam = outputSteam; }",
        "label": "P"
    },
    "792": {
        "dataset": "COMP 3021",
        "project": "khyanaa",
        "bug_id": "18",
        "T": "void testManyPlayersMap() { final var manyPlayersMap = \"\"\" 233 ###### #A.P@@# #vCB@@# #.cpD@# #Ga.d@# #g.bV@# ###### \"\"\"; final var gameMap = TestHelper.parseGameMap(manyPlayersMap); final var playerIds = gameMap.getPlayerIds(); final var expectedIds = new HashSet<>(Arrays.asList( 0, 'P' - 'A', 'C' - 'A', 'B' - 'A', 'D' - 'A', 'G' - 'A', 'V' - 'A' )); }",
        "C": "public Set<Integer> getPlayerIds() { //TODO HashSet<Integer> player = new HashSet<>(); player.addAll(init_player); return player; }",
        "label": "P"
    },
    "793": {
        "dataset": "COMP 3021",
        "project": "khyanaa",
        "bug_id": "19",
        "T": "void testHeightForNonRectangularMap() { final var gameMap = TestHelper.parseGameMap(nonRectangularMap); }",
        "C": "",
        "label": "P"
    },
    "794": {
        "dataset": "COMP 3021",
        "project": "khyanaa",
        "bug_id": "20",
        "T": "void testDuplicatedPlayers() { final var invalidMap = \"\"\" 233 ###### #A..@# #..A@# #....# #.a..# #..b.# ###### \"\"\"; }",
        "C": "",
        "label": "P"
    },
    "795": {
        "dataset": "COMP 3021",
        "project": "khyanaa",
        "bug_id": "21",
        "T": "void testParseMapWithoutUndoLimit() { final var invalidMap = String.join(\"\\n\", rectangularMap.lines().skip(1).toList()); }",
        "C": "",
        "label": "P"
    },
    "796": {
        "dataset": "COMP 3021",
        "project": "khyanaa",
        "bug_id": "22",
        "T": "void testInsufficientDestinations() { final var invalidMap = \"\"\" 233 ###### #A..@# #...@# #a...# #.a..# #..a.# ###### \"\"\"; }",
        "C": "",
        "label": "P"
    },
    "797": {
        "dataset": "COMP 3021",
        "project": "khyanaa",
        "bug_id": "23",
        "T": "void testSuperLargeMap() { try { new GameMap(Integer.MAX_VALUE, Integer.MAX_VALUE, Collections.emptySet(), 0); } catch (OutOfMemoryError e) { throw new RuntimeException(e); } }); }",
        "C": "public GameMap(int maxWidth, int maxHeight, Set<Position> destinations, int undoLimit) { //TODO this.maxWidth = maxWidth; this.maxHeight = maxHeight; this.destinations = new HashSet<>(); this.destinations.addAll(destinations); this.undoLimit = undoLimit; } /** * Parses the map from a string representation. * The first line is undo limit. * Starting from the second line, the game map is represented as follows, * <li># represents a {@link Wall}</li> * <li>@ represents a box destination.</li> * <li>Any upper-case letter represents a {@link Player}.</li> * <li> * Any lower-case letter represents a {@link Box} that is only movable by the player with the corresponding upper-case letter. * For instance, box \"a\" can only be moved by player \"A\" and not movable by player \"B\". * </li> * <li>. represents an {@link Empty} position in the map, meaning there is no player or box currently at this position.</li> * <p> * Notes: * <li> * There can be at most 26 players. * All implementations of classes in the hk.ust.comp3021.game package should support up to 26 players. * </li> * <li> * For simplicity, we assume the given map is bounded with a closed boundary. * There is no need to check this point. * </li> * <li> * Example maps can be found in \"src/main/resources\". * </li> * * @param mapText The string representation. * @return The parsed GameMap object. * @throws IllegalArgumentException if undo limit is negative but not -1. * @throws IllegalArgumentException if there are multiple same upper-case letters, i.e., one player can only exist at one position. * @throws IllegalArgumentException if there are no players in the map. * @throws IllegalArgumentException if the number of boxes is not equal to the number of box destinations. * @throws IllegalArgumentException if there are boxes whose {@link Box#getPlayerId()} public TerminalRenderingEngine(PrintStream outputSteam) { this.outputSteam = outputSteam; }",
        "label": "P"
    },
    "798": {
        "dataset": "COMP 3021",
        "project": "khyanaa",
        "bug_id": "24",
        "T": "void testInvalidUndoLimit() { final var invalidMap = \"\"\" -233 ###### #A..@# #...@# #a.b@# #.a.@# #..a.# ###### \"\"\"; }",
        "C": "",
        "label": "P"
    },
    "799": {
        "dataset": "COMP 3021",
        "project": "khyanaa",
        "bug_id": "25",
        "T": "void testEmptyMap() { final var invalidMap = \"\"; }",
        "C": "",
        "label": "P"
    },
    "800": {
        "dataset": "COMP 3021",
        "project": "khyanaa",
        "bug_id": "26",
        "T": "void testMove(String input, String name, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); } private InputStream fixValueStream(String content) { final var bytes = content.getBytes(StandardCharsets.UTF_8); return new ByteArrayInputStream(bytes); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine(); // // TODO switch (inputLine.toLowerCase()) { case \"w\": { return new Move.Up(0); } case \"a\": { return new Move.Left(0); } case \"s\": { return new Move.Down(0); } case \"d\": { return new Move.Right(0); } case \"h\": { return new Move.Up(1); } case \"j\": { return new Move.Left(1); } case \"k\": { return new Move.Down(1); } case \"l\": { return new Move.Right(1); } case \"u\": { return new Undo(0); } case \"exit\": { return new Exit(0); } case default: { return new InvalidInput(0, \"Invalid Input\"); } } } }",
        "label": "P"
    },
    "801": {
        "dataset": "COMP 3021",
        "project": "khyanaa",
        "bug_id": "27",
        "T": "void testMove(String input, String name, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); } private InputStream fixValueStream(String content) { final var bytes = content.getBytes(StandardCharsets.UTF_8); return new ByteArrayInputStream(bytes); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine(); // // TODO switch (inputLine.toLowerCase()) { case \"w\": { return new Move.Up(0); } case \"a\": { return new Move.Left(0); } case \"s\": { return new Move.Down(0); } case \"d\": { return new Move.Right(0); } case \"h\": { return new Move.Up(1); } case \"j\": { return new Move.Left(1); } case \"k\": { return new Move.Down(1); } case \"l\": { return new Move.Right(1); } case \"u\": { return new Undo(0); } case \"exit\": { return new Exit(0); } case default: { return new InvalidInput(0, \"Invalid Input\"); } } } }",
        "label": "P"
    },
    "802": {
        "dataset": "COMP 3021",
        "project": "khyanaa",
        "bug_id": "28",
        "T": "void testMove(String input, String name, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); } private InputStream fixValueStream(String content) { final var bytes = content.getBytes(StandardCharsets.UTF_8); return new ByteArrayInputStream(bytes); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine(); // // TODO switch (inputLine.toLowerCase()) { case \"w\": { return new Move.Up(0); } case \"a\": { return new Move.Left(0); } case \"s\": { return new Move.Down(0); } case \"d\": { return new Move.Right(0); } case \"h\": { return new Move.Up(1); } case \"j\": { return new Move.Left(1); } case \"k\": { return new Move.Down(1); } case \"l\": { return new Move.Right(1); } case \"u\": { return new Undo(0); } case \"exit\": { return new Exit(0); } case default: { return new InvalidInput(0, \"Invalid Input\"); } } } }",
        "label": "P"
    },
    "803": {
        "dataset": "COMP 3021",
        "project": "khyanaa",
        "bug_id": "29",
        "T": "void testMove(String input, String name, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); } private InputStream fixValueStream(String content) { final var bytes = content.getBytes(StandardCharsets.UTF_8); return new ByteArrayInputStream(bytes); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine(); // // TODO switch (inputLine.toLowerCase()) { case \"w\": { return new Move.Up(0); } case \"a\": { return new Move.Left(0); } case \"s\": { return new Move.Down(0); } case \"d\": { return new Move.Right(0); } case \"h\": { return new Move.Up(1); } case \"j\": { return new Move.Left(1); } case \"k\": { return new Move.Down(1); } case \"l\": { return new Move.Right(1); } case \"u\": { return new Undo(0); } case \"exit\": { return new Exit(0); } case default: { return new InvalidInput(0, \"Invalid Input\"); } } } }",
        "label": "P"
    },
    "804": {
        "dataset": "COMP 3021",
        "project": "khyanaa",
        "bug_id": "30",
        "T": "void testMove(String input, String name, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); } private InputStream fixValueStream(String content) { final var bytes = content.getBytes(StandardCharsets.UTF_8); return new ByteArrayInputStream(bytes); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine(); // // TODO switch (inputLine.toLowerCase()) { case \"w\": { return new Move.Up(0); } case \"a\": { return new Move.Left(0); } case \"s\": { return new Move.Down(0); } case \"d\": { return new Move.Right(0); } case \"h\": { return new Move.Up(1); } case \"j\": { return new Move.Left(1); } case \"k\": { return new Move.Down(1); } case \"l\": { return new Move.Right(1); } case \"u\": { return new Undo(0); } case \"exit\": { return new Exit(0); } case default: { return new InvalidInput(0, \"Invalid Input\"); } } } }",
        "label": "F"
    },
    "805": {
        "dataset": "COMP 3021",
        "project": "khyanaa",
        "bug_id": "31",
        "T": "void testMove(String input, String name, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); } private InputStream fixValueStream(String content) { final var bytes = content.getBytes(StandardCharsets.UTF_8); return new ByteArrayInputStream(bytes); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine(); // // TODO switch (inputLine.toLowerCase()) { case \"w\": { return new Move.Up(0); } case \"a\": { return new Move.Left(0); } case \"s\": { return new Move.Down(0); } case \"d\": { return new Move.Right(0); } case \"h\": { return new Move.Up(1); } case \"j\": { return new Move.Left(1); } case \"k\": { return new Move.Down(1); } case \"l\": { return new Move.Right(1); } case \"u\": { return new Undo(0); } case \"exit\": { return new Exit(0); } case default: { return new InvalidInput(0, \"Invalid Input\"); } } } }",
        "label": "F"
    },
    "806": {
        "dataset": "COMP 3021",
        "project": "khyanaa",
        "bug_id": "32",
        "T": "void testMove(String input, String name, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); } private InputStream fixValueStream(String content) { final var bytes = content.getBytes(StandardCharsets.UTF_8); return new ByteArrayInputStream(bytes); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine(); // // TODO switch (inputLine.toLowerCase()) { case \"w\": { return new Move.Up(0); } case \"a\": { return new Move.Left(0); } case \"s\": { return new Move.Down(0); } case \"d\": { return new Move.Right(0); } case \"h\": { return new Move.Up(1); } case \"j\": { return new Move.Left(1); } case \"k\": { return new Move.Down(1); } case \"l\": { return new Move.Right(1); } case \"u\": { return new Undo(0); } case \"exit\": { return new Exit(0); } case default: { return new InvalidInput(0, \"Invalid Input\"); } } } }",
        "label": "F"
    },
    "807": {
        "dataset": "COMP 3021",
        "project": "khyanaa",
        "bug_id": "33",
        "T": "void testMove(String input, String name, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); } private InputStream fixValueStream(String content) { final var bytes = content.getBytes(StandardCharsets.UTF_8); return new ByteArrayInputStream(bytes); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine(); // // TODO switch (inputLine.toLowerCase()) { case \"w\": { return new Move.Up(0); } case \"a\": { return new Move.Left(0); } case \"s\": { return new Move.Down(0); } case \"d\": { return new Move.Right(0); } case \"h\": { return new Move.Up(1); } case \"j\": { return new Move.Left(1); } case \"k\": { return new Move.Down(1); } case \"l\": { return new Move.Right(1); } case \"u\": { return new Undo(0); } case \"exit\": { return new Exit(0); } case default: { return new InvalidInput(0, \"Invalid Input\"); } } } }",
        "label": "P"
    },
    "808": {
        "dataset": "COMP 3021",
        "project": "khyanaa",
        "bug_id": "34",
        "T": "void testUndo(String input, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine(); // // TODO switch (inputLine.toLowerCase()) { case \"w\": { return new Move.Up(0); } case \"a\": { return new Move.Left(0); } case \"s\": { return new Move.Down(0); } case \"d\": { return new Move.Right(0); } case \"h\": { return new Move.Up(1); } case \"j\": { return new Move.Left(1); } case \"k\": { return new Move.Down(1); } case \"l\": { return new Move.Right(1); } case \"u\": { return new Undo(0); } case \"exit\": { return new Exit(0); } case default: { return new InvalidInput(0, \"Invalid Input\"); } } } }",
        "label": "P"
    },
    "809": {
        "dataset": "COMP 3021",
        "project": "khyanaa",
        "bug_id": "35",
        "T": "void testInvalidInput() { final var inputStream = fixValueStream(\"blah blah\"); final var inputEngine = new TerminalInputEngine(inputStream); final var action = inputEngine.fetchAction(); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine(); // // TODO switch (inputLine.toLowerCase()) { case \"w\": { return new Move.Up(0); } case \"a\": { return new Move.Left(0); } case \"s\": { return new Move.Down(0); } case \"d\": { return new Move.Right(0); } case \"h\": { return new Move.Up(1); } case \"j\": { return new Move.Left(1); } case \"k\": { return new Move.Down(1); } case \"l\": { return new Move.Right(1); } case \"u\": { return new Undo(0); } case \"exit\": { return new Exit(0); } case default: { return new InvalidInput(0, \"Invalid Input\"); } } } }",
        "label": "P"
    },
    "810": {
        "dataset": "COMP 3021",
        "project": "khyanaa",
        "bug_id": "36",
        "T": "void testUndoWhenThereIsNoMove() { final var gameState = new GameState(TestHelper.parseGameMap(\"\"\" 233 ###### #A.a@# #..a@# ###### \"\"\" )); gameState.undo(); } private Entity generateEntity(int key) { return switch (key % 4) { case 0 -> new Box(0); case 1 -> new Empty(); case 2 -> new Player(0); case 3 -> new Wall(); default -> throw new ShouldNotReachException(); }; }",
        "C": "public GameState(@NotNull GameMap map) { this.map = map; player_loc = map.getInit_player_loc(); player = map.getInit_player(); if(map.getUndoLimit().isPresent()){ undo = map.getUndoLimit().get(); } box = map.getInit_box(); box_loc = map.getInit_box_loc(); effective_loc = map.getEffective_loc(); move_history = new ArrayList<>(); checkpoint = new ArrayList<>(); move_times = new ArrayList<>(); } public void undo() { // TODO if (!checkpoint.isEmpty()){ for (int i = 0; i < move_times.get(move_times.size()-1); i++){ Position from = checkpoint.get(checkpoint.size()-1).get(1); Position to = checkpoint.get(checkpoint.size()-1).get(0); if (player_loc.contains(from)){ player_loc.set(player_loc.indexOf(from), to); } else if (box_loc.contains(from)){ box_loc.set(box_loc.indexOf(from), to); } checkpoint.remove(checkpoint.size()-1); } move_times.remove(move_times.size()-1); if (undo != -1){ undo--; } } } /** * Get the maximum width of the game map. * This should be the same as that in {@link GameMap} public TerminalRenderingEngine(PrintStream outputSteam) { this.outputSteam = outputSteam; } public Box(int playerId) { this.playerId = playerId; } public Player(int id) { this.id = id; } public ShouldNotReachException() { super(\"This branch should not be reached.\"); }",
        "label": "P"
    },
    "811": {
        "dataset": "COMP 3021",
        "project": "khyanaa",
        "bug_id": "37",
        "T": "void testGetUndoUnlimited() { final var gameState = new GameState(TestHelper.parseGameMap(\"\"\" -1 ###### #.Aa@# #..a@# ###### \"\"\" )); }",
        "C": "public GameState(@NotNull GameMap map) { this.map = map; player_loc = map.getInit_player_loc(); player = map.getInit_player(); if(map.getUndoLimit().isPresent()){ undo = map.getUndoLimit().get(); } box = map.getInit_box(); box_loc = map.getInit_box_loc(); effective_loc = map.getEffective_loc(); move_history = new ArrayList<>(); checkpoint = new ArrayList<>(); move_times = new ArrayList<>(); }",
        "label": "F"
    },
    "812": {
        "dataset": "COMP 3021",
        "project": "khyanaa",
        "bug_id": "38",
        "T": "void testMapCopying() { final var maxWidth = 2333; final var maxHeight = 2333; final var random = new Random(); final var randomEntities = Stream.generate(() -> Position.of(random.nextInt(maxWidth), random.nextInt(maxHeight))) .distinct() .limit(100) .collect(Collectors.toMap(Function.identity(), it -> generateEntity(it.x()))); final var firstPos = randomEntities.keySet().stream().findFirst(); final var gameMap = new GameMap(maxWidth, maxHeight, Collections.singleton(firstPos.get()), 233); randomEntities.forEach(gameMap::putEntity); final var gameState = new GameState(gameMap); final var randomPosition = randomEntities.keySet().stream().findAny(); gameMap.putEntity(randomPosition.get(), new Empty()); randomEntities.forEach((p, e) -> assertEquals(e, gameState.getEntity(p))); }",
        "C": "public static @NotNull Position of(int x, int y) { return new Position(x, y); } public GameMap(int maxWidth, int maxHeight, Set<Position> destinations, int undoLimit) { //TODO this.maxWidth = maxWidth; this.maxHeight = maxHeight; this.destinations = new HashSet<>(); this.destinations.addAll(destinations); this.undoLimit = undoLimit; } /** * Parses the map from a string representation. * The first line is undo limit. * Starting from the second line, the game map is represented as follows, * <li># represents a {@link Wall}</li> * <li>@ represents a box destination.</li> * <li>Any upper-case letter represents a {@link Player}.</li> * <li> * Any lower-case letter represents a {@link Box} that is only movable by the player with the corresponding upper-case letter. * For instance, box \"a\" can only be moved by player \"A\" and not movable by player \"B\". * </li> * <li>. represents an {@link Empty} position in the map, meaning there is no player or box currently at this position.</li> * <p> * Notes: * <li> * There can be at most 26 players. * All implementations of classes in the hk.ust.comp3021.game package should support up to 26 players. * </li> * <li> * For simplicity, we assume the given map is bounded with a closed boundary. * There is no need to check this point. * </li> * <li> * Example maps can be found in \"src/main/resources\". * </li> * * @param mapText The string representation. * @return The parsed GameMap object. * @throws IllegalArgumentException if undo limit is negative but not -1. * @throws IllegalArgumentException if there are multiple same upper-case letters, i.e., one player can only exist at one position. * @throws IllegalArgumentException if there are no players in the map. * @throws IllegalArgumentException if the number of boxes is not equal to the number of box destinations. * @throws IllegalArgumentException if there are boxes whose {@link Box#getPlayerId()} public GameState(@NotNull GameMap map) { this.map = map; player_loc = map.getInit_player_loc(); player = map.getInit_player(); if(map.getUndoLimit().isPresent()){ undo = map.getUndoLimit().get(); } box = map.getInit_box(); box_loc = map.getInit_box_loc(); effective_loc = map.getEffective_loc(); move_history = new ArrayList<>(); checkpoint = new ArrayList<>(); move_times = new ArrayList<>(); } public void putEntity(Position position, Entity entity) { //TODO switch (entity){ case Box o -> { init_box.add(o.getPlayerId()); init_player_loc.add(position); } case Player p -> { init_player.add(p.getId()); init_player_loc.add(position); } case Wall ignored -> walls.add(position); default ->{} } } public @Nullable Entity getEntity(@NotNull Position position) { // TODO if (box_loc.contains(position)){ return new Box(box.get(box_loc.indexOf(position))); } else if (player_loc.contains(position)){ return new Player(player.get(player_loc.indexOf(position))); } else if (map.getEntity(position) instanceof Wall){ return new Wall(); } else if (effective_loc.contains(position)){ return new Empty(); } return null; } /** * Get all box destination positions as a set in the game map. * This should be the same as that in {@link GameMap}",
        "label": "F"
    },
    "813": {
        "dataset": "COMP 3021",
        "project": "khyanaa",
        "bug_id": "39",
        "T": "void testUndoWhenThereIsMoveButNoCheckpoint() { final var gameState = new GameState(TestHelper.parseGameMap(\"\"\" 233 ###### #A.a@# #..a@# ###### \"\"\" )); gameState.move(Position.of(1, 1), Position.of(2, 1)); gameState.undo(); }",
        "C": "public GameState(@NotNull GameMap map) { this.map = map; player_loc = map.getInit_player_loc(); player = map.getInit_player(); if(map.getUndoLimit().isPresent()){ undo = map.getUndoLimit().get(); } box = map.getInit_box(); box_loc = map.getInit_box_loc(); effective_loc = map.getEffective_loc(); move_history = new ArrayList<>(); checkpoint = new ArrayList<>(); move_times = new ArrayList<>(); } public void move(Position from, Position to) { // TODO ArrayList<Position> move = new ArrayList<>(); move.add(from); move.add(to); if (player_loc.contains(from)){ player_loc.set(player_loc.indexOf(from), to); } else if (box_loc.contains(from)){ box_loc.set(box_loc.indexOf(from), to); } move_history.add(move); } /** * Record a checkpoint of the game state, including: * <li>All current positions of entities in the game map.</li> * <li>Current undo quota</li> * <p> * Checkpoint is used in {@link GameState#undo()} public static @NotNull Position of(int x, int y) { return new Position(x, y); } public void undo() { // TODO if (!checkpoint.isEmpty()){ for (int i = 0; i < move_times.get(move_times.size()-1); i++){ Position from = checkpoint.get(checkpoint.size()-1).get(1); Position to = checkpoint.get(checkpoint.size()-1).get(0); if (player_loc.contains(from)){ player_loc.set(player_loc.indexOf(from), to); } else if (box_loc.contains(from)){ box_loc.set(box_loc.indexOf(from), to); } checkpoint.remove(checkpoint.size()-1); } move_times.remove(move_times.size()-1); if (undo != -1){ undo--; } } } /** * Get the maximum width of the game map. * This should be the same as that in {@link GameMap}",
        "label": "P"
    },
    "814": {
        "dataset": "COMP 3021",
        "project": "khyanaa",
        "bug_id": "40",
        "T": "void testGameExit() { final var gameState = mock(GameState.class); final var inputEngine = mock(TerminalInputEngine.class); final var renderingEngine = mock(TerminalRenderingEngine.class); when(gameState.isWin()).thenReturn(false, false, false); when(inputEngine.fetchAction()) .thenReturn(new InvalidInput(0, \"\"), new InvalidInput(0, \"\"), new Exit(0)); final var game = new TerminalSokobanGame(gameState, inputEngine, renderingEngine); game.run(); verify(renderingEngine, atLeastOnce()).message(any()); }",
        "C": "public InvalidInput(int initiator, @NotNull String message) { super(initiator); this.message = message; } public Exit(int initiator) { super(initiator); } public TerminalSokobanGame(GameState gameState, TerminalInputEngine inputEngine, TerminalRenderingEngine renderingEngine) { super(gameState); this.inputEngine = inputEngine; this.renderingEngine = renderingEngine; // TODO // Check the number of players if (gameState.getAllPlayerPositions().size() > 2){ throw new IllegalArgumentException(\"TerminalSokobanGame only support at most two players.\"); } } public void run() { // TODO renderingEngine.message(\"Sokoban game is ready.\\n\"); renderingEngine.render(state); if(state.getUndoQuota().orElse(0) != -1){renderingEngine.message(\"\\nUndo Quota: \"+state.getUndoQuota().orElse(0)+\"\\n\");} else{renderingEngine.message(\"\\nUnlimited\\n\");} while (true){ var actionResult = processAction(inputEngine.fetchAction()); if (actionResult instanceof ActionResult.Failed fail) { renderingEngine.message(fail.getReason()); } renderingEngine.render(state); if(state.getUndoQuota().orElse(0) != -1){renderingEngine.message(\"\\nUndo Quota: \"+state.getUndoQuota().orElse(0)+\"\\n\");} else{renderingEngine.message(\"\\nUnlimited\\n\");} if (actionResult.getAction() instanceof Exit || shouldStop()){ renderingEngine.message(\"Game exits.\\n\"); break; } } if (state.isWin()){ renderingEngine.message(\"You win.\"); } }",
        "label": "P"
    },
    "815": {
        "dataset": "COMP 3021",
        "project": "khyanaa",
        "bug_id": "41",
        "T": "void testGameWin() { final var gameState = mock(GameState.class); final var inputEngine = mock(TerminalInputEngine.class); final var renderingEngine = mock(TerminalRenderingEngine.class); when(gameState.isWin()).thenReturn(false, false, false, true); when(inputEngine.fetchAction()) .thenReturn(new InvalidInput(0, \"\")); final var game = new TerminalSokobanGame(gameState, inputEngine, renderingEngine); game.run(); verify(gameState, atLeastOnce()).isWin(); verify(renderingEngine, atLeastOnce()).message(any()); }",
        "C": "public InvalidInput(int initiator, @NotNull String message) { super(initiator); this.message = message; } public TerminalSokobanGame(GameState gameState, TerminalInputEngine inputEngine, TerminalRenderingEngine renderingEngine) { super(gameState); this.inputEngine = inputEngine; this.renderingEngine = renderingEngine; // TODO // Check the number of players if (gameState.getAllPlayerPositions().size() > 2){ throw new IllegalArgumentException(\"TerminalSokobanGame only support at most two players.\"); } } public void run() { // TODO renderingEngine.message(\"Sokoban game is ready.\\n\"); renderingEngine.render(state); if(state.getUndoQuota().orElse(0) != -1){renderingEngine.message(\"\\nUndo Quota: \"+state.getUndoQuota().orElse(0)+\"\\n\");} else{renderingEngine.message(\"\\nUnlimited\\n\");} while (true){ var actionResult = processAction(inputEngine.fetchAction()); if (actionResult instanceof ActionResult.Failed fail) { renderingEngine.message(fail.getReason()); } renderingEngine.render(state); if(state.getUndoQuota().orElse(0) != -1){renderingEngine.message(\"\\nUndo Quota: \"+state.getUndoQuota().orElse(0)+\"\\n\");} else{renderingEngine.message(\"\\nUnlimited\\n\");} if (actionResult.getAction() instanceof Exit || shouldStop()){ renderingEngine.message(\"Game exits.\\n\"); break; } } if (state.isWin()){ renderingEngine.message(\"You win.\"); } }",
        "label": "P"
    },
    "816": {
        "dataset": "COMP 3021",
        "project": "khyanaa",
        "bug_id": "42",
        "T": "void testMoreThanTwoPlayers() { final var gameState = mock(GameState.class); final var inputEngine = mock(TerminalInputEngine.class); final var renderingEngine = mock(TerminalRenderingEngine.class); when(gameState.getAllPlayerPositions()).thenReturn(new HashSet<>(Arrays.asList(Position.of(1, 1), Position.of(1, 2), Position.of(1, 3)))); }",
        "C": "public static @NotNull Position of(int x, int y) { return new Position(x, y); }",
        "label": "P"
    },
    "817": {
        "dataset": "COMP 3021",
        "project": "kywongcb",
        "bug_id": "0",
        "T": "void moveUp() { Position.of(233, 232), new Move.Up(-1).nextPosition(pos) ); }",
        "C": "public static @NotNull Position of(int x, int y) { return new Position(x, y); } public Up(int initiator) { super(initiator); }",
        "label": "F"
    },
    "818": {
        "dataset": "COMP 3021",
        "project": "kywongcb",
        "bug_id": "1",
        "T": "void moveDown() { Position.of(233, 234), new Move.Down(-1).nextPosition(pos) ); }",
        "C": "public static @NotNull Position of(int x, int y) { return new Position(x, y); } public Down(int initiator) { super(initiator); }",
        "label": "F"
    },
    "819": {
        "dataset": "COMP 3021",
        "project": "kywongcb",
        "bug_id": "2",
        "T": "void moveRight() { Position.of(234, 233), new Move.Right(-1).nextPosition(pos) ); }",
        "C": "public static @NotNull Position of(int x, int y) { return new Position(x, y); } public Right(int initiator) { super(initiator); }",
        "label": "P"
    },
    "820": {
        "dataset": "COMP 3021",
        "project": "kywongcb",
        "bug_id": "3",
        "T": "void testExceedingUndoQuota() { final var gameState = mock(GameState.class); when(gameState.getPlayerPositionById(anyInt())).thenReturn(Position.of(0, 0)); when(gameState.getUndoQuota()).thenReturn(Optional.of(0)); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Undo(0)); }",
        "C": "public Undo(int initiator) { super(initiator); }",
        "label": "P"
    },
    "821": {
        "dataset": "COMP 3021",
        "project": "kywongcb",
        "bug_id": "4",
        "T": "void testExit() { final var gameState = mock(GameState.class); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Exit(0)); }",
        "C": "public Exit(int initiator) { super(initiator); }",
        "label": "F"
    },
    "822": {
        "dataset": "COMP 3021",
        "project": "kywongcb",
        "bug_id": "5",
        "T": "void testUndoUnlimited() { final var gameState = mock(GameState.class); when(gameState.getPlayerPositionById(anyInt())).thenReturn(Position.of(0, 0)); when(gameState.getUndoQuota()).thenReturn(Optional.empty()); final var game = new SokobanGameForTesting(gameState); for (int i = 0; i < 10000; i++) { final var result = game.feedActionForProcessing(new Undo(0)); } verify(gameState, times(10000)).undo(); }",
        "C": "public TerminalRenderingEngine(PrintStream outputSteam) { this.outputSteam = outputSteam; } public Undo(int initiator) { super(initiator); }",
        "label": "F"
    },
    "823": {
        "dataset": "COMP 3021",
        "project": "kywongcb",
        "bug_id": "6",
        "T": "void testPushOtherPlayerBox() { String mapText = \"\"\" 233 ###### #AB.@# #b.a.# #@...# ###### \"\"\"; final var testMap = TestHelper.parseGameMap(mapText); final var gameState = spy(new GameState(testMap)); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Move.Down(0)); verify(gameState, never()).move(any(), any()); }",
        "C": "public GameState(@NotNull GameMap map) { // TODO undos = map.undoLimit; dests = map.getDestinations(); width = map.getMaxWidth(); height = map.getMaxHeight(); steps.add(map.map); walls = map.walls; spaces = map.spaces; initPlayers = map.playerloc; initBoxes = map.boxloc; curBoxes = new ArrayList<>(initBoxes); curPlayers = new ArrayList<>(initPlayers); //throw new NotImplementedException(); } public Down(int initiator) { super(initiator); }",
        "label": "P"
    },
    "824": {
        "dataset": "COMP 3021",
        "project": "kywongcb",
        "bug_id": "7",
        "T": "void testMoveNonExistingPlayer() { String mapText = \"\"\" 233 ###### #A..@# #a...# ##...# ###### \"\"\"; final var testMap = TestHelper.parseGameMap(mapText); final var gameState = spy(new GameState(testMap)); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Move.Down(23)); }",
        "C": "public GameState(@NotNull GameMap map) { // TODO undos = map.undoLimit; dests = map.getDestinations(); width = map.getMaxWidth(); height = map.getMaxHeight(); steps.add(map.map); walls = map.walls; spaces = map.spaces; initPlayers = map.playerloc; initBoxes = map.boxloc; curBoxes = new ArrayList<>(initBoxes); curPlayers = new ArrayList<>(initPlayers); //throw new NotImplementedException(); } public Down(int initiator) { super(initiator); }",
        "label": "F"
    },
    "825": {
        "dataset": "COMP 3021",
        "project": "kywongcb",
        "bug_id": "8",
        "T": "void testCheckpointWhenNeed() { final var gameState = spy(new GameState(TestHelper.parseGameMap(\"\"\" 233 ###### #.Aa@# #..a@# ###### \"\"\" ))); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Move.Right(0)); verify(gameState, times(1)).checkpoint(); }",
        "C": "public GameState(@NotNull GameMap map) { // TODO undos = map.undoLimit; dests = map.getDestinations(); width = map.getMaxWidth(); height = map.getMaxHeight(); steps.add(map.map); walls = map.walls; spaces = map.spaces; initPlayers = map.playerloc; initBoxes = map.boxloc; curBoxes = new ArrayList<>(initBoxes); curPlayers = new ArrayList<>(initPlayers); //throw new NotImplementedException(); } public Right(int initiator) { super(initiator); }",
        "label": "P"
    },
    "826": {
        "dataset": "COMP 3021",
        "project": "kywongcb",
        "bug_id": "9",
        "T": "void testPushBoxAgainstWall() { String mapText = \"\"\" 233 ###### #A..@# #a...# ##...# ###### \"\"\"; final var testMap = TestHelper.parseGameMap(mapText); final var gameState = spy(new GameState(testMap)); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Move.Down(0)); verify(gameState, never()).move(any(), any()); }",
        "C": "public GameState(@NotNull GameMap map) { // TODO undos = map.undoLimit; dests = map.getDestinations(); width = map.getMaxWidth(); height = map.getMaxHeight(); steps.add(map.map); walls = map.walls; spaces = map.spaces; initPlayers = map.playerloc; initBoxes = map.boxloc; curBoxes = new ArrayList<>(initBoxes); curPlayers = new ArrayList<>(initPlayers); //throw new NotImplementedException(); } public Down(int initiator) { super(initiator); }",
        "label": "P"
    },
    "827": {
        "dataset": "COMP 3021",
        "project": "kywongcb",
        "bug_id": "10",
        "T": "void testCheckpointWhenNotNeed() { final var gameState = spy(new GameState(TestHelper.parseGameMap(\"\"\" 233 ###### #A.a@# #..a@# ###### \"\"\" ))); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Move.Right(0)); verify(gameState, never()).checkpoint(); } private static class SokobanGameForTesting extends AbstractSokobanGame { protected SokobanGameForTesting(GameState gameState) { super(gameState); } @Override public void run() { } public ActionResult feedActionForProcessing(Action action) { return processAction(action); } }",
        "C": "public GameState(@NotNull GameMap map) { // TODO undos = map.undoLimit; dests = map.getDestinations(); width = map.getMaxWidth(); height = map.getMaxHeight(); steps.add(map.map); walls = map.walls; spaces = map.spaces; initPlayers = map.playerloc; initBoxes = map.boxloc; curBoxes = new ArrayList<>(initBoxes); curPlayers = new ArrayList<>(initPlayers); //throw new NotImplementedException(); } public Right(int initiator) { super(initiator); } public void run() { // TODO while (!shouldStop()){ renderingEngine.render(this.state); processAction(inputEngine.fetchAction()); } } protected ActionResult processAction(@NotNull Action action) { // TODO if(action instanceof InvalidInput I) { return new ActionResult.Failed(I, \"Invaild Input\"); } if(action instanceof Exit E){ state.setExitTotrue(); return new ActionResult.Success(E); } if(action instanceof Move M){ if(M instanceof Move.Left L) { Position pos = state.getPlayerPositionById(L.getInitiator()); if(state.getEntity(Position.of(pos.x()-1,pos.y())) instanceof Box B){ if (B.getPlayerId() == L.getInitiator()){ if(state.getEntity(Position.of(pos.x()-2, pos.y())) instanceof Empty){ state.move(Position.of(pos.x()-1,pos.y()),Position.of(pos.x()-2, pos.y())); state.move(pos,Position.of(pos.x()-1,pos.y())); state.checkpoint(); return new ActionResult.Success(L); } } } if(state.getEntity(Position.of(pos.x()-1,pos.y())) instanceof Empty){ state.move(pos,Position.of(pos.x()-1,pos.y())); return new ActionResult.Success(L); } return new ActionResult.Failed(action, \"illegal move\"); } if(M instanceof Move.Right R) { Position pos = state.getPlayerPositionById(R.getInitiator()); if(state.getEntity(Position.of(pos.x()+1,pos.y())) instanceof Box B){ if (B.getPlayerId() == R.getInitiator()){ if(state.getEntity(Position.of(pos.x()+2, pos.y())) instanceof Empty){ state.move(Position.of(pos.x()+1,pos.y()),Position.of(pos.x()+2, pos.y())); state.move(pos,Position.of(pos.x()+1,pos.y())); state.checkpoint(); return new ActionResult.Success(action); } } } if(state.getEntity(Position.of(pos.x()+1,pos.y())) instanceof Empty){ state.move(pos,Position.of(pos.x()+1,pos.y())); return new ActionResult.Success(R); } return new ActionResult.Failed(action, \"illegal move\"); } if(M instanceof Move.Up U) { Position pos = state.getPlayerPositionById(U.getInitiator()); if(state.getEntity(Position.of(pos.x(),pos.y()-1)) instanceof Box B){ if (B.getPlayerId() == U.getInitiator()){ if(state.getEntity(Position.of(pos.x(), pos.y()-2)) instanceof Empty){ state.move(Position.of(pos.x(),pos.y()-1),Position.of(pos.x(), pos.y()-2)); state.move(pos,Position.of(pos.x(),pos.y()-1)); state.checkpoint(); return new ActionResult.Success(U); } } } if(state.getEntity(Position.of(pos.x(),pos.y()-1)) instanceof Empty){ state.move(pos,Position.of(pos.x(),pos.y()-1)); return new ActionResult.Success(U); } return new ActionResult.Failed(action, \"illegal move\"); } if(M instanceof Move.Down D) { Position pos = state.getPlayerPositionById(D.getInitiator()); if(state.getEntity(Position.of(pos.x(),pos.y()+1)) instanceof Box B){ if (B.getPlayerId() == D.getInitiator()){ if(state.getEntity(Position.of(pos.x(), pos.y()+2)) instanceof Empty){ state.move(Position.of(pos.x(),pos.y()+1),Position.of(pos.x(), pos.y()+2)); state.move(pos,Position.of(pos.x(),pos.y()+1)); state.checkpoint(); return new ActionResult.Success(action); } } } if(state.getEntity(Position.of(pos.x(),pos.y()+1)) instanceof Empty){ state.move(pos,Position.of(pos.x(),pos.y()+1)); return new ActionResult.Success(D); } return new ActionResult.Failed(action, \"illegal move\"); } } if (action instanceof Undo U){ if(state.undos <1) return new ActionResult.Failed(U,\"No undos left\"); state.undo(); return new ActionResult.Success(U); } return new ActionResult.Failed(action,\"unknown reason\"); }",
        "label": "P"
    },
    "828": {
        "dataset": "COMP 3021",
        "project": "kywongcb",
        "bug_id": "11",
        "T": "void testHitAnotherPlayer() { String mapText = \"\"\" 233 ###### #A..@# #B...# #ab.@# ###### \"\"\"; final var testMap = TestHelper.parseGameMap(mapText); final var gameState = spy(new GameState(testMap)); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Move.Down(0)); verify(gameState, never()).move(any(), any()); }",
        "C": "public GameState(@NotNull GameMap map) { // TODO undos = map.undoLimit; dests = map.getDestinations(); width = map.getMaxWidth(); height = map.getMaxHeight(); steps.add(map.map); walls = map.walls; spaces = map.spaces; initPlayers = map.playerloc; initBoxes = map.boxloc; curBoxes = new ArrayList<>(initBoxes); curPlayers = new ArrayList<>(initPlayers); //throw new NotImplementedException(); } public Down(int initiator) { super(initiator); }",
        "label": "P"
    },
    "829": {
        "dataset": "COMP 3021",
        "project": "kywongcb",
        "bug_id": "12",
        "T": "void testUndoWithinQuota() { final var gameState = mock(GameState.class); when(gameState.getPlayerPositionById(anyInt())).thenReturn(Position.of(0, 0)); when(gameState.getUndoQuota()).thenReturn(Optional.of(1)); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Undo(0)); verify(gameState, times(1)).undo(); }",
        "C": "public Undo(int initiator) { super(initiator); }",
        "label": "F"
    },
    "830": {
        "dataset": "COMP 3021",
        "project": "kywongcb",
        "bug_id": "13",
        "T": "void testInvalidInput() { final var game = new SokobanGameForTesting(mock(GameState.class)); final var message = String.valueOf(new Random().nextLong()); final var action = new InvalidInput(-1, message); final var result = game.feedActionForProcessing(action); }",
        "C": "public InvalidInput(int initiator, @NotNull String message) { super(initiator); this.message = message; }",
        "label": "P"
    },
    "831": {
        "dataset": "COMP 3021",
        "project": "kywongcb",
        "bug_id": "14",
        "T": "void testUndoLimitParsing() { final var gameMap = TestHelper.parseGameMap(rectangularMap); }",
        "C": "",
        "label": "P"
    },
    "832": {
        "dataset": "COMP 3021",
        "project": "kywongcb",
        "bug_id": "15",
        "T": "void testWidthForNonRectangularMap() { final var gameMap = TestHelper.parseGameMap(nonRectangularMap); }",
        "C": "",
        "label": "P"
    },
    "833": {
        "dataset": "COMP 3021",
        "project": "kywongcb",
        "bug_id": "16",
        "T": "void testTwoPlayersMap() { final var twoPlayersMap = \"\"\" 233 ###### #A..@# #..B@# #....# #.a..# #..b.# ###### \"\"\"; final var gameMap = TestHelper.parseGameMap(twoPlayersMap); final var playerIds = gameMap.getPlayerIds(); final var expectedIds = new HashSet<Integer>(); expectedIds.add(0); expectedIds.add(1); }",
        "C": "public Set<Integer> getPlayerIds() { // TODO Set<Integer> tempset = new HashSet<>(); for (var c:players) { tempset.add((int)(c - 'A')); } return tempset; //throw new NotImplementedException(); }",
        "label": "P"
    },
    "834": {
        "dataset": "COMP 3021",
        "project": "kywongcb",
        "bug_id": "17",
        "T": "void testMapWithoutPlayer() { final var invalidMap = \"\"\" 233 ### #.# ### \"\"\"; } // @Tag(TestKind.HIDDEN) // @Test // void testUnmatchedPlayersAndBoxes() { // final var invalidMap = \"\"\" // 233 // ###### // #A..@# // #...@# // #a.b@# // #.a.@# // #..a.# // ###### // \"\"\"; // assertThrowsExactly(IllegalArgumentException.class, () -> TestHelper.parseGameMap(invalidMap)); // }",
        "C": "public TerminalRenderingEngine(PrintStream outputSteam) { this.outputSteam = outputSteam; }",
        "label": "F"
    },
    "835": {
        "dataset": "COMP 3021",
        "project": "kywongcb",
        "bug_id": "18",
        "T": "void testManyPlayersMap() { final var manyPlayersMap = \"\"\" 233 ###### #A.P@@# #vCB@@# #.cpD@# #Ga.d@# #g.bV@# ###### \"\"\"; final var gameMap = TestHelper.parseGameMap(manyPlayersMap); final var playerIds = gameMap.getPlayerIds(); final var expectedIds = new HashSet<>(Arrays.asList( 0, 'P' - 'A', 'C' - 'A', 'B' - 'A', 'D' - 'A', 'G' - 'A', 'V' - 'A' )); }",
        "C": "public Set<Integer> getPlayerIds() { // TODO Set<Integer> tempset = new HashSet<>(); for (var c:players) { tempset.add((int)(c - 'A')); } return tempset; //throw new NotImplementedException(); }",
        "label": "P"
    },
    "836": {
        "dataset": "COMP 3021",
        "project": "kywongcb",
        "bug_id": "19",
        "T": "void testHeightForNonRectangularMap() { final var gameMap = TestHelper.parseGameMap(nonRectangularMap); }",
        "C": "",
        "label": "P"
    },
    "837": {
        "dataset": "COMP 3021",
        "project": "kywongcb",
        "bug_id": "20",
        "T": "void testDuplicatedPlayers() { final var invalidMap = \"\"\" 233 ###### #A..@# #..A@# #....# #.a..# #..b.# ###### \"\"\"; }",
        "C": "",
        "label": "P"
    },
    "838": {
        "dataset": "COMP 3021",
        "project": "kywongcb",
        "bug_id": "21",
        "T": "void testParseMapWithoutUndoLimit() { final var invalidMap = String.join(\"\\n\", rectangularMap.lines().skip(1).toList()); }",
        "C": "",
        "label": "P"
    },
    "839": {
        "dataset": "COMP 3021",
        "project": "kywongcb",
        "bug_id": "22",
        "T": "void testInsufficientDestinations() { final var invalidMap = \"\"\" 233 ###### #A..@# #...@# #a...# #.a..# #..a.# ###### \"\"\"; }",
        "C": "",
        "label": "P"
    },
    "840": {
        "dataset": "COMP 3021",
        "project": "kywongcb",
        "bug_id": "23",
        "T": "void testSuperLargeMap() { try { new GameMap(Integer.MAX_VALUE, Integer.MAX_VALUE, Collections.emptySet(), 0); } catch (OutOfMemoryError e) { throw new RuntimeException(e); } }); }",
        "C": "public GameMap(int maxWidth, int maxHeight, Set<Position> destinations, int undoLimit) { // TODO this.maxWidth = maxWidth; this.maxHeight = maxHeight; dests = destinations; this.undoLimit = undoLimit; } /** * Parses the map from a string representation. * The first line is undo limit. * Starting from the second line, the game map is represented as follows, * <li># represents a {@link Wall}</li> * <li>@ represents a box destination.</li> * <li>Any upper-case letter represents a {@link Player}.</li> * <li> * Any lower-case letter represents a {@link Box} that is only movable by the player with the corresponding upper-case letter. * For instance, box \"a\" can only be moved by player \"A\" and not movable by player \"B\". * </li> * <li>. represents an {@link Empty} position in the map, meaning there is no player or box currently at this position.</li> * <p> * Notes: * <li> * There can be at most 26 players. * All implementations of classes in the hk.ust.comp3021.game package should support up to 26 players. * </li> * <li> * For simplicity, we assume the given map is bounded with a closed boundary. * There is no need to check this point. * </li> * <li> * Example maps can be found in \"src/main/resources\". * </li> * * @param mapText The string representation. * @return The parsed GameMap object. * @throws IllegalArgumentException if undo limit is negative but not -1. * @throws IllegalArgumentException if there are multiple same upper-case letters, i.e., one player can only exist at one position. * @throws IllegalArgumentException if there are no players in the map. * @throws IllegalArgumentException if the number of boxes is not equal to the number of box destinations. * @throws IllegalArgumentException if there are boxes whose {@link Box#getPlayerId()} public TerminalRenderingEngine(PrintStream outputSteam) { this.outputSteam = outputSteam; }",
        "label": "P"
    },
    "841": {
        "dataset": "COMP 3021",
        "project": "kywongcb",
        "bug_id": "24",
        "T": "void testInvalidUndoLimit() { final var invalidMap = \"\"\" -233 ###### #A..@# #...@# #a.b@# #.a.@# #..a.# ###### \"\"\"; }",
        "C": "",
        "label": "P"
    },
    "842": {
        "dataset": "COMP 3021",
        "project": "kywongcb",
        "bug_id": "25",
        "T": "void testEmptyMap() { final var invalidMap = \"\"; }",
        "C": "",
        "label": "P"
    },
    "843": {
        "dataset": "COMP 3021",
        "project": "kywongcb",
        "bug_id": "26",
        "T": "void testMove(String input, String name, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); } private InputStream fixValueStream(String content) { final var bytes = content.getBytes(StandardCharsets.UTF_8); return new ByteArrayInputStream(bytes); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine(); // TODO switch(inputLine){ case \"w\" : { return new Move.Up(0); } case \"a\" : { return new Move.Left(0); } case \"s\" : { return new Move.Down(0); } case \"d\" : { return new Move.Right(0); } case \"k\" : { return new Move.Up(1); } case \"h\" : { return new Move.Left(1); } case \"j\" : { return new Move.Down(1); } case \"l\" : { return new Move.Right(1); } case \"r\" : { return new Undo(0); } case \"W\" : { return new Move.Up(0); } case \"A\" : { return new Move.Left(0); } case \"S\" : { return new Move.Down(0); } case \"D\" : { return new Move.Right(0); } case \"K\" : { return new Move.Up(1); } case \"H\" : { return new Move.Left(1); } case \"J\" : { return new Move.Down(1); } case \"L\" : { return new Move.Right(1); } case \"R\" : { return new Undo(0); } case \"exit\" : { return new Exit(0); } case \"EXIT\" : { return new Exit(0); } default : { return new InvalidInput(0,\"illgeal input\"); } } }",
        "label": "P"
    },
    "844": {
        "dataset": "COMP 3021",
        "project": "kywongcb",
        "bug_id": "27",
        "T": "void testMove(String input, String name, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); } private InputStream fixValueStream(String content) { final var bytes = content.getBytes(StandardCharsets.UTF_8); return new ByteArrayInputStream(bytes); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine(); // TODO switch(inputLine){ case \"w\" : { return new Move.Up(0); } case \"a\" : { return new Move.Left(0); } case \"s\" : { return new Move.Down(0); } case \"d\" : { return new Move.Right(0); } case \"k\" : { return new Move.Up(1); } case \"h\" : { return new Move.Left(1); } case \"j\" : { return new Move.Down(1); } case \"l\" : { return new Move.Right(1); } case \"r\" : { return new Undo(0); } case \"W\" : { return new Move.Up(0); } case \"A\" : { return new Move.Left(0); } case \"S\" : { return new Move.Down(0); } case \"D\" : { return new Move.Right(0); } case \"K\" : { return new Move.Up(1); } case \"H\" : { return new Move.Left(1); } case \"J\" : { return new Move.Down(1); } case \"L\" : { return new Move.Right(1); } case \"R\" : { return new Undo(0); } case \"exit\" : { return new Exit(0); } case \"EXIT\" : { return new Exit(0); } default : { return new InvalidInput(0,\"illgeal input\"); } } }",
        "label": "P"
    },
    "845": {
        "dataset": "COMP 3021",
        "project": "kywongcb",
        "bug_id": "28",
        "T": "void testMove(String input, String name, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); } private InputStream fixValueStream(String content) { final var bytes = content.getBytes(StandardCharsets.UTF_8); return new ByteArrayInputStream(bytes); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine(); // TODO switch(inputLine){ case \"w\" : { return new Move.Up(0); } case \"a\" : { return new Move.Left(0); } case \"s\" : { return new Move.Down(0); } case \"d\" : { return new Move.Right(0); } case \"k\" : { return new Move.Up(1); } case \"h\" : { return new Move.Left(1); } case \"j\" : { return new Move.Down(1); } case \"l\" : { return new Move.Right(1); } case \"r\" : { return new Undo(0); } case \"W\" : { return new Move.Up(0); } case \"A\" : { return new Move.Left(0); } case \"S\" : { return new Move.Down(0); } case \"D\" : { return new Move.Right(0); } case \"K\" : { return new Move.Up(1); } case \"H\" : { return new Move.Left(1); } case \"J\" : { return new Move.Down(1); } case \"L\" : { return new Move.Right(1); } case \"R\" : { return new Undo(0); } case \"exit\" : { return new Exit(0); } case \"EXIT\" : { return new Exit(0); } default : { return new InvalidInput(0,\"illgeal input\"); } } }",
        "label": "P"
    },
    "846": {
        "dataset": "COMP 3021",
        "project": "kywongcb",
        "bug_id": "29",
        "T": "void testMove(String input, String name, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); } private InputStream fixValueStream(String content) { final var bytes = content.getBytes(StandardCharsets.UTF_8); return new ByteArrayInputStream(bytes); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine(); // TODO switch(inputLine){ case \"w\" : { return new Move.Up(0); } case \"a\" : { return new Move.Left(0); } case \"s\" : { return new Move.Down(0); } case \"d\" : { return new Move.Right(0); } case \"k\" : { return new Move.Up(1); } case \"h\" : { return new Move.Left(1); } case \"j\" : { return new Move.Down(1); } case \"l\" : { return new Move.Right(1); } case \"r\" : { return new Undo(0); } case \"W\" : { return new Move.Up(0); } case \"A\" : { return new Move.Left(0); } case \"S\" : { return new Move.Down(0); } case \"D\" : { return new Move.Right(0); } case \"K\" : { return new Move.Up(1); } case \"H\" : { return new Move.Left(1); } case \"J\" : { return new Move.Down(1); } case \"L\" : { return new Move.Right(1); } case \"R\" : { return new Undo(0); } case \"exit\" : { return new Exit(0); } case \"EXIT\" : { return new Exit(0); } default : { return new InvalidInput(0,\"illgeal input\"); } } }",
        "label": "P"
    },
    "847": {
        "dataset": "COMP 3021",
        "project": "kywongcb",
        "bug_id": "30",
        "T": "void testMove(String input, String name, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); } private InputStream fixValueStream(String content) { final var bytes = content.getBytes(StandardCharsets.UTF_8); return new ByteArrayInputStream(bytes); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine(); // TODO switch(inputLine){ case \"w\" : { return new Move.Up(0); } case \"a\" : { return new Move.Left(0); } case \"s\" : { return new Move.Down(0); } case \"d\" : { return new Move.Right(0); } case \"k\" : { return new Move.Up(1); } case \"h\" : { return new Move.Left(1); } case \"j\" : { return new Move.Down(1); } case \"l\" : { return new Move.Right(1); } case \"r\" : { return new Undo(0); } case \"W\" : { return new Move.Up(0); } case \"A\" : { return new Move.Left(0); } case \"S\" : { return new Move.Down(0); } case \"D\" : { return new Move.Right(0); } case \"K\" : { return new Move.Up(1); } case \"H\" : { return new Move.Left(1); } case \"J\" : { return new Move.Down(1); } case \"L\" : { return new Move.Right(1); } case \"R\" : { return new Undo(0); } case \"exit\" : { return new Exit(0); } case \"EXIT\" : { return new Exit(0); } default : { return new InvalidInput(0,\"illgeal input\"); } } }",
        "label": "P"
    },
    "848": {
        "dataset": "COMP 3021",
        "project": "kywongcb",
        "bug_id": "31",
        "T": "void testMove(String input, String name, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); } private InputStream fixValueStream(String content) { final var bytes = content.getBytes(StandardCharsets.UTF_8); return new ByteArrayInputStream(bytes); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine(); // TODO switch(inputLine){ case \"w\" : { return new Move.Up(0); } case \"a\" : { return new Move.Left(0); } case \"s\" : { return new Move.Down(0); } case \"d\" : { return new Move.Right(0); } case \"k\" : { return new Move.Up(1); } case \"h\" : { return new Move.Left(1); } case \"j\" : { return new Move.Down(1); } case \"l\" : { return new Move.Right(1); } case \"r\" : { return new Undo(0); } case \"W\" : { return new Move.Up(0); } case \"A\" : { return new Move.Left(0); } case \"S\" : { return new Move.Down(0); } case \"D\" : { return new Move.Right(0); } case \"K\" : { return new Move.Up(1); } case \"H\" : { return new Move.Left(1); } case \"J\" : { return new Move.Down(1); } case \"L\" : { return new Move.Right(1); } case \"R\" : { return new Undo(0); } case \"exit\" : { return new Exit(0); } case \"EXIT\" : { return new Exit(0); } default : { return new InvalidInput(0,\"illgeal input\"); } } }",
        "label": "P"
    },
    "849": {
        "dataset": "COMP 3021",
        "project": "kywongcb",
        "bug_id": "32",
        "T": "void testMove(String input, String name, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); } private InputStream fixValueStream(String content) { final var bytes = content.getBytes(StandardCharsets.UTF_8); return new ByteArrayInputStream(bytes); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine(); // TODO switch(inputLine){ case \"w\" : { return new Move.Up(0); } case \"a\" : { return new Move.Left(0); } case \"s\" : { return new Move.Down(0); } case \"d\" : { return new Move.Right(0); } case \"k\" : { return new Move.Up(1); } case \"h\" : { return new Move.Left(1); } case \"j\" : { return new Move.Down(1); } case \"l\" : { return new Move.Right(1); } case \"r\" : { return new Undo(0); } case \"W\" : { return new Move.Up(0); } case \"A\" : { return new Move.Left(0); } case \"S\" : { return new Move.Down(0); } case \"D\" : { return new Move.Right(0); } case \"K\" : { return new Move.Up(1); } case \"H\" : { return new Move.Left(1); } case \"J\" : { return new Move.Down(1); } case \"L\" : { return new Move.Right(1); } case \"R\" : { return new Undo(0); } case \"exit\" : { return new Exit(0); } case \"EXIT\" : { return new Exit(0); } default : { return new InvalidInput(0,\"illgeal input\"); } } }",
        "label": "P"
    },
    "850": {
        "dataset": "COMP 3021",
        "project": "kywongcb",
        "bug_id": "33",
        "T": "void testMove(String input, String name, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); } private InputStream fixValueStream(String content) { final var bytes = content.getBytes(StandardCharsets.UTF_8); return new ByteArrayInputStream(bytes); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine(); // TODO switch(inputLine){ case \"w\" : { return new Move.Up(0); } case \"a\" : { return new Move.Left(0); } case \"s\" : { return new Move.Down(0); } case \"d\" : { return new Move.Right(0); } case \"k\" : { return new Move.Up(1); } case \"h\" : { return new Move.Left(1); } case \"j\" : { return new Move.Down(1); } case \"l\" : { return new Move.Right(1); } case \"r\" : { return new Undo(0); } case \"W\" : { return new Move.Up(0); } case \"A\" : { return new Move.Left(0); } case \"S\" : { return new Move.Down(0); } case \"D\" : { return new Move.Right(0); } case \"K\" : { return new Move.Up(1); } case \"H\" : { return new Move.Left(1); } case \"J\" : { return new Move.Down(1); } case \"L\" : { return new Move.Right(1); } case \"R\" : { return new Undo(0); } case \"exit\" : { return new Exit(0); } case \"EXIT\" : { return new Exit(0); } default : { return new InvalidInput(0,\"illgeal input\"); } } }",
        "label": "P"
    },
    "851": {
        "dataset": "COMP 3021",
        "project": "kywongcb",
        "bug_id": "34",
        "T": "void testUndo(String input, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine(); // TODO switch(inputLine){ case \"w\" : { return new Move.Up(0); } case \"a\" : { return new Move.Left(0); } case \"s\" : { return new Move.Down(0); } case \"d\" : { return new Move.Right(0); } case \"k\" : { return new Move.Up(1); } case \"h\" : { return new Move.Left(1); } case \"j\" : { return new Move.Down(1); } case \"l\" : { return new Move.Right(1); } case \"r\" : { return new Undo(0); } case \"W\" : { return new Move.Up(0); } case \"A\" : { return new Move.Left(0); } case \"S\" : { return new Move.Down(0); } case \"D\" : { return new Move.Right(0); } case \"K\" : { return new Move.Up(1); } case \"H\" : { return new Move.Left(1); } case \"J\" : { return new Move.Down(1); } case \"L\" : { return new Move.Right(1); } case \"R\" : { return new Undo(0); } case \"exit\" : { return new Exit(0); } case \"EXIT\" : { return new Exit(0); } default : { return new InvalidInput(0,\"illgeal input\"); } } }",
        "label": "F"
    },
    "852": {
        "dataset": "COMP 3021",
        "project": "kywongcb",
        "bug_id": "35",
        "T": "void testInvalidInput() { final var inputStream = fixValueStream(\"blah blah\"); final var inputEngine = new TerminalInputEngine(inputStream); final var action = inputEngine.fetchAction(); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine(); // TODO switch(inputLine){ case \"w\" : { return new Move.Up(0); } case \"a\" : { return new Move.Left(0); } case \"s\" : { return new Move.Down(0); } case \"d\" : { return new Move.Right(0); } case \"k\" : { return new Move.Up(1); } case \"h\" : { return new Move.Left(1); } case \"j\" : { return new Move.Down(1); } case \"l\" : { return new Move.Right(1); } case \"r\" : { return new Undo(0); } case \"W\" : { return new Move.Up(0); } case \"A\" : { return new Move.Left(0); } case \"S\" : { return new Move.Down(0); } case \"D\" : { return new Move.Right(0); } case \"K\" : { return new Move.Up(1); } case \"H\" : { return new Move.Left(1); } case \"J\" : { return new Move.Down(1); } case \"L\" : { return new Move.Right(1); } case \"R\" : { return new Undo(0); } case \"exit\" : { return new Exit(0); } case \"EXIT\" : { return new Exit(0); } default : { return new InvalidInput(0,\"illgeal input\"); } } }",
        "label": "P"
    },
    "853": {
        "dataset": "COMP 3021",
        "project": "kywongcb",
        "bug_id": "36",
        "T": "void testUndoWhenThereIsNoMove() { final var gameState = new GameState(TestHelper.parseGameMap(\"\"\" 233 ###### #A.a@# #..a@# ###### \"\"\" )); gameState.undo(); } private Entity generateEntity(int key) { return switch (key % 4) { case 0 -> new Box(0); case 1 -> new Empty(); case 2 -> new Player(0); case 3 -> new Wall(); default -> throw new ShouldNotReachException(); }; }",
        "C": "public GameState(@NotNull GameMap map) { // TODO undos = map.undoLimit; dests = map.getDestinations(); width = map.getMaxWidth(); height = map.getMaxHeight(); steps.add(map.map); walls = map.walls; spaces = map.spaces; initPlayers = map.playerloc; initBoxes = map.boxloc; curBoxes = new ArrayList<>(initBoxes); curPlayers = new ArrayList<>(initPlayers); //throw new NotImplementedException(); } public void undo() { // TODO if (!Snapshots.empty()) { Snapshots.pop(); } undos -= 1; if(Snapshots.empty()) { curPlayers = new ArrayList<>(initPlayers); curBoxes = new ArrayList<>(initBoxes); return; } var recover = Snapshots.peek(); curPlayers = new ArrayList<>(recover.cur_players()); curBoxes = new ArrayList<>(recover.cur_boxes()); //throw new NotImplementedException(); } /** * Get the maximum width of the game map. * This should be the same as that in {@link GameMap} public TerminalRenderingEngine(PrintStream outputSteam) { this.outputSteam = outputSteam; } public Box(int playerId) { this.playerId = playerId; } public Player(int id) { this.id = id; } public ShouldNotReachException() { super(\"This branch should not be reached.\"); }",
        "label": "F"
    },
    "854": {
        "dataset": "COMP 3021",
        "project": "kywongcb",
        "bug_id": "37",
        "T": "void testGetUndoUnlimited() { final var gameState = new GameState(TestHelper.parseGameMap(\"\"\" -1 ###### #.Aa@# #..a@# ###### \"\"\" )); }",
        "C": "public GameState(@NotNull GameMap map) { // TODO undos = map.undoLimit; dests = map.getDestinations(); width = map.getMaxWidth(); height = map.getMaxHeight(); steps.add(map.map); walls = map.walls; spaces = map.spaces; initPlayers = map.playerloc; initBoxes = map.boxloc; curBoxes = new ArrayList<>(initBoxes); curPlayers = new ArrayList<>(initPlayers); //throw new NotImplementedException(); }",
        "label": "P"
    },
    "855": {
        "dataset": "COMP 3021",
        "project": "kywongcb",
        "bug_id": "38",
        "T": "void testMapCopying() { final var maxWidth = 2333; final var maxHeight = 2333; final var random = new Random(); final var randomEntities = Stream.generate(() -> Position.of(random.nextInt(maxWidth), random.nextInt(maxHeight))) .distinct() .limit(100) .collect(Collectors.toMap(Function.identity(), it -> generateEntity(it.x()))); final var firstPos = randomEntities.keySet().stream().findFirst(); final var gameMap = new GameMap(maxWidth, maxHeight, Collections.singleton(firstPos.get()), 233); randomEntities.forEach(gameMap::putEntity); final var gameState = new GameState(gameMap); final var randomPosition = randomEntities.keySet().stream().findAny(); gameMap.putEntity(randomPosition.get(), new Empty()); randomEntities.forEach((p, e) -> assertEquals(e, gameState.getEntity(p))); }",
        "C": "public static @NotNull Position of(int x, int y) { return new Position(x, y); } public GameMap(int maxWidth, int maxHeight, Set<Position> destinations, int undoLimit) { // TODO this.maxWidth = maxWidth; this.maxHeight = maxHeight; dests = destinations; this.undoLimit = undoLimit; } /** * Parses the map from a string representation. * The first line is undo limit. * Starting from the second line, the game map is represented as follows, * <li># represents a {@link Wall}</li> * <li>@ represents a box destination.</li> * <li>Any upper-case letter represents a {@link Player}.</li> * <li> * Any lower-case letter represents a {@link Box} that is only movable by the player with the corresponding upper-case letter. * For instance, box \"a\" can only be moved by player \"A\" and not movable by player \"B\". * </li> * <li>. represents an {@link Empty} position in the map, meaning there is no player or box currently at this position.</li> * <p> * Notes: * <li> * There can be at most 26 players. * All implementations of classes in the hk.ust.comp3021.game package should support up to 26 players. * </li> * <li> * For simplicity, we assume the given map is bounded with a closed boundary. * There is no need to check this point. * </li> * <li> * Example maps can be found in \"src/main/resources\". * </li> * * @param mapText The string representation. * @return The parsed GameMap object. * @throws IllegalArgumentException if undo limit is negative but not -1. * @throws IllegalArgumentException if there are multiple same upper-case letters, i.e., one player can only exist at one position. * @throws IllegalArgumentException if there are no players in the map. * @throws IllegalArgumentException if the number of boxes is not equal to the number of box destinations. * @throws IllegalArgumentException if there are boxes whose {@link Box#getPlayerId()} public GameState(@NotNull GameMap map) { // TODO undos = map.undoLimit; dests = map.getDestinations(); width = map.getMaxWidth(); height = map.getMaxHeight(); steps.add(map.map); walls = map.walls; spaces = map.spaces; initPlayers = map.playerloc; initBoxes = map.boxloc; curBoxes = new ArrayList<>(initBoxes); curPlayers = new ArrayList<>(initPlayers); //throw new NotImplementedException(); } public void putEntity(Position position, Entity entity) { // TODO map[position.y()][position.x()] = entity; //throw new NotImplementedException(); } public @Nullable Entity getEntity(@NotNull Position position) { // TODO for (var player: curPlayers) { if (player.pos().x() == position.x() && player.pos().y() == position.y()) return player.player(); } for (var box: curBoxes) { if (box.pos().x() == position.x() && box.pos().y() == position.y()) return box.box(); } for (var pos:walls) { if (pos.x() == position.x() && pos.y() == position.y()) return new Wall(); } for (var pos:spaces) { if (pos.x() == position.x() && pos.y() == position.y()) return new Empty(); } return null; //throw new NotImplementedException(); } /** * Get all box destination positions as a set in the game map. * This should be the same as that in {@link GameMap}",
        "label": "F"
    },
    "856": {
        "dataset": "COMP 3021",
        "project": "kywongcb",
        "bug_id": "39",
        "T": "void testUndoWhenThereIsMoveButNoCheckpoint() { final var gameState = new GameState(TestHelper.parseGameMap(\"\"\" 233 ###### #A.a@# #..a@# ###### \"\"\" )); gameState.move(Position.of(1, 1), Position.of(2, 1)); gameState.undo(); }",
        "C": "public GameState(@NotNull GameMap map) { // TODO undos = map.undoLimit; dests = map.getDestinations(); width = map.getMaxWidth(); height = map.getMaxHeight(); steps.add(map.map); walls = map.walls; spaces = map.spaces; initPlayers = map.playerloc; initBoxes = map.boxloc; curBoxes = new ArrayList<>(initBoxes); curPlayers = new ArrayList<>(initPlayers); //throw new NotImplementedException(); } public void move(Position from, Position to) { // TODO //checkpoint(); //int x = to.x() - from.x(); //int y = to.y() - from.y(); var tempOBJ = getEntity(from); if(tempOBJ instanceof Player p) { /* if(getEntity(to) instanceof Box b) if(b.getPlayerId() == p.getId()) { curBoxes.removeIf(temp -> temp.box.getPlayerId() == b.getPlayerId()&& temp.pos().x() == from.x() && temp.pos.y() == from.y()); curBoxes.add(new BoxRec(b, Position.of(to.x()+x,to.y()+y))); //checkpoint(); }*/ curPlayers.removeIf(temp -> temp.player().getId() == p.getId()); curPlayers.add(new PlayerRec(p,to)); } if(tempOBJ instanceof Box b){ curBoxes.removeIf(temp -> temp.box().getPlayerId() == b.getPlayerId() && temp.pos().x() == from.x() && temp.pos.y() == from.y()) ; curBoxes.add(new BoxRec(b,to)); //checkpoint(); } //throw new NotImplementedException(); } /** * Record a checkpoint of the game state, including: * <li>All current positions of entities in the game map.</li> * <li>Current undo quota</li> * <p> * Checkpoint is used in {@link GameState#undo()} public static @NotNull Position of(int x, int y) { return new Position(x, y); } public void undo() { // TODO if (!Snapshots.empty()) { Snapshots.pop(); } undos -= 1; if(Snapshots.empty()) { curPlayers = new ArrayList<>(initPlayers); curBoxes = new ArrayList<>(initBoxes); return; } var recover = Snapshots.peek(); curPlayers = new ArrayList<>(recover.cur_players()); curBoxes = new ArrayList<>(recover.cur_boxes()); //throw new NotImplementedException(); } /** * Get the maximum width of the game map. * This should be the same as that in {@link GameMap}",
        "label": "F"
    },
    "857": {
        "dataset": "COMP 3021",
        "project": "kywongcb",
        "bug_id": "40",
        "T": "void testGameExit() { final var gameState = mock(GameState.class); final var inputEngine = mock(TerminalInputEngine.class); final var renderingEngine = mock(TerminalRenderingEngine.class); when(gameState.isWin()).thenReturn(false, false, false); when(inputEngine.fetchAction()) .thenReturn(new InvalidInput(0, \"\"), new InvalidInput(0, \"\"), new Exit(0)); final var game = new TerminalSokobanGame(gameState, inputEngine, renderingEngine); game.run(); verify(renderingEngine, atLeastOnce()).message(any()); }",
        "C": "public InvalidInput(int initiator, @NotNull String message) { super(initiator); this.message = message; } public Exit(int initiator) { super(initiator); } public TerminalSokobanGame(GameState gameState, TerminalInputEngine inputEngine, TerminalRenderingEngine renderingEngine) { super(gameState); this.inputEngine = inputEngine; this.renderingEngine = renderingEngine; // TODO var Num_players = gameState.getAllPlayerPositions().size(); if (Num_players > 2) throw new IllegalArgumentException(); // Check the number of players } public void run() { // TODO while (!shouldStop()){ renderingEngine.render(this.state); processAction(inputEngine.fetchAction()); } }",
        "label": "F"
    },
    "858": {
        "dataset": "COMP 3021",
        "project": "kywongcb",
        "bug_id": "41",
        "T": "void testGameWin() { final var gameState = mock(GameState.class); final var inputEngine = mock(TerminalInputEngine.class); final var renderingEngine = mock(TerminalRenderingEngine.class); when(gameState.isWin()).thenReturn(false, false, false, true); when(inputEngine.fetchAction()) .thenReturn(new InvalidInput(0, \"\")); final var game = new TerminalSokobanGame(gameState, inputEngine, renderingEngine); game.run(); verify(gameState, atLeastOnce()).isWin(); verify(renderingEngine, atLeastOnce()).message(any()); }",
        "C": "public InvalidInput(int initiator, @NotNull String message) { super(initiator); this.message = message; } public TerminalSokobanGame(GameState gameState, TerminalInputEngine inputEngine, TerminalRenderingEngine renderingEngine) { super(gameState); this.inputEngine = inputEngine; this.renderingEngine = renderingEngine; // TODO var Num_players = gameState.getAllPlayerPositions().size(); if (Num_players > 2) throw new IllegalArgumentException(); // Check the number of players } public void run() { // TODO while (!shouldStop()){ renderingEngine.render(this.state); processAction(inputEngine.fetchAction()); } }",
        "label": "F"
    },
    "859": {
        "dataset": "COMP 3021",
        "project": "kywongcb",
        "bug_id": "42",
        "T": "void testMoreThanTwoPlayers() { final var gameState = mock(GameState.class); final var inputEngine = mock(TerminalInputEngine.class); final var renderingEngine = mock(TerminalRenderingEngine.class); when(gameState.getAllPlayerPositions()).thenReturn(new HashSet<>(Arrays.asList(Position.of(1, 1), Position.of(1, 2), Position.of(1, 3)))); }",
        "C": "public static @NotNull Position of(int x, int y) { return new Position(x, y); }",
        "label": "P"
    },
    "860": {
        "dataset": "COMP 3021",
        "project": "yshinab",
        "bug_id": "0",
        "T": "void moveUp() { Position.of(233, 232), new Move.Up(-1).nextPosition(pos) ); }",
        "C": "public static @NotNull Position of(int x, int y) { return new Position(x, y); } public Up(int initiator) { super(initiator); }",
        "label": "P"
    },
    "861": {
        "dataset": "COMP 3021",
        "project": "yshinab",
        "bug_id": "1",
        "T": "void moveDown() { Position.of(233, 234), new Move.Down(-1).nextPosition(pos) ); }",
        "C": "public static @NotNull Position of(int x, int y) { return new Position(x, y); } public Down(int initiator) { super(initiator); }",
        "label": "P"
    },
    "862": {
        "dataset": "COMP 3021",
        "project": "yshinab",
        "bug_id": "2",
        "T": "void moveRight() { Position.of(234, 233), new Move.Right(-1).nextPosition(pos) ); }",
        "C": "public static @NotNull Position of(int x, int y) { return new Position(x, y); } public Right(int initiator) { super(initiator); }",
        "label": "P"
    },
    "863": {
        "dataset": "COMP 3021",
        "project": "yshinab",
        "bug_id": "3",
        "T": "void testExceedingUndoQuota() { final var gameState = mock(GameState.class); when(gameState.getPlayerPositionById(anyInt())).thenReturn(Position.of(0, 0)); when(gameState.getUndoQuota()).thenReturn(Optional.of(0)); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Undo(0)); }",
        "C": "public Undo(int initiator) { super(initiator); }",
        "label": "P"
    },
    "864": {
        "dataset": "COMP 3021",
        "project": "yshinab",
        "bug_id": "4",
        "T": "void testExit() { final var gameState = mock(GameState.class); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Exit(0)); }",
        "C": "public Exit(int initiator) { super(initiator); }",
        "label": "F"
    },
    "865": {
        "dataset": "COMP 3021",
        "project": "yshinab",
        "bug_id": "5",
        "T": "void testUndoUnlimited() { final var gameState = mock(GameState.class); when(gameState.getPlayerPositionById(anyInt())).thenReturn(Position.of(0, 0)); when(gameState.getUndoQuota()).thenReturn(Optional.empty()); final var game = new SokobanGameForTesting(gameState); for (int i = 0; i < 10000; i++) { final var result = game.feedActionForProcessing(new Undo(0)); } verify(gameState, times(10000)).undo(); }",
        "C": "public TerminalRenderingEngine(PrintStream outputSteam) { this.outputSteam = outputSteam; } public Undo(int initiator) { super(initiator); }",
        "label": "P"
    },
    "866": {
        "dataset": "COMP 3021",
        "project": "yshinab",
        "bug_id": "6",
        "T": "void testPushOtherPlayerBox() { String mapText = \"\"\" 233 ###### #AB.@# #b.a.# #@...# ###### \"\"\"; final var testMap = TestHelper.parseGameMap(mapText); final var gameState = spy(new GameState(testMap)); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Move.Down(0)); verify(gameState, never()).move(any(), any()); }",
        "C": "public GameState(@NotNull GameMap map) { this.gameMap = map; this.playerPos = map.entityPos.entrySet().stream() .filter(o -> o.getValue() instanceof Player) .collect(Collectors.toMap(o -> o.getKey(), o -> o.getValue(), (prev, next) -> next, HashMap::new)); if (this.playerPos.size() > new HashSet<Object>(this.playerPos.values()).size() || this.playerPos.size() > 26){ throw new IllegalArgumentException(\"There are either too many or duplicate players in this map\"); } this.boxPos = map.entityPos.entrySet().stream() .filter(o -> o.getValue() instanceof Box) .collect(Collectors.toMap(o -> o.getKey(), o -> o.getValue(), (prev, next) -> next, HashMap::new)); this.emptyPos = map.entityPos.entrySet().stream() .filter(o -> o.getValue() instanceof Empty) .collect(Collectors.toMap(o -> o.getKey(), o -> o.getValue(), (prev, next) -> next, HashMap::new)); this.undo = map.getUndoLimit().get(); this.checkpoint.add(new GameState(this)); } public Down(int initiator) { super(initiator); }",
        "label": "P"
    },
    "867": {
        "dataset": "COMP 3021",
        "project": "yshinab",
        "bug_id": "7",
        "T": "void testMoveNonExistingPlayer() { String mapText = \"\"\" 233 ###### #A..@# #a...# ##...# ###### \"\"\"; final var testMap = TestHelper.parseGameMap(mapText); final var gameState = spy(new GameState(testMap)); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Move.Down(23)); }",
        "C": "public GameState(@NotNull GameMap map) { this.gameMap = map; this.playerPos = map.entityPos.entrySet().stream() .filter(o -> o.getValue() instanceof Player) .collect(Collectors.toMap(o -> o.getKey(), o -> o.getValue(), (prev, next) -> next, HashMap::new)); if (this.playerPos.size() > new HashSet<Object>(this.playerPos.values()).size() || this.playerPos.size() > 26){ throw new IllegalArgumentException(\"There are either too many or duplicate players in this map\"); } this.boxPos = map.entityPos.entrySet().stream() .filter(o -> o.getValue() instanceof Box) .collect(Collectors.toMap(o -> o.getKey(), o -> o.getValue(), (prev, next) -> next, HashMap::new)); this.emptyPos = map.entityPos.entrySet().stream() .filter(o -> o.getValue() instanceof Empty) .collect(Collectors.toMap(o -> o.getKey(), o -> o.getValue(), (prev, next) -> next, HashMap::new)); this.undo = map.getUndoLimit().get(); this.checkpoint.add(new GameState(this)); } public Down(int initiator) { super(initiator); }",
        "label": "P"
    },
    "868": {
        "dataset": "COMP 3021",
        "project": "yshinab",
        "bug_id": "8",
        "T": "void testCheckpointWhenNeed() { final var gameState = spy(new GameState(TestHelper.parseGameMap(\"\"\" 233 ###### #.Aa@# #..a@# ###### \"\"\" ))); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Move.Right(0)); verify(gameState, times(1)).checkpoint(); }",
        "C": "public GameState(@NotNull GameMap map) { this.gameMap = map; this.playerPos = map.entityPos.entrySet().stream() .filter(o -> o.getValue() instanceof Player) .collect(Collectors.toMap(o -> o.getKey(), o -> o.getValue(), (prev, next) -> next, HashMap::new)); if (this.playerPos.size() > new HashSet<Object>(this.playerPos.values()).size() || this.playerPos.size() > 26){ throw new IllegalArgumentException(\"There are either too many or duplicate players in this map\"); } this.boxPos = map.entityPos.entrySet().stream() .filter(o -> o.getValue() instanceof Box) .collect(Collectors.toMap(o -> o.getKey(), o -> o.getValue(), (prev, next) -> next, HashMap::new)); this.emptyPos = map.entityPos.entrySet().stream() .filter(o -> o.getValue() instanceof Empty) .collect(Collectors.toMap(o -> o.getKey(), o -> o.getValue(), (prev, next) -> next, HashMap::new)); this.undo = map.getUndoLimit().get(); this.checkpoint.add(new GameState(this)); } public Right(int initiator) { super(initiator); }",
        "label": "P"
    },
    "869": {
        "dataset": "COMP 3021",
        "project": "yshinab",
        "bug_id": "9",
        "T": "void testPushBoxAgainstWall() { String mapText = \"\"\" 233 ###### #A..@# #a...# ##...# ###### \"\"\"; final var testMap = TestHelper.parseGameMap(mapText); final var gameState = spy(new GameState(testMap)); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Move.Down(0)); verify(gameState, never()).move(any(), any()); }",
        "C": "public GameState(@NotNull GameMap map) { this.gameMap = map; this.playerPos = map.entityPos.entrySet().stream() .filter(o -> o.getValue() instanceof Player) .collect(Collectors.toMap(o -> o.getKey(), o -> o.getValue(), (prev, next) -> next, HashMap::new)); if (this.playerPos.size() > new HashSet<Object>(this.playerPos.values()).size() || this.playerPos.size() > 26){ throw new IllegalArgumentException(\"There are either too many or duplicate players in this map\"); } this.boxPos = map.entityPos.entrySet().stream() .filter(o -> o.getValue() instanceof Box) .collect(Collectors.toMap(o -> o.getKey(), o -> o.getValue(), (prev, next) -> next, HashMap::new)); this.emptyPos = map.entityPos.entrySet().stream() .filter(o -> o.getValue() instanceof Empty) .collect(Collectors.toMap(o -> o.getKey(), o -> o.getValue(), (prev, next) -> next, HashMap::new)); this.undo = map.getUndoLimit().get(); this.checkpoint.add(new GameState(this)); } public Down(int initiator) { super(initiator); }",
        "label": "P"
    },
    "870": {
        "dataset": "COMP 3021",
        "project": "yshinab",
        "bug_id": "10",
        "T": "void testCheckpointWhenNotNeed() { final var gameState = spy(new GameState(TestHelper.parseGameMap(\"\"\" 233 ###### #A.a@# #..a@# ###### \"\"\" ))); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Move.Right(0)); verify(gameState, never()).checkpoint(); } private static class SokobanGameForTesting extends AbstractSokobanGame { protected SokobanGameForTesting(GameState gameState) { super(gameState); } @Override public void run() { } public ActionResult feedActionForProcessing(Action action) { return processAction(action); } }",
        "C": "public GameState(@NotNull GameMap map) { this.gameMap = map; this.playerPos = map.entityPos.entrySet().stream() .filter(o -> o.getValue() instanceof Player) .collect(Collectors.toMap(o -> o.getKey(), o -> o.getValue(), (prev, next) -> next, HashMap::new)); if (this.playerPos.size() > new HashSet<Object>(this.playerPos.values()).size() || this.playerPos.size() > 26){ throw new IllegalArgumentException(\"There are either too many or duplicate players in this map\"); } this.boxPos = map.entityPos.entrySet().stream() .filter(o -> o.getValue() instanceof Box) .collect(Collectors.toMap(o -> o.getKey(), o -> o.getValue(), (prev, next) -> next, HashMap::new)); this.emptyPos = map.entityPos.entrySet().stream() .filter(o -> o.getValue() instanceof Empty) .collect(Collectors.toMap(o -> o.getKey(), o -> o.getValue(), (prev, next) -> next, HashMap::new)); this.undo = map.getUndoLimit().get(); this.checkpoint.add(new GameState(this)); } public Right(int initiator) { super(initiator); } public void run() { this.renderingEngine.message(GAME_READY_MESSAGE); this.renderingEngine.render(super.state); while(!shouldStop()){ if (state.getUndoQuota().isEmpty()) this.renderingEngine.message(UNDO_QUOTA_UNLIMITED); else this.renderingEngine.message(\"Undo Quota: \" + state.getUndoQuota().get()); this.renderingEngine.message(\">>>\"); Action action = this.inputEngine.fetchAction(); ActionResult result = super.processAction(action); if (result.getAction() instanceof Exit) { this.renderingEngine.message(GAME_EXIT_MESSAGE); break; } if (result instanceof ActionResult.Failed) this.renderingEngine.message(((ActionResult.Failed) result).getReason()); this.renderingEngine.render(state); } this.renderingEngine.message(WIN_MESSAGE); } protected ActionResult processAction(@NotNull Action action) { if (action instanceof Exit) return new ActionResult.Success(action); if (action instanceof InvalidInput) return new ActionResult.Failed(action, ((InvalidInput) action).getMessage()); if (action instanceof Undo) { if (state.getUndoQuota().isEmpty() || state.getUndoQuota().get() > 0) { state.undo(); return new ActionResult.Success(action); } else return new ActionResult.Failed(action, StringResources.UNDO_QUOTA_RUN_OUT); } Move movement = (Move) action; Position currPos = state.getPlayerPositionById(movement.getInitiator()); if (currPos == null) return new ActionResult.Failed(action, StringResources.PLAYER_NOT_FOUND); Position nextPos = movement.nextPosition(currPos); Entity nextPosEntity = state.getEntity(nextPos); ActionResult result = new ActionResult.Success(action); switch (nextPosEntity){ case Wall w -> result = new ActionResult.Failed(movement, StringResources.INVALID_MOVEMENT_WALL); case Box b -> { if (movement.getInitiator() != b.getPlayerId()) result = new ActionResult.Failed(movement, StringResources.INVALID_MOVEMENT_BOX_TYPE); else if (state.getEntity(movement.nextPosition(nextPos)) instanceof Box || state.getEntity(movement.nextPosition(nextPos)) instanceof Player || state.getEntity(movement.nextPosition(nextPos)) instanceof Wall) result = new ActionResult.Failed(movement, StringResources.INVALID_MOVEMENT_BOX_WALL); else { state.move(nextPos, movement.nextPosition(nextPos)); // Update location of Box state.move(currPos, nextPos); // Update location of player state.checkpoint(); } } case Player p -> result = new ActionResult.Failed(movement, StringResources.INVALID_MOVEMENT_PLAYER); case Empty e -> state.move(currPos,nextPos); } return result; }",
        "label": "P"
    },
    "871": {
        "dataset": "COMP 3021",
        "project": "yshinab",
        "bug_id": "11",
        "T": "void testHitAnotherPlayer() { String mapText = \"\"\" 233 ###### #A..@# #B...# #ab.@# ###### \"\"\"; final var testMap = TestHelper.parseGameMap(mapText); final var gameState = spy(new GameState(testMap)); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Move.Down(0)); verify(gameState, never()).move(any(), any()); }",
        "C": "public GameState(@NotNull GameMap map) { this.gameMap = map; this.playerPos = map.entityPos.entrySet().stream() .filter(o -> o.getValue() instanceof Player) .collect(Collectors.toMap(o -> o.getKey(), o -> o.getValue(), (prev, next) -> next, HashMap::new)); if (this.playerPos.size() > new HashSet<Object>(this.playerPos.values()).size() || this.playerPos.size() > 26){ throw new IllegalArgumentException(\"There are either too many or duplicate players in this map\"); } this.boxPos = map.entityPos.entrySet().stream() .filter(o -> o.getValue() instanceof Box) .collect(Collectors.toMap(o -> o.getKey(), o -> o.getValue(), (prev, next) -> next, HashMap::new)); this.emptyPos = map.entityPos.entrySet().stream() .filter(o -> o.getValue() instanceof Empty) .collect(Collectors.toMap(o -> o.getKey(), o -> o.getValue(), (prev, next) -> next, HashMap::new)); this.undo = map.getUndoLimit().get(); this.checkpoint.add(new GameState(this)); } public Down(int initiator) { super(initiator); }",
        "label": "P"
    },
    "872": {
        "dataset": "COMP 3021",
        "project": "yshinab",
        "bug_id": "12",
        "T": "void testUndoWithinQuota() { final var gameState = mock(GameState.class); when(gameState.getPlayerPositionById(anyInt())).thenReturn(Position.of(0, 0)); when(gameState.getUndoQuota()).thenReturn(Optional.of(1)); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Undo(0)); verify(gameState, times(1)).undo(); }",
        "C": "public Undo(int initiator) { super(initiator); }",
        "label": "P"
    },
    "873": {
        "dataset": "COMP 3021",
        "project": "yshinab",
        "bug_id": "13",
        "T": "void testInvalidInput() { final var game = new SokobanGameForTesting(mock(GameState.class)); final var message = String.valueOf(new Random().nextLong()); final var action = new InvalidInput(-1, message); final var result = game.feedActionForProcessing(action); }",
        "C": "public InvalidInput(int initiator, @NotNull String message) { super(initiator); this.message = message; }",
        "label": "P"
    },
    "874": {
        "dataset": "COMP 3021",
        "project": "yshinab",
        "bug_id": "14",
        "T": "void testUndoLimitParsing() { final var gameMap = TestHelper.parseGameMap(rectangularMap); }",
        "C": "",
        "label": "P"
    },
    "875": {
        "dataset": "COMP 3021",
        "project": "yshinab",
        "bug_id": "15",
        "T": "void testWidthForNonRectangularMap() { final var gameMap = TestHelper.parseGameMap(nonRectangularMap); }",
        "C": "",
        "label": "P"
    },
    "876": {
        "dataset": "COMP 3021",
        "project": "yshinab",
        "bug_id": "16",
        "T": "void testTwoPlayersMap() { final var twoPlayersMap = \"\"\" 233 ###### #A..@# #..B@# #....# #.a..# #..b.# ###### \"\"\"; final var gameMap = TestHelper.parseGameMap(twoPlayersMap); final var playerIds = gameMap.getPlayerIds(); final var expectedIds = new HashSet<Integer>(); expectedIds.add(0); expectedIds.add(1); }",
        "C": "public Set<Integer> getPlayerIds() { Set<Integer> playerIDs = this.entityPos.values().stream().filter(o -> o instanceof Player).map(o -> { Player player = (Player) o; return player.getId(); }).collect(Collectors.toSet()); return playerIDs; }",
        "label": "P"
    },
    "877": {
        "dataset": "COMP 3021",
        "project": "yshinab",
        "bug_id": "17",
        "T": "void testMapWithoutPlayer() { final var invalidMap = \"\"\" 233 ### #.# ### \"\"\"; } // @Tag(TestKind.HIDDEN) // @Test // void testUnmatchedPlayersAndBoxes() { // final var invalidMap = \"\"\" // 233 // ###### // #A..@# // #...@# // #a.b@# // #.a.@# // #..a.# // ###### // \"\"\"; // assertThrowsExactly(IllegalArgumentException.class, () -> TestHelper.parseGameMap(invalidMap)); // }",
        "C": "public TerminalRenderingEngine(PrintStream outputSteam) { this.outputSteam = outputSteam; }",
        "label": "F"
    },
    "878": {
        "dataset": "COMP 3021",
        "project": "yshinab",
        "bug_id": "18",
        "T": "void testManyPlayersMap() { final var manyPlayersMap = \"\"\" 233 ###### #A.P@@# #vCB@@# #.cpD@# #Ga.d@# #g.bV@# ###### \"\"\"; final var gameMap = TestHelper.parseGameMap(manyPlayersMap); final var playerIds = gameMap.getPlayerIds(); final var expectedIds = new HashSet<>(Arrays.asList( 0, 'P' - 'A', 'C' - 'A', 'B' - 'A', 'D' - 'A', 'G' - 'A', 'V' - 'A' )); }",
        "C": "public Set<Integer> getPlayerIds() { Set<Integer> playerIDs = this.entityPos.values().stream().filter(o -> o instanceof Player).map(o -> { Player player = (Player) o; return player.getId(); }).collect(Collectors.toSet()); return playerIDs; }",
        "label": "P"
    },
    "879": {
        "dataset": "COMP 3021",
        "project": "yshinab",
        "bug_id": "19",
        "T": "void testHeightForNonRectangularMap() { final var gameMap = TestHelper.parseGameMap(nonRectangularMap); }",
        "C": "",
        "label": "P"
    },
    "880": {
        "dataset": "COMP 3021",
        "project": "yshinab",
        "bug_id": "20",
        "T": "void testDuplicatedPlayers() { final var invalidMap = \"\"\" 233 ###### #A..@# #..A@# #....# #.a..# #..b.# ###### \"\"\"; }",
        "C": "",
        "label": "P"
    },
    "881": {
        "dataset": "COMP 3021",
        "project": "yshinab",
        "bug_id": "21",
        "T": "void testParseMapWithoutUndoLimit() { final var invalidMap = String.join(\"\\n\", rectangularMap.lines().skip(1).toList()); }",
        "C": "",
        "label": "P"
    },
    "882": {
        "dataset": "COMP 3021",
        "project": "yshinab",
        "bug_id": "22",
        "T": "void testInsufficientDestinations() { final var invalidMap = \"\"\" 233 ###### #A..@# #...@# #a...# #.a..# #..a.# ###### \"\"\"; }",
        "C": "",
        "label": "F"
    },
    "883": {
        "dataset": "COMP 3021",
        "project": "yshinab",
        "bug_id": "23",
        "T": "void testSuperLargeMap() { try { new GameMap(Integer.MAX_VALUE, Integer.MAX_VALUE, Collections.emptySet(), 0); } catch (OutOfMemoryError e) { throw new RuntimeException(e); } }); }",
        "C": "public GameMap(int maxWidth, int maxHeight, Set<Position> destinations, int undoLimit) { this.maxWidth = maxWidth; this.maxHeight = maxHeight; this.boxDestPos = destinations; this.undoLimit = undoLimit; } public TerminalRenderingEngine(PrintStream outputSteam) { this.outputSteam = outputSteam; }",
        "label": "P"
    },
    "884": {
        "dataset": "COMP 3021",
        "project": "yshinab",
        "bug_id": "24",
        "T": "void testInvalidUndoLimit() { final var invalidMap = \"\"\" -233 ###### #A..@# #...@# #a.b@# #.a.@# #..a.# ###### \"\"\"; }",
        "C": "",
        "label": "P"
    },
    "885": {
        "dataset": "COMP 3021",
        "project": "yshinab",
        "bug_id": "25",
        "T": "void testEmptyMap() { final var invalidMap = \"\"; }",
        "C": "",
        "label": "P"
    },
    "886": {
        "dataset": "COMP 3021",
        "project": "yshinab",
        "bug_id": "26",
        "T": "void testMove(String input, String name, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); } private InputStream fixValueStream(String content) { final var bytes = content.getBytes(StandardCharsets.UTF_8); return new ByteArrayInputStream(bytes); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine(); String lcinput = inputLine.toLowerCase(); if (lcinput.equals(\"exit\")) { return new Exit(-1); } else if (lcinput.equals(\"u\")) { return new Undo(-1); } else if (lcinput.matches(\"a|s|d|w\")) { switch (lcinput) { case \"a\": return new Move.Left(0); case \"s\": return new Move.Down(0); case \"d\": return new Move.Right(0); case \"w\": return new Move.Up(0); default: return new InvalidInput(-1, StringResources.INVALID_INPUT_MESSAGE); } } else if (lcinput.matches(\"h|j|k|l\")) { switch (lcinput) { case \"h\": return new Move.Left(1); case \"j\": return new Move.Down(1); case \"k\": return new Move.Right(1); case \"l\": return new Move.Up(1); default: return new InvalidInput(-1, StringResources.INVALID_INPUT_MESSAGE); } } else { return new InvalidInput(-1, StringResources.INVALID_INPUT_MESSAGE); } }",
        "label": "P"
    },
    "887": {
        "dataset": "COMP 3021",
        "project": "yshinab",
        "bug_id": "27",
        "T": "void testMove(String input, String name, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); } private InputStream fixValueStream(String content) { final var bytes = content.getBytes(StandardCharsets.UTF_8); return new ByteArrayInputStream(bytes); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine(); String lcinput = inputLine.toLowerCase(); if (lcinput.equals(\"exit\")) { return new Exit(-1); } else if (lcinput.equals(\"u\")) { return new Undo(-1); } else if (lcinput.matches(\"a|s|d|w\")) { switch (lcinput) { case \"a\": return new Move.Left(0); case \"s\": return new Move.Down(0); case \"d\": return new Move.Right(0); case \"w\": return new Move.Up(0); default: return new InvalidInput(-1, StringResources.INVALID_INPUT_MESSAGE); } } else if (lcinput.matches(\"h|j|k|l\")) { switch (lcinput) { case \"h\": return new Move.Left(1); case \"j\": return new Move.Down(1); case \"k\": return new Move.Right(1); case \"l\": return new Move.Up(1); default: return new InvalidInput(-1, StringResources.INVALID_INPUT_MESSAGE); } } else { return new InvalidInput(-1, StringResources.INVALID_INPUT_MESSAGE); } }",
        "label": "P"
    },
    "888": {
        "dataset": "COMP 3021",
        "project": "yshinab",
        "bug_id": "28",
        "T": "void testMove(String input, String name, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); } private InputStream fixValueStream(String content) { final var bytes = content.getBytes(StandardCharsets.UTF_8); return new ByteArrayInputStream(bytes); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine(); String lcinput = inputLine.toLowerCase(); if (lcinput.equals(\"exit\")) { return new Exit(-1); } else if (lcinput.equals(\"u\")) { return new Undo(-1); } else if (lcinput.matches(\"a|s|d|w\")) { switch (lcinput) { case \"a\": return new Move.Left(0); case \"s\": return new Move.Down(0); case \"d\": return new Move.Right(0); case \"w\": return new Move.Up(0); default: return new InvalidInput(-1, StringResources.INVALID_INPUT_MESSAGE); } } else if (lcinput.matches(\"h|j|k|l\")) { switch (lcinput) { case \"h\": return new Move.Left(1); case \"j\": return new Move.Down(1); case \"k\": return new Move.Right(1); case \"l\": return new Move.Up(1); default: return new InvalidInput(-1, StringResources.INVALID_INPUT_MESSAGE); } } else { return new InvalidInput(-1, StringResources.INVALID_INPUT_MESSAGE); } }",
        "label": "P"
    },
    "889": {
        "dataset": "COMP 3021",
        "project": "yshinab",
        "bug_id": "29",
        "T": "void testMove(String input, String name, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); } private InputStream fixValueStream(String content) { final var bytes = content.getBytes(StandardCharsets.UTF_8); return new ByteArrayInputStream(bytes); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine(); String lcinput = inputLine.toLowerCase(); if (lcinput.equals(\"exit\")) { return new Exit(-1); } else if (lcinput.equals(\"u\")) { return new Undo(-1); } else if (lcinput.matches(\"a|s|d|w\")) { switch (lcinput) { case \"a\": return new Move.Left(0); case \"s\": return new Move.Down(0); case \"d\": return new Move.Right(0); case \"w\": return new Move.Up(0); default: return new InvalidInput(-1, StringResources.INVALID_INPUT_MESSAGE); } } else if (lcinput.matches(\"h|j|k|l\")) { switch (lcinput) { case \"h\": return new Move.Left(1); case \"j\": return new Move.Down(1); case \"k\": return new Move.Right(1); case \"l\": return new Move.Up(1); default: return new InvalidInput(-1, StringResources.INVALID_INPUT_MESSAGE); } } else { return new InvalidInput(-1, StringResources.INVALID_INPUT_MESSAGE); } }",
        "label": "P"
    },
    "890": {
        "dataset": "COMP 3021",
        "project": "yshinab",
        "bug_id": "30",
        "T": "void testMove(String input, String name, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); } private InputStream fixValueStream(String content) { final var bytes = content.getBytes(StandardCharsets.UTF_8); return new ByteArrayInputStream(bytes); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine(); String lcinput = inputLine.toLowerCase(); if (lcinput.equals(\"exit\")) { return new Exit(-1); } else if (lcinput.equals(\"u\")) { return new Undo(-1); } else if (lcinput.matches(\"a|s|d|w\")) { switch (lcinput) { case \"a\": return new Move.Left(0); case \"s\": return new Move.Down(0); case \"d\": return new Move.Right(0); case \"w\": return new Move.Up(0); default: return new InvalidInput(-1, StringResources.INVALID_INPUT_MESSAGE); } } else if (lcinput.matches(\"h|j|k|l\")) { switch (lcinput) { case \"h\": return new Move.Left(1); case \"j\": return new Move.Down(1); case \"k\": return new Move.Right(1); case \"l\": return new Move.Up(1); default: return new InvalidInput(-1, StringResources.INVALID_INPUT_MESSAGE); } } else { return new InvalidInput(-1, StringResources.INVALID_INPUT_MESSAGE); } }",
        "label": "P"
    },
    "891": {
        "dataset": "COMP 3021",
        "project": "yshinab",
        "bug_id": "31",
        "T": "void testMove(String input, String name, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); } private InputStream fixValueStream(String content) { final var bytes = content.getBytes(StandardCharsets.UTF_8); return new ByteArrayInputStream(bytes); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine(); String lcinput = inputLine.toLowerCase(); if (lcinput.equals(\"exit\")) { return new Exit(-1); } else if (lcinput.equals(\"u\")) { return new Undo(-1); } else if (lcinput.matches(\"a|s|d|w\")) { switch (lcinput) { case \"a\": return new Move.Left(0); case \"s\": return new Move.Down(0); case \"d\": return new Move.Right(0); case \"w\": return new Move.Up(0); default: return new InvalidInput(-1, StringResources.INVALID_INPUT_MESSAGE); } } else if (lcinput.matches(\"h|j|k|l\")) { switch (lcinput) { case \"h\": return new Move.Left(1); case \"j\": return new Move.Down(1); case \"k\": return new Move.Right(1); case \"l\": return new Move.Up(1); default: return new InvalidInput(-1, StringResources.INVALID_INPUT_MESSAGE); } } else { return new InvalidInput(-1, StringResources.INVALID_INPUT_MESSAGE); } }",
        "label": "P"
    },
    "892": {
        "dataset": "COMP 3021",
        "project": "yshinab",
        "bug_id": "32",
        "T": "void testMove(String input, String name, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); } private InputStream fixValueStream(String content) { final var bytes = content.getBytes(StandardCharsets.UTF_8); return new ByteArrayInputStream(bytes); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine(); String lcinput = inputLine.toLowerCase(); if (lcinput.equals(\"exit\")) { return new Exit(-1); } else if (lcinput.equals(\"u\")) { return new Undo(-1); } else if (lcinput.matches(\"a|s|d|w\")) { switch (lcinput) { case \"a\": return new Move.Left(0); case \"s\": return new Move.Down(0); case \"d\": return new Move.Right(0); case \"w\": return new Move.Up(0); default: return new InvalidInput(-1, StringResources.INVALID_INPUT_MESSAGE); } } else if (lcinput.matches(\"h|j|k|l\")) { switch (lcinput) { case \"h\": return new Move.Left(1); case \"j\": return new Move.Down(1); case \"k\": return new Move.Right(1); case \"l\": return new Move.Up(1); default: return new InvalidInput(-1, StringResources.INVALID_INPUT_MESSAGE); } } else { return new InvalidInput(-1, StringResources.INVALID_INPUT_MESSAGE); } }",
        "label": "F"
    },
    "893": {
        "dataset": "COMP 3021",
        "project": "yshinab",
        "bug_id": "33",
        "T": "void testMove(String input, String name, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); } private InputStream fixValueStream(String content) { final var bytes = content.getBytes(StandardCharsets.UTF_8); return new ByteArrayInputStream(bytes); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine(); String lcinput = inputLine.toLowerCase(); if (lcinput.equals(\"exit\")) { return new Exit(-1); } else if (lcinput.equals(\"u\")) { return new Undo(-1); } else if (lcinput.matches(\"a|s|d|w\")) { switch (lcinput) { case \"a\": return new Move.Left(0); case \"s\": return new Move.Down(0); case \"d\": return new Move.Right(0); case \"w\": return new Move.Up(0); default: return new InvalidInput(-1, StringResources.INVALID_INPUT_MESSAGE); } } else if (lcinput.matches(\"h|j|k|l\")) { switch (lcinput) { case \"h\": return new Move.Left(1); case \"j\": return new Move.Down(1); case \"k\": return new Move.Right(1); case \"l\": return new Move.Up(1); default: return new InvalidInput(-1, StringResources.INVALID_INPUT_MESSAGE); } } else { return new InvalidInput(-1, StringResources.INVALID_INPUT_MESSAGE); } }",
        "label": "F"
    },
    "894": {
        "dataset": "COMP 3021",
        "project": "yshinab",
        "bug_id": "34",
        "T": "void testUndo(String input, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine(); String lcinput = inputLine.toLowerCase(); if (lcinput.equals(\"exit\")) { return new Exit(-1); } else if (lcinput.equals(\"u\")) { return new Undo(-1); } else if (lcinput.matches(\"a|s|d|w\")) { switch (lcinput) { case \"a\": return new Move.Left(0); case \"s\": return new Move.Down(0); case \"d\": return new Move.Right(0); case \"w\": return new Move.Up(0); default: return new InvalidInput(-1, StringResources.INVALID_INPUT_MESSAGE); } } else if (lcinput.matches(\"h|j|k|l\")) { switch (lcinput) { case \"h\": return new Move.Left(1); case \"j\": return new Move.Down(1); case \"k\": return new Move.Right(1); case \"l\": return new Move.Up(1); default: return new InvalidInput(-1, StringResources.INVALID_INPUT_MESSAGE); } } else { return new InvalidInput(-1, StringResources.INVALID_INPUT_MESSAGE); } }",
        "label": "P"
    },
    "895": {
        "dataset": "COMP 3021",
        "project": "yshinab",
        "bug_id": "35",
        "T": "void testInvalidInput() { final var inputStream = fixValueStream(\"blah blah\"); final var inputEngine = new TerminalInputEngine(inputStream); final var action = inputEngine.fetchAction(); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine(); String lcinput = inputLine.toLowerCase(); if (lcinput.equals(\"exit\")) { return new Exit(-1); } else if (lcinput.equals(\"u\")) { return new Undo(-1); } else if (lcinput.matches(\"a|s|d|w\")) { switch (lcinput) { case \"a\": return new Move.Left(0); case \"s\": return new Move.Down(0); case \"d\": return new Move.Right(0); case \"w\": return new Move.Up(0); default: return new InvalidInput(-1, StringResources.INVALID_INPUT_MESSAGE); } } else if (lcinput.matches(\"h|j|k|l\")) { switch (lcinput) { case \"h\": return new Move.Left(1); case \"j\": return new Move.Down(1); case \"k\": return new Move.Right(1); case \"l\": return new Move.Up(1); default: return new InvalidInput(-1, StringResources.INVALID_INPUT_MESSAGE); } } else { return new InvalidInput(-1, StringResources.INVALID_INPUT_MESSAGE); } }",
        "label": "P"
    },
    "896": {
        "dataset": "COMP 3021",
        "project": "yshinab",
        "bug_id": "36",
        "T": "void testUndoWhenThereIsNoMove() { final var gameState = new GameState(TestHelper.parseGameMap(\"\"\" 233 ###### #A.a@# #..a@# ###### \"\"\" )); gameState.undo(); } private Entity generateEntity(int key) { return switch (key % 4) { case 0 -> new Box(0); case 1 -> new Empty(); case 2 -> new Player(0); case 3 -> new Wall(); default -> throw new ShouldNotReachException(); }; }",
        "C": "public GameState(@NotNull GameMap map) { this.gameMap = map; this.playerPos = map.entityPos.entrySet().stream() .filter(o -> o.getValue() instanceof Player) .collect(Collectors.toMap(o -> o.getKey(), o -> o.getValue(), (prev, next) -> next, HashMap::new)); if (this.playerPos.size() > new HashSet<Object>(this.playerPos.values()).size() || this.playerPos.size() > 26){ throw new IllegalArgumentException(\"There are either too many or duplicate players in this map\"); } this.boxPos = map.entityPos.entrySet().stream() .filter(o -> o.getValue() instanceof Box) .collect(Collectors.toMap(o -> o.getKey(), o -> o.getValue(), (prev, next) -> next, HashMap::new)); this.emptyPos = map.entityPos.entrySet().stream() .filter(o -> o.getValue() instanceof Empty) .collect(Collectors.toMap(o -> o.getKey(), o -> o.getValue(), (prev, next) -> next, HashMap::new)); this.undo = map.getUndoLimit().get(); this.checkpoint.add(new GameState(this)); } public void undo() { int size = checkpoint.size(); if (checkpoint.size()==1){ this.boxPos = copyHashMap(checkpoint.get(0).boxPos); this.playerPos = copyHashMap(checkpoint.get(0).playerPos); this.emptyPos = copyHashMap(checkpoint.get(0).emptyPos); return; } this.boxPos = copyHashMap(checkpoint.get(size-2).boxPos); this.playerPos = copyHashMap(checkpoint.get(size-2).playerPos); this.emptyPos = copyHashMap(checkpoint.get(size-2).emptyPos); this.undo = this.undo -1; this.checkpoint.remove(size-1); } public TerminalRenderingEngine(PrintStream outputSteam) { this.outputSteam = outputSteam; } public Box(int playerId) { this.playerId = playerId; } public Player(int id) { this.id = id; } public ShouldNotReachException() { super(\"This branch should not be reached.\"); }",
        "label": "P"
    },
    "897": {
        "dataset": "COMP 3021",
        "project": "yshinab",
        "bug_id": "37",
        "T": "void testGetUndoUnlimited() { final var gameState = new GameState(TestHelper.parseGameMap(\"\"\" -1 ###### #.Aa@# #..a@# ###### \"\"\" )); }",
        "C": "public GameState(@NotNull GameMap map) { this.gameMap = map; this.playerPos = map.entityPos.entrySet().stream() .filter(o -> o.getValue() instanceof Player) .collect(Collectors.toMap(o -> o.getKey(), o -> o.getValue(), (prev, next) -> next, HashMap::new)); if (this.playerPos.size() > new HashSet<Object>(this.playerPos.values()).size() || this.playerPos.size() > 26){ throw new IllegalArgumentException(\"There are either too many or duplicate players in this map\"); } this.boxPos = map.entityPos.entrySet().stream() .filter(o -> o.getValue() instanceof Box) .collect(Collectors.toMap(o -> o.getKey(), o -> o.getValue(), (prev, next) -> next, HashMap::new)); this.emptyPos = map.entityPos.entrySet().stream() .filter(o -> o.getValue() instanceof Empty) .collect(Collectors.toMap(o -> o.getKey(), o -> o.getValue(), (prev, next) -> next, HashMap::new)); this.undo = map.getUndoLimit().get(); this.checkpoint.add(new GameState(this)); }",
        "label": "P"
    },
    "898": {
        "dataset": "COMP 3021",
        "project": "yshinab",
        "bug_id": "38",
        "T": "void testMapCopying() { final var maxWidth = 2333; final var maxHeight = 2333; final var random = new Random(); final var randomEntities = Stream.generate(() -> Position.of(random.nextInt(maxWidth), random.nextInt(maxHeight))) .distinct() .limit(100) .collect(Collectors.toMap(Function.identity(), it -> generateEntity(it.x()))); final var firstPos = randomEntities.keySet().stream().findFirst(); final var gameMap = new GameMap(maxWidth, maxHeight, Collections.singleton(firstPos.get()), 233); randomEntities.forEach(gameMap::putEntity); final var gameState = new GameState(gameMap); final var randomPosition = randomEntities.keySet().stream().findAny(); gameMap.putEntity(randomPosition.get(), new Empty()); randomEntities.forEach((p, e) -> assertEquals(e, gameState.getEntity(p))); }",
        "C": "public static @NotNull Position of(int x, int y) { return new Position(x, y); } public GameMap(int maxWidth, int maxHeight, Set<Position> destinations, int undoLimit) { this.maxWidth = maxWidth; this.maxHeight = maxHeight; this.boxDestPos = destinations; this.undoLimit = undoLimit; } public GameState(@NotNull GameMap map) { this.gameMap = map; this.playerPos = map.entityPos.entrySet().stream() .filter(o -> o.getValue() instanceof Player) .collect(Collectors.toMap(o -> o.getKey(), o -> o.getValue(), (prev, next) -> next, HashMap::new)); if (this.playerPos.size() > new HashSet<Object>(this.playerPos.values()).size() || this.playerPos.size() > 26){ throw new IllegalArgumentException(\"There are either too many or duplicate players in this map\"); } this.boxPos = map.entityPos.entrySet().stream() .filter(o -> o.getValue() instanceof Box) .collect(Collectors.toMap(o -> o.getKey(), o -> o.getValue(), (prev, next) -> next, HashMap::new)); this.emptyPos = map.entityPos.entrySet().stream() .filter(o -> o.getValue() instanceof Empty) .collect(Collectors.toMap(o -> o.getKey(), o -> o.getValue(), (prev, next) -> next, HashMap::new)); this.undo = map.getUndoLimit().get(); this.checkpoint.add(new GameState(this)); } public void putEntity(Position position, Entity entity) { this.entityPos.put(position,entity); } public @Nullable Entity getEntity(@NotNull Position position) { if (boxPos.get(position) != null){ return boxPos.get(position); } else if (playerPos.get(position) != null) { return playerPos.get(position); } else if (emptyPos.get(position) != null) { return emptyPos.get(position); } else { return gameMap.getEntity(position); } } /** * Get all box destination positions as a set in the game map. * This should be the same as that in {@link GameMap}",
        "label": "F"
    },
    "899": {
        "dataset": "COMP 3021",
        "project": "yshinab",
        "bug_id": "39",
        "T": "void testUndoWhenThereIsMoveButNoCheckpoint() { final var gameState = new GameState(TestHelper.parseGameMap(\"\"\" 233 ###### #A.a@# #..a@# ###### \"\"\" )); gameState.move(Position.of(1, 1), Position.of(2, 1)); gameState.undo(); }",
        "C": "public GameState(@NotNull GameMap map) { this.gameMap = map; this.playerPos = map.entityPos.entrySet().stream() .filter(o -> o.getValue() instanceof Player) .collect(Collectors.toMap(o -> o.getKey(), o -> o.getValue(), (prev, next) -> next, HashMap::new)); if (this.playerPos.size() > new HashSet<Object>(this.playerPos.values()).size() || this.playerPos.size() > 26){ throw new IllegalArgumentException(\"There are either too many or duplicate players in this map\"); } this.boxPos = map.entityPos.entrySet().stream() .filter(o -> o.getValue() instanceof Box) .collect(Collectors.toMap(o -> o.getKey(), o -> o.getValue(), (prev, next) -> next, HashMap::new)); this.emptyPos = map.entityPos.entrySet().stream() .filter(o -> o.getValue() instanceof Empty) .collect(Collectors.toMap(o -> o.getKey(), o -> o.getValue(), (prev, next) -> next, HashMap::new)); this.undo = map.getUndoLimit().get(); this.checkpoint.add(new GameState(this)); } public void move(Position from, Position to) { var entity = getEntity(from); if (entity instanceof Box){ this.boxPos.put(to,entity); this.boxPos.remove(from); this.emptyPos.put(from,new Empty()); } if (entity instanceof Player){ this.playerPos.put(to,entity); this.playerPos.remove(from); this.emptyPos.put(from,new Empty()); } } /** * Record a checkpoint of the game state, including: * <li>All current positions of entities in the game map.</li> * <li>Current undo quota</li> * <p> * Checkpoint is used in {@link GameState#undo()} public static @NotNull Position of(int x, int y) { return new Position(x, y); } public void undo() { int size = checkpoint.size(); if (checkpoint.size()==1){ this.boxPos = copyHashMap(checkpoint.get(0).boxPos); this.playerPos = copyHashMap(checkpoint.get(0).playerPos); this.emptyPos = copyHashMap(checkpoint.get(0).emptyPos); return; } this.boxPos = copyHashMap(checkpoint.get(size-2).boxPos); this.playerPos = copyHashMap(checkpoint.get(size-2).playerPos); this.emptyPos = copyHashMap(checkpoint.get(size-2).emptyPos); this.undo = this.undo -1; this.checkpoint.remove(size-1); }",
        "label": "P"
    },
    "900": {
        "dataset": "COMP 3021",
        "project": "yshinab",
        "bug_id": "40",
        "T": "void testGameExit() { final var gameState = mock(GameState.class); final var inputEngine = mock(TerminalInputEngine.class); final var renderingEngine = mock(TerminalRenderingEngine.class); when(gameState.isWin()).thenReturn(false, false, false); when(inputEngine.fetchAction()) .thenReturn(new InvalidInput(0, \"\"), new InvalidInput(0, \"\"), new Exit(0)); final var game = new TerminalSokobanGame(gameState, inputEngine, renderingEngine); game.run(); verify(renderingEngine, atLeastOnce()).message(any()); }",
        "C": "public InvalidInput(int initiator, @NotNull String message) { super(initiator); this.message = message; } public Exit(int initiator) { super(initiator); } public TerminalSokobanGame(GameState gameState, TerminalInputEngine inputEngine, TerminalRenderingEngine renderingEngine) { super(gameState); this.inputEngine = inputEngine; this.renderingEngine = renderingEngine; if (gameState.getAllPlayerPositions().size() > 2) throw new IllegalArgumentException(); } public void run() { this.renderingEngine.message(GAME_READY_MESSAGE); this.renderingEngine.render(super.state); while(!shouldStop()){ if (state.getUndoQuota().isEmpty()) this.renderingEngine.message(UNDO_QUOTA_UNLIMITED); else this.renderingEngine.message(\"Undo Quota: \" + state.getUndoQuota().get()); this.renderingEngine.message(\">>>\"); Action action = this.inputEngine.fetchAction(); ActionResult result = super.processAction(action); if (result.getAction() instanceof Exit) { this.renderingEngine.message(GAME_EXIT_MESSAGE); break; } if (result instanceof ActionResult.Failed) this.renderingEngine.message(((ActionResult.Failed) result).getReason()); this.renderingEngine.render(state); } this.renderingEngine.message(WIN_MESSAGE); }",
        "label": "P"
    },
    "901": {
        "dataset": "COMP 3021",
        "project": "yshinab",
        "bug_id": "41",
        "T": "void testGameWin() { final var gameState = mock(GameState.class); final var inputEngine = mock(TerminalInputEngine.class); final var renderingEngine = mock(TerminalRenderingEngine.class); when(gameState.isWin()).thenReturn(false, false, false, true); when(inputEngine.fetchAction()) .thenReturn(new InvalidInput(0, \"\")); final var game = new TerminalSokobanGame(gameState, inputEngine, renderingEngine); game.run(); verify(gameState, atLeastOnce()).isWin(); verify(renderingEngine, atLeastOnce()).message(any()); }",
        "C": "public InvalidInput(int initiator, @NotNull String message) { super(initiator); this.message = message; } public TerminalSokobanGame(GameState gameState, TerminalInputEngine inputEngine, TerminalRenderingEngine renderingEngine) { super(gameState); this.inputEngine = inputEngine; this.renderingEngine = renderingEngine; if (gameState.getAllPlayerPositions().size() > 2) throw new IllegalArgumentException(); } public void run() { this.renderingEngine.message(GAME_READY_MESSAGE); this.renderingEngine.render(super.state); while(!shouldStop()){ if (state.getUndoQuota().isEmpty()) this.renderingEngine.message(UNDO_QUOTA_UNLIMITED); else this.renderingEngine.message(\"Undo Quota: \" + state.getUndoQuota().get()); this.renderingEngine.message(\">>>\"); Action action = this.inputEngine.fetchAction(); ActionResult result = super.processAction(action); if (result.getAction() instanceof Exit) { this.renderingEngine.message(GAME_EXIT_MESSAGE); break; } if (result instanceof ActionResult.Failed) this.renderingEngine.message(((ActionResult.Failed) result).getReason()); this.renderingEngine.render(state); } this.renderingEngine.message(WIN_MESSAGE); }",
        "label": "P"
    },
    "902": {
        "dataset": "COMP 3021",
        "project": "yshinab",
        "bug_id": "42",
        "T": "void testMoreThanTwoPlayers() { final var gameState = mock(GameState.class); final var inputEngine = mock(TerminalInputEngine.class); final var renderingEngine = mock(TerminalRenderingEngine.class); when(gameState.getAllPlayerPositions()).thenReturn(new HashSet<>(Arrays.asList(Position.of(1, 1), Position.of(1, 2), Position.of(1, 3)))); }",
        "C": "public static @NotNull Position of(int x, int y) { return new Position(x, y); }",
        "label": "P"
    },
    "903": {
        "dataset": "COMP 3021",
        "project": "yysze",
        "bug_id": "0",
        "T": "void moveUp() { Position.of(233, 232), new Move.Up(-1).nextPosition(pos) ); }",
        "C": "public static @NotNull Position of(int x, int y) { return new Position(x, y); } public Up(int initiator) { super(initiator); }",
        "label": "P"
    },
    "904": {
        "dataset": "COMP 3021",
        "project": "yysze",
        "bug_id": "1",
        "T": "void moveDown() { Position.of(233, 234), new Move.Down(-1).nextPosition(pos) ); }",
        "C": "public static @NotNull Position of(int x, int y) { return new Position(x, y); } public Down(int initiator) { super(initiator); }",
        "label": "P"
    },
    "905": {
        "dataset": "COMP 3021",
        "project": "yysze",
        "bug_id": "2",
        "T": "void moveRight() { Position.of(234, 233), new Move.Right(-1).nextPosition(pos) ); }",
        "C": "public static @NotNull Position of(int x, int y) { return new Position(x, y); } public Right(int initiator) { super(initiator); }",
        "label": "P"
    },
    "906": {
        "dataset": "COMP 3021",
        "project": "yysze",
        "bug_id": "3",
        "T": "void testExceedingUndoQuota() { final var gameState = mock(GameState.class); when(gameState.getPlayerPositionById(anyInt())).thenReturn(Position.of(0, 0)); when(gameState.getUndoQuota()).thenReturn(Optional.of(0)); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Undo(0)); }",
        "C": "public Undo(int initiator) { super(initiator); }",
        "label": "F"
    },
    "907": {
        "dataset": "COMP 3021",
        "project": "yysze",
        "bug_id": "4",
        "T": "void testExit() { final var gameState = mock(GameState.class); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Exit(0)); }",
        "C": "public Exit(int initiator) { super(initiator); }",
        "label": "F"
    },
    "908": {
        "dataset": "COMP 3021",
        "project": "yysze",
        "bug_id": "5",
        "T": "void testUndoUnlimited() { final var gameState = mock(GameState.class); when(gameState.getPlayerPositionById(anyInt())).thenReturn(Position.of(0, 0)); when(gameState.getUndoQuota()).thenReturn(Optional.empty()); final var game = new SokobanGameForTesting(gameState); for (int i = 0; i < 10000; i++) { final var result = game.feedActionForProcessing(new Undo(0)); } verify(gameState, times(10000)).undo(); }",
        "C": "public TerminalRenderingEngine(PrintStream outputSteam) { this.outputSteam = outputSteam; } public Undo(int initiator) { super(initiator); }",
        "label": "P"
    },
    "909": {
        "dataset": "COMP 3021",
        "project": "yysze",
        "bug_id": "6",
        "T": "void testPushOtherPlayerBox() { String mapText = \"\"\" 233 ###### #AB.@# #b.a.# #@...# ###### \"\"\"; final var testMap = TestHelper.parseGameMap(mapText); final var gameState = spy(new GameState(testMap)); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Move.Down(0)); verify(gameState, never()).move(any(), any()); }",
        "C": "public GameState(@NotNull GameMap map) { // TODO currentMap = map; mapCheckpoints = new ArrayList<>(); mapCheckpoints.add(map.getMapSnapshot()); } public Down(int initiator) { super(initiator); }",
        "label": "P"
    },
    "910": {
        "dataset": "COMP 3021",
        "project": "yysze",
        "bug_id": "7",
        "T": "void testMoveNonExistingPlayer() { String mapText = \"\"\" 233 ###### #A..@# #a...# ##...# ###### \"\"\"; final var testMap = TestHelper.parseGameMap(mapText); final var gameState = spy(new GameState(testMap)); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Move.Down(23)); }",
        "C": "public GameState(@NotNull GameMap map) { // TODO currentMap = map; mapCheckpoints = new ArrayList<>(); mapCheckpoints.add(map.getMapSnapshot()); } public Down(int initiator) { super(initiator); }",
        "label": "F"
    },
    "911": {
        "dataset": "COMP 3021",
        "project": "yysze",
        "bug_id": "8",
        "T": "void testCheckpointWhenNeed() { final var gameState = spy(new GameState(TestHelper.parseGameMap(\"\"\" 233 ###### #.Aa@# #..a@# ###### \"\"\" ))); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Move.Right(0)); verify(gameState, times(1)).checkpoint(); }",
        "C": "public GameState(@NotNull GameMap map) { // TODO currentMap = map; mapCheckpoints = new ArrayList<>(); mapCheckpoints.add(map.getMapSnapshot()); } public Right(int initiator) { super(initiator); }",
        "label": "P"
    },
    "912": {
        "dataset": "COMP 3021",
        "project": "yysze",
        "bug_id": "9",
        "T": "void testPushBoxAgainstWall() { String mapText = \"\"\" 233 ###### #A..@# #a...# ##...# ###### \"\"\"; final var testMap = TestHelper.parseGameMap(mapText); final var gameState = spy(new GameState(testMap)); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Move.Down(0)); verify(gameState, never()).move(any(), any()); }",
        "C": "public GameState(@NotNull GameMap map) { // TODO currentMap = map; mapCheckpoints = new ArrayList<>(); mapCheckpoints.add(map.getMapSnapshot()); } public Down(int initiator) { super(initiator); }",
        "label": "P"
    },
    "913": {
        "dataset": "COMP 3021",
        "project": "yysze",
        "bug_id": "10",
        "T": "void testCheckpointWhenNotNeed() { final var gameState = spy(new GameState(TestHelper.parseGameMap(\"\"\" 233 ###### #A.a@# #..a@# ###### \"\"\" ))); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Move.Right(0)); verify(gameState, never()).checkpoint(); } private static class SokobanGameForTesting extends AbstractSokobanGame { protected SokobanGameForTesting(GameState gameState) { super(gameState); } @Override public void run() { } public ActionResult feedActionForProcessing(Action action) { return processAction(action); } }",
        "C": "public GameState(@NotNull GameMap map) { // TODO currentMap = map; mapCheckpoints = new ArrayList<>(); mapCheckpoints.add(map.getMapSnapshot()); } public Right(int initiator) { super(initiator); } public void run() { boolean isExit = false; // TODO renderingEngine.message(\"\"); renderingEngine.message(\"Sokoban game is ready.\"); renderingEngine.render(state); renderingEngine.message(\"\"); if (state.getUndoQuota() != null && state.getUndoQuota().isPresent()) { renderingEngine.message(\"Undo Quota: \" + state.getUndoQuota().get().toString()); } else { renderingEngine.message(\"Undo Quota: infinity\"); } renderingEngine.message(\">>>\"); while (!isExit && !shouldStop()) { Action currentAction = inputEngine.fetchAction(); if (currentAction instanceof Exit) { isExit = true; renderingEngine.render(state); renderingEngine.message(\"\"); renderingEngine.message(\"Game exits.\"); } else { processAction(currentAction); if (state.getErrorMsg() != \"normal\") { renderingEngine.message(state.getErrorMsg()); } renderingEngine.render(state); renderingEngine.message(\"\"); if (state.getUndoQuota() != null && state.getUndoQuota().isPresent()) { renderingEngine.message(\"Undo Quota: \" + state.getUndoQuota().get().toString()); } else { renderingEngine.message(\"Undo Quota: infinity\"); } renderingEngine.message(\">>>\"); if (state.isWin()) { renderingEngine.message(\"You win!\"); } state.setErrorMsg(\"normal\"); } } } protected ActionResult processAction(@NotNull Action action) { // TODO switch (action) { case Move o: // check if the move is valid Position playerCurrentPosition = state.getPlayerPositionById(o.getInitiator()); Position playerNextPosition = o.nextPosition(playerCurrentPosition); Entity moveDestination = state.getEntity(playerNextPosition); switch (moveDestination) { case Empty m: state.move(playerCurrentPosition, playerNextPosition); break; case Player p: state.setErrorMsg(\"You hit another player.\"); return new ActionResult.Failed(action, \"You hit another player.\"); case Wall w: state.setErrorMsg(\"You hit a wall.\"); return new ActionResult.Failed(action, \"You hit a wall.\"); case Box m: // move the box boolean isBoxMoveValid = false; Integer differencey = playerNextPosition.y() - playerCurrentPosition.y(); Integer differencex = playerNextPosition.x() - playerCurrentPosition.x(); if (m.getPlayerId() == o.getInitiator()) { int newX = playerNextPosition.x() + differencex; int newY = playerNextPosition.y() + differencey; isBoxMoveValid = this.moveBox(playerNextPosition, Position.of(newX, newY)); } else { state.setErrorMsg(\"You cannot move other players' boxes.\"); return new ActionResult.Failed(action, \"You cannot move other players' boxes.\"); } // move the player if (isBoxMoveValid) { state.move(playerCurrentPosition, playerNextPosition); } else { return new ActionResult.Failed(action, \"Failed to push the box\"); } break; default: state.setErrorMsg(\"Invalid enity\"); return new ActionResult.Failed(action, \"Invalid entity\"); } state.checkpoint(); return new ActionResult.Success(action); case Undo o: state.undo(); return new ActionResult.Success(action); case Exit o: return new ActionResult.Success(action); case InvalidInput o: state.setErrorMsg(\"Invalid Input\"); return new ActionResult.Failed(action, \"Invalid Input\"); default: return new ActionResult.Failed(action, \"Invalid Input\"); } }",
        "label": "F"
    },
    "914": {
        "dataset": "COMP 3021",
        "project": "yysze",
        "bug_id": "11",
        "T": "void testHitAnotherPlayer() { String mapText = \"\"\" 233 ###### #A..@# #B...# #ab.@# ###### \"\"\"; final var testMap = TestHelper.parseGameMap(mapText); final var gameState = spy(new GameState(testMap)); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Move.Down(0)); verify(gameState, never()).move(any(), any()); }",
        "C": "public GameState(@NotNull GameMap map) { // TODO currentMap = map; mapCheckpoints = new ArrayList<>(); mapCheckpoints.add(map.getMapSnapshot()); } public Down(int initiator) { super(initiator); }",
        "label": "P"
    },
    "915": {
        "dataset": "COMP 3021",
        "project": "yysze",
        "bug_id": "12",
        "T": "void testUndoWithinQuota() { final var gameState = mock(GameState.class); when(gameState.getPlayerPositionById(anyInt())).thenReturn(Position.of(0, 0)); when(gameState.getUndoQuota()).thenReturn(Optional.of(1)); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Undo(0)); verify(gameState, times(1)).undo(); }",
        "C": "public Undo(int initiator) { super(initiator); }",
        "label": "P"
    },
    "916": {
        "dataset": "COMP 3021",
        "project": "yysze",
        "bug_id": "13",
        "T": "void testInvalidInput() { final var game = new SokobanGameForTesting(mock(GameState.class)); final var message = String.valueOf(new Random().nextLong()); final var action = new InvalidInput(-1, message); final var result = game.feedActionForProcessing(action); }",
        "C": "public InvalidInput(int initiator, @NotNull String message) { super(initiator); this.message = message; }",
        "label": "P"
    },
    "917": {
        "dataset": "COMP 3021",
        "project": "yysze",
        "bug_id": "14",
        "T": "void testUndoLimitParsing() { final var gameMap = TestHelper.parseGameMap(rectangularMap); }",
        "C": "",
        "label": "P"
    },
    "918": {
        "dataset": "COMP 3021",
        "project": "yysze",
        "bug_id": "15",
        "T": "void testWidthForNonRectangularMap() { final var gameMap = TestHelper.parseGameMap(nonRectangularMap); }",
        "C": "",
        "label": "P"
    },
    "919": {
        "dataset": "COMP 3021",
        "project": "yysze",
        "bug_id": "16",
        "T": "void testTwoPlayersMap() { final var twoPlayersMap = \"\"\" 233 ###### #A..@# #..B@# #....# #.a..# #..b.# ###### \"\"\"; final var gameMap = TestHelper.parseGameMap(twoPlayersMap); final var playerIds = gameMap.getPlayerIds(); final var expectedIds = new HashSet<Integer>(); expectedIds.add(0); expectedIds.add(1); }",
        "C": "public Set<Integer> getPlayerIds() { // TODO return this.playersIDs; }",
        "label": "P"
    },
    "920": {
        "dataset": "COMP 3021",
        "project": "yysze",
        "bug_id": "17",
        "T": "void testMapWithoutPlayer() { final var invalidMap = \"\"\" 233 ### #.# ### \"\"\"; } // @Tag(TestKind.HIDDEN) // @Test // void testUnmatchedPlayersAndBoxes() { // final var invalidMap = \"\"\" // 233 // ###### // #A..@# // #...@# // #a.b@# // #.a.@# // #..a.# // ###### // \"\"\"; // assertThrowsExactly(IllegalArgumentException.class, () -> TestHelper.parseGameMap(invalidMap)); // }",
        "C": "public TerminalRenderingEngine(PrintStream outputSteam) { this.outputSteam = outputSteam; }",
        "label": "P"
    },
    "921": {
        "dataset": "COMP 3021",
        "project": "yysze",
        "bug_id": "18",
        "T": "void testManyPlayersMap() { final var manyPlayersMap = \"\"\" 233 ###### #A.P@@# #vCB@@# #.cpD@# #Ga.d@# #g.bV@# ###### \"\"\"; final var gameMap = TestHelper.parseGameMap(manyPlayersMap); final var playerIds = gameMap.getPlayerIds(); final var expectedIds = new HashSet<>(Arrays.asList( 0, 'P' - 'A', 'C' - 'A', 'B' - 'A', 'D' - 'A', 'G' - 'A', 'V' - 'A' )); }",
        "C": "public Set<Integer> getPlayerIds() { // TODO return this.playersIDs; }",
        "label": "P"
    },
    "922": {
        "dataset": "COMP 3021",
        "project": "yysze",
        "bug_id": "19",
        "T": "void testHeightForNonRectangularMap() { final var gameMap = TestHelper.parseGameMap(nonRectangularMap); }",
        "C": "",
        "label": "P"
    },
    "923": {
        "dataset": "COMP 3021",
        "project": "yysze",
        "bug_id": "20",
        "T": "void testDuplicatedPlayers() { final var invalidMap = \"\"\" 233 ###### #A..@# #..A@# #....# #.a..# #..b.# ###### \"\"\"; }",
        "C": "",
        "label": "P"
    },
    "924": {
        "dataset": "COMP 3021",
        "project": "yysze",
        "bug_id": "21",
        "T": "void testParseMapWithoutUndoLimit() { final var invalidMap = String.join(\"\\n\", rectangularMap.lines().skip(1).toList()); }",
        "C": "",
        "label": "P"
    },
    "925": {
        "dataset": "COMP 3021",
        "project": "yysze",
        "bug_id": "22",
        "T": "void testInsufficientDestinations() { final var invalidMap = \"\"\" 233 ###### #A..@# #...@# #a...# #.a..# #..a.# ###### \"\"\"; }",
        "C": "",
        "label": "P"
    },
    "926": {
        "dataset": "COMP 3021",
        "project": "yysze",
        "bug_id": "23",
        "T": "void testSuperLargeMap() { try { new GameMap(Integer.MAX_VALUE, Integer.MAX_VALUE, Collections.emptySet(), 0); } catch (OutOfMemoryError e) { throw new RuntimeException(e); } }); }",
        "C": "public GameMap(int maxWidth, int maxHeight, Set<Position> destinations, int undoLimit) { // TODO this.maxWidth = maxWidth; this.maxHeight = maxHeight; this.destinations = destinations; this.undoLimit = undoLimit; // create an empty map map = new ArrayList<List<Entity>>(); List<Entity> tempRow; for (Integer j = 0; j < this.maxHeight; j++) { tempRow = new ArrayList<Entity>(); for (Integer i = 0; i < this.maxWidth; i++) { if (destinations.contains(Position.of(i,j))) { tempRow.add(new Empty(true)); } else { tempRow.add(new Empty(false)); } } map.add(tempRow); } } /** * Parses the map from a string representation. * The first line is undo limit. * Starting from the second line, the game map is represented as follows, * <li># represents a {@link Wall}</li> * <li>@ represents a box destination.</li> * <li>Any upper-case letter represents a {@link Player}.</li> * <li> * Any lower-case letter represents a {@link Box} that is only movable by the player with the corresponding upper-case letter. * For instance, box \"a\" can only be moved by player \"A\" and not movable by player \"B\". * </li> * <li>. represents an {@link Empty} position in the map, meaning there is no player or box currently at this position.</li> * <p> * Notes: * <li> * There can be at most 26 players. * All implementations of classes in the hk.ust.comp3021.game package should support up to 26 players. * </li> * <li> * For simplicity, we assume the given map is bounded with a closed boundary. * There is no need to check this point. * </li> * <li> * Example maps can be found in \"src/main/resources\". * </li> * * @param mapText The string representation. * @return The parsed GameMap object. * @throws IllegalArgumentException if undo limit is negative but not -1. * @throws IllegalArgumentException if there are multiple same upper-case letters, i.e., one player can only exist at one position. * @throws IllegalArgumentException if there are no players in the map. * @throws IllegalArgumentException if the number of boxes is not equal to the number of box destinations. * @throws IllegalArgumentException if there are boxes whose {@link Box#getPlayerId()} public TerminalRenderingEngine(PrintStream outputSteam) { this.outputSteam = outputSteam; }",
        "label": "F"
    },
    "927": {
        "dataset": "COMP 3021",
        "project": "yysze",
        "bug_id": "24",
        "T": "void testInvalidUndoLimit() { final var invalidMap = \"\"\" -233 ###### #A..@# #...@# #a.b@# #.a.@# #..a.# ###### \"\"\"; }",
        "C": "",
        "label": "P"
    },
    "928": {
        "dataset": "COMP 3021",
        "project": "yysze",
        "bug_id": "25",
        "T": "void testEmptyMap() { final var invalidMap = \"\"; }",
        "C": "",
        "label": "P"
    },
    "929": {
        "dataset": "COMP 3021",
        "project": "yysze",
        "bug_id": "26",
        "T": "void testMove(String input, String name, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); } private InputStream fixValueStream(String content) { final var bytes = content.getBytes(StandardCharsets.UTF_8); return new ByteArrayInputStream(bytes); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine(); // TODO switch (inputLine) { // pattern matching using objects in switch statement case \"w\": case \"W\": return new Move.Up(0); case \"a\": case \"A\": return new Move.Left(0); case \"s\": case \"S\": return new Move.Down(0); case \"d\": case \"D\": return new Move.Right(0); case \"k\": case \"K\": return new Move.Up(1); case \"h\": case \"H\": return new Move.Left(1); case \"j\": case \"J\": return new Move.Down(1); case \"l\": case \"L\": return new Move.Right(1); case \"u\": case \"U\": return new Undo(-1); case \"exit\": case \"EXIT\": return new Exit(-1); default: return new InvalidInput(-1, \"Invalid input\"); } }",
        "label": "P"
    },
    "930": {
        "dataset": "COMP 3021",
        "project": "yysze",
        "bug_id": "27",
        "T": "void testMove(String input, String name, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); } private InputStream fixValueStream(String content) { final var bytes = content.getBytes(StandardCharsets.UTF_8); return new ByteArrayInputStream(bytes); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine(); // TODO switch (inputLine) { // pattern matching using objects in switch statement case \"w\": case \"W\": return new Move.Up(0); case \"a\": case \"A\": return new Move.Left(0); case \"s\": case \"S\": return new Move.Down(0); case \"d\": case \"D\": return new Move.Right(0); case \"k\": case \"K\": return new Move.Up(1); case \"h\": case \"H\": return new Move.Left(1); case \"j\": case \"J\": return new Move.Down(1); case \"l\": case \"L\": return new Move.Right(1); case \"u\": case \"U\": return new Undo(-1); case \"exit\": case \"EXIT\": return new Exit(-1); default: return new InvalidInput(-1, \"Invalid input\"); } }",
        "label": "P"
    },
    "931": {
        "dataset": "COMP 3021",
        "project": "yysze",
        "bug_id": "28",
        "T": "void testMove(String input, String name, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); } private InputStream fixValueStream(String content) { final var bytes = content.getBytes(StandardCharsets.UTF_8); return new ByteArrayInputStream(bytes); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine(); // TODO switch (inputLine) { // pattern matching using objects in switch statement case \"w\": case \"W\": return new Move.Up(0); case \"a\": case \"A\": return new Move.Left(0); case \"s\": case \"S\": return new Move.Down(0); case \"d\": case \"D\": return new Move.Right(0); case \"k\": case \"K\": return new Move.Up(1); case \"h\": case \"H\": return new Move.Left(1); case \"j\": case \"J\": return new Move.Down(1); case \"l\": case \"L\": return new Move.Right(1); case \"u\": case \"U\": return new Undo(-1); case \"exit\": case \"EXIT\": return new Exit(-1); default: return new InvalidInput(-1, \"Invalid input\"); } }",
        "label": "P"
    },
    "932": {
        "dataset": "COMP 3021",
        "project": "yysze",
        "bug_id": "29",
        "T": "void testMove(String input, String name, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); } private InputStream fixValueStream(String content) { final var bytes = content.getBytes(StandardCharsets.UTF_8); return new ByteArrayInputStream(bytes); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine(); // TODO switch (inputLine) { // pattern matching using objects in switch statement case \"w\": case \"W\": return new Move.Up(0); case \"a\": case \"A\": return new Move.Left(0); case \"s\": case \"S\": return new Move.Down(0); case \"d\": case \"D\": return new Move.Right(0); case \"k\": case \"K\": return new Move.Up(1); case \"h\": case \"H\": return new Move.Left(1); case \"j\": case \"J\": return new Move.Down(1); case \"l\": case \"L\": return new Move.Right(1); case \"u\": case \"U\": return new Undo(-1); case \"exit\": case \"EXIT\": return new Exit(-1); default: return new InvalidInput(-1, \"Invalid input\"); } }",
        "label": "P"
    },
    "933": {
        "dataset": "COMP 3021",
        "project": "yysze",
        "bug_id": "30",
        "T": "void testMove(String input, String name, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); } private InputStream fixValueStream(String content) { final var bytes = content.getBytes(StandardCharsets.UTF_8); return new ByteArrayInputStream(bytes); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine(); // TODO switch (inputLine) { // pattern matching using objects in switch statement case \"w\": case \"W\": return new Move.Up(0); case \"a\": case \"A\": return new Move.Left(0); case \"s\": case \"S\": return new Move.Down(0); case \"d\": case \"D\": return new Move.Right(0); case \"k\": case \"K\": return new Move.Up(1); case \"h\": case \"H\": return new Move.Left(1); case \"j\": case \"J\": return new Move.Down(1); case \"l\": case \"L\": return new Move.Right(1); case \"u\": case \"U\": return new Undo(-1); case \"exit\": case \"EXIT\": return new Exit(-1); default: return new InvalidInput(-1, \"Invalid input\"); } }",
        "label": "P"
    },
    "934": {
        "dataset": "COMP 3021",
        "project": "yysze",
        "bug_id": "31",
        "T": "void testMove(String input, String name, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); } private InputStream fixValueStream(String content) { final var bytes = content.getBytes(StandardCharsets.UTF_8); return new ByteArrayInputStream(bytes); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine(); // TODO switch (inputLine) { // pattern matching using objects in switch statement case \"w\": case \"W\": return new Move.Up(0); case \"a\": case \"A\": return new Move.Left(0); case \"s\": case \"S\": return new Move.Down(0); case \"d\": case \"D\": return new Move.Right(0); case \"k\": case \"K\": return new Move.Up(1); case \"h\": case \"H\": return new Move.Left(1); case \"j\": case \"J\": return new Move.Down(1); case \"l\": case \"L\": return new Move.Right(1); case \"u\": case \"U\": return new Undo(-1); case \"exit\": case \"EXIT\": return new Exit(-1); default: return new InvalidInput(-1, \"Invalid input\"); } }",
        "label": "P"
    },
    "935": {
        "dataset": "COMP 3021",
        "project": "yysze",
        "bug_id": "32",
        "T": "void testMove(String input, String name, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); } private InputStream fixValueStream(String content) { final var bytes = content.getBytes(StandardCharsets.UTF_8); return new ByteArrayInputStream(bytes); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine(); // TODO switch (inputLine) { // pattern matching using objects in switch statement case \"w\": case \"W\": return new Move.Up(0); case \"a\": case \"A\": return new Move.Left(0); case \"s\": case \"S\": return new Move.Down(0); case \"d\": case \"D\": return new Move.Right(0); case \"k\": case \"K\": return new Move.Up(1); case \"h\": case \"H\": return new Move.Left(1); case \"j\": case \"J\": return new Move.Down(1); case \"l\": case \"L\": return new Move.Right(1); case \"u\": case \"U\": return new Undo(-1); case \"exit\": case \"EXIT\": return new Exit(-1); default: return new InvalidInput(-1, \"Invalid input\"); } }",
        "label": "P"
    },
    "936": {
        "dataset": "COMP 3021",
        "project": "yysze",
        "bug_id": "33",
        "T": "void testMove(String input, String name, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); } private InputStream fixValueStream(String content) { final var bytes = content.getBytes(StandardCharsets.UTF_8); return new ByteArrayInputStream(bytes); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine(); // TODO switch (inputLine) { // pattern matching using objects in switch statement case \"w\": case \"W\": return new Move.Up(0); case \"a\": case \"A\": return new Move.Left(0); case \"s\": case \"S\": return new Move.Down(0); case \"d\": case \"D\": return new Move.Right(0); case \"k\": case \"K\": return new Move.Up(1); case \"h\": case \"H\": return new Move.Left(1); case \"j\": case \"J\": return new Move.Down(1); case \"l\": case \"L\": return new Move.Right(1); case \"u\": case \"U\": return new Undo(-1); case \"exit\": case \"EXIT\": return new Exit(-1); default: return new InvalidInput(-1, \"Invalid input\"); } }",
        "label": "P"
    },
    "937": {
        "dataset": "COMP 3021",
        "project": "yysze",
        "bug_id": "34",
        "T": "void testUndo(String input, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine(); // TODO switch (inputLine) { // pattern matching using objects in switch statement case \"w\": case \"W\": return new Move.Up(0); case \"a\": case \"A\": return new Move.Left(0); case \"s\": case \"S\": return new Move.Down(0); case \"d\": case \"D\": return new Move.Right(0); case \"k\": case \"K\": return new Move.Up(1); case \"h\": case \"H\": return new Move.Left(1); case \"j\": case \"J\": return new Move.Down(1); case \"l\": case \"L\": return new Move.Right(1); case \"u\": case \"U\": return new Undo(-1); case \"exit\": case \"EXIT\": return new Exit(-1); default: return new InvalidInput(-1, \"Invalid input\"); } }",
        "label": "P"
    },
    "938": {
        "dataset": "COMP 3021",
        "project": "yysze",
        "bug_id": "35",
        "T": "void testInvalidInput() { final var inputStream = fixValueStream(\"blah blah\"); final var inputEngine = new TerminalInputEngine(inputStream); final var action = inputEngine.fetchAction(); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine(); // TODO switch (inputLine) { // pattern matching using objects in switch statement case \"w\": case \"W\": return new Move.Up(0); case \"a\": case \"A\": return new Move.Left(0); case \"s\": case \"S\": return new Move.Down(0); case \"d\": case \"D\": return new Move.Right(0); case \"k\": case \"K\": return new Move.Up(1); case \"h\": case \"H\": return new Move.Left(1); case \"j\": case \"J\": return new Move.Down(1); case \"l\": case \"L\": return new Move.Right(1); case \"u\": case \"U\": return new Undo(-1); case \"exit\": case \"EXIT\": return new Exit(-1); default: return new InvalidInput(-1, \"Invalid input\"); } }",
        "label": "P"
    },
    "939": {
        "dataset": "COMP 3021",
        "project": "yysze",
        "bug_id": "36",
        "T": "void testUndoWhenThereIsNoMove() { final var gameState = new GameState(TestHelper.parseGameMap(\"\"\" 233 ###### #A.a@# #..a@# ###### \"\"\" )); gameState.undo(); } private Entity generateEntity(int key) { return switch (key % 4) { case 0 -> new Box(0); case 1 -> new Empty(); case 2 -> new Player(0); case 3 -> new Wall(); default -> throw new ShouldNotReachException(); }; }",
        "C": "public GameState(@NotNull GameMap map) { // TODO currentMap = map; mapCheckpoints = new ArrayList<>(); mapCheckpoints.add(map.getMapSnapshot()); } public void undo() { // TODO if (mapCheckpoints.size() == 1) { setErrorMsg(\"You are at first checkpoint already\"); } else if (currentMap.getUndoLimit().isPresent() && currentMap.getUndoLimit().get() == 0) { setErrorMsg(\"You have run out of your undo quota.\"); } else if (currentMap.getUndoLimit().isEmpty()) { currentMap.setMapSnapshot(mapCheckpoints.get(mapCheckpoints.size() - 2)); this.popCheckPoint(); } else { currentMap.deductUndoLimit(); currentMap.setMapSnapshot(mapCheckpoints.get(mapCheckpoints.size() - 2)); this.popCheckPoint(); } } /** * Get the maximum width of the game map. * This should be the same as that in {@link GameMap} public TerminalRenderingEngine(PrintStream outputSteam) { this.outputSteam = outputSteam; } public Box(int playerId) { this.playerId = playerId; } public Empty() {} public Player(int id) { this.id = id; } public ShouldNotReachException() { super(\"This branch should not be reached.\"); }",
        "label": "P"
    },
    "940": {
        "dataset": "COMP 3021",
        "project": "yysze",
        "bug_id": "37",
        "T": "void testGetUndoUnlimited() { final var gameState = new GameState(TestHelper.parseGameMap(\"\"\" -1 ###### #.Aa@# #..a@# ###### \"\"\" )); }",
        "C": "public GameState(@NotNull GameMap map) { // TODO currentMap = map; mapCheckpoints = new ArrayList<>(); mapCheckpoints.add(map.getMapSnapshot()); }",
        "label": "F"
    },
    "941": {
        "dataset": "COMP 3021",
        "project": "yysze",
        "bug_id": "38",
        "T": "void testMapCopying() { final var maxWidth = 2333; final var maxHeight = 2333; final var random = new Random(); final var randomEntities = Stream.generate(() -> Position.of(random.nextInt(maxWidth), random.nextInt(maxHeight))) .distinct() .limit(100) .collect(Collectors.toMap(Function.identity(), it -> generateEntity(it.x()))); final var firstPos = randomEntities.keySet().stream().findFirst(); final var gameMap = new GameMap(maxWidth, maxHeight, Collections.singleton(firstPos.get()), 233); randomEntities.forEach(gameMap::putEntity); final var gameState = new GameState(gameMap); final var randomPosition = randomEntities.keySet().stream().findAny(); gameMap.putEntity(randomPosition.get(), new Empty()); randomEntities.forEach((p, e) -> assertEquals(e, gameState.getEntity(p))); }",
        "C": "public static @NotNull Position of(int x, int y) { return new Position(x, y); } public GameMap(int maxWidth, int maxHeight, Set<Position> destinations, int undoLimit) { // TODO this.maxWidth = maxWidth; this.maxHeight = maxHeight; this.destinations = destinations; this.undoLimit = undoLimit; // create an empty map map = new ArrayList<List<Entity>>(); List<Entity> tempRow; for (Integer j = 0; j < this.maxHeight; j++) { tempRow = new ArrayList<Entity>(); for (Integer i = 0; i < this.maxWidth; i++) { if (destinations.contains(Position.of(i,j))) { tempRow.add(new Empty(true)); } else { tempRow.add(new Empty(false)); } } map.add(tempRow); } } /** * Parses the map from a string representation. * The first line is undo limit. * Starting from the second line, the game map is represented as follows, * <li># represents a {@link Wall}</li> * <li>@ represents a box destination.</li> * <li>Any upper-case letter represents a {@link Player}.</li> * <li> * Any lower-case letter represents a {@link Box} that is only movable by the player with the corresponding upper-case letter. * For instance, box \"a\" can only be moved by player \"A\" and not movable by player \"B\". * </li> * <li>. represents an {@link Empty} position in the map, meaning there is no player or box currently at this position.</li> * <p> * Notes: * <li> * There can be at most 26 players. * All implementations of classes in the hk.ust.comp3021.game package should support up to 26 players. * </li> * <li> * For simplicity, we assume the given map is bounded with a closed boundary. * There is no need to check this point. * </li> * <li> * Example maps can be found in \"src/main/resources\". * </li> * * @param mapText The string representation. * @return The parsed GameMap object. * @throws IllegalArgumentException if undo limit is negative but not -1. * @throws IllegalArgumentException if there are multiple same upper-case letters, i.e., one player can only exist at one position. * @throws IllegalArgumentException if there are no players in the map. * @throws IllegalArgumentException if the number of boxes is not equal to the number of box destinations. * @throws IllegalArgumentException if there are boxes whose {@link Box#getPlayerId()} public GameState(@NotNull GameMap map) { // TODO currentMap = map; mapCheckpoints = new ArrayList<>(); mapCheckpoints.add(map.getMapSnapshot()); } public void putEntity(Position position, Entity entity) { // TODO map.get(position.y()).set(position.x(), entity); } public Empty() {} public @Nullable Entity getEntity(@NotNull Position position) { // TODO if ((position.x()) > currentMap.getMaxWidth() - 1 || (position.y()) > currentMap.getMaxHeight()- 1 || (position.x()) < 0|| (position.y()) < 0) { this.errorMsg = \"position out of bound\"; return null; } return currentMap.getEntity(position); } /** * Get all box destination positions as a set in the game map. * This should be the same as that in {@link GameMap}",
        "label": "F"
    },
    "942": {
        "dataset": "COMP 3021",
        "project": "yysze",
        "bug_id": "39",
        "T": "void testUndoWhenThereIsMoveButNoCheckpoint() { final var gameState = new GameState(TestHelper.parseGameMap(\"\"\" 233 ###### #A.a@# #..a@# ###### \"\"\" )); gameState.move(Position.of(1, 1), Position.of(2, 1)); gameState.undo(); }",
        "C": "public GameState(@NotNull GameMap map) { // TODO currentMap = map; mapCheckpoints = new ArrayList<>(); mapCheckpoints.add(map.getMapSnapshot()); } public void move(Position from, Position to) { // TODO currentMap.putEntity(to, currentMap.getEntity(from)); if (currentMap.getDestinations().contains(from)) { currentMap.putEntity(from, new Empty(true)); } else { currentMap.putEntity(from, new Empty(false)); } } /** * Record a checkpoint of the game state, including: * <li>All current positions of entities in the game map.</li> * <li>Current undo quota</li> * <p> * Checkpoint is used in {@link GameState#undo()} public static @NotNull Position of(int x, int y) { return new Position(x, y); } public void undo() { // TODO if (mapCheckpoints.size() == 1) { setErrorMsg(\"You are at first checkpoint already\"); } else if (currentMap.getUndoLimit().isPresent() && currentMap.getUndoLimit().get() == 0) { setErrorMsg(\"You have run out of your undo quota.\"); } else if (currentMap.getUndoLimit().isEmpty()) { currentMap.setMapSnapshot(mapCheckpoints.get(mapCheckpoints.size() - 2)); this.popCheckPoint(); } else { currentMap.deductUndoLimit(); currentMap.setMapSnapshot(mapCheckpoints.get(mapCheckpoints.size() - 2)); this.popCheckPoint(); } } /** * Get the maximum width of the game map. * This should be the same as that in {@link GameMap}",
        "label": "P"
    },
    "943": {
        "dataset": "COMP 3021",
        "project": "yysze",
        "bug_id": "40",
        "T": "void testGameExit() { final var gameState = mock(GameState.class); final var inputEngine = mock(TerminalInputEngine.class); final var renderingEngine = mock(TerminalRenderingEngine.class); when(gameState.isWin()).thenReturn(false, false, false); when(inputEngine.fetchAction()) .thenReturn(new InvalidInput(0, \"\"), new InvalidInput(0, \"\"), new Exit(0)); final var game = new TerminalSokobanGame(gameState, inputEngine, renderingEngine); game.run(); verify(renderingEngine, atLeastOnce()).message(any()); }",
        "C": "public InvalidInput(int initiator, @NotNull String message) { super(initiator); this.message = message; } public Exit(int initiator) { super(initiator); } public TerminalSokobanGame(GameState gameState, TerminalInputEngine inputEngine, TerminalRenderingEngine renderingEngine) { super(gameState); this.inputEngine = inputEngine; this.renderingEngine = renderingEngine; // TODO // Check the number of players if (gameState.getAllPlayerPositions().size() > 2) { throw new IllegalArgumentException(\"Game only support at most two players.\"); } } public void run() { boolean isExit = false; // TODO renderingEngine.message(\"\"); renderingEngine.message(\"Sokoban game is ready.\"); renderingEngine.render(state); renderingEngine.message(\"\"); if (state.getUndoQuota() != null && state.getUndoQuota().isPresent()) { renderingEngine.message(\"Undo Quota: \" + state.getUndoQuota().get().toString()); } else { renderingEngine.message(\"Undo Quota: infinity\"); } renderingEngine.message(\">>>\"); while (!isExit && !shouldStop()) { Action currentAction = inputEngine.fetchAction(); if (currentAction instanceof Exit) { isExit = true; renderingEngine.render(state); renderingEngine.message(\"\"); renderingEngine.message(\"Game exits.\"); } else { processAction(currentAction); if (state.getErrorMsg() != \"normal\") { renderingEngine.message(state.getErrorMsg()); } renderingEngine.render(state); renderingEngine.message(\"\"); if (state.getUndoQuota() != null && state.getUndoQuota().isPresent()) { renderingEngine.message(\"Undo Quota: \" + state.getUndoQuota().get().toString()); } else { renderingEngine.message(\"Undo Quota: infinity\"); } renderingEngine.message(\">>>\"); if (state.isWin()) { renderingEngine.message(\"You win!\"); } state.setErrorMsg(\"normal\"); } } }",
        "label": "P"
    },
    "944": {
        "dataset": "COMP 3021",
        "project": "yysze",
        "bug_id": "41",
        "T": "void testGameWin() { final var gameState = mock(GameState.class); final var inputEngine = mock(TerminalInputEngine.class); final var renderingEngine = mock(TerminalRenderingEngine.class); when(gameState.isWin()).thenReturn(false, false, false, true); when(inputEngine.fetchAction()) .thenReturn(new InvalidInput(0, \"\")); final var game = new TerminalSokobanGame(gameState, inputEngine, renderingEngine); game.run(); verify(gameState, atLeastOnce()).isWin(); verify(renderingEngine, atLeastOnce()).message(any()); }",
        "C": "public InvalidInput(int initiator, @NotNull String message) { super(initiator); this.message = message; } public TerminalSokobanGame(GameState gameState, TerminalInputEngine inputEngine, TerminalRenderingEngine renderingEngine) { super(gameState); this.inputEngine = inputEngine; this.renderingEngine = renderingEngine; // TODO // Check the number of players if (gameState.getAllPlayerPositions().size() > 2) { throw new IllegalArgumentException(\"Game only support at most two players.\"); } } public void run() { boolean isExit = false; // TODO renderingEngine.message(\"\"); renderingEngine.message(\"Sokoban game is ready.\"); renderingEngine.render(state); renderingEngine.message(\"\"); if (state.getUndoQuota() != null && state.getUndoQuota().isPresent()) { renderingEngine.message(\"Undo Quota: \" + state.getUndoQuota().get().toString()); } else { renderingEngine.message(\"Undo Quota: infinity\"); } renderingEngine.message(\">>>\"); while (!isExit && !shouldStop()) { Action currentAction = inputEngine.fetchAction(); if (currentAction instanceof Exit) { isExit = true; renderingEngine.render(state); renderingEngine.message(\"\"); renderingEngine.message(\"Game exits.\"); } else { processAction(currentAction); if (state.getErrorMsg() != \"normal\") { renderingEngine.message(state.getErrorMsg()); } renderingEngine.render(state); renderingEngine.message(\"\"); if (state.getUndoQuota() != null && state.getUndoQuota().isPresent()) { renderingEngine.message(\"Undo Quota: \" + state.getUndoQuota().get().toString()); } else { renderingEngine.message(\"Undo Quota: infinity\"); } renderingEngine.message(\">>>\"); if (state.isWin()) { renderingEngine.message(\"You win!\"); } state.setErrorMsg(\"normal\"); } } }",
        "label": "P"
    },
    "945": {
        "dataset": "COMP 3021",
        "project": "yysze",
        "bug_id": "42",
        "T": "void testMoreThanTwoPlayers() { final var gameState = mock(GameState.class); final var inputEngine = mock(TerminalInputEngine.class); final var renderingEngine = mock(TerminalRenderingEngine.class); when(gameState.getAllPlayerPositions()).thenReturn(new HashSet<>(Arrays.asList(Position.of(1, 1), Position.of(1, 2), Position.of(1, 3)))); }",
        "C": "public static @NotNull Position of(int x, int y) { return new Position(x, y); }",
        "label": "P"
    },
    "946": {
        "dataset": "COMP 3021",
        "project": "ppusitdhikul",
        "bug_id": "0",
        "T": "void moveUp() { Position.of(233, 232), new Move.Up(-1).nextPosition(pos) ); }",
        "C": "public static @NotNull Position of(int x, int y) { return new Position(x, y); } public Up(int initiator) { super(initiator); }",
        "label": "P"
    },
    "947": {
        "dataset": "COMP 3021",
        "project": "ppusitdhikul",
        "bug_id": "1",
        "T": "void moveDown() { Position.of(233, 234), new Move.Down(-1).nextPosition(pos) ); }",
        "C": "public static @NotNull Position of(int x, int y) { return new Position(x, y); } public Down(int initiator) { super(initiator); }",
        "label": "P"
    },
    "948": {
        "dataset": "COMP 3021",
        "project": "ppusitdhikul",
        "bug_id": "2",
        "T": "void moveRight() { Position.of(234, 233), new Move.Right(-1).nextPosition(pos) ); }",
        "C": "public static @NotNull Position of(int x, int y) { return new Position(x, y); } public Right(int initiator) { super(initiator); }",
        "label": "P"
    },
    "949": {
        "dataset": "COMP 3021",
        "project": "ppusitdhikul",
        "bug_id": "3",
        "T": "void testExceedingUndoQuota() { final var gameState = mock(GameState.class); when(gameState.getPlayerPositionById(anyInt())).thenReturn(Position.of(0, 0)); when(gameState.getUndoQuota()).thenReturn(Optional.of(0)); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Undo(0)); }",
        "C": "public Undo(int initiator) { super(initiator); }",
        "label": "P"
    },
    "950": {
        "dataset": "COMP 3021",
        "project": "ppusitdhikul",
        "bug_id": "4",
        "T": "void testExit() { final var gameState = mock(GameState.class); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Exit(0)); }",
        "C": "public Exit(int initiator) { super(initiator); }",
        "label": "F"
    },
    "951": {
        "dataset": "COMP 3021",
        "project": "ppusitdhikul",
        "bug_id": "5",
        "T": "void testUndoUnlimited() { final var gameState = mock(GameState.class); when(gameState.getPlayerPositionById(anyInt())).thenReturn(Position.of(0, 0)); when(gameState.getUndoQuota()).thenReturn(Optional.empty()); final var game = new SokobanGameForTesting(gameState); for (int i = 0; i < 10000; i++) { final var result = game.feedActionForProcessing(new Undo(0)); } verify(gameState, times(10000)).undo(); }",
        "C": "public TerminalRenderingEngine(PrintStream outputSteam) { this.outputSteam = outputSteam; } public Undo(int initiator) { super(initiator); }",
        "label": "P"
    },
    "952": {
        "dataset": "COMP 3021",
        "project": "ppusitdhikul",
        "bug_id": "6",
        "T": "void testPushOtherPlayerBox() { String mapText = \"\"\" 233 ###### #AB.@# #b.a.# #@...# ###### \"\"\"; final var testMap = TestHelper.parseGameMap(mapText); final var gameState = spy(new GameState(testMap)); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Move.Down(0)); verify(gameState, never()).move(any(), any()); }",
        "C": "public GameState(@NotNull GameMap map) { // TODO this.map = map; this.undoLeft = map.getUndoLimit().get(); this.players = map.getPlayers(); this.boxes = map.getBoxes(); this.space = map.getAll(); checkpoint(); } public Down(int initiator) { super(initiator); }",
        "label": "P"
    },
    "953": {
        "dataset": "COMP 3021",
        "project": "ppusitdhikul",
        "bug_id": "7",
        "T": "void testMoveNonExistingPlayer() { String mapText = \"\"\" 233 ###### #A..@# #a...# ##...# ###### \"\"\"; final var testMap = TestHelper.parseGameMap(mapText); final var gameState = spy(new GameState(testMap)); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Move.Down(23)); }",
        "C": "public GameState(@NotNull GameMap map) { // TODO this.map = map; this.undoLeft = map.getUndoLimit().get(); this.players = map.getPlayers(); this.boxes = map.getBoxes(); this.space = map.getAll(); checkpoint(); } public Down(int initiator) { super(initiator); }",
        "label": "P"
    },
    "954": {
        "dataset": "COMP 3021",
        "project": "ppusitdhikul",
        "bug_id": "8",
        "T": "void testCheckpointWhenNeed() { final var gameState = spy(new GameState(TestHelper.parseGameMap(\"\"\" 233 ###### #.Aa@# #..a@# ###### \"\"\" ))); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Move.Right(0)); verify(gameState, times(1)).checkpoint(); }",
        "C": "public GameState(@NotNull GameMap map) { // TODO this.map = map; this.undoLeft = map.getUndoLimit().get(); this.players = map.getPlayers(); this.boxes = map.getBoxes(); this.space = map.getAll(); checkpoint(); } public Right(int initiator) { super(initiator); }",
        "label": "P"
    },
    "955": {
        "dataset": "COMP 3021",
        "project": "ppusitdhikul",
        "bug_id": "9",
        "T": "void testPushBoxAgainstWall() { String mapText = \"\"\" 233 ###### #A..@# #a...# ##...# ###### \"\"\"; final var testMap = TestHelper.parseGameMap(mapText); final var gameState = spy(new GameState(testMap)); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Move.Down(0)); verify(gameState, never()).move(any(), any()); }",
        "C": "public GameState(@NotNull GameMap map) { // TODO this.map = map; this.undoLeft = map.getUndoLimit().get(); this.players = map.getPlayers(); this.boxes = map.getBoxes(); this.space = map.getAll(); checkpoint(); } public Down(int initiator) { super(initiator); }",
        "label": "P"
    },
    "956": {
        "dataset": "COMP 3021",
        "project": "ppusitdhikul",
        "bug_id": "10",
        "T": "void testCheckpointWhenNotNeed() { final var gameState = spy(new GameState(TestHelper.parseGameMap(\"\"\" 233 ###### #A.a@# #..a@# ###### \"\"\" ))); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Move.Right(0)); verify(gameState, never()).checkpoint(); } private static class SokobanGameForTesting extends AbstractSokobanGame { protected SokobanGameForTesting(GameState gameState) { super(gameState); } @Override public void run() { } public ActionResult feedActionForProcessing(Action action) { return processAction(action); } }",
        "C": "public GameState(@NotNull GameMap map) { // TODO this.map = map; this.undoLeft = map.getUndoLimit().get(); this.players = map.getPlayers(); this.boxes = map.getBoxes(); this.space = map.getAll(); checkpoint(); } public Right(int initiator) { super(initiator); } public void run() { // TODO ActionResult result = processAction(inputEngine.fetchAction()); Optional<Integer> undo = state.getUndoQuota(); renderingEngine.render(state); if(shouldStop()){ renderingEngine.message(\"Game exits.\"); renderingEngine.message(\"You win.\"); return; } if(result.getAction() instanceof Exit){ renderingEngine.message(\"Game exits.\"); return; } if(result instanceof ActionResult.Failed){ renderingEngine.message(((ActionResult.Failed) result).getReason()); } renderingEngine.message(String.format(\"Undo Quota: %s\",(undo.isPresent())?undo.get():\"Unlimited\")); renderingEngine.message(\">>>\"); run(); } protected ActionResult processAction(@NotNull Action action) { // TODO // state.getUndoQuota(); if (action instanceof Exit) { return new ActionResult.Success(action); } else if (action instanceof InvalidInput) { return new ActionResult.Failed(action, \"Invalid Input\"); } else if (action instanceof Undo) { Optional<Integer> undo = state.getUndoQuota(); if (undo.isPresent() && undo.get() <= 0) return new ActionResult.Failed(action, \"You have run out of your undo quota.\"); state.undo(); return new ActionResult.Success(action); } else if (action instanceof Move) { Position playerPos = state.getPlayerPositionById(action.getInitiator()); if(playerPos == null) return new ActionResult.Failed(action,\"Player not found.\"); Move current = (Move) action; Position pos = state.getPlayerPositionById(current.getInitiator()); HashMap<Position, Entity> space = state.getSpace(); if (current instanceof Move.Up) { Position newPos = new Position(pos.x(), pos.y() - 1); Entity item = space.get(newPos); if (item instanceof Wall || item == null) { return new ActionResult.Failed(action, \"You hit a wall.\"); } else if (item instanceof Player) { return new ActionResult.Failed(action, \"You hit another player.\"); } if (item instanceof Box) { Box unknownBox = (Box) item; if(unknownBox.getPlayerId() != action.getInitiator()) return new ActionResult.Failed(action,\"You cannot move other players' boxes.\"); Position newBoxPos = new Position(newPos.x(), newPos.y() - 1); Entity newBoxItem = space.get(newBoxPos); if (newBoxItem instanceof Empty) { state.move(newPos, newBoxPos); state.move(pos, newPos); state.checkpoint(); return new ActionResult.Success(action); } return new ActionResult.Failed(action, \"Failed to push the box.\"); } else if (item instanceof Empty) { state.move(pos, newPos); return new ActionResult.Success(action); } } else if (current instanceof Move.Down) { Position newPos = new Position(pos.x(), pos.y() + 1); Entity item = space.get(newPos); if (item instanceof Wall || item == null) { return new ActionResult.Failed(action, \"You hit a wall.\"); } else if (item instanceof Player) { return new ActionResult.Failed(action, \"You hit another player.\"); } if (item instanceof Box) { Box unknownBox = (Box) item; if(unknownBox.getPlayerId() != action.getInitiator()) return new ActionResult.Failed(action,\"You cannot move other players' boxes.\"); Position newBoxPos = new Position(newPos.x(), newPos.y() + 1); Entity newBoxItem = space.get(newBoxPos); if (newBoxItem instanceof Empty) { state.move(newPos, newBoxPos); state.move(pos, newPos); state.checkpoint(); return new ActionResult.Success(action); } return new ActionResult.Failed(action, \"Failed to push the box.\"); } else if (item instanceof Empty) { state.move(pos, newPos); return new ActionResult.Success(action); } } else if (current instanceof Move.Left) { Position newPos = new Position(pos.x() - 1, pos.y()); Entity item = space.get(newPos); if (item instanceof Wall || item == null) { return new ActionResult.Failed(action, \"You hit a wall.\"); } else if (item instanceof Player) { return new ActionResult.Failed(action, \"You hit another player.\"); } if (item instanceof Box) { Box unknownBox = (Box) item; if(unknownBox.getPlayerId() != action.getInitiator()) return new ActionResult.Failed(action,\"You cannot move other players' boxes.\"); Position newBoxPos = new Position(newPos.x() - 1, newPos.y()); Entity newBoxItem = space.get(newBoxPos); if (newBoxItem instanceof Empty) { state.move(newPos, newBoxPos); state.move(pos, newPos); state.checkpoint(); return new ActionResult.Success(action); } return new ActionResult.Failed(action, \"Failed to push the box.\"); } else if (item instanceof Empty) { state.move(pos, newPos); return new ActionResult.Success(action); } } else { Position newPos = new Position(pos.x() + 1, pos.y()); Entity item = space.get(newPos); if (item instanceof Wall || item == null) { return new ActionResult.Failed(action, \"You hit a wall.\"); } else if (item instanceof Player) { return new ActionResult.Failed(action, \"You hit another player.\"); } if (item instanceof Box) { Box unknownBox = (Box) item; if(unknownBox.getPlayerId() != action.getInitiator()) return new ActionResult.Failed(action,\"You cannot move other players' boxes.\"); Position newBoxPos = new Position(newPos.x() + 1, newPos.y()); Entity newBoxItem = space.get(newBoxPos); if (newBoxItem instanceof Empty) { state.move(newPos, newBoxPos); state.move(pos, newPos); state.checkpoint(); return new ActionResult.Success(action); } return new ActionResult.Failed(action, \"Failed to push the box.\"); } else if (item instanceof Empty) { state.move(pos, newPos); return new ActionResult.Success(action); } } } else { return new ActionResult.Failed(action, \"Invalid Input.\"); } return new ActionResult.Failed(action,\"Invalid Input.\"); }",
        "label": "P"
    },
    "957": {
        "dataset": "COMP 3021",
        "project": "ppusitdhikul",
        "bug_id": "11",
        "T": "void testHitAnotherPlayer() { String mapText = \"\"\" 233 ###### #A..@# #B...# #ab.@# ###### \"\"\"; final var testMap = TestHelper.parseGameMap(mapText); final var gameState = spy(new GameState(testMap)); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Move.Down(0)); verify(gameState, never()).move(any(), any()); }",
        "C": "public GameState(@NotNull GameMap map) { // TODO this.map = map; this.undoLeft = map.getUndoLimit().get(); this.players = map.getPlayers(); this.boxes = map.getBoxes(); this.space = map.getAll(); checkpoint(); } public Down(int initiator) { super(initiator); }",
        "label": "P"
    },
    "958": {
        "dataset": "COMP 3021",
        "project": "ppusitdhikul",
        "bug_id": "12",
        "T": "void testUndoWithinQuota() { final var gameState = mock(GameState.class); when(gameState.getPlayerPositionById(anyInt())).thenReturn(Position.of(0, 0)); when(gameState.getUndoQuota()).thenReturn(Optional.of(1)); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Undo(0)); verify(gameState, times(1)).undo(); }",
        "C": "public Undo(int initiator) { super(initiator); }",
        "label": "P"
    },
    "959": {
        "dataset": "COMP 3021",
        "project": "ppusitdhikul",
        "bug_id": "13",
        "T": "void testInvalidInput() { final var game = new SokobanGameForTesting(mock(GameState.class)); final var message = String.valueOf(new Random().nextLong()); final var action = new InvalidInput(-1, message); final var result = game.feedActionForProcessing(action); }",
        "C": "public InvalidInput(int initiator, @NotNull String message) { super(initiator); this.message = message; }",
        "label": "P"
    },
    "960": {
        "dataset": "COMP 3021",
        "project": "ppusitdhikul",
        "bug_id": "14",
        "T": "void testUndoLimitParsing() { final var gameMap = TestHelper.parseGameMap(rectangularMap); }",
        "C": "",
        "label": "P"
    },
    "961": {
        "dataset": "COMP 3021",
        "project": "ppusitdhikul",
        "bug_id": "15",
        "T": "void testWidthForNonRectangularMap() { final var gameMap = TestHelper.parseGameMap(nonRectangularMap); }",
        "C": "",
        "label": "P"
    },
    "962": {
        "dataset": "COMP 3021",
        "project": "ppusitdhikul",
        "bug_id": "16",
        "T": "void testTwoPlayersMap() { final var twoPlayersMap = \"\"\" 233 ###### #A..@# #..B@# #....# #.a..# #..b.# ###### \"\"\"; final var gameMap = TestHelper.parseGameMap(twoPlayersMap); final var playerIds = gameMap.getPlayerIds(); final var expectedIds = new HashSet<Integer>(); expectedIds.add(0); expectedIds.add(1); }",
        "C": "public Set<Integer> getPlayerIds() { // TODO HashSet<Integer> playerId = new HashSet<>(); for (Object val : players.values()) { Player play = (Player) val; playerId.add(play.getId()); } return playerId; }",
        "label": "F"
    },
    "963": {
        "dataset": "COMP 3021",
        "project": "ppusitdhikul",
        "bug_id": "17",
        "T": "void testMapWithoutPlayer() { final var invalidMap = \"\"\" 233 ### #.# ### \"\"\"; } // @Tag(TestKind.HIDDEN) // @Test // void testUnmatchedPlayersAndBoxes() { // final var invalidMap = \"\"\" // 233 // ###### // #A..@# // #...@# // #a.b@# // #.a.@# // #..a.# // ###### // \"\"\"; // assertThrowsExactly(IllegalArgumentException.class, () -> TestHelper.parseGameMap(invalidMap)); // }",
        "C": "public TerminalRenderingEngine(PrintStream outputSteam) { this.outputSteam = outputSteam; }",
        "label": "F"
    },
    "964": {
        "dataset": "COMP 3021",
        "project": "ppusitdhikul",
        "bug_id": "18",
        "T": "void testManyPlayersMap() { final var manyPlayersMap = \"\"\" 233 ###### #A.P@@# #vCB@@# #.cpD@# #Ga.d@# #g.bV@# ###### \"\"\"; final var gameMap = TestHelper.parseGameMap(manyPlayersMap); final var playerIds = gameMap.getPlayerIds(); final var expectedIds = new HashSet<>(Arrays.asList( 0, 'P' - 'A', 'C' - 'A', 'B' - 'A', 'D' - 'A', 'G' - 'A', 'V' - 'A' )); }",
        "C": "public Set<Integer> getPlayerIds() { // TODO HashSet<Integer> playerId = new HashSet<>(); for (Object val : players.values()) { Player play = (Player) val; playerId.add(play.getId()); } return playerId; }",
        "label": "F"
    },
    "965": {
        "dataset": "COMP 3021",
        "project": "ppusitdhikul",
        "bug_id": "19",
        "T": "void testHeightForNonRectangularMap() { final var gameMap = TestHelper.parseGameMap(nonRectangularMap); }",
        "C": "",
        "label": "P"
    },
    "966": {
        "dataset": "COMP 3021",
        "project": "ppusitdhikul",
        "bug_id": "20",
        "T": "void testDuplicatedPlayers() { final var invalidMap = \"\"\" 233 ###### #A..@# #..A@# #....# #.a..# #..b.# ###### \"\"\"; }",
        "C": "",
        "label": "P"
    },
    "967": {
        "dataset": "COMP 3021",
        "project": "ppusitdhikul",
        "bug_id": "21",
        "T": "void testParseMapWithoutUndoLimit() { final var invalidMap = String.join(\"\\n\", rectangularMap.lines().skip(1).toList()); }",
        "C": "",
        "label": "P"
    },
    "968": {
        "dataset": "COMP 3021",
        "project": "ppusitdhikul",
        "bug_id": "22",
        "T": "void testInsufficientDestinations() { final var invalidMap = \"\"\" 233 ###### #A..@# #...@# #a...# #.a..# #..a.# ###### \"\"\"; }",
        "C": "",
        "label": "P"
    },
    "969": {
        "dataset": "COMP 3021",
        "project": "ppusitdhikul",
        "bug_id": "23",
        "T": "void testSuperLargeMap() { try { new GameMap(Integer.MAX_VALUE, Integer.MAX_VALUE, Collections.emptySet(), 0); } catch (OutOfMemoryError e) { throw new RuntimeException(e); } }); }",
        "C": "public GameMap(int maxWidth, int maxHeight, Set<Position> destinations, int undoLimit) { // TODO this.maxWidth = maxWidth; this.maxHeight = maxHeight; this.destinations = destinations; this.undoLimit = undoLimit; } /** * Parses the map from a string representation. * The first line is undo limit. * Starting from the second line, the game map is represented as follows, * <li># represents a {@link Wall}</li> * <li>@ represents a box destination.</li> * <li>Any upper-case letter represents a {@link Player}.</li> * <li> * Any lower-case letter represents a {@link Box} that is only movable by the player with the corresponding upper-case letter. * For instance, box \"a\" can only be moved by player \"A\" and not movable by player \"B\". * </li> * <li>. represents an {@link Empty} position in the map, meaning there is no player or box currently at this position.</li> * <p> * Notes: * <li> * There can be at most 26 players. * All implementations of classes in the hk.ust.comp3021.game package should support up to 26 players. * </li> * <li> * For simplicity, we assume the given map is bounded with a closed boundary. * There is no need to check this point. * </li> * <li> * Example maps can be found in \"src/main/resources\". * </li> * * @param mapText The string representation. * @return The parsed GameMap object. * @throws IllegalArgumentException if undo limit is negative but not -1. * @throws IllegalArgumentException if there are multiple same upper-case letters, i.e., one player can only exist at one position. * @throws IllegalArgumentException if there are no players in the map. * @throws IllegalArgumentException if the number of boxes is not equal to the number of box destinations. * @throws IllegalArgumentException if there are boxes whose {@link Box#getPlayerId()} public TerminalRenderingEngine(PrintStream outputSteam) { this.outputSteam = outputSteam; }",
        "label": "P"
    },
    "970": {
        "dataset": "COMP 3021",
        "project": "ppusitdhikul",
        "bug_id": "24",
        "T": "void testInvalidUndoLimit() { final var invalidMap = \"\"\" -233 ###### #A..@# #...@# #a.b@# #.a.@# #..a.# ###### \"\"\"; }",
        "C": "",
        "label": "P"
    },
    "971": {
        "dataset": "COMP 3021",
        "project": "ppusitdhikul",
        "bug_id": "25",
        "T": "void testEmptyMap() { final var invalidMap = \"\"; }",
        "C": "",
        "label": "P"
    },
    "972": {
        "dataset": "COMP 3021",
        "project": "ppusitdhikul",
        "bug_id": "26",
        "T": "void testMove(String input, String name, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); } private InputStream fixValueStream(String content) { final var bytes = content.getBytes(StandardCharsets.UTF_8); return new ByteArrayInputStream(bytes); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine(); // TODO switch (inputLine) { case \"exit\": return new Exit(0); case \"A\": case \"a\": return new Move.Left(0); case \"S\": case \"s\": return new Move.Down(0); case \"W\": case \"w\": return new Move.Up(0); case \"D\": case \"d\": return new Move.Right(0); case \"H\": case \"h\": return new Move.Left(1); case \"J\": case \"j\": return new Move.Down(1); case \"K\": case \"k\": return new Move.Up(1); case \"L\": case \"l\": return new Move.Right(1); case \"U\": case \"u\": return new Undo(0); default: return new InvalidInput(0, \"invalidKey\"); } }",
        "label": "P"
    },
    "973": {
        "dataset": "COMP 3021",
        "project": "ppusitdhikul",
        "bug_id": "27",
        "T": "void testMove(String input, String name, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); } private InputStream fixValueStream(String content) { final var bytes = content.getBytes(StandardCharsets.UTF_8); return new ByteArrayInputStream(bytes); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine(); // TODO switch (inputLine) { case \"exit\": return new Exit(0); case \"A\": case \"a\": return new Move.Left(0); case \"S\": case \"s\": return new Move.Down(0); case \"W\": case \"w\": return new Move.Up(0); case \"D\": case \"d\": return new Move.Right(0); case \"H\": case \"h\": return new Move.Left(1); case \"J\": case \"j\": return new Move.Down(1); case \"K\": case \"k\": return new Move.Up(1); case \"L\": case \"l\": return new Move.Right(1); case \"U\": case \"u\": return new Undo(0); default: return new InvalidInput(0, \"invalidKey\"); } }",
        "label": "P"
    },
    "974": {
        "dataset": "COMP 3021",
        "project": "ppusitdhikul",
        "bug_id": "28",
        "T": "void testMove(String input, String name, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); } private InputStream fixValueStream(String content) { final var bytes = content.getBytes(StandardCharsets.UTF_8); return new ByteArrayInputStream(bytes); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine(); // TODO switch (inputLine) { case \"exit\": return new Exit(0); case \"A\": case \"a\": return new Move.Left(0); case \"S\": case \"s\": return new Move.Down(0); case \"W\": case \"w\": return new Move.Up(0); case \"D\": case \"d\": return new Move.Right(0); case \"H\": case \"h\": return new Move.Left(1); case \"J\": case \"j\": return new Move.Down(1); case \"K\": case \"k\": return new Move.Up(1); case \"L\": case \"l\": return new Move.Right(1); case \"U\": case \"u\": return new Undo(0); default: return new InvalidInput(0, \"invalidKey\"); } }",
        "label": "P"
    },
    "975": {
        "dataset": "COMP 3021",
        "project": "ppusitdhikul",
        "bug_id": "29",
        "T": "void testMove(String input, String name, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); } private InputStream fixValueStream(String content) { final var bytes = content.getBytes(StandardCharsets.UTF_8); return new ByteArrayInputStream(bytes); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine(); // TODO switch (inputLine) { case \"exit\": return new Exit(0); case \"A\": case \"a\": return new Move.Left(0); case \"S\": case \"s\": return new Move.Down(0); case \"W\": case \"w\": return new Move.Up(0); case \"D\": case \"d\": return new Move.Right(0); case \"H\": case \"h\": return new Move.Left(1); case \"J\": case \"j\": return new Move.Down(1); case \"K\": case \"k\": return new Move.Up(1); case \"L\": case \"l\": return new Move.Right(1); case \"U\": case \"u\": return new Undo(0); default: return new InvalidInput(0, \"invalidKey\"); } }",
        "label": "P"
    },
    "976": {
        "dataset": "COMP 3021",
        "project": "ppusitdhikul",
        "bug_id": "30",
        "T": "void testMove(String input, String name, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); } private InputStream fixValueStream(String content) { final var bytes = content.getBytes(StandardCharsets.UTF_8); return new ByteArrayInputStream(bytes); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine(); // TODO switch (inputLine) { case \"exit\": return new Exit(0); case \"A\": case \"a\": return new Move.Left(0); case \"S\": case \"s\": return new Move.Down(0); case \"W\": case \"w\": return new Move.Up(0); case \"D\": case \"d\": return new Move.Right(0); case \"H\": case \"h\": return new Move.Left(1); case \"J\": case \"j\": return new Move.Down(1); case \"K\": case \"k\": return new Move.Up(1); case \"L\": case \"l\": return new Move.Right(1); case \"U\": case \"u\": return new Undo(0); default: return new InvalidInput(0, \"invalidKey\"); } }",
        "label": "P"
    },
    "977": {
        "dataset": "COMP 3021",
        "project": "ppusitdhikul",
        "bug_id": "31",
        "T": "void testMove(String input, String name, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); } private InputStream fixValueStream(String content) { final var bytes = content.getBytes(StandardCharsets.UTF_8); return new ByteArrayInputStream(bytes); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine(); // TODO switch (inputLine) { case \"exit\": return new Exit(0); case \"A\": case \"a\": return new Move.Left(0); case \"S\": case \"s\": return new Move.Down(0); case \"W\": case \"w\": return new Move.Up(0); case \"D\": case \"d\": return new Move.Right(0); case \"H\": case \"h\": return new Move.Left(1); case \"J\": case \"j\": return new Move.Down(1); case \"K\": case \"k\": return new Move.Up(1); case \"L\": case \"l\": return new Move.Right(1); case \"U\": case \"u\": return new Undo(0); default: return new InvalidInput(0, \"invalidKey\"); } }",
        "label": "P"
    },
    "978": {
        "dataset": "COMP 3021",
        "project": "ppusitdhikul",
        "bug_id": "32",
        "T": "void testMove(String input, String name, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); } private InputStream fixValueStream(String content) { final var bytes = content.getBytes(StandardCharsets.UTF_8); return new ByteArrayInputStream(bytes); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine(); // TODO switch (inputLine) { case \"exit\": return new Exit(0); case \"A\": case \"a\": return new Move.Left(0); case \"S\": case \"s\": return new Move.Down(0); case \"W\": case \"w\": return new Move.Up(0); case \"D\": case \"d\": return new Move.Right(0); case \"H\": case \"h\": return new Move.Left(1); case \"J\": case \"j\": return new Move.Down(1); case \"K\": case \"k\": return new Move.Up(1); case \"L\": case \"l\": return new Move.Right(1); case \"U\": case \"u\": return new Undo(0); default: return new InvalidInput(0, \"invalidKey\"); } }",
        "label": "P"
    },
    "979": {
        "dataset": "COMP 3021",
        "project": "ppusitdhikul",
        "bug_id": "33",
        "T": "void testMove(String input, String name, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); } private InputStream fixValueStream(String content) { final var bytes = content.getBytes(StandardCharsets.UTF_8); return new ByteArrayInputStream(bytes); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine(); // TODO switch (inputLine) { case \"exit\": return new Exit(0); case \"A\": case \"a\": return new Move.Left(0); case \"S\": case \"s\": return new Move.Down(0); case \"W\": case \"w\": return new Move.Up(0); case \"D\": case \"d\": return new Move.Right(0); case \"H\": case \"h\": return new Move.Left(1); case \"J\": case \"j\": return new Move.Down(1); case \"K\": case \"k\": return new Move.Up(1); case \"L\": case \"l\": return new Move.Right(1); case \"U\": case \"u\": return new Undo(0); default: return new InvalidInput(0, \"invalidKey\"); } }",
        "label": "P"
    },
    "980": {
        "dataset": "COMP 3021",
        "project": "ppusitdhikul",
        "bug_id": "34",
        "T": "void testUndo(String input, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine(); // TODO switch (inputLine) { case \"exit\": return new Exit(0); case \"A\": case \"a\": return new Move.Left(0); case \"S\": case \"s\": return new Move.Down(0); case \"W\": case \"w\": return new Move.Up(0); case \"D\": case \"d\": return new Move.Right(0); case \"H\": case \"h\": return new Move.Left(1); case \"J\": case \"j\": return new Move.Down(1); case \"K\": case \"k\": return new Move.Up(1); case \"L\": case \"l\": return new Move.Right(1); case \"U\": case \"u\": return new Undo(0); default: return new InvalidInput(0, \"invalidKey\"); } }",
        "label": "P"
    },
    "981": {
        "dataset": "COMP 3021",
        "project": "ppusitdhikul",
        "bug_id": "35",
        "T": "void testInvalidInput() { final var inputStream = fixValueStream(\"blah blah\"); final var inputEngine = new TerminalInputEngine(inputStream); final var action = inputEngine.fetchAction(); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine(); // TODO switch (inputLine) { case \"exit\": return new Exit(0); case \"A\": case \"a\": return new Move.Left(0); case \"S\": case \"s\": return new Move.Down(0); case \"W\": case \"w\": return new Move.Up(0); case \"D\": case \"d\": return new Move.Right(0); case \"H\": case \"h\": return new Move.Left(1); case \"J\": case \"j\": return new Move.Down(1); case \"K\": case \"k\": return new Move.Up(1); case \"L\": case \"l\": return new Move.Right(1); case \"U\": case \"u\": return new Undo(0); default: return new InvalidInput(0, \"invalidKey\"); } }",
        "label": "P"
    },
    "982": {
        "dataset": "COMP 3021",
        "project": "ppusitdhikul",
        "bug_id": "36",
        "T": "void testUndoWhenThereIsNoMove() { final var gameState = new GameState(TestHelper.parseGameMap(\"\"\" 233 ###### #A.a@# #..a@# ###### \"\"\" )); gameState.undo(); } private Entity generateEntity(int key) { return switch (key % 4) { case 0 -> new Box(0); case 1 -> new Empty(); case 2 -> new Player(0); case 3 -> new Wall(); default -> throw new ShouldNotReachException(); }; }",
        "C": "public GameState(@NotNull GameMap map) { // TODO this.map = map; this.undoLeft = map.getUndoLimit().get(); this.players = map.getPlayers(); this.boxes = map.getBoxes(); this.space = map.getAll(); checkpoint(); } public void undo() { // TODO if(undoLeft == 0) return; if(ptr == -1 || ptr == 0) return; achieved.remove(ptr--); Tale temp = achieved.get(ptr); players = (HashMap<Player, Position>) temp.getPlayers().clone(); boxes = (HashMap<Box, Position>) temp.getBoxes().clone(); space = (HashMap<Position, Entity>) temp.getSpace().clone(); if(undoLeft != -1) --undoLeft; } /** * Get the maximum width of the game map. * This should be the same as that in {@link GameMap} public TerminalRenderingEngine(PrintStream outputSteam) { this.outputSteam = outputSteam; } public Box(int playerId) { this.playerId = playerId; } public Player(int id) { this.id = id; } public ShouldNotReachException() { super(\"This branch should not be reached.\"); }",
        "label": "F"
    },
    "983": {
        "dataset": "COMP 3021",
        "project": "ppusitdhikul",
        "bug_id": "37",
        "T": "void testGetUndoUnlimited() { final var gameState = new GameState(TestHelper.parseGameMap(\"\"\" -1 ###### #.Aa@# #..a@# ###### \"\"\" )); }",
        "C": "public GameState(@NotNull GameMap map) { // TODO this.map = map; this.undoLeft = map.getUndoLimit().get(); this.players = map.getPlayers(); this.boxes = map.getBoxes(); this.space = map.getAll(); checkpoint(); }",
        "label": "P"
    },
    "984": {
        "dataset": "COMP 3021",
        "project": "ppusitdhikul",
        "bug_id": "38",
        "T": "void testMapCopying() { final var maxWidth = 2333; final var maxHeight = 2333; final var random = new Random(); final var randomEntities = Stream.generate(() -> Position.of(random.nextInt(maxWidth), random.nextInt(maxHeight))) .distinct() .limit(100) .collect(Collectors.toMap(Function.identity(), it -> generateEntity(it.x()))); final var firstPos = randomEntities.keySet().stream().findFirst(); final var gameMap = new GameMap(maxWidth, maxHeight, Collections.singleton(firstPos.get()), 233); randomEntities.forEach(gameMap::putEntity); final var gameState = new GameState(gameMap); final var randomPosition = randomEntities.keySet().stream().findAny(); gameMap.putEntity(randomPosition.get(), new Empty()); randomEntities.forEach((p, e) -> assertEquals(e, gameState.getEntity(p))); }",
        "C": "public static @NotNull Position of(int x, int y) { return new Position(x, y); } public GameMap(int maxWidth, int maxHeight, Set<Position> destinations, int undoLimit) { // TODO this.maxWidth = maxWidth; this.maxHeight = maxHeight; this.destinations = destinations; this.undoLimit = undoLimit; } /** * Parses the map from a string representation. * The first line is undo limit. * Starting from the second line, the game map is represented as follows, * <li># represents a {@link Wall}</li> * <li>@ represents a box destination.</li> * <li>Any upper-case letter represents a {@link Player}.</li> * <li> * Any lower-case letter represents a {@link Box} that is only movable by the player with the corresponding upper-case letter. * For instance, box \"a\" can only be moved by player \"A\" and not movable by player \"B\". * </li> * <li>. represents an {@link Empty} position in the map, meaning there is no player or box currently at this position.</li> * <p> * Notes: * <li> * There can be at most 26 players. * All implementations of classes in the hk.ust.comp3021.game package should support up to 26 players. * </li> * <li> * For simplicity, we assume the given map is bounded with a closed boundary. * There is no need to check this point. * </li> * <li> * Example maps can be found in \"src/main/resources\". * </li> * * @param mapText The string representation. * @return The parsed GameMap object. * @throws IllegalArgumentException if undo limit is negative but not -1. * @throws IllegalArgumentException if there are multiple same upper-case letters, i.e., one player can only exist at one position. * @throws IllegalArgumentException if there are no players in the map. * @throws IllegalArgumentException if the number of boxes is not equal to the number of box destinations. * @throws IllegalArgumentException if there are boxes whose {@link Box#getPlayerId()} public GameState(@NotNull GameMap map) { // TODO this.map = map; this.undoLeft = map.getUndoLimit().get(); this.players = map.getPlayers(); this.boxes = map.getBoxes(); this.space = map.getAll(); checkpoint(); } public void putEntity(Position position, Entity entity) { // TODO map.put(position, entity); if (entity instanceof Player) { players.put((Player) entity, position); } else if (entity instanceof Box) { boxes.put((Box) entity, position); } } public @Nullable Entity getEntity(@NotNull Position position) { // TODO return space.get(position); } /** * Get all box destination positions as a set in the game map. * This should be the same as that in {@link GameMap}",
        "label": "F"
    },
    "985": {
        "dataset": "COMP 3021",
        "project": "ppusitdhikul",
        "bug_id": "39",
        "T": "void testUndoWhenThereIsMoveButNoCheckpoint() { final var gameState = new GameState(TestHelper.parseGameMap(\"\"\" 233 ###### #A.a@# #..a@# ###### \"\"\" )); gameState.move(Position.of(1, 1), Position.of(2, 1)); gameState.undo(); }",
        "C": "public GameState(@NotNull GameMap map) { // TODO this.map = map; this.undoLeft = map.getUndoLimit().get(); this.players = map.getPlayers(); this.boxes = map.getBoxes(); this.space = map.getAll(); checkpoint(); } public void move(Position from, Position to) { // TODO Entity fromEntity = space.get(from); if(fromEntity instanceof Player){ Player play = (Player) fromEntity; players.remove(play); players.put(play,to); space.put(from,new Empty()); space.put(to,play); } else if(fromEntity instanceof Box){ Box box = (Box) fromEntity; boxes.remove(box); boxes.put(box,to); space.put(from,new Empty()); space.put(to,box); } } /** * Record a checkpoint of the game state, including: * <li>All current positions of entities in the game map.</li> * <li>Current undo quota</li> * <p> * Checkpoint is used in {@link GameState#undo()} public static @NotNull Position of(int x, int y) { return new Position(x, y); } public void undo() { // TODO if(undoLeft == 0) return; if(ptr == -1 || ptr == 0) return; achieved.remove(ptr--); Tale temp = achieved.get(ptr); players = (HashMap<Player, Position>) temp.getPlayers().clone(); boxes = (HashMap<Box, Position>) temp.getBoxes().clone(); space = (HashMap<Position, Entity>) temp.getSpace().clone(); if(undoLeft != -1) --undoLeft; } /** * Get the maximum width of the game map. * This should be the same as that in {@link GameMap}",
        "label": "F"
    },
    "986": {
        "dataset": "COMP 3021",
        "project": "ppusitdhikul",
        "bug_id": "40",
        "T": "void testGameExit() { final var gameState = mock(GameState.class); final var inputEngine = mock(TerminalInputEngine.class); final var renderingEngine = mock(TerminalRenderingEngine.class); when(gameState.isWin()).thenReturn(false, false, false); when(inputEngine.fetchAction()) .thenReturn(new InvalidInput(0, \"\"), new InvalidInput(0, \"\"), new Exit(0)); final var game = new TerminalSokobanGame(gameState, inputEngine, renderingEngine); game.run(); verify(renderingEngine, atLeastOnce()).message(any()); }",
        "C": "public InvalidInput(int initiator, @NotNull String message) { super(initiator); this.message = message; } public Exit(int initiator) { super(initiator); } public TerminalSokobanGame(GameState gameState, TerminalInputEngine inputEngine, TerminalRenderingEngine renderingEngine) { super(gameState); this.inputEngine = inputEngine; this.renderingEngine = renderingEngine; // TODO // Check the number of players if(gameState.getAllPlayerPositions().size() > 2) throw new IllegalArgumentException(); Optional<Integer> undo = gameState.getUndoQuota(); renderingEngine.message(\"Sokoban game is ready.\"); renderingEngine.render(gameState); renderingEngine.message(String.format(\"Undo Quota: %s\",(undo.isPresent())?undo.get():\"Unlimited\")); renderingEngine.message(\">>>\"); } public void run() { // TODO ActionResult result = processAction(inputEngine.fetchAction()); Optional<Integer> undo = state.getUndoQuota(); renderingEngine.render(state); if(shouldStop()){ renderingEngine.message(\"Game exits.\"); renderingEngine.message(\"You win.\"); return; } if(result.getAction() instanceof Exit){ renderingEngine.message(\"Game exits.\"); return; } if(result instanceof ActionResult.Failed){ renderingEngine.message(((ActionResult.Failed) result).getReason()); } renderingEngine.message(String.format(\"Undo Quota: %s\",(undo.isPresent())?undo.get():\"Unlimited\")); renderingEngine.message(\">>>\"); run(); }",
        "label": "P"
    },
    "987": {
        "dataset": "COMP 3021",
        "project": "ppusitdhikul",
        "bug_id": "41",
        "T": "void testGameWin() { final var gameState = mock(GameState.class); final var inputEngine = mock(TerminalInputEngine.class); final var renderingEngine = mock(TerminalRenderingEngine.class); when(gameState.isWin()).thenReturn(false, false, false, true); when(inputEngine.fetchAction()) .thenReturn(new InvalidInput(0, \"\")); final var game = new TerminalSokobanGame(gameState, inputEngine, renderingEngine); game.run(); verify(gameState, atLeastOnce()).isWin(); verify(renderingEngine, atLeastOnce()).message(any()); }",
        "C": "public InvalidInput(int initiator, @NotNull String message) { super(initiator); this.message = message; } public TerminalSokobanGame(GameState gameState, TerminalInputEngine inputEngine, TerminalRenderingEngine renderingEngine) { super(gameState); this.inputEngine = inputEngine; this.renderingEngine = renderingEngine; // TODO // Check the number of players if(gameState.getAllPlayerPositions().size() > 2) throw new IllegalArgumentException(); Optional<Integer> undo = gameState.getUndoQuota(); renderingEngine.message(\"Sokoban game is ready.\"); renderingEngine.render(gameState); renderingEngine.message(String.format(\"Undo Quota: %s\",(undo.isPresent())?undo.get():\"Unlimited\")); renderingEngine.message(\">>>\"); } public void run() { // TODO ActionResult result = processAction(inputEngine.fetchAction()); Optional<Integer> undo = state.getUndoQuota(); renderingEngine.render(state); if(shouldStop()){ renderingEngine.message(\"Game exits.\"); renderingEngine.message(\"You win.\"); return; } if(result.getAction() instanceof Exit){ renderingEngine.message(\"Game exits.\"); return; } if(result instanceof ActionResult.Failed){ renderingEngine.message(((ActionResult.Failed) result).getReason()); } renderingEngine.message(String.format(\"Undo Quota: %s\",(undo.isPresent())?undo.get():\"Unlimited\")); renderingEngine.message(\">>>\"); run(); }",
        "label": "P"
    },
    "988": {
        "dataset": "COMP 3021",
        "project": "ppusitdhikul",
        "bug_id": "42",
        "T": "void testMoreThanTwoPlayers() { final var gameState = mock(GameState.class); final var inputEngine = mock(TerminalInputEngine.class); final var renderingEngine = mock(TerminalRenderingEngine.class); when(gameState.getAllPlayerPositions()).thenReturn(new HashSet<>(Arrays.asList(Position.of(1, 1), Position.of(1, 2), Position.of(1, 3)))); }",
        "C": "public static @NotNull Position of(int x, int y) { return new Position(x, y); }",
        "label": "P"
    },
    "989": {
        "dataset": "COMP 3021",
        "project": "yhngaq",
        "bug_id": "0",
        "T": "void moveUp() { Position.of(233, 232), new Move.Up(-1).nextPosition(pos) ); }",
        "C": "public static @NotNull Position of(int x, int y) { return new Position(x, y); } public Up(int initiator) { super(initiator); }",
        "label": "F"
    },
    "990": {
        "dataset": "COMP 3021",
        "project": "yhngaq",
        "bug_id": "1",
        "T": "void moveDown() { Position.of(233, 234), new Move.Down(-1).nextPosition(pos) ); }",
        "C": "public static @NotNull Position of(int x, int y) { return new Position(x, y); } public Down(int initiator) { super(initiator); }",
        "label": "F"
    },
    "991": {
        "dataset": "COMP 3021",
        "project": "yhngaq",
        "bug_id": "2",
        "T": "void moveRight() { Position.of(234, 233), new Move.Right(-1).nextPosition(pos) ); }",
        "C": "public static @NotNull Position of(int x, int y) { return new Position(x, y); } public Right(int initiator) { super(initiator); }",
        "label": "P"
    },
    "992": {
        "dataset": "COMP 3021",
        "project": "yhngaq",
        "bug_id": "3",
        "T": "void testExceedingUndoQuota() { final var gameState = mock(GameState.class); when(gameState.getPlayerPositionById(anyInt())).thenReturn(Position.of(0, 0)); when(gameState.getUndoQuota()).thenReturn(Optional.of(0)); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Undo(0)); }",
        "C": "public Undo(int initiator) { super(initiator); }",
        "label": "F"
    },
    "993": {
        "dataset": "COMP 3021",
        "project": "yhngaq",
        "bug_id": "4",
        "T": "void testExit() { final var gameState = mock(GameState.class); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Exit(0)); }",
        "C": "public Exit(int initiator) { super(initiator); }",
        "label": "F"
    },
    "994": {
        "dataset": "COMP 3021",
        "project": "yhngaq",
        "bug_id": "5",
        "T": "void testUndoUnlimited() { final var gameState = mock(GameState.class); when(gameState.getPlayerPositionById(anyInt())).thenReturn(Position.of(0, 0)); when(gameState.getUndoQuota()).thenReturn(Optional.empty()); final var game = new SokobanGameForTesting(gameState); for (int i = 0; i < 10000; i++) { final var result = game.feedActionForProcessing(new Undo(0)); } verify(gameState, times(10000)).undo(); }",
        "C": "public TerminalRenderingEngine(PrintStream outputSteam) { this.outputSteam = outputSteam; } public Undo(int initiator) { super(initiator); }",
        "label": "F"
    },
    "995": {
        "dataset": "COMP 3021",
        "project": "yhngaq",
        "bug_id": "6",
        "T": "void testPushOtherPlayerBox() { String mapText = \"\"\" 233 ###### #AB.@# #b.a.# #@...# ###### \"\"\"; final var testMap = TestHelper.parseGameMap(mapText); final var gameState = spy(new GameState(testMap)); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Move.Down(0)); verify(gameState, never()).move(any(), any()); }",
        "C": "public GameState(@NotNull GameMap map) { // TODO done? undoquota = map.getUndoLimit(); locationofcrate = getDestinations(); locationofplayer = null; mapp = map; currentmap = map.arrofstr; //throw new NotImplementedException(); } public Down(int initiator) { super(initiator); }",
        "label": "F"
    },
    "996": {
        "dataset": "COMP 3021",
        "project": "yhngaq",
        "bug_id": "7",
        "T": "void testMoveNonExistingPlayer() { String mapText = \"\"\" 233 ###### #A..@# #a...# ##...# ###### \"\"\"; final var testMap = TestHelper.parseGameMap(mapText); final var gameState = spy(new GameState(testMap)); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Move.Down(23)); }",
        "C": "public GameState(@NotNull GameMap map) { // TODO done? undoquota = map.getUndoLimit(); locationofcrate = getDestinations(); locationofplayer = null; mapp = map; currentmap = map.arrofstr; //throw new NotImplementedException(); } public Down(int initiator) { super(initiator); }",
        "label": "F"
    },
    "997": {
        "dataset": "COMP 3021",
        "project": "yhngaq",
        "bug_id": "8",
        "T": "void testCheckpointWhenNeed() { final var gameState = spy(new GameState(TestHelper.parseGameMap(\"\"\" 233 ###### #.Aa@# #..a@# ###### \"\"\" ))); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Move.Right(0)); verify(gameState, times(1)).checkpoint(); }",
        "C": "public GameState(@NotNull GameMap map) { // TODO done? undoquota = map.getUndoLimit(); locationofcrate = getDestinations(); locationofplayer = null; mapp = map; currentmap = map.arrofstr; //throw new NotImplementedException(); } public Right(int initiator) { super(initiator); }",
        "label": "F"
    },
    "998": {
        "dataset": "COMP 3021",
        "project": "yhngaq",
        "bug_id": "9",
        "T": "void testPushBoxAgainstWall() { String mapText = \"\"\" 233 ###### #A..@# #a...# ##...# ###### \"\"\"; final var testMap = TestHelper.parseGameMap(mapText); final var gameState = spy(new GameState(testMap)); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Move.Down(0)); verify(gameState, never()).move(any(), any()); }",
        "C": "public GameState(@NotNull GameMap map) { // TODO done? undoquota = map.getUndoLimit(); locationofcrate = getDestinations(); locationofplayer = null; mapp = map; currentmap = map.arrofstr; //throw new NotImplementedException(); } public Down(int initiator) { super(initiator); }",
        "label": "F"
    },
    "999": {
        "dataset": "COMP 3021",
        "project": "yhngaq",
        "bug_id": "10",
        "T": "void testCheckpointWhenNotNeed() { final var gameState = spy(new GameState(TestHelper.parseGameMap(\"\"\" 233 ###### #A.a@# #..a@# ###### \"\"\" ))); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Move.Right(0)); verify(gameState, never()).checkpoint(); } private static class SokobanGameForTesting extends AbstractSokobanGame { protected SokobanGameForTesting(GameState gameState) { super(gameState); } @Override public void run() { } public ActionResult feedActionForProcessing(Action action) { return processAction(action); } }",
        "C": "public GameState(@NotNull GameMap map) { // TODO done? undoquota = map.getUndoLimit(); locationofcrate = getDestinations(); locationofplayer = null; mapp = map; currentmap = map.arrofstr; //throw new NotImplementedException(); } public Right(int initiator) { super(initiator); } public void run() { // TODO //throw new NotImplementedException(); } protected ActionResult processAction(@NotNull Action action) { // TODO if(action.getClass() == Exit.class){ if(this.shouldStop()){ return new ActionResult.Success(action); } } if(action.getClass() == Move.class){ return new ActionResult.Success(new Move.Down(0)); } if(action.getClass() == Undo.class){ return new ActionResult.Success(new Move.Down(0)); } if(action.getClass() == InvalidInput.class){ return new ActionResult.Success(new Move.Down(0)); } throw new NotImplementedException(); }",
        "label": "F"
    },
    "1000": {
        "dataset": "COMP 3021",
        "project": "yhngaq",
        "bug_id": "11",
        "T": "void testHitAnotherPlayer() { String mapText = \"\"\" 233 ###### #A..@# #B...# #ab.@# ###### \"\"\"; final var testMap = TestHelper.parseGameMap(mapText); final var gameState = spy(new GameState(testMap)); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Move.Down(0)); verify(gameState, never()).move(any(), any()); }",
        "C": "public GameState(@NotNull GameMap map) { // TODO done? undoquota = map.getUndoLimit(); locationofcrate = getDestinations(); locationofplayer = null; mapp = map; currentmap = map.arrofstr; //throw new NotImplementedException(); } public Down(int initiator) { super(initiator); }",
        "label": "F"
    },
    "1001": {
        "dataset": "COMP 3021",
        "project": "yhngaq",
        "bug_id": "12",
        "T": "void testUndoWithinQuota() { final var gameState = mock(GameState.class); when(gameState.getPlayerPositionById(anyInt())).thenReturn(Position.of(0, 0)); when(gameState.getUndoQuota()).thenReturn(Optional.of(1)); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Undo(0)); verify(gameState, times(1)).undo(); }",
        "C": "public Undo(int initiator) { super(initiator); }",
        "label": "F"
    },
    "1002": {
        "dataset": "COMP 3021",
        "project": "yhngaq",
        "bug_id": "13",
        "T": "void testInvalidInput() { final var game = new SokobanGameForTesting(mock(GameState.class)); final var message = String.valueOf(new Random().nextLong()); final var action = new InvalidInput(-1, message); final var result = game.feedActionForProcessing(action); }",
        "C": "public InvalidInput(int initiator, @NotNull String message) { super(initiator); this.message = message; }",
        "label": "F"
    },
    "1003": {
        "dataset": "COMP 3021",
        "project": "yhngaq",
        "bug_id": "14",
        "T": "void testUndoLimitParsing() { final var gameMap = TestHelper.parseGameMap(rectangularMap); }",
        "C": "",
        "label": "P"
    },
    "1004": {
        "dataset": "COMP 3021",
        "project": "yhngaq",
        "bug_id": "15",
        "T": "void testWidthForNonRectangularMap() { final var gameMap = TestHelper.parseGameMap(nonRectangularMap); }",
        "C": "",
        "label": "F"
    },
    "1005": {
        "dataset": "COMP 3021",
        "project": "yhngaq",
        "bug_id": "16",
        "T": "void testTwoPlayersMap() { final var twoPlayersMap = \"\"\" 233 ###### #A..@# #..B@# #....# #.a..# #..b.# ###### \"\"\"; final var gameMap = TestHelper.parseGameMap(twoPlayersMap); final var playerIds = gameMap.getPlayerIds(); final var expectedIds = new HashSet<Integer>(); expectedIds.add(0); expectedIds.add(1); }",
        "C": "public Set<Integer> getPlayerIds() { // TODO Set<Integer> playerid = new HashSet<Integer>(); return playerid; // throw new NotImplementedException(); }",
        "label": "F"
    },
    "1006": {
        "dataset": "COMP 3021",
        "project": "yhngaq",
        "bug_id": "17",
        "T": "void testMapWithoutPlayer() { final var invalidMap = \"\"\" 233 ### #.# ### \"\"\"; } // @Tag(TestKind.HIDDEN) // @Test // void testUnmatchedPlayersAndBoxes() { // final var invalidMap = \"\"\" // 233 // ###### // #A..@# // #...@# // #a.b@# // #.a.@# // #..a.# // ###### // \"\"\"; // assertThrowsExactly(IllegalArgumentException.class, () -> TestHelper.parseGameMap(invalidMap)); // }",
        "C": "public TerminalRenderingEngine(PrintStream outputSteam) { this.outputSteam = outputSteam; }",
        "label": "F"
    },
    "1007": {
        "dataset": "COMP 3021",
        "project": "yhngaq",
        "bug_id": "18",
        "T": "void testManyPlayersMap() { final var manyPlayersMap = \"\"\" 233 ###### #A.P@@# #vCB@@# #.cpD@# #Ga.d@# #g.bV@# ###### \"\"\"; final var gameMap = TestHelper.parseGameMap(manyPlayersMap); final var playerIds = gameMap.getPlayerIds(); final var expectedIds = new HashSet<>(Arrays.asList( 0, 'P' - 'A', 'C' - 'A', 'B' - 'A', 'D' - 'A', 'G' - 'A', 'V' - 'A' )); }",
        "C": "public Set<Integer> getPlayerIds() { // TODO Set<Integer> playerid = new HashSet<Integer>(); return playerid; // throw new NotImplementedException(); }",
        "label": "F"
    },
    "1008": {
        "dataset": "COMP 3021",
        "project": "yhngaq",
        "bug_id": "19",
        "T": "void testHeightForNonRectangularMap() { final var gameMap = TestHelper.parseGameMap(nonRectangularMap); }",
        "C": "",
        "label": "P"
    },
    "1009": {
        "dataset": "COMP 3021",
        "project": "yhngaq",
        "bug_id": "20",
        "T": "void testDuplicatedPlayers() { final var invalidMap = \"\"\" 233 ###### #A..@# #..A@# #....# #.a..# #..b.# ###### \"\"\"; }",
        "C": "",
        "label": "F"
    },
    "1010": {
        "dataset": "COMP 3021",
        "project": "yhngaq",
        "bug_id": "21",
        "T": "void testParseMapWithoutUndoLimit() { final var invalidMap = String.join(\"\\n\", rectangularMap.lines().skip(1).toList()); }",
        "C": "",
        "label": "P"
    },
    "1011": {
        "dataset": "COMP 3021",
        "project": "yhngaq",
        "bug_id": "22",
        "T": "void testInsufficientDestinations() { final var invalidMap = \"\"\" 233 ###### #A..@# #...@# #a...# #.a..# #..a.# ###### \"\"\"; }",
        "C": "",
        "label": "F"
    },
    "1012": {
        "dataset": "COMP 3021",
        "project": "yhngaq",
        "bug_id": "23",
        "T": "void testSuperLargeMap() { try { new GameMap(Integer.MAX_VALUE, Integer.MAX_VALUE, Collections.emptySet(), 0); } catch (OutOfMemoryError e) { throw new RuntimeException(e); } }); }",
        "C": "public GameMap(int maxWidth, int maxHeight, Set<Position> destinations, int undoLimit) { // TODO done maxwidth = maxWidth; maxheight = maxHeight; Set<Position> destination = destinations; undolimit = undoLimit; if(undoLimit < -1){ throw new IllegalArgumentException(); } //throw new NotImplementedException(); } /** * Parses the map from a string representation. * The first line is undo limit. * Starting from the second line, the game map is represented as follows, * <li># represents a {@link Wall}</li> * <li>@ represents a box destination.</li> * <li>Any upper-case letter represents a {@link Player}.</li> * <li> * Any lower-case letter represents a {@link Box} that is only movable by the player with the corresponding upper-case letter. * For instance, box \"a\" can only be moved by player \"A\" and not movable by player \"B\". * </li> * <li>. represents an {@link Empty} position in the map, meaning there is no player or box currently at this position.</li> * <p> * Notes: * <li> * There can be at most 26 players. * All implementations of classes in the hk.ust.comp3021.game package should support up to 26 players. * </li> * <li> * For simplicity, we assume the given map is bounded with a closed boundary. * There is no need to check this point. * </li> * <li> * Example maps can be found in \"src/main/resources\". * </li> * * @param mapText The string representation. * @return The parsed GameMap object. * @throws IllegalArgumentException if undo limit is negative but not -1. * @throws IllegalArgumentException if there are multiple same upper-case letters, i.e., one player can only exist at one position. * @throws IllegalArgumentException if there are no players in the map. * @throws IllegalArgumentException if the number of boxes is not equal to the number of box destinations. * @throws IllegalArgumentException if there are boxes whose {@link Box#getPlayerId()} public TerminalRenderingEngine(PrintStream outputSteam) { this.outputSteam = outputSteam; }",
        "label": "P"
    },
    "1013": {
        "dataset": "COMP 3021",
        "project": "yhngaq",
        "bug_id": "24",
        "T": "void testInvalidUndoLimit() { final var invalidMap = \"\"\" -233 ###### #A..@# #...@# #a.b@# #.a.@# #..a.# ###### \"\"\"; }",
        "C": "",
        "label": "P"
    },
    "1014": {
        "dataset": "COMP 3021",
        "project": "yhngaq",
        "bug_id": "25",
        "T": "void testEmptyMap() { final var invalidMap = \"\"; }",
        "C": "",
        "label": "P"
    },
    "1015": {
        "dataset": "COMP 3021",
        "project": "yhngaq",
        "bug_id": "26",
        "T": "void testMove(String input, String name, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); } private InputStream fixValueStream(String content) { final var bytes = content.getBytes(StandardCharsets.UTF_8); return new ByteArrayInputStream(bytes); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine(); // TODO return new Exit(0); // throw new NotImplementedException(); }",
        "label": "F"
    },
    "1016": {
        "dataset": "COMP 3021",
        "project": "yhngaq",
        "bug_id": "27",
        "T": "void testMove(String input, String name, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); } private InputStream fixValueStream(String content) { final var bytes = content.getBytes(StandardCharsets.UTF_8); return new ByteArrayInputStream(bytes); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine(); // TODO return new Exit(0); // throw new NotImplementedException(); }",
        "label": "F"
    },
    "1017": {
        "dataset": "COMP 3021",
        "project": "yhngaq",
        "bug_id": "28",
        "T": "void testMove(String input, String name, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); } private InputStream fixValueStream(String content) { final var bytes = content.getBytes(StandardCharsets.UTF_8); return new ByteArrayInputStream(bytes); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine(); // TODO return new Exit(0); // throw new NotImplementedException(); }",
        "label": "F"
    },
    "1018": {
        "dataset": "COMP 3021",
        "project": "yhngaq",
        "bug_id": "29",
        "T": "void testMove(String input, String name, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); } private InputStream fixValueStream(String content) { final var bytes = content.getBytes(StandardCharsets.UTF_8); return new ByteArrayInputStream(bytes); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine(); // TODO return new Exit(0); // throw new NotImplementedException(); }",
        "label": "F"
    },
    "1019": {
        "dataset": "COMP 3021",
        "project": "yhngaq",
        "bug_id": "30",
        "T": "void testMove(String input, String name, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); } private InputStream fixValueStream(String content) { final var bytes = content.getBytes(StandardCharsets.UTF_8); return new ByteArrayInputStream(bytes); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine(); // TODO return new Exit(0); // throw new NotImplementedException(); }",
        "label": "F"
    },
    "1020": {
        "dataset": "COMP 3021",
        "project": "yhngaq",
        "bug_id": "31",
        "T": "void testMove(String input, String name, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); } private InputStream fixValueStream(String content) { final var bytes = content.getBytes(StandardCharsets.UTF_8); return new ByteArrayInputStream(bytes); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine(); // TODO return new Exit(0); // throw new NotImplementedException(); }",
        "label": "F"
    },
    "1021": {
        "dataset": "COMP 3021",
        "project": "yhngaq",
        "bug_id": "32",
        "T": "void testMove(String input, String name, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); } private InputStream fixValueStream(String content) { final var bytes = content.getBytes(StandardCharsets.UTF_8); return new ByteArrayInputStream(bytes); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine(); // TODO return new Exit(0); // throw new NotImplementedException(); }",
        "label": "F"
    },
    "1022": {
        "dataset": "COMP 3021",
        "project": "yhngaq",
        "bug_id": "33",
        "T": "void testMove(String input, String name, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); } private InputStream fixValueStream(String content) { final var bytes = content.getBytes(StandardCharsets.UTF_8); return new ByteArrayInputStream(bytes); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine(); // TODO return new Exit(0); // throw new NotImplementedException(); }",
        "label": "F"
    },
    "1023": {
        "dataset": "COMP 3021",
        "project": "yhngaq",
        "bug_id": "34",
        "T": "void testUndo(String input, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine(); // TODO return new Exit(0); // throw new NotImplementedException(); }",
        "label": "F"
    },
    "1024": {
        "dataset": "COMP 3021",
        "project": "yhngaq",
        "bug_id": "35",
        "T": "void testInvalidInput() { final var inputStream = fixValueStream(\"blah blah\"); final var inputEngine = new TerminalInputEngine(inputStream); final var action = inputEngine.fetchAction(); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine(); // TODO return new Exit(0); // throw new NotImplementedException(); }",
        "label": "F"
    },
    "1025": {
        "dataset": "COMP 3021",
        "project": "yhngaq",
        "bug_id": "36",
        "T": "void testUndoWhenThereIsNoMove() { final var gameState = new GameState(TestHelper.parseGameMap(\"\"\" 233 ###### #A.a@# #..a@# ###### \"\"\" )); gameState.undo(); } private Entity generateEntity(int key) { return switch (key % 4) { case 0 -> new Box(0); case 1 -> new Empty(); case 2 -> new Player(0); case 3 -> new Wall(); default -> throw new ShouldNotReachException(); }; }",
        "C": "public GameState(@NotNull GameMap map) { // TODO done? undoquota = map.getUndoLimit(); locationofcrate = getDestinations(); locationofplayer = null; mapp = map; currentmap = map.arrofstr; //throw new NotImplementedException(); } public void undo() { // TODO // throw new NotImplementedException(); } /** * Get the maximum width of the game map. * This should be the same as that in {@link GameMap} public TerminalRenderingEngine(PrintStream outputSteam) { this.outputSteam = outputSteam; } public Box(int playerId) { this.playerId = playerId; } public Player(int id) { this.id = id; } public ShouldNotReachException() { super(\"This branch should not be reached.\"); }",
        "label": "F"
    },
    "1026": {
        "dataset": "COMP 3021",
        "project": "yhngaq",
        "bug_id": "37",
        "T": "void testGetUndoUnlimited() { final var gameState = new GameState(TestHelper.parseGameMap(\"\"\" -1 ###### #.Aa@# #..a@# ###### \"\"\" )); }",
        "C": "public GameState(@NotNull GameMap map) { // TODO done? undoquota = map.getUndoLimit(); locationofcrate = getDestinations(); locationofplayer = null; mapp = map; currentmap = map.arrofstr; //throw new NotImplementedException(); }",
        "label": "P"
    },
    "1027": {
        "dataset": "COMP 3021",
        "project": "yhngaq",
        "bug_id": "38",
        "T": "void testMapCopying() { final var maxWidth = 2333; final var maxHeight = 2333; final var random = new Random(); final var randomEntities = Stream.generate(() -> Position.of(random.nextInt(maxWidth), random.nextInt(maxHeight))) .distinct() .limit(100) .collect(Collectors.toMap(Function.identity(), it -> generateEntity(it.x()))); final var firstPos = randomEntities.keySet().stream().findFirst(); final var gameMap = new GameMap(maxWidth, maxHeight, Collections.singleton(firstPos.get()), 233); randomEntities.forEach(gameMap::putEntity); final var gameState = new GameState(gameMap); final var randomPosition = randomEntities.keySet().stream().findAny(); gameMap.putEntity(randomPosition.get(), new Empty()); randomEntities.forEach((p, e) -> assertEquals(e, gameState.getEntity(p))); }",
        "C": "public static @NotNull Position of(int x, int y) { return new Position(x, y); } public GameMap(int maxWidth, int maxHeight, Set<Position> destinations, int undoLimit) { // TODO done maxwidth = maxWidth; maxheight = maxHeight; Set<Position> destination = destinations; undolimit = undoLimit; if(undoLimit < -1){ throw new IllegalArgumentException(); } //throw new NotImplementedException(); } /** * Parses the map from a string representation. * The first line is undo limit. * Starting from the second line, the game map is represented as follows, * <li># represents a {@link Wall}</li> * <li>@ represents a box destination.</li> * <li>Any upper-case letter represents a {@link Player}.</li> * <li> * Any lower-case letter represents a {@link Box} that is only movable by the player with the corresponding upper-case letter. * For instance, box \"a\" can only be moved by player \"A\" and not movable by player \"B\". * </li> * <li>. represents an {@link Empty} position in the map, meaning there is no player or box currently at this position.</li> * <p> * Notes: * <li> * There can be at most 26 players. * All implementations of classes in the hk.ust.comp3021.game package should support up to 26 players. * </li> * <li> * For simplicity, we assume the given map is bounded with a closed boundary. * There is no need to check this point. * </li> * <li> * Example maps can be found in \"src/main/resources\". * </li> * * @param mapText The string representation. * @return The parsed GameMap object. * @throws IllegalArgumentException if undo limit is negative but not -1. * @throws IllegalArgumentException if there are multiple same upper-case letters, i.e., one player can only exist at one position. * @throws IllegalArgumentException if there are no players in the map. * @throws IllegalArgumentException if the number of boxes is not equal to the number of box destinations. * @throws IllegalArgumentException if there are boxes whose {@link Box#getPlayerId()} public GameState(@NotNull GameMap map) { // TODO done? undoquota = map.getUndoLimit(); locationofcrate = getDestinations(); locationofplayer = null; mapp = map; currentmap = map.arrofstr; //throw new NotImplementedException(); } public void putEntity(Position position, Entity entity) { // TODO char temp = 0; if(entity.getClass() == Box.class){ temp = (char) (((Box) entity).getPlayerId() + 'A'); } if(entity.getClass() == Player.class){ temp = (char) (((Player) entity).getId() + 'A'); } if(entity.getClass() == Wall.class){ temp = '#'; } if(entity.getClass() == Empty.class){ temp = ' '; } char[] tempchararr = arrofstr[position.y() +1].toCharArray(); tempchararr[position.x()] = temp; arrofstr[position.y() + 1] = String.valueOf(tempchararr); //throw new NotImplementedException(); } public @Nullable Entity getEntity(@NotNull Position position) { // TODO char temp = currentmap[position.y() + 1].charAt(position.x()); if (Character.isAlphabetic(temp)) { if (Character.isUpperCase(temp)) { return new Player(temp - 'A'); } else { return new Box(temp - 'a'); } } else { Entity ans = switch (temp) { case '#' -> new Wall(); case '.' -> new Empty(); case ' ' -> null; default -> new Empty(); }; return ans; //return new Empty(); // throw new NotImplementedException(); } } /** * Get all box destination positions as a set in the game map. * This should be the same as that in {@link GameMap}",
        "label": "F"
    },
    "1028": {
        "dataset": "COMP 3021",
        "project": "yhngaq",
        "bug_id": "39",
        "T": "void testUndoWhenThereIsMoveButNoCheckpoint() { final var gameState = new GameState(TestHelper.parseGameMap(\"\"\" 233 ###### #A.a@# #..a@# ###### \"\"\" )); gameState.move(Position.of(1, 1), Position.of(2, 1)); gameState.undo(); }",
        "C": "public GameState(@NotNull GameMap map) { // TODO done? undoquota = map.getUndoLimit(); locationofcrate = getDestinations(); locationofplayer = null; mapp = map; currentmap = map.arrofstr; //throw new NotImplementedException(); } public void move(Position from, Position to) { // TODO // throw new NotImplementedException(); } /** * Record a checkpoint of the game state, including: * <li>All current positions of entities in the game map.</li> * <li>Current undo quota</li> * <p> * Checkpoint is used in {@link GameState#undo()} public static @NotNull Position of(int x, int y) { return new Position(x, y); } public void undo() { // TODO // throw new NotImplementedException(); } /** * Get the maximum width of the game map. * This should be the same as that in {@link GameMap}",
        "label": "F"
    },
    "1029": {
        "dataset": "COMP 3021",
        "project": "yhngaq",
        "bug_id": "40",
        "T": "void testGameExit() { final var gameState = mock(GameState.class); final var inputEngine = mock(TerminalInputEngine.class); final var renderingEngine = mock(TerminalRenderingEngine.class); when(gameState.isWin()).thenReturn(false, false, false); when(inputEngine.fetchAction()) .thenReturn(new InvalidInput(0, \"\"), new InvalidInput(0, \"\"), new Exit(0)); final var game = new TerminalSokobanGame(gameState, inputEngine, renderingEngine); game.run(); verify(renderingEngine, atLeastOnce()).message(any()); }",
        "C": "public InvalidInput(int initiator, @NotNull String message) { super(initiator); this.message = message; } public Exit(int initiator) { super(initiator); } public TerminalSokobanGame(GameState gameState, TerminalInputEngine inputEngine, TerminalRenderingEngine renderingEngine) { super(gameState); this.inputEngine = inputEngine; this.renderingEngine = renderingEngine; // TODO if(gameState.getAllPlayerPositions().size() > 2){ throw new IllegalArgumentException(); } // Check the number of players //throw new NotImplementedException(); } public void run() { // TODO //throw new NotImplementedException(); }",
        "label": "F"
    },
    "1030": {
        "dataset": "COMP 3021",
        "project": "yhngaq",
        "bug_id": "41",
        "T": "void testGameWin() { final var gameState = mock(GameState.class); final var inputEngine = mock(TerminalInputEngine.class); final var renderingEngine = mock(TerminalRenderingEngine.class); when(gameState.isWin()).thenReturn(false, false, false, true); when(inputEngine.fetchAction()) .thenReturn(new InvalidInput(0, \"\")); final var game = new TerminalSokobanGame(gameState, inputEngine, renderingEngine); game.run(); verify(gameState, atLeastOnce()).isWin(); verify(renderingEngine, atLeastOnce()).message(any()); }",
        "C": "public InvalidInput(int initiator, @NotNull String message) { super(initiator); this.message = message; } public TerminalSokobanGame(GameState gameState, TerminalInputEngine inputEngine, TerminalRenderingEngine renderingEngine) { super(gameState); this.inputEngine = inputEngine; this.renderingEngine = renderingEngine; // TODO if(gameState.getAllPlayerPositions().size() > 2){ throw new IllegalArgumentException(); } // Check the number of players //throw new NotImplementedException(); } public void run() { // TODO //throw new NotImplementedException(); }",
        "label": "F"
    },
    "1031": {
        "dataset": "COMP 3021",
        "project": "yhngaq",
        "bug_id": "42",
        "T": "void testMoreThanTwoPlayers() { final var gameState = mock(GameState.class); final var inputEngine = mock(TerminalInputEngine.class); final var renderingEngine = mock(TerminalRenderingEngine.class); when(gameState.getAllPlayerPositions()).thenReturn(new HashSet<>(Arrays.asList(Position.of(1, 1), Position.of(1, 2), Position.of(1, 3)))); }",
        "C": "public static @NotNull Position of(int x, int y) { return new Position(x, y); }",
        "label": "P"
    },
    "1032": {
        "dataset": "COMP 3021",
        "project": "yhubv",
        "bug_id": "0",
        "T": "void moveUp() { Position.of(233, 232), new Move.Up(-1).nextPosition(pos) ); }",
        "C": "public static @NotNull Position of(int x, int y) { return new Position(x, y); } public Up(int initiator) { super(initiator); }",
        "label": "P"
    },
    "1033": {
        "dataset": "COMP 3021",
        "project": "yhubv",
        "bug_id": "1",
        "T": "void moveDown() { Position.of(233, 234), new Move.Down(-1).nextPosition(pos) ); }",
        "C": "public static @NotNull Position of(int x, int y) { return new Position(x, y); } public Down(int initiator) { super(initiator); }",
        "label": "P"
    },
    "1034": {
        "dataset": "COMP 3021",
        "project": "yhubv",
        "bug_id": "2",
        "T": "void moveRight() { Position.of(234, 233), new Move.Right(-1).nextPosition(pos) ); }",
        "C": "public static @NotNull Position of(int x, int y) { return new Position(x, y); } public Right(int initiator) { super(initiator); }",
        "label": "P"
    },
    "1035": {
        "dataset": "COMP 3021",
        "project": "yhubv",
        "bug_id": "3",
        "T": "void testExceedingUndoQuota() { final var gameState = mock(GameState.class); when(gameState.getPlayerPositionById(anyInt())).thenReturn(Position.of(0, 0)); when(gameState.getUndoQuota()).thenReturn(Optional.of(0)); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Undo(0)); }",
        "C": "public Undo(int initiator) { super(initiator); }",
        "label": "P"
    },
    "1036": {
        "dataset": "COMP 3021",
        "project": "yhubv",
        "bug_id": "4",
        "T": "void testExit() { final var gameState = mock(GameState.class); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Exit(0)); }",
        "C": "public Exit(int initiator) { super(initiator); }",
        "label": "F"
    },
    "1037": {
        "dataset": "COMP 3021",
        "project": "yhubv",
        "bug_id": "5",
        "T": "void testUndoUnlimited() { final var gameState = mock(GameState.class); when(gameState.getPlayerPositionById(anyInt())).thenReturn(Position.of(0, 0)); when(gameState.getUndoQuota()).thenReturn(Optional.empty()); final var game = new SokobanGameForTesting(gameState); for (int i = 0; i < 10000; i++) { final var result = game.feedActionForProcessing(new Undo(0)); } verify(gameState, times(10000)).undo(); }",
        "C": "public TerminalRenderingEngine(PrintStream outputSteam) { this.outputSteam = outputSteam; } public Undo(int initiator) { super(initiator); }",
        "label": "F"
    },
    "1038": {
        "dataset": "COMP 3021",
        "project": "yhubv",
        "bug_id": "6",
        "T": "void testPushOtherPlayerBox() { String mapText = \"\"\" 233 ###### #AB.@# #b.a.# #@...# ###### \"\"\"; final var testMap = TestHelper.parseGameMap(mapText); final var gameState = spy(new GameState(testMap)); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Move.Down(0)); verify(gameState, never()).move(any(), any()); }",
        "C": "public GameState(@NotNull GameMap map) { // TODO this.width = map.getMaxWidth(); // System.out.println(WIDTH); this.height = map.getMaxHeight(); // System.out.println(HEIGHT); this.limit = map.getUndoLimit(); this.setDesPos = map.getDestinations(); // System.out.println(SET_DES_POS); this.playerId = map.getPlayerIds(); // hash entity need position as argument // copy the map and push by entity for (int i = 0; i < height; i++) { for (int j = 0; j < width; j++) { Entity currentEntity = map.getEntity(Position.of(j, i)); // MAP_ID_POS.put(current_entity, Position.of(i,j)); posEntity.put(Position.of(j, i), currentEntity); map.putEntity(Position.of(j, i), currentEntity); } } // System.out.println(POS_ENTITY); for (int i : playerId) { for (Position position : posEntity.keySet()) { if (posEntity.get(position) instanceof Player) { // System.out.println(\"here\"); // POS_ID.put(i, position); // System.out.println(POS_ID); allPlayer.add(position); } } } initMap = new HashMap<>(posEntity); } public Down(int initiator) { super(initiator); }",
        "label": "P"
    },
    "1039": {
        "dataset": "COMP 3021",
        "project": "yhubv",
        "bug_id": "7",
        "T": "void testMoveNonExistingPlayer() { String mapText = \"\"\" 233 ###### #A..@# #a...# ##...# ###### \"\"\"; final var testMap = TestHelper.parseGameMap(mapText); final var gameState = spy(new GameState(testMap)); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Move.Down(23)); }",
        "C": "public GameState(@NotNull GameMap map) { // TODO this.width = map.getMaxWidth(); // System.out.println(WIDTH); this.height = map.getMaxHeight(); // System.out.println(HEIGHT); this.limit = map.getUndoLimit(); this.setDesPos = map.getDestinations(); // System.out.println(SET_DES_POS); this.playerId = map.getPlayerIds(); // hash entity need position as argument // copy the map and push by entity for (int i = 0; i < height; i++) { for (int j = 0; j < width; j++) { Entity currentEntity = map.getEntity(Position.of(j, i)); // MAP_ID_POS.put(current_entity, Position.of(i,j)); posEntity.put(Position.of(j, i), currentEntity); map.putEntity(Position.of(j, i), currentEntity); } } // System.out.println(POS_ENTITY); for (int i : playerId) { for (Position position : posEntity.keySet()) { if (posEntity.get(position) instanceof Player) { // System.out.println(\"here\"); // POS_ID.put(i, position); // System.out.println(POS_ID); allPlayer.add(position); } } } initMap = new HashMap<>(posEntity); } public Down(int initiator) { super(initiator); }",
        "label": "F"
    },
    "1040": {
        "dataset": "COMP 3021",
        "project": "yhubv",
        "bug_id": "8",
        "T": "void testCheckpointWhenNeed() { final var gameState = spy(new GameState(TestHelper.parseGameMap(\"\"\" 233 ###### #.Aa@# #..a@# ###### \"\"\" ))); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Move.Right(0)); verify(gameState, times(1)).checkpoint(); }",
        "C": "public GameState(@NotNull GameMap map) { // TODO this.width = map.getMaxWidth(); // System.out.println(WIDTH); this.height = map.getMaxHeight(); // System.out.println(HEIGHT); this.limit = map.getUndoLimit(); this.setDesPos = map.getDestinations(); // System.out.println(SET_DES_POS); this.playerId = map.getPlayerIds(); // hash entity need position as argument // copy the map and push by entity for (int i = 0; i < height; i++) { for (int j = 0; j < width; j++) { Entity currentEntity = map.getEntity(Position.of(j, i)); // MAP_ID_POS.put(current_entity, Position.of(i,j)); posEntity.put(Position.of(j, i), currentEntity); map.putEntity(Position.of(j, i), currentEntity); } } // System.out.println(POS_ENTITY); for (int i : playerId) { for (Position position : posEntity.keySet()) { if (posEntity.get(position) instanceof Player) { // System.out.println(\"here\"); // POS_ID.put(i, position); // System.out.println(POS_ID); allPlayer.add(position); } } } initMap = new HashMap<>(posEntity); } public Right(int initiator) { super(initiator); }",
        "label": "P"
    },
    "1041": {
        "dataset": "COMP 3021",
        "project": "yhubv",
        "bug_id": "9",
        "T": "void testPushBoxAgainstWall() { String mapText = \"\"\" 233 ###### #A..@# #a...# ##...# ###### \"\"\"; final var testMap = TestHelper.parseGameMap(mapText); final var gameState = spy(new GameState(testMap)); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Move.Down(0)); verify(gameState, never()).move(any(), any()); }",
        "C": "public GameState(@NotNull GameMap map) { // TODO this.width = map.getMaxWidth(); // System.out.println(WIDTH); this.height = map.getMaxHeight(); // System.out.println(HEIGHT); this.limit = map.getUndoLimit(); this.setDesPos = map.getDestinations(); // System.out.println(SET_DES_POS); this.playerId = map.getPlayerIds(); // hash entity need position as argument // copy the map and push by entity for (int i = 0; i < height; i++) { for (int j = 0; j < width; j++) { Entity currentEntity = map.getEntity(Position.of(j, i)); // MAP_ID_POS.put(current_entity, Position.of(i,j)); posEntity.put(Position.of(j, i), currentEntity); map.putEntity(Position.of(j, i), currentEntity); } } // System.out.println(POS_ENTITY); for (int i : playerId) { for (Position position : posEntity.keySet()) { if (posEntity.get(position) instanceof Player) { // System.out.println(\"here\"); // POS_ID.put(i, position); // System.out.println(POS_ID); allPlayer.add(position); } } } initMap = new HashMap<>(posEntity); } public Down(int initiator) { super(initiator); }",
        "label": "P"
    },
    "1042": {
        "dataset": "COMP 3021",
        "project": "yhubv",
        "bug_id": "10",
        "T": "void testCheckpointWhenNotNeed() { final var gameState = spy(new GameState(TestHelper.parseGameMap(\"\"\" 233 ###### #A.a@# #..a@# ###### \"\"\" ))); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Move.Right(0)); verify(gameState, never()).checkpoint(); } private static class SokobanGameForTesting extends AbstractSokobanGame { protected SokobanGameForTesting(GameState gameState) { super(gameState); } @Override public void run() { } public ActionResult feedActionForProcessing(Action action) { return processAction(action); } }",
        "C": "public GameState(@NotNull GameMap map) { // TODO this.width = map.getMaxWidth(); // System.out.println(WIDTH); this.height = map.getMaxHeight(); // System.out.println(HEIGHT); this.limit = map.getUndoLimit(); this.setDesPos = map.getDestinations(); // System.out.println(SET_DES_POS); this.playerId = map.getPlayerIds(); // hash entity need position as argument // copy the map and push by entity for (int i = 0; i < height; i++) { for (int j = 0; j < width; j++) { Entity currentEntity = map.getEntity(Position.of(j, i)); // MAP_ID_POS.put(current_entity, Position.of(i,j)); posEntity.put(Position.of(j, i), currentEntity); map.putEntity(Position.of(j, i), currentEntity); } } // System.out.println(POS_ENTITY); for (int i : playerId) { for (Position position : posEntity.keySet()) { if (posEntity.get(position) instanceof Player) { // System.out.println(\"here\"); // POS_ID.put(i, position); // System.out.println(POS_ID); allPlayer.add(position); } } } initMap = new HashMap<>(posEntity); } public Right(int initiator) { super(initiator); } public void run() { // TODO renderingEngine.message(\"Sokoban game is ready.\"); renderingEngine.render(state); if (state.getUndoQuota().isEmpty() || state.getUndoQuota().get() == -1) { renderingEngine.message(\"Unlimited\"); } else { renderingEngine.message(String.valueOf(state.getUndoQuota().get())); } renderingEngine.message(\">>>\"); do { Action action = inputEngine.fetchAction(); switch (action) { case Move.Up up -> { ActionResult actionResult = processAction(up); if (actionResult instanceof ActionResult.Success) { renderingEngine.render(state); if (!state.isWin()) { if (state.getUndoQuota().get() == -1) { renderingEngine.message(\"Unlimited\"); } else { renderingEngine.message(String.valueOf(state.getUndoQuota().get())); } } } else if (actionResult instanceof ActionResult.Failed f) { renderingEngine.message(f.getReason()); renderingEngine.render(state); if (state.getUndoQuota().get() == -1) { renderingEngine.message(\"Unlimited\"); } else { renderingEngine.message(String.valueOf(state.getUndoQuota().get())); } } } case Move.Down down -> { ActionResult actionResult = processAction(down); if (actionResult instanceof ActionResult.Success) { renderingEngine.render(state); if (!state.isWin()) { if (state.getUndoQuota().get() == -1) { renderingEngine.message(\"Unlimited\"); } else { renderingEngine.message(String.valueOf(state.getUndoQuota().get())); } } } else if (actionResult instanceof ActionResult.Failed f) { renderingEngine.message(f.getReason()); renderingEngine.render(state); if (state.getUndoQuota().get() == -1) { renderingEngine.message(\"Unlimited\"); } else { renderingEngine.message(String.valueOf(state.getUndoQuota().get())); } } } case Move.Left left -> { ActionResult actionResult = processAction(left); if (actionResult instanceof ActionResult.Success) { renderingEngine.render(state); if (!state.isWin()) { if (state.getUndoQuota().get() == -1) { renderingEngine.message(\"Unlimited\"); } else { renderingEngine.message(String.valueOf(state.getUndoQuota().get())); } } } else if (actionResult instanceof ActionResult.Failed f) { renderingEngine.message(f.getReason()); renderingEngine.render(state); if (state.getUndoQuota().get() == -1) { renderingEngine.message(\"Unlimited\"); } else { renderingEngine.message(String.valueOf(state.getUndoQuota().get())); } } } case Move.Right right -> { ActionResult actionResult = processAction(right); if (actionResult instanceof ActionResult.Success) { renderingEngine.render(state); if (!state.isWin()) { if (state.getUndoQuota().get() == -1) { renderingEngine.message(\"Unlimited\"); } else { renderingEngine.message(String.valueOf(state.getUndoQuota().get())); } } } else if (actionResult instanceof ActionResult.Failed f) { renderingEngine.message(f.getReason()); renderingEngine.render(state); if (state.getUndoQuota().get() == -1) { renderingEngine.message(\"Unlimited\"); } else { renderingEngine.message(String.valueOf(state.getUndoQuota().get())); } } } case InvalidInput invalidInput -> { ActionResult actionResult = processAction(invalidInput); // Here to start if (actionResult instanceof ActionResult.Failed f) { renderingEngine.message(f.getReason()); renderingEngine.render(state); if (state.getUndoQuota().isEmpty()) { renderingEngine.message(\"Unlimited\"); } else { renderingEngine.message(String.valueOf(state.getUndoQuota().get())); } } else { renderingEngine.message(invalidInput.getMessage()); } } case Undo undo -> { ActionResult actionResult = processAction(undo); if (actionResult instanceof ActionResult.Success) { renderingEngine.render(state); // System.out.println(state.getUndoQuota().get()); if (state.getUndoQuota().get() == -1) { // -1 in previous) { renderingEngine.message(\"Unlimited\"); } else { renderingEngine.message(String.valueOf(state.getUndoQuota().get())); } // state.checkpoint(); } else if (actionResult instanceof ActionResult.Failed) { renderingEngine.message(\"You have run out of your undo quota.\"); renderingEngine.render(state); } } case Exit exit -> { ActionResult ignored = processAction(exit); renderingEngine.render(state); renderingEngine.message(\"Game exits.\"); } } if (!shouldStop()) { renderingEngine.message(\">>>\"); } } while (!shouldStop()); if (state.isWin()) { renderingEngine.message(\"Game exits.\"); renderingEngine.message(\"You win.\"); } } protected ActionResult processAction(@NotNull Action action) { // TODO switch (action) { case Move.Up ignored -> { int id = action.getInitiator(); int x = state.getPlayerPositionById(id).x(); int y = state.getPlayerPositionById(id).y(); if (state.getEntity(Position.of(x, y)) instanceof Player p) { if (state.getEntity(Position.of(x, y-1)) instanceof Box b) { if (state.getEntity(Position.of(x, y-2)) instanceof Empty && b.getPlayerId() == p.getId()) { // Player -> Box -> Wall state.move(Position.of(x, y-1), Position.of(x, y-2)); state.move(Position.of(x, y), Position.of(x, y-1)); state.checkpoint(); return new ActionResult.Success(action); } else { return new ActionResult.Failed(action, \"Failed to push the box.\"); } } else if (state.getEntity(Position.of(x, y-1)) instanceof Empty){ state.move(Position.of(x, y), Position.of(x, y-1)); state.checkpoint(); return new ActionResult.Success(action); } else if (state.getEntity(Position.of(x, y-1)) instanceof Player){ return new ActionResult.Failed(action, \"You hit a player.\"); } else { return new ActionResult.Failed(action, \"You hit a wall.\"); } } } case Move.Down ignored -> { int id = action.getInitiator(); int x = state.getPlayerPositionById(id).x(); // System.out.println(x); int y = state.getPlayerPositionById(id).y(); // System.out.println(y); // check for the wall if (state.getEntity(Position.of(x, y)) instanceof Player p) { if (state.getEntity(Position.of(x, y+1)) instanceof Box b) { if (state.getEntity(Position.of(x, y+2)) instanceof Empty && b.getPlayerId() == p.getId()) { // Player -> Box -> Wall state.move(Position.of(x, y+1), Position.of(x, y+2)); state.move(Position.of(x, y), Position.of(x, y+1)); state.checkpoint(); return new ActionResult.Success(action); } else { return new ActionResult.Failed(action, \"Failed to push the box.\"); } } else if (state.getEntity(Position.of(x, y+1)) instanceof Empty){ state.move(Position.of(x, y), Position.of(x, y+1)); state.checkpoint(); return new ActionResult.Success(action); } else if (state.getEntity(Position.of(x, y+1)) instanceof Player){ return new ActionResult.Failed(action, \"You hit a player.\"); } else { return new ActionResult.Failed(action, \"You hit a wall.\"); } } } case Move.Left ignored -> { int id = action.getInitiator(); int x = state.getPlayerPositionById(id).x(); int y = state.getPlayerPositionById(id).y(); // check for the wall if (state.getEntity(Position.of(x, y)) instanceof Player p) { if (state.getEntity(Position.of(x-1, y)) instanceof Box b) { if (state.getEntity(Position.of(x-2, y)) instanceof Empty && b.getPlayerId() == p.getId()) { // Player -> Box -> Wall state.move(Position.of(x-1, y), Position.of(x-2, y)); state.move(Position.of(x, y), Position.of(x-1, y)); state.checkpoint(); return new ActionResult.Success(action); } else { return new ActionResult.Failed(action, \"Failed to push the box.\"); } } else if (state.getEntity(Position.of(x-1, y)) instanceof Empty){ state.move(Position.of(x, y), Position.of(x-1, y)); state.checkpoint(); return new ActionResult.Success(action); } else if (state.getEntity(Position.of(x-1, y)) instanceof Player){ return new ActionResult.Failed(action, \"You hit a player.\"); } else { return new ActionResult.Failed(action, \"You hit a wall.\"); } } } case Move.Right ignored -> { int id = action.getInitiator(); int x = state.getPlayerPositionById(id).x(); int y = state.getPlayerPositionById(id).y(); // check for the wall if (state.getEntity(Position.of(x, y)) instanceof Player p) { if (state.getEntity(Position.of(x+1, y)) instanceof Box b) { if (state.getEntity(Position.of(x+2, y)) instanceof Empty && b.getPlayerId() == p.getId()) { // Player -> Box -> Wall state.move(Position.of(x+1, y), Position.of(x+2, y)); state.move(Position.of(x, y), Position.of(x+1, y)); state.checkpoint(); return new ActionResult.Success(action); } else { return new ActionResult.Failed(action, \"Failed to push the box.\"); } } else if (state.getEntity(Position.of(x+1, y)) instanceof Empty){ state.move(Position.of(x, y), Position.of(x+1, y)); state.checkpoint(); return new ActionResult.Success(action); } else if (state.getEntity(Position.of(x+1, y)) instanceof Player){ return new ActionResult.Failed(action, \"You hit a player.\"); } else { return new ActionResult.Failed(action, \"You hit a wall.\"); } } } default -> { if (action instanceof Exit) { exit = true; // System.out.println(\"here\"); return new ActionResult.Failed(action, \"Game exits\"); } else if (action instanceof InvalidInput) { return new ActionResult.Failed(action, \"Invalid Input.\"); } else if (action instanceof Undo) { // System.out.println(state.getUndoQuota().get()); if (state.getUndoQuota().get() == -1){ state.undo(); return new ActionResult.Success(action); } else if (state.getUndoQuota().get() > -1){ if (state.getUndoQuota().get() == 0) { return new ActionResult.Failed(action, \"You have run out of your undo quota.\"); } else if (state.getUndoQuota().get() > 0) { state.undo(); return new ActionResult.Success(action); } // } else { // System.out.println(\"bug\"); // } } } } } return null; }",
        "label": "F"
    },
    "1043": {
        "dataset": "COMP 3021",
        "project": "yhubv",
        "bug_id": "11",
        "T": "void testHitAnotherPlayer() { String mapText = \"\"\" 233 ###### #A..@# #B...# #ab.@# ###### \"\"\"; final var testMap = TestHelper.parseGameMap(mapText); final var gameState = spy(new GameState(testMap)); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Move.Down(0)); verify(gameState, never()).move(any(), any()); }",
        "C": "public GameState(@NotNull GameMap map) { // TODO this.width = map.getMaxWidth(); // System.out.println(WIDTH); this.height = map.getMaxHeight(); // System.out.println(HEIGHT); this.limit = map.getUndoLimit(); this.setDesPos = map.getDestinations(); // System.out.println(SET_DES_POS); this.playerId = map.getPlayerIds(); // hash entity need position as argument // copy the map and push by entity for (int i = 0; i < height; i++) { for (int j = 0; j < width; j++) { Entity currentEntity = map.getEntity(Position.of(j, i)); // MAP_ID_POS.put(current_entity, Position.of(i,j)); posEntity.put(Position.of(j, i), currentEntity); map.putEntity(Position.of(j, i), currentEntity); } } // System.out.println(POS_ENTITY); for (int i : playerId) { for (Position position : posEntity.keySet()) { if (posEntity.get(position) instanceof Player) { // System.out.println(\"here\"); // POS_ID.put(i, position); // System.out.println(POS_ID); allPlayer.add(position); } } } initMap = new HashMap<>(posEntity); } public Down(int initiator) { super(initiator); }",
        "label": "P"
    },
    "1044": {
        "dataset": "COMP 3021",
        "project": "yhubv",
        "bug_id": "12",
        "T": "void testUndoWithinQuota() { final var gameState = mock(GameState.class); when(gameState.getPlayerPositionById(anyInt())).thenReturn(Position.of(0, 0)); when(gameState.getUndoQuota()).thenReturn(Optional.of(1)); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Undo(0)); verify(gameState, times(1)).undo(); }",
        "C": "public Undo(int initiator) { super(initiator); }",
        "label": "P"
    },
    "1045": {
        "dataset": "COMP 3021",
        "project": "yhubv",
        "bug_id": "13",
        "T": "void testInvalidInput() { final var game = new SokobanGameForTesting(mock(GameState.class)); final var message = String.valueOf(new Random().nextLong()); final var action = new InvalidInput(-1, message); final var result = game.feedActionForProcessing(action); }",
        "C": "public InvalidInput(int initiator, @NotNull String message) { super(initiator); this.message = message; }",
        "label": "P"
    },
    "1046": {
        "dataset": "COMP 3021",
        "project": "yhubv",
        "bug_id": "14",
        "T": "void testUndoLimitParsing() { final var gameMap = TestHelper.parseGameMap(rectangularMap); }",
        "C": "",
        "label": "P"
    },
    "1047": {
        "dataset": "COMP 3021",
        "project": "yhubv",
        "bug_id": "15",
        "T": "void testWidthForNonRectangularMap() { final var gameMap = TestHelper.parseGameMap(nonRectangularMap); }",
        "C": "",
        "label": "P"
    },
    "1048": {
        "dataset": "COMP 3021",
        "project": "yhubv",
        "bug_id": "16",
        "T": "void testTwoPlayersMap() { final var twoPlayersMap = \"\"\" 233 ###### #A..@# #..B@# #....# #.a..# #..b.# ###### \"\"\"; final var gameMap = TestHelper.parseGameMap(twoPlayersMap); final var playerIds = gameMap.getPlayerIds(); final var expectedIds = new HashSet<Integer>(); expectedIds.add(0); expectedIds.add(1); }",
        "C": "public Set<Integer> getPlayerIds() { // TODO Set<Integer> getplayerids = new HashSet<>(); for (Position position : hashEntity.keySet()) { if (hashEntity.get(position) instanceof Player p) { getplayerids.add(p.getId()); } } return getplayerids; }",
        "label": "P"
    },
    "1049": {
        "dataset": "COMP 3021",
        "project": "yhubv",
        "bug_id": "17",
        "T": "void testMapWithoutPlayer() { final var invalidMap = \"\"\" 233 ### #.# ### \"\"\"; } // @Tag(TestKind.HIDDEN) // @Test // void testUnmatchedPlayersAndBoxes() { // final var invalidMap = \"\"\" // 233 // ###### // #A..@# // #...@# // #a.b@# // #.a.@# // #..a.# // ###### // \"\"\"; // assertThrowsExactly(IllegalArgumentException.class, () -> TestHelper.parseGameMap(invalidMap)); // }",
        "C": "public TerminalRenderingEngine(PrintStream outputSteam) { this.outputSteam = outputSteam; }",
        "label": "P"
    },
    "1050": {
        "dataset": "COMP 3021",
        "project": "yhubv",
        "bug_id": "18",
        "T": "void testManyPlayersMap() { final var manyPlayersMap = \"\"\" 233 ###### #A.P@@# #vCB@@# #.cpD@# #Ga.d@# #g.bV@# ###### \"\"\"; final var gameMap = TestHelper.parseGameMap(manyPlayersMap); final var playerIds = gameMap.getPlayerIds(); final var expectedIds = new HashSet<>(Arrays.asList( 0, 'P' - 'A', 'C' - 'A', 'B' - 'A', 'D' - 'A', 'G' - 'A', 'V' - 'A' )); }",
        "C": "public Set<Integer> getPlayerIds() { // TODO Set<Integer> getplayerids = new HashSet<>(); for (Position position : hashEntity.keySet()) { if (hashEntity.get(position) instanceof Player p) { getplayerids.add(p.getId()); } } return getplayerids; }",
        "label": "P"
    },
    "1051": {
        "dataset": "COMP 3021",
        "project": "yhubv",
        "bug_id": "19",
        "T": "void testHeightForNonRectangularMap() { final var gameMap = TestHelper.parseGameMap(nonRectangularMap); }",
        "C": "",
        "label": "P"
    },
    "1052": {
        "dataset": "COMP 3021",
        "project": "yhubv",
        "bug_id": "20",
        "T": "void testDuplicatedPlayers() { final var invalidMap = \"\"\" 233 ###### #A..@# #..A@# #....# #.a..# #..b.# ###### \"\"\"; }",
        "C": "",
        "label": "P"
    },
    "1053": {
        "dataset": "COMP 3021",
        "project": "yhubv",
        "bug_id": "21",
        "T": "void testParseMapWithoutUndoLimit() { final var invalidMap = String.join(\"\\n\", rectangularMap.lines().skip(1).toList()); }",
        "C": "",
        "label": "P"
    },
    "1054": {
        "dataset": "COMP 3021",
        "project": "yhubv",
        "bug_id": "22",
        "T": "void testInsufficientDestinations() { final var invalidMap = \"\"\" 233 ###### #A..@# #...@# #a...# #.a..# #..a.# ###### \"\"\"; }",
        "C": "",
        "label": "P"
    },
    "1055": {
        "dataset": "COMP 3021",
        "project": "yhubv",
        "bug_id": "23",
        "T": "void testSuperLargeMap() { try { new GameMap(Integer.MAX_VALUE, Integer.MAX_VALUE, Collections.emptySet(), 0); } catch (OutOfMemoryError e) { throw new RuntimeException(e); } }); }",
        "C": "public GameMap(int maxWidth, int maxHeight, Set<Position> destinations, int undoLimit) { // TODO this.width = maxWidth; this.height = maxHeight; this.des = destinations; this.limitation = undoLimit; // Init the entity 2d-array for (int i = 0; i < this.height; i++) { List<Entity> temp = new ArrayList<>(width); for (int j = 0; j < this.width; j++) { temp.add(new Wall()); } // entity_array.add(temp); } } /** * Parses the map from a string representation. * The first line is undo limit. * Starting from the second line, the game map is represented as follows, * <li># represents a {@link Wall}</li> * <li>@ represents a box destination.</li> * <li>Any upper-case letter represents a {@link Player}.</li> * <li> * Any lower-case letter represents a {@link Box} that is only movable by the player with the corresponding upper-case letter. * For instance, box \"a\" can only be moved by player \"A\" and not movable by player \"B\". * </li> * <li>. represents an {@link Empty} position in the map, meaning there is no player or box currently at this position.</li> * <p> * Notes: * <li> * There can be at most 26 players. * All implementations of classes in the hk.ust.comp3021.game package should support up to 26 players. * </li> * <li> * For simplicity, we assume the given map is bounded with a closed boundary. * There is no need to check this point. * </li> * <li> * Example maps can be found in \"src/main/resources\". * </li> * * @param mapText The string representation. * @return The parsed GameMap object. * @throws IllegalArgumentException if undo limit is negative but not -1. * @throws IllegalArgumentException if there are multiple same upper-case letters, i.e., one player can only exist at one position. * @throws IllegalArgumentException if there are no players in the map. * @throws IllegalArgumentException if the number of boxes is not equal to the number of box destinations. * @throws IllegalArgumentException if there are boxes whose {@link Box#getPlayerId()} public TerminalRenderingEngine(PrintStream outputSteam) { this.outputSteam = outputSteam; }",
        "label": "F"
    },
    "1056": {
        "dataset": "COMP 3021",
        "project": "yhubv",
        "bug_id": "24",
        "T": "void testInvalidUndoLimit() { final var invalidMap = \"\"\" -233 ###### #A..@# #...@# #a.b@# #.a.@# #..a.# ###### \"\"\"; }",
        "C": "",
        "label": "P"
    },
    "1057": {
        "dataset": "COMP 3021",
        "project": "yhubv",
        "bug_id": "25",
        "T": "void testEmptyMap() { final var invalidMap = \"\"; }",
        "C": "",
        "label": "P"
    },
    "1058": {
        "dataset": "COMP 3021",
        "project": "yhubv",
        "bug_id": "26",
        "T": "void testMove(String input, String name, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); } private InputStream fixValueStream(String content) { final var bytes = content.getBytes(StandardCharsets.UTF_8); return new ByteArrayInputStream(bytes); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine(); Action action = switch (inputLine.toLowerCase()) { case \"exit\" : yield new Exit(0); case \"w\" : yield new Move.Up(0); case \"a\" : yield new Move.Left(0); case \"s\" : yield new Move.Down(0); case \"d\" : yield new Move.Right(0); case \"h\" : yield new Move.Left(1); case \"j\" : yield new Move.Down(1); case \"k\" : yield new Move.Up(1); case \"l\" : yield new Move.Right(1); case \"u\" : yield new Undo(0); default : yield new InvalidInput(0, \"Invalid Input.\"); }; // TODO return action; }",
        "label": "P"
    },
    "1059": {
        "dataset": "COMP 3021",
        "project": "yhubv",
        "bug_id": "27",
        "T": "void testMove(String input, String name, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); } private InputStream fixValueStream(String content) { final var bytes = content.getBytes(StandardCharsets.UTF_8); return new ByteArrayInputStream(bytes); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine(); Action action = switch (inputLine.toLowerCase()) { case \"exit\" : yield new Exit(0); case \"w\" : yield new Move.Up(0); case \"a\" : yield new Move.Left(0); case \"s\" : yield new Move.Down(0); case \"d\" : yield new Move.Right(0); case \"h\" : yield new Move.Left(1); case \"j\" : yield new Move.Down(1); case \"k\" : yield new Move.Up(1); case \"l\" : yield new Move.Right(1); case \"u\" : yield new Undo(0); default : yield new InvalidInput(0, \"Invalid Input.\"); }; // TODO return action; }",
        "label": "P"
    },
    "1060": {
        "dataset": "COMP 3021",
        "project": "yhubv",
        "bug_id": "28",
        "T": "void testMove(String input, String name, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); } private InputStream fixValueStream(String content) { final var bytes = content.getBytes(StandardCharsets.UTF_8); return new ByteArrayInputStream(bytes); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine(); Action action = switch (inputLine.toLowerCase()) { case \"exit\" : yield new Exit(0); case \"w\" : yield new Move.Up(0); case \"a\" : yield new Move.Left(0); case \"s\" : yield new Move.Down(0); case \"d\" : yield new Move.Right(0); case \"h\" : yield new Move.Left(1); case \"j\" : yield new Move.Down(1); case \"k\" : yield new Move.Up(1); case \"l\" : yield new Move.Right(1); case \"u\" : yield new Undo(0); default : yield new InvalidInput(0, \"Invalid Input.\"); }; // TODO return action; }",
        "label": "P"
    },
    "1061": {
        "dataset": "COMP 3021",
        "project": "yhubv",
        "bug_id": "29",
        "T": "void testMove(String input, String name, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); } private InputStream fixValueStream(String content) { final var bytes = content.getBytes(StandardCharsets.UTF_8); return new ByteArrayInputStream(bytes); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine(); Action action = switch (inputLine.toLowerCase()) { case \"exit\" : yield new Exit(0); case \"w\" : yield new Move.Up(0); case \"a\" : yield new Move.Left(0); case \"s\" : yield new Move.Down(0); case \"d\" : yield new Move.Right(0); case \"h\" : yield new Move.Left(1); case \"j\" : yield new Move.Down(1); case \"k\" : yield new Move.Up(1); case \"l\" : yield new Move.Right(1); case \"u\" : yield new Undo(0); default : yield new InvalidInput(0, \"Invalid Input.\"); }; // TODO return action; }",
        "label": "P"
    },
    "1062": {
        "dataset": "COMP 3021",
        "project": "yhubv",
        "bug_id": "30",
        "T": "void testMove(String input, String name, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); } private InputStream fixValueStream(String content) { final var bytes = content.getBytes(StandardCharsets.UTF_8); return new ByteArrayInputStream(bytes); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine(); Action action = switch (inputLine.toLowerCase()) { case \"exit\" : yield new Exit(0); case \"w\" : yield new Move.Up(0); case \"a\" : yield new Move.Left(0); case \"s\" : yield new Move.Down(0); case \"d\" : yield new Move.Right(0); case \"h\" : yield new Move.Left(1); case \"j\" : yield new Move.Down(1); case \"k\" : yield new Move.Up(1); case \"l\" : yield new Move.Right(1); case \"u\" : yield new Undo(0); default : yield new InvalidInput(0, \"Invalid Input.\"); }; // TODO return action; }",
        "label": "P"
    },
    "1063": {
        "dataset": "COMP 3021",
        "project": "yhubv",
        "bug_id": "31",
        "T": "void testMove(String input, String name, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); } private InputStream fixValueStream(String content) { final var bytes = content.getBytes(StandardCharsets.UTF_8); return new ByteArrayInputStream(bytes); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine(); Action action = switch (inputLine.toLowerCase()) { case \"exit\" : yield new Exit(0); case \"w\" : yield new Move.Up(0); case \"a\" : yield new Move.Left(0); case \"s\" : yield new Move.Down(0); case \"d\" : yield new Move.Right(0); case \"h\" : yield new Move.Left(1); case \"j\" : yield new Move.Down(1); case \"k\" : yield new Move.Up(1); case \"l\" : yield new Move.Right(1); case \"u\" : yield new Undo(0); default : yield new InvalidInput(0, \"Invalid Input.\"); }; // TODO return action; }",
        "label": "P"
    },
    "1064": {
        "dataset": "COMP 3021",
        "project": "yhubv",
        "bug_id": "32",
        "T": "void testMove(String input, String name, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); } private InputStream fixValueStream(String content) { final var bytes = content.getBytes(StandardCharsets.UTF_8); return new ByteArrayInputStream(bytes); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine(); Action action = switch (inputLine.toLowerCase()) { case \"exit\" : yield new Exit(0); case \"w\" : yield new Move.Up(0); case \"a\" : yield new Move.Left(0); case \"s\" : yield new Move.Down(0); case \"d\" : yield new Move.Right(0); case \"h\" : yield new Move.Left(1); case \"j\" : yield new Move.Down(1); case \"k\" : yield new Move.Up(1); case \"l\" : yield new Move.Right(1); case \"u\" : yield new Undo(0); default : yield new InvalidInput(0, \"Invalid Input.\"); }; // TODO return action; }",
        "label": "P"
    },
    "1065": {
        "dataset": "COMP 3021",
        "project": "yhubv",
        "bug_id": "33",
        "T": "void testMove(String input, String name, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); } private InputStream fixValueStream(String content) { final var bytes = content.getBytes(StandardCharsets.UTF_8); return new ByteArrayInputStream(bytes); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine(); Action action = switch (inputLine.toLowerCase()) { case \"exit\" : yield new Exit(0); case \"w\" : yield new Move.Up(0); case \"a\" : yield new Move.Left(0); case \"s\" : yield new Move.Down(0); case \"d\" : yield new Move.Right(0); case \"h\" : yield new Move.Left(1); case \"j\" : yield new Move.Down(1); case \"k\" : yield new Move.Up(1); case \"l\" : yield new Move.Right(1); case \"u\" : yield new Undo(0); default : yield new InvalidInput(0, \"Invalid Input.\"); }; // TODO return action; }",
        "label": "P"
    },
    "1066": {
        "dataset": "COMP 3021",
        "project": "yhubv",
        "bug_id": "34",
        "T": "void testUndo(String input, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine(); Action action = switch (inputLine.toLowerCase()) { case \"exit\" : yield new Exit(0); case \"w\" : yield new Move.Up(0); case \"a\" : yield new Move.Left(0); case \"s\" : yield new Move.Down(0); case \"d\" : yield new Move.Right(0); case \"h\" : yield new Move.Left(1); case \"j\" : yield new Move.Down(1); case \"k\" : yield new Move.Up(1); case \"l\" : yield new Move.Right(1); case \"u\" : yield new Undo(0); default : yield new InvalidInput(0, \"Invalid Input.\"); }; // TODO return action; }",
        "label": "P"
    },
    "1067": {
        "dataset": "COMP 3021",
        "project": "yhubv",
        "bug_id": "35",
        "T": "void testInvalidInput() { final var inputStream = fixValueStream(\"blah blah\"); final var inputEngine = new TerminalInputEngine(inputStream); final var action = inputEngine.fetchAction(); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine(); Action action = switch (inputLine.toLowerCase()) { case \"exit\" : yield new Exit(0); case \"w\" : yield new Move.Up(0); case \"a\" : yield new Move.Left(0); case \"s\" : yield new Move.Down(0); case \"d\" : yield new Move.Right(0); case \"h\" : yield new Move.Left(1); case \"j\" : yield new Move.Down(1); case \"k\" : yield new Move.Up(1); case \"l\" : yield new Move.Right(1); case \"u\" : yield new Undo(0); default : yield new InvalidInput(0, \"Invalid Input.\"); }; // TODO return action; }",
        "label": "P"
    },
    "1068": {
        "dataset": "COMP 3021",
        "project": "yhubv",
        "bug_id": "36",
        "T": "void testUndoWhenThereIsNoMove() { final var gameState = new GameState(TestHelper.parseGameMap(\"\"\" 233 ###### #A.a@# #..a@# ###### \"\"\" )); gameState.undo(); } private Entity generateEntity(int key) { return switch (key % 4) { case 0 -> new Box(0); case 1 -> new Empty(); case 2 -> new Player(0); case 3 -> new Wall(); default -> throw new ShouldNotReachException(); }; }",
        "C": "public GameState(@NotNull GameMap map) { // TODO this.width = map.getMaxWidth(); // System.out.println(WIDTH); this.height = map.getMaxHeight(); // System.out.println(HEIGHT); this.limit = map.getUndoLimit(); this.setDesPos = map.getDestinations(); // System.out.println(SET_DES_POS); this.playerId = map.getPlayerIds(); // hash entity need position as argument // copy the map and push by entity for (int i = 0; i < height; i++) { for (int j = 0; j < width; j++) { Entity currentEntity = map.getEntity(Position.of(j, i)); // MAP_ID_POS.put(current_entity, Position.of(i,j)); posEntity.put(Position.of(j, i), currentEntity); map.putEntity(Position.of(j, i), currentEntity); } } // System.out.println(POS_ENTITY); for (int i : playerId) { for (Position position : posEntity.keySet()) { if (posEntity.get(position) instanceof Player) { // System.out.println(\"here\"); // POS_ID.put(i, position); // System.out.println(POS_ID); allPlayer.add(position); } } } initMap = new HashMap<>(posEntity); } public void undo() { // TODO if (limit.isPresent()) { int undoLimit; if (limit.get() == -1) { undoLimit = limit.get(); } else { undoLimit = limit.get() - 1; } limit = Optional.of(undoLimit); } if (recordHash.size() == 0) { recordHash.add(new HashMap<>(initMap)); posEntity = new HashMap<>(initMap); } else if (recordHash.size() == 1) { recordHash.remove(0); posEntity = new HashMap<>(initMap); checkpoint(); } else { recordHash.remove(recordHash.size() - 1); if (recordHash.size() == 0) { posEntity = new HashMap<>(initMap); checkpoint(); } else { posEntity = new HashMap<>(recordHash.get(recordHash.size() - 1)); } } } /** * Get the maximum width of the game map. * This should be the same as that in {@link GameMap} public TerminalRenderingEngine(PrintStream outputSteam) { this.outputSteam = outputSteam; } public Box(int playerId) { this.playerId = playerId; } public Player(int id) { this.id = id; } public ShouldNotReachException() { super(\"This branch should not be reached.\"); }",
        "label": "F"
    },
    "1069": {
        "dataset": "COMP 3021",
        "project": "yhubv",
        "bug_id": "37",
        "T": "void testGetUndoUnlimited() { final var gameState = new GameState(TestHelper.parseGameMap(\"\"\" -1 ###### #.Aa@# #..a@# ###### \"\"\" )); }",
        "C": "public GameState(@NotNull GameMap map) { // TODO this.width = map.getMaxWidth(); // System.out.println(WIDTH); this.height = map.getMaxHeight(); // System.out.println(HEIGHT); this.limit = map.getUndoLimit(); this.setDesPos = map.getDestinations(); // System.out.println(SET_DES_POS); this.playerId = map.getPlayerIds(); // hash entity need position as argument // copy the map and push by entity for (int i = 0; i < height; i++) { for (int j = 0; j < width; j++) { Entity currentEntity = map.getEntity(Position.of(j, i)); // MAP_ID_POS.put(current_entity, Position.of(i,j)); posEntity.put(Position.of(j, i), currentEntity); map.putEntity(Position.of(j, i), currentEntity); } } // System.out.println(POS_ENTITY); for (int i : playerId) { for (Position position : posEntity.keySet()) { if (posEntity.get(position) instanceof Player) { // System.out.println(\"here\"); // POS_ID.put(i, position); // System.out.println(POS_ID); allPlayer.add(position); } } } initMap = new HashMap<>(posEntity); }",
        "label": "F"
    },
    "1070": {
        "dataset": "COMP 3021",
        "project": "yhubv",
        "bug_id": "38",
        "T": "void testMapCopying() { final var maxWidth = 2333; final var maxHeight = 2333; final var random = new Random(); final var randomEntities = Stream.generate(() -> Position.of(random.nextInt(maxWidth), random.nextInt(maxHeight))) .distinct() .limit(100) .collect(Collectors.toMap(Function.identity(), it -> generateEntity(it.x()))); final var firstPos = randomEntities.keySet().stream().findFirst(); final var gameMap = new GameMap(maxWidth, maxHeight, Collections.singleton(firstPos.get()), 233); randomEntities.forEach(gameMap::putEntity); final var gameState = new GameState(gameMap); final var randomPosition = randomEntities.keySet().stream().findAny(); gameMap.putEntity(randomPosition.get(), new Empty()); randomEntities.forEach((p, e) -> assertEquals(e, gameState.getEntity(p))); }",
        "C": "public static @NotNull Position of(int x, int y) { return new Position(x, y); } public GameMap(int maxWidth, int maxHeight, Set<Position> destinations, int undoLimit) { // TODO this.width = maxWidth; this.height = maxHeight; this.des = destinations; this.limitation = undoLimit; // Init the entity 2d-array for (int i = 0; i < this.height; i++) { List<Entity> temp = new ArrayList<>(width); for (int j = 0; j < this.width; j++) { temp.add(new Wall()); } // entity_array.add(temp); } } /** * Parses the map from a string representation. * The first line is undo limit. * Starting from the second line, the game map is represented as follows, * <li># represents a {@link Wall}</li> * <li>@ represents a box destination.</li> * <li>Any upper-case letter represents a {@link Player}.</li> * <li> * Any lower-case letter represents a {@link Box} that is only movable by the player with the corresponding upper-case letter. * For instance, box \"a\" can only be moved by player \"A\" and not movable by player \"B\". * </li> * <li>. represents an {@link Empty} position in the map, meaning there is no player or box currently at this position.</li> * <p> * Notes: * <li> * There can be at most 26 players. * All implementations of classes in the hk.ust.comp3021.game package should support up to 26 players. * </li> * <li> * For simplicity, we assume the given map is bounded with a closed boundary. * There is no need to check this point. * </li> * <li> * Example maps can be found in \"src/main/resources\". * </li> * * @param mapText The string representation. * @return The parsed GameMap object. * @throws IllegalArgumentException if undo limit is negative but not -1. * @throws IllegalArgumentException if there are multiple same upper-case letters, i.e., one player can only exist at one position. * @throws IllegalArgumentException if there are no players in the map. * @throws IllegalArgumentException if the number of boxes is not equal to the number of box destinations. * @throws IllegalArgumentException if there are boxes whose {@link Box#getPlayerId()} public GameState(@NotNull GameMap map) { // TODO this.width = map.getMaxWidth(); // System.out.println(WIDTH); this.height = map.getMaxHeight(); // System.out.println(HEIGHT); this.limit = map.getUndoLimit(); this.setDesPos = map.getDestinations(); // System.out.println(SET_DES_POS); this.playerId = map.getPlayerIds(); // hash entity need position as argument // copy the map and push by entity for (int i = 0; i < height; i++) { for (int j = 0; j < width; j++) { Entity currentEntity = map.getEntity(Position.of(j, i)); // MAP_ID_POS.put(current_entity, Position.of(i,j)); posEntity.put(Position.of(j, i), currentEntity); map.putEntity(Position.of(j, i), currentEntity); } } // System.out.println(POS_ENTITY); for (int i : playerId) { for (Position position : posEntity.keySet()) { if (posEntity.get(position) instanceof Player) { // System.out.println(\"here\"); // POS_ID.put(i, position); // System.out.println(POS_ID); allPlayer.add(position); } } } initMap = new HashMap<>(posEntity); } public void putEntity(Position position, Entity entity) { // TODO hashEntity.put(position, entity); } public @Nullable Entity getEntity(@NotNull Position position) { // TODO return posEntity.get(Position.of(position.x(), position.y())); } /** * Get all box destination positions as a set in the game map. * This should be the same as that in {@link GameMap}",
        "label": "F"
    },
    "1071": {
        "dataset": "COMP 3021",
        "project": "yhubv",
        "bug_id": "39",
        "T": "void testUndoWhenThereIsMoveButNoCheckpoint() { final var gameState = new GameState(TestHelper.parseGameMap(\"\"\" 233 ###### #A.a@# #..a@# ###### \"\"\" )); gameState.move(Position.of(1, 1), Position.of(2, 1)); gameState.undo(); }",
        "C": "public GameState(@NotNull GameMap map) { // TODO this.width = map.getMaxWidth(); // System.out.println(WIDTH); this.height = map.getMaxHeight(); // System.out.println(HEIGHT); this.limit = map.getUndoLimit(); this.setDesPos = map.getDestinations(); // System.out.println(SET_DES_POS); this.playerId = map.getPlayerIds(); // hash entity need position as argument // copy the map and push by entity for (int i = 0; i < height; i++) { for (int j = 0; j < width; j++) { Entity currentEntity = map.getEntity(Position.of(j, i)); // MAP_ID_POS.put(current_entity, Position.of(i,j)); posEntity.put(Position.of(j, i), currentEntity); map.putEntity(Position.of(j, i), currentEntity); } } // System.out.println(POS_ENTITY); for (int i : playerId) { for (Position position : posEntity.keySet()) { if (posEntity.get(position) instanceof Player) { // System.out.println(\"here\"); // POS_ID.put(i, position); // System.out.println(POS_ID); allPlayer.add(position); } } } initMap = new HashMap<>(posEntity); } public void move(Position from, Position to) { // TODO Entity entity = posEntity.get(Position.of(from.x(), from.y())); posEntity.put(Position.of(from.x(), from.y()), new Empty()); posEntity.put(Position.of(to.x(), to.y()), entity); } /** * Record a checkpoint of the game state, including: * <li>All current positions of entities in the game map.</li> * <li>Current undo quota</li> * <p> * Checkpoint is used in {@link GameState#undo()} public static @NotNull Position of(int x, int y) { return new Position(x, y); } public void undo() { // TODO if (limit.isPresent()) { int undoLimit; if (limit.get() == -1) { undoLimit = limit.get(); } else { undoLimit = limit.get() - 1; } limit = Optional.of(undoLimit); } if (recordHash.size() == 0) { recordHash.add(new HashMap<>(initMap)); posEntity = new HashMap<>(initMap); } else if (recordHash.size() == 1) { recordHash.remove(0); posEntity = new HashMap<>(initMap); checkpoint(); } else { recordHash.remove(recordHash.size() - 1); if (recordHash.size() == 0) { posEntity = new HashMap<>(initMap); checkpoint(); } else { posEntity = new HashMap<>(recordHash.get(recordHash.size() - 1)); } } } /** * Get the maximum width of the game map. * This should be the same as that in {@link GameMap}",
        "label": "F"
    },
    "1072": {
        "dataset": "COMP 3021",
        "project": "yhubv",
        "bug_id": "40",
        "T": "void testGameExit() { final var gameState = mock(GameState.class); final var inputEngine = mock(TerminalInputEngine.class); final var renderingEngine = mock(TerminalRenderingEngine.class); when(gameState.isWin()).thenReturn(false, false, false); when(inputEngine.fetchAction()) .thenReturn(new InvalidInput(0, \"\"), new InvalidInput(0, \"\"), new Exit(0)); final var game = new TerminalSokobanGame(gameState, inputEngine, renderingEngine); game.run(); verify(renderingEngine, atLeastOnce()).message(any()); }",
        "C": "public InvalidInput(int initiator, @NotNull String message) { super(initiator); this.message = message; } public Exit(int initiator) { super(initiator); } public TerminalSokobanGame(GameState gameState, TerminalInputEngine inputEngine, TerminalRenderingEngine renderingEngine) { super(gameState); this.inputEngine = inputEngine; this.renderingEngine = renderingEngine; // TODO // Check the number of players if (gameState.getAllPlayerPositions().size() > 2) { throw new IllegalArgumentException(); } } public void run() { // TODO renderingEngine.message(\"Sokoban game is ready.\"); renderingEngine.render(state); if (state.getUndoQuota().isEmpty() || state.getUndoQuota().get() == -1) { renderingEngine.message(\"Unlimited\"); } else { renderingEngine.message(String.valueOf(state.getUndoQuota().get())); } renderingEngine.message(\">>>\"); do { Action action = inputEngine.fetchAction(); switch (action) { case Move.Up up -> { ActionResult actionResult = processAction(up); if (actionResult instanceof ActionResult.Success) { renderingEngine.render(state); if (!state.isWin()) { if (state.getUndoQuota().get() == -1) { renderingEngine.message(\"Unlimited\"); } else { renderingEngine.message(String.valueOf(state.getUndoQuota().get())); } } } else if (actionResult instanceof ActionResult.Failed f) { renderingEngine.message(f.getReason()); renderingEngine.render(state); if (state.getUndoQuota().get() == -1) { renderingEngine.message(\"Unlimited\"); } else { renderingEngine.message(String.valueOf(state.getUndoQuota().get())); } } } case Move.Down down -> { ActionResult actionResult = processAction(down); if (actionResult instanceof ActionResult.Success) { renderingEngine.render(state); if (!state.isWin()) { if (state.getUndoQuota().get() == -1) { renderingEngine.message(\"Unlimited\"); } else { renderingEngine.message(String.valueOf(state.getUndoQuota().get())); } } } else if (actionResult instanceof ActionResult.Failed f) { renderingEngine.message(f.getReason()); renderingEngine.render(state); if (state.getUndoQuota().get() == -1) { renderingEngine.message(\"Unlimited\"); } else { renderingEngine.message(String.valueOf(state.getUndoQuota().get())); } } } case Move.Left left -> { ActionResult actionResult = processAction(left); if (actionResult instanceof ActionResult.Success) { renderingEngine.render(state); if (!state.isWin()) { if (state.getUndoQuota().get() == -1) { renderingEngine.message(\"Unlimited\"); } else { renderingEngine.message(String.valueOf(state.getUndoQuota().get())); } } } else if (actionResult instanceof ActionResult.Failed f) { renderingEngine.message(f.getReason()); renderingEngine.render(state); if (state.getUndoQuota().get() == -1) { renderingEngine.message(\"Unlimited\"); } else { renderingEngine.message(String.valueOf(state.getUndoQuota().get())); } } } case Move.Right right -> { ActionResult actionResult = processAction(right); if (actionResult instanceof ActionResult.Success) { renderingEngine.render(state); if (!state.isWin()) { if (state.getUndoQuota().get() == -1) { renderingEngine.message(\"Unlimited\"); } else { renderingEngine.message(String.valueOf(state.getUndoQuota().get())); } } } else if (actionResult instanceof ActionResult.Failed f) { renderingEngine.message(f.getReason()); renderingEngine.render(state); if (state.getUndoQuota().get() == -1) { renderingEngine.message(\"Unlimited\"); } else { renderingEngine.message(String.valueOf(state.getUndoQuota().get())); } } } case InvalidInput invalidInput -> { ActionResult actionResult = processAction(invalidInput); // Here to start if (actionResult instanceof ActionResult.Failed f) { renderingEngine.message(f.getReason()); renderingEngine.render(state); if (state.getUndoQuota().isEmpty()) { renderingEngine.message(\"Unlimited\"); } else { renderingEngine.message(String.valueOf(state.getUndoQuota().get())); } } else { renderingEngine.message(invalidInput.getMessage()); } } case Undo undo -> { ActionResult actionResult = processAction(undo); if (actionResult instanceof ActionResult.Success) { renderingEngine.render(state); // System.out.println(state.getUndoQuota().get()); if (state.getUndoQuota().get() == -1) { // -1 in previous) { renderingEngine.message(\"Unlimited\"); } else { renderingEngine.message(String.valueOf(state.getUndoQuota().get())); } // state.checkpoint(); } else if (actionResult instanceof ActionResult.Failed) { renderingEngine.message(\"You have run out of your undo quota.\"); renderingEngine.render(state); } } case Exit exit -> { ActionResult ignored = processAction(exit); renderingEngine.render(state); renderingEngine.message(\"Game exits.\"); } } if (!shouldStop()) { renderingEngine.message(\">>>\"); } } while (!shouldStop()); if (state.isWin()) { renderingEngine.message(\"Game exits.\"); renderingEngine.message(\"You win.\"); } }",
        "label": "P"
    },
    "1073": {
        "dataset": "COMP 3021",
        "project": "yhubv",
        "bug_id": "41",
        "T": "void testGameWin() { final var gameState = mock(GameState.class); final var inputEngine = mock(TerminalInputEngine.class); final var renderingEngine = mock(TerminalRenderingEngine.class); when(gameState.isWin()).thenReturn(false, false, false, true); when(inputEngine.fetchAction()) .thenReturn(new InvalidInput(0, \"\")); final var game = new TerminalSokobanGame(gameState, inputEngine, renderingEngine); game.run(); verify(gameState, atLeastOnce()).isWin(); verify(renderingEngine, atLeastOnce()).message(any()); }",
        "C": "public InvalidInput(int initiator, @NotNull String message) { super(initiator); this.message = message; } public TerminalSokobanGame(GameState gameState, TerminalInputEngine inputEngine, TerminalRenderingEngine renderingEngine) { super(gameState); this.inputEngine = inputEngine; this.renderingEngine = renderingEngine; // TODO // Check the number of players if (gameState.getAllPlayerPositions().size() > 2) { throw new IllegalArgumentException(); } } public void run() { // TODO renderingEngine.message(\"Sokoban game is ready.\"); renderingEngine.render(state); if (state.getUndoQuota().isEmpty() || state.getUndoQuota().get() == -1) { renderingEngine.message(\"Unlimited\"); } else { renderingEngine.message(String.valueOf(state.getUndoQuota().get())); } renderingEngine.message(\">>>\"); do { Action action = inputEngine.fetchAction(); switch (action) { case Move.Up up -> { ActionResult actionResult = processAction(up); if (actionResult instanceof ActionResult.Success) { renderingEngine.render(state); if (!state.isWin()) { if (state.getUndoQuota().get() == -1) { renderingEngine.message(\"Unlimited\"); } else { renderingEngine.message(String.valueOf(state.getUndoQuota().get())); } } } else if (actionResult instanceof ActionResult.Failed f) { renderingEngine.message(f.getReason()); renderingEngine.render(state); if (state.getUndoQuota().get() == -1) { renderingEngine.message(\"Unlimited\"); } else { renderingEngine.message(String.valueOf(state.getUndoQuota().get())); } } } case Move.Down down -> { ActionResult actionResult = processAction(down); if (actionResult instanceof ActionResult.Success) { renderingEngine.render(state); if (!state.isWin()) { if (state.getUndoQuota().get() == -1) { renderingEngine.message(\"Unlimited\"); } else { renderingEngine.message(String.valueOf(state.getUndoQuota().get())); } } } else if (actionResult instanceof ActionResult.Failed f) { renderingEngine.message(f.getReason()); renderingEngine.render(state); if (state.getUndoQuota().get() == -1) { renderingEngine.message(\"Unlimited\"); } else { renderingEngine.message(String.valueOf(state.getUndoQuota().get())); } } } case Move.Left left -> { ActionResult actionResult = processAction(left); if (actionResult instanceof ActionResult.Success) { renderingEngine.render(state); if (!state.isWin()) { if (state.getUndoQuota().get() == -1) { renderingEngine.message(\"Unlimited\"); } else { renderingEngine.message(String.valueOf(state.getUndoQuota().get())); } } } else if (actionResult instanceof ActionResult.Failed f) { renderingEngine.message(f.getReason()); renderingEngine.render(state); if (state.getUndoQuota().get() == -1) { renderingEngine.message(\"Unlimited\"); } else { renderingEngine.message(String.valueOf(state.getUndoQuota().get())); } } } case Move.Right right -> { ActionResult actionResult = processAction(right); if (actionResult instanceof ActionResult.Success) { renderingEngine.render(state); if (!state.isWin()) { if (state.getUndoQuota().get() == -1) { renderingEngine.message(\"Unlimited\"); } else { renderingEngine.message(String.valueOf(state.getUndoQuota().get())); } } } else if (actionResult instanceof ActionResult.Failed f) { renderingEngine.message(f.getReason()); renderingEngine.render(state); if (state.getUndoQuota().get() == -1) { renderingEngine.message(\"Unlimited\"); } else { renderingEngine.message(String.valueOf(state.getUndoQuota().get())); } } } case InvalidInput invalidInput -> { ActionResult actionResult = processAction(invalidInput); // Here to start if (actionResult instanceof ActionResult.Failed f) { renderingEngine.message(f.getReason()); renderingEngine.render(state); if (state.getUndoQuota().isEmpty()) { renderingEngine.message(\"Unlimited\"); } else { renderingEngine.message(String.valueOf(state.getUndoQuota().get())); } } else { renderingEngine.message(invalidInput.getMessage()); } } case Undo undo -> { ActionResult actionResult = processAction(undo); if (actionResult instanceof ActionResult.Success) { renderingEngine.render(state); // System.out.println(state.getUndoQuota().get()); if (state.getUndoQuota().get() == -1) { // -1 in previous) { renderingEngine.message(\"Unlimited\"); } else { renderingEngine.message(String.valueOf(state.getUndoQuota().get())); } // state.checkpoint(); } else if (actionResult instanceof ActionResult.Failed) { renderingEngine.message(\"You have run out of your undo quota.\"); renderingEngine.render(state); } } case Exit exit -> { ActionResult ignored = processAction(exit); renderingEngine.render(state); renderingEngine.message(\"Game exits.\"); } } if (!shouldStop()) { renderingEngine.message(\">>>\"); } } while (!shouldStop()); if (state.isWin()) { renderingEngine.message(\"Game exits.\"); renderingEngine.message(\"You win.\"); } }",
        "label": "P"
    },
    "1074": {
        "dataset": "COMP 3021",
        "project": "yhubv",
        "bug_id": "42",
        "T": "void testMoreThanTwoPlayers() { final var gameState = mock(GameState.class); final var inputEngine = mock(TerminalInputEngine.class); final var renderingEngine = mock(TerminalRenderingEngine.class); when(gameState.getAllPlayerPositions()).thenReturn(new HashSet<>(Arrays.asList(Position.of(1, 1), Position.of(1, 2), Position.of(1, 3)))); }",
        "C": "public static @NotNull Position of(int x, int y) { return new Position(x, y); }",
        "label": "P"
    },
    "1075": {
        "dataset": "COMP 3021",
        "project": "yhlauak",
        "bug_id": "0",
        "T": "void moveUp() { Position.of(233, 232), new Move.Up(-1).nextPosition(pos) ); }",
        "C": "public static @NotNull Position of(int x, int y) { return new Position(x, y); } public Up(int initiator) { super(initiator); }",
        "label": "P"
    },
    "1076": {
        "dataset": "COMP 3021",
        "project": "yhlauak",
        "bug_id": "1",
        "T": "void moveDown() { Position.of(233, 234), new Move.Down(-1).nextPosition(pos) ); }",
        "C": "public static @NotNull Position of(int x, int y) { return new Position(x, y); } public Down(int initiator) { super(initiator); }",
        "label": "P"
    },
    "1077": {
        "dataset": "COMP 3021",
        "project": "yhlauak",
        "bug_id": "2",
        "T": "void moveRight() { Position.of(234, 233), new Move.Right(-1).nextPosition(pos) ); }",
        "C": "public static @NotNull Position of(int x, int y) { return new Position(x, y); } public Right(int initiator) { super(initiator); }",
        "label": "P"
    },
    "1078": {
        "dataset": "COMP 3021",
        "project": "yhlauak",
        "bug_id": "3",
        "T": "void testExceedingUndoQuota() { final var gameState = mock(GameState.class); when(gameState.getPlayerPositionById(anyInt())).thenReturn(Position.of(0, 0)); when(gameState.getUndoQuota()).thenReturn(Optional.of(0)); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Undo(0)); }",
        "C": "public Undo(int initiator) { super(initiator); }",
        "label": "P"
    },
    "1079": {
        "dataset": "COMP 3021",
        "project": "yhlauak",
        "bug_id": "4",
        "T": "void testExit() { final var gameState = mock(GameState.class); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Exit(0)); }",
        "C": "public Exit(int initiator) { super(initiator); }",
        "label": "P"
    },
    "1080": {
        "dataset": "COMP 3021",
        "project": "yhlauak",
        "bug_id": "5",
        "T": "void testUndoUnlimited() { final var gameState = mock(GameState.class); when(gameState.getPlayerPositionById(anyInt())).thenReturn(Position.of(0, 0)); when(gameState.getUndoQuota()).thenReturn(Optional.empty()); final var game = new SokobanGameForTesting(gameState); for (int i = 0; i < 10000; i++) { final var result = game.feedActionForProcessing(new Undo(0)); } verify(gameState, times(10000)).undo(); }",
        "C": "public Undo(int initiator) { super(initiator); }",
        "label": "F"
    },
    "1081": {
        "dataset": "COMP 3021",
        "project": "yhlauak",
        "bug_id": "6",
        "T": "void testPushOtherPlayerBox() { String mapText = \"\"\" 233 ###### #AB.@# #b.a.# #@...# ###### \"\"\"; final var testMap = TestHelper.parseGameMap(mapText); final var gameState = spy(new GameState(testMap)); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Move.Down(0)); verify(gameState, never()).move(any(), any()); }",
        "C": "public GameState(@NotNull GameMap map) { this.map = map; undosLeft = map.getUndoLimit(); entityMap = new HashMap(map.getEntityMap()); } public Down(int initiator) { super(initiator); }",
        "label": "P"
    },
    "1082": {
        "dataset": "COMP 3021",
        "project": "yhlauak",
        "bug_id": "7",
        "T": "void testMoveNonExistingPlayer() { String mapText = \"\"\" 233 ###### #A..@# #a...# ##...# ###### \"\"\"; final var testMap = TestHelper.parseGameMap(mapText); final var gameState = spy(new GameState(testMap)); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Move.Down(23)); }",
        "C": "public GameState(@NotNull GameMap map) { this.map = map; undosLeft = map.getUndoLimit(); entityMap = new HashMap(map.getEntityMap()); } public Down(int initiator) { super(initiator); }",
        "label": "P"
    },
    "1083": {
        "dataset": "COMP 3021",
        "project": "yhlauak",
        "bug_id": "8",
        "T": "void testCheckpointWhenNeed() { final var gameState = spy(new GameState(TestHelper.parseGameMap(\"\"\" 233 ###### #.Aa@# #..a@# ###### \"\"\" ))); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Move.Right(0)); verify(gameState, times(1)).checkpoint(); }",
        "C": "public GameState(@NotNull GameMap map) { this.map = map; undosLeft = map.getUndoLimit(); entityMap = new HashMap(map.getEntityMap()); } public Right(int initiator) { super(initiator); }",
        "label": "P"
    },
    "1084": {
        "dataset": "COMP 3021",
        "project": "yhlauak",
        "bug_id": "9",
        "T": "void testPushBoxAgainstWall() { String mapText = \"\"\" 233 ###### #A..@# #a...# ##...# ###### \"\"\"; final var testMap = TestHelper.parseGameMap(mapText); final var gameState = spy(new GameState(testMap)); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Move.Down(0)); verify(gameState, never()).move(any(), any()); }",
        "C": "public GameState(@NotNull GameMap map) { this.map = map; undosLeft = map.getUndoLimit(); entityMap = new HashMap(map.getEntityMap()); } public Down(int initiator) { super(initiator); }",
        "label": "P"
    },
    "1085": {
        "dataset": "COMP 3021",
        "project": "yhlauak",
        "bug_id": "10",
        "T": "void testCheckpointWhenNotNeed() { final var gameState = spy(new GameState(TestHelper.parseGameMap(\"\"\" 233 ###### #A.a@# #..a@# ###### \"\"\" ))); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Move.Right(0)); verify(gameState, never()).checkpoint(); } private static class SokobanGameForTesting extends AbstractSokobanGame { protected SokobanGameForTesting(GameState gameState) { super(gameState); } @Override public void run() { } public ActionResult feedActionForProcessing(Action action) { return processAction(action); } }",
        "C": "public GameState(@NotNull GameMap map) { this.map = map; undosLeft = map.getUndoLimit(); entityMap = new HashMap(map.getEntityMap()); } public Right(int initiator) { super(initiator); } public void run() { while (!shouldStop()) { this.renderingEngine.message(\">>>\"); var action = inputEngine.fetchAction(); var result = processAction(action); switch (result) { case ActionResult.Failed f: renderingEngine.message(f.getReason()); renderingEngine.render(state); break; case ActionResult.Success ignored: renderingEngine.render(state); } if (shouldStop()) { this.renderingEngine.message(\"Game exits.\"); if (state.isWin()) { this.renderingEngine.message(\"You win.\"); } } else if (state.getUndoQuota().isPresent()) { this.renderingEngine.message(\"Undo Quota: \" + state.getUndoQuota().get()); } else { this.renderingEngine.message(\"Unlimited\"); } } } protected ActionResult processAction(@NotNull Action action) { switch (action) { case Move m: var currPos = state.getPlayerPositionById(m.getInitiator()); if (currPos == null) { return new ActionResult.Failed(m,\"Player not found.\"); } var nextPos = m.nextPosition(currPos); var targetEntity = state.getEntity(nextPos); switch (targetEntity) { case Player ignored: return new ActionResult.Failed(m,\"You hit another player.\"); case Wall ignored: return new ActionResult.Failed(m,\"You hit a wall.\"); case Empty ignored: state.move(currPos, nextPos); return new ActionResult.Success(m); case Box b: if (b.getPlayerId() != m.getInitiator()) return new ActionResult.Failed(m, \"You cannot move other players' boxes.\"); var currBoxPos = nextPos; var nextBoxPos = m.nextPosition(currBoxPos); var targetBoxEntity = state.getEntity(nextBoxPos); if (!(targetBoxEntity instanceof Empty)) return new ActionResult.Failed(m, \"Failed to push the box.\"); state.move(currBoxPos, nextBoxPos); state.move(currPos, nextPos); state.checkpoint(); return new ActionResult.Success(m); } break; case InvalidInput i: return new ActionResult.Failed(i,\"Invalid Input.\"); case Undo u: var undos = state.getUndoQuota(); if (undos.get() > 0) { state.undo(); return new ActionResult.Success(u); } return new ActionResult.Failed(u, \"You have run out of your undo quota.\"); case Exit e: isExiting = true; return new ActionResult.Success(e); } return new ActionResult.Failed(action, \"Unknown reason\"); }",
        "label": "P"
    },
    "1086": {
        "dataset": "COMP 3021",
        "project": "yhlauak",
        "bug_id": "11",
        "T": "void testHitAnotherPlayer() { String mapText = \"\"\" 233 ###### #A..@# #B...# #ab.@# ###### \"\"\"; final var testMap = TestHelper.parseGameMap(mapText); final var gameState = spy(new GameState(testMap)); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Move.Down(0)); verify(gameState, never()).move(any(), any()); }",
        "C": "public GameState(@NotNull GameMap map) { this.map = map; undosLeft = map.getUndoLimit(); entityMap = new HashMap(map.getEntityMap()); } public Down(int initiator) { super(initiator); }",
        "label": "P"
    },
    "1087": {
        "dataset": "COMP 3021",
        "project": "yhlauak",
        "bug_id": "12",
        "T": "void testUndoWithinQuota() { final var gameState = mock(GameState.class); when(gameState.getPlayerPositionById(anyInt())).thenReturn(Position.of(0, 0)); when(gameState.getUndoQuota()).thenReturn(Optional.of(1)); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Undo(0)); verify(gameState, times(1)).undo(); }",
        "C": "public Undo(int initiator) { super(initiator); }",
        "label": "P"
    },
    "1088": {
        "dataset": "COMP 3021",
        "project": "yhlauak",
        "bug_id": "13",
        "T": "void testInvalidInput() { final var game = new SokobanGameForTesting(mock(GameState.class)); final var message = String.valueOf(new Random().nextLong()); final var action = new InvalidInput(-1, message); final var result = game.feedActionForProcessing(action); }",
        "C": "public InvalidInput(int initiator, @NotNull String message) { super(initiator); this.message = message; }",
        "label": "P"
    },
    "1089": {
        "dataset": "COMP 3021",
        "project": "yhlauak",
        "bug_id": "14",
        "T": "void testUndoLimitParsing() { final var gameMap = TestHelper.parseGameMap(rectangularMap); }",
        "C": "",
        "label": "P"
    },
    "1090": {
        "dataset": "COMP 3021",
        "project": "yhlauak",
        "bug_id": "15",
        "T": "void testWidthForNonRectangularMap() { final var gameMap = TestHelper.parseGameMap(nonRectangularMap); }",
        "C": "",
        "label": "P"
    },
    "1091": {
        "dataset": "COMP 3021",
        "project": "yhlauak",
        "bug_id": "16",
        "T": "void testTwoPlayersMap() { final var twoPlayersMap = \"\"\" 233 ###### #A..@# #..B@# #....# #.a..# #..b.# ###### \"\"\"; final var gameMap = TestHelper.parseGameMap(twoPlayersMap); final var playerIds = gameMap.getPlayerIds(); final var expectedIds = new HashSet<Integer>(); expectedIds.add(0); expectedIds.add(1); }",
        "C": "public Set<Integer> getPlayerIds() { return playersIds; }",
        "label": "P"
    },
    "1092": {
        "dataset": "COMP 3021",
        "project": "yhlauak",
        "bug_id": "17",
        "T": "void testMapWithoutPlayer() { final var invalidMap = \"\"\" 233 ### #.# ### \"\"\"; } // @Tag(TestKind.HIDDEN) // @Test // void testUnmatchedPlayersAndBoxes() { // final var invalidMap = \"\"\" // 233 // ###### // #A..@# // #...@# // #a.b@# // #.a.@# // #..a.# // ###### // \"\"\"; // assertThrowsExactly(IllegalArgumentException.class, () -> TestHelper.parseGameMap(invalidMap)); // }",
        "C": "",
        "label": "P"
    },
    "1093": {
        "dataset": "COMP 3021",
        "project": "yhlauak",
        "bug_id": "18",
        "T": "void testManyPlayersMap() { final var manyPlayersMap = \"\"\" 233 ###### #A.P@@# #vCB@@# #.cpD@# #Ga.d@# #g.bV@# ###### \"\"\"; final var gameMap = TestHelper.parseGameMap(manyPlayersMap); final var playerIds = gameMap.getPlayerIds(); final var expectedIds = new HashSet<>(Arrays.asList( 0, 'P' - 'A', 'C' - 'A', 'B' - 'A', 'D' - 'A', 'G' - 'A', 'V' - 'A' )); }",
        "C": "public Set<Integer> getPlayerIds() { return playersIds; }",
        "label": "P"
    },
    "1094": {
        "dataset": "COMP 3021",
        "project": "yhlauak",
        "bug_id": "19",
        "T": "void testHeightForNonRectangularMap() { final var gameMap = TestHelper.parseGameMap(nonRectangularMap); }",
        "C": "",
        "label": "P"
    },
    "1095": {
        "dataset": "COMP 3021",
        "project": "yhlauak",
        "bug_id": "20",
        "T": "void testDuplicatedPlayers() { final var invalidMap = \"\"\" 233 ###### #A..@# #..A@# #....# #.a..# #..b.# ###### \"\"\"; }",
        "C": "",
        "label": "P"
    },
    "1096": {
        "dataset": "COMP 3021",
        "project": "yhlauak",
        "bug_id": "21",
        "T": "void testParseMapWithoutUndoLimit() { final var invalidMap = String.join(\"\\n\", rectangularMap.lines().skip(1).toList()); }",
        "C": "",
        "label": "P"
    },
    "1097": {
        "dataset": "COMP 3021",
        "project": "yhlauak",
        "bug_id": "22",
        "T": "void testInsufficientDestinations() { final var invalidMap = \"\"\" 233 ###### #A..@# #...@# #a...# #.a..# #..a.# ###### \"\"\"; }",
        "C": "",
        "label": "P"
    },
    "1098": {
        "dataset": "COMP 3021",
        "project": "yhlauak",
        "bug_id": "23",
        "T": "void testSuperLargeMap() { try { new GameMap(Integer.MAX_VALUE, Integer.MAX_VALUE, Collections.emptySet(), 0); } catch (OutOfMemoryError e) { throw new RuntimeException(e); } }); }",
        "C": "public GameMap(int maxWidth, int maxHeight, Set<Position> destinations, int undoLimit) { this.maxWidth = maxWidth; this.maxHeight = maxHeight; this.destinations = destinations; if (undoLimit == -1) { this.undoLimit = Optional.empty(); } else if (undoLimit >= 0) { this.undoLimit = Optional.of(undoLimit); } else { throw new IllegalArgumentException(); } } /** * Parses the map from a string representation. * The first line is undo limit. * Starting from the second line, the game map is represented as follows, * <li># represents a {@link Wall}</li> * <li>@ represents a box destination.</li> * <li>Any upper-case letter represents a {@link Player}.</li> * <li> * Any lower-case letter represents a {@link Box} that is only movable by the player with the corresponding upper-case letter. * For instance, box \"a\" can only be moved by player \"A\" and not movable by player \"B\". * </li> * <li>. represents an {@link Empty} position in the map, meaning there is no player or box currently at this position.</li> * <p> * Notes: * <li> * There can be at most 26 players. * All implementations of classes in the hk.ust.comp3021.game package should support up to 26 players. * </li> * <li> * For simplicity, we assume the given map is bounded with a closed boundary. * There is no need to check this point. * </li> * <li> * Example maps can be found in \"src/main/resources\". * </li> * * @param mapText The string representation. * @return The parsed GameMap object. * @throws IllegalArgumentException if undo limit is negative but not -1. * @throws IllegalArgumentException if there are multiple same upper-case letters, i.e., one player can only exist at one position. * @throws IllegalArgumentException if there are no players in the map. * @throws IllegalArgumentException if the number of boxes is not equal to the number of box destinations. * @throws IllegalArgumentException if there are boxes whose {@link Box#getPlayerId()}",
        "label": "P"
    },
    "1099": {
        "dataset": "COMP 3021",
        "project": "yhlauak",
        "bug_id": "24",
        "T": "void testInvalidUndoLimit() { final var invalidMap = \"\"\" -233 ###### #A..@# #...@# #a.b@# #.a.@# #..a.# ###### \"\"\"; }",
        "C": "",
        "label": "P"
    },
    "1100": {
        "dataset": "COMP 3021",
        "project": "yhlauak",
        "bug_id": "25",
        "T": "void testEmptyMap() { final var invalidMap = \"\"; }",
        "C": "",
        "label": "P"
    },
    "1101": {
        "dataset": "COMP 3021",
        "project": "yhlauak",
        "bug_id": "26",
        "T": "void testMove(String input, String name, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); } private InputStream fixValueStream(String content) { final var bytes = content.getBytes(StandardCharsets.UTF_8); return new ByteArrayInputStream(bytes); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine(); switch (inputLine.toLowerCase()) { case \"w\": return new Move.Up(0); case \"a\": return new Move.Left(0); case \"s\": return new Move.Down(0); case \"d\": return new Move.Right(0); case \"h\": return new Move.Left(1); case \"j\": return new Move.Down(1); case \"k\": return new Move.Up(1); case \"l\": return new Move.Right(1); case \"u\": return new Undo(-1); case \"exit\": return new Exit(-1); default: return new InvalidInput(-1, \"Invalid input!\"); } }",
        "label": "P"
    },
    "1102": {
        "dataset": "COMP 3021",
        "project": "yhlauak",
        "bug_id": "27",
        "T": "void testMove(String input, String name, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); } private InputStream fixValueStream(String content) { final var bytes = content.getBytes(StandardCharsets.UTF_8); return new ByteArrayInputStream(bytes); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine(); switch (inputLine.toLowerCase()) { case \"w\": return new Move.Up(0); case \"a\": return new Move.Left(0); case \"s\": return new Move.Down(0); case \"d\": return new Move.Right(0); case \"h\": return new Move.Left(1); case \"j\": return new Move.Down(1); case \"k\": return new Move.Up(1); case \"l\": return new Move.Right(1); case \"u\": return new Undo(-1); case \"exit\": return new Exit(-1); default: return new InvalidInput(-1, \"Invalid input!\"); } }",
        "label": "P"
    },
    "1103": {
        "dataset": "COMP 3021",
        "project": "yhlauak",
        "bug_id": "28",
        "T": "void testMove(String input, String name, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); } private InputStream fixValueStream(String content) { final var bytes = content.getBytes(StandardCharsets.UTF_8); return new ByteArrayInputStream(bytes); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine(); switch (inputLine.toLowerCase()) { case \"w\": return new Move.Up(0); case \"a\": return new Move.Left(0); case \"s\": return new Move.Down(0); case \"d\": return new Move.Right(0); case \"h\": return new Move.Left(1); case \"j\": return new Move.Down(1); case \"k\": return new Move.Up(1); case \"l\": return new Move.Right(1); case \"u\": return new Undo(-1); case \"exit\": return new Exit(-1); default: return new InvalidInput(-1, \"Invalid input!\"); } }",
        "label": "P"
    },
    "1104": {
        "dataset": "COMP 3021",
        "project": "yhlauak",
        "bug_id": "29",
        "T": "void testMove(String input, String name, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); } private InputStream fixValueStream(String content) { final var bytes = content.getBytes(StandardCharsets.UTF_8); return new ByteArrayInputStream(bytes); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine(); switch (inputLine.toLowerCase()) { case \"w\": return new Move.Up(0); case \"a\": return new Move.Left(0); case \"s\": return new Move.Down(0); case \"d\": return new Move.Right(0); case \"h\": return new Move.Left(1); case \"j\": return new Move.Down(1); case \"k\": return new Move.Up(1); case \"l\": return new Move.Right(1); case \"u\": return new Undo(-1); case \"exit\": return new Exit(-1); default: return new InvalidInput(-1, \"Invalid input!\"); } }",
        "label": "P"
    },
    "1105": {
        "dataset": "COMP 3021",
        "project": "yhlauak",
        "bug_id": "30",
        "T": "void testMove(String input, String name, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); } private InputStream fixValueStream(String content) { final var bytes = content.getBytes(StandardCharsets.UTF_8); return new ByteArrayInputStream(bytes); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine(); switch (inputLine.toLowerCase()) { case \"w\": return new Move.Up(0); case \"a\": return new Move.Left(0); case \"s\": return new Move.Down(0); case \"d\": return new Move.Right(0); case \"h\": return new Move.Left(1); case \"j\": return new Move.Down(1); case \"k\": return new Move.Up(1); case \"l\": return new Move.Right(1); case \"u\": return new Undo(-1); case \"exit\": return new Exit(-1); default: return new InvalidInput(-1, \"Invalid input!\"); } }",
        "label": "P"
    },
    "1106": {
        "dataset": "COMP 3021",
        "project": "yhlauak",
        "bug_id": "31",
        "T": "void testMove(String input, String name, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); } private InputStream fixValueStream(String content) { final var bytes = content.getBytes(StandardCharsets.UTF_8); return new ByteArrayInputStream(bytes); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine(); switch (inputLine.toLowerCase()) { case \"w\": return new Move.Up(0); case \"a\": return new Move.Left(0); case \"s\": return new Move.Down(0); case \"d\": return new Move.Right(0); case \"h\": return new Move.Left(1); case \"j\": return new Move.Down(1); case \"k\": return new Move.Up(1); case \"l\": return new Move.Right(1); case \"u\": return new Undo(-1); case \"exit\": return new Exit(-1); default: return new InvalidInput(-1, \"Invalid input!\"); } }",
        "label": "P"
    },
    "1107": {
        "dataset": "COMP 3021",
        "project": "yhlauak",
        "bug_id": "32",
        "T": "void testMove(String input, String name, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); } private InputStream fixValueStream(String content) { final var bytes = content.getBytes(StandardCharsets.UTF_8); return new ByteArrayInputStream(bytes); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine(); switch (inputLine.toLowerCase()) { case \"w\": return new Move.Up(0); case \"a\": return new Move.Left(0); case \"s\": return new Move.Down(0); case \"d\": return new Move.Right(0); case \"h\": return new Move.Left(1); case \"j\": return new Move.Down(1); case \"k\": return new Move.Up(1); case \"l\": return new Move.Right(1); case \"u\": return new Undo(-1); case \"exit\": return new Exit(-1); default: return new InvalidInput(-1, \"Invalid input!\"); } }",
        "label": "P"
    },
    "1108": {
        "dataset": "COMP 3021",
        "project": "yhlauak",
        "bug_id": "33",
        "T": "void testMove(String input, String name, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); } private InputStream fixValueStream(String content) { final var bytes = content.getBytes(StandardCharsets.UTF_8); return new ByteArrayInputStream(bytes); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine(); switch (inputLine.toLowerCase()) { case \"w\": return new Move.Up(0); case \"a\": return new Move.Left(0); case \"s\": return new Move.Down(0); case \"d\": return new Move.Right(0); case \"h\": return new Move.Left(1); case \"j\": return new Move.Down(1); case \"k\": return new Move.Up(1); case \"l\": return new Move.Right(1); case \"u\": return new Undo(-1); case \"exit\": return new Exit(-1); default: return new InvalidInput(-1, \"Invalid input!\"); } }",
        "label": "P"
    },
    "1109": {
        "dataset": "COMP 3021",
        "project": "yhlauak",
        "bug_id": "34",
        "T": "void testUndo(String input, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine(); switch (inputLine.toLowerCase()) { case \"w\": return new Move.Up(0); case \"a\": return new Move.Left(0); case \"s\": return new Move.Down(0); case \"d\": return new Move.Right(0); case \"h\": return new Move.Left(1); case \"j\": return new Move.Down(1); case \"k\": return new Move.Up(1); case \"l\": return new Move.Right(1); case \"u\": return new Undo(-1); case \"exit\": return new Exit(-1); default: return new InvalidInput(-1, \"Invalid input!\"); } }",
        "label": "P"
    },
    "1110": {
        "dataset": "COMP 3021",
        "project": "yhlauak",
        "bug_id": "35",
        "T": "void testInvalidInput() { final var inputStream = fixValueStream(\"blah blah\"); final var inputEngine = new TerminalInputEngine(inputStream); final var action = inputEngine.fetchAction(); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine(); switch (inputLine.toLowerCase()) { case \"w\": return new Move.Up(0); case \"a\": return new Move.Left(0); case \"s\": return new Move.Down(0); case \"d\": return new Move.Right(0); case \"h\": return new Move.Left(1); case \"j\": return new Move.Down(1); case \"k\": return new Move.Up(1); case \"l\": return new Move.Right(1); case \"u\": return new Undo(-1); case \"exit\": return new Exit(-1); default: return new InvalidInput(-1, \"Invalid input!\"); } }",
        "label": "P"
    },
    "1111": {
        "dataset": "COMP 3021",
        "project": "yhlauak",
        "bug_id": "36",
        "T": "void testUndoWhenThereIsNoMove() { final var gameState = new GameState(TestHelper.parseGameMap(\"\"\" 233 ###### #A.a@# #..a@# ###### \"\"\" )); gameState.undo(); } private Entity generateEntity(int key) { return switch (key % 4) { case 0 -> new Box(0); case 1 -> new Empty(); case 2 -> new Player(0); case 3 -> new Wall(); default -> throw new ShouldNotReachException(); }; }",
        "C": "public GameState(@NotNull GameMap map) { this.map = map; undosLeft = map.getUndoLimit(); entityMap = new HashMap(map.getEntityMap()); } public void undo() { if (entityMap.equals(map.getEntityMap())) { return; } if (checkpoints.empty()) { entityMap = new HashMap(map.getEntityMap()); } else if (entityMap.equals(checkpoints.peek())) { if (undosLeft.isPresent()) { undosLeft = Optional.of(undosLeft.get()-1); } checkpoints.pop(); undo(); } else { if (undosLeft.isPresent()) { undosLeft = Optional.of(undosLeft.get()-1); } entityMap = checkpoints.pop(); } } /** * Get the maximum width of the game map. * This should be the same as that in {@link GameMap} public Box(int playerId) { this.playerId = playerId; } public Player(int id) { this.id = id; } public ShouldNotReachException() { super(\"This branch should not be reached.\"); }",
        "label": "P"
    },
    "1112": {
        "dataset": "COMP 3021",
        "project": "yhlauak",
        "bug_id": "37",
        "T": "void testGetUndoUnlimited() { final var gameState = new GameState(TestHelper.parseGameMap(\"\"\" -1 ###### #.Aa@# #..a@# ###### \"\"\" )); }",
        "C": "public GameState(@NotNull GameMap map) { this.map = map; undosLeft = map.getUndoLimit(); entityMap = new HashMap(map.getEntityMap()); }",
        "label": "P"
    },
    "1113": {
        "dataset": "COMP 3021",
        "project": "yhlauak",
        "bug_id": "38",
        "T": "void testMapCopying() { final var maxWidth = 2333; final var maxHeight = 2333; final var random = new Random(); final var randomEntities = Stream.generate(() -> Position.of(random.nextInt(maxWidth), random.nextInt(maxHeight))) .distinct() .limit(100) .collect(Collectors.toMap(Function.identity(), it -> generateEntity(it.x()))); final var firstPos = randomEntities.keySet().stream().findFirst(); final var gameMap = new GameMap(maxWidth, maxHeight, Collections.singleton(firstPos.get()), 233); randomEntities.forEach(gameMap::putEntity); final var gameState = new GameState(gameMap); final var randomPosition = randomEntities.keySet().stream().findAny(); gameMap.putEntity(randomPosition.get(), new Empty()); randomEntities.forEach((p, e) -> assertEquals(e, gameState.getEntity(p))); }",
        "C": "public static @NotNull Position of(int x, int y) { return new Position(x, y); } public GameMap(int maxWidth, int maxHeight, Set<Position> destinations, int undoLimit) { this.maxWidth = maxWidth; this.maxHeight = maxHeight; this.destinations = destinations; if (undoLimit == -1) { this.undoLimit = Optional.empty(); } else if (undoLimit >= 0) { this.undoLimit = Optional.of(undoLimit); } else { throw new IllegalArgumentException(); } } /** * Parses the map from a string representation. * The first line is undo limit. * Starting from the second line, the game map is represented as follows, * <li># represents a {@link Wall}</li> * <li>@ represents a box destination.</li> * <li>Any upper-case letter represents a {@link Player}.</li> * <li> * Any lower-case letter represents a {@link Box} that is only movable by the player with the corresponding upper-case letter. * For instance, box \"a\" can only be moved by player \"A\" and not movable by player \"B\". * </li> * <li>. represents an {@link Empty} position in the map, meaning there is no player or box currently at this position.</li> * <p> * Notes: * <li> * There can be at most 26 players. * All implementations of classes in the hk.ust.comp3021.game package should support up to 26 players. * </li> * <li> * For simplicity, we assume the given map is bounded with a closed boundary. * There is no need to check this point. * </li> * <li> * Example maps can be found in \"src/main/resources\". * </li> * * @param mapText The string representation. * @return The parsed GameMap object. * @throws IllegalArgumentException if undo limit is negative but not -1. * @throws IllegalArgumentException if there are multiple same upper-case letters, i.e., one player can only exist at one position. * @throws IllegalArgumentException if there are no players in the map. * @throws IllegalArgumentException if the number of boxes is not equal to the number of box destinations. * @throws IllegalArgumentException if there are boxes whose {@link Box#getPlayerId()} public GameState(@NotNull GameMap map) { this.map = map; undosLeft = map.getUndoLimit(); entityMap = new HashMap(map.getEntityMap()); } public void putEntity(Position position, Entity entity) { entityMap.put(position, entity); } public @Nullable Entity getEntity(@NotNull Position position) { return entityMap.get(position); } /** * Get all box destination positions as a set in the game map. * This should be the same as that in {@link GameMap}",
        "label": "P"
    },
    "1114": {
        "dataset": "COMP 3021",
        "project": "yhlauak",
        "bug_id": "39",
        "T": "void testUndoWhenThereIsMoveButNoCheckpoint() { final var gameState = new GameState(TestHelper.parseGameMap(\"\"\" 233 ###### #A.a@# #..a@# ###### \"\"\" )); gameState.move(Position.of(1, 1), Position.of(2, 1)); gameState.undo(); }",
        "C": "public GameState(@NotNull GameMap map) { this.map = map; undosLeft = map.getUndoLimit(); entityMap = new HashMap(map.getEntityMap()); } public void move(Position from, Position to) { entityMap.put(to, entityMap.get(from)); entityMap.put(from, new Empty()); } /** * Record a checkpoint of the game state, including: * <li>All current positions of entities in the game map.</li> * <li>Current undo quota</li> * <p> * Checkpoint is used in {@link GameState#undo()} public static @NotNull Position of(int x, int y) { return new Position(x, y); } public void undo() { if (entityMap.equals(map.getEntityMap())) { return; } if (checkpoints.empty()) { entityMap = new HashMap(map.getEntityMap()); } else if (entityMap.equals(checkpoints.peek())) { if (undosLeft.isPresent()) { undosLeft = Optional.of(undosLeft.get()-1); } checkpoints.pop(); undo(); } else { if (undosLeft.isPresent()) { undosLeft = Optional.of(undosLeft.get()-1); } entityMap = checkpoints.pop(); } } /** * Get the maximum width of the game map. * This should be the same as that in {@link GameMap}",
        "label": "P"
    },
    "1115": {
        "dataset": "COMP 3021",
        "project": "yhlauak",
        "bug_id": "40",
        "T": "void testGameExit() { final var gameState = mock(GameState.class); final var inputEngine = mock(TerminalInputEngine.class); final var renderingEngine = mock(TerminalRenderingEngine.class); when(gameState.isWin()).thenReturn(false, false, false); when(inputEngine.fetchAction()) .thenReturn(new InvalidInput(0, \"\"), new InvalidInput(0, \"\"), new Exit(0)); final var game = new TerminalSokobanGame(gameState, inputEngine, renderingEngine); game.run(); verify(renderingEngine, atLeastOnce()).message(any()); }",
        "C": "public InvalidInput(int initiator, @NotNull String message) { super(initiator); this.message = message; } public Exit(int initiator) { super(initiator); } public TerminalSokobanGame(GameState gameState, TerminalInputEngine inputEngine, TerminalRenderingEngine renderingEngine) { super(gameState); this.inputEngine = inputEngine; this.renderingEngine = renderingEngine; if (gameState.getAllPlayerPositions().size() > 2) throw new IllegalArgumentException(); this.renderingEngine.message(\"Sokoban game is ready.\"); this.renderingEngine.render(state); if (state.getUndoQuota().isPresent()) { this.renderingEngine.message(\"Undo Quota: \" + state.getUndoQuota().get()); } else { this.renderingEngine.message(\"Unlimited\"); } } public void run() { while (!shouldStop()) { this.renderingEngine.message(\">>>\"); var action = inputEngine.fetchAction(); var result = processAction(action); switch (result) { case ActionResult.Failed f: renderingEngine.message(f.getReason()); renderingEngine.render(state); break; case ActionResult.Success ignored: renderingEngine.render(state); } if (shouldStop()) { this.renderingEngine.message(\"Game exits.\"); if (state.isWin()) { this.renderingEngine.message(\"You win.\"); } } else if (state.getUndoQuota().isPresent()) { this.renderingEngine.message(\"Undo Quota: \" + state.getUndoQuota().get()); } else { this.renderingEngine.message(\"Unlimited\"); } } }",
        "label": "P"
    },
    "1116": {
        "dataset": "COMP 3021",
        "project": "yhlauak",
        "bug_id": "41",
        "T": "void testGameWin() { final var gameState = mock(GameState.class); final var inputEngine = mock(TerminalInputEngine.class); final var renderingEngine = mock(TerminalRenderingEngine.class); when(gameState.isWin()).thenReturn(false, false, false, true); when(inputEngine.fetchAction()) .thenReturn(new InvalidInput(0, \"\")); final var game = new TerminalSokobanGame(gameState, inputEngine, renderingEngine); game.run(); verify(gameState, atLeastOnce()).isWin(); verify(renderingEngine, atLeastOnce()).message(any()); }",
        "C": "public InvalidInput(int initiator, @NotNull String message) { super(initiator); this.message = message; } public TerminalSokobanGame(GameState gameState, TerminalInputEngine inputEngine, TerminalRenderingEngine renderingEngine) { super(gameState); this.inputEngine = inputEngine; this.renderingEngine = renderingEngine; if (gameState.getAllPlayerPositions().size() > 2) throw new IllegalArgumentException(); this.renderingEngine.message(\"Sokoban game is ready.\"); this.renderingEngine.render(state); if (state.getUndoQuota().isPresent()) { this.renderingEngine.message(\"Undo Quota: \" + state.getUndoQuota().get()); } else { this.renderingEngine.message(\"Unlimited\"); } } public void run() { while (!shouldStop()) { this.renderingEngine.message(\">>>\"); var action = inputEngine.fetchAction(); var result = processAction(action); switch (result) { case ActionResult.Failed f: renderingEngine.message(f.getReason()); renderingEngine.render(state); break; case ActionResult.Success ignored: renderingEngine.render(state); } if (shouldStop()) { this.renderingEngine.message(\"Game exits.\"); if (state.isWin()) { this.renderingEngine.message(\"You win.\"); } } else if (state.getUndoQuota().isPresent()) { this.renderingEngine.message(\"Undo Quota: \" + state.getUndoQuota().get()); } else { this.renderingEngine.message(\"Unlimited\"); } } }",
        "label": "P"
    },
    "1117": {
        "dataset": "COMP 3021",
        "project": "yhlauak",
        "bug_id": "42",
        "T": "void testMoreThanTwoPlayers() { final var gameState = mock(GameState.class); final var inputEngine = mock(TerminalInputEngine.class); final var renderingEngine = mock(TerminalRenderingEngine.class); when(gameState.getAllPlayerPositions()).thenReturn(new HashSet<>(Arrays.asList(Position.of(1, 1), Position.of(1, 2), Position.of(1, 3)))); }",
        "C": "public static @NotNull Position of(int x, int y) { return new Position(x, y); }",
        "label": "P"
    },
    "1118": {
        "dataset": "COMP 3021",
        "project": "mdychengbeng",
        "bug_id": "0",
        "T": "void moveUp() { Position.of(233, 232), new Move.Up(-1).nextPosition(pos) ); }",
        "C": "public static @NotNull Position of(int x, int y) { return new Position(x, y); } public Up(int initiator) { super(initiator); }",
        "label": "P"
    },
    "1119": {
        "dataset": "COMP 3021",
        "project": "mdychengbeng",
        "bug_id": "1",
        "T": "void moveDown() { Position.of(233, 234), new Move.Down(-1).nextPosition(pos) ); }",
        "C": "public static @NotNull Position of(int x, int y) { return new Position(x, y); } public Down(int initiator) { super(initiator); }",
        "label": "P"
    },
    "1120": {
        "dataset": "COMP 3021",
        "project": "mdychengbeng",
        "bug_id": "2",
        "T": "void moveRight() { Position.of(234, 233), new Move.Right(-1).nextPosition(pos) ); }",
        "C": "public static @NotNull Position of(int x, int y) { return new Position(x, y); } public Right(int initiator) { super(initiator); }",
        "label": "P"
    },
    "1121": {
        "dataset": "COMP 3021",
        "project": "mdychengbeng",
        "bug_id": "3",
        "T": "void testExceedingUndoQuota() { final var gameState = mock(GameState.class); when(gameState.getPlayerPositionById(anyInt())).thenReturn(Position.of(0, 0)); when(gameState.getUndoQuota()).thenReturn(Optional.of(0)); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Undo(0)); }",
        "C": "public Undo(int initiator) { super(initiator); }",
        "label": "P"
    },
    "1122": {
        "dataset": "COMP 3021",
        "project": "mdychengbeng",
        "bug_id": "4",
        "T": "void testExit() { final var gameState = mock(GameState.class); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Exit(0)); }",
        "C": "public Exit(int initiator) { super(initiator); }",
        "label": "F"
    },
    "1123": {
        "dataset": "COMP 3021",
        "project": "mdychengbeng",
        "bug_id": "5",
        "T": "void testUndoUnlimited() { final var gameState = mock(GameState.class); when(gameState.getPlayerPositionById(anyInt())).thenReturn(Position.of(0, 0)); when(gameState.getUndoQuota()).thenReturn(Optional.empty()); final var game = new SokobanGameForTesting(gameState); for (int i = 0; i < 10000; i++) { final var result = game.feedActionForProcessing(new Undo(0)); } verify(gameState, times(10000)).undo(); }",
        "C": "public TerminalRenderingEngine(PrintStream outputSteam) { this.outputSteam = outputSteam; } public Undo(int initiator) { super(initiator); }",
        "label": "F"
    },
    "1124": {
        "dataset": "COMP 3021",
        "project": "mdychengbeng",
        "bug_id": "6",
        "T": "void testPushOtherPlayerBox() { String mapText = \"\"\" 233 ###### #AB.@# #b.a.# #@...# ###### \"\"\"; final var testMap = TestHelper.parseGameMap(mapText); final var gameState = spy(new GameState(testMap)); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Move.Down(0)); verify(gameState, never()).move(any(), any()); }",
        "C": "public GameState(@NotNull GameMap map) { // TODO this.map = map; this.undoQuota = map.undolimit; } public Down(int initiator) { super(initiator); }",
        "label": "P"
    },
    "1125": {
        "dataset": "COMP 3021",
        "project": "mdychengbeng",
        "bug_id": "7",
        "T": "void testMoveNonExistingPlayer() { String mapText = \"\"\" 233 ###### #A..@# #a...# ##...# ###### \"\"\"; final var testMap = TestHelper.parseGameMap(mapText); final var gameState = spy(new GameState(testMap)); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Move.Down(23)); }",
        "C": "public GameState(@NotNull GameMap map) { // TODO this.map = map; this.undoQuota = map.undolimit; } public Down(int initiator) { super(initiator); }",
        "label": "P"
    },
    "1126": {
        "dataset": "COMP 3021",
        "project": "mdychengbeng",
        "bug_id": "8",
        "T": "void testCheckpointWhenNeed() { final var gameState = spy(new GameState(TestHelper.parseGameMap(\"\"\" 233 ###### #.Aa@# #..a@# ###### \"\"\" ))); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Move.Right(0)); verify(gameState, times(1)).checkpoint(); }",
        "C": "public GameState(@NotNull GameMap map) { // TODO this.map = map; this.undoQuota = map.undolimit; } public Right(int initiator) { super(initiator); }",
        "label": "P"
    },
    "1127": {
        "dataset": "COMP 3021",
        "project": "mdychengbeng",
        "bug_id": "9",
        "T": "void testPushBoxAgainstWall() { String mapText = \"\"\" 233 ###### #A..@# #a...# ##...# ###### \"\"\"; final var testMap = TestHelper.parseGameMap(mapText); final var gameState = spy(new GameState(testMap)); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Move.Down(0)); verify(gameState, never()).move(any(), any()); }",
        "C": "public GameState(@NotNull GameMap map) { // TODO this.map = map; this.undoQuota = map.undolimit; } public Down(int initiator) { super(initiator); }",
        "label": "P"
    },
    "1128": {
        "dataset": "COMP 3021",
        "project": "mdychengbeng",
        "bug_id": "10",
        "T": "void testCheckpointWhenNotNeed() { final var gameState = spy(new GameState(TestHelper.parseGameMap(\"\"\" 233 ###### #A.a@# #..a@# ###### \"\"\" ))); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Move.Right(0)); verify(gameState, never()).checkpoint(); } private static class SokobanGameForTesting extends AbstractSokobanGame { protected SokobanGameForTesting(GameState gameState) { super(gameState); } @Override public void run() { } public ActionResult feedActionForProcessing(Action action) { return processAction(action); } }",
        "C": "public GameState(@NotNull GameMap map) { // TODO this.map = map; this.undoQuota = map.undolimit; } public Right(int initiator) { super(initiator); } public void run() { // TODO renderingEngine.message(StringResources.GAME_READY_MESSAGE); renderingEngine.render(state); if (this.state.getUndoQuota().isEmpty()) { renderingEngine.message(StringResources.UNDO_QUOTA_UNLIMITED); } if (this.state.getUndoQuota().isPresent()) { String message = String.format(StringResources.UNDO_QUOTA_TEMPLATE, this.state.getUndoQuota().get()); renderingEngine.message(message); } renderingEngine.message(\">>>\"); this.state.initialCheckpoint(); while (!this.shouldStop()) { Action action = inputEngine.fetchAction(); ActionResult result = this.processAction(action); if (action instanceof Exit) { renderingEngine.render(state); renderingEngine.message(StringResources.GAME_EXIT_MESSAGE); return; } if (result instanceof ActionResult.Failed) { String message = ((ActionResult.Failed) result).getReason(); renderingEngine.message(message); } renderingEngine.render(state); if (!this.shouldStop()) { if (this.state.getUndoQuota().isEmpty()) { renderingEngine.message(StringResources.UNDO_QUOTA_UNLIMITED); } if (this.state.getUndoQuota().isPresent()) { String message = String.format(StringResources.UNDO_QUOTA_TEMPLATE, this.state.getUndoQuota().get()); renderingEngine.message(message); } } renderingEngine.message(\">>>\"); } renderingEngine.message(StringResources.GAME_EXIT_MESSAGE); renderingEngine.message(StringResources.WIN_MESSAGE); return; } protected ActionResult processAction(@NotNull Action action) { // TODO int player = action.getInitiator(); if (action instanceof Move && !state.map.getPlayerIds().contains(player)) { return new ActionResult.Failed(action, PLAYER_NOT_FOUND); } Position position = this.state.getPlayerPositionById(player); Position newPosition; if (action instanceof Exit) { return new ActionResult.Success(action); } else if (action instanceof Undo) { if (this.state.undoQuota == -1 || this.state.undoQuota > 0) { this.state.undo(); return new ActionResult.Success(action); } else { return new ActionResult.Failed(action, UNDO_QUOTA_RUN_OUT); } } else if (action instanceof Move) { if (action instanceof Move.Up) { newPosition = new Position(position.x(), position.y() - 1); if (this.state.getEntity(newPosition) instanceof Wall) { return new ActionResult.Failed(action, \"You hit a wall.\"); } else if (this.state.getEntity(newPosition) instanceof Player) { return new ActionResult.Failed(action, \"You hit another player.\"); } else if (this.state.getEntity(newPosition) instanceof Box && ((Box) this.state.getEntity(newPosition)).getPlayerId() != player) { return new ActionResult.Failed(action, \"You cannot move other players' boxes.\"); } else if (this.state.getEntity(newPosition) instanceof Box && ((Box) this.state.getEntity(newPosition)).getPlayerId() == player) { Position temp = new Position(newPosition.x(), newPosition.y() - 1); if (this.state.getEntity(temp) instanceof Wall) { return new ActionResult.Failed(action, \"Failed to push the box.\"); } else { this.state.move(newPosition, temp); this.state.move(position, newPosition); this.state.checkpoint(); return new ActionResult.Success(action); } } this.state.move(position, newPosition); return new ActionResult.Success(action); } else if (action instanceof Move.Down) { newPosition = new Position(position.x(), position.y() + 1); if (this.state.getEntity(newPosition) instanceof Wall) { return new ActionResult.Failed(action, \"You hit a wall.\"); } else if (this.state.getEntity(newPosition) instanceof Player) { return new ActionResult.Failed(action, \"You hit another player.\"); } else if (this.state.getEntity(newPosition) instanceof Box && ((Box) this.state.getEntity(newPosition)).getPlayerId() != player) { return new ActionResult.Failed(action, \"You cannot move other players' boxes.\"); } else if (this.state.getEntity(newPosition) instanceof Box && ((Box) this.state.getEntity(newPosition)).getPlayerId() == player) { Position temp = new Position(newPosition.x(), newPosition.y() + 1); if (this.state.getEntity(temp) instanceof Wall) { return new ActionResult.Failed(action, \"Failed to push the box.\"); } else { this.state.move(newPosition, temp); this.state.move(position, newPosition); this.state.checkpoint(); return new ActionResult.Success(action); } } this.state.move(position, newPosition); return new ActionResult.Success(action); } else if (action instanceof Move.Left) { newPosition = new Position(position.x() - 1, position.y()); if (this.state.getEntity(newPosition) instanceof Wall) { return new ActionResult.Failed(action, \"You hit a wall.\"); } else if (this.state.getEntity(newPosition) instanceof Player) { return new ActionResult.Failed(action, \"You hit another player.\"); } else if (this.state.getEntity(newPosition) instanceof Box && ((Box) this.state.getEntity(newPosition)).getPlayerId() != player) { return new ActionResult.Failed(action, \"You cannot move other players' boxes.\"); } else if (this.state.getEntity(newPosition) instanceof Box && ((Box) this.state.getEntity(newPosition)).getPlayerId() == player) { Position temp = new Position(newPosition.x() - 1, newPosition.y()); if (this.state.getEntity(temp) instanceof Wall) { return new ActionResult.Failed(action, \"Failed to push the box.\"); } else { this.state.move(newPosition, temp); this.state.move(position, newPosition); this.state.checkpoint(); return new ActionResult.Success(action); } } this.state.move(position, newPosition); return new ActionResult.Success(action); } else if (action instanceof Move.Right) { newPosition = new Position(position.x() + 1, position.y()); if (this.state.getEntity(newPosition) instanceof Wall) { return new ActionResult.Failed(action, \"You hit a wall.\"); } else if (this.state.getEntity(newPosition) instanceof Player) { return new ActionResult.Failed(action, \"You hit another player.\"); } else if (this.state.getEntity(newPosition) instanceof Box && ((Box) this.state.getEntity(newPosition)).getPlayerId() != player) { return new ActionResult.Failed(action, \"You cannot move other players' boxes.\"); } else if (this.state.getEntity(newPosition) instanceof Box && ((Box) this.state.getEntity(newPosition)).getPlayerId() == player) { Position temp = new Position(newPosition.x() + 1, newPosition.y()); if (this.state.getEntity(temp) instanceof Wall) { return new ActionResult.Failed(action, \"Failed to push the box.\"); } else { this.state.move(newPosition, temp); this.state.move(position, newPosition); this.state.checkpoint(); return new ActionResult.Success(action); } } this.state.move(position, newPosition); return new ActionResult.Success(action); } } return new ActionResult.Failed(action, INVALID_INPUT_MESSAGE); }",
        "label": "P"
    },
    "1129": {
        "dataset": "COMP 3021",
        "project": "mdychengbeng",
        "bug_id": "11",
        "T": "void testHitAnotherPlayer() { String mapText = \"\"\" 233 ###### #A..@# #B...# #ab.@# ###### \"\"\"; final var testMap = TestHelper.parseGameMap(mapText); final var gameState = spy(new GameState(testMap)); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Move.Down(0)); verify(gameState, never()).move(any(), any()); }",
        "C": "public GameState(@NotNull GameMap map) { // TODO this.map = map; this.undoQuota = map.undolimit; } public Down(int initiator) { super(initiator); }",
        "label": "P"
    },
    "1130": {
        "dataset": "COMP 3021",
        "project": "mdychengbeng",
        "bug_id": "12",
        "T": "void testUndoWithinQuota() { final var gameState = mock(GameState.class); when(gameState.getPlayerPositionById(anyInt())).thenReturn(Position.of(0, 0)); when(gameState.getUndoQuota()).thenReturn(Optional.of(1)); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Undo(0)); verify(gameState, times(1)).undo(); }",
        "C": "public Undo(int initiator) { super(initiator); }",
        "label": "F"
    },
    "1131": {
        "dataset": "COMP 3021",
        "project": "mdychengbeng",
        "bug_id": "13",
        "T": "void testInvalidInput() { final var game = new SokobanGameForTesting(mock(GameState.class)); final var message = String.valueOf(new Random().nextLong()); final var action = new InvalidInput(-1, message); final var result = game.feedActionForProcessing(action); }",
        "C": "public InvalidInput(int initiator, @NotNull String message) { super(initiator); this.message = message; }",
        "label": "P"
    },
    "1132": {
        "dataset": "COMP 3021",
        "project": "mdychengbeng",
        "bug_id": "14",
        "T": "void testUndoLimitParsing() { final var gameMap = TestHelper.parseGameMap(rectangularMap); }",
        "C": "",
        "label": "P"
    },
    "1133": {
        "dataset": "COMP 3021",
        "project": "mdychengbeng",
        "bug_id": "15",
        "T": "void testWidthForNonRectangularMap() { final var gameMap = TestHelper.parseGameMap(nonRectangularMap); }",
        "C": "",
        "label": "P"
    },
    "1134": {
        "dataset": "COMP 3021",
        "project": "mdychengbeng",
        "bug_id": "16",
        "T": "void testTwoPlayersMap() { final var twoPlayersMap = \"\"\" 233 ###### #A..@# #..B@# #....# #.a..# #..b.# ###### \"\"\"; final var gameMap = TestHelper.parseGameMap(twoPlayersMap); final var playerIds = gameMap.getPlayerIds(); final var expectedIds = new HashSet<Integer>(); expectedIds.add(0); expectedIds.add(1); }",
        "C": "public Set<Integer> getPlayerIds() { // TODO Set<Integer> ids = new HashSet<Integer>(); String[] lines = GameMap.map.split(System.lineSeparator()); for (int i = lines[0].length(); i < GameMap.map.length(); i++) { if (Character.isUpperCase(GameMap.map.charAt(i))) { ids.add(GameMap.map.charAt(i) - 'A'); } } return ids; }",
        "label": "P"
    },
    "1135": {
        "dataset": "COMP 3021",
        "project": "mdychengbeng",
        "bug_id": "17",
        "T": "void testMapWithoutPlayer() { final var invalidMap = \"\"\" 233 ### #.# ### \"\"\"; } // @Tag(TestKind.HIDDEN) // @Test // void testUnmatchedPlayersAndBoxes() { // final var invalidMap = \"\"\" // 233 // ###### // #A..@# // #...@# // #a.b@# // #.a.@# // #..a.# // ###### // \"\"\"; // assertThrowsExactly(IllegalArgumentException.class, () -> TestHelper.parseGameMap(invalidMap)); // }",
        "C": "public TerminalRenderingEngine(PrintStream outputSteam) { this.outputSteam = outputSteam; }",
        "label": "P"
    },
    "1136": {
        "dataset": "COMP 3021",
        "project": "mdychengbeng",
        "bug_id": "18",
        "T": "void testManyPlayersMap() { final var manyPlayersMap = \"\"\" 233 ###### #A.P@@# #vCB@@# #.cpD@# #Ga.d@# #g.bV@# ###### \"\"\"; final var gameMap = TestHelper.parseGameMap(manyPlayersMap); final var playerIds = gameMap.getPlayerIds(); final var expectedIds = new HashSet<>(Arrays.asList( 0, 'P' - 'A', 'C' - 'A', 'B' - 'A', 'D' - 'A', 'G' - 'A', 'V' - 'A' )); }",
        "C": "public Set<Integer> getPlayerIds() { // TODO Set<Integer> ids = new HashSet<Integer>(); String[] lines = GameMap.map.split(System.lineSeparator()); for (int i = lines[0].length(); i < GameMap.map.length(); i++) { if (Character.isUpperCase(GameMap.map.charAt(i))) { ids.add(GameMap.map.charAt(i) - 'A'); } } return ids; }",
        "label": "P"
    },
    "1137": {
        "dataset": "COMP 3021",
        "project": "mdychengbeng",
        "bug_id": "19",
        "T": "void testHeightForNonRectangularMap() { final var gameMap = TestHelper.parseGameMap(nonRectangularMap); }",
        "C": "",
        "label": "P"
    },
    "1138": {
        "dataset": "COMP 3021",
        "project": "mdychengbeng",
        "bug_id": "20",
        "T": "void testDuplicatedPlayers() { final var invalidMap = \"\"\" 233 ###### #A..@# #..A@# #....# #.a..# #..b.# ###### \"\"\"; }",
        "C": "",
        "label": "P"
    },
    "1139": {
        "dataset": "COMP 3021",
        "project": "mdychengbeng",
        "bug_id": "21",
        "T": "void testParseMapWithoutUndoLimit() { final var invalidMap = String.join(\"\\n\", rectangularMap.lines().skip(1).toList()); }",
        "C": "",
        "label": "P"
    },
    "1140": {
        "dataset": "COMP 3021",
        "project": "mdychengbeng",
        "bug_id": "22",
        "T": "void testInsufficientDestinations() { final var invalidMap = \"\"\" 233 ###### #A..@# #...@# #a...# #.a..# #..a.# ###### \"\"\"; }",
        "C": "",
        "label": "P"
    },
    "1141": {
        "dataset": "COMP 3021",
        "project": "mdychengbeng",
        "bug_id": "23",
        "T": "void testSuperLargeMap() { try { new GameMap(Integer.MAX_VALUE, Integer.MAX_VALUE, Collections.emptySet(), 0); } catch (OutOfMemoryError e) { throw new RuntimeException(e); } }); }",
        "C": "public GameMap(int maxWidth, int maxHeight, Set<Position> destinations, int undoLimit) { // TODO this.maxWidth = maxWidth; this.maxHeight = maxHeight; this.destinations = destinations; this.undolimit = undoLimit; } /** * Parses the map from a string representation. * The first line is undo limit. * Starting from the second line, the game map is represented as follows, * <li># represents a {@link Wall}</li> * <li>@ represents a box destination.</li> * <li>Any upper-case letter represents a {@link Player}.</li> * <li> * Any lower-case letter represents a {@link Box} that is only movable by the player with the corresponding upper-case letter. * For instance, box \"a\" can only be moved by player \"A\" and not movable by player \"B\". * </li> * <li>. represents an {@link Empty} position in the map, meaning there is no player or box currently at this position.</li> * <p> * Notes: * <li> * There can be at most 26 players. * All implementations of classes in the hk.ust.comp3021.game package should support up to 26 players. * </li> * <li> * For simplicity, we assume the given map is bounded with a closed boundary. * There is no need to check this point. * </li> * <li> * Example maps can be found in \"src/main/resources\". * </li> * * @param mapText The string representation. * @return The parsed GameMap object. * @throws IllegalArgumentException if undo limit is negative but not -1. * @throws IllegalArgumentException if there are multiple same upper-case letters, i.e., one player can only exist at one position. * @throws IllegalArgumentException if there are no players in the map. * @throws IllegalArgumentException if the number of boxes is not equal to the number of box destinations. * @throws IllegalArgumentException if there are boxes whose {@link Box#getPlayerId()} public TerminalRenderingEngine(PrintStream outputSteam) { this.outputSteam = outputSteam; }",
        "label": "P"
    },
    "1142": {
        "dataset": "COMP 3021",
        "project": "mdychengbeng",
        "bug_id": "24",
        "T": "void testInvalidUndoLimit() { final var invalidMap = \"\"\" -233 ###### #A..@# #...@# #a.b@# #.a.@# #..a.# ###### \"\"\"; }",
        "C": "",
        "label": "P"
    },
    "1143": {
        "dataset": "COMP 3021",
        "project": "mdychengbeng",
        "bug_id": "25",
        "T": "void testEmptyMap() { final var invalidMap = \"\"; }",
        "C": "",
        "label": "P"
    },
    "1144": {
        "dataset": "COMP 3021",
        "project": "mdychengbeng",
        "bug_id": "26",
        "T": "void testMove(String input, String name, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); } private InputStream fixValueStream(String content) { final var bytes = content.getBytes(StandardCharsets.UTF_8); return new ByteArrayInputStream(bytes); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine(); // TODO if (inputLine.equals(StringResources.EXIT_COMMAND_TEXT)) { return new Exit(0); } else if (inputLine.equals(\"u\")) { return new Undo(0); } else if (inputLine.equals(\"w\")) { return new Move.Up(0); } else if (inputLine.equals(\"a\")) { return new Move.Left(0); } else if (inputLine.equals(\"s\")) { return new Move.Down(0); } else if (inputLine.equals(\"d\")) { return new Move.Right(0); } else if (inputLine.equals(\"k\")) { return new Move.Up(1); } else if (inputLine.equals(\"h\")) { return new Move.Left(1); } else if (inputLine.equals(\"j\")) { return new Move.Down(1); } else if (inputLine.equals(\"l\")) { return new Move.Right(1); } else { return new InvalidInput(0, StringResources.INVALID_INPUT_MESSAGE); } }",
        "label": "P"
    },
    "1145": {
        "dataset": "COMP 3021",
        "project": "mdychengbeng",
        "bug_id": "27",
        "T": "void testMove(String input, String name, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); } private InputStream fixValueStream(String content) { final var bytes = content.getBytes(StandardCharsets.UTF_8); return new ByteArrayInputStream(bytes); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine(); // TODO if (inputLine.equals(StringResources.EXIT_COMMAND_TEXT)) { return new Exit(0); } else if (inputLine.equals(\"u\")) { return new Undo(0); } else if (inputLine.equals(\"w\")) { return new Move.Up(0); } else if (inputLine.equals(\"a\")) { return new Move.Left(0); } else if (inputLine.equals(\"s\")) { return new Move.Down(0); } else if (inputLine.equals(\"d\")) { return new Move.Right(0); } else if (inputLine.equals(\"k\")) { return new Move.Up(1); } else if (inputLine.equals(\"h\")) { return new Move.Left(1); } else if (inputLine.equals(\"j\")) { return new Move.Down(1); } else if (inputLine.equals(\"l\")) { return new Move.Right(1); } else { return new InvalidInput(0, StringResources.INVALID_INPUT_MESSAGE); } }",
        "label": "P"
    },
    "1146": {
        "dataset": "COMP 3021",
        "project": "mdychengbeng",
        "bug_id": "28",
        "T": "void testMove(String input, String name, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); } private InputStream fixValueStream(String content) { final var bytes = content.getBytes(StandardCharsets.UTF_8); return new ByteArrayInputStream(bytes); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine(); // TODO if (inputLine.equals(StringResources.EXIT_COMMAND_TEXT)) { return new Exit(0); } else if (inputLine.equals(\"u\")) { return new Undo(0); } else if (inputLine.equals(\"w\")) { return new Move.Up(0); } else if (inputLine.equals(\"a\")) { return new Move.Left(0); } else if (inputLine.equals(\"s\")) { return new Move.Down(0); } else if (inputLine.equals(\"d\")) { return new Move.Right(0); } else if (inputLine.equals(\"k\")) { return new Move.Up(1); } else if (inputLine.equals(\"h\")) { return new Move.Left(1); } else if (inputLine.equals(\"j\")) { return new Move.Down(1); } else if (inputLine.equals(\"l\")) { return new Move.Right(1); } else { return new InvalidInput(0, StringResources.INVALID_INPUT_MESSAGE); } }",
        "label": "P"
    },
    "1147": {
        "dataset": "COMP 3021",
        "project": "mdychengbeng",
        "bug_id": "29",
        "T": "void testMove(String input, String name, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); } private InputStream fixValueStream(String content) { final var bytes = content.getBytes(StandardCharsets.UTF_8); return new ByteArrayInputStream(bytes); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine(); // TODO if (inputLine.equals(StringResources.EXIT_COMMAND_TEXT)) { return new Exit(0); } else if (inputLine.equals(\"u\")) { return new Undo(0); } else if (inputLine.equals(\"w\")) { return new Move.Up(0); } else if (inputLine.equals(\"a\")) { return new Move.Left(0); } else if (inputLine.equals(\"s\")) { return new Move.Down(0); } else if (inputLine.equals(\"d\")) { return new Move.Right(0); } else if (inputLine.equals(\"k\")) { return new Move.Up(1); } else if (inputLine.equals(\"h\")) { return new Move.Left(1); } else if (inputLine.equals(\"j\")) { return new Move.Down(1); } else if (inputLine.equals(\"l\")) { return new Move.Right(1); } else { return new InvalidInput(0, StringResources.INVALID_INPUT_MESSAGE); } }",
        "label": "P"
    },
    "1148": {
        "dataset": "COMP 3021",
        "project": "mdychengbeng",
        "bug_id": "30",
        "T": "void testMove(String input, String name, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); } private InputStream fixValueStream(String content) { final var bytes = content.getBytes(StandardCharsets.UTF_8); return new ByteArrayInputStream(bytes); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine(); // TODO if (inputLine.equals(StringResources.EXIT_COMMAND_TEXT)) { return new Exit(0); } else if (inputLine.equals(\"u\")) { return new Undo(0); } else if (inputLine.equals(\"w\")) { return new Move.Up(0); } else if (inputLine.equals(\"a\")) { return new Move.Left(0); } else if (inputLine.equals(\"s\")) { return new Move.Down(0); } else if (inputLine.equals(\"d\")) { return new Move.Right(0); } else if (inputLine.equals(\"k\")) { return new Move.Up(1); } else if (inputLine.equals(\"h\")) { return new Move.Left(1); } else if (inputLine.equals(\"j\")) { return new Move.Down(1); } else if (inputLine.equals(\"l\")) { return new Move.Right(1); } else { return new InvalidInput(0, StringResources.INVALID_INPUT_MESSAGE); } }",
        "label": "P"
    },
    "1149": {
        "dataset": "COMP 3021",
        "project": "mdychengbeng",
        "bug_id": "31",
        "T": "void testMove(String input, String name, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); } private InputStream fixValueStream(String content) { final var bytes = content.getBytes(StandardCharsets.UTF_8); return new ByteArrayInputStream(bytes); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine(); // TODO if (inputLine.equals(StringResources.EXIT_COMMAND_TEXT)) { return new Exit(0); } else if (inputLine.equals(\"u\")) { return new Undo(0); } else if (inputLine.equals(\"w\")) { return new Move.Up(0); } else if (inputLine.equals(\"a\")) { return new Move.Left(0); } else if (inputLine.equals(\"s\")) { return new Move.Down(0); } else if (inputLine.equals(\"d\")) { return new Move.Right(0); } else if (inputLine.equals(\"k\")) { return new Move.Up(1); } else if (inputLine.equals(\"h\")) { return new Move.Left(1); } else if (inputLine.equals(\"j\")) { return new Move.Down(1); } else if (inputLine.equals(\"l\")) { return new Move.Right(1); } else { return new InvalidInput(0, StringResources.INVALID_INPUT_MESSAGE); } }",
        "label": "P"
    },
    "1150": {
        "dataset": "COMP 3021",
        "project": "mdychengbeng",
        "bug_id": "32",
        "T": "void testMove(String input, String name, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); } private InputStream fixValueStream(String content) { final var bytes = content.getBytes(StandardCharsets.UTF_8); return new ByteArrayInputStream(bytes); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine(); // TODO if (inputLine.equals(StringResources.EXIT_COMMAND_TEXT)) { return new Exit(0); } else if (inputLine.equals(\"u\")) { return new Undo(0); } else if (inputLine.equals(\"w\")) { return new Move.Up(0); } else if (inputLine.equals(\"a\")) { return new Move.Left(0); } else if (inputLine.equals(\"s\")) { return new Move.Down(0); } else if (inputLine.equals(\"d\")) { return new Move.Right(0); } else if (inputLine.equals(\"k\")) { return new Move.Up(1); } else if (inputLine.equals(\"h\")) { return new Move.Left(1); } else if (inputLine.equals(\"j\")) { return new Move.Down(1); } else if (inputLine.equals(\"l\")) { return new Move.Right(1); } else { return new InvalidInput(0, StringResources.INVALID_INPUT_MESSAGE); } }",
        "label": "P"
    },
    "1151": {
        "dataset": "COMP 3021",
        "project": "mdychengbeng",
        "bug_id": "33",
        "T": "void testMove(String input, String name, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); } private InputStream fixValueStream(String content) { final var bytes = content.getBytes(StandardCharsets.UTF_8); return new ByteArrayInputStream(bytes); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine(); // TODO if (inputLine.equals(StringResources.EXIT_COMMAND_TEXT)) { return new Exit(0); } else if (inputLine.equals(\"u\")) { return new Undo(0); } else if (inputLine.equals(\"w\")) { return new Move.Up(0); } else if (inputLine.equals(\"a\")) { return new Move.Left(0); } else if (inputLine.equals(\"s\")) { return new Move.Down(0); } else if (inputLine.equals(\"d\")) { return new Move.Right(0); } else if (inputLine.equals(\"k\")) { return new Move.Up(1); } else if (inputLine.equals(\"h\")) { return new Move.Left(1); } else if (inputLine.equals(\"j\")) { return new Move.Down(1); } else if (inputLine.equals(\"l\")) { return new Move.Right(1); } else { return new InvalidInput(0, StringResources.INVALID_INPUT_MESSAGE); } }",
        "label": "P"
    },
    "1152": {
        "dataset": "COMP 3021",
        "project": "mdychengbeng",
        "bug_id": "34",
        "T": "void testUndo(String input, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine(); // TODO if (inputLine.equals(StringResources.EXIT_COMMAND_TEXT)) { return new Exit(0); } else if (inputLine.equals(\"u\")) { return new Undo(0); } else if (inputLine.equals(\"w\")) { return new Move.Up(0); } else if (inputLine.equals(\"a\")) { return new Move.Left(0); } else if (inputLine.equals(\"s\")) { return new Move.Down(0); } else if (inputLine.equals(\"d\")) { return new Move.Right(0); } else if (inputLine.equals(\"k\")) { return new Move.Up(1); } else if (inputLine.equals(\"h\")) { return new Move.Left(1); } else if (inputLine.equals(\"j\")) { return new Move.Down(1); } else if (inputLine.equals(\"l\")) { return new Move.Right(1); } else { return new InvalidInput(0, StringResources.INVALID_INPUT_MESSAGE); } }",
        "label": "P"
    },
    "1153": {
        "dataset": "COMP 3021",
        "project": "mdychengbeng",
        "bug_id": "35",
        "T": "void testInvalidInput() { final var inputStream = fixValueStream(\"blah blah\"); final var inputEngine = new TerminalInputEngine(inputStream); final var action = inputEngine.fetchAction(); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine(); // TODO if (inputLine.equals(StringResources.EXIT_COMMAND_TEXT)) { return new Exit(0); } else if (inputLine.equals(\"u\")) { return new Undo(0); } else if (inputLine.equals(\"w\")) { return new Move.Up(0); } else if (inputLine.equals(\"a\")) { return new Move.Left(0); } else if (inputLine.equals(\"s\")) { return new Move.Down(0); } else if (inputLine.equals(\"d\")) { return new Move.Right(0); } else if (inputLine.equals(\"k\")) { return new Move.Up(1); } else if (inputLine.equals(\"h\")) { return new Move.Left(1); } else if (inputLine.equals(\"j\")) { return new Move.Down(1); } else if (inputLine.equals(\"l\")) { return new Move.Right(1); } else { return new InvalidInput(0, StringResources.INVALID_INPUT_MESSAGE); } }",
        "label": "P"
    },
    "1154": {
        "dataset": "COMP 3021",
        "project": "mdychengbeng",
        "bug_id": "36",
        "T": "void testUndoWhenThereIsNoMove() { final var gameState = new GameState(TestHelper.parseGameMap(\"\"\" 233 ###### #A.a@# #..a@# ###### \"\"\" )); gameState.undo(); } private Entity generateEntity(int key) { return switch (key % 4) { case 0 -> new Box(0); case 1 -> new Empty(); case 2 -> new Player(0); case 3 -> new Wall(); default -> throw new ShouldNotReachException(); }; }",
        "C": "public GameState(@NotNull GameMap map) { // TODO this.map = map; this.undoQuota = map.undolimit; } public void undo() { // TODO if (this.cp.size() > 1) { this.state = this.cp.get(cp.size() - 2).state; this.cp.remove(cp.size() - 1); if (undoQuota == -1) { this.undoQuota = undoQuota; } else { this.undoQuota = undoQuota - 1; } } else if (this.cp.size() == 1) { this.state = this.cp.get(0).state; } // System.out.println(undoQuota); } /** * Get the maximum width of the game map. * This should be the same as that in {@link GameMap} public TerminalRenderingEngine(PrintStream outputSteam) { this.outputSteam = outputSteam; } public Box(int playerId) { this.playerId = playerId; } public Player(int id) { this.id = id; } public ShouldNotReachException() { super(\"This branch should not be reached.\"); }",
        "label": "P"
    },
    "1155": {
        "dataset": "COMP 3021",
        "project": "mdychengbeng",
        "bug_id": "37",
        "T": "void testGetUndoUnlimited() { final var gameState = new GameState(TestHelper.parseGameMap(\"\"\" -1 ###### #.Aa@# #..a@# ###### \"\"\" )); }",
        "C": "public GameState(@NotNull GameMap map) { // TODO this.map = map; this.undoQuota = map.undolimit; }",
        "label": "P"
    },
    "1156": {
        "dataset": "COMP 3021",
        "project": "mdychengbeng",
        "bug_id": "38",
        "T": "void testMapCopying() { final var maxWidth = 2333; final var maxHeight = 2333; final var random = new Random(); final var randomEntities = Stream.generate(() -> Position.of(random.nextInt(maxWidth), random.nextInt(maxHeight))) .distinct() .limit(100) .collect(Collectors.toMap(Function.identity(), it -> generateEntity(it.x()))); final var firstPos = randomEntities.keySet().stream().findFirst(); final var gameMap = new GameMap(maxWidth, maxHeight, Collections.singleton(firstPos.get()), 233); randomEntities.forEach(gameMap::putEntity); final var gameState = new GameState(gameMap); final var randomPosition = randomEntities.keySet().stream().findAny(); gameMap.putEntity(randomPosition.get(), new Empty()); randomEntities.forEach((p, e) -> assertEquals(e, gameState.getEntity(p))); }",
        "C": "public static @NotNull Position of(int x, int y) { return new Position(x, y); } public GameMap(int maxWidth, int maxHeight, Set<Position> destinations, int undoLimit) { // TODO this.maxWidth = maxWidth; this.maxHeight = maxHeight; this.destinations = destinations; this.undolimit = undoLimit; } /** * Parses the map from a string representation. * The first line is undo limit. * Starting from the second line, the game map is represented as follows, * <li># represents a {@link Wall}</li> * <li>@ represents a box destination.</li> * <li>Any upper-case letter represents a {@link Player}.</li> * <li> * Any lower-case letter represents a {@link Box} that is only movable by the player with the corresponding upper-case letter. * For instance, box \"a\" can only be moved by player \"A\" and not movable by player \"B\". * </li> * <li>. represents an {@link Empty} position in the map, meaning there is no player or box currently at this position.</li> * <p> * Notes: * <li> * There can be at most 26 players. * All implementations of classes in the hk.ust.comp3021.game package should support up to 26 players. * </li> * <li> * For simplicity, we assume the given map is bounded with a closed boundary. * There is no need to check this point. * </li> * <li> * Example maps can be found in \"src/main/resources\". * </li> * * @param mapText The string representation. * @return The parsed GameMap object. * @throws IllegalArgumentException if undo limit is negative but not -1. * @throws IllegalArgumentException if there are multiple same upper-case letters, i.e., one player can only exist at one position. * @throws IllegalArgumentException if there are no players in the map. * @throws IllegalArgumentException if the number of boxes is not equal to the number of box destinations. * @throws IllegalArgumentException if there are boxes whose {@link Box#getPlayerId()} public GameState(@NotNull GameMap map) { // TODO this.map = map; this.undoQuota = map.undolimit; } public void putEntity(Position position, Entity entity) { // TODO char set = ' '; if (entity instanceof Wall) { set = '#'; } else if (entity instanceof Empty) { set = '.'; } else if (entity instanceof Box) { set = (char) (((Box) entity).getPlayerId() + 'a'); } else if (entity instanceof Player) { set = (char) (((Player) entity).getId() + 'A'); } // System.out.println(set); String[] lines = GameMap.map.split(System.lineSeparator()); int index = lines[0].length() + 1; for (int i = 0; i < position.y(); i++) { index = index + lines[i + 1].length() + 1; } index = index + position.x(); // System.out.println(GameMap.map); StringBuilder sb = new StringBuilder(GameMap.map); sb.setCharAt(index, set); GameMap.map = sb.toString(); // System.out.println(GameMap.map); } public @Nullable Entity getEntity(@NotNull Position position) { // TODO String[] lines = state.split(System.lineSeparator()); // Arrays.stream(lines).forEach(System.out::println); if (lines[position.y() + 1].length() < getMapMaxWidth() && position.x() >= lines[position.y() + 1].length()) { return null; } char entity = lines[position.y() + 1].charAt(position.x()); if (entity == '@' || entity == '.') { return new Empty(); } else if (entity == '#') { return new Wall(); } else if (Character.isLowerCase(entity)) { int id = (entity - 'a'); // System.out.println(id); return new Box(id); } else if (Character.isUpperCase(entity)) { int id = (entity - 'A'); // System.out.println(id); return new Player(id); } return null; } /** * Get all box destination positions as a set in the game map. * This should be the same as that in {@link GameMap}",
        "label": "F"
    },
    "1157": {
        "dataset": "COMP 3021",
        "project": "mdychengbeng",
        "bug_id": "39",
        "T": "void testUndoWhenThereIsMoveButNoCheckpoint() { final var gameState = new GameState(TestHelper.parseGameMap(\"\"\" 233 ###### #A.a@# #..a@# ###### \"\"\" )); gameState.move(Position.of(1, 1), Position.of(2, 1)); gameState.undo(); }",
        "C": "public GameState(@NotNull GameMap map) { // TODO this.map = map; this.undoQuota = map.undolimit; } public void move(Position from, Position to) { // TODO String[] lines = state.split(System.lineSeparator()); int indexTo = lines[0].length() + 1; int indexFrom = lines[0].length() + 1; for (int i = 0; i < to.y(); i++) { indexTo = indexTo + lines[i + 1].length() + 1; } for (int i = 0; i < from.y(); i++) { indexFrom = indexFrom + lines[i + 1].length() + 1; } indexTo = indexTo + to.x(); indexFrom = indexFrom + from.x(); // System.out.println(state.charAt(indexFrom)); // System.out.println(state.charAt(indexTo)); StringBuilder sb = new StringBuilder(state); sb.setCharAt(indexTo, state.charAt(indexFrom)); sb.setCharAt(indexFrom, '.'); this.state = sb.toString(); // System.out.println(state); } /** * Record a checkpoint of the game state, including: * <li>All current positions of entities in the game map.</li> * <li>Current undo quota</li> * <p> * Checkpoint is used in {@link GameState#undo()} public static @NotNull Position of(int x, int y) { return new Position(x, y); } public void undo() { // TODO if (this.cp.size() > 1) { this.state = this.cp.get(cp.size() - 2).state; this.cp.remove(cp.size() - 1); if (undoQuota == -1) { this.undoQuota = undoQuota; } else { this.undoQuota = undoQuota - 1; } } else if (this.cp.size() == 1) { this.state = this.cp.get(0).state; } // System.out.println(undoQuota); } /** * Get the maximum width of the game map. * This should be the same as that in {@link GameMap}",
        "label": "P"
    },
    "1158": {
        "dataset": "COMP 3021",
        "project": "mdychengbeng",
        "bug_id": "40",
        "T": "void testGameExit() { final var gameState = mock(GameState.class); final var inputEngine = mock(TerminalInputEngine.class); final var renderingEngine = mock(TerminalRenderingEngine.class); when(gameState.isWin()).thenReturn(false, false, false); when(inputEngine.fetchAction()) .thenReturn(new InvalidInput(0, \"\"), new InvalidInput(0, \"\"), new Exit(0)); final var game = new TerminalSokobanGame(gameState, inputEngine, renderingEngine); game.run(); verify(renderingEngine, atLeastOnce()).message(any()); }",
        "C": "public InvalidInput(int initiator, @NotNull String message) { super(initiator); this.message = message; } public Exit(int initiator) { super(initiator); } public TerminalSokobanGame(GameState gameState, TerminalInputEngine inputEngine, TerminalRenderingEngine renderingEngine) { super(gameState); this.inputEngine = inputEngine; this.renderingEngine = renderingEngine; // TODO // Check the number of players if (gameState.getAllPlayerPositions().size() > 2) { throw new IllegalArgumentException(); } } public void run() { // TODO renderingEngine.message(StringResources.GAME_READY_MESSAGE); renderingEngine.render(state); if (this.state.getUndoQuota().isEmpty()) { renderingEngine.message(StringResources.UNDO_QUOTA_UNLIMITED); } if (this.state.getUndoQuota().isPresent()) { String message = String.format(StringResources.UNDO_QUOTA_TEMPLATE, this.state.getUndoQuota().get()); renderingEngine.message(message); } renderingEngine.message(\">>>\"); this.state.initialCheckpoint(); while (!this.shouldStop()) { Action action = inputEngine.fetchAction(); ActionResult result = this.processAction(action); if (action instanceof Exit) { renderingEngine.render(state); renderingEngine.message(StringResources.GAME_EXIT_MESSAGE); return; } if (result instanceof ActionResult.Failed) { String message = ((ActionResult.Failed) result).getReason(); renderingEngine.message(message); } renderingEngine.render(state); if (!this.shouldStop()) { if (this.state.getUndoQuota().isEmpty()) { renderingEngine.message(StringResources.UNDO_QUOTA_UNLIMITED); } if (this.state.getUndoQuota().isPresent()) { String message = String.format(StringResources.UNDO_QUOTA_TEMPLATE, this.state.getUndoQuota().get()); renderingEngine.message(message); } } renderingEngine.message(\">>>\"); } renderingEngine.message(StringResources.GAME_EXIT_MESSAGE); renderingEngine.message(StringResources.WIN_MESSAGE); return; }",
        "label": "P"
    },
    "1159": {
        "dataset": "COMP 3021",
        "project": "mdychengbeng",
        "bug_id": "41",
        "T": "void testGameWin() { final var gameState = mock(GameState.class); final var inputEngine = mock(TerminalInputEngine.class); final var renderingEngine = mock(TerminalRenderingEngine.class); when(gameState.isWin()).thenReturn(false, false, false, true); when(inputEngine.fetchAction()) .thenReturn(new InvalidInput(0, \"\")); final var game = new TerminalSokobanGame(gameState, inputEngine, renderingEngine); game.run(); verify(gameState, atLeastOnce()).isWin(); verify(renderingEngine, atLeastOnce()).message(any()); }",
        "C": "public InvalidInput(int initiator, @NotNull String message) { super(initiator); this.message = message; } public TerminalSokobanGame(GameState gameState, TerminalInputEngine inputEngine, TerminalRenderingEngine renderingEngine) { super(gameState); this.inputEngine = inputEngine; this.renderingEngine = renderingEngine; // TODO // Check the number of players if (gameState.getAllPlayerPositions().size() > 2) { throw new IllegalArgumentException(); } } public void run() { // TODO renderingEngine.message(StringResources.GAME_READY_MESSAGE); renderingEngine.render(state); if (this.state.getUndoQuota().isEmpty()) { renderingEngine.message(StringResources.UNDO_QUOTA_UNLIMITED); } if (this.state.getUndoQuota().isPresent()) { String message = String.format(StringResources.UNDO_QUOTA_TEMPLATE, this.state.getUndoQuota().get()); renderingEngine.message(message); } renderingEngine.message(\">>>\"); this.state.initialCheckpoint(); while (!this.shouldStop()) { Action action = inputEngine.fetchAction(); ActionResult result = this.processAction(action); if (action instanceof Exit) { renderingEngine.render(state); renderingEngine.message(StringResources.GAME_EXIT_MESSAGE); return; } if (result instanceof ActionResult.Failed) { String message = ((ActionResult.Failed) result).getReason(); renderingEngine.message(message); } renderingEngine.render(state); if (!this.shouldStop()) { if (this.state.getUndoQuota().isEmpty()) { renderingEngine.message(StringResources.UNDO_QUOTA_UNLIMITED); } if (this.state.getUndoQuota().isPresent()) { String message = String.format(StringResources.UNDO_QUOTA_TEMPLATE, this.state.getUndoQuota().get()); renderingEngine.message(message); } } renderingEngine.message(\">>>\"); } renderingEngine.message(StringResources.GAME_EXIT_MESSAGE); renderingEngine.message(StringResources.WIN_MESSAGE); return; }",
        "label": "P"
    },
    "1160": {
        "dataset": "COMP 3021",
        "project": "mdychengbeng",
        "bug_id": "42",
        "T": "void testMoreThanTwoPlayers() { final var gameState = mock(GameState.class); final var inputEngine = mock(TerminalInputEngine.class); final var renderingEngine = mock(TerminalRenderingEngine.class); when(gameState.getAllPlayerPositions()).thenReturn(new HashSet<>(Arrays.asList(Position.of(1, 1), Position.of(1, 2), Position.of(1, 3)))); }",
        "C": "public static @NotNull Position of(int x, int y) { return new Position(x, y); }",
        "label": "P"
    },
    "1161": {
        "dataset": "COMP 3021",
        "project": "achengad",
        "bug_id": "0",
        "T": "void moveUp() { Position.of(233, 232), new Move.Up(-1).nextPosition(pos) ); }",
        "C": "public static @NotNull Position of(int x, int y) { return new Position(x, y); } public Up(int initiator) { super(initiator); }",
        "label": "P"
    },
    "1162": {
        "dataset": "COMP 3021",
        "project": "achengad",
        "bug_id": "1",
        "T": "void moveDown() { Position.of(233, 234), new Move.Down(-1).nextPosition(pos) ); }",
        "C": "public static @NotNull Position of(int x, int y) { return new Position(x, y); } public Down(int initiator) { super(initiator); }",
        "label": "P"
    },
    "1163": {
        "dataset": "COMP 3021",
        "project": "achengad",
        "bug_id": "2",
        "T": "void moveRight() { Position.of(234, 233), new Move.Right(-1).nextPosition(pos) ); }",
        "C": "public static @NotNull Position of(int x, int y) { return new Position(x, y); } public Right(int initiator) { super(initiator); }",
        "label": "P"
    },
    "1164": {
        "dataset": "COMP 3021",
        "project": "achengad",
        "bug_id": "3",
        "T": "void testExceedingUndoQuota() { final var gameState = mock(GameState.class); when(gameState.getPlayerPositionById(anyInt())).thenReturn(Position.of(0, 0)); when(gameState.getUndoQuota()).thenReturn(Optional.of(0)); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Undo(0)); }",
        "C": "public Undo(int initiator) { super(initiator); }",
        "label": "P"
    },
    "1165": {
        "dataset": "COMP 3021",
        "project": "achengad",
        "bug_id": "4",
        "T": "void testExit() { final var gameState = mock(GameState.class); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Exit(0)); }",
        "C": "public Exit(int initiator) { super(initiator); }",
        "label": "P"
    },
    "1166": {
        "dataset": "COMP 3021",
        "project": "achengad",
        "bug_id": "5",
        "T": "void testUndoUnlimited() { final var gameState = mock(GameState.class); when(gameState.getPlayerPositionById(anyInt())).thenReturn(Position.of(0, 0)); when(gameState.getUndoQuota()).thenReturn(Optional.empty()); final var game = new SokobanGameForTesting(gameState); for (int i = 0; i < 10000; i++) { final var result = game.feedActionForProcessing(new Undo(0)); } verify(gameState, times(10000)).undo(); }",
        "C": "public TerminalRenderingEngine(PrintStream outputSteam) { this.outputSteam = outputSteam; } public Undo(int initiator) { super(initiator); }",
        "label": "P"
    },
    "1167": {
        "dataset": "COMP 3021",
        "project": "achengad",
        "bug_id": "6",
        "T": "void testPushOtherPlayerBox() { String mapText = \"\"\" 233 ###### #AB.@# #b.a.# #@...# ###### \"\"\"; final var testMap = TestHelper.parseGameMap(mapText); final var gameState = spy(new GameState(testMap)); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Move.Down(0)); verify(gameState, never()).move(any(), any()); }",
        "C": "public GameState(@NotNull GameMap map) { // TODO this.map = map; // make a copy of mapInfo so changing in here wont affect the mapInfo in gamemap class mapInfo = new HashMap<>(map.getMapInfo()); undoLeft = map.getUndoLimit(); // make the init state to be the last state for undo action snapshot.add(new HashMap<>(mapInfo)); } public Down(int initiator) { super(initiator); }",
        "label": "P"
    },
    "1168": {
        "dataset": "COMP 3021",
        "project": "achengad",
        "bug_id": "7",
        "T": "void testMoveNonExistingPlayer() { String mapText = \"\"\" 233 ###### #A..@# #a...# ##...# ###### \"\"\"; final var testMap = TestHelper.parseGameMap(mapText); final var gameState = spy(new GameState(testMap)); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Move.Down(23)); }",
        "C": "public GameState(@NotNull GameMap map) { // TODO this.map = map; // make a copy of mapInfo so changing in here wont affect the mapInfo in gamemap class mapInfo = new HashMap<>(map.getMapInfo()); undoLeft = map.getUndoLimit(); // make the init state to be the last state for undo action snapshot.add(new HashMap<>(mapInfo)); } public Down(int initiator) { super(initiator); }",
        "label": "P"
    },
    "1169": {
        "dataset": "COMP 3021",
        "project": "achengad",
        "bug_id": "8",
        "T": "void testCheckpointWhenNeed() { final var gameState = spy(new GameState(TestHelper.parseGameMap(\"\"\" 233 ###### #.Aa@# #..a@# ###### \"\"\" ))); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Move.Right(0)); verify(gameState, times(1)).checkpoint(); }",
        "C": "public GameState(@NotNull GameMap map) { // TODO this.map = map; // make a copy of mapInfo so changing in here wont affect the mapInfo in gamemap class mapInfo = new HashMap<>(map.getMapInfo()); undoLeft = map.getUndoLimit(); // make the init state to be the last state for undo action snapshot.add(new HashMap<>(mapInfo)); } public Right(int initiator) { super(initiator); }",
        "label": "P"
    },
    "1170": {
        "dataset": "COMP 3021",
        "project": "achengad",
        "bug_id": "9",
        "T": "void testPushBoxAgainstWall() { String mapText = \"\"\" 233 ###### #A..@# #a...# ##...# ###### \"\"\"; final var testMap = TestHelper.parseGameMap(mapText); final var gameState = spy(new GameState(testMap)); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Move.Down(0)); verify(gameState, never()).move(any(), any()); }",
        "C": "public GameState(@NotNull GameMap map) { // TODO this.map = map; // make a copy of mapInfo so changing in here wont affect the mapInfo in gamemap class mapInfo = new HashMap<>(map.getMapInfo()); undoLeft = map.getUndoLimit(); // make the init state to be the last state for undo action snapshot.add(new HashMap<>(mapInfo)); } public Down(int initiator) { super(initiator); }",
        "label": "P"
    },
    "1171": {
        "dataset": "COMP 3021",
        "project": "achengad",
        "bug_id": "10",
        "T": "void testCheckpointWhenNotNeed() { final var gameState = spy(new GameState(TestHelper.parseGameMap(\"\"\" 233 ###### #A.a@# #..a@# ###### \"\"\" ))); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Move.Right(0)); verify(gameState, never()).checkpoint(); } private static class SokobanGameForTesting extends AbstractSokobanGame { protected SokobanGameForTesting(GameState gameState) { super(gameState); } @Override public void run() { } public ActionResult feedActionForProcessing(Action action) { return processAction(action); } }",
        "C": "public GameState(@NotNull GameMap map) { // TODO this.map = map; // make a copy of mapInfo so changing in here wont affect the mapInfo in gamemap class mapInfo = new HashMap<>(map.getMapInfo()); undoLeft = map.getUndoLimit(); // make the init state to be the last state for undo action snapshot.add(new HashMap<>(mapInfo)); } public Right(int initiator) { super(initiator); } public void run() { // TODO renderingEngine.message(GAME_READY_MESSAGE); renderingEngine.render(state); while (!shouldStop()) { showQuotaText(); Action action = inputEngine.fetchAction(); ActionResult result = processAction(action); if(result instanceof ActionResult.Failed){ renderingEngine.message(((ActionResult.Failed) result).getReason()); } renderingEngine.render(state); } renderingEngine.message(GAME_EXIT_MESSAGE); if (state.isWin()) { renderingEngine.message(WIN_MESSAGE); } } protected ActionResult processAction(@NotNull Action action) { // TODO if (action instanceof InvalidInput) { return new ActionResult.Failed(action, INVALID_INPUT_MESSAGE); } else if (action instanceof Move) { if(state.getPlayerPositionById(action.getInitiator()) == null){ return new ActionResult.Failed(action, PLAYER_NOT_FOUND); } Position playerOriginalPosition = state.getPlayerPositionById(action.getInitiator()); Position playerDestinationPosition = ((Move) action).nextPosition(playerOriginalPosition); Entity startingEntity = state.getEntity(playerOriginalPosition); Entity destinationEntity = state.getEntity(playerDestinationPosition); if (destinationEntity instanceof Wall) { return new ActionResult.Failed(action, \"You hit a wall.\"); } if (destinationEntity instanceof Player) { return new ActionResult.Failed(action, \"You hit another player.\"); } if (destinationEntity instanceof Box box) { if (box.getPlayerId() != ((Player) startingEntity).getId()) { return new ActionResult.Failed(action, \"You cannot move other players' boxes.\"); } Position positionBehindTheBox = ((Move) action).nextPosition(playerDestinationPosition); Entity entityBehindTheBox = state.getEntity(positionBehindTheBox); if (entityBehindTheBox instanceof Wall || entityBehindTheBox instanceof Player || entityBehindTheBox instanceof Box) { return new ActionResult.Failed(action, \"Failed to push box.\"); } else { state.move(playerDestinationPosition, positionBehindTheBox); state.move(playerOriginalPosition, playerDestinationPosition); state.checkpoint(); return new ActionResult.Success(action); } } // should reach here only if there is empty space infront when moving state.move(playerOriginalPosition, playerDestinationPosition); return new ActionResult.Success(action); } else if (action instanceof Undo) { // if there is undo quota left if (state.getUndoQuota().isEmpty() || state.getUndoQuota().get() > 0) { state.undo(); return new ActionResult.Success(action); } else { return new ActionResult.Failed(action, UNDO_QUOTA_RUN_OUT); } } else if (action instanceof Exit) { exited = true; return new ActionResult.Success(action); } throw new ShouldNotReachException(); }",
        "label": "P"
    },
    "1172": {
        "dataset": "COMP 3021",
        "project": "achengad",
        "bug_id": "11",
        "T": "void testHitAnotherPlayer() { String mapText = \"\"\" 233 ###### #A..@# #B...# #ab.@# ###### \"\"\"; final var testMap = TestHelper.parseGameMap(mapText); final var gameState = spy(new GameState(testMap)); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Move.Down(0)); verify(gameState, never()).move(any(), any()); }",
        "C": "public GameState(@NotNull GameMap map) { // TODO this.map = map; // make a copy of mapInfo so changing in here wont affect the mapInfo in gamemap class mapInfo = new HashMap<>(map.getMapInfo()); undoLeft = map.getUndoLimit(); // make the init state to be the last state for undo action snapshot.add(new HashMap<>(mapInfo)); } public Down(int initiator) { super(initiator); }",
        "label": "P"
    },
    "1173": {
        "dataset": "COMP 3021",
        "project": "achengad",
        "bug_id": "12",
        "T": "void testUndoWithinQuota() { final var gameState = mock(GameState.class); when(gameState.getPlayerPositionById(anyInt())).thenReturn(Position.of(0, 0)); when(gameState.getUndoQuota()).thenReturn(Optional.of(1)); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Undo(0)); verify(gameState, times(1)).undo(); }",
        "C": "public Undo(int initiator) { super(initiator); }",
        "label": "P"
    },
    "1174": {
        "dataset": "COMP 3021",
        "project": "achengad",
        "bug_id": "13",
        "T": "void testInvalidInput() { final var game = new SokobanGameForTesting(mock(GameState.class)); final var message = String.valueOf(new Random().nextLong()); final var action = new InvalidInput(-1, message); final var result = game.feedActionForProcessing(action); }",
        "C": "public InvalidInput(int initiator, @NotNull String message) { super(initiator); this.message = message; }",
        "label": "P"
    },
    "1175": {
        "dataset": "COMP 3021",
        "project": "achengad",
        "bug_id": "14",
        "T": "void testUndoLimitParsing() { final var gameMap = TestHelper.parseGameMap(rectangularMap); }",
        "C": "",
        "label": "P"
    },
    "1176": {
        "dataset": "COMP 3021",
        "project": "achengad",
        "bug_id": "15",
        "T": "void testWidthForNonRectangularMap() { final var gameMap = TestHelper.parseGameMap(nonRectangularMap); }",
        "C": "",
        "label": "P"
    },
    "1177": {
        "dataset": "COMP 3021",
        "project": "achengad",
        "bug_id": "16",
        "T": "void testTwoPlayersMap() { final var twoPlayersMap = \"\"\" 233 ###### #A..@# #..B@# #....# #.a..# #..b.# ###### \"\"\"; final var gameMap = TestHelper.parseGameMap(twoPlayersMap); final var playerIds = gameMap.getPlayerIds(); final var expectedIds = new HashSet<Integer>(); expectedIds.add(0); expectedIds.add(1); }",
        "C": "public Set<Integer> getPlayerIds() { // TODO Set<Integer> playerIds = new HashSet<>(); for (Entity entity : mapInfo.values()) { if (entity instanceof Player player) { playerIds.add(player.getId()); } } return playerIds; }",
        "label": "P"
    },
    "1178": {
        "dataset": "COMP 3021",
        "project": "achengad",
        "bug_id": "17",
        "T": "void testMapWithoutPlayer() { final var invalidMap = \"\"\" 233 ### #.# ### \"\"\"; } // @Tag(TestKind.HIDDEN) // @Test // void testUnmatchedPlayersAndBoxes() { // final var invalidMap = \"\"\" // 233 // ###### // #A..@# // #...@# // #a.b@# // #.a.@# // #..a.# // ###### // \"\"\"; // assertThrowsExactly(IllegalArgumentException.class, () -> TestHelper.parseGameMap(invalidMap)); // }",
        "C": "public TerminalRenderingEngine(PrintStream outputSteam) { this.outputSteam = outputSteam; }",
        "label": "P"
    },
    "1179": {
        "dataset": "COMP 3021",
        "project": "achengad",
        "bug_id": "18",
        "T": "void testManyPlayersMap() { final var manyPlayersMap = \"\"\" 233 ###### #A.P@@# #vCB@@# #.cpD@# #Ga.d@# #g.bV@# ###### \"\"\"; final var gameMap = TestHelper.parseGameMap(manyPlayersMap); final var playerIds = gameMap.getPlayerIds(); final var expectedIds = new HashSet<>(Arrays.asList( 0, 'P' - 'A', 'C' - 'A', 'B' - 'A', 'D' - 'A', 'G' - 'A', 'V' - 'A' )); }",
        "C": "public Set<Integer> getPlayerIds() { // TODO Set<Integer> playerIds = new HashSet<>(); for (Entity entity : mapInfo.values()) { if (entity instanceof Player player) { playerIds.add(player.getId()); } } return playerIds; }",
        "label": "P"
    },
    "1180": {
        "dataset": "COMP 3021",
        "project": "achengad",
        "bug_id": "19",
        "T": "void testHeightForNonRectangularMap() { final var gameMap = TestHelper.parseGameMap(nonRectangularMap); }",
        "C": "",
        "label": "P"
    },
    "1181": {
        "dataset": "COMP 3021",
        "project": "achengad",
        "bug_id": "20",
        "T": "void testDuplicatedPlayers() { final var invalidMap = \"\"\" 233 ###### #A..@# #..A@# #....# #.a..# #..b.# ###### \"\"\"; }",
        "C": "",
        "label": "P"
    },
    "1182": {
        "dataset": "COMP 3021",
        "project": "achengad",
        "bug_id": "21",
        "T": "void testParseMapWithoutUndoLimit() { final var invalidMap = String.join(\"\\n\", rectangularMap.lines().skip(1).toList()); }",
        "C": "",
        "label": "P"
    },
    "1183": {
        "dataset": "COMP 3021",
        "project": "achengad",
        "bug_id": "22",
        "T": "void testInsufficientDestinations() { final var invalidMap = \"\"\" 233 ###### #A..@# #...@# #a...# #.a..# #..a.# ###### \"\"\"; }",
        "C": "",
        "label": "P"
    },
    "1184": {
        "dataset": "COMP 3021",
        "project": "achengad",
        "bug_id": "23",
        "T": "void testSuperLargeMap() { try { new GameMap(Integer.MAX_VALUE, Integer.MAX_VALUE, Collections.emptySet(), 0); } catch (OutOfMemoryError e) { throw new RuntimeException(e); } }); }",
        "C": "public GameMap(int maxWidth, int maxHeight, Set<Position> destinations, int undoLimit) { // TODO this.width = maxWidth; this.height = maxHeight; this.undoLimit = undoLimit; this.destinations = destinations; } /** * Parses the map from a string representation. * The first line is undo limit. * Starting from the second line, the game map is represented as follows, * <li># represents a {@link Wall}</li> * <li>@ represents a box destination.</li> * <li>Any upper-case letter represents a {@link Player}.</li> * <li> * Any lower-case letter represents a {@link Box} that is only movable by the player with the corresponding upper-case letter. * For instance, box \"a\" can only be moved by player \"A\" and not movable by player \"B\". * </li> * <li>. represents an {@link Empty} position in the map, meaning there is no player or box currently at this position.</li> * <p> * Notes: * <li> * There can be at most 26 players. * All implementations of classes in the hk.ust.comp3021.game package should support up to 26 players. * </li> * <li> * For simplicity, we assume the given map is bounded with a closed boundary. * There is no need to check this point. * </li> * <li> * Example maps can be found in \"src/main/resources\". * </li> * * @param mapText The string representation. * @return The parsed GameMap object. * @throws IllegalArgumentException if undo limit is negative but not -1. * @throws IllegalArgumentException if there are multiple same upper-case letters, i.e., one player can only exist at one position. * @throws IllegalArgumentException if there are no players in the map. * @throws IllegalArgumentException if the number of boxes is not equal to the number of box destinations. * @throws IllegalArgumentException if there are boxes whose {@link Box#getPlayerId()} public TerminalRenderingEngine(PrintStream outputSteam) { this.outputSteam = outputSteam; }",
        "label": "P"
    },
    "1185": {
        "dataset": "COMP 3021",
        "project": "achengad",
        "bug_id": "24",
        "T": "void testInvalidUndoLimit() { final var invalidMap = \"\"\" -233 ###### #A..@# #...@# #a.b@# #.a.@# #..a.# ###### \"\"\"; }",
        "C": "",
        "label": "P"
    },
    "1186": {
        "dataset": "COMP 3021",
        "project": "achengad",
        "bug_id": "25",
        "T": "void testEmptyMap() { final var invalidMap = \"\"; }",
        "C": "",
        "label": "P"
    },
    "1187": {
        "dataset": "COMP 3021",
        "project": "achengad",
        "bug_id": "26",
        "T": "void testMove(String input, String name, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); } private InputStream fixValueStream(String content) { final var bytes = content.getBytes(StandardCharsets.UTF_8); return new ByteArrayInputStream(bytes); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine(); // TODO // dummy id int id = -1; int playerOneId = 0; int playerTwoId = 1; String lowerCaseInput = inputLine.toLowerCase(); if (lowerCaseInput.equals(EXIT_COMMAND_TEXT)) { return new Exit(id); } else if (lowerCaseInput.equals(\"u\")) { return new Undo(id); } else if (lowerCaseInput.equals(\"a\")) { // assume wasd movement only made by player 1 return new Move.Left(playerOneId); } else if (lowerCaseInput.equals(\"w\")) { return new Move.Up(playerOneId); } else if (lowerCaseInput.equals(\"s\")) { return new Move.Down(playerOneId); } else if (lowerCaseInput.equals(\"d\")) { return new Move.Right(playerOneId); } else if (lowerCaseInput.equals(\"h\")) { // assume hjkl movement only made by player 2 return new Move.Left(playerTwoId); } else if (lowerCaseInput.equals(\"j\")) { return new Move.Down(playerTwoId); } else if (lowerCaseInput.equals(\"k\")) { return new Move.Up(playerTwoId); } else if (lowerCaseInput.equals(\"l\")) { return new Move.Right(playerTwoId); } else { return new InvalidInput(id, INVALID_INPUT_MESSAGE); } }",
        "label": "P"
    },
    "1188": {
        "dataset": "COMP 3021",
        "project": "achengad",
        "bug_id": "27",
        "T": "void testMove(String input, String name, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); } private InputStream fixValueStream(String content) { final var bytes = content.getBytes(StandardCharsets.UTF_8); return new ByteArrayInputStream(bytes); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine(); // TODO // dummy id int id = -1; int playerOneId = 0; int playerTwoId = 1; String lowerCaseInput = inputLine.toLowerCase(); if (lowerCaseInput.equals(EXIT_COMMAND_TEXT)) { return new Exit(id); } else if (lowerCaseInput.equals(\"u\")) { return new Undo(id); } else if (lowerCaseInput.equals(\"a\")) { // assume wasd movement only made by player 1 return new Move.Left(playerOneId); } else if (lowerCaseInput.equals(\"w\")) { return new Move.Up(playerOneId); } else if (lowerCaseInput.equals(\"s\")) { return new Move.Down(playerOneId); } else if (lowerCaseInput.equals(\"d\")) { return new Move.Right(playerOneId); } else if (lowerCaseInput.equals(\"h\")) { // assume hjkl movement only made by player 2 return new Move.Left(playerTwoId); } else if (lowerCaseInput.equals(\"j\")) { return new Move.Down(playerTwoId); } else if (lowerCaseInput.equals(\"k\")) { return new Move.Up(playerTwoId); } else if (lowerCaseInput.equals(\"l\")) { return new Move.Right(playerTwoId); } else { return new InvalidInput(id, INVALID_INPUT_MESSAGE); } }",
        "label": "P"
    },
    "1189": {
        "dataset": "COMP 3021",
        "project": "achengad",
        "bug_id": "28",
        "T": "void testMove(String input, String name, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); } private InputStream fixValueStream(String content) { final var bytes = content.getBytes(StandardCharsets.UTF_8); return new ByteArrayInputStream(bytes); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine(); // TODO // dummy id int id = -1; int playerOneId = 0; int playerTwoId = 1; String lowerCaseInput = inputLine.toLowerCase(); if (lowerCaseInput.equals(EXIT_COMMAND_TEXT)) { return new Exit(id); } else if (lowerCaseInput.equals(\"u\")) { return new Undo(id); } else if (lowerCaseInput.equals(\"a\")) { // assume wasd movement only made by player 1 return new Move.Left(playerOneId); } else if (lowerCaseInput.equals(\"w\")) { return new Move.Up(playerOneId); } else if (lowerCaseInput.equals(\"s\")) { return new Move.Down(playerOneId); } else if (lowerCaseInput.equals(\"d\")) { return new Move.Right(playerOneId); } else if (lowerCaseInput.equals(\"h\")) { // assume hjkl movement only made by player 2 return new Move.Left(playerTwoId); } else if (lowerCaseInput.equals(\"j\")) { return new Move.Down(playerTwoId); } else if (lowerCaseInput.equals(\"k\")) { return new Move.Up(playerTwoId); } else if (lowerCaseInput.equals(\"l\")) { return new Move.Right(playerTwoId); } else { return new InvalidInput(id, INVALID_INPUT_MESSAGE); } }",
        "label": "P"
    },
    "1190": {
        "dataset": "COMP 3021",
        "project": "achengad",
        "bug_id": "29",
        "T": "void testMove(String input, String name, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); } private InputStream fixValueStream(String content) { final var bytes = content.getBytes(StandardCharsets.UTF_8); return new ByteArrayInputStream(bytes); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine(); // TODO // dummy id int id = -1; int playerOneId = 0; int playerTwoId = 1; String lowerCaseInput = inputLine.toLowerCase(); if (lowerCaseInput.equals(EXIT_COMMAND_TEXT)) { return new Exit(id); } else if (lowerCaseInput.equals(\"u\")) { return new Undo(id); } else if (lowerCaseInput.equals(\"a\")) { // assume wasd movement only made by player 1 return new Move.Left(playerOneId); } else if (lowerCaseInput.equals(\"w\")) { return new Move.Up(playerOneId); } else if (lowerCaseInput.equals(\"s\")) { return new Move.Down(playerOneId); } else if (lowerCaseInput.equals(\"d\")) { return new Move.Right(playerOneId); } else if (lowerCaseInput.equals(\"h\")) { // assume hjkl movement only made by player 2 return new Move.Left(playerTwoId); } else if (lowerCaseInput.equals(\"j\")) { return new Move.Down(playerTwoId); } else if (lowerCaseInput.equals(\"k\")) { return new Move.Up(playerTwoId); } else if (lowerCaseInput.equals(\"l\")) { return new Move.Right(playerTwoId); } else { return new InvalidInput(id, INVALID_INPUT_MESSAGE); } }",
        "label": "P"
    },
    "1191": {
        "dataset": "COMP 3021",
        "project": "achengad",
        "bug_id": "30",
        "T": "void testMove(String input, String name, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); } private InputStream fixValueStream(String content) { final var bytes = content.getBytes(StandardCharsets.UTF_8); return new ByteArrayInputStream(bytes); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine(); // TODO // dummy id int id = -1; int playerOneId = 0; int playerTwoId = 1; String lowerCaseInput = inputLine.toLowerCase(); if (lowerCaseInput.equals(EXIT_COMMAND_TEXT)) { return new Exit(id); } else if (lowerCaseInput.equals(\"u\")) { return new Undo(id); } else if (lowerCaseInput.equals(\"a\")) { // assume wasd movement only made by player 1 return new Move.Left(playerOneId); } else if (lowerCaseInput.equals(\"w\")) { return new Move.Up(playerOneId); } else if (lowerCaseInput.equals(\"s\")) { return new Move.Down(playerOneId); } else if (lowerCaseInput.equals(\"d\")) { return new Move.Right(playerOneId); } else if (lowerCaseInput.equals(\"h\")) { // assume hjkl movement only made by player 2 return new Move.Left(playerTwoId); } else if (lowerCaseInput.equals(\"j\")) { return new Move.Down(playerTwoId); } else if (lowerCaseInput.equals(\"k\")) { return new Move.Up(playerTwoId); } else if (lowerCaseInput.equals(\"l\")) { return new Move.Right(playerTwoId); } else { return new InvalidInput(id, INVALID_INPUT_MESSAGE); } }",
        "label": "P"
    },
    "1192": {
        "dataset": "COMP 3021",
        "project": "achengad",
        "bug_id": "31",
        "T": "void testMove(String input, String name, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); } private InputStream fixValueStream(String content) { final var bytes = content.getBytes(StandardCharsets.UTF_8); return new ByteArrayInputStream(bytes); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine(); // TODO // dummy id int id = -1; int playerOneId = 0; int playerTwoId = 1; String lowerCaseInput = inputLine.toLowerCase(); if (lowerCaseInput.equals(EXIT_COMMAND_TEXT)) { return new Exit(id); } else if (lowerCaseInput.equals(\"u\")) { return new Undo(id); } else if (lowerCaseInput.equals(\"a\")) { // assume wasd movement only made by player 1 return new Move.Left(playerOneId); } else if (lowerCaseInput.equals(\"w\")) { return new Move.Up(playerOneId); } else if (lowerCaseInput.equals(\"s\")) { return new Move.Down(playerOneId); } else if (lowerCaseInput.equals(\"d\")) { return new Move.Right(playerOneId); } else if (lowerCaseInput.equals(\"h\")) { // assume hjkl movement only made by player 2 return new Move.Left(playerTwoId); } else if (lowerCaseInput.equals(\"j\")) { return new Move.Down(playerTwoId); } else if (lowerCaseInput.equals(\"k\")) { return new Move.Up(playerTwoId); } else if (lowerCaseInput.equals(\"l\")) { return new Move.Right(playerTwoId); } else { return new InvalidInput(id, INVALID_INPUT_MESSAGE); } }",
        "label": "P"
    },
    "1193": {
        "dataset": "COMP 3021",
        "project": "achengad",
        "bug_id": "32",
        "T": "void testMove(String input, String name, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); } private InputStream fixValueStream(String content) { final var bytes = content.getBytes(StandardCharsets.UTF_8); return new ByteArrayInputStream(bytes); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine(); // TODO // dummy id int id = -1; int playerOneId = 0; int playerTwoId = 1; String lowerCaseInput = inputLine.toLowerCase(); if (lowerCaseInput.equals(EXIT_COMMAND_TEXT)) { return new Exit(id); } else if (lowerCaseInput.equals(\"u\")) { return new Undo(id); } else if (lowerCaseInput.equals(\"a\")) { // assume wasd movement only made by player 1 return new Move.Left(playerOneId); } else if (lowerCaseInput.equals(\"w\")) { return new Move.Up(playerOneId); } else if (lowerCaseInput.equals(\"s\")) { return new Move.Down(playerOneId); } else if (lowerCaseInput.equals(\"d\")) { return new Move.Right(playerOneId); } else if (lowerCaseInput.equals(\"h\")) { // assume hjkl movement only made by player 2 return new Move.Left(playerTwoId); } else if (lowerCaseInput.equals(\"j\")) { return new Move.Down(playerTwoId); } else if (lowerCaseInput.equals(\"k\")) { return new Move.Up(playerTwoId); } else if (lowerCaseInput.equals(\"l\")) { return new Move.Right(playerTwoId); } else { return new InvalidInput(id, INVALID_INPUT_MESSAGE); } }",
        "label": "P"
    },
    "1194": {
        "dataset": "COMP 3021",
        "project": "achengad",
        "bug_id": "33",
        "T": "void testMove(String input, String name, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); } private InputStream fixValueStream(String content) { final var bytes = content.getBytes(StandardCharsets.UTF_8); return new ByteArrayInputStream(bytes); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine(); // TODO // dummy id int id = -1; int playerOneId = 0; int playerTwoId = 1; String lowerCaseInput = inputLine.toLowerCase(); if (lowerCaseInput.equals(EXIT_COMMAND_TEXT)) { return new Exit(id); } else if (lowerCaseInput.equals(\"u\")) { return new Undo(id); } else if (lowerCaseInput.equals(\"a\")) { // assume wasd movement only made by player 1 return new Move.Left(playerOneId); } else if (lowerCaseInput.equals(\"w\")) { return new Move.Up(playerOneId); } else if (lowerCaseInput.equals(\"s\")) { return new Move.Down(playerOneId); } else if (lowerCaseInput.equals(\"d\")) { return new Move.Right(playerOneId); } else if (lowerCaseInput.equals(\"h\")) { // assume hjkl movement only made by player 2 return new Move.Left(playerTwoId); } else if (lowerCaseInput.equals(\"j\")) { return new Move.Down(playerTwoId); } else if (lowerCaseInput.equals(\"k\")) { return new Move.Up(playerTwoId); } else if (lowerCaseInput.equals(\"l\")) { return new Move.Right(playerTwoId); } else { return new InvalidInput(id, INVALID_INPUT_MESSAGE); } }",
        "label": "P"
    },
    "1195": {
        "dataset": "COMP 3021",
        "project": "achengad",
        "bug_id": "34",
        "T": "void testUndo(String input, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine(); // TODO // dummy id int id = -1; int playerOneId = 0; int playerTwoId = 1; String lowerCaseInput = inputLine.toLowerCase(); if (lowerCaseInput.equals(EXIT_COMMAND_TEXT)) { return new Exit(id); } else if (lowerCaseInput.equals(\"u\")) { return new Undo(id); } else if (lowerCaseInput.equals(\"a\")) { // assume wasd movement only made by player 1 return new Move.Left(playerOneId); } else if (lowerCaseInput.equals(\"w\")) { return new Move.Up(playerOneId); } else if (lowerCaseInput.equals(\"s\")) { return new Move.Down(playerOneId); } else if (lowerCaseInput.equals(\"d\")) { return new Move.Right(playerOneId); } else if (lowerCaseInput.equals(\"h\")) { // assume hjkl movement only made by player 2 return new Move.Left(playerTwoId); } else if (lowerCaseInput.equals(\"j\")) { return new Move.Down(playerTwoId); } else if (lowerCaseInput.equals(\"k\")) { return new Move.Up(playerTwoId); } else if (lowerCaseInput.equals(\"l\")) { return new Move.Right(playerTwoId); } else { return new InvalidInput(id, INVALID_INPUT_MESSAGE); } }",
        "label": "P"
    },
    "1196": {
        "dataset": "COMP 3021",
        "project": "achengad",
        "bug_id": "35",
        "T": "void testInvalidInput() { final var inputStream = fixValueStream(\"blah blah\"); final var inputEngine = new TerminalInputEngine(inputStream); final var action = inputEngine.fetchAction(); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine(); // TODO // dummy id int id = -1; int playerOneId = 0; int playerTwoId = 1; String lowerCaseInput = inputLine.toLowerCase(); if (lowerCaseInput.equals(EXIT_COMMAND_TEXT)) { return new Exit(id); } else if (lowerCaseInput.equals(\"u\")) { return new Undo(id); } else if (lowerCaseInput.equals(\"a\")) { // assume wasd movement only made by player 1 return new Move.Left(playerOneId); } else if (lowerCaseInput.equals(\"w\")) { return new Move.Up(playerOneId); } else if (lowerCaseInput.equals(\"s\")) { return new Move.Down(playerOneId); } else if (lowerCaseInput.equals(\"d\")) { return new Move.Right(playerOneId); } else if (lowerCaseInput.equals(\"h\")) { // assume hjkl movement only made by player 2 return new Move.Left(playerTwoId); } else if (lowerCaseInput.equals(\"j\")) { return new Move.Down(playerTwoId); } else if (lowerCaseInput.equals(\"k\")) { return new Move.Up(playerTwoId); } else if (lowerCaseInput.equals(\"l\")) { return new Move.Right(playerTwoId); } else { return new InvalidInput(id, INVALID_INPUT_MESSAGE); } }",
        "label": "P"
    },
    "1197": {
        "dataset": "COMP 3021",
        "project": "achengad",
        "bug_id": "36",
        "T": "void testUndoWhenThereIsNoMove() { final var gameState = new GameState(TestHelper.parseGameMap(\"\"\" 233 ###### #A.a@# #..a@# ###### \"\"\" )); gameState.undo(); } private Entity generateEntity(int key) { return switch (key % 4) { case 0 -> new Box(0); case 1 -> new Empty(); case 2 -> new Player(0); case 3 -> new Wall(); default -> throw new ShouldNotReachException(); }; }",
        "C": "public GameState(@NotNull GameMap map) { // TODO this.map = map; // make a copy of mapInfo so changing in here wont affect the mapInfo in gamemap class mapInfo = new HashMap<>(map.getMapInfo()); undoLeft = map.getUndoLimit(); // make the init state to be the last state for undo action snapshot.add(new HashMap<>(mapInfo)); } public void undo() { // TODO // 1 snapshot is of the original map is created when the game start // if the snapshot size is larger than 1, that means there is at least 1 checkpoint made by movement if (snapshot.size() > 1) { // remove the last check point snapshot.pop(); // undo quota will be used when the checkpoint is made by movement // if undo quota is not unlimited if (!undoLeft.isEmpty()) { // assume quota left, reduce 1 quota undoLeft = Optional.of(undoLeft.get() - 1); } } // do the revert mapInfo = new HashMap<>(snapshot.peek()); } /** * Get the maximum width of the game map. * This should be the same as that in {@link GameMap} public TerminalRenderingEngine(PrintStream outputSteam) { this.outputSteam = outputSteam; } public Box(int playerId) { this.playerId = playerId; } public Player(int id) { this.id = id; } public ShouldNotReachException() { super(\"This branch should not be reached.\"); }",
        "label": "P"
    },
    "1198": {
        "dataset": "COMP 3021",
        "project": "achengad",
        "bug_id": "37",
        "T": "void testGetUndoUnlimited() { final var gameState = new GameState(TestHelper.parseGameMap(\"\"\" -1 ###### #.Aa@# #..a@# ###### \"\"\" )); }",
        "C": "public GameState(@NotNull GameMap map) { // TODO this.map = map; // make a copy of mapInfo so changing in here wont affect the mapInfo in gamemap class mapInfo = new HashMap<>(map.getMapInfo()); undoLeft = map.getUndoLimit(); // make the init state to be the last state for undo action snapshot.add(new HashMap<>(mapInfo)); }",
        "label": "P"
    },
    "1199": {
        "dataset": "COMP 3021",
        "project": "achengad",
        "bug_id": "38",
        "T": "void testMapCopying() { final var maxWidth = 2333; final var maxHeight = 2333; final var random = new Random(); final var randomEntities = Stream.generate(() -> Position.of(random.nextInt(maxWidth), random.nextInt(maxHeight))) .distinct() .limit(100) .collect(Collectors.toMap(Function.identity(), it -> generateEntity(it.x()))); final var firstPos = randomEntities.keySet().stream().findFirst(); final var gameMap = new GameMap(maxWidth, maxHeight, Collections.singleton(firstPos.get()), 233); randomEntities.forEach(gameMap::putEntity); final var gameState = new GameState(gameMap); final var randomPosition = randomEntities.keySet().stream().findAny(); gameMap.putEntity(randomPosition.get(), new Empty()); randomEntities.forEach((p, e) -> assertEquals(e, gameState.getEntity(p))); }",
        "C": "public static @NotNull Position of(int x, int y) { return new Position(x, y); } public GameMap(int maxWidth, int maxHeight, Set<Position> destinations, int undoLimit) { // TODO this.width = maxWidth; this.height = maxHeight; this.undoLimit = undoLimit; this.destinations = destinations; } /** * Parses the map from a string representation. * The first line is undo limit. * Starting from the second line, the game map is represented as follows, * <li># represents a {@link Wall}</li> * <li>@ represents a box destination.</li> * <li>Any upper-case letter represents a {@link Player}.</li> * <li> * Any lower-case letter represents a {@link Box} that is only movable by the player with the corresponding upper-case letter. * For instance, box \"a\" can only be moved by player \"A\" and not movable by player \"B\". * </li> * <li>. represents an {@link Empty} position in the map, meaning there is no player or box currently at this position.</li> * <p> * Notes: * <li> * There can be at most 26 players. * All implementations of classes in the hk.ust.comp3021.game package should support up to 26 players. * </li> * <li> * For simplicity, we assume the given map is bounded with a closed boundary. * There is no need to check this point. * </li> * <li> * Example maps can be found in \"src/main/resources\". * </li> * * @param mapText The string representation. * @return The parsed GameMap object. * @throws IllegalArgumentException if undo limit is negative but not -1. * @throws IllegalArgumentException if there are multiple same upper-case letters, i.e., one player can only exist at one position. * @throws IllegalArgumentException if there are no players in the map. * @throws IllegalArgumentException if the number of boxes is not equal to the number of box destinations. * @throws IllegalArgumentException if there are boxes whose {@link Box#getPlayerId()} public GameState(@NotNull GameMap map) { // TODO this.map = map; // make a copy of mapInfo so changing in here wont affect the mapInfo in gamemap class mapInfo = new HashMap<>(map.getMapInfo()); undoLeft = map.getUndoLimit(); // make the init state to be the last state for undo action snapshot.add(new HashMap<>(mapInfo)); } public void putEntity(Position position, Entity entity) { // TODO mapInfo.put(position, entity); } public @Nullable Entity getEntity(@NotNull Position position) { // TODO for (Map.Entry<Position, Entity> entry : mapInfo.entrySet()) { if (entry.getKey().equals(position)) { return entry.getValue(); } } return null; } /** * Get all box destination positions as a set in the game map. * This should be the same as that in {@link GameMap}",
        "label": "P"
    },
    "1200": {
        "dataset": "COMP 3021",
        "project": "achengad",
        "bug_id": "39",
        "T": "void testUndoWhenThereIsMoveButNoCheckpoint() { final var gameState = new GameState(TestHelper.parseGameMap(\"\"\" 233 ###### #A.a@# #..a@# ###### \"\"\" )); gameState.move(Position.of(1, 1), Position.of(2, 1)); gameState.undo(); }",
        "C": "public GameState(@NotNull GameMap map) { // TODO this.map = map; // make a copy of mapInfo so changing in here wont affect the mapInfo in gamemap class mapInfo = new HashMap<>(map.getMapInfo()); undoLeft = map.getUndoLimit(); // make the init state to be the last state for undo action snapshot.add(new HashMap<>(mapInfo)); } public void move(Position from, Position to) { // TODO // no need to check anything, just move it (checking should be done in processAction inside the AbstractSokobanGame class) Entity movingEntity = getEntity(from); mapInfo.put(from, new Empty()); mapInfo.put(to, movingEntity); } /** * Record a checkpoint of the game state, including: * <li>All current positions of entities in the game map.</li> * <li>Current undo quota</li> * <p> * Checkpoint is used in {@link GameState#undo()} public static @NotNull Position of(int x, int y) { return new Position(x, y); } public void undo() { // TODO // 1 snapshot is of the original map is created when the game start // if the snapshot size is larger than 1, that means there is at least 1 checkpoint made by movement if (snapshot.size() > 1) { // remove the last check point snapshot.pop(); // undo quota will be used when the checkpoint is made by movement // if undo quota is not unlimited if (!undoLeft.isEmpty()) { // assume quota left, reduce 1 quota undoLeft = Optional.of(undoLeft.get() - 1); } } // do the revert mapInfo = new HashMap<>(snapshot.peek()); } /** * Get the maximum width of the game map. * This should be the same as that in {@link GameMap}",
        "label": "P"
    },
    "1201": {
        "dataset": "COMP 3021",
        "project": "achengad",
        "bug_id": "40",
        "T": "void testGameExit() { final var gameState = mock(GameState.class); final var inputEngine = mock(TerminalInputEngine.class); final var renderingEngine = mock(TerminalRenderingEngine.class); when(gameState.isWin()).thenReturn(false, false, false); when(inputEngine.fetchAction()) .thenReturn(new InvalidInput(0, \"\"), new InvalidInput(0, \"\"), new Exit(0)); final var game = new TerminalSokobanGame(gameState, inputEngine, renderingEngine); game.run(); verify(renderingEngine, atLeastOnce()).message(any()); }",
        "C": "public InvalidInput(int initiator, @NotNull String message) { super(initiator); this.message = message; } public Exit(int initiator) { super(initiator); } public TerminalSokobanGame(GameState gameState, TerminalInputEngine inputEngine, TerminalRenderingEngine renderingEngine) { super(gameState); this.inputEngine = inputEngine; this.renderingEngine = renderingEngine; // TODO // Check the number of players // should not be larger than 2 ( should not be less than 1 too, but the test case seem to be allow for such case) if (gameState.getAllPlayerPositions().size() > 2) { throw new IllegalArgumentException(INVALID_INPUT_MESSAGE); } } public void run() { // TODO renderingEngine.message(GAME_READY_MESSAGE); renderingEngine.render(state); while (!shouldStop()) { showQuotaText(); Action action = inputEngine.fetchAction(); ActionResult result = processAction(action); if(result instanceof ActionResult.Failed){ renderingEngine.message(((ActionResult.Failed) result).getReason()); } renderingEngine.render(state); } renderingEngine.message(GAME_EXIT_MESSAGE); if (state.isWin()) { renderingEngine.message(WIN_MESSAGE); } }",
        "label": "P"
    },
    "1202": {
        "dataset": "COMP 3021",
        "project": "achengad",
        "bug_id": "41",
        "T": "void testGameWin() { final var gameState = mock(GameState.class); final var inputEngine = mock(TerminalInputEngine.class); final var renderingEngine = mock(TerminalRenderingEngine.class); when(gameState.isWin()).thenReturn(false, false, false, true); when(inputEngine.fetchAction()) .thenReturn(new InvalidInput(0, \"\")); final var game = new TerminalSokobanGame(gameState, inputEngine, renderingEngine); game.run(); verify(gameState, atLeastOnce()).isWin(); verify(renderingEngine, atLeastOnce()).message(any()); }",
        "C": "public InvalidInput(int initiator, @NotNull String message) { super(initiator); this.message = message; } public TerminalSokobanGame(GameState gameState, TerminalInputEngine inputEngine, TerminalRenderingEngine renderingEngine) { super(gameState); this.inputEngine = inputEngine; this.renderingEngine = renderingEngine; // TODO // Check the number of players // should not be larger than 2 ( should not be less than 1 too, but the test case seem to be allow for such case) if (gameState.getAllPlayerPositions().size() > 2) { throw new IllegalArgumentException(INVALID_INPUT_MESSAGE); } } public void run() { // TODO renderingEngine.message(GAME_READY_MESSAGE); renderingEngine.render(state); while (!shouldStop()) { showQuotaText(); Action action = inputEngine.fetchAction(); ActionResult result = processAction(action); if(result instanceof ActionResult.Failed){ renderingEngine.message(((ActionResult.Failed) result).getReason()); } renderingEngine.render(state); } renderingEngine.message(GAME_EXIT_MESSAGE); if (state.isWin()) { renderingEngine.message(WIN_MESSAGE); } }",
        "label": "P"
    },
    "1203": {
        "dataset": "COMP 3021",
        "project": "achengad",
        "bug_id": "42",
        "T": "void testMoreThanTwoPlayers() { final var gameState = mock(GameState.class); final var inputEngine = mock(TerminalInputEngine.class); final var renderingEngine = mock(TerminalRenderingEngine.class); when(gameState.getAllPlayerPositions()).thenReturn(new HashSet<>(Arrays.asList(Position.of(1, 1), Position.of(1, 2), Position.of(1, 3)))); }",
        "C": "public static @NotNull Position of(int x, int y) { return new Position(x, y); }",
        "label": "P"
    },
    "1204": {
        "dataset": "COMP 3021",
        "project": "tplauaa",
        "bug_id": "0",
        "T": "void moveUp() { Position.of(233, 232), new Move.Up(-1).nextPosition(pos) ); }",
        "C": "public static @NotNull Position of(int x, int y) { return new Position(x, y); } public Up(int initiator) { super(initiator); }",
        "label": "P"
    },
    "1205": {
        "dataset": "COMP 3021",
        "project": "tplauaa",
        "bug_id": "1",
        "T": "void moveDown() { Position.of(233, 234), new Move.Down(-1).nextPosition(pos) ); }",
        "C": "public static @NotNull Position of(int x, int y) { return new Position(x, y); } public Down(int initiator) { super(initiator); }",
        "label": "P"
    },
    "1206": {
        "dataset": "COMP 3021",
        "project": "tplauaa",
        "bug_id": "2",
        "T": "void moveRight() { Position.of(234, 233), new Move.Right(-1).nextPosition(pos) ); }",
        "C": "public static @NotNull Position of(int x, int y) { return new Position(x, y); } public Right(int initiator) { super(initiator); }",
        "label": "P"
    },
    "1207": {
        "dataset": "COMP 3021",
        "project": "tplauaa",
        "bug_id": "3",
        "T": "void testExceedingUndoQuota() { final var gameState = mock(GameState.class); when(gameState.getPlayerPositionById(anyInt())).thenReturn(Position.of(0, 0)); when(gameState.getUndoQuota()).thenReturn(Optional.of(0)); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Undo(0)); }",
        "C": "public Undo(int initiator) { super(initiator); }",
        "label": "F"
    },
    "1208": {
        "dataset": "COMP 3021",
        "project": "tplauaa",
        "bug_id": "4",
        "T": "void testExit() { final var gameState = mock(GameState.class); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Exit(0)); }",
        "C": "public Exit(int initiator) { super(initiator); }",
        "label": "P"
    },
    "1209": {
        "dataset": "COMP 3021",
        "project": "tplauaa",
        "bug_id": "5",
        "T": "void testUndoUnlimited() { final var gameState = mock(GameState.class); when(gameState.getPlayerPositionById(anyInt())).thenReturn(Position.of(0, 0)); when(gameState.getUndoQuota()).thenReturn(Optional.empty()); final var game = new SokobanGameForTesting(gameState); for (int i = 0; i < 10000; i++) { final var result = game.feedActionForProcessing(new Undo(0)); } verify(gameState, times(10000)).undo(); }",
        "C": "public TerminalRenderingEngine(PrintStream outputSteam) { this.outputSteam = outputSteam; } public Undo(int initiator) { super(initiator); }",
        "label": "F"
    },
    "1210": {
        "dataset": "COMP 3021",
        "project": "tplauaa",
        "bug_id": "6",
        "T": "void testPushOtherPlayerBox() { String mapText = \"\"\" 233 ###### #AB.@# #b.a.# #@...# ###### \"\"\"; final var testMap = TestHelper.parseGameMap(mapText); final var gameState = spy(new GameState(testMap)); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Move.Down(0)); verify(gameState, never()).move(any(), any()); }",
        "C": "public GameState(@NotNull GameMap map) { // TODO this.width = map.getMaxWidth(); this.height = map.getMaxHeight(); this.destination = map.getDestinations(); this.limit = map.getUndoLimit(); this.sts = map.getGameMap().clone(); maps = map; map1.put(countCP, sts.clone()); } public Down(int initiator) { super(initiator); }",
        "label": "P"
    },
    "1211": {
        "dataset": "COMP 3021",
        "project": "tplauaa",
        "bug_id": "7",
        "T": "void testMoveNonExistingPlayer() { String mapText = \"\"\" 233 ###### #A..@# #a...# ##...# ###### \"\"\"; final var testMap = TestHelper.parseGameMap(mapText); final var gameState = spy(new GameState(testMap)); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Move.Down(23)); }",
        "C": "public GameState(@NotNull GameMap map) { // TODO this.width = map.getMaxWidth(); this.height = map.getMaxHeight(); this.destination = map.getDestinations(); this.limit = map.getUndoLimit(); this.sts = map.getGameMap().clone(); maps = map; map1.put(countCP, sts.clone()); } public Down(int initiator) { super(initiator); }",
        "label": "F"
    },
    "1212": {
        "dataset": "COMP 3021",
        "project": "tplauaa",
        "bug_id": "8",
        "T": "void testCheckpointWhenNeed() { final var gameState = spy(new GameState(TestHelper.parseGameMap(\"\"\" 233 ###### #.Aa@# #..a@# ###### \"\"\" ))); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Move.Right(0)); verify(gameState, times(1)).checkpoint(); }",
        "C": "public GameState(@NotNull GameMap map) { // TODO this.width = map.getMaxWidth(); this.height = map.getMaxHeight(); this.destination = map.getDestinations(); this.limit = map.getUndoLimit(); this.sts = map.getGameMap().clone(); maps = map; map1.put(countCP, sts.clone()); } public Right(int initiator) { super(initiator); }",
        "label": "P"
    },
    "1213": {
        "dataset": "COMP 3021",
        "project": "tplauaa",
        "bug_id": "9",
        "T": "void testPushBoxAgainstWall() { String mapText = \"\"\" 233 ###### #A..@# #a...# ##...# ###### \"\"\"; final var testMap = TestHelper.parseGameMap(mapText); final var gameState = spy(new GameState(testMap)); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Move.Down(0)); verify(gameState, never()).move(any(), any()); }",
        "C": "public GameState(@NotNull GameMap map) { // TODO this.width = map.getMaxWidth(); this.height = map.getMaxHeight(); this.destination = map.getDestinations(); this.limit = map.getUndoLimit(); this.sts = map.getGameMap().clone(); maps = map; map1.put(countCP, sts.clone()); } public Down(int initiator) { super(initiator); }",
        "label": "P"
    },
    "1214": {
        "dataset": "COMP 3021",
        "project": "tplauaa",
        "bug_id": "10",
        "T": "void testCheckpointWhenNotNeed() { final var gameState = spy(new GameState(TestHelper.parseGameMap(\"\"\" 233 ###### #A.a@# #..a@# ###### \"\"\" ))); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Move.Right(0)); verify(gameState, never()).checkpoint(); } private static class SokobanGameForTesting extends AbstractSokobanGame { protected SokobanGameForTesting(GameState gameState) { super(gameState); } @Override public void run() { } public ActionResult feedActionForProcessing(Action action) { return processAction(action); } }",
        "C": "public GameState(@NotNull GameMap map) { // TODO this.width = map.getMaxWidth(); this.height = map.getMaxHeight(); this.destination = map.getDestinations(); this.limit = map.getUndoLimit(); this.sts = map.getGameMap().clone(); maps = map; map1.put(countCP, sts.clone()); } public Right(int initiator) { super(initiator); } public void run() { // TODO while(!shouldStop()) { renderingEngine.message(\"Undo Quota:\"+ (state.getUndoQuota().isPresent() ? state.getUndoQuota().get() : 0)); var ac = inputEngine.fetchAction(); ActionResult result = processAction(ac); if (ActionResult.Failed.class.isAssignableFrom(result.getClass())) { renderingEngine.message(((ActionResult.Failed) result).getReason()); } renderingEngine.render(state); } renderingEngine.message(\"Game exits.\"); } protected ActionResult processAction(@NotNull Action action) { // TODO ActionResult ac; boolean result = false; String reson = \"\"; Class aaac= action.getClass(); Optional<Integer> undonum = state.getUndoQuota(); if (aaac.isInstance(InvalidInput.class)){ ac = new ActionResult.Failed(action,((InvalidInput)action).getMessage()); return ac; } else { if (Move.class.isAssignableFrom(aaac)){ int init = action.getInitiator(); Position vv = ((Move)action).nextPosition(state.getPlayerPositionById(init)); Entity ee = state.getEntity(vv); if(Empty.class.isAssignableFrom(ee.getClass())) { state.move(state.getPlayerPositionById(init), vv); result = true; }else if (Box.class.isAssignableFrom(ee.getClass()) && ((Box)ee).getPlayerId()==init) { Position qq = ((Move)action).nextPosition(vv); Entity eee = state.getEntity(qq); if(Empty.class.isAssignableFrom(eee.getClass())){ state.move(vv,qq); state.move(state.getPlayerPositionById(init), vv); result = true; state.checkpoint(); }else{ reson = \"Failed to push the box.\"; } }else if(Wall.class.isAssignableFrom(ee.getClass())){ reson=\"You hit a wall.\"; }else { reson = \"Failed to push the box.\"; } } if (Undo.class.isAssignableFrom(aaac)){ if ((undonum.isPresent())){ state.undo(); result = true; }else { reson = \"You have run out of your undo quota.\"; } } if ((Exit.class.isAssignableFrom(aaac))){ stop=true; result = true; } } if(result){ ac = new ActionResult.Success(action); }else{ ac = new ActionResult.Failed(action,reson); } return ac; // throw new NotImplementedException(); }",
        "label": "P"
    },
    "1215": {
        "dataset": "COMP 3021",
        "project": "tplauaa",
        "bug_id": "11",
        "T": "void testHitAnotherPlayer() { String mapText = \"\"\" 233 ###### #A..@# #B...# #ab.@# ###### \"\"\"; final var testMap = TestHelper.parseGameMap(mapText); final var gameState = spy(new GameState(testMap)); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Move.Down(0)); verify(gameState, never()).move(any(), any()); }",
        "C": "public GameState(@NotNull GameMap map) { // TODO this.width = map.getMaxWidth(); this.height = map.getMaxHeight(); this.destination = map.getDestinations(); this.limit = map.getUndoLimit(); this.sts = map.getGameMap().clone(); maps = map; map1.put(countCP, sts.clone()); } public Down(int initiator) { super(initiator); }",
        "label": "P"
    },
    "1216": {
        "dataset": "COMP 3021",
        "project": "tplauaa",
        "bug_id": "12",
        "T": "void testUndoWithinQuota() { final var gameState = mock(GameState.class); when(gameState.getPlayerPositionById(anyInt())).thenReturn(Position.of(0, 0)); when(gameState.getUndoQuota()).thenReturn(Optional.of(1)); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Undo(0)); verify(gameState, times(1)).undo(); }",
        "C": "public Undo(int initiator) { super(initiator); }",
        "label": "P"
    },
    "1217": {
        "dataset": "COMP 3021",
        "project": "tplauaa",
        "bug_id": "13",
        "T": "void testInvalidInput() { final var game = new SokobanGameForTesting(mock(GameState.class)); final var message = String.valueOf(new Random().nextLong()); final var action = new InvalidInput(-1, message); final var result = game.feedActionForProcessing(action); }",
        "C": "public InvalidInput(int initiator, @NotNull String message) { super(initiator); this.message = message; }",
        "label": "P"
    },
    "1218": {
        "dataset": "COMP 3021",
        "project": "tplauaa",
        "bug_id": "14",
        "T": "void testUndoLimitParsing() { final var gameMap = TestHelper.parseGameMap(rectangularMap); }",
        "C": "",
        "label": "P"
    },
    "1219": {
        "dataset": "COMP 3021",
        "project": "tplauaa",
        "bug_id": "15",
        "T": "void testWidthForNonRectangularMap() { final var gameMap = TestHelper.parseGameMap(nonRectangularMap); }",
        "C": "",
        "label": "P"
    },
    "1220": {
        "dataset": "COMP 3021",
        "project": "tplauaa",
        "bug_id": "16",
        "T": "void testTwoPlayersMap() { final var twoPlayersMap = \"\"\" 233 ###### #A..@# #..B@# #....# #.a..# #..b.# ###### \"\"\"; final var gameMap = TestHelper.parseGameMap(twoPlayersMap); final var playerIds = gameMap.getPlayerIds(); final var expectedIds = new HashSet<Integer>(); expectedIds.add(0); expectedIds.add(1); }",
        "C": "public Set<Integer> getPlayerIds() { // TODO return playerid; }",
        "label": "F"
    },
    "1221": {
        "dataset": "COMP 3021",
        "project": "tplauaa",
        "bug_id": "17",
        "T": "void testMapWithoutPlayer() { final var invalidMap = \"\"\" 233 ### #.# ### \"\"\"; } // @Tag(TestKind.HIDDEN) // @Test // void testUnmatchedPlayersAndBoxes() { // final var invalidMap = \"\"\" // 233 // ###### // #A..@# // #...@# // #a.b@# // #.a.@# // #..a.# // ###### // \"\"\"; // assertThrowsExactly(IllegalArgumentException.class, () -> TestHelper.parseGameMap(invalidMap)); // }",
        "C": "public TerminalRenderingEngine(PrintStream outputSteam) { this.outputSteam = outputSteam; }",
        "label": "P"
    },
    "1222": {
        "dataset": "COMP 3021",
        "project": "tplauaa",
        "bug_id": "18",
        "T": "void testManyPlayersMap() { final var manyPlayersMap = \"\"\" 233 ###### #A.P@@# #vCB@@# #.cpD@# #Ga.d@# #g.bV@# ###### \"\"\"; final var gameMap = TestHelper.parseGameMap(manyPlayersMap); final var playerIds = gameMap.getPlayerIds(); final var expectedIds = new HashSet<>(Arrays.asList( 0, 'P' - 'A', 'C' - 'A', 'B' - 'A', 'D' - 'A', 'G' - 'A', 'V' - 'A' )); }",
        "C": "public Set<Integer> getPlayerIds() { // TODO return playerid; }",
        "label": "F"
    },
    "1223": {
        "dataset": "COMP 3021",
        "project": "tplauaa",
        "bug_id": "19",
        "T": "void testHeightForNonRectangularMap() { final var gameMap = TestHelper.parseGameMap(nonRectangularMap); }",
        "C": "",
        "label": "P"
    },
    "1224": {
        "dataset": "COMP 3021",
        "project": "tplauaa",
        "bug_id": "20",
        "T": "void testDuplicatedPlayers() { final var invalidMap = \"\"\" 233 ###### #A..@# #..A@# #....# #.a..# #..b.# ###### \"\"\"; }",
        "C": "",
        "label": "P"
    },
    "1225": {
        "dataset": "COMP 3021",
        "project": "tplauaa",
        "bug_id": "21",
        "T": "void testParseMapWithoutUndoLimit() { final var invalidMap = String.join(\"\\n\", rectangularMap.lines().skip(1).toList()); }",
        "C": "",
        "label": "P"
    },
    "1226": {
        "dataset": "COMP 3021",
        "project": "tplauaa",
        "bug_id": "22",
        "T": "void testInsufficientDestinations() { final var invalidMap = \"\"\" 233 ###### #A..@# #...@# #a...# #.a..# #..a.# ###### \"\"\"; }",
        "C": "",
        "label": "P"
    },
    "1227": {
        "dataset": "COMP 3021",
        "project": "tplauaa",
        "bug_id": "23",
        "T": "void testSuperLargeMap() { try { new GameMap(Integer.MAX_VALUE, Integer.MAX_VALUE, Collections.emptySet(), 0); } catch (OutOfMemoryError e) { throw new RuntimeException(e); } }); }",
        "C": "public GameMap(int maxWidth, int maxHeight, Set<Position> destinations, int undoLimit) { // TODO this.width = maxWidth; this.height = maxHeight; this.destination = destinations; this.limit = undoLimit; } /** * Parses the map from a string representation. * The first line is undo limit. * Starting from the second line, the game map is represented as follows, * <li># represents a {@link Wall}</li> * <li>@ represents a box destination.</li> * <li>Any upper-case letter represents a {@link Player}.</li> * <li> * Any lower-case letter represents a {@link Box} that is only movable by the player with the corresponding upper-case letter. * For instance, box \"a\" can only be moved by player \"A\" and not movable by player \"B\". * </li> * <li>. represents an {@link Empty} position in the map, meaning there is no player or box currently at this position.</li> * <p> * Notes: * <li> * There can be at most 26 players. * All implementations of classes in the hk.ust.comp3021.game package should support up to 26 players. * </li> * <li> * For simplicity, we assume the given map is bounded with a closed boundary. * There is no need to check this point. * </li> * <li> * Example maps can be found in \"src/main/resources\". * </li> * * @param mapText The string representation. * @return The parsed GameMap object. * @throws IllegalArgumentException if undo limit is negative but not -1. * @throws IllegalArgumentException if there are multiple same upper-case letters, i.e., one player can only exist at one position. * @throws IllegalArgumentException if there are no players in the map. * @throws IllegalArgumentException if the number of boxes is not equal to the number of box destinations. * @throws IllegalArgumentException if there are boxes whose {@link Box#getPlayerId()} public TerminalRenderingEngine(PrintStream outputSteam) { this.outputSteam = outputSteam; }",
        "label": "P"
    },
    "1228": {
        "dataset": "COMP 3021",
        "project": "tplauaa",
        "bug_id": "24",
        "T": "void testInvalidUndoLimit() { final var invalidMap = \"\"\" -233 ###### #A..@# #...@# #a.b@# #.a.@# #..a.# ###### \"\"\"; }",
        "C": "",
        "label": "P"
    },
    "1229": {
        "dataset": "COMP 3021",
        "project": "tplauaa",
        "bug_id": "25",
        "T": "void testEmptyMap() { final var invalidMap = \"\"; }",
        "C": "",
        "label": "P"
    },
    "1230": {
        "dataset": "COMP 3021",
        "project": "tplauaa",
        "bug_id": "26",
        "T": "void testMove(String input, String name, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); } private InputStream fixValueStream(String content) { final var bytes = content.getBytes(StandardCharsets.UTF_8); return new ByteArrayInputStream(bytes); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine(); // TODO if (inputLine.equals(\"w\")|| inputLine.equals(\"W\")) { return new Move.Up(0); } else if (inputLine.equals(\"s\")|| inputLine.equals(\"S\")) { return new Move.Down(0); } else if (inputLine.equals(\"a\")|| inputLine.equals(\"A\")) { return new Move.Left(0); } else if (inputLine.equals(\"d\")|| inputLine.equals(\"D\")) { return new Move.Right(0); } else if (inputLine.equals(\"h\")|| inputLine.equals(\"H\")) { return new Move.Left(1); } else if (inputLine.equals(\"j\")|| inputLine.equals(\"J\")) { return new Move.Down(1); } else if (inputLine.equals(\"k\")|| inputLine.equals(\"K\")) { return new Move.Up(1); } else if (inputLine.equals(\"l\")|| inputLine.equals(\"L\")) { return new Move.Right(1); } else if (inputLine.equals(\"U\")|| inputLine.equals(\"u\")) { return new Undo(1); } else if (inputLine.equals(\"EXIT\")|| inputLine.equals(\"ExIT\")||inputLine.equals(\"EXiT\")|| inputLine.equals(\"EXIt\") ||inputLine.equals(\"eXIT\")|| inputLine.equals(\"exit\")||inputLine.equals(\"exiT\")|| inputLine.equals(\"ExiT\")) { return new Exit(1); }else { return new InvalidInput(0,\"invalid input\"); } }",
        "label": "P"
    },
    "1231": {
        "dataset": "COMP 3021",
        "project": "tplauaa",
        "bug_id": "27",
        "T": "void testMove(String input, String name, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); } private InputStream fixValueStream(String content) { final var bytes = content.getBytes(StandardCharsets.UTF_8); return new ByteArrayInputStream(bytes); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine(); // TODO if (inputLine.equals(\"w\")|| inputLine.equals(\"W\")) { return new Move.Up(0); } else if (inputLine.equals(\"s\")|| inputLine.equals(\"S\")) { return new Move.Down(0); } else if (inputLine.equals(\"a\")|| inputLine.equals(\"A\")) { return new Move.Left(0); } else if (inputLine.equals(\"d\")|| inputLine.equals(\"D\")) { return new Move.Right(0); } else if (inputLine.equals(\"h\")|| inputLine.equals(\"H\")) { return new Move.Left(1); } else if (inputLine.equals(\"j\")|| inputLine.equals(\"J\")) { return new Move.Down(1); } else if (inputLine.equals(\"k\")|| inputLine.equals(\"K\")) { return new Move.Up(1); } else if (inputLine.equals(\"l\")|| inputLine.equals(\"L\")) { return new Move.Right(1); } else if (inputLine.equals(\"U\")|| inputLine.equals(\"u\")) { return new Undo(1); } else if (inputLine.equals(\"EXIT\")|| inputLine.equals(\"ExIT\")||inputLine.equals(\"EXiT\")|| inputLine.equals(\"EXIt\") ||inputLine.equals(\"eXIT\")|| inputLine.equals(\"exit\")||inputLine.equals(\"exiT\")|| inputLine.equals(\"ExiT\")) { return new Exit(1); }else { return new InvalidInput(0,\"invalid input\"); } }",
        "label": "P"
    },
    "1232": {
        "dataset": "COMP 3021",
        "project": "tplauaa",
        "bug_id": "28",
        "T": "void testMove(String input, String name, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); } private InputStream fixValueStream(String content) { final var bytes = content.getBytes(StandardCharsets.UTF_8); return new ByteArrayInputStream(bytes); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine(); // TODO if (inputLine.equals(\"w\")|| inputLine.equals(\"W\")) { return new Move.Up(0); } else if (inputLine.equals(\"s\")|| inputLine.equals(\"S\")) { return new Move.Down(0); } else if (inputLine.equals(\"a\")|| inputLine.equals(\"A\")) { return new Move.Left(0); } else if (inputLine.equals(\"d\")|| inputLine.equals(\"D\")) { return new Move.Right(0); } else if (inputLine.equals(\"h\")|| inputLine.equals(\"H\")) { return new Move.Left(1); } else if (inputLine.equals(\"j\")|| inputLine.equals(\"J\")) { return new Move.Down(1); } else if (inputLine.equals(\"k\")|| inputLine.equals(\"K\")) { return new Move.Up(1); } else if (inputLine.equals(\"l\")|| inputLine.equals(\"L\")) { return new Move.Right(1); } else if (inputLine.equals(\"U\")|| inputLine.equals(\"u\")) { return new Undo(1); } else if (inputLine.equals(\"EXIT\")|| inputLine.equals(\"ExIT\")||inputLine.equals(\"EXiT\")|| inputLine.equals(\"EXIt\") ||inputLine.equals(\"eXIT\")|| inputLine.equals(\"exit\")||inputLine.equals(\"exiT\")|| inputLine.equals(\"ExiT\")) { return new Exit(1); }else { return new InvalidInput(0,\"invalid input\"); } }",
        "label": "P"
    },
    "1233": {
        "dataset": "COMP 3021",
        "project": "tplauaa",
        "bug_id": "29",
        "T": "void testMove(String input, String name, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); } private InputStream fixValueStream(String content) { final var bytes = content.getBytes(StandardCharsets.UTF_8); return new ByteArrayInputStream(bytes); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine(); // TODO if (inputLine.equals(\"w\")|| inputLine.equals(\"W\")) { return new Move.Up(0); } else if (inputLine.equals(\"s\")|| inputLine.equals(\"S\")) { return new Move.Down(0); } else if (inputLine.equals(\"a\")|| inputLine.equals(\"A\")) { return new Move.Left(0); } else if (inputLine.equals(\"d\")|| inputLine.equals(\"D\")) { return new Move.Right(0); } else if (inputLine.equals(\"h\")|| inputLine.equals(\"H\")) { return new Move.Left(1); } else if (inputLine.equals(\"j\")|| inputLine.equals(\"J\")) { return new Move.Down(1); } else if (inputLine.equals(\"k\")|| inputLine.equals(\"K\")) { return new Move.Up(1); } else if (inputLine.equals(\"l\")|| inputLine.equals(\"L\")) { return new Move.Right(1); } else if (inputLine.equals(\"U\")|| inputLine.equals(\"u\")) { return new Undo(1); } else if (inputLine.equals(\"EXIT\")|| inputLine.equals(\"ExIT\")||inputLine.equals(\"EXiT\")|| inputLine.equals(\"EXIt\") ||inputLine.equals(\"eXIT\")|| inputLine.equals(\"exit\")||inputLine.equals(\"exiT\")|| inputLine.equals(\"ExiT\")) { return new Exit(1); }else { return new InvalidInput(0,\"invalid input\"); } }",
        "label": "P"
    },
    "1234": {
        "dataset": "COMP 3021",
        "project": "tplauaa",
        "bug_id": "30",
        "T": "void testMove(String input, String name, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); } private InputStream fixValueStream(String content) { final var bytes = content.getBytes(StandardCharsets.UTF_8); return new ByteArrayInputStream(bytes); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine(); // TODO if (inputLine.equals(\"w\")|| inputLine.equals(\"W\")) { return new Move.Up(0); } else if (inputLine.equals(\"s\")|| inputLine.equals(\"S\")) { return new Move.Down(0); } else if (inputLine.equals(\"a\")|| inputLine.equals(\"A\")) { return new Move.Left(0); } else if (inputLine.equals(\"d\")|| inputLine.equals(\"D\")) { return new Move.Right(0); } else if (inputLine.equals(\"h\")|| inputLine.equals(\"H\")) { return new Move.Left(1); } else if (inputLine.equals(\"j\")|| inputLine.equals(\"J\")) { return new Move.Down(1); } else if (inputLine.equals(\"k\")|| inputLine.equals(\"K\")) { return new Move.Up(1); } else if (inputLine.equals(\"l\")|| inputLine.equals(\"L\")) { return new Move.Right(1); } else if (inputLine.equals(\"U\")|| inputLine.equals(\"u\")) { return new Undo(1); } else if (inputLine.equals(\"EXIT\")|| inputLine.equals(\"ExIT\")||inputLine.equals(\"EXiT\")|| inputLine.equals(\"EXIt\") ||inputLine.equals(\"eXIT\")|| inputLine.equals(\"exit\")||inputLine.equals(\"exiT\")|| inputLine.equals(\"ExiT\")) { return new Exit(1); }else { return new InvalidInput(0,\"invalid input\"); } }",
        "label": "P"
    },
    "1235": {
        "dataset": "COMP 3021",
        "project": "tplauaa",
        "bug_id": "31",
        "T": "void testMove(String input, String name, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); } private InputStream fixValueStream(String content) { final var bytes = content.getBytes(StandardCharsets.UTF_8); return new ByteArrayInputStream(bytes); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine(); // TODO if (inputLine.equals(\"w\")|| inputLine.equals(\"W\")) { return new Move.Up(0); } else if (inputLine.equals(\"s\")|| inputLine.equals(\"S\")) { return new Move.Down(0); } else if (inputLine.equals(\"a\")|| inputLine.equals(\"A\")) { return new Move.Left(0); } else if (inputLine.equals(\"d\")|| inputLine.equals(\"D\")) { return new Move.Right(0); } else if (inputLine.equals(\"h\")|| inputLine.equals(\"H\")) { return new Move.Left(1); } else if (inputLine.equals(\"j\")|| inputLine.equals(\"J\")) { return new Move.Down(1); } else if (inputLine.equals(\"k\")|| inputLine.equals(\"K\")) { return new Move.Up(1); } else if (inputLine.equals(\"l\")|| inputLine.equals(\"L\")) { return new Move.Right(1); } else if (inputLine.equals(\"U\")|| inputLine.equals(\"u\")) { return new Undo(1); } else if (inputLine.equals(\"EXIT\")|| inputLine.equals(\"ExIT\")||inputLine.equals(\"EXiT\")|| inputLine.equals(\"EXIt\") ||inputLine.equals(\"eXIT\")|| inputLine.equals(\"exit\")||inputLine.equals(\"exiT\")|| inputLine.equals(\"ExiT\")) { return new Exit(1); }else { return new InvalidInput(0,\"invalid input\"); } }",
        "label": "P"
    },
    "1236": {
        "dataset": "COMP 3021",
        "project": "tplauaa",
        "bug_id": "32",
        "T": "void testMove(String input, String name, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); } private InputStream fixValueStream(String content) { final var bytes = content.getBytes(StandardCharsets.UTF_8); return new ByteArrayInputStream(bytes); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine(); // TODO if (inputLine.equals(\"w\")|| inputLine.equals(\"W\")) { return new Move.Up(0); } else if (inputLine.equals(\"s\")|| inputLine.equals(\"S\")) { return new Move.Down(0); } else if (inputLine.equals(\"a\")|| inputLine.equals(\"A\")) { return new Move.Left(0); } else if (inputLine.equals(\"d\")|| inputLine.equals(\"D\")) { return new Move.Right(0); } else if (inputLine.equals(\"h\")|| inputLine.equals(\"H\")) { return new Move.Left(1); } else if (inputLine.equals(\"j\")|| inputLine.equals(\"J\")) { return new Move.Down(1); } else if (inputLine.equals(\"k\")|| inputLine.equals(\"K\")) { return new Move.Up(1); } else if (inputLine.equals(\"l\")|| inputLine.equals(\"L\")) { return new Move.Right(1); } else if (inputLine.equals(\"U\")|| inputLine.equals(\"u\")) { return new Undo(1); } else if (inputLine.equals(\"EXIT\")|| inputLine.equals(\"ExIT\")||inputLine.equals(\"EXiT\")|| inputLine.equals(\"EXIt\") ||inputLine.equals(\"eXIT\")|| inputLine.equals(\"exit\")||inputLine.equals(\"exiT\")|| inputLine.equals(\"ExiT\")) { return new Exit(1); }else { return new InvalidInput(0,\"invalid input\"); } }",
        "label": "P"
    },
    "1237": {
        "dataset": "COMP 3021",
        "project": "tplauaa",
        "bug_id": "33",
        "T": "void testMove(String input, String name, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); } private InputStream fixValueStream(String content) { final var bytes = content.getBytes(StandardCharsets.UTF_8); return new ByteArrayInputStream(bytes); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine(); // TODO if (inputLine.equals(\"w\")|| inputLine.equals(\"W\")) { return new Move.Up(0); } else if (inputLine.equals(\"s\")|| inputLine.equals(\"S\")) { return new Move.Down(0); } else if (inputLine.equals(\"a\")|| inputLine.equals(\"A\")) { return new Move.Left(0); } else if (inputLine.equals(\"d\")|| inputLine.equals(\"D\")) { return new Move.Right(0); } else if (inputLine.equals(\"h\")|| inputLine.equals(\"H\")) { return new Move.Left(1); } else if (inputLine.equals(\"j\")|| inputLine.equals(\"J\")) { return new Move.Down(1); } else if (inputLine.equals(\"k\")|| inputLine.equals(\"K\")) { return new Move.Up(1); } else if (inputLine.equals(\"l\")|| inputLine.equals(\"L\")) { return new Move.Right(1); } else if (inputLine.equals(\"U\")|| inputLine.equals(\"u\")) { return new Undo(1); } else if (inputLine.equals(\"EXIT\")|| inputLine.equals(\"ExIT\")||inputLine.equals(\"EXiT\")|| inputLine.equals(\"EXIt\") ||inputLine.equals(\"eXIT\")|| inputLine.equals(\"exit\")||inputLine.equals(\"exiT\")|| inputLine.equals(\"ExiT\")) { return new Exit(1); }else { return new InvalidInput(0,\"invalid input\"); } }",
        "label": "P"
    },
    "1238": {
        "dataset": "COMP 3021",
        "project": "tplauaa",
        "bug_id": "34",
        "T": "void testUndo(String input, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine(); // TODO if (inputLine.equals(\"w\")|| inputLine.equals(\"W\")) { return new Move.Up(0); } else if (inputLine.equals(\"s\")|| inputLine.equals(\"S\")) { return new Move.Down(0); } else if (inputLine.equals(\"a\")|| inputLine.equals(\"A\")) { return new Move.Left(0); } else if (inputLine.equals(\"d\")|| inputLine.equals(\"D\")) { return new Move.Right(0); } else if (inputLine.equals(\"h\")|| inputLine.equals(\"H\")) { return new Move.Left(1); } else if (inputLine.equals(\"j\")|| inputLine.equals(\"J\")) { return new Move.Down(1); } else if (inputLine.equals(\"k\")|| inputLine.equals(\"K\")) { return new Move.Up(1); } else if (inputLine.equals(\"l\")|| inputLine.equals(\"L\")) { return new Move.Right(1); } else if (inputLine.equals(\"U\")|| inputLine.equals(\"u\")) { return new Undo(1); } else if (inputLine.equals(\"EXIT\")|| inputLine.equals(\"ExIT\")||inputLine.equals(\"EXiT\")|| inputLine.equals(\"EXIt\") ||inputLine.equals(\"eXIT\")|| inputLine.equals(\"exit\")||inputLine.equals(\"exiT\")|| inputLine.equals(\"ExiT\")) { return new Exit(1); }else { return new InvalidInput(0,\"invalid input\"); } }",
        "label": "P"
    },
    "1239": {
        "dataset": "COMP 3021",
        "project": "tplauaa",
        "bug_id": "35",
        "T": "void testInvalidInput() { final var inputStream = fixValueStream(\"blah blah\"); final var inputEngine = new TerminalInputEngine(inputStream); final var action = inputEngine.fetchAction(); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine(); // TODO if (inputLine.equals(\"w\")|| inputLine.equals(\"W\")) { return new Move.Up(0); } else if (inputLine.equals(\"s\")|| inputLine.equals(\"S\")) { return new Move.Down(0); } else if (inputLine.equals(\"a\")|| inputLine.equals(\"A\")) { return new Move.Left(0); } else if (inputLine.equals(\"d\")|| inputLine.equals(\"D\")) { return new Move.Right(0); } else if (inputLine.equals(\"h\")|| inputLine.equals(\"H\")) { return new Move.Left(1); } else if (inputLine.equals(\"j\")|| inputLine.equals(\"J\")) { return new Move.Down(1); } else if (inputLine.equals(\"k\")|| inputLine.equals(\"K\")) { return new Move.Up(1); } else if (inputLine.equals(\"l\")|| inputLine.equals(\"L\")) { return new Move.Right(1); } else if (inputLine.equals(\"U\")|| inputLine.equals(\"u\")) { return new Undo(1); } else if (inputLine.equals(\"EXIT\")|| inputLine.equals(\"ExIT\")||inputLine.equals(\"EXiT\")|| inputLine.equals(\"EXIt\") ||inputLine.equals(\"eXIT\")|| inputLine.equals(\"exit\")||inputLine.equals(\"exiT\")|| inputLine.equals(\"ExiT\")) { return new Exit(1); }else { return new InvalidInput(0,\"invalid input\"); } }",
        "label": "P"
    },
    "1240": {
        "dataset": "COMP 3021",
        "project": "tplauaa",
        "bug_id": "36",
        "T": "void testUndoWhenThereIsNoMove() { final var gameState = new GameState(TestHelper.parseGameMap(\"\"\" 233 ###### #A.a@# #..a@# ###### \"\"\" )); gameState.undo(); } private Entity generateEntity(int key) { return switch (key % 4) { case 0 -> new Box(0); case 1 -> new Empty(); case 2 -> new Player(0); case 3 -> new Wall(); default -> throw new ShouldNotReachException(); }; }",
        "C": "public GameState(@NotNull GameMap map) { // TODO this.width = map.getMaxWidth(); this.height = map.getMaxHeight(); this.destination = map.getDestinations(); this.limit = map.getUndoLimit(); this.sts = map.getGameMap().clone(); maps = map; map1.put(countCP, sts.clone()); } public void undo() { // TODO int undoQuota = getUndoQuota().get(); if (countCP>0) { //the game has an undo limit if (undoQuota > 0) { undoQuota--; sts = map1.get(map1.size()-1); map1.remove(map1.size()); countCP--; } } limit = Optional.of(undoQuota); maps.setGameMap(sts); } /** * Get the maximum width of the game map. * This should be the same as that in {@link GameMap} public TerminalRenderingEngine(PrintStream outputSteam) { this.outputSteam = outputSteam; } public Box(int playerId) { this.playerId = playerId; } public Player(int id) { this.id = id; } public ShouldNotReachException() { super(\"This branch should not be reached.\"); }",
        "label": "F"
    },
    "1241": {
        "dataset": "COMP 3021",
        "project": "tplauaa",
        "bug_id": "37",
        "T": "void testGetUndoUnlimited() { final var gameState = new GameState(TestHelper.parseGameMap(\"\"\" -1 ###### #.Aa@# #..a@# ###### \"\"\" )); }",
        "C": "public GameState(@NotNull GameMap map) { // TODO this.width = map.getMaxWidth(); this.height = map.getMaxHeight(); this.destination = map.getDestinations(); this.limit = map.getUndoLimit(); this.sts = map.getGameMap().clone(); maps = map; map1.put(countCP, sts.clone()); }",
        "label": "F"
    },
    "1242": {
        "dataset": "COMP 3021",
        "project": "tplauaa",
        "bug_id": "38",
        "T": "void testMapCopying() { final var maxWidth = 2333; final var maxHeight = 2333; final var random = new Random(); final var randomEntities = Stream.generate(() -> Position.of(random.nextInt(maxWidth), random.nextInt(maxHeight))) .distinct() .limit(100) .collect(Collectors.toMap(Function.identity(), it -> generateEntity(it.x()))); final var firstPos = randomEntities.keySet().stream().findFirst(); final var gameMap = new GameMap(maxWidth, maxHeight, Collections.singleton(firstPos.get()), 233); randomEntities.forEach(gameMap::putEntity); final var gameState = new GameState(gameMap); final var randomPosition = randomEntities.keySet().stream().findAny(); gameMap.putEntity(randomPosition.get(), new Empty()); randomEntities.forEach((p, e) -> assertEquals(e, gameState.getEntity(p))); }",
        "C": "public static @NotNull Position of(int x, int y) { return new Position(x, y); } public GameMap(int maxWidth, int maxHeight, Set<Position> destinations, int undoLimit) { // TODO this.width = maxWidth; this.height = maxHeight; this.destination = destinations; this.limit = undoLimit; } /** * Parses the map from a string representation. * The first line is undo limit. * Starting from the second line, the game map is represented as follows, * <li># represents a {@link Wall}</li> * <li>@ represents a box destination.</li> * <li>Any upper-case letter represents a {@link Player}.</li> * <li> * Any lower-case letter represents a {@link Box} that is only movable by the player with the corresponding upper-case letter. * For instance, box \"a\" can only be moved by player \"A\" and not movable by player \"B\". * </li> * <li>. represents an {@link Empty} position in the map, meaning there is no player or box currently at this position.</li> * <p> * Notes: * <li> * There can be at most 26 players. * All implementations of classes in the hk.ust.comp3021.game package should support up to 26 players. * </li> * <li> * For simplicity, we assume the given map is bounded with a closed boundary. * There is no need to check this point. * </li> * <li> * Example maps can be found in \"src/main/resources\". * </li> * * @param mapText The string representation. * @return The parsed GameMap object. * @throws IllegalArgumentException if undo limit is negative but not -1. * @throws IllegalArgumentException if there are multiple same upper-case letters, i.e., one player can only exist at one position. * @throws IllegalArgumentException if there are no players in the map. * @throws IllegalArgumentException if the number of boxes is not equal to the number of box destinations. * @throws IllegalArgumentException if there are boxes whose {@link Box#getPlayerId()} public GameState(@NotNull GameMap map) { // TODO this.width = map.getMaxWidth(); this.height = map.getMaxHeight(); this.destination = map.getDestinations(); this.limit = map.getUndoLimit(); this.sts = map.getGameMap().clone(); maps = map; map1.put(countCP, sts.clone()); } public void putEntity(Position position, Entity entity) { // TODO String type = entity.getClass().getSimpleName(); //String[] newST = new String[]; for(int i = 0; i< st.length; i++ ) { for(int j = 0; j< st[i].length(); j++){ if (position.y()==i && position.x()==j) { if(type.equals(\"Wall\")){ StringBuilder str = new StringBuilder(st[i]); str.setCharAt(j,'#'); st[i]=str.toString(); }else if(type.equals(\"Empty\")){ StringBuilder str = new StringBuilder(st[i]); str.setCharAt(j,'.'); st[i]=str.toString(); }else if(type.equals(\"Box\")){ Box box = (Box) entity; StringBuilder str = new StringBuilder(st[i]); str.setCharAt(j,(char)(box.getPlayerId() + 'a')); st[i]=str.toString(); } else if(type.equals(\"Player\")){ Player player = (Player) entity; StringBuilder str = new StringBuilder(st[i]); str.setCharAt(j,(char)(player.getId() + 'A')); st[i]=str.toString(); } } } } } public @Nullable Entity getEntity(@NotNull Position position) { // TODO return maps.getEntity(position); } /** * Get all box destination positions as a set in the game map. * This should be the same as that in {@link GameMap}",
        "label": "F"
    },
    "1243": {
        "dataset": "COMP 3021",
        "project": "tplauaa",
        "bug_id": "39",
        "T": "void testUndoWhenThereIsMoveButNoCheckpoint() { final var gameState = new GameState(TestHelper.parseGameMap(\"\"\" 233 ###### #A.a@# #..a@# ###### \"\"\" )); gameState.move(Position.of(1, 1), Position.of(2, 1)); gameState.undo(); }",
        "C": "public GameState(@NotNull GameMap map) { // TODO this.width = map.getMaxWidth(); this.height = map.getMaxHeight(); this.destination = map.getDestinations(); this.limit = map.getUndoLimit(); this.sts = map.getGameMap().clone(); maps = map; map1.put(countCP, sts.clone()); } public void move(Position from, Position to) { // TODO maps.putEntity(new Position(to.x(), to.y()), maps.getEntity(new Position(from.x(), from.y()))); maps.putEntity(new Position(from.x(), from.y()), new Empty()); } /** * Record a checkpoint of the game state, including: * <li>All current positions of entities in the game map.</li> * <li>Current undo quota</li> * <p> * Checkpoint is used in {@link GameState#undo()} public static @NotNull Position of(int x, int y) { return new Position(x, y); } public void undo() { // TODO int undoQuota = getUndoQuota().get(); if (countCP>0) { //the game has an undo limit if (undoQuota > 0) { undoQuota--; sts = map1.get(map1.size()-1); map1.remove(map1.size()); countCP--; } } limit = Optional.of(undoQuota); maps.setGameMap(sts); } /** * Get the maximum width of the game map. * This should be the same as that in {@link GameMap}",
        "label": "F"
    },
    "1244": {
        "dataset": "COMP 3021",
        "project": "tplauaa",
        "bug_id": "40",
        "T": "void testGameExit() { final var gameState = mock(GameState.class); final var inputEngine = mock(TerminalInputEngine.class); final var renderingEngine = mock(TerminalRenderingEngine.class); when(gameState.isWin()).thenReturn(false, false, false); when(inputEngine.fetchAction()) .thenReturn(new InvalidInput(0, \"\"), new InvalidInput(0, \"\"), new Exit(0)); final var game = new TerminalSokobanGame(gameState, inputEngine, renderingEngine); game.run(); verify(renderingEngine, atLeastOnce()).message(any()); }",
        "C": "public InvalidInput(int initiator, @NotNull String message) { super(initiator); this.message = message; } public Exit(int initiator) { super(initiator); } public TerminalSokobanGame(GameState gameState, TerminalInputEngine inputEngine, TerminalRenderingEngine renderingEngine) { super(gameState); this.inputEngine = inputEngine; this.renderingEngine = renderingEngine; // TODO this.renderingEngine.render(state); renderingEngine.message(\"Undo Quota: \"+ (state.getUndoQuota().isPresent() ? state.getUndoQuota().get() : 0)); // Check the number of players if(gameState.getAllPlayerPositions().size()>2) throw new IllegalArgumentException(\"more than two players in the map\"); } public void run() { // TODO while(!shouldStop()) { renderingEngine.message(\"Undo Quota:\"+ (state.getUndoQuota().isPresent() ? state.getUndoQuota().get() : 0)); var ac = inputEngine.fetchAction(); ActionResult result = processAction(ac); if (ActionResult.Failed.class.isAssignableFrom(result.getClass())) { renderingEngine.message(((ActionResult.Failed) result).getReason()); } renderingEngine.render(state); } renderingEngine.message(\"Game exits.\"); }",
        "label": "P"
    },
    "1245": {
        "dataset": "COMP 3021",
        "project": "tplauaa",
        "bug_id": "41",
        "T": "void testGameWin() { final var gameState = mock(GameState.class); final var inputEngine = mock(TerminalInputEngine.class); final var renderingEngine = mock(TerminalRenderingEngine.class); when(gameState.isWin()).thenReturn(false, false, false, true); when(inputEngine.fetchAction()) .thenReturn(new InvalidInput(0, \"\")); final var game = new TerminalSokobanGame(gameState, inputEngine, renderingEngine); game.run(); verify(gameState, atLeastOnce()).isWin(); verify(renderingEngine, atLeastOnce()).message(any()); }",
        "C": "public InvalidInput(int initiator, @NotNull String message) { super(initiator); this.message = message; } public TerminalSokobanGame(GameState gameState, TerminalInputEngine inputEngine, TerminalRenderingEngine renderingEngine) { super(gameState); this.inputEngine = inputEngine; this.renderingEngine = renderingEngine; // TODO this.renderingEngine.render(state); renderingEngine.message(\"Undo Quota: \"+ (state.getUndoQuota().isPresent() ? state.getUndoQuota().get() : 0)); // Check the number of players if(gameState.getAllPlayerPositions().size()>2) throw new IllegalArgumentException(\"more than two players in the map\"); } public void run() { // TODO while(!shouldStop()) { renderingEngine.message(\"Undo Quota:\"+ (state.getUndoQuota().isPresent() ? state.getUndoQuota().get() : 0)); var ac = inputEngine.fetchAction(); ActionResult result = processAction(ac); if (ActionResult.Failed.class.isAssignableFrom(result.getClass())) { renderingEngine.message(((ActionResult.Failed) result).getReason()); } renderingEngine.render(state); } renderingEngine.message(\"Game exits.\"); }",
        "label": "P"
    },
    "1246": {
        "dataset": "COMP 3021",
        "project": "tplauaa",
        "bug_id": "42",
        "T": "void testMoreThanTwoPlayers() { final var gameState = mock(GameState.class); final var inputEngine = mock(TerminalInputEngine.class); final var renderingEngine = mock(TerminalRenderingEngine.class); when(gameState.getAllPlayerPositions()).thenReturn(new HashSet<>(Arrays.asList(Position.of(1, 1), Position.of(1, 2), Position.of(1, 3)))); }",
        "C": "public static @NotNull Position of(int x, int y) { return new Position(x, y); }",
        "label": "P"
    },
    "1247": {
        "dataset": "COMP 3021",
        "project": "cflukaa",
        "bug_id": "0",
        "T": "void moveUp() { Position.of(233, 232), new Move.Up(-1).nextPosition(pos) ); }",
        "C": "public static @NotNull Position of(int x, int y) { return new Position(x, y); } public Up(int initiator) { super(initiator); }",
        "label": "F"
    },
    "1248": {
        "dataset": "COMP 3021",
        "project": "cflukaa",
        "bug_id": "1",
        "T": "void moveDown() { Position.of(233, 234), new Move.Down(-1).nextPosition(pos) ); }",
        "C": "public static @NotNull Position of(int x, int y) { return new Position(x, y); } public Down(int initiator) { super(initiator); }",
        "label": "F"
    },
    "1249": {
        "dataset": "COMP 3021",
        "project": "cflukaa",
        "bug_id": "2",
        "T": "void moveRight() { Position.of(234, 233), new Move.Right(-1).nextPosition(pos) ); }",
        "C": "public static @NotNull Position of(int x, int y) { return new Position(x, y); } public Right(int initiator) { super(initiator); }",
        "label": "P"
    },
    "1250": {
        "dataset": "COMP 3021",
        "project": "cflukaa",
        "bug_id": "3",
        "T": "void testExceedingUndoQuota() { final var gameState = mock(GameState.class); when(gameState.getPlayerPositionById(anyInt())).thenReturn(Position.of(0, 0)); when(gameState.getUndoQuota()).thenReturn(Optional.of(0)); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Undo(0)); }",
        "C": "public Undo(int initiator) { super(initiator); }",
        "label": "F"
    },
    "1251": {
        "dataset": "COMP 3021",
        "project": "cflukaa",
        "bug_id": "4",
        "T": "void testExit() { final var gameState = mock(GameState.class); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Exit(0)); }",
        "C": "public Exit(int initiator) { super(initiator); }",
        "label": "F"
    },
    "1252": {
        "dataset": "COMP 3021",
        "project": "cflukaa",
        "bug_id": "5",
        "T": "void testUndoUnlimited() { final var gameState = mock(GameState.class); when(gameState.getPlayerPositionById(anyInt())).thenReturn(Position.of(0, 0)); when(gameState.getUndoQuota()).thenReturn(Optional.empty()); final var game = new SokobanGameForTesting(gameState); for (int i = 0; i < 10000; i++) { final var result = game.feedActionForProcessing(new Undo(0)); } verify(gameState, times(10000)).undo(); }",
        "C": "public TerminalRenderingEngine(PrintStream outputSteam) { this.outputSteam = outputSteam; } public Undo(int initiator) { super(initiator); }",
        "label": "F"
    },
    "1253": {
        "dataset": "COMP 3021",
        "project": "cflukaa",
        "bug_id": "6",
        "T": "void testPushOtherPlayerBox() { String mapText = \"\"\" 233 ###### #AB.@# #b.a.# #@...# ###### \"\"\"; final var testMap = TestHelper.parseGameMap(mapText); final var gameState = spy(new GameState(testMap)); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Move.Down(0)); verify(gameState, never()).move(any(), any()); }",
        "C": "public GameState(@NotNull GameMap map) { // TODO mapHistory = new ArrayList<GameMap>(); mapHistory.add(map); } public Down(int initiator) { super(initiator); }",
        "label": "F"
    },
    "1254": {
        "dataset": "COMP 3021",
        "project": "cflukaa",
        "bug_id": "7",
        "T": "void testMoveNonExistingPlayer() { String mapText = \"\"\" 233 ###### #A..@# #a...# ##...# ###### \"\"\"; final var testMap = TestHelper.parseGameMap(mapText); final var gameState = spy(new GameState(testMap)); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Move.Down(23)); }",
        "C": "public GameState(@NotNull GameMap map) { // TODO mapHistory = new ArrayList<GameMap>(); mapHistory.add(map); } public Down(int initiator) { super(initiator); }",
        "label": "F"
    },
    "1255": {
        "dataset": "COMP 3021",
        "project": "cflukaa",
        "bug_id": "8",
        "T": "void testCheckpointWhenNeed() { final var gameState = spy(new GameState(TestHelper.parseGameMap(\"\"\" 233 ###### #.Aa@# #..a@# ###### \"\"\" ))); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Move.Right(0)); verify(gameState, times(1)).checkpoint(); }",
        "C": "public GameState(@NotNull GameMap map) { // TODO mapHistory = new ArrayList<GameMap>(); mapHistory.add(map); } public Right(int initiator) { super(initiator); }",
        "label": "F"
    },
    "1256": {
        "dataset": "COMP 3021",
        "project": "cflukaa",
        "bug_id": "9",
        "T": "void testPushBoxAgainstWall() { String mapText = \"\"\" 233 ###### #A..@# #a...# ##...# ###### \"\"\"; final var testMap = TestHelper.parseGameMap(mapText); final var gameState = spy(new GameState(testMap)); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Move.Down(0)); verify(gameState, never()).move(any(), any()); }",
        "C": "public GameState(@NotNull GameMap map) { // TODO mapHistory = new ArrayList<GameMap>(); mapHistory.add(map); } public Down(int initiator) { super(initiator); }",
        "label": "F"
    },
    "1257": {
        "dataset": "COMP 3021",
        "project": "cflukaa",
        "bug_id": "10",
        "T": "void testCheckpointWhenNotNeed() { final var gameState = spy(new GameState(TestHelper.parseGameMap(\"\"\" 233 ###### #A.a@# #..a@# ###### \"\"\" ))); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Move.Right(0)); verify(gameState, never()).checkpoint(); } private static class SokobanGameForTesting extends AbstractSokobanGame { protected SokobanGameForTesting(GameState gameState) { super(gameState); } @Override public void run() { } public ActionResult feedActionForProcessing(Action action) { return processAction(action); } }",
        "C": "public GameState(@NotNull GameMap map) { // TODO mapHistory = new ArrayList<GameMap>(); mapHistory.add(map); } public Right(int initiator) { super(initiator); } public void run() { // TODO while (!shouldStop()) { renderingEngine.render(this.state); processAction(inputEngine.fetchAction()); } } protected ActionResult processAction(@NotNull Action action) { // TODO ActionResult result = null; if (action instanceof Move.Left) { Position newPosition = new Position(this.state.getPlayerPositionById(action.getInitiator()).x() - 1, this.state.getPlayerPositionById(action.getInitiator()).y()); this.state.move(this.state.getPlayerPositionById(action.getInitiator()), newPosition); result = new ActionResult.Success(action); } if (action instanceof Move.Right) { Position newPosition = new Position(this.state.getPlayerPositionById(action.getInitiator()).x() + 1, this.state.getPlayerPositionById(action.getInitiator()).y()); this.state.move(this.state.getPlayerPositionById(action.getInitiator()), newPosition); result = new ActionResult.Success(action); } if (action instanceof Move.Up) { Position newPosition = new Position(this.state.getPlayerPositionById(action.getInitiator()).x(), this.state.getPlayerPositionById(action.getInitiator()).y() - 1); this.state.move(this.state.getPlayerPositionById(action.getInitiator()), newPosition); result = new ActionResult.Success(action); } if (action instanceof Move.Down) { Position newPosition = new Position(this.state.getPlayerPositionById(action.getInitiator()).x(), this.state.getPlayerPositionById(action.getInitiator()).y() + 1); this.state.move(this.state.getPlayerPositionById(action.getInitiator()), newPosition); result = new ActionResult.Success(action); } if(action instanceof Exit) { } return result; }",
        "label": "F"
    },
    "1258": {
        "dataset": "COMP 3021",
        "project": "cflukaa",
        "bug_id": "11",
        "T": "void testHitAnotherPlayer() { String mapText = \"\"\" 233 ###### #A..@# #B...# #ab.@# ###### \"\"\"; final var testMap = TestHelper.parseGameMap(mapText); final var gameState = spy(new GameState(testMap)); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Move.Down(0)); verify(gameState, never()).move(any(), any()); }",
        "C": "public GameState(@NotNull GameMap map) { // TODO mapHistory = new ArrayList<GameMap>(); mapHistory.add(map); } public Down(int initiator) { super(initiator); }",
        "label": "F"
    },
    "1259": {
        "dataset": "COMP 3021",
        "project": "cflukaa",
        "bug_id": "12",
        "T": "void testUndoWithinQuota() { final var gameState = mock(GameState.class); when(gameState.getPlayerPositionById(anyInt())).thenReturn(Position.of(0, 0)); when(gameState.getUndoQuota()).thenReturn(Optional.of(1)); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Undo(0)); verify(gameState, times(1)).undo(); }",
        "C": "public Undo(int initiator) { super(initiator); }",
        "label": "F"
    },
    "1260": {
        "dataset": "COMP 3021",
        "project": "cflukaa",
        "bug_id": "13",
        "T": "void testInvalidInput() { final var game = new SokobanGameForTesting(mock(GameState.class)); final var message = String.valueOf(new Random().nextLong()); final var action = new InvalidInput(-1, message); final var result = game.feedActionForProcessing(action); }",
        "C": "public InvalidInput(int initiator, @NotNull String message) { super(initiator); this.message = message; }",
        "label": "F"
    },
    "1261": {
        "dataset": "COMP 3021",
        "project": "cflukaa",
        "bug_id": "14",
        "T": "void testUndoLimitParsing() { final var gameMap = TestHelper.parseGameMap(rectangularMap); }",
        "C": "",
        "label": "P"
    },
    "1262": {
        "dataset": "COMP 3021",
        "project": "cflukaa",
        "bug_id": "15",
        "T": "void testWidthForNonRectangularMap() { final var gameMap = TestHelper.parseGameMap(nonRectangularMap); }",
        "C": "",
        "label": "P"
    },
    "1263": {
        "dataset": "COMP 3021",
        "project": "cflukaa",
        "bug_id": "16",
        "T": "void testTwoPlayersMap() { final var twoPlayersMap = \"\"\" 233 ###### #A..@# #..B@# #....# #.a..# #..b.# ###### \"\"\"; final var gameMap = TestHelper.parseGameMap(twoPlayersMap); final var playerIds = gameMap.getPlayerIds(); final var expectedIds = new HashSet<Integer>(); expectedIds.add(0); expectedIds.add(1); }",
        "C": "public Set<Integer> getPlayerIds() { // TODO // throw new NotImplementedException(); Set<Integer> result = new HashSet<>(); for(int i = 0; i < maxWidth; i++) { for(int j = 0; j < maxHeight; j++) { if(map.get(i).get(j) instanceof Player) { result.add(((Player) map.get(i).get(j)).getId()); } } } return result; }",
        "label": "F"
    },
    "1264": {
        "dataset": "COMP 3021",
        "project": "cflukaa",
        "bug_id": "17",
        "T": "void testMapWithoutPlayer() { final var invalidMap = \"\"\" 233 ### #.# ### \"\"\"; } // @Tag(TestKind.HIDDEN) // @Test // void testUnmatchedPlayersAndBoxes() { // final var invalidMap = \"\"\" // 233 // ###### // #A..@# // #...@# // #a.b@# // #.a.@# // #..a.# // ###### // \"\"\"; // assertThrowsExactly(IllegalArgumentException.class, () -> TestHelper.parseGameMap(invalidMap)); // }",
        "C": "public TerminalRenderingEngine(PrintStream outputSteam) { this.outputSteam = outputSteam; }",
        "label": "F"
    },
    "1265": {
        "dataset": "COMP 3021",
        "project": "cflukaa",
        "bug_id": "18",
        "T": "void testManyPlayersMap() { final var manyPlayersMap = \"\"\" 233 ###### #A.P@@# #vCB@@# #.cpD@# #Ga.d@# #g.bV@# ###### \"\"\"; final var gameMap = TestHelper.parseGameMap(manyPlayersMap); final var playerIds = gameMap.getPlayerIds(); final var expectedIds = new HashSet<>(Arrays.asList( 0, 'P' - 'A', 'C' - 'A', 'B' - 'A', 'D' - 'A', 'G' - 'A', 'V' - 'A' )); }",
        "C": "public Set<Integer> getPlayerIds() { // TODO // throw new NotImplementedException(); Set<Integer> result = new HashSet<>(); for(int i = 0; i < maxWidth; i++) { for(int j = 0; j < maxHeight; j++) { if(map.get(i).get(j) instanceof Player) { result.add(((Player) map.get(i).get(j)).getId()); } } } return result; }",
        "label": "F"
    },
    "1266": {
        "dataset": "COMP 3021",
        "project": "cflukaa",
        "bug_id": "19",
        "T": "void testHeightForNonRectangularMap() { final var gameMap = TestHelper.parseGameMap(nonRectangularMap); }",
        "C": "",
        "label": "P"
    },
    "1267": {
        "dataset": "COMP 3021",
        "project": "cflukaa",
        "bug_id": "20",
        "T": "void testDuplicatedPlayers() { final var invalidMap = \"\"\" 233 ###### #A..@# #..A@# #....# #.a..# #..b.# ###### \"\"\"; }",
        "C": "",
        "label": "F"
    },
    "1268": {
        "dataset": "COMP 3021",
        "project": "cflukaa",
        "bug_id": "21",
        "T": "void testParseMapWithoutUndoLimit() { final var invalidMap = String.join(\"\\n\", rectangularMap.lines().skip(1).toList()); }",
        "C": "",
        "label": "F"
    },
    "1269": {
        "dataset": "COMP 3021",
        "project": "cflukaa",
        "bug_id": "22",
        "T": "void testInsufficientDestinations() { final var invalidMap = \"\"\" 233 ###### #A..@# #...@# #a...# #.a..# #..a.# ###### \"\"\"; }",
        "C": "",
        "label": "F"
    },
    "1270": {
        "dataset": "COMP 3021",
        "project": "cflukaa",
        "bug_id": "23",
        "T": "void testSuperLargeMap() { try { new GameMap(Integer.MAX_VALUE, Integer.MAX_VALUE, Collections.emptySet(), 0); } catch (OutOfMemoryError e) { throw new RuntimeException(e); } }); }",
        "C": "public GameMap() {} public TerminalRenderingEngine(PrintStream outputSteam) { this.outputSteam = outputSteam; }",
        "label": "P"
    },
    "1271": {
        "dataset": "COMP 3021",
        "project": "cflukaa",
        "bug_id": "24",
        "T": "void testInvalidUndoLimit() { final var invalidMap = \"\"\" -233 ###### #A..@# #...@# #a.b@# #.a.@# #..a.# ###### \"\"\"; }",
        "C": "",
        "label": "F"
    },
    "1272": {
        "dataset": "COMP 3021",
        "project": "cflukaa",
        "bug_id": "25",
        "T": "void testEmptyMap() { final var invalidMap = \"\"; }",
        "C": "",
        "label": "F"
    },
    "1273": {
        "dataset": "COMP 3021",
        "project": "cflukaa",
        "bug_id": "26",
        "T": "void testMove(String input, String name, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); } private InputStream fixValueStream(String content) { final var bytes = content.getBytes(StandardCharsets.UTF_8); return new ByteArrayInputStream(bytes); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine(); // TODO throw new NotImplementedException(); }",
        "label": "F"
    },
    "1274": {
        "dataset": "COMP 3021",
        "project": "cflukaa",
        "bug_id": "27",
        "T": "void testMove(String input, String name, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); } private InputStream fixValueStream(String content) { final var bytes = content.getBytes(StandardCharsets.UTF_8); return new ByteArrayInputStream(bytes); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine(); // TODO throw new NotImplementedException(); }",
        "label": "F"
    },
    "1275": {
        "dataset": "COMP 3021",
        "project": "cflukaa",
        "bug_id": "28",
        "T": "void testMove(String input, String name, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); } private InputStream fixValueStream(String content) { final var bytes = content.getBytes(StandardCharsets.UTF_8); return new ByteArrayInputStream(bytes); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine(); // TODO throw new NotImplementedException(); }",
        "label": "F"
    },
    "1276": {
        "dataset": "COMP 3021",
        "project": "cflukaa",
        "bug_id": "29",
        "T": "void testMove(String input, String name, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); } private InputStream fixValueStream(String content) { final var bytes = content.getBytes(StandardCharsets.UTF_8); return new ByteArrayInputStream(bytes); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine(); // TODO throw new NotImplementedException(); }",
        "label": "F"
    },
    "1277": {
        "dataset": "COMP 3021",
        "project": "cflukaa",
        "bug_id": "30",
        "T": "void testMove(String input, String name, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); } private InputStream fixValueStream(String content) { final var bytes = content.getBytes(StandardCharsets.UTF_8); return new ByteArrayInputStream(bytes); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine(); // TODO throw new NotImplementedException(); }",
        "label": "F"
    },
    "1278": {
        "dataset": "COMP 3021",
        "project": "cflukaa",
        "bug_id": "31",
        "T": "void testMove(String input, String name, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); } private InputStream fixValueStream(String content) { final var bytes = content.getBytes(StandardCharsets.UTF_8); return new ByteArrayInputStream(bytes); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine(); // TODO throw new NotImplementedException(); }",
        "label": "F"
    },
    "1279": {
        "dataset": "COMP 3021",
        "project": "cflukaa",
        "bug_id": "32",
        "T": "void testMove(String input, String name, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); } private InputStream fixValueStream(String content) { final var bytes = content.getBytes(StandardCharsets.UTF_8); return new ByteArrayInputStream(bytes); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine(); // TODO throw new NotImplementedException(); }",
        "label": "F"
    },
    "1280": {
        "dataset": "COMP 3021",
        "project": "cflukaa",
        "bug_id": "33",
        "T": "void testMove(String input, String name, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); } private InputStream fixValueStream(String content) { final var bytes = content.getBytes(StandardCharsets.UTF_8); return new ByteArrayInputStream(bytes); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine(); // TODO throw new NotImplementedException(); }",
        "label": "F"
    },
    "1281": {
        "dataset": "COMP 3021",
        "project": "cflukaa",
        "bug_id": "34",
        "T": "void testUndo(String input, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine(); // TODO throw new NotImplementedException(); }",
        "label": "F"
    },
    "1282": {
        "dataset": "COMP 3021",
        "project": "cflukaa",
        "bug_id": "35",
        "T": "void testInvalidInput() { final var inputStream = fixValueStream(\"blah blah\"); final var inputEngine = new TerminalInputEngine(inputStream); final var action = inputEngine.fetchAction(); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine(); // TODO throw new NotImplementedException(); }",
        "label": "F"
    },
    "1283": {
        "dataset": "COMP 3021",
        "project": "cflukaa",
        "bug_id": "36",
        "T": "void testUndoWhenThereIsNoMove() { final var gameState = new GameState(TestHelper.parseGameMap(\"\"\" 233 ###### #A.a@# #..a@# ###### \"\"\" )); gameState.undo(); } private Entity generateEntity(int key) { return switch (key % 4) { case 0 -> new Box(0); case 1 -> new Empty(); case 2 -> new Player(0); case 3 -> new Wall(); default -> throw new ShouldNotReachException(); }; }",
        "C": "public GameState(@NotNull GameMap map) { // TODO mapHistory = new ArrayList<GameMap>(); mapHistory.add(map); } public void undo() { // TODO int lastVersion = mapHistory.size() -1; if(lastVersion == 0) { } else { mapHistory.remove(lastVersion); } } /** * Get the maximum width of the game map. * This should be the same as that in {@link GameMap} public TerminalRenderingEngine(PrintStream outputSteam) { this.outputSteam = outputSteam; } public Box(int playerId) { this.playerId = playerId; } public Player(int id) { this.id = id; } public ShouldNotReachException() { super(\"This branch should not be reached.\"); }",
        "label": "P"
    },
    "1284": {
        "dataset": "COMP 3021",
        "project": "cflukaa",
        "bug_id": "37",
        "T": "void testGetUndoUnlimited() { final var gameState = new GameState(TestHelper.parseGameMap(\"\"\" -1 ###### #.Aa@# #..a@# ###### \"\"\" )); }",
        "C": "public GameState(@NotNull GameMap map) { // TODO mapHistory = new ArrayList<GameMap>(); mapHistory.add(map); }",
        "label": "F"
    },
    "1285": {
        "dataset": "COMP 3021",
        "project": "cflukaa",
        "bug_id": "38",
        "T": "void testMapCopying() { final var maxWidth = 2333; final var maxHeight = 2333; final var random = new Random(); final var randomEntities = Stream.generate(() -> Position.of(random.nextInt(maxWidth), random.nextInt(maxHeight))) .distinct() .limit(100) .collect(Collectors.toMap(Function.identity(), it -> generateEntity(it.x()))); final var firstPos = randomEntities.keySet().stream().findFirst(); final var gameMap = new GameMap(maxWidth, maxHeight, Collections.singleton(firstPos.get()), 233); randomEntities.forEach(gameMap::putEntity); final var gameState = new GameState(gameMap); final var randomPosition = randomEntities.keySet().stream().findAny(); gameMap.putEntity(randomPosition.get(), new Empty()); randomEntities.forEach((p, e) -> assertEquals(e, gameState.getEntity(p))); }",
        "C": "public static @NotNull Position of(int x, int y) { return new Position(x, y); } public GameMap() {} public GameState(@NotNull GameMap map) { // TODO mapHistory = new ArrayList<GameMap>(); mapHistory.add(map); } public void putEntity(Position position, Entity entity) { // TODO map.get(position.y()).set(position.x(), entity); } public @Nullable Entity getEntity(@NotNull Position position) { // TODO int lastVersion = mapHistory.size() -1; return mapHistory.get(lastVersion).getEntity(position); } /** * Get all box destination positions as a set in the game map. * This should be the same as that in {@link GameMap}",
        "label": "F"
    },
    "1286": {
        "dataset": "COMP 3021",
        "project": "cflukaa",
        "bug_id": "39",
        "T": "void testUndoWhenThereIsMoveButNoCheckpoint() { final var gameState = new GameState(TestHelper.parseGameMap(\"\"\" 233 ###### #A.a@# #..a@# ###### \"\"\" )); gameState.move(Position.of(1, 1), Position.of(2, 1)); gameState.undo(); }",
        "C": "public GameState(@NotNull GameMap map) { // TODO mapHistory = new ArrayList<GameMap>(); mapHistory.add(map); } public void move(Position from, Position to) { // TODO throw new NotImplementedException(); } /** * Record a checkpoint of the game state, including: * <li>All current positions of entities in the game map.</li> * <li>Current undo quota</li> * <p> * Checkpoint is used in {@link GameState#undo()} public static @NotNull Position of(int x, int y) { return new Position(x, y); } public void undo() { // TODO int lastVersion = mapHistory.size() -1; if(lastVersion == 0) { } else { mapHistory.remove(lastVersion); } } /** * Get the maximum width of the game map. * This should be the same as that in {@link GameMap}",
        "label": "F"
    },
    "1287": {
        "dataset": "COMP 3021",
        "project": "cflukaa",
        "bug_id": "40",
        "T": "void testGameExit() { final var gameState = mock(GameState.class); final var inputEngine = mock(TerminalInputEngine.class); final var renderingEngine = mock(TerminalRenderingEngine.class); when(gameState.isWin()).thenReturn(false, false, false); when(inputEngine.fetchAction()) .thenReturn(new InvalidInput(0, \"\"), new InvalidInput(0, \"\"), new Exit(0)); final var game = new TerminalSokobanGame(gameState, inputEngine, renderingEngine); game.run(); verify(renderingEngine, atLeastOnce()).message(any()); }",
        "C": "public InvalidInput(int initiator, @NotNull String message) { super(initiator); this.message = message; } public Exit(int initiator) { super(initiator); } public TerminalSokobanGame(GameState gameState, TerminalInputEngine inputEngine, TerminalRenderingEngine renderingEngine) { super(gameState); this.inputEngine = inputEngine; this.renderingEngine = renderingEngine; // TODO // Check the number of players throw new NotImplementedException(); } public void run() { // TODO while (!shouldStop()) { renderingEngine.render(this.state); processAction(inputEngine.fetchAction()); } }",
        "label": "F"
    },
    "1288": {
        "dataset": "COMP 3021",
        "project": "cflukaa",
        "bug_id": "41",
        "T": "void testGameWin() { final var gameState = mock(GameState.class); final var inputEngine = mock(TerminalInputEngine.class); final var renderingEngine = mock(TerminalRenderingEngine.class); when(gameState.isWin()).thenReturn(false, false, false, true); when(inputEngine.fetchAction()) .thenReturn(new InvalidInput(0, \"\")); final var game = new TerminalSokobanGame(gameState, inputEngine, renderingEngine); game.run(); verify(gameState, atLeastOnce()).isWin(); verify(renderingEngine, atLeastOnce()).message(any()); }",
        "C": "public InvalidInput(int initiator, @NotNull String message) { super(initiator); this.message = message; } public TerminalSokobanGame(GameState gameState, TerminalInputEngine inputEngine, TerminalRenderingEngine renderingEngine) { super(gameState); this.inputEngine = inputEngine; this.renderingEngine = renderingEngine; // TODO // Check the number of players throw new NotImplementedException(); } public void run() { // TODO while (!shouldStop()) { renderingEngine.render(this.state); processAction(inputEngine.fetchAction()); } }",
        "label": "F"
    },
    "1289": {
        "dataset": "COMP 3021",
        "project": "cflukaa",
        "bug_id": "42",
        "T": "void testMoreThanTwoPlayers() { final var gameState = mock(GameState.class); final var inputEngine = mock(TerminalInputEngine.class); final var renderingEngine = mock(TerminalRenderingEngine.class); when(gameState.getAllPlayerPositions()).thenReturn(new HashSet<>(Arrays.asList(Position.of(1, 1), Position.of(1, 2), Position.of(1, 3)))); }",
        "C": "public static @NotNull Position of(int x, int y) { return new Position(x, y); }",
        "label": "F"
    },
    "1290": {
        "dataset": "COMP 3021",
        "project": "ychenhq",
        "bug_id": "0",
        "T": "void moveUp() { Position.of(233, 232), new Move.Up(-1).nextPosition(pos) ); }",
        "C": "public static @NotNull Position of(int x, int y) { return new Position(x, y); } public Up(int initiator) { super(initiator); }",
        "label": "P"
    },
    "1291": {
        "dataset": "COMP 3021",
        "project": "ychenhq",
        "bug_id": "1",
        "T": "void moveDown() { Position.of(233, 234), new Move.Down(-1).nextPosition(pos) ); }",
        "C": "public static @NotNull Position of(int x, int y) { return new Position(x, y); } public Down(int initiator) { super(initiator); }",
        "label": "P"
    },
    "1292": {
        "dataset": "COMP 3021",
        "project": "ychenhq",
        "bug_id": "2",
        "T": "void moveRight() { Position.of(234, 233), new Move.Right(-1).nextPosition(pos) ); }",
        "C": "public static @NotNull Position of(int x, int y) { return new Position(x, y); } public Right(int initiator) { super(initiator); }",
        "label": "P"
    },
    "1293": {
        "dataset": "COMP 3021",
        "project": "ychenhq",
        "bug_id": "3",
        "T": "void testExceedingUndoQuota() { final var gameState = mock(GameState.class); when(gameState.getPlayerPositionById(anyInt())).thenReturn(Position.of(0, 0)); when(gameState.getUndoQuota()).thenReturn(Optional.of(0)); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Undo(0)); }",
        "C": "public Undo(int initiator) { super(initiator); }",
        "label": "P"
    },
    "1294": {
        "dataset": "COMP 3021",
        "project": "ychenhq",
        "bug_id": "4",
        "T": "void testExit() { final var gameState = mock(GameState.class); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Exit(0)); }",
        "C": "public Exit(int initiator) { super(initiator); }",
        "label": "F"
    },
    "1295": {
        "dataset": "COMP 3021",
        "project": "ychenhq",
        "bug_id": "5",
        "T": "void testUndoUnlimited() { final var gameState = mock(GameState.class); when(gameState.getPlayerPositionById(anyInt())).thenReturn(Position.of(0, 0)); when(gameState.getUndoQuota()).thenReturn(Optional.empty()); final var game = new SokobanGameForTesting(gameState); for (int i = 0; i < 10000; i++) { final var result = game.feedActionForProcessing(new Undo(0)); } verify(gameState, times(10000)).undo(); }",
        "C": "public TerminalRenderingEngine(PrintStream outputSteam) { this.outputSteam = outputSteam; } public Undo(int initiator) { super(initiator); }",
        "label": "F"
    },
    "1296": {
        "dataset": "COMP 3021",
        "project": "ychenhq",
        "bug_id": "6",
        "T": "void testPushOtherPlayerBox() { String mapText = \"\"\" 233 ###### #AB.@# #b.a.# #@...# ###### \"\"\"; final var testMap = TestHelper.parseGameMap(mapText); final var gameState = spy(new GameState(testMap)); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Move.Down(0)); verify(gameState, never()).move(any(), any()); }",
        "C": "public GameState(@NotNull GameMap map) { // TODO // curPosition = map._initialBoxDest.get(map._initialBoxDest.size()-1); Height = map._height; Width = map._width; HistoryMovements = new ArrayList<>(); Players = new ArrayList<>(); BoxDest = new HashSet<>(); InitialMap = map._mapStringNonStatic.clone(); UndoLimit = map._undoLimit; MapString = map._mapStringNonStatic.clone(); Players = map._playersNonStatic; Wall = map._wallNonStatic; Undo =0; BoxDest = map._initialBoxDest; // throw new NotImplementedException(); } public Down(int initiator) { super(initiator); }",
        "label": "F"
    },
    "1297": {
        "dataset": "COMP 3021",
        "project": "ychenhq",
        "bug_id": "7",
        "T": "void testMoveNonExistingPlayer() { String mapText = \"\"\" 233 ###### #A..@# #a...# ##...# ###### \"\"\"; final var testMap = TestHelper.parseGameMap(mapText); final var gameState = spy(new GameState(testMap)); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Move.Down(23)); }",
        "C": "public GameState(@NotNull GameMap map) { // TODO // curPosition = map._initialBoxDest.get(map._initialBoxDest.size()-1); Height = map._height; Width = map._width; HistoryMovements = new ArrayList<>(); Players = new ArrayList<>(); BoxDest = new HashSet<>(); InitialMap = map._mapStringNonStatic.clone(); UndoLimit = map._undoLimit; MapString = map._mapStringNonStatic.clone(); Players = map._playersNonStatic; Wall = map._wallNonStatic; Undo =0; BoxDest = map._initialBoxDest; // throw new NotImplementedException(); } public Down(int initiator) { super(initiator); }",
        "label": "F"
    },
    "1298": {
        "dataset": "COMP 3021",
        "project": "ychenhq",
        "bug_id": "8",
        "T": "void testCheckpointWhenNeed() { final var gameState = spy(new GameState(TestHelper.parseGameMap(\"\"\" 233 ###### #.Aa@# #..a@# ###### \"\"\" ))); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Move.Right(0)); verify(gameState, times(1)).checkpoint(); }",
        "C": "public GameState(@NotNull GameMap map) { // TODO // curPosition = map._initialBoxDest.get(map._initialBoxDest.size()-1); Height = map._height; Width = map._width; HistoryMovements = new ArrayList<>(); Players = new ArrayList<>(); BoxDest = new HashSet<>(); InitialMap = map._mapStringNonStatic.clone(); UndoLimit = map._undoLimit; MapString = map._mapStringNonStatic.clone(); Players = map._playersNonStatic; Wall = map._wallNonStatic; Undo =0; BoxDest = map._initialBoxDest; // throw new NotImplementedException(); } public Right(int initiator) { super(initiator); }",
        "label": "P"
    },
    "1299": {
        "dataset": "COMP 3021",
        "project": "ychenhq",
        "bug_id": "9",
        "T": "void testPushBoxAgainstWall() { String mapText = \"\"\" 233 ###### #A..@# #a...# ##...# ###### \"\"\"; final var testMap = TestHelper.parseGameMap(mapText); final var gameState = spy(new GameState(testMap)); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Move.Down(0)); verify(gameState, never()).move(any(), any()); }",
        "C": "public GameState(@NotNull GameMap map) { // TODO // curPosition = map._initialBoxDest.get(map._initialBoxDest.size()-1); Height = map._height; Width = map._width; HistoryMovements = new ArrayList<>(); Players = new ArrayList<>(); BoxDest = new HashSet<>(); InitialMap = map._mapStringNonStatic.clone(); UndoLimit = map._undoLimit; MapString = map._mapStringNonStatic.clone(); Players = map._playersNonStatic; Wall = map._wallNonStatic; Undo =0; BoxDest = map._initialBoxDest; // throw new NotImplementedException(); } public Down(int initiator) { super(initiator); }",
        "label": "P"
    },
    "1300": {
        "dataset": "COMP 3021",
        "project": "ychenhq",
        "bug_id": "10",
        "T": "void testCheckpointWhenNotNeed() { final var gameState = spy(new GameState(TestHelper.parseGameMap(\"\"\" 233 ###### #A.a@# #..a@# ###### \"\"\" ))); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Move.Right(0)); verify(gameState, never()).checkpoint(); } private static class SokobanGameForTesting extends AbstractSokobanGame { protected SokobanGameForTesting(GameState gameState) { super(gameState); } @Override public void run() { } public ActionResult feedActionForProcessing(Action action) { return processAction(action); } }",
        "C": "public GameState(@NotNull GameMap map) { // TODO // curPosition = map._initialBoxDest.get(map._initialBoxDest.size()-1); Height = map._height; Width = map._width; HistoryMovements = new ArrayList<>(); Players = new ArrayList<>(); BoxDest = new HashSet<>(); InitialMap = map._mapStringNonStatic.clone(); UndoLimit = map._undoLimit; MapString = map._mapStringNonStatic.clone(); Players = map._playersNonStatic; Wall = map._wallNonStatic; Undo =0; BoxDest = map._initialBoxDest; // throw new NotImplementedException(); } public Right(int initiator) { super(initiator); } public void run() { // TODO while(!shouldStop()){ var result = processAction(this.inputEngine.fetchAction()); if(result.getClass() == ActionResult.Failed.class){ renderingEngine.render(this.state); renderingEngine.message(INVALID_INPUT_MESSAGE); }else { renderingEngine.render(this.state); } } // throw new NotImplementedException(); } protected ActionResult processAction(@NotNull Action action) { // TODO Position oldPosition = state.getPlayerPositionById(action.getInitiator()); if(oldPosition==null) return new ActionResult.Failed(action, INVALID_INPUT_MESSAGE); Position downPosition = new Position(oldPosition.x(), oldPosition.y()+1); Position rightPosition = new Position(oldPosition.x()+1, oldPosition.y()); Position leftPosition = new Position(oldPosition.x()-1, oldPosition.y()); Position upPosition = new Position(oldPosition.x(), oldPosition.y()-1); if(action.getClass() == Move.Down.class){ if (state.getEntity(downPosition).getClass() == Empty.class){ state.move(oldPosition,downPosition ); return new ActionResult.Success(action); } else if (state.getEntity(downPosition).getClass() == Box.class) { Position another = new Position(downPosition.x(), downPosition.y()+1); if(state.getEntity(another).getClass() ==Empty.class){ state.move(downPosition,another); state.move(oldPosition,downPosition); state.checkpoint(); return new ActionResult.Success(action); }else new ActionResult.Failed(action, INVALID_INPUT_MESSAGE); } return new ActionResult.Failed(action, INVALID_INPUT_MESSAGE); }else if (action.getClass() == Move.Right.class){ if (state.getEntity(rightPosition).getClass() == Empty.class) { state.move(oldPosition,rightPosition ); return new ActionResult.Success(action); }else if (state.getEntity(rightPosition).getClass() == Box.class) { Position another = new Position(rightPosition.x()+1, rightPosition.y()); if(state.getEntity(another).getClass() ==Empty.class){ state.move(rightPosition,another); state.move(oldPosition,rightPosition); state.checkpoint(); return new ActionResult.Success(action); }else new ActionResult.Failed(action, INVALID_INPUT_MESSAGE); } return new ActionResult.Failed(action, INVALID_INPUT_MESSAGE); } else if (action.getClass() == Move.Left.class) { if (state.getEntity(leftPosition).getClass() == Empty.class) { state.move(oldPosition,leftPosition ); return new ActionResult.Success(action); }else if (state.getEntity(leftPosition).getClass() == Box.class) { Position another = new Position(leftPosition.x()-1, rightPosition.y()); if(state.getEntity(another).getClass() ==Empty.class){ state.move(leftPosition,another); state.move(oldPosition,leftPosition); state.checkpoint(); return new ActionResult.Success(action); }else new ActionResult.Failed(action, INVALID_INPUT_MESSAGE); } return new ActionResult.Failed(action, INVALID_INPUT_MESSAGE); } else if (action.getClass() == Move.Up.class) { if (state.getEntity(upPosition).getClass() == Empty.class) { state.move(oldPosition,upPosition ); return new ActionResult.Success(action); }else if (state.getEntity(upPosition).getClass() == Box.class) { Position another = new Position(upPosition.x(), rightPosition.y()-1); if(state.getEntity(another).getClass() ==Empty.class){ state.move(upPosition,another); state.move(oldPosition,upPosition); state.checkpoint(); return new ActionResult.Success(action); }else new ActionResult.Failed(action, INVALID_INPUT_MESSAGE); } return new ActionResult.Failed(action, INVALID_INPUT_MESSAGE); } else if (action.getClass() == Exit.class) { this.exit = true; return new ActionResult.Success(action); } else if (action.getClass() == Undo.class) { if(state.getUndoQuota().get()>0){ return new ActionResult.Success(action); } return new ActionResult.Failed(action, UNDO_QUOTA_RUN_OUT); } return new ActionResult.Failed(action, INVALID_INPUT_MESSAGE); // switch (action.getClass().getName()){ // case \"hk.ust.comp3021.actions.Move$Down\": // if (state.getEntity(downPosition).getClass() == Empty.class){ // state.move(oldPosition,downPosition ); // return new ActionResult.Success(action); // } else if (state.getEntity(downPosition).getClass() == Box.class) { // Position another = new Position(downPosition.x(), downPosition.y()+1); // if(state.getEntity(another).getClass() ==Empty.class){ // state.move(downPosition,another); // state.move(oldPosition,downPosition); // state.checkpoint(); // return new ActionResult.Success(action); // }else new ActionResult.Failed(action, \"You have met a wall\"); // } // return new ActionResult.Failed(action, \"You have met a wall\"); // case \"hk.ust.comp3021.actions.Move$Right\": // if (state.getEntity(rightPosition).getClass() == Empty.class) { // state.move(oldPosition,rightPosition ); // return new ActionResult.Success(action); // }else if (state.getEntity(rightPosition).getClass() == Box.class) { // Position another = new Position(rightPosition.x()+1, rightPosition.y()); // if(state.getEntity(another).getClass() ==Empty.class){ // state.move(rightPosition,another); // state.move(oldPosition,rightPosition); // state.checkpoint(); // return new ActionResult.Success(action); // }else new ActionResult.Failed(action, \"You have met a wall\"); // } // return new ActionResult.Failed(action, \"You have met a wall\"); // case \"hk.ust.comp3021.actions.Move$Left\": // if (state.getEntity(leftPosition).getClass() == Empty.class) { // state.move(oldPosition,leftPosition ); // return new ActionResult.Success(action); // }else if (state.getEntity(leftPosition).getClass() == Box.class) { // Position another = new Position(leftPosition.x()-1, rightPosition.y()); // if(state.getEntity(another).getClass() ==Empty.class){ // state.move(leftPosition,another); // state.move(oldPosition,leftPosition); // state.checkpoint(); // return new ActionResult.Success(action); // }else new ActionResult.Failed(action, \"You have met a wall\"); // } // return new ActionResult.Failed(action, \"You have met a wall\"); // case \"hk.ust.comp3021.actions.Move$Up\": // if (state.getEntity(upPosition).getClass() == Empty.class) { // state.move(oldPosition,upPosition ); // return new ActionResult.Success(action); // }else if (state.getEntity(upPosition).getClass() == Box.class) { // Position another = new Position(upPosition.x(), rightPosition.y()-1); // if(state.getEntity(another).getClass() ==Empty.class){ // state.move(upPosition,another); // state.move(oldPosition,upPosition); // state.checkpoint(); // return new ActionResult.Success(action); // }else new ActionResult.Failed(action, \"You have met a wall\"); // } // return new ActionResult.Failed(action, \"You have met a wall\"); // case \"hk.ust.comp3021.actions.Move$Exit\": // this.exit = true; // return new ActionResult.Success(action); // case \"hk.ust.comp3021.actions.Move$Undo\": // if(state.getUndoQuota().get()>0){ // return new ActionResult.Success(action); // } // return new ActionResult.Failed(action, UNDO_QUOTA_RUN_OUT); // default: // return new ActionResult.Failed(action, \"You have met a wall\"); // } // throw new NotImplementedException(); }",
        "label": "P"
    },
    "1301": {
        "dataset": "COMP 3021",
        "project": "ychenhq",
        "bug_id": "11",
        "T": "void testHitAnotherPlayer() { String mapText = \"\"\" 233 ###### #A..@# #B...# #ab.@# ###### \"\"\"; final var testMap = TestHelper.parseGameMap(mapText); final var gameState = spy(new GameState(testMap)); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Move.Down(0)); verify(gameState, never()).move(any(), any()); }",
        "C": "public GameState(@NotNull GameMap map) { // TODO // curPosition = map._initialBoxDest.get(map._initialBoxDest.size()-1); Height = map._height; Width = map._width; HistoryMovements = new ArrayList<>(); Players = new ArrayList<>(); BoxDest = new HashSet<>(); InitialMap = map._mapStringNonStatic.clone(); UndoLimit = map._undoLimit; MapString = map._mapStringNonStatic.clone(); Players = map._playersNonStatic; Wall = map._wallNonStatic; Undo =0; BoxDest = map._initialBoxDest; // throw new NotImplementedException(); } public Down(int initiator) { super(initiator); }",
        "label": "P"
    },
    "1302": {
        "dataset": "COMP 3021",
        "project": "ychenhq",
        "bug_id": "12",
        "T": "void testUndoWithinQuota() { final var gameState = mock(GameState.class); when(gameState.getPlayerPositionById(anyInt())).thenReturn(Position.of(0, 0)); when(gameState.getUndoQuota()).thenReturn(Optional.of(1)); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Undo(0)); verify(gameState, times(1)).undo(); }",
        "C": "public Undo(int initiator) { super(initiator); }",
        "label": "F"
    },
    "1303": {
        "dataset": "COMP 3021",
        "project": "ychenhq",
        "bug_id": "13",
        "T": "void testInvalidInput() { final var game = new SokobanGameForTesting(mock(GameState.class)); final var message = String.valueOf(new Random().nextLong()); final var action = new InvalidInput(-1, message); final var result = game.feedActionForProcessing(action); }",
        "C": "public InvalidInput(int initiator, @NotNull String message) { super(initiator); this.message = message; }",
        "label": "P"
    },
    "1304": {
        "dataset": "COMP 3021",
        "project": "ychenhq",
        "bug_id": "14",
        "T": "void testUndoLimitParsing() { final var gameMap = TestHelper.parseGameMap(rectangularMap); }",
        "C": "",
        "label": "P"
    },
    "1305": {
        "dataset": "COMP 3021",
        "project": "ychenhq",
        "bug_id": "15",
        "T": "void testWidthForNonRectangularMap() { final var gameMap = TestHelper.parseGameMap(nonRectangularMap); }",
        "C": "",
        "label": "P"
    },
    "1306": {
        "dataset": "COMP 3021",
        "project": "ychenhq",
        "bug_id": "16",
        "T": "void testTwoPlayersMap() { final var twoPlayersMap = \"\"\" 233 ###### #A..@# #..B@# #....# #.a..# #..b.# ###### \"\"\"; final var gameMap = TestHelper.parseGameMap(twoPlayersMap); final var playerIds = gameMap.getPlayerIds(); final var expectedIds = new HashSet<Integer>(); expectedIds.add(0); expectedIds.add(1); }",
        "C": "public Set<Integer> getPlayerIds() { // TODO return new HashSet<>(_players); // throw new NotImplementedException(); }",
        "label": "P"
    },
    "1307": {
        "dataset": "COMP 3021",
        "project": "ychenhq",
        "bug_id": "17",
        "T": "void testMapWithoutPlayer() { final var invalidMap = \"\"\" 233 ### #.# ### \"\"\"; } // @Tag(TestKind.HIDDEN) // @Test // void testUnmatchedPlayersAndBoxes() { // final var invalidMap = \"\"\" // 233 // ###### // #A..@# // #...@# // #a.b@# // #.a.@# // #..a.# // ###### // \"\"\"; // assertThrowsExactly(IllegalArgumentException.class, () -> TestHelper.parseGameMap(invalidMap)); // }",
        "C": "public TerminalRenderingEngine(PrintStream outputSteam) { this.outputSteam = outputSteam; }",
        "label": "P"
    },
    "1308": {
        "dataset": "COMP 3021",
        "project": "ychenhq",
        "bug_id": "18",
        "T": "void testManyPlayersMap() { final var manyPlayersMap = \"\"\" 233 ###### #A.P@@# #vCB@@# #.cpD@# #Ga.d@# #g.bV@# ###### \"\"\"; final var gameMap = TestHelper.parseGameMap(manyPlayersMap); final var playerIds = gameMap.getPlayerIds(); final var expectedIds = new HashSet<>(Arrays.asList( 0, 'P' - 'A', 'C' - 'A', 'B' - 'A', 'D' - 'A', 'G' - 'A', 'V' - 'A' )); }",
        "C": "public Set<Integer> getPlayerIds() { // TODO return new HashSet<>(_players); // throw new NotImplementedException(); }",
        "label": "P"
    },
    "1309": {
        "dataset": "COMP 3021",
        "project": "ychenhq",
        "bug_id": "19",
        "T": "void testHeightForNonRectangularMap() { final var gameMap = TestHelper.parseGameMap(nonRectangularMap); }",
        "C": "",
        "label": "P"
    },
    "1310": {
        "dataset": "COMP 3021",
        "project": "ychenhq",
        "bug_id": "20",
        "T": "void testDuplicatedPlayers() { final var invalidMap = \"\"\" 233 ###### #A..@# #..A@# #....# #.a..# #..b.# ###### \"\"\"; }",
        "C": "",
        "label": "P"
    },
    "1311": {
        "dataset": "COMP 3021",
        "project": "ychenhq",
        "bug_id": "21",
        "T": "void testParseMapWithoutUndoLimit() { final var invalidMap = String.join(\"\\n\", rectangularMap.lines().skip(1).toList()); }",
        "C": "",
        "label": "P"
    },
    "1312": {
        "dataset": "COMP 3021",
        "project": "ychenhq",
        "bug_id": "22",
        "T": "void testInsufficientDestinations() { final var invalidMap = \"\"\" 233 ###### #A..@# #...@# #a...# #.a..# #..a.# ###### \"\"\"; }",
        "C": "",
        "label": "F"
    },
    "1313": {
        "dataset": "COMP 3021",
        "project": "ychenhq",
        "bug_id": "23",
        "T": "void testSuperLargeMap() { try { new GameMap(Integer.MAX_VALUE, Integer.MAX_VALUE, Collections.emptySet(), 0); } catch (OutOfMemoryError e) { throw new RuntimeException(e); } }); }",
        "C": "public GameMap(int maxWidth, int maxHeight, Set<Position> destinations, int undoLimit) { // TODO _width = maxWidth; _height = maxHeight; _initialBoxDest = destinations; _undoLimit = undoLimit; _mapStringNonStatic = _mapString; _playersNonStatic = _players; _wallNonStatic = _wall; // throw new NotImplementedException(); } /** * Parses the map from a string representation. * The first line is undo limit. * Starting from the second line, the game map is represented as follows, * <li># represents a {@link Wall}</li> * <li>@ represents a box destination.</li> * <li>Any upper-case letter represents a {@link Player}.</li> * <li> * Any lower-case letter represents a {@link Box} that is only movable by the player with the corresponding upper-case letter. * For instance, box \"a\" can only be moved by player \"A\" and not movable by player \"B\". * </li> * <li>. represents an {@link Empty} position in the map, meaning there is no player or box currently at this position.</li> * <p> * Notes: * <li> * There can be at most 26 players. * All implementations of classes in the hk.ust.comp3021.game package should support up to 26 players. * </li> * <li> * For simplicity, we assume the given map is bounded with a closed boundary. * There is no need to check this point. * </li> * <li> * Example maps can be found in \"src/main/resources\". * </li> * * @param mapText The string representation. * @return The parsed GameMap object. * @throws IllegalArgumentException if undo limit is negative but not -1. * @throws IllegalArgumentException if there are multiple same upper-case letters, i.e., one player can only exist at one position. * @throws IllegalArgumentException if there are no players in the map. * @throws IllegalArgumentException if the number of boxes is not equal to the number of box destinations. * @throws IllegalArgumentException if there are boxes whose {@link Box#getPlayerId()} public TerminalRenderingEngine(PrintStream outputSteam) { this.outputSteam = outputSteam; }",
        "label": "P"
    },
    "1314": {
        "dataset": "COMP 3021",
        "project": "ychenhq",
        "bug_id": "24",
        "T": "void testInvalidUndoLimit() { final var invalidMap = \"\"\" -233 ###### #A..@# #...@# #a.b@# #.a.@# #..a.# ###### \"\"\"; }",
        "C": "",
        "label": "P"
    },
    "1315": {
        "dataset": "COMP 3021",
        "project": "ychenhq",
        "bug_id": "25",
        "T": "void testEmptyMap() { final var invalidMap = \"\"; }",
        "C": "",
        "label": "P"
    },
    "1316": {
        "dataset": "COMP 3021",
        "project": "ychenhq",
        "bug_id": "26",
        "T": "void testMove(String input, String name, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); } private InputStream fixValueStream(String content) { final var bytes = content.getBytes(StandardCharsets.UTF_8); return new ByteArrayInputStream(bytes); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine(); // Key A,S,W,D and H,J,K,L are used to move Player with ID 0 and 1 to Left,Down,Up,Right direction by 1 step, respectively // TODO switch (inputLine.toUpperCase()){ case \"A\": return new Move.Left(0); case \"S\": return new Move.Down(0); case \"W\": return new Move.Up(0); case \"D\": return new Move.Right(0); case \"H\": return new Move.Left(1); case \"J\": return new Move.Down(1); case \"K\": return new Move.Up(1); case \"L\": return new Move.Right(1); case \"U\": return new Undo(0); case \"EXIT\": return new Exit(0); default: return new InvalidInput(fetchAction().getInitiator(), \"\"); } // throw new NotImplementedException(); }",
        "label": "P"
    },
    "1317": {
        "dataset": "COMP 3021",
        "project": "ychenhq",
        "bug_id": "27",
        "T": "void testMove(String input, String name, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); } private InputStream fixValueStream(String content) { final var bytes = content.getBytes(StandardCharsets.UTF_8); return new ByteArrayInputStream(bytes); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine(); // Key A,S,W,D and H,J,K,L are used to move Player with ID 0 and 1 to Left,Down,Up,Right direction by 1 step, respectively // TODO switch (inputLine.toUpperCase()){ case \"A\": return new Move.Left(0); case \"S\": return new Move.Down(0); case \"W\": return new Move.Up(0); case \"D\": return new Move.Right(0); case \"H\": return new Move.Left(1); case \"J\": return new Move.Down(1); case \"K\": return new Move.Up(1); case \"L\": return new Move.Right(1); case \"U\": return new Undo(0); case \"EXIT\": return new Exit(0); default: return new InvalidInput(fetchAction().getInitiator(), \"\"); } // throw new NotImplementedException(); }",
        "label": "P"
    },
    "1318": {
        "dataset": "COMP 3021",
        "project": "ychenhq",
        "bug_id": "28",
        "T": "void testMove(String input, String name, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); } private InputStream fixValueStream(String content) { final var bytes = content.getBytes(StandardCharsets.UTF_8); return new ByteArrayInputStream(bytes); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine(); // Key A,S,W,D and H,J,K,L are used to move Player with ID 0 and 1 to Left,Down,Up,Right direction by 1 step, respectively // TODO switch (inputLine.toUpperCase()){ case \"A\": return new Move.Left(0); case \"S\": return new Move.Down(0); case \"W\": return new Move.Up(0); case \"D\": return new Move.Right(0); case \"H\": return new Move.Left(1); case \"J\": return new Move.Down(1); case \"K\": return new Move.Up(1); case \"L\": return new Move.Right(1); case \"U\": return new Undo(0); case \"EXIT\": return new Exit(0); default: return new InvalidInput(fetchAction().getInitiator(), \"\"); } // throw new NotImplementedException(); }",
        "label": "P"
    },
    "1319": {
        "dataset": "COMP 3021",
        "project": "ychenhq",
        "bug_id": "29",
        "T": "void testMove(String input, String name, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); } private InputStream fixValueStream(String content) { final var bytes = content.getBytes(StandardCharsets.UTF_8); return new ByteArrayInputStream(bytes); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine(); // Key A,S,W,D and H,J,K,L are used to move Player with ID 0 and 1 to Left,Down,Up,Right direction by 1 step, respectively // TODO switch (inputLine.toUpperCase()){ case \"A\": return new Move.Left(0); case \"S\": return new Move.Down(0); case \"W\": return new Move.Up(0); case \"D\": return new Move.Right(0); case \"H\": return new Move.Left(1); case \"J\": return new Move.Down(1); case \"K\": return new Move.Up(1); case \"L\": return new Move.Right(1); case \"U\": return new Undo(0); case \"EXIT\": return new Exit(0); default: return new InvalidInput(fetchAction().getInitiator(), \"\"); } // throw new NotImplementedException(); }",
        "label": "P"
    },
    "1320": {
        "dataset": "COMP 3021",
        "project": "ychenhq",
        "bug_id": "30",
        "T": "void testMove(String input, String name, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); } private InputStream fixValueStream(String content) { final var bytes = content.getBytes(StandardCharsets.UTF_8); return new ByteArrayInputStream(bytes); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine(); // Key A,S,W,D and H,J,K,L are used to move Player with ID 0 and 1 to Left,Down,Up,Right direction by 1 step, respectively // TODO switch (inputLine.toUpperCase()){ case \"A\": return new Move.Left(0); case \"S\": return new Move.Down(0); case \"W\": return new Move.Up(0); case \"D\": return new Move.Right(0); case \"H\": return new Move.Left(1); case \"J\": return new Move.Down(1); case \"K\": return new Move.Up(1); case \"L\": return new Move.Right(1); case \"U\": return new Undo(0); case \"EXIT\": return new Exit(0); default: return new InvalidInput(fetchAction().getInitiator(), \"\"); } // throw new NotImplementedException(); }",
        "label": "P"
    },
    "1321": {
        "dataset": "COMP 3021",
        "project": "ychenhq",
        "bug_id": "31",
        "T": "void testMove(String input, String name, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); } private InputStream fixValueStream(String content) { final var bytes = content.getBytes(StandardCharsets.UTF_8); return new ByteArrayInputStream(bytes); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine(); // Key A,S,W,D and H,J,K,L are used to move Player with ID 0 and 1 to Left,Down,Up,Right direction by 1 step, respectively // TODO switch (inputLine.toUpperCase()){ case \"A\": return new Move.Left(0); case \"S\": return new Move.Down(0); case \"W\": return new Move.Up(0); case \"D\": return new Move.Right(0); case \"H\": return new Move.Left(1); case \"J\": return new Move.Down(1); case \"K\": return new Move.Up(1); case \"L\": return new Move.Right(1); case \"U\": return new Undo(0); case \"EXIT\": return new Exit(0); default: return new InvalidInput(fetchAction().getInitiator(), \"\"); } // throw new NotImplementedException(); }",
        "label": "P"
    },
    "1322": {
        "dataset": "COMP 3021",
        "project": "ychenhq",
        "bug_id": "32",
        "T": "void testMove(String input, String name, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); } private InputStream fixValueStream(String content) { final var bytes = content.getBytes(StandardCharsets.UTF_8); return new ByteArrayInputStream(bytes); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine(); // Key A,S,W,D and H,J,K,L are used to move Player with ID 0 and 1 to Left,Down,Up,Right direction by 1 step, respectively // TODO switch (inputLine.toUpperCase()){ case \"A\": return new Move.Left(0); case \"S\": return new Move.Down(0); case \"W\": return new Move.Up(0); case \"D\": return new Move.Right(0); case \"H\": return new Move.Left(1); case \"J\": return new Move.Down(1); case \"K\": return new Move.Up(1); case \"L\": return new Move.Right(1); case \"U\": return new Undo(0); case \"EXIT\": return new Exit(0); default: return new InvalidInput(fetchAction().getInitiator(), \"\"); } // throw new NotImplementedException(); }",
        "label": "P"
    },
    "1323": {
        "dataset": "COMP 3021",
        "project": "ychenhq",
        "bug_id": "33",
        "T": "void testMove(String input, String name, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); } private InputStream fixValueStream(String content) { final var bytes = content.getBytes(StandardCharsets.UTF_8); return new ByteArrayInputStream(bytes); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine(); // Key A,S,W,D and H,J,K,L are used to move Player with ID 0 and 1 to Left,Down,Up,Right direction by 1 step, respectively // TODO switch (inputLine.toUpperCase()){ case \"A\": return new Move.Left(0); case \"S\": return new Move.Down(0); case \"W\": return new Move.Up(0); case \"D\": return new Move.Right(0); case \"H\": return new Move.Left(1); case \"J\": return new Move.Down(1); case \"K\": return new Move.Up(1); case \"L\": return new Move.Right(1); case \"U\": return new Undo(0); case \"EXIT\": return new Exit(0); default: return new InvalidInput(fetchAction().getInitiator(), \"\"); } // throw new NotImplementedException(); }",
        "label": "P"
    },
    "1324": {
        "dataset": "COMP 3021",
        "project": "ychenhq",
        "bug_id": "34",
        "T": "void testUndo(String input, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine(); // Key A,S,W,D and H,J,K,L are used to move Player with ID 0 and 1 to Left,Down,Up,Right direction by 1 step, respectively // TODO switch (inputLine.toUpperCase()){ case \"A\": return new Move.Left(0); case \"S\": return new Move.Down(0); case \"W\": return new Move.Up(0); case \"D\": return new Move.Right(0); case \"H\": return new Move.Left(1); case \"J\": return new Move.Down(1); case \"K\": return new Move.Up(1); case \"L\": return new Move.Right(1); case \"U\": return new Undo(0); case \"EXIT\": return new Exit(0); default: return new InvalidInput(fetchAction().getInitiator(), \"\"); } // throw new NotImplementedException(); }",
        "label": "P"
    },
    "1325": {
        "dataset": "COMP 3021",
        "project": "ychenhq",
        "bug_id": "35",
        "T": "void testInvalidInput() { final var inputStream = fixValueStream(\"blah blah\"); final var inputEngine = new TerminalInputEngine(inputStream); final var action = inputEngine.fetchAction(); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine(); // Key A,S,W,D and H,J,K,L are used to move Player with ID 0 and 1 to Left,Down,Up,Right direction by 1 step, respectively // TODO switch (inputLine.toUpperCase()){ case \"A\": return new Move.Left(0); case \"S\": return new Move.Down(0); case \"W\": return new Move.Up(0); case \"D\": return new Move.Right(0); case \"H\": return new Move.Left(1); case \"J\": return new Move.Down(1); case \"K\": return new Move.Up(1); case \"L\": return new Move.Right(1); case \"U\": return new Undo(0); case \"EXIT\": return new Exit(0); default: return new InvalidInput(fetchAction().getInitiator(), \"\"); } // throw new NotImplementedException(); }",
        "label": "F"
    },
    "1326": {
        "dataset": "COMP 3021",
        "project": "ychenhq",
        "bug_id": "36",
        "T": "void testUndoWhenThereIsNoMove() { final var gameState = new GameState(TestHelper.parseGameMap(\"\"\" 233 ###### #A.a@# #..a@# ###### \"\"\" )); gameState.undo(); } private Entity generateEntity(int key) { return switch (key % 4) { case 0 -> new Box(0); case 1 -> new Empty(); case 2 -> new Player(0); case 3 -> new Wall(); default -> throw new ShouldNotReachException(); }; }",
        "C": "public GameState(@NotNull GameMap map) { // TODO // curPosition = map._initialBoxDest.get(map._initialBoxDest.size()-1); Height = map._height; Width = map._width; HistoryMovements = new ArrayList<>(); Players = new ArrayList<>(); BoxDest = new HashSet<>(); InitialMap = map._mapStringNonStatic.clone(); UndoLimit = map._undoLimit; MapString = map._mapStringNonStatic.clone(); Players = map._playersNonStatic; Wall = map._wallNonStatic; Undo =0; BoxDest = map._initialBoxDest; // throw new NotImplementedException(); } public void undo() { // TODO if(HasCheckPoint){ // System.out.print(\"has check point\"); // System.out.print(\"_mapString\"+ _mapString[2].toString()); // System.out.print(\"_checkpointMap\"+ _checkpointMap[2].toString()); MapString = CheckpointMap.clone(); Undo++; HasCheckPoint = false; }else{ MapString = InitialMap; Undo =0; } // throw new NotImplementedException(); } /** * Get the maximum width of the game map. * This should be the same as that in {@link GameMap} public TerminalRenderingEngine(PrintStream outputSteam) { this.outputSteam = outputSteam; } public Box(int playerId) { this.playerId = playerId; } public Player(int id) { this.id = id; } public ShouldNotReachException() { super(\"This branch should not be reached.\"); }",
        "label": "P"
    },
    "1327": {
        "dataset": "COMP 3021",
        "project": "ychenhq",
        "bug_id": "37",
        "T": "void testGetUndoUnlimited() { final var gameState = new GameState(TestHelper.parseGameMap(\"\"\" -1 ###### #.Aa@# #..a@# ###### \"\"\" )); }",
        "C": "public GameState(@NotNull GameMap map) { // TODO // curPosition = map._initialBoxDest.get(map._initialBoxDest.size()-1); Height = map._height; Width = map._width; HistoryMovements = new ArrayList<>(); Players = new ArrayList<>(); BoxDest = new HashSet<>(); InitialMap = map._mapStringNonStatic.clone(); UndoLimit = map._undoLimit; MapString = map._mapStringNonStatic.clone(); Players = map._playersNonStatic; Wall = map._wallNonStatic; Undo =0; BoxDest = map._initialBoxDest; // throw new NotImplementedException(); }",
        "label": "F"
    },
    "1328": {
        "dataset": "COMP 3021",
        "project": "ychenhq",
        "bug_id": "38",
        "T": "void testMapCopying() { final var maxWidth = 2333; final var maxHeight = 2333; final var random = new Random(); final var randomEntities = Stream.generate(() -> Position.of(random.nextInt(maxWidth), random.nextInt(maxHeight))) .distinct() .limit(100) .collect(Collectors.toMap(Function.identity(), it -> generateEntity(it.x()))); final var firstPos = randomEntities.keySet().stream().findFirst(); final var gameMap = new GameMap(maxWidth, maxHeight, Collections.singleton(firstPos.get()), 233); randomEntities.forEach(gameMap::putEntity); final var gameState = new GameState(gameMap); final var randomPosition = randomEntities.keySet().stream().findAny(); gameMap.putEntity(randomPosition.get(), new Empty()); randomEntities.forEach((p, e) -> assertEquals(e, gameState.getEntity(p))); }",
        "C": "public static @NotNull Position of(int x, int y) { return new Position(x, y); } public GameMap(int maxWidth, int maxHeight, Set<Position> destinations, int undoLimit) { // TODO _width = maxWidth; _height = maxHeight; _initialBoxDest = destinations; _undoLimit = undoLimit; _mapStringNonStatic = _mapString; _playersNonStatic = _players; _wallNonStatic = _wall; // throw new NotImplementedException(); } /** * Parses the map from a string representation. * The first line is undo limit. * Starting from the second line, the game map is represented as follows, * <li># represents a {@link Wall}</li> * <li>@ represents a box destination.</li> * <li>Any upper-case letter represents a {@link Player}.</li> * <li> * Any lower-case letter represents a {@link Box} that is only movable by the player with the corresponding upper-case letter. * For instance, box \"a\" can only be moved by player \"A\" and not movable by player \"B\". * </li> * <li>. represents an {@link Empty} position in the map, meaning there is no player or box currently at this position.</li> * <p> * Notes: * <li> * There can be at most 26 players. * All implementations of classes in the hk.ust.comp3021.game package should support up to 26 players. * </li> * <li> * For simplicity, we assume the given map is bounded with a closed boundary. * There is no need to check this point. * </li> * <li> * Example maps can be found in \"src/main/resources\". * </li> * * @param mapText The string representation. * @return The parsed GameMap object. * @throws IllegalArgumentException if undo limit is negative but not -1. * @throws IllegalArgumentException if there are multiple same upper-case letters, i.e., one player can only exist at one position. * @throws IllegalArgumentException if there are no players in the map. * @throws IllegalArgumentException if the number of boxes is not equal to the number of box destinations. * @throws IllegalArgumentException if there are boxes whose {@link Box#getPlayerId()} public GameState(@NotNull GameMap map) { // TODO // curPosition = map._initialBoxDest.get(map._initialBoxDest.size()-1); Height = map._height; Width = map._width; HistoryMovements = new ArrayList<>(); Players = new ArrayList<>(); BoxDest = new HashSet<>(); InitialMap = map._mapStringNonStatic.clone(); UndoLimit = map._undoLimit; MapString = map._mapStringNonStatic.clone(); Players = map._playersNonStatic; Wall = map._wallNonStatic; Undo =0; BoxDest = map._initialBoxDest; // throw new NotImplementedException(); } public void putEntity(Position position, Entity entity) { // TODO throw new NotImplementedException(); } public @Nullable Entity getEntity(@NotNull Position position) { // TODO int x = position.x(); int y = position.y()+1; if(x>= Width || y>= Height)return null; // System.out.print(_mapString[y].length()+'\\n'); char _char = MapString[y].charAt(x); // System.out.print(_char+\"\\n\"); if (_char>= 'A' && _char<='Z' ){ return new Player(_char -'A'); }else if(_char>='a' && _char <='z'){ return new Box(Character.toLowerCase(_char)-'A'); } else if(_char =='.' || _char =='@'){ return new Empty(); }else if(_char == '#'){ return new Wall(); } else return null; // throw new NotImplementedException(); } /** * Get all box destination positions as a set in the game map. * This should be the same as that in {@link GameMap}",
        "label": "F"
    },
    "1329": {
        "dataset": "COMP 3021",
        "project": "ychenhq",
        "bug_id": "39",
        "T": "void testUndoWhenThereIsMoveButNoCheckpoint() { final var gameState = new GameState(TestHelper.parseGameMap(\"\"\" 233 ###### #A.a@# #..a@# ###### \"\"\" )); gameState.move(Position.of(1, 1), Position.of(2, 1)); gameState.undo(); }",
        "C": "public GameState(@NotNull GameMap map) { // TODO // curPosition = map._initialBoxDest.get(map._initialBoxDest.size()-1); Height = map._height; Width = map._width; HistoryMovements = new ArrayList<>(); Players = new ArrayList<>(); BoxDest = new HashSet<>(); InitialMap = map._mapStringNonStatic.clone(); UndoLimit = map._undoLimit; MapString = map._mapStringNonStatic.clone(); Players = map._playersNonStatic; Wall = map._wallNonStatic; Undo =0; BoxDest = map._initialBoxDest; // throw new NotImplementedException(); } public void move(Position from, Position to) { // TODO int x_from = from.x(); int y_from = from.y()+1; int x_to = to.x(); int y_to = to.y()+1; char charFrom = MapString[y_from].charAt(x_from); char charTo = MapString[y_to].charAt(x_to); // _historyMovements.add(from); // _historyMovements.add(to); if(charFrom>='a' && charFrom<='z'){ LastStepMap = MapString.clone(); } if(charTo =='@') charTo = '.'; MapString[y_from] = MapString[y_from].substring(0,x_from)+charTo+ MapString[y_from].substring(x_from+1); MapString[y_to] = MapString[y_to].substring(0,x_to)+charFrom+ MapString[y_to].substring(x_to+1); // throw new NotImplementedException(); } /** * Record a checkpoint of the game state, including: * <li>All current positions of entities in the game map.</li> * <li>Current undo quota</li> * <p> * Checkpoint is used in {@link GameState#undo()} public static @NotNull Position of(int x, int y) { return new Position(x, y); } public void undo() { // TODO if(HasCheckPoint){ // System.out.print(\"has check point\"); // System.out.print(\"_mapString\"+ _mapString[2].toString()); // System.out.print(\"_checkpointMap\"+ _checkpointMap[2].toString()); MapString = CheckpointMap.clone(); Undo++; HasCheckPoint = false; }else{ MapString = InitialMap; Undo =0; } // throw new NotImplementedException(); } /** * Get the maximum width of the game map. * This should be the same as that in {@link GameMap}",
        "label": "P"
    },
    "1330": {
        "dataset": "COMP 3021",
        "project": "ychenhq",
        "bug_id": "40",
        "T": "void testGameExit() { final var gameState = mock(GameState.class); final var inputEngine = mock(TerminalInputEngine.class); final var renderingEngine = mock(TerminalRenderingEngine.class); when(gameState.isWin()).thenReturn(false, false, false); when(inputEngine.fetchAction()) .thenReturn(new InvalidInput(0, \"\"), new InvalidInput(0, \"\"), new Exit(0)); final var game = new TerminalSokobanGame(gameState, inputEngine, renderingEngine); game.run(); verify(renderingEngine, atLeastOnce()).message(any()); }",
        "C": "public InvalidInput(int initiator, @NotNull String message) { super(initiator); this.message = message; } public Exit(int initiator) { super(initiator); } public TerminalSokobanGame(GameState gameState, TerminalInputEngine inputEngine, TerminalRenderingEngine renderingEngine) { super(gameState); this.inputEngine = inputEngine; this.renderingEngine = renderingEngine; // TODO // Check the number of players if(gameState.getAllPlayerPositions().size()>2) throw new IllegalArgumentException(); // throw new NotImplementedException(); } public void run() { // TODO while(!shouldStop()){ var result = processAction(this.inputEngine.fetchAction()); if(result.getClass() == ActionResult.Failed.class){ renderingEngine.render(this.state); renderingEngine.message(INVALID_INPUT_MESSAGE); }else { renderingEngine.render(this.state); } } // throw new NotImplementedException(); }",
        "label": "F"
    },
    "1331": {
        "dataset": "COMP 3021",
        "project": "ychenhq",
        "bug_id": "41",
        "T": "void testGameWin() { final var gameState = mock(GameState.class); final var inputEngine = mock(TerminalInputEngine.class); final var renderingEngine = mock(TerminalRenderingEngine.class); when(gameState.isWin()).thenReturn(false, false, false, true); when(inputEngine.fetchAction()) .thenReturn(new InvalidInput(0, \"\")); final var game = new TerminalSokobanGame(gameState, inputEngine, renderingEngine); game.run(); verify(gameState, atLeastOnce()).isWin(); verify(renderingEngine, atLeastOnce()).message(any()); }",
        "C": "public InvalidInput(int initiator, @NotNull String message) { super(initiator); this.message = message; } public TerminalSokobanGame(GameState gameState, TerminalInputEngine inputEngine, TerminalRenderingEngine renderingEngine) { super(gameState); this.inputEngine = inputEngine; this.renderingEngine = renderingEngine; // TODO // Check the number of players if(gameState.getAllPlayerPositions().size()>2) throw new IllegalArgumentException(); // throw new NotImplementedException(); } public void run() { // TODO while(!shouldStop()){ var result = processAction(this.inputEngine.fetchAction()); if(result.getClass() == ActionResult.Failed.class){ renderingEngine.render(this.state); renderingEngine.message(INVALID_INPUT_MESSAGE); }else { renderingEngine.render(this.state); } } // throw new NotImplementedException(); }",
        "label": "P"
    },
    "1332": {
        "dataset": "COMP 3021",
        "project": "ychenhq",
        "bug_id": "42",
        "T": "void testMoreThanTwoPlayers() { final var gameState = mock(GameState.class); final var inputEngine = mock(TerminalInputEngine.class); final var renderingEngine = mock(TerminalRenderingEngine.class); when(gameState.getAllPlayerPositions()).thenReturn(new HashSet<>(Arrays.asList(Position.of(1, 1), Position.of(1, 2), Position.of(1, 3)))); }",
        "C": "public static @NotNull Position of(int x, int y) { return new Position(x, y); }",
        "label": "P"
    },
    "1333": {
        "dataset": "COMP 3021",
        "project": "jhwangae",
        "bug_id": "0",
        "T": "void moveUp() { Position.of(233, 232), new Move.Up(-1).nextPosition(pos) ); }",
        "C": "public static @NotNull Position of(int x, int y) { return new Position(x, y); } public Up(int initiator) { super(initiator); }",
        "label": "P"
    },
    "1334": {
        "dataset": "COMP 3021",
        "project": "jhwangae",
        "bug_id": "1",
        "T": "void moveDown() { Position.of(233, 234), new Move.Down(-1).nextPosition(pos) ); }",
        "C": "public static @NotNull Position of(int x, int y) { return new Position(x, y); } public Down(int initiator) { super(initiator); }",
        "label": "P"
    },
    "1335": {
        "dataset": "COMP 3021",
        "project": "jhwangae",
        "bug_id": "2",
        "T": "void moveRight() { Position.of(234, 233), new Move.Right(-1).nextPosition(pos) ); }",
        "C": "public static @NotNull Position of(int x, int y) { return new Position(x, y); } public Right(int initiator) { super(initiator); }",
        "label": "P"
    },
    "1336": {
        "dataset": "COMP 3021",
        "project": "jhwangae",
        "bug_id": "3",
        "T": "void testExceedingUndoQuota() { final var gameState = mock(GameState.class); when(gameState.getPlayerPositionById(anyInt())).thenReturn(Position.of(0, 0)); when(gameState.getUndoQuota()).thenReturn(Optional.of(0)); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Undo(0)); }",
        "C": "public Undo(int initiator) { super(initiator); }",
        "label": "P"
    },
    "1337": {
        "dataset": "COMP 3021",
        "project": "jhwangae",
        "bug_id": "4",
        "T": "void testExit() { final var gameState = mock(GameState.class); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Exit(0)); }",
        "C": "public Exit(int initiator) { super(initiator); }",
        "label": "P"
    },
    "1338": {
        "dataset": "COMP 3021",
        "project": "jhwangae",
        "bug_id": "5",
        "T": "void testUndoUnlimited() { final var gameState = mock(GameState.class); when(gameState.getPlayerPositionById(anyInt())).thenReturn(Position.of(0, 0)); when(gameState.getUndoQuota()).thenReturn(Optional.empty()); final var game = new SokobanGameForTesting(gameState); for (int i = 0; i < 10000; i++) { final var result = game.feedActionForProcessing(new Undo(0)); } verify(gameState, times(10000)).undo(); }",
        "C": "public TerminalRenderingEngine(PrintStream outputSteam) { this.outputSteam = outputSteam; } public Undo(int initiator) { super(initiator); }",
        "label": "F"
    },
    "1339": {
        "dataset": "COMP 3021",
        "project": "jhwangae",
        "bug_id": "6",
        "T": "void testPushOtherPlayerBox() { String mapText = \"\"\" 233 ###### #AB.@# #b.a.# #@...# ###### \"\"\"; final var testMap = TestHelper.parseGameMap(mapText); final var gameState = spy(new GameState(testMap)); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Move.Down(0)); verify(gameState, never()).move(any(), any()); }",
        "C": "public GameState(@NotNull GameMap map) { // TODO this.undoQuota = map.getUndoLimit().get(); this.maxWidth = map.getMaxWidth(); this.maxHeight = map.getMaxHeight(); this.playerIDPos = map.playerIDPos; this.mapEntities = map.getMapEntities(); this.destinations = map.getDestinations(); this.map = map; this.emptySpace = map.emptySpace; this.numPlayer = map.numPlayer; this.checkpoint(); } public Down(int initiator) { super(initiator); }",
        "label": "P"
    },
    "1340": {
        "dataset": "COMP 3021",
        "project": "jhwangae",
        "bug_id": "7",
        "T": "void testMoveNonExistingPlayer() { String mapText = \"\"\" 233 ###### #A..@# #a...# ##...# ###### \"\"\"; final var testMap = TestHelper.parseGameMap(mapText); final var gameState = spy(new GameState(testMap)); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Move.Down(23)); }",
        "C": "public GameState(@NotNull GameMap map) { // TODO this.undoQuota = map.getUndoLimit().get(); this.maxWidth = map.getMaxWidth(); this.maxHeight = map.getMaxHeight(); this.playerIDPos = map.playerIDPos; this.mapEntities = map.getMapEntities(); this.destinations = map.getDestinations(); this.map = map; this.emptySpace = map.emptySpace; this.numPlayer = map.numPlayer; this.checkpoint(); } public Down(int initiator) { super(initiator); }",
        "label": "F"
    },
    "1341": {
        "dataset": "COMP 3021",
        "project": "jhwangae",
        "bug_id": "8",
        "T": "void testCheckpointWhenNeed() { final var gameState = spy(new GameState(TestHelper.parseGameMap(\"\"\" 233 ###### #.Aa@# #..a@# ###### \"\"\" ))); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Move.Right(0)); verify(gameState, times(1)).checkpoint(); }",
        "C": "public GameState(@NotNull GameMap map) { // TODO this.undoQuota = map.getUndoLimit().get(); this.maxWidth = map.getMaxWidth(); this.maxHeight = map.getMaxHeight(); this.playerIDPos = map.playerIDPos; this.mapEntities = map.getMapEntities(); this.destinations = map.getDestinations(); this.map = map; this.emptySpace = map.emptySpace; this.numPlayer = map.numPlayer; this.checkpoint(); } public Right(int initiator) { super(initiator); }",
        "label": "P"
    },
    "1342": {
        "dataset": "COMP 3021",
        "project": "jhwangae",
        "bug_id": "9",
        "T": "void testPushBoxAgainstWall() { String mapText = \"\"\" 233 ###### #A..@# #a...# ##...# ###### \"\"\"; final var testMap = TestHelper.parseGameMap(mapText); final var gameState = spy(new GameState(testMap)); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Move.Down(0)); verify(gameState, never()).move(any(), any()); }",
        "C": "public GameState(@NotNull GameMap map) { // TODO this.undoQuota = map.getUndoLimit().get(); this.maxWidth = map.getMaxWidth(); this.maxHeight = map.getMaxHeight(); this.playerIDPos = map.playerIDPos; this.mapEntities = map.getMapEntities(); this.destinations = map.getDestinations(); this.map = map; this.emptySpace = map.emptySpace; this.numPlayer = map.numPlayer; this.checkpoint(); } public Down(int initiator) { super(initiator); }",
        "label": "P"
    },
    "1343": {
        "dataset": "COMP 3021",
        "project": "jhwangae",
        "bug_id": "10",
        "T": "void testCheckpointWhenNotNeed() { final var gameState = spy(new GameState(TestHelper.parseGameMap(\"\"\" 233 ###### #A.a@# #..a@# ###### \"\"\" ))); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Move.Right(0)); verify(gameState, never()).checkpoint(); } private static class SokobanGameForTesting extends AbstractSokobanGame { protected SokobanGameForTesting(GameState gameState) { super(gameState); } @Override public void run() { } public ActionResult feedActionForProcessing(Action action) { return processAction(action); } }",
        "C": "public GameState(@NotNull GameMap map) { // TODO this.undoQuota = map.getUndoLimit().get(); this.maxWidth = map.getMaxWidth(); this.maxHeight = map.getMaxHeight(); this.playerIDPos = map.playerIDPos; this.mapEntities = map.getMapEntities(); this.destinations = map.getDestinations(); this.map = map; this.emptySpace = map.emptySpace; this.numPlayer = map.numPlayer; this.checkpoint(); } public Right(int initiator) { super(initiator); } public void run() { // TODO this.renderingEngine.message(\"Sokoban game is ready.\"); while (!this.state.isWin()) { this.renderingEngine.render(this.state); if(!state.getUndoQuota().isEmpty()) { this.renderingEngine.message(System.lineSeparator() + \"Undo Quota: \" + state.getUndoQuota().get() + System.lineSeparator() + \">>>\"); } else this.renderingEngine.message(\"Unlimited\"); ActionResult x = this.processAction(this.inputEngine.fetchAction()); if (x.getAction().getClass().getSimpleName().equals(\"Exit\")) { this.renderingEngine.render(this.state); this.renderingEngine.message(System.lineSeparator() + \"Game exits.\"); return; } } this.renderingEngine.render(this.state); this.renderingEngine.message(\"Game exits.\"); this.renderingEngine.message( \"You win.\"); } protected ActionResult processAction(@NotNull Action action) { // TODO ActionResult res; Boolean boxCheck = false; int iD = action.getInitiator(); //Undo if (action.getClass().getSimpleName().equals(\"Undo\")) { if (state.getUndoQuota().get() > 0) { state.undo(); res = new ActionResult.Success(action); return res; } else { res = new ActionResult.Failed(action, \"0 Undo Quota\"); System.out.print(\"You have run out of your undo quota.\" + System.lineSeparator()); return res; } } else if (action.getClass().getSimpleName().equals(\"Left\")) { Position from = state.getPlayerPositionById(iD); Position to = ((Move.Left) action).nextPosition(from); String nextEnt = state.getEntity(to).getClass().getSimpleName(); Position toNext = ((Move.Left) action).nextPosition(to); if (nextEnt.equals(\"Box\")) { String nextNextEnt = state.getEntity(toNext).getClass().getSimpleName(); if (((Box) state.getEntity(to)).getPlayerId() == iD && (nextNextEnt.equals(\"Empty\") || nextNextEnt.equals(\"Destination\"))) { state.move(to, toNext); boxCheck = true; } else { System.out.print(\"Failed to push the box.\" + System.lineSeparator()); res = new ActionResult.Failed(action, \"Not allowed by this player\"); return res; } } else if (nextEnt.equals(\"Player\")) { res = new ActionResult.Failed(action, \"Not allowed to player\"); return res; } else if (nextEnt.equals(\"Wall\")) { System.out.print(\"You hit a wall.\" + System.lineSeparator()); res = new ActionResult.Failed(action,\"Not allowed to player\"); return res; } state.move(from, to); if (boxCheck) { state.checkpoint(); } res = new ActionResult.Success(action); return res; } else if (action.getClass().getSimpleName().equals(\"Down\")) { Position from = state.getPlayerPositionById(iD); Position to = ((Move.Down) action).nextPosition(from); String nextEnt = state.getEntity(to).getClass().getSimpleName(); Position toNext = ((Move.Down) action).nextPosition(to); if (nextEnt.equals(\"Box\")) { String nextNextEnt = state.getEntity(toNext).getClass().getSimpleName(); if (((Box) state.getEntity(to)).getPlayerId() == iD && (nextNextEnt.equals(\"Empty\") || nextNextEnt.equals(\"Destination\"))) { state.move(to, toNext); boxCheck = true; } else { System.out.print(\"Failed to push the box.\" + System.lineSeparator()); res = new ActionResult.Failed(action, \"Not allowed by this player\"); return res; } } else if (nextEnt.equals(\"Player\")) { res = new ActionResult.Failed(action, \"Not allowed to player\"); return res; } else if (nextEnt.equals(\"Wall\")) { System.out.print(\"You hit a wall.\" + System.lineSeparator()); res = new ActionResult.Failed(action,\"Not allowed to player\"); return res; } state.move(from, to); if (boxCheck) { state.checkpoint(); } res = new ActionResult.Success(action); return res; } else if (action.getClass().getSimpleName().equals(\"Up\")) { Position from = state.getPlayerPositionById(iD); Position to = ((Move.Up) action).nextPosition(from); String nextEnt = state.getEntity(to).getClass().getSimpleName(); Position toNext = ((Move.Up) action).nextPosition(to); if (nextEnt.equals(\"Box\")) { String nextNextEnt = state.getEntity(toNext).getClass().getSimpleName(); if (((Box) state.getEntity(to)).getPlayerId() == iD && (nextNextEnt.equals(\"Empty\") || nextNextEnt.equals(\"Destination\"))) { state.move(to, toNext); boxCheck = true; } else { System.out.print(\"Failed to push the box.\" + System.lineSeparator()); res = new ActionResult.Failed(action, \"Not allowed by this player\"); return res; } } else if (nextEnt.equals(\"Player\")) { res = new ActionResult.Failed(action, \"Not allowed to player\"); return res; } else if (nextEnt.equals(\"Wall\")) { System.out.print(\"You hit a wall.\" + System.lineSeparator()); res = new ActionResult.Failed(action,\"Not allowed to player\"); return res; } state.move(from, to); if (boxCheck) { state.checkpoint(); } res = new ActionResult.Success(action); return res; } else if (action.getClass().getSimpleName().equals(\"Right\")) { Position from = state.getPlayerPositionById(iD); Position to = ((Move.Right) action).nextPosition(from); String nextEnt = state.getEntity(to).getClass().getSimpleName(); Position toNext = ((Move.Right) action).nextPosition(to); if (nextEnt.equals(\"Box\")) { String nextNextEnt = state.getEntity(toNext).getClass().getSimpleName(); if (((Box) state.getEntity(to)).getPlayerId() == iD && (nextNextEnt.equals(\"Empty\") || nextNextEnt.equals(\"Destination\"))) { state.move(to, toNext); boxCheck = true; } else { System.out.print(\"Failed to push the box.\" + System.lineSeparator()); res = new ActionResult.Failed(action, \"Not allowed by this player\"); return res; } } else if (nextEnt.equals(\"Player\")) { res = new ActionResult.Failed(action, \"Not allowed to player\"); return res; } else if (nextEnt.equals(\"Wall\")) { System.out.print(\"You hit a wall.\" + System.lineSeparator()); res = new ActionResult.Failed(action,\"Not allowed to player\"); return res; } state.move(from, to); if (boxCheck) { state.checkpoint(); } res = new ActionResult.Success(action); return res; } else if (action.getClass().getSimpleName().equals(\"Exit\")) { res = new ActionResult.Success(action); state.exitState = true; return res; } else { System.out.print(\"Invalid input\" + System.lineSeparator()); res = new ActionResult.Failed(action, \"Invalid input\"); return res; } }",
        "label": "P"
    },
    "1344": {
        "dataset": "COMP 3021",
        "project": "jhwangae",
        "bug_id": "11",
        "T": "void testHitAnotherPlayer() { String mapText = \"\"\" 233 ###### #A..@# #B...# #ab.@# ###### \"\"\"; final var testMap = TestHelper.parseGameMap(mapText); final var gameState = spy(new GameState(testMap)); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Move.Down(0)); verify(gameState, never()).move(any(), any()); }",
        "C": "public GameState(@NotNull GameMap map) { // TODO this.undoQuota = map.getUndoLimit().get(); this.maxWidth = map.getMaxWidth(); this.maxHeight = map.getMaxHeight(); this.playerIDPos = map.playerIDPos; this.mapEntities = map.getMapEntities(); this.destinations = map.getDestinations(); this.map = map; this.emptySpace = map.emptySpace; this.numPlayer = map.numPlayer; this.checkpoint(); } public Down(int initiator) { super(initiator); }",
        "label": "P"
    },
    "1345": {
        "dataset": "COMP 3021",
        "project": "jhwangae",
        "bug_id": "12",
        "T": "void testUndoWithinQuota() { final var gameState = mock(GameState.class); when(gameState.getPlayerPositionById(anyInt())).thenReturn(Position.of(0, 0)); when(gameState.getUndoQuota()).thenReturn(Optional.of(1)); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Undo(0)); verify(gameState, times(1)).undo(); }",
        "C": "public Undo(int initiator) { super(initiator); }",
        "label": "P"
    },
    "1346": {
        "dataset": "COMP 3021",
        "project": "jhwangae",
        "bug_id": "13",
        "T": "void testInvalidInput() { final var game = new SokobanGameForTesting(mock(GameState.class)); final var message = String.valueOf(new Random().nextLong()); final var action = new InvalidInput(-1, message); final var result = game.feedActionForProcessing(action); }",
        "C": "public InvalidInput(int initiator, @NotNull String message) { super(initiator); this.message = message; }",
        "label": "P"
    },
    "1347": {
        "dataset": "COMP 3021",
        "project": "jhwangae",
        "bug_id": "14",
        "T": "void testUndoLimitParsing() { final var gameMap = TestHelper.parseGameMap(rectangularMap); }",
        "C": "",
        "label": "P"
    },
    "1348": {
        "dataset": "COMP 3021",
        "project": "jhwangae",
        "bug_id": "15",
        "T": "void testWidthForNonRectangularMap() { final var gameMap = TestHelper.parseGameMap(nonRectangularMap); }",
        "C": "",
        "label": "P"
    },
    "1349": {
        "dataset": "COMP 3021",
        "project": "jhwangae",
        "bug_id": "16",
        "T": "void testTwoPlayersMap() { final var twoPlayersMap = \"\"\" 233 ###### #A..@# #..B@# #....# #.a..# #..b.# ###### \"\"\"; final var gameMap = TestHelper.parseGameMap(twoPlayersMap); final var playerIds = gameMap.getPlayerIds(); final var expectedIds = new HashSet<Integer>(); expectedIds.add(0); expectedIds.add(1); }",
        "C": "public Set<Integer> getPlayerIds() { // TODO return this.playerId; }",
        "label": "P"
    },
    "1350": {
        "dataset": "COMP 3021",
        "project": "jhwangae",
        "bug_id": "17",
        "T": "void testMapWithoutPlayer() { final var invalidMap = \"\"\" 233 ### #.# ### \"\"\"; } // @Tag(TestKind.HIDDEN) // @Test // void testUnmatchedPlayersAndBoxes() { // final var invalidMap = \"\"\" // 233 // ###### // #A..@# // #...@# // #a.b@# // #.a.@# // #..a.# // ###### // \"\"\"; // assertThrowsExactly(IllegalArgumentException.class, () -> TestHelper.parseGameMap(invalidMap)); // }",
        "C": "public TerminalRenderingEngine(PrintStream outputSteam) { this.outputSteam = outputSteam; }",
        "label": "P"
    },
    "1351": {
        "dataset": "COMP 3021",
        "project": "jhwangae",
        "bug_id": "18",
        "T": "void testManyPlayersMap() { final var manyPlayersMap = \"\"\" 233 ###### #A.P@@# #vCB@@# #.cpD@# #Ga.d@# #g.bV@# ###### \"\"\"; final var gameMap = TestHelper.parseGameMap(manyPlayersMap); final var playerIds = gameMap.getPlayerIds(); final var expectedIds = new HashSet<>(Arrays.asList( 0, 'P' - 'A', 'C' - 'A', 'B' - 'A', 'D' - 'A', 'G' - 'A', 'V' - 'A' )); }",
        "C": "public Set<Integer> getPlayerIds() { // TODO return this.playerId; }",
        "label": "P"
    },
    "1352": {
        "dataset": "COMP 3021",
        "project": "jhwangae",
        "bug_id": "19",
        "T": "void testHeightForNonRectangularMap() { final var gameMap = TestHelper.parseGameMap(nonRectangularMap); }",
        "C": "",
        "label": "P"
    },
    "1353": {
        "dataset": "COMP 3021",
        "project": "jhwangae",
        "bug_id": "20",
        "T": "void testDuplicatedPlayers() { final var invalidMap = \"\"\" 233 ###### #A..@# #..A@# #....# #.a..# #..b.# ###### \"\"\"; }",
        "C": "",
        "label": "P"
    },
    "1354": {
        "dataset": "COMP 3021",
        "project": "jhwangae",
        "bug_id": "21",
        "T": "void testParseMapWithoutUndoLimit() { final var invalidMap = String.join(\"\\n\", rectangularMap.lines().skip(1).toList()); }",
        "C": "",
        "label": "P"
    },
    "1355": {
        "dataset": "COMP 3021",
        "project": "jhwangae",
        "bug_id": "22",
        "T": "void testInsufficientDestinations() { final var invalidMap = \"\"\" 233 ###### #A..@# #...@# #a...# #.a..# #..a.# ###### \"\"\"; }",
        "C": "",
        "label": "P"
    },
    "1356": {
        "dataset": "COMP 3021",
        "project": "jhwangae",
        "bug_id": "23",
        "T": "void testSuperLargeMap() { try { new GameMap(Integer.MAX_VALUE, Integer.MAX_VALUE, Collections.emptySet(), 0); } catch (OutOfMemoryError e) { throw new RuntimeException(e); } }); }",
        "C": "public GameMap(int maxWidth, int maxHeight, Set<Position> destinations, int undoLimit) { // TODO this.maxWidth = maxWidth; this.maxHeight = maxHeight; this.destinations = destinations; this.undoLimit = undoLimit; } /** * Parses the map from a string representation. * The first line is undo limit. * Starting from the second line, the game map is represented as follows, * <li># represents a {@link Wall}</li> * <li>@ represents a box destination.</li> * <li>Any upper-case letter represents a {@link Player}.</li> * <li> * Any lower-case letter represents a {@link Box} that is only movable by the player with the corresponding upper-case letter. * For instance, box \"a\" can only be moved by player \"A\" and not movable by player \"B\". * </li> * <li>. represents an {@link Empty} position in the map, meaning there is no player or box currently at this position.</li> * <p> * Notes: * <li> * There can be at most 26 players. * All implementations of classes in the hk.ust.comp3021.game package should support up to 26 players. * </li> * <li> * For simplicity, we assume the given map is bounded with a closed boundary. * There is no need to check this point. * </li> * <li> * Example maps can be found in \"src/main/resources\". * </li> * * @param mapText The string representation. * @return The parsed GameMap object. * @throws IllegalArgumentException if undo limit is negative but not -1. * @throws IllegalArgumentException if there are multiple same upper-case letters, i.e., one player can only exist at one position. * @throws IllegalArgumentException if there are no players in the map. * @throws IllegalArgumentException if the number of boxes is not equal to the number of box destinations. * @throws IllegalArgumentException if there are boxes whose {@link Box#getPlayerId()} public TerminalRenderingEngine(PrintStream outputSteam) { this.outputSteam = outputSteam; }",
        "label": "P"
    },
    "1357": {
        "dataset": "COMP 3021",
        "project": "jhwangae",
        "bug_id": "24",
        "T": "void testInvalidUndoLimit() { final var invalidMap = \"\"\" -233 ###### #A..@# #...@# #a.b@# #.a.@# #..a.# ###### \"\"\"; }",
        "C": "",
        "label": "P"
    },
    "1358": {
        "dataset": "COMP 3021",
        "project": "jhwangae",
        "bug_id": "25",
        "T": "void testEmptyMap() { final var invalidMap = \"\"; }",
        "C": "",
        "label": "P"
    },
    "1359": {
        "dataset": "COMP 3021",
        "project": "jhwangae",
        "bug_id": "26",
        "T": "void testMove(String input, String name, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); } private InputStream fixValueStream(String content) { final var bytes = content.getBytes(StandardCharsets.UTF_8); return new ByteArrayInputStream(bytes); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine(); if (inputLine.equals(\"\")) { InvalidInput a = new InvalidInput(0, \"Invalid input\"); return a; } char inputChar = inputLine.charAt(0); // TODO if (inputChar == 'u' || inputChar == 'U') { Undo a = new Undo(0); return a; } else if (inputChar == 'w' || inputChar == 'W') { Move.Up a = new Move.Up(0); return a; } else if (inputChar == 'a' || inputChar == 'A') { Move.Left a = new Move.Left(0); return a; } else if (inputChar == 's' || inputChar == 'S') { Move.Down a = new Move.Down(0); return a; } else if (inputChar == 'd' || inputChar == 'D') { Move.Right a = new Move.Right(0); return a; } else if (inputChar == 'k' || inputChar == 'K') { Move.Up a = new Move.Up(1); return a; } else if (inputChar == 'h' || inputChar == 'H') { Move.Left a = new Move.Left(1); return a; } else if (inputChar == 'j' || inputChar == 'J') { Move.Down a = new Move.Down(1); return a; } else if (inputChar == 'l' || inputChar == 'L') { Move.Right a = new Move.Right(1); return a; } else if (inputLine.equalsIgnoreCase(\"exit\")) { Exit a = new Exit(0); return a; } else { InvalidInput a = new InvalidInput(0, \"Invalid input\"); return a; } }",
        "label": "P"
    },
    "1360": {
        "dataset": "COMP 3021",
        "project": "jhwangae",
        "bug_id": "27",
        "T": "void testMove(String input, String name, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); } private InputStream fixValueStream(String content) { final var bytes = content.getBytes(StandardCharsets.UTF_8); return new ByteArrayInputStream(bytes); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine(); if (inputLine.equals(\"\")) { InvalidInput a = new InvalidInput(0, \"Invalid input\"); return a; } char inputChar = inputLine.charAt(0); // TODO if (inputChar == 'u' || inputChar == 'U') { Undo a = new Undo(0); return a; } else if (inputChar == 'w' || inputChar == 'W') { Move.Up a = new Move.Up(0); return a; } else if (inputChar == 'a' || inputChar == 'A') { Move.Left a = new Move.Left(0); return a; } else if (inputChar == 's' || inputChar == 'S') { Move.Down a = new Move.Down(0); return a; } else if (inputChar == 'd' || inputChar == 'D') { Move.Right a = new Move.Right(0); return a; } else if (inputChar == 'k' || inputChar == 'K') { Move.Up a = new Move.Up(1); return a; } else if (inputChar == 'h' || inputChar == 'H') { Move.Left a = new Move.Left(1); return a; } else if (inputChar == 'j' || inputChar == 'J') { Move.Down a = new Move.Down(1); return a; } else if (inputChar == 'l' || inputChar == 'L') { Move.Right a = new Move.Right(1); return a; } else if (inputLine.equalsIgnoreCase(\"exit\")) { Exit a = new Exit(0); return a; } else { InvalidInput a = new InvalidInput(0, \"Invalid input\"); return a; } }",
        "label": "P"
    },
    "1361": {
        "dataset": "COMP 3021",
        "project": "jhwangae",
        "bug_id": "28",
        "T": "void testMove(String input, String name, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); } private InputStream fixValueStream(String content) { final var bytes = content.getBytes(StandardCharsets.UTF_8); return new ByteArrayInputStream(bytes); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine(); if (inputLine.equals(\"\")) { InvalidInput a = new InvalidInput(0, \"Invalid input\"); return a; } char inputChar = inputLine.charAt(0); // TODO if (inputChar == 'u' || inputChar == 'U') { Undo a = new Undo(0); return a; } else if (inputChar == 'w' || inputChar == 'W') { Move.Up a = new Move.Up(0); return a; } else if (inputChar == 'a' || inputChar == 'A') { Move.Left a = new Move.Left(0); return a; } else if (inputChar == 's' || inputChar == 'S') { Move.Down a = new Move.Down(0); return a; } else if (inputChar == 'd' || inputChar == 'D') { Move.Right a = new Move.Right(0); return a; } else if (inputChar == 'k' || inputChar == 'K') { Move.Up a = new Move.Up(1); return a; } else if (inputChar == 'h' || inputChar == 'H') { Move.Left a = new Move.Left(1); return a; } else if (inputChar == 'j' || inputChar == 'J') { Move.Down a = new Move.Down(1); return a; } else if (inputChar == 'l' || inputChar == 'L') { Move.Right a = new Move.Right(1); return a; } else if (inputLine.equalsIgnoreCase(\"exit\")) { Exit a = new Exit(0); return a; } else { InvalidInput a = new InvalidInput(0, \"Invalid input\"); return a; } }",
        "label": "P"
    },
    "1362": {
        "dataset": "COMP 3021",
        "project": "jhwangae",
        "bug_id": "29",
        "T": "void testMove(String input, String name, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); } private InputStream fixValueStream(String content) { final var bytes = content.getBytes(StandardCharsets.UTF_8); return new ByteArrayInputStream(bytes); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine(); if (inputLine.equals(\"\")) { InvalidInput a = new InvalidInput(0, \"Invalid input\"); return a; } char inputChar = inputLine.charAt(0); // TODO if (inputChar == 'u' || inputChar == 'U') { Undo a = new Undo(0); return a; } else if (inputChar == 'w' || inputChar == 'W') { Move.Up a = new Move.Up(0); return a; } else if (inputChar == 'a' || inputChar == 'A') { Move.Left a = new Move.Left(0); return a; } else if (inputChar == 's' || inputChar == 'S') { Move.Down a = new Move.Down(0); return a; } else if (inputChar == 'd' || inputChar == 'D') { Move.Right a = new Move.Right(0); return a; } else if (inputChar == 'k' || inputChar == 'K') { Move.Up a = new Move.Up(1); return a; } else if (inputChar == 'h' || inputChar == 'H') { Move.Left a = new Move.Left(1); return a; } else if (inputChar == 'j' || inputChar == 'J') { Move.Down a = new Move.Down(1); return a; } else if (inputChar == 'l' || inputChar == 'L') { Move.Right a = new Move.Right(1); return a; } else if (inputLine.equalsIgnoreCase(\"exit\")) { Exit a = new Exit(0); return a; } else { InvalidInput a = new InvalidInput(0, \"Invalid input\"); return a; } }",
        "label": "P"
    },
    "1363": {
        "dataset": "COMP 3021",
        "project": "jhwangae",
        "bug_id": "30",
        "T": "void testMove(String input, String name, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); } private InputStream fixValueStream(String content) { final var bytes = content.getBytes(StandardCharsets.UTF_8); return new ByteArrayInputStream(bytes); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine(); if (inputLine.equals(\"\")) { InvalidInput a = new InvalidInput(0, \"Invalid input\"); return a; } char inputChar = inputLine.charAt(0); // TODO if (inputChar == 'u' || inputChar == 'U') { Undo a = new Undo(0); return a; } else if (inputChar == 'w' || inputChar == 'W') { Move.Up a = new Move.Up(0); return a; } else if (inputChar == 'a' || inputChar == 'A') { Move.Left a = new Move.Left(0); return a; } else if (inputChar == 's' || inputChar == 'S') { Move.Down a = new Move.Down(0); return a; } else if (inputChar == 'd' || inputChar == 'D') { Move.Right a = new Move.Right(0); return a; } else if (inputChar == 'k' || inputChar == 'K') { Move.Up a = new Move.Up(1); return a; } else if (inputChar == 'h' || inputChar == 'H') { Move.Left a = new Move.Left(1); return a; } else if (inputChar == 'j' || inputChar == 'J') { Move.Down a = new Move.Down(1); return a; } else if (inputChar == 'l' || inputChar == 'L') { Move.Right a = new Move.Right(1); return a; } else if (inputLine.equalsIgnoreCase(\"exit\")) { Exit a = new Exit(0); return a; } else { InvalidInput a = new InvalidInput(0, \"Invalid input\"); return a; } }",
        "label": "P"
    },
    "1364": {
        "dataset": "COMP 3021",
        "project": "jhwangae",
        "bug_id": "31",
        "T": "void testMove(String input, String name, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); } private InputStream fixValueStream(String content) { final var bytes = content.getBytes(StandardCharsets.UTF_8); return new ByteArrayInputStream(bytes); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine(); if (inputLine.equals(\"\")) { InvalidInput a = new InvalidInput(0, \"Invalid input\"); return a; } char inputChar = inputLine.charAt(0); // TODO if (inputChar == 'u' || inputChar == 'U') { Undo a = new Undo(0); return a; } else if (inputChar == 'w' || inputChar == 'W') { Move.Up a = new Move.Up(0); return a; } else if (inputChar == 'a' || inputChar == 'A') { Move.Left a = new Move.Left(0); return a; } else if (inputChar == 's' || inputChar == 'S') { Move.Down a = new Move.Down(0); return a; } else if (inputChar == 'd' || inputChar == 'D') { Move.Right a = new Move.Right(0); return a; } else if (inputChar == 'k' || inputChar == 'K') { Move.Up a = new Move.Up(1); return a; } else if (inputChar == 'h' || inputChar == 'H') { Move.Left a = new Move.Left(1); return a; } else if (inputChar == 'j' || inputChar == 'J') { Move.Down a = new Move.Down(1); return a; } else if (inputChar == 'l' || inputChar == 'L') { Move.Right a = new Move.Right(1); return a; } else if (inputLine.equalsIgnoreCase(\"exit\")) { Exit a = new Exit(0); return a; } else { InvalidInput a = new InvalidInput(0, \"Invalid input\"); return a; } }",
        "label": "P"
    },
    "1365": {
        "dataset": "COMP 3021",
        "project": "jhwangae",
        "bug_id": "32",
        "T": "void testMove(String input, String name, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); } private InputStream fixValueStream(String content) { final var bytes = content.getBytes(StandardCharsets.UTF_8); return new ByteArrayInputStream(bytes); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine(); if (inputLine.equals(\"\")) { InvalidInput a = new InvalidInput(0, \"Invalid input\"); return a; } char inputChar = inputLine.charAt(0); // TODO if (inputChar == 'u' || inputChar == 'U') { Undo a = new Undo(0); return a; } else if (inputChar == 'w' || inputChar == 'W') { Move.Up a = new Move.Up(0); return a; } else if (inputChar == 'a' || inputChar == 'A') { Move.Left a = new Move.Left(0); return a; } else if (inputChar == 's' || inputChar == 'S') { Move.Down a = new Move.Down(0); return a; } else if (inputChar == 'd' || inputChar == 'D') { Move.Right a = new Move.Right(0); return a; } else if (inputChar == 'k' || inputChar == 'K') { Move.Up a = new Move.Up(1); return a; } else if (inputChar == 'h' || inputChar == 'H') { Move.Left a = new Move.Left(1); return a; } else if (inputChar == 'j' || inputChar == 'J') { Move.Down a = new Move.Down(1); return a; } else if (inputChar == 'l' || inputChar == 'L') { Move.Right a = new Move.Right(1); return a; } else if (inputLine.equalsIgnoreCase(\"exit\")) { Exit a = new Exit(0); return a; } else { InvalidInput a = new InvalidInput(0, \"Invalid input\"); return a; } }",
        "label": "P"
    },
    "1366": {
        "dataset": "COMP 3021",
        "project": "jhwangae",
        "bug_id": "33",
        "T": "void testMove(String input, String name, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); } private InputStream fixValueStream(String content) { final var bytes = content.getBytes(StandardCharsets.UTF_8); return new ByteArrayInputStream(bytes); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine(); if (inputLine.equals(\"\")) { InvalidInput a = new InvalidInput(0, \"Invalid input\"); return a; } char inputChar = inputLine.charAt(0); // TODO if (inputChar == 'u' || inputChar == 'U') { Undo a = new Undo(0); return a; } else if (inputChar == 'w' || inputChar == 'W') { Move.Up a = new Move.Up(0); return a; } else if (inputChar == 'a' || inputChar == 'A') { Move.Left a = new Move.Left(0); return a; } else if (inputChar == 's' || inputChar == 'S') { Move.Down a = new Move.Down(0); return a; } else if (inputChar == 'd' || inputChar == 'D') { Move.Right a = new Move.Right(0); return a; } else if (inputChar == 'k' || inputChar == 'K') { Move.Up a = new Move.Up(1); return a; } else if (inputChar == 'h' || inputChar == 'H') { Move.Left a = new Move.Left(1); return a; } else if (inputChar == 'j' || inputChar == 'J') { Move.Down a = new Move.Down(1); return a; } else if (inputChar == 'l' || inputChar == 'L') { Move.Right a = new Move.Right(1); return a; } else if (inputLine.equalsIgnoreCase(\"exit\")) { Exit a = new Exit(0); return a; } else { InvalidInput a = new InvalidInput(0, \"Invalid input\"); return a; } }",
        "label": "P"
    },
    "1367": {
        "dataset": "COMP 3021",
        "project": "jhwangae",
        "bug_id": "34",
        "T": "void testUndo(String input, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine(); if (inputLine.equals(\"\")) { InvalidInput a = new InvalidInput(0, \"Invalid input\"); return a; } char inputChar = inputLine.charAt(0); // TODO if (inputChar == 'u' || inputChar == 'U') { Undo a = new Undo(0); return a; } else if (inputChar == 'w' || inputChar == 'W') { Move.Up a = new Move.Up(0); return a; } else if (inputChar == 'a' || inputChar == 'A') { Move.Left a = new Move.Left(0); return a; } else if (inputChar == 's' || inputChar == 'S') { Move.Down a = new Move.Down(0); return a; } else if (inputChar == 'd' || inputChar == 'D') { Move.Right a = new Move.Right(0); return a; } else if (inputChar == 'k' || inputChar == 'K') { Move.Up a = new Move.Up(1); return a; } else if (inputChar == 'h' || inputChar == 'H') { Move.Left a = new Move.Left(1); return a; } else if (inputChar == 'j' || inputChar == 'J') { Move.Down a = new Move.Down(1); return a; } else if (inputChar == 'l' || inputChar == 'L') { Move.Right a = new Move.Right(1); return a; } else if (inputLine.equalsIgnoreCase(\"exit\")) { Exit a = new Exit(0); return a; } else { InvalidInput a = new InvalidInput(0, \"Invalid input\"); return a; } }",
        "label": "P"
    },
    "1368": {
        "dataset": "COMP 3021",
        "project": "jhwangae",
        "bug_id": "35",
        "T": "void testInvalidInput() { final var inputStream = fixValueStream(\"blah blah\"); final var inputEngine = new TerminalInputEngine(inputStream); final var action = inputEngine.fetchAction(); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine(); if (inputLine.equals(\"\")) { InvalidInput a = new InvalidInput(0, \"Invalid input\"); return a; } char inputChar = inputLine.charAt(0); // TODO if (inputChar == 'u' || inputChar == 'U') { Undo a = new Undo(0); return a; } else if (inputChar == 'w' || inputChar == 'W') { Move.Up a = new Move.Up(0); return a; } else if (inputChar == 'a' || inputChar == 'A') { Move.Left a = new Move.Left(0); return a; } else if (inputChar == 's' || inputChar == 'S') { Move.Down a = new Move.Down(0); return a; } else if (inputChar == 'd' || inputChar == 'D') { Move.Right a = new Move.Right(0); return a; } else if (inputChar == 'k' || inputChar == 'K') { Move.Up a = new Move.Up(1); return a; } else if (inputChar == 'h' || inputChar == 'H') { Move.Left a = new Move.Left(1); return a; } else if (inputChar == 'j' || inputChar == 'J') { Move.Down a = new Move.Down(1); return a; } else if (inputChar == 'l' || inputChar == 'L') { Move.Right a = new Move.Right(1); return a; } else if (inputLine.equalsIgnoreCase(\"exit\")) { Exit a = new Exit(0); return a; } else { InvalidInput a = new InvalidInput(0, \"Invalid input\"); return a; } }",
        "label": "P"
    },
    "1369": {
        "dataset": "COMP 3021",
        "project": "jhwangae",
        "bug_id": "36",
        "T": "void testUndoWhenThereIsNoMove() { final var gameState = new GameState(TestHelper.parseGameMap(\"\"\" 233 ###### #A.a@# #..a@# ###### \"\"\" )); gameState.undo(); } private Entity generateEntity(int key) { return switch (key % 4) { case 0 -> new Box(0); case 1 -> new Empty(); case 2 -> new Player(0); case 3 -> new Wall(); default -> throw new ShouldNotReachException(); }; }",
        "C": "public GameState(@NotNull GameMap map) { // TODO this.undoQuota = map.getUndoLimit().get(); this.maxWidth = map.getMaxWidth(); this.maxHeight = map.getMaxHeight(); this.playerIDPos = map.playerIDPos; this.mapEntities = map.getMapEntities(); this.destinations = map.getDestinations(); this.map = map; this.emptySpace = map.emptySpace; this.numPlayer = map.numPlayer; this.checkpoint(); } public void undo() { // TODO int undoIdx; if (undoStates.size() == 1) { undoIdx = 0; } else { undoIdx= undoStates.size() - 2; } ArrayList<PlayerIdPos> newIP = new ArrayList<PlayerIdPos>(); for (int i = 0; i < undoStates.get(undoIdx).getPlayerIDPos().size(); ++i) { PlayerIdPos temp = undoStates.get(undoIdx).getPlayerIDPos().get(i); var pIP = new PlayerIdPos(temp.getId(),temp.getP()); newIP.add(pIP); } this.playerIDPos = newIP; ArrayList<ArrayList<Entity>> newMapEntities = new ArrayList<ArrayList<Entity>>(); for (int i = 0; i < undoStates.get(undoIdx).getMapEntities().size(); ++i) { var x = new ArrayList<Entity>(); for (int j = 0; j < undoStates.get(undoIdx).getMapEntities().get(i).size(); ++j) { Entity y = undoStates.get(undoIdx).getMapEntities().get(i).get(j); x.add(y); } newMapEntities.add(x); } this.mapEntities = newMapEntities; if (undoStates.size() > 1) { undoStates.remove(undoStates.size() - 1); reduceUndoQuota(); } } /** * Get the maximum width of the game map. * This should be the same as that in {@link GameMap} public TerminalRenderingEngine(PrintStream outputSteam) { this.outputSteam = outputSteam; } public Box(int playerId) { this.playerId = playerId; } public Player(int id) { this.id = id; } public ShouldNotReachException() { super(\"This branch should not be reached.\"); }",
        "label": "P"
    },
    "1370": {
        "dataset": "COMP 3021",
        "project": "jhwangae",
        "bug_id": "37",
        "T": "void testGetUndoUnlimited() { final var gameState = new GameState(TestHelper.parseGameMap(\"\"\" -1 ###### #.Aa@# #..a@# ###### \"\"\" )); }",
        "C": "public GameState(@NotNull GameMap map) { // TODO this.undoQuota = map.getUndoLimit().get(); this.maxWidth = map.getMaxWidth(); this.maxHeight = map.getMaxHeight(); this.playerIDPos = map.playerIDPos; this.mapEntities = map.getMapEntities(); this.destinations = map.getDestinations(); this.map = map; this.emptySpace = map.emptySpace; this.numPlayer = map.numPlayer; this.checkpoint(); }",
        "label": "F"
    },
    "1371": {
        "dataset": "COMP 3021",
        "project": "jhwangae",
        "bug_id": "38",
        "T": "void testMapCopying() { final var maxWidth = 2333; final var maxHeight = 2333; final var random = new Random(); final var randomEntities = Stream.generate(() -> Position.of(random.nextInt(maxWidth), random.nextInt(maxHeight))) .distinct() .limit(100) .collect(Collectors.toMap(Function.identity(), it -> generateEntity(it.x()))); final var firstPos = randomEntities.keySet().stream().findFirst(); final var gameMap = new GameMap(maxWidth, maxHeight, Collections.singleton(firstPos.get()), 233); randomEntities.forEach(gameMap::putEntity); final var gameState = new GameState(gameMap); final var randomPosition = randomEntities.keySet().stream().findAny(); gameMap.putEntity(randomPosition.get(), new Empty()); randomEntities.forEach((p, e) -> assertEquals(e, gameState.getEntity(p))); }",
        "C": "public static @NotNull Position of(int x, int y) { return new Position(x, y); } public GameMap(int maxWidth, int maxHeight, Set<Position> destinations, int undoLimit) { // TODO this.maxWidth = maxWidth; this.maxHeight = maxHeight; this.destinations = destinations; this.undoLimit = undoLimit; } /** * Parses the map from a string representation. * The first line is undo limit. * Starting from the second line, the game map is represented as follows, * <li># represents a {@link Wall}</li> * <li>@ represents a box destination.</li> * <li>Any upper-case letter represents a {@link Player}.</li> * <li> * Any lower-case letter represents a {@link Box} that is only movable by the player with the corresponding upper-case letter. * For instance, box \"a\" can only be moved by player \"A\" and not movable by player \"B\". * </li> * <li>. represents an {@link Empty} position in the map, meaning there is no player or box currently at this position.</li> * <p> * Notes: * <li> * There can be at most 26 players. * All implementations of classes in the hk.ust.comp3021.game package should support up to 26 players. * </li> * <li> * For simplicity, we assume the given map is bounded with a closed boundary. * There is no need to check this point. * </li> * <li> * Example maps can be found in \"src/main/resources\". * </li> * * @param mapText The string representation. * @return The parsed GameMap object. * @throws IllegalArgumentException if undo limit is negative but not -1. * @throws IllegalArgumentException if there are multiple same upper-case letters, i.e., one player can only exist at one position. * @throws IllegalArgumentException if there are no players in the map. * @throws IllegalArgumentException if the number of boxes is not equal to the number of box destinations. * @throws IllegalArgumentException if there are boxes whose {@link Box#getPlayerId()} public GameState(@NotNull GameMap map) { // TODO this.undoQuota = map.getUndoLimit().get(); this.maxWidth = map.getMaxWidth(); this.maxHeight = map.getMaxHeight(); this.playerIDPos = map.playerIDPos; this.mapEntities = map.getMapEntities(); this.destinations = map.getDestinations(); this.map = map; this.emptySpace = map.emptySpace; this.numPlayer = map.numPlayer; this.checkpoint(); } public void putEntity(Position position, Entity entity) { // TODO mapEntities.get(position.y()).remove(position.x()); mapEntities.get(position.y()).add(position.x(), entity); } public @Nullable Entity getEntity(@NotNull Position position) { // TODO if (position.x() >= mapEntities.get(position.y()).size()) { return null; } return mapEntities.get(position.y()).get(position.x()); } /** * Get all box destination positions as a set in the game map. * This should be the same as that in {@link GameMap}",
        "label": "F"
    },
    "1372": {
        "dataset": "COMP 3021",
        "project": "jhwangae",
        "bug_id": "39",
        "T": "void testUndoWhenThereIsMoveButNoCheckpoint() { final var gameState = new GameState(TestHelper.parseGameMap(\"\"\" 233 ###### #A.a@# #..a@# ###### \"\"\" )); gameState.move(Position.of(1, 1), Position.of(2, 1)); gameState.undo(); }",
        "C": "public GameState(@NotNull GameMap map) { // TODO this.undoQuota = map.getUndoLimit().get(); this.maxWidth = map.getMaxWidth(); this.maxHeight = map.getMaxHeight(); this.playerIDPos = map.playerIDPos; this.mapEntities = map.getMapEntities(); this.destinations = map.getDestinations(); this.map = map; this.emptySpace = map.emptySpace; this.numPlayer = map.numPlayer; this.checkpoint(); } public void move(Position from, Position to) { // TODO putStateEntity(to,getStateEntity(from)); if (getStateEntity(from).getClass().getSimpleName().equals(\"Player\")) { int iD = ((Player)getStateEntity(from)).getId(); for (int i = 0; i < playerIDPos.size(); ++i) { if (iD == playerIDPos.get(i).getId()) { playerIDPos.get(i).changePos(to); } } } if (map.getDestinations().contains(from)) { putStateEntity(from, new Empty()); } else putStateEntity(from, new Empty()); } /** * Record a checkpoint of the game state, including: * <li>All current positions of entities in the game map.</li> * <li>Current undo quota</li> * <p> * Checkpoint is used in {@link GameState#undo()} public static @NotNull Position of(int x, int y) { return new Position(x, y); } public void undo() { // TODO int undoIdx; if (undoStates.size() == 1) { undoIdx = 0; } else { undoIdx= undoStates.size() - 2; } ArrayList<PlayerIdPos> newIP = new ArrayList<PlayerIdPos>(); for (int i = 0; i < undoStates.get(undoIdx).getPlayerIDPos().size(); ++i) { PlayerIdPos temp = undoStates.get(undoIdx).getPlayerIDPos().get(i); var pIP = new PlayerIdPos(temp.getId(),temp.getP()); newIP.add(pIP); } this.playerIDPos = newIP; ArrayList<ArrayList<Entity>> newMapEntities = new ArrayList<ArrayList<Entity>>(); for (int i = 0; i < undoStates.get(undoIdx).getMapEntities().size(); ++i) { var x = new ArrayList<Entity>(); for (int j = 0; j < undoStates.get(undoIdx).getMapEntities().get(i).size(); ++j) { Entity y = undoStates.get(undoIdx).getMapEntities().get(i).get(j); x.add(y); } newMapEntities.add(x); } this.mapEntities = newMapEntities; if (undoStates.size() > 1) { undoStates.remove(undoStates.size() - 1); reduceUndoQuota(); } } /** * Get the maximum width of the game map. * This should be the same as that in {@link GameMap}",
        "label": "P"
    },
    "1373": {
        "dataset": "COMP 3021",
        "project": "jhwangae",
        "bug_id": "40",
        "T": "void testGameExit() { final var gameState = mock(GameState.class); final var inputEngine = mock(TerminalInputEngine.class); final var renderingEngine = mock(TerminalRenderingEngine.class); when(gameState.isWin()).thenReturn(false, false, false); when(inputEngine.fetchAction()) .thenReturn(new InvalidInput(0, \"\"), new InvalidInput(0, \"\"), new Exit(0)); final var game = new TerminalSokobanGame(gameState, inputEngine, renderingEngine); game.run(); verify(renderingEngine, atLeastOnce()).message(any()); }",
        "C": "public InvalidInput(int initiator, @NotNull String message) { super(initiator); this.message = message; } public Exit(int initiator) { super(initiator); } public TerminalSokobanGame(GameState gameState, TerminalInputEngine inputEngine, TerminalRenderingEngine renderingEngine) { super(gameState); this.inputEngine = inputEngine; this.renderingEngine = renderingEngine; // TODO if (gameState.numPlayer > 2) { this.renderingEngine.message(\"This number of players are not supported\"); throw new IllegalArgumentException(); } } public void run() { // TODO this.renderingEngine.message(\"Sokoban game is ready.\"); while (!this.state.isWin()) { this.renderingEngine.render(this.state); if(!state.getUndoQuota().isEmpty()) { this.renderingEngine.message(System.lineSeparator() + \"Undo Quota: \" + state.getUndoQuota().get() + System.lineSeparator() + \">>>\"); } else this.renderingEngine.message(\"Unlimited\"); ActionResult x = this.processAction(this.inputEngine.fetchAction()); if (x.getAction().getClass().getSimpleName().equals(\"Exit\")) { this.renderingEngine.render(this.state); this.renderingEngine.message(System.lineSeparator() + \"Game exits.\"); return; } } this.renderingEngine.render(this.state); this.renderingEngine.message(\"Game exits.\"); this.renderingEngine.message( \"You win.\"); }",
        "label": "P"
    },
    "1374": {
        "dataset": "COMP 3021",
        "project": "jhwangae",
        "bug_id": "41",
        "T": "void testGameWin() { final var gameState = mock(GameState.class); final var inputEngine = mock(TerminalInputEngine.class); final var renderingEngine = mock(TerminalRenderingEngine.class); when(gameState.isWin()).thenReturn(false, false, false, true); when(inputEngine.fetchAction()) .thenReturn(new InvalidInput(0, \"\")); final var game = new TerminalSokobanGame(gameState, inputEngine, renderingEngine); game.run(); verify(gameState, atLeastOnce()).isWin(); verify(renderingEngine, atLeastOnce()).message(any()); }",
        "C": "public InvalidInput(int initiator, @NotNull String message) { super(initiator); this.message = message; } public TerminalSokobanGame(GameState gameState, TerminalInputEngine inputEngine, TerminalRenderingEngine renderingEngine) { super(gameState); this.inputEngine = inputEngine; this.renderingEngine = renderingEngine; // TODO if (gameState.numPlayer > 2) { this.renderingEngine.message(\"This number of players are not supported\"); throw new IllegalArgumentException(); } } public void run() { // TODO this.renderingEngine.message(\"Sokoban game is ready.\"); while (!this.state.isWin()) { this.renderingEngine.render(this.state); if(!state.getUndoQuota().isEmpty()) { this.renderingEngine.message(System.lineSeparator() + \"Undo Quota: \" + state.getUndoQuota().get() + System.lineSeparator() + \">>>\"); } else this.renderingEngine.message(\"Unlimited\"); ActionResult x = this.processAction(this.inputEngine.fetchAction()); if (x.getAction().getClass().getSimpleName().equals(\"Exit\")) { this.renderingEngine.render(this.state); this.renderingEngine.message(System.lineSeparator() + \"Game exits.\"); return; } } this.renderingEngine.render(this.state); this.renderingEngine.message(\"Game exits.\"); this.renderingEngine.message( \"You win.\"); }",
        "label": "P"
    },
    "1375": {
        "dataset": "COMP 3021",
        "project": "jhwangae",
        "bug_id": "42",
        "T": "void testMoreThanTwoPlayers() { final var gameState = mock(GameState.class); final var inputEngine = mock(TerminalInputEngine.class); final var renderingEngine = mock(TerminalRenderingEngine.class); when(gameState.getAllPlayerPositions()).thenReturn(new HashSet<>(Arrays.asList(Position.of(1, 1), Position.of(1, 2), Position.of(1, 3)))); }",
        "C": "public static @NotNull Position of(int x, int y) { return new Position(x, y); }",
        "label": "F"
    },
    "1376": {
        "dataset": "COMP 3021",
        "project": "cfjlu",
        "bug_id": "0",
        "T": "void moveUp() { Position.of(233, 232), new Move.Up(-1).nextPosition(pos) ); }",
        "C": "public static @NotNull Position of(int x, int y) { return new Position(x, y); } public Up(int initiator) { super(initiator); }",
        "label": "P"
    },
    "1377": {
        "dataset": "COMP 3021",
        "project": "cfjlu",
        "bug_id": "1",
        "T": "void moveDown() { Position.of(233, 234), new Move.Down(-1).nextPosition(pos) ); }",
        "C": "public static @NotNull Position of(int x, int y) { return new Position(x, y); } public Down(int initiator) { super(initiator); }",
        "label": "P"
    },
    "1378": {
        "dataset": "COMP 3021",
        "project": "cfjlu",
        "bug_id": "2",
        "T": "void moveRight() { Position.of(234, 233), new Move.Right(-1).nextPosition(pos) ); }",
        "C": "public static @NotNull Position of(int x, int y) { return new Position(x, y); } public Right(int initiator) { super(initiator); }",
        "label": "P"
    },
    "1379": {
        "dataset": "COMP 3021",
        "project": "cfjlu",
        "bug_id": "3",
        "T": "void testExceedingUndoQuota() { final var gameState = mock(GameState.class); when(gameState.getPlayerPositionById(anyInt())).thenReturn(Position.of(0, 0)); when(gameState.getUndoQuota()).thenReturn(Optional.of(0)); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Undo(0)); }",
        "C": "public Undo(int initiator) { super(initiator); }",
        "label": "P"
    },
    "1380": {
        "dataset": "COMP 3021",
        "project": "cfjlu",
        "bug_id": "4",
        "T": "void testExit() { final var gameState = mock(GameState.class); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Exit(0)); }",
        "C": "public Exit(int initiator) { super(initiator); }",
        "label": "F"
    },
    "1381": {
        "dataset": "COMP 3021",
        "project": "cfjlu",
        "bug_id": "5",
        "T": "void testUndoUnlimited() { final var gameState = mock(GameState.class); when(gameState.getPlayerPositionById(anyInt())).thenReturn(Position.of(0, 0)); when(gameState.getUndoQuota()).thenReturn(Optional.empty()); final var game = new SokobanGameForTesting(gameState); for (int i = 0; i < 10000; i++) { final var result = game.feedActionForProcessing(new Undo(0)); } verify(gameState, times(10000)).undo(); }",
        "C": "public TerminalRenderingEngine(PrintStream outputSteam) { this.outputSteam = outputSteam; } public Undo(int initiator) { super(initiator); }",
        "label": "F"
    },
    "1382": {
        "dataset": "COMP 3021",
        "project": "cfjlu",
        "bug_id": "6",
        "T": "void testPushOtherPlayerBox() { String mapText = \"\"\" 233 ###### #AB.@# #b.a.# #@...# ###### \"\"\"; final var testMap = TestHelper.parseGameMap(mapText); final var gameState = spy(new GameState(testMap)); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Move.Down(0)); verify(gameState, never()).move(any(), any()); }",
        "C": "public GameState(@NotNull GameMap map) { // TODO for( List<Character> sublist : map.Map) { CurrentMap.add(new ArrayList<>(sublist)); } undoQuota = map.getUndoLimit().get().intValue(); destination = new HashSet<>(map.getDestinations()); maxHeight = map.getMaxHeight(); maxWidth = map.getMaxWidth(); gameMap = map; playerId = new HashSet<>(map.getPlayerIds()); //sort the player location List<Location> tem_loc = new ArrayList<Location>( map.getPlayers_loc()); while (!tem_loc.isEmpty()){ int temp = tem_loc.get(0).playerid(); int x = 0; for(int j = 0; j < tem_loc.size(); j++){ if(tem_loc.get(j).playerid() < temp) temp = tem_loc.get(j).playerid(); x = j; } player_location.add(new Location(tem_loc.get(x).playerid(), new Position(tem_loc.get(x).pos().x(), tem_loc.get(x).pos().y()))); tem_loc.remove(x); } List<List<Character>> TMap = new ArrayList<>(); for( List<Character> sublist : CurrentMap) { TMap.add(new ArrayList<>(sublist)); } Checkpoints.add(new Checkpoint(TMap, undoQuota, new ArrayList<>(player_location))); } public Down(int initiator) { super(initiator); }",
        "label": "F"
    },
    "1383": {
        "dataset": "COMP 3021",
        "project": "cfjlu",
        "bug_id": "7",
        "T": "void testMoveNonExistingPlayer() { String mapText = \"\"\" 233 ###### #A..@# #a...# ##...# ###### \"\"\"; final var testMap = TestHelper.parseGameMap(mapText); final var gameState = spy(new GameState(testMap)); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Move.Down(23)); }",
        "C": "public GameState(@NotNull GameMap map) { // TODO for( List<Character> sublist : map.Map) { CurrentMap.add(new ArrayList<>(sublist)); } undoQuota = map.getUndoLimit().get().intValue(); destination = new HashSet<>(map.getDestinations()); maxHeight = map.getMaxHeight(); maxWidth = map.getMaxWidth(); gameMap = map; playerId = new HashSet<>(map.getPlayerIds()); //sort the player location List<Location> tem_loc = new ArrayList<Location>( map.getPlayers_loc()); while (!tem_loc.isEmpty()){ int temp = tem_loc.get(0).playerid(); int x = 0; for(int j = 0; j < tem_loc.size(); j++){ if(tem_loc.get(j).playerid() < temp) temp = tem_loc.get(j).playerid(); x = j; } player_location.add(new Location(tem_loc.get(x).playerid(), new Position(tem_loc.get(x).pos().x(), tem_loc.get(x).pos().y()))); tem_loc.remove(x); } List<List<Character>> TMap = new ArrayList<>(); for( List<Character> sublist : CurrentMap) { TMap.add(new ArrayList<>(sublist)); } Checkpoints.add(new Checkpoint(TMap, undoQuota, new ArrayList<>(player_location))); } public Down(int initiator) { super(initiator); }",
        "label": "F"
    },
    "1384": {
        "dataset": "COMP 3021",
        "project": "cfjlu",
        "bug_id": "8",
        "T": "void testCheckpointWhenNeed() { final var gameState = spy(new GameState(TestHelper.parseGameMap(\"\"\" 233 ###### #.Aa@# #..a@# ###### \"\"\" ))); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Move.Right(0)); verify(gameState, times(1)).checkpoint(); }",
        "C": "public GameState(@NotNull GameMap map) { // TODO for( List<Character> sublist : map.Map) { CurrentMap.add(new ArrayList<>(sublist)); } undoQuota = map.getUndoLimit().get().intValue(); destination = new HashSet<>(map.getDestinations()); maxHeight = map.getMaxHeight(); maxWidth = map.getMaxWidth(); gameMap = map; playerId = new HashSet<>(map.getPlayerIds()); //sort the player location List<Location> tem_loc = new ArrayList<Location>( map.getPlayers_loc()); while (!tem_loc.isEmpty()){ int temp = tem_loc.get(0).playerid(); int x = 0; for(int j = 0; j < tem_loc.size(); j++){ if(tem_loc.get(j).playerid() < temp) temp = tem_loc.get(j).playerid(); x = j; } player_location.add(new Location(tem_loc.get(x).playerid(), new Position(tem_loc.get(x).pos().x(), tem_loc.get(x).pos().y()))); tem_loc.remove(x); } List<List<Character>> TMap = new ArrayList<>(); for( List<Character> sublist : CurrentMap) { TMap.add(new ArrayList<>(sublist)); } Checkpoints.add(new Checkpoint(TMap, undoQuota, new ArrayList<>(player_location))); } public Right(int initiator) { super(initiator); }",
        "label": "P"
    },
    "1385": {
        "dataset": "COMP 3021",
        "project": "cfjlu",
        "bug_id": "9",
        "T": "void testPushBoxAgainstWall() { String mapText = \"\"\" 233 ###### #A..@# #a...# ##...# ###### \"\"\"; final var testMap = TestHelper.parseGameMap(mapText); final var gameState = spy(new GameState(testMap)); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Move.Down(0)); verify(gameState, never()).move(any(), any()); }",
        "C": "public GameState(@NotNull GameMap map) { // TODO for( List<Character> sublist : map.Map) { CurrentMap.add(new ArrayList<>(sublist)); } undoQuota = map.getUndoLimit().get().intValue(); destination = new HashSet<>(map.getDestinations()); maxHeight = map.getMaxHeight(); maxWidth = map.getMaxWidth(); gameMap = map; playerId = new HashSet<>(map.getPlayerIds()); //sort the player location List<Location> tem_loc = new ArrayList<Location>( map.getPlayers_loc()); while (!tem_loc.isEmpty()){ int temp = tem_loc.get(0).playerid(); int x = 0; for(int j = 0; j < tem_loc.size(); j++){ if(tem_loc.get(j).playerid() < temp) temp = tem_loc.get(j).playerid(); x = j; } player_location.add(new Location(tem_loc.get(x).playerid(), new Position(tem_loc.get(x).pos().x(), tem_loc.get(x).pos().y()))); tem_loc.remove(x); } List<List<Character>> TMap = new ArrayList<>(); for( List<Character> sublist : CurrentMap) { TMap.add(new ArrayList<>(sublist)); } Checkpoints.add(new Checkpoint(TMap, undoQuota, new ArrayList<>(player_location))); } public Down(int initiator) { super(initiator); }",
        "label": "P"
    },
    "1386": {
        "dataset": "COMP 3021",
        "project": "cfjlu",
        "bug_id": "10",
        "T": "void testCheckpointWhenNotNeed() { final var gameState = spy(new GameState(TestHelper.parseGameMap(\"\"\" 233 ###### #A.a@# #..a@# ###### \"\"\" ))); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Move.Right(0)); verify(gameState, never()).checkpoint(); } private static class SokobanGameForTesting extends AbstractSokobanGame { protected SokobanGameForTesting(GameState gameState) { super(gameState); } @Override public void run() { } public ActionResult feedActionForProcessing(Action action) { return processAction(action); } }",
        "C": "public GameState(@NotNull GameMap map) { // TODO for( List<Character> sublist : map.Map) { CurrentMap.add(new ArrayList<>(sublist)); } undoQuota = map.getUndoLimit().get().intValue(); destination = new HashSet<>(map.getDestinations()); maxHeight = map.getMaxHeight(); maxWidth = map.getMaxWidth(); gameMap = map; playerId = new HashSet<>(map.getPlayerIds()); //sort the player location List<Location> tem_loc = new ArrayList<Location>( map.getPlayers_loc()); while (!tem_loc.isEmpty()){ int temp = tem_loc.get(0).playerid(); int x = 0; for(int j = 0; j < tem_loc.size(); j++){ if(tem_loc.get(j).playerid() < temp) temp = tem_loc.get(j).playerid(); x = j; } player_location.add(new Location(tem_loc.get(x).playerid(), new Position(tem_loc.get(x).pos().x(), tem_loc.get(x).pos().y()))); tem_loc.remove(x); } List<List<Character>> TMap = new ArrayList<>(); for( List<Character> sublist : CurrentMap) { TMap.add(new ArrayList<>(sublist)); } Checkpoints.add(new Checkpoint(TMap, undoQuota, new ArrayList<>(player_location))); } public Right(int initiator) { super(initiator); } public void run() { // TODO while(!shouldStop()){ renderingEngine.render(state); Action act = inputEngine.fetchAction(); ActionResult result = processAction(act); if(result instanceof ActionResult.Failed) { System.out.println(((ActionResult.Failed) result).getReason()); } var undoQuota = state.getUndoQuota(); if (undoQuota.orElse(-2) > -1) { renderingEngine.message(\"Undo Quota: \" + undoQuota.orElse(-2)); } else if (undoQuota.isEmpty()) { renderingEngine.message(\"Undo Quota: unlimited\"); } } renderingEngine.render(state); if(state.isWin()) renderingEngine.message(\"you win\"); } protected ActionResult processAction(@NotNull Action action) { // TODO if(action instanceof InvalidInput) { return new ActionResult.Failed(action, ((InvalidInput)action).getMessage()); } else if(action instanceof Move) { boolean box_move = false; Position init_pos = state.getPlayerPositionById(((Move) action).getInitiator()); Position fin_pos = ((Move) action).nextPosition(init_pos); if (state.getEntity(fin_pos) instanceof Box) { if (state.getEntity(((Move) action).nextPosition(fin_pos)) instanceof Empty) { box_move = true; state.move(fin_pos, ((Move) action).nextPosition(fin_pos)); } else { return new ActionResult.Failed(action, \"invalid move\"); } } if (state.getEntity(fin_pos) instanceof Empty) { state.move(init_pos, fin_pos); } else { return new ActionResult.Failed(action, \"invalid move\"); } if(box_move) { state.checkpoint(); } return new ActionResult.Success(action); } else if (action instanceof Undo) { if(state.getUndoQuota() == null || state.getUndoQuota().orElse(-1) > 0){ state.undo(); }else{ return new ActionResult.Failed(action, \"no quota left\"); } } else if (action instanceof Exit) { should_exit = true; } return null; } }",
        "label": "P"
    },
    "1387": {
        "dataset": "COMP 3021",
        "project": "cfjlu",
        "bug_id": "11",
        "T": "void testHitAnotherPlayer() { String mapText = \"\"\" 233 ###### #A..@# #B...# #ab.@# ###### \"\"\"; final var testMap = TestHelper.parseGameMap(mapText); final var gameState = spy(new GameState(testMap)); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Move.Down(0)); verify(gameState, never()).move(any(), any()); }",
        "C": "public GameState(@NotNull GameMap map) { // TODO for( List<Character> sublist : map.Map) { CurrentMap.add(new ArrayList<>(sublist)); } undoQuota = map.getUndoLimit().get().intValue(); destination = new HashSet<>(map.getDestinations()); maxHeight = map.getMaxHeight(); maxWidth = map.getMaxWidth(); gameMap = map; playerId = new HashSet<>(map.getPlayerIds()); //sort the player location List<Location> tem_loc = new ArrayList<Location>( map.getPlayers_loc()); while (!tem_loc.isEmpty()){ int temp = tem_loc.get(0).playerid(); int x = 0; for(int j = 0; j < tem_loc.size(); j++){ if(tem_loc.get(j).playerid() < temp) temp = tem_loc.get(j).playerid(); x = j; } player_location.add(new Location(tem_loc.get(x).playerid(), new Position(tem_loc.get(x).pos().x(), tem_loc.get(x).pos().y()))); tem_loc.remove(x); } List<List<Character>> TMap = new ArrayList<>(); for( List<Character> sublist : CurrentMap) { TMap.add(new ArrayList<>(sublist)); } Checkpoints.add(new Checkpoint(TMap, undoQuota, new ArrayList<>(player_location))); } public Down(int initiator) { super(initiator); }",
        "label": "P"
    },
    "1388": {
        "dataset": "COMP 3021",
        "project": "cfjlu",
        "bug_id": "12",
        "T": "void testUndoWithinQuota() { final var gameState = mock(GameState.class); when(gameState.getPlayerPositionById(anyInt())).thenReturn(Position.of(0, 0)); when(gameState.getUndoQuota()).thenReturn(Optional.of(1)); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Undo(0)); verify(gameState, times(1)).undo(); }",
        "C": "public Undo(int initiator) { super(initiator); }",
        "label": "F"
    },
    "1389": {
        "dataset": "COMP 3021",
        "project": "cfjlu",
        "bug_id": "13",
        "T": "void testInvalidInput() { final var game = new SokobanGameForTesting(mock(GameState.class)); final var message = String.valueOf(new Random().nextLong()); final var action = new InvalidInput(-1, message); final var result = game.feedActionForProcessing(action); }",
        "C": "public InvalidInput(int initiator, @NotNull String message) { super(initiator); this.message = message; }",
        "label": "P"
    },
    "1390": {
        "dataset": "COMP 3021",
        "project": "cfjlu",
        "bug_id": "14",
        "T": "void testUndoLimitParsing() { final var gameMap = TestHelper.parseGameMap(rectangularMap); }",
        "C": "",
        "label": "P"
    },
    "1391": {
        "dataset": "COMP 3021",
        "project": "cfjlu",
        "bug_id": "15",
        "T": "void testWidthForNonRectangularMap() { final var gameMap = TestHelper.parseGameMap(nonRectangularMap); }",
        "C": "",
        "label": "P"
    },
    "1392": {
        "dataset": "COMP 3021",
        "project": "cfjlu",
        "bug_id": "16",
        "T": "void testTwoPlayersMap() { final var twoPlayersMap = \"\"\" 233 ###### #A..@# #..B@# #....# #.a..# #..b.# ###### \"\"\"; final var gameMap = TestHelper.parseGameMap(twoPlayersMap); final var playerIds = gameMap.getPlayerIds(); final var expectedIds = new HashSet<Integer>(); expectedIds.add(0); expectedIds.add(1); }",
        "C": "public Set<Integer> getPlayerIds() { // TODO putEntity(Position.of(0,0), new Wall()); return new HashSet<>(Players_id); }",
        "label": "P"
    },
    "1393": {
        "dataset": "COMP 3021",
        "project": "cfjlu",
        "bug_id": "17",
        "T": "void testMapWithoutPlayer() { final var invalidMap = \"\"\" 233 ### #.# ### \"\"\"; } // @Tag(TestKind.HIDDEN) // @Test // void testUnmatchedPlayersAndBoxes() { // final var invalidMap = \"\"\" // 233 // ###### // #A..@# // #...@# // #a.b@# // #.a.@# // #..a.# // ###### // \"\"\"; // assertThrowsExactly(IllegalArgumentException.class, () -> TestHelper.parseGameMap(invalidMap)); // }",
        "C": "public TerminalRenderingEngine(PrintStream outputSteam) { this.outputSteam = outputSteam; }",
        "label": "P"
    },
    "1394": {
        "dataset": "COMP 3021",
        "project": "cfjlu",
        "bug_id": "18",
        "T": "void testManyPlayersMap() { final var manyPlayersMap = \"\"\" 233 ###### #A.P@@# #vCB@@# #.cpD@# #Ga.d@# #g.bV@# ###### \"\"\"; final var gameMap = TestHelper.parseGameMap(manyPlayersMap); final var playerIds = gameMap.getPlayerIds(); final var expectedIds = new HashSet<>(Arrays.asList( 0, 'P' - 'A', 'C' - 'A', 'B' - 'A', 'D' - 'A', 'G' - 'A', 'V' - 'A' )); }",
        "C": "public Set<Integer> getPlayerIds() { // TODO putEntity(Position.of(0,0), new Wall()); return new HashSet<>(Players_id); }",
        "label": "P"
    },
    "1395": {
        "dataset": "COMP 3021",
        "project": "cfjlu",
        "bug_id": "19",
        "T": "void testHeightForNonRectangularMap() { final var gameMap = TestHelper.parseGameMap(nonRectangularMap); }",
        "C": "",
        "label": "P"
    },
    "1396": {
        "dataset": "COMP 3021",
        "project": "cfjlu",
        "bug_id": "20",
        "T": "void testDuplicatedPlayers() { final var invalidMap = \"\"\" 233 ###### #A..@# #..A@# #....# #.a..# #..b.# ###### \"\"\"; }",
        "C": "",
        "label": "P"
    },
    "1397": {
        "dataset": "COMP 3021",
        "project": "cfjlu",
        "bug_id": "21",
        "T": "void testParseMapWithoutUndoLimit() { final var invalidMap = String.join(\"\\n\", rectangularMap.lines().skip(1).toList()); }",
        "C": "",
        "label": "P"
    },
    "1398": {
        "dataset": "COMP 3021",
        "project": "cfjlu",
        "bug_id": "22",
        "T": "void testInsufficientDestinations() { final var invalidMap = \"\"\" 233 ###### #A..@# #...@# #a...# #.a..# #..a.# ###### \"\"\"; }",
        "C": "",
        "label": "P"
    },
    "1399": {
        "dataset": "COMP 3021",
        "project": "cfjlu",
        "bug_id": "23",
        "T": "void testSuperLargeMap() { try { new GameMap(Integer.MAX_VALUE, Integer.MAX_VALUE, Collections.emptySet(), 0); } catch (OutOfMemoryError e) { throw new RuntimeException(e); } }); }",
        "C": "public GameMap(int maxWidth, int maxHeight, Set<Position> destinations, int undoLimit) { // TODO this.maxHeight = maxHeight; this.maxWidth = maxWidth; this.undoLimit = undoLimit; this.destinations = new HashSet<Position>(destinations); for( List<Character> sublist : temp_Map) { this.Map.add(new ArrayList<>(sublist)); } this.Players_id = new HashSet<Integer>(temp_Players_id); this.Players_loc = new ArrayList<>(temp_Players_loc); } /** * Parses the map from a string representation. * The first line is undo limit. * Starting from the second line, the game map is represented as follows, * <li># represents a {@link Wall}</li> * <li>@ represents a box destination.</li> * <li>Any upper-case letter represents a {@link Player}.</li> * <li> * Any lower-case letter represents a {@link Box} that is only movable by the player with the corresponding upper-case letter. * For instance, box \"a\" can only be moved by player \"A\" and not movable by player \"B\". * </li> * <li>. represents an {@link Empty} position in the map, meaning there is no player or box currently at this position.</li> * <p> * Notes: * <li> * There can be at most 26 players. * All implementations of classes in the hk.ust.comp3021.game package should support up to 26 players. * </li> * <li> * For simplicity, we assume the given map is bounded with a closed boundary. * There is no need to check this point. * </li> * <li> * Example maps can be found in \"src/main/resources\". * </li> * * @param mapText The string representation. * @return The parsed GameMap object. * @throws IllegalArgumentException if undo limit is negative but not -1. * @throws IllegalArgumentException if there are multiple same upper-case letters, i.e., one player can only exist at one position. * @throws IllegalArgumentException if there are no players in the map. * @throws IllegalArgumentException if the number of boxes is not equal to the number of box destinations. * @throws IllegalArgumentException if there are boxes whose {@link Box#getPlayerId()} public TerminalRenderingEngine(PrintStream outputSteam) { this.outputSteam = outputSteam; }",
        "label": "P"
    },
    "1400": {
        "dataset": "COMP 3021",
        "project": "cfjlu",
        "bug_id": "24",
        "T": "void testInvalidUndoLimit() { final var invalidMap = \"\"\" -233 ###### #A..@# #...@# #a.b@# #.a.@# #..a.# ###### \"\"\"; }",
        "C": "",
        "label": "P"
    },
    "1401": {
        "dataset": "COMP 3021",
        "project": "cfjlu",
        "bug_id": "25",
        "T": "void testEmptyMap() { final var invalidMap = \"\"; }",
        "C": "",
        "label": "P"
    },
    "1402": {
        "dataset": "COMP 3021",
        "project": "cfjlu",
        "bug_id": "26",
        "T": "void testMove(String input, String name, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); } private InputStream fixValueStream(String content) { final var bytes = content.getBytes(StandardCharsets.UTF_8); return new ByteArrayInputStream(bytes); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine(); //TODO done if(inputLine.isEmpty()){ return new InvalidInput(0, \"empty input\"); } if(inputLine.matches(\"exit\")){ return new Exit(0); } switch(inputLine.toLowerCase().charAt(0)){ case 'w': // if(GameState.current_player % 2 == 0) return new Move.Up(0); // break; case 'a': // if(GameState.current_player % 2 == 0) return new Move.Left(0); // break; case 's': // if(GameState.current_player % 2 == 0) return new Move.Down(0); // break; case 'd': // if(GameState.current_player % 2 == 0) return new Move.Right(0); // break; case 'h': // if(GameState.current_player % 2 == 1) return new Move.Left(1); // break; case 'j': // if(GameState.current_player % 2 == 1) return new Move.Down(1); // break; case 'k': // if(GameState.current_player % 2 == 1) return new Move.Up(1); // break; case 'l': // if(GameState.current_player % 2 == 1) return new Move.Right(1); // break; case 'u': return new Undo(0); default: } return null; }",
        "label": "P"
    },
    "1403": {
        "dataset": "COMP 3021",
        "project": "cfjlu",
        "bug_id": "27",
        "T": "void testMove(String input, String name, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); } private InputStream fixValueStream(String content) { final var bytes = content.getBytes(StandardCharsets.UTF_8); return new ByteArrayInputStream(bytes); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine(); //TODO done if(inputLine.isEmpty()){ return new InvalidInput(0, \"empty input\"); } if(inputLine.matches(\"exit\")){ return new Exit(0); } switch(inputLine.toLowerCase().charAt(0)){ case 'w': // if(GameState.current_player % 2 == 0) return new Move.Up(0); // break; case 'a': // if(GameState.current_player % 2 == 0) return new Move.Left(0); // break; case 's': // if(GameState.current_player % 2 == 0) return new Move.Down(0); // break; case 'd': // if(GameState.current_player % 2 == 0) return new Move.Right(0); // break; case 'h': // if(GameState.current_player % 2 == 1) return new Move.Left(1); // break; case 'j': // if(GameState.current_player % 2 == 1) return new Move.Down(1); // break; case 'k': // if(GameState.current_player % 2 == 1) return new Move.Up(1); // break; case 'l': // if(GameState.current_player % 2 == 1) return new Move.Right(1); // break; case 'u': return new Undo(0); default: } return null; }",
        "label": "P"
    },
    "1404": {
        "dataset": "COMP 3021",
        "project": "cfjlu",
        "bug_id": "28",
        "T": "void testMove(String input, String name, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); } private InputStream fixValueStream(String content) { final var bytes = content.getBytes(StandardCharsets.UTF_8); return new ByteArrayInputStream(bytes); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine(); //TODO done if(inputLine.isEmpty()){ return new InvalidInput(0, \"empty input\"); } if(inputLine.matches(\"exit\")){ return new Exit(0); } switch(inputLine.toLowerCase().charAt(0)){ case 'w': // if(GameState.current_player % 2 == 0) return new Move.Up(0); // break; case 'a': // if(GameState.current_player % 2 == 0) return new Move.Left(0); // break; case 's': // if(GameState.current_player % 2 == 0) return new Move.Down(0); // break; case 'd': // if(GameState.current_player % 2 == 0) return new Move.Right(0); // break; case 'h': // if(GameState.current_player % 2 == 1) return new Move.Left(1); // break; case 'j': // if(GameState.current_player % 2 == 1) return new Move.Down(1); // break; case 'k': // if(GameState.current_player % 2 == 1) return new Move.Up(1); // break; case 'l': // if(GameState.current_player % 2 == 1) return new Move.Right(1); // break; case 'u': return new Undo(0); default: } return null; }",
        "label": "P"
    },
    "1405": {
        "dataset": "COMP 3021",
        "project": "cfjlu",
        "bug_id": "29",
        "T": "void testMove(String input, String name, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); } private InputStream fixValueStream(String content) { final var bytes = content.getBytes(StandardCharsets.UTF_8); return new ByteArrayInputStream(bytes); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine(); //TODO done if(inputLine.isEmpty()){ return new InvalidInput(0, \"empty input\"); } if(inputLine.matches(\"exit\")){ return new Exit(0); } switch(inputLine.toLowerCase().charAt(0)){ case 'w': // if(GameState.current_player % 2 == 0) return new Move.Up(0); // break; case 'a': // if(GameState.current_player % 2 == 0) return new Move.Left(0); // break; case 's': // if(GameState.current_player % 2 == 0) return new Move.Down(0); // break; case 'd': // if(GameState.current_player % 2 == 0) return new Move.Right(0); // break; case 'h': // if(GameState.current_player % 2 == 1) return new Move.Left(1); // break; case 'j': // if(GameState.current_player % 2 == 1) return new Move.Down(1); // break; case 'k': // if(GameState.current_player % 2 == 1) return new Move.Up(1); // break; case 'l': // if(GameState.current_player % 2 == 1) return new Move.Right(1); // break; case 'u': return new Undo(0); default: } return null; }",
        "label": "P"
    },
    "1406": {
        "dataset": "COMP 3021",
        "project": "cfjlu",
        "bug_id": "30",
        "T": "void testMove(String input, String name, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); } private InputStream fixValueStream(String content) { final var bytes = content.getBytes(StandardCharsets.UTF_8); return new ByteArrayInputStream(bytes); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine(); //TODO done if(inputLine.isEmpty()){ return new InvalidInput(0, \"empty input\"); } if(inputLine.matches(\"exit\")){ return new Exit(0); } switch(inputLine.toLowerCase().charAt(0)){ case 'w': // if(GameState.current_player % 2 == 0) return new Move.Up(0); // break; case 'a': // if(GameState.current_player % 2 == 0) return new Move.Left(0); // break; case 's': // if(GameState.current_player % 2 == 0) return new Move.Down(0); // break; case 'd': // if(GameState.current_player % 2 == 0) return new Move.Right(0); // break; case 'h': // if(GameState.current_player % 2 == 1) return new Move.Left(1); // break; case 'j': // if(GameState.current_player % 2 == 1) return new Move.Down(1); // break; case 'k': // if(GameState.current_player % 2 == 1) return new Move.Up(1); // break; case 'l': // if(GameState.current_player % 2 == 1) return new Move.Right(1); // break; case 'u': return new Undo(0); default: } return null; }",
        "label": "P"
    },
    "1407": {
        "dataset": "COMP 3021",
        "project": "cfjlu",
        "bug_id": "31",
        "T": "void testMove(String input, String name, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); } private InputStream fixValueStream(String content) { final var bytes = content.getBytes(StandardCharsets.UTF_8); return new ByteArrayInputStream(bytes); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine(); //TODO done if(inputLine.isEmpty()){ return new InvalidInput(0, \"empty input\"); } if(inputLine.matches(\"exit\")){ return new Exit(0); } switch(inputLine.toLowerCase().charAt(0)){ case 'w': // if(GameState.current_player % 2 == 0) return new Move.Up(0); // break; case 'a': // if(GameState.current_player % 2 == 0) return new Move.Left(0); // break; case 's': // if(GameState.current_player % 2 == 0) return new Move.Down(0); // break; case 'd': // if(GameState.current_player % 2 == 0) return new Move.Right(0); // break; case 'h': // if(GameState.current_player % 2 == 1) return new Move.Left(1); // break; case 'j': // if(GameState.current_player % 2 == 1) return new Move.Down(1); // break; case 'k': // if(GameState.current_player % 2 == 1) return new Move.Up(1); // break; case 'l': // if(GameState.current_player % 2 == 1) return new Move.Right(1); // break; case 'u': return new Undo(0); default: } return null; }",
        "label": "P"
    },
    "1408": {
        "dataset": "COMP 3021",
        "project": "cfjlu",
        "bug_id": "32",
        "T": "void testMove(String input, String name, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); } private InputStream fixValueStream(String content) { final var bytes = content.getBytes(StandardCharsets.UTF_8); return new ByteArrayInputStream(bytes); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine(); //TODO done if(inputLine.isEmpty()){ return new InvalidInput(0, \"empty input\"); } if(inputLine.matches(\"exit\")){ return new Exit(0); } switch(inputLine.toLowerCase().charAt(0)){ case 'w': // if(GameState.current_player % 2 == 0) return new Move.Up(0); // break; case 'a': // if(GameState.current_player % 2 == 0) return new Move.Left(0); // break; case 's': // if(GameState.current_player % 2 == 0) return new Move.Down(0); // break; case 'd': // if(GameState.current_player % 2 == 0) return new Move.Right(0); // break; case 'h': // if(GameState.current_player % 2 == 1) return new Move.Left(1); // break; case 'j': // if(GameState.current_player % 2 == 1) return new Move.Down(1); // break; case 'k': // if(GameState.current_player % 2 == 1) return new Move.Up(1); // break; case 'l': // if(GameState.current_player % 2 == 1) return new Move.Right(1); // break; case 'u': return new Undo(0); default: } return null; }",
        "label": "P"
    },
    "1409": {
        "dataset": "COMP 3021",
        "project": "cfjlu",
        "bug_id": "33",
        "T": "void testMove(String input, String name, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); } private InputStream fixValueStream(String content) { final var bytes = content.getBytes(StandardCharsets.UTF_8); return new ByteArrayInputStream(bytes); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine(); //TODO done if(inputLine.isEmpty()){ return new InvalidInput(0, \"empty input\"); } if(inputLine.matches(\"exit\")){ return new Exit(0); } switch(inputLine.toLowerCase().charAt(0)){ case 'w': // if(GameState.current_player % 2 == 0) return new Move.Up(0); // break; case 'a': // if(GameState.current_player % 2 == 0) return new Move.Left(0); // break; case 's': // if(GameState.current_player % 2 == 0) return new Move.Down(0); // break; case 'd': // if(GameState.current_player % 2 == 0) return new Move.Right(0); // break; case 'h': // if(GameState.current_player % 2 == 1) return new Move.Left(1); // break; case 'j': // if(GameState.current_player % 2 == 1) return new Move.Down(1); // break; case 'k': // if(GameState.current_player % 2 == 1) return new Move.Up(1); // break; case 'l': // if(GameState.current_player % 2 == 1) return new Move.Right(1); // break; case 'u': return new Undo(0); default: } return null; }",
        "label": "P"
    },
    "1410": {
        "dataset": "COMP 3021",
        "project": "cfjlu",
        "bug_id": "34",
        "T": "void testUndo(String input, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine(); //TODO done if(inputLine.isEmpty()){ return new InvalidInput(0, \"empty input\"); } if(inputLine.matches(\"exit\")){ return new Exit(0); } switch(inputLine.toLowerCase().charAt(0)){ case 'w': // if(GameState.current_player % 2 == 0) return new Move.Up(0); // break; case 'a': // if(GameState.current_player % 2 == 0) return new Move.Left(0); // break; case 's': // if(GameState.current_player % 2 == 0) return new Move.Down(0); // break; case 'd': // if(GameState.current_player % 2 == 0) return new Move.Right(0); // break; case 'h': // if(GameState.current_player % 2 == 1) return new Move.Left(1); // break; case 'j': // if(GameState.current_player % 2 == 1) return new Move.Down(1); // break; case 'k': // if(GameState.current_player % 2 == 1) return new Move.Up(1); // break; case 'l': // if(GameState.current_player % 2 == 1) return new Move.Right(1); // break; case 'u': return new Undo(0); default: } return null; }",
        "label": "P"
    },
    "1411": {
        "dataset": "COMP 3021",
        "project": "cfjlu",
        "bug_id": "35",
        "T": "void testInvalidInput() { final var inputStream = fixValueStream(\"blah blah\"); final var inputEngine = new TerminalInputEngine(inputStream); final var action = inputEngine.fetchAction(); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine(); //TODO done if(inputLine.isEmpty()){ return new InvalidInput(0, \"empty input\"); } if(inputLine.matches(\"exit\")){ return new Exit(0); } switch(inputLine.toLowerCase().charAt(0)){ case 'w': // if(GameState.current_player % 2 == 0) return new Move.Up(0); // break; case 'a': // if(GameState.current_player % 2 == 0) return new Move.Left(0); // break; case 's': // if(GameState.current_player % 2 == 0) return new Move.Down(0); // break; case 'd': // if(GameState.current_player % 2 == 0) return new Move.Right(0); // break; case 'h': // if(GameState.current_player % 2 == 1) return new Move.Left(1); // break; case 'j': // if(GameState.current_player % 2 == 1) return new Move.Down(1); // break; case 'k': // if(GameState.current_player % 2 == 1) return new Move.Up(1); // break; case 'l': // if(GameState.current_player % 2 == 1) return new Move.Right(1); // break; case 'u': return new Undo(0); default: } return null; }",
        "label": "F"
    },
    "1412": {
        "dataset": "COMP 3021",
        "project": "cfjlu",
        "bug_id": "36",
        "T": "void testUndoWhenThereIsNoMove() { final var gameState = new GameState(TestHelper.parseGameMap(\"\"\" 233 ###### #A.a@# #..a@# ###### \"\"\" )); gameState.undo(); } private Entity generateEntity(int key) { return switch (key % 4) { case 0 -> new Box(0); case 1 -> new Empty(); case 2 -> new Player(0); case 3 -> new Wall(); default -> throw new ShouldNotReachException(); }; }",
        "C": "public GameState(@NotNull GameMap map) { // TODO for( List<Character> sublist : map.Map) { CurrentMap.add(new ArrayList<>(sublist)); } undoQuota = map.getUndoLimit().get().intValue(); destination = new HashSet<>(map.getDestinations()); maxHeight = map.getMaxHeight(); maxWidth = map.getMaxWidth(); gameMap = map; playerId = new HashSet<>(map.getPlayerIds()); //sort the player location List<Location> tem_loc = new ArrayList<Location>( map.getPlayers_loc()); while (!tem_loc.isEmpty()){ int temp = tem_loc.get(0).playerid(); int x = 0; for(int j = 0; j < tem_loc.size(); j++){ if(tem_loc.get(j).playerid() < temp) temp = tem_loc.get(j).playerid(); x = j; } player_location.add(new Location(tem_loc.get(x).playerid(), new Position(tem_loc.get(x).pos().x(), tem_loc.get(x).pos().y()))); tem_loc.remove(x); } List<List<Character>> TMap = new ArrayList<>(); for( List<Character> sublist : CurrentMap) { TMap.add(new ArrayList<>(sublist)); } Checkpoints.add(new Checkpoint(TMap, undoQuota, new ArrayList<>(player_location))); } public void undo() { // TODO if(Checkpoints.size() <= 1) return; var checkpoint= Checkpoints.get(Checkpoints.size()-2); Checkpoints.remove(Checkpoints.size()-1); CurrentMap = checkpoint.map(); player_location = checkpoint.player_loc(); undoQuota -= 1; } /** * Get the maximum width of the game map. * This should be the same as that in {@link GameMap} public TerminalRenderingEngine(PrintStream outputSteam) { this.outputSteam = outputSteam; } public Box(int playerId) { this.playerId = playerId; } public Player(int id) { this.id = id; } public ShouldNotReachException() { super(\"This branch should not be reached.\"); }",
        "label": "P"
    },
    "1413": {
        "dataset": "COMP 3021",
        "project": "cfjlu",
        "bug_id": "37",
        "T": "void testGetUndoUnlimited() { final var gameState = new GameState(TestHelper.parseGameMap(\"\"\" -1 ###### #.Aa@# #..a@# ###### \"\"\" )); }",
        "C": "public GameState(@NotNull GameMap map) { // TODO for( List<Character> sublist : map.Map) { CurrentMap.add(new ArrayList<>(sublist)); } undoQuota = map.getUndoLimit().get().intValue(); destination = new HashSet<>(map.getDestinations()); maxHeight = map.getMaxHeight(); maxWidth = map.getMaxWidth(); gameMap = map; playerId = new HashSet<>(map.getPlayerIds()); //sort the player location List<Location> tem_loc = new ArrayList<Location>( map.getPlayers_loc()); while (!tem_loc.isEmpty()){ int temp = tem_loc.get(0).playerid(); int x = 0; for(int j = 0; j < tem_loc.size(); j++){ if(tem_loc.get(j).playerid() < temp) temp = tem_loc.get(j).playerid(); x = j; } player_location.add(new Location(tem_loc.get(x).playerid(), new Position(tem_loc.get(x).pos().x(), tem_loc.get(x).pos().y()))); tem_loc.remove(x); } List<List<Character>> TMap = new ArrayList<>(); for( List<Character> sublist : CurrentMap) { TMap.add(new ArrayList<>(sublist)); } Checkpoints.add(new Checkpoint(TMap, undoQuota, new ArrayList<>(player_location))); }",
        "label": "F"
    },
    "1414": {
        "dataset": "COMP 3021",
        "project": "cfjlu",
        "bug_id": "38",
        "T": "void testMapCopying() { final var maxWidth = 2333; final var maxHeight = 2333; final var random = new Random(); final var randomEntities = Stream.generate(() -> Position.of(random.nextInt(maxWidth), random.nextInt(maxHeight))) .distinct() .limit(100) .collect(Collectors.toMap(Function.identity(), it -> generateEntity(it.x()))); final var firstPos = randomEntities.keySet().stream().findFirst(); final var gameMap = new GameMap(maxWidth, maxHeight, Collections.singleton(firstPos.get()), 233); randomEntities.forEach(gameMap::putEntity); final var gameState = new GameState(gameMap); final var randomPosition = randomEntities.keySet().stream().findAny(); gameMap.putEntity(randomPosition.get(), new Empty()); randomEntities.forEach((p, e) -> assertEquals(e, gameState.getEntity(p))); }",
        "C": "public static @NotNull Position of(int x, int y) { return new Position(x, y); } public GameMap(int maxWidth, int maxHeight, Set<Position> destinations, int undoLimit) { // TODO this.maxHeight = maxHeight; this.maxWidth = maxWidth; this.undoLimit = undoLimit; this.destinations = new HashSet<Position>(destinations); for( List<Character> sublist : temp_Map) { this.Map.add(new ArrayList<>(sublist)); } this.Players_id = new HashSet<Integer>(temp_Players_id); this.Players_loc = new ArrayList<>(temp_Players_loc); } /** * Parses the map from a string representation. * The first line is undo limit. * Starting from the second line, the game map is represented as follows, * <li># represents a {@link Wall}</li> * <li>@ represents a box destination.</li> * <li>Any upper-case letter represents a {@link Player}.</li> * <li> * Any lower-case letter represents a {@link Box} that is only movable by the player with the corresponding upper-case letter. * For instance, box \"a\" can only be moved by player \"A\" and not movable by player \"B\". * </li> * <li>. represents an {@link Empty} position in the map, meaning there is no player or box currently at this position.</li> * <p> * Notes: * <li> * There can be at most 26 players. * All implementations of classes in the hk.ust.comp3021.game package should support up to 26 players. * </li> * <li> * For simplicity, we assume the given map is bounded with a closed boundary. * There is no need to check this point. * </li> * <li> * Example maps can be found in \"src/main/resources\". * </li> * * @param mapText The string representation. * @return The parsed GameMap object. * @throws IllegalArgumentException if undo limit is negative but not -1. * @throws IllegalArgumentException if there are multiple same upper-case letters, i.e., one player can only exist at one position. * @throws IllegalArgumentException if there are no players in the map. * @throws IllegalArgumentException if the number of boxes is not equal to the number of box destinations. * @throws IllegalArgumentException if there are boxes whose {@link Box#getPlayerId()} public GameState(@NotNull GameMap map) { // TODO for( List<Character> sublist : map.Map) { CurrentMap.add(new ArrayList<>(sublist)); } undoQuota = map.getUndoLimit().get().intValue(); destination = new HashSet<>(map.getDestinations()); maxHeight = map.getMaxHeight(); maxWidth = map.getMaxWidth(); gameMap = map; playerId = new HashSet<>(map.getPlayerIds()); //sort the player location List<Location> tem_loc = new ArrayList<Location>( map.getPlayers_loc()); while (!tem_loc.isEmpty()){ int temp = tem_loc.get(0).playerid(); int x = 0; for(int j = 0; j < tem_loc.size(); j++){ if(tem_loc.get(j).playerid() < temp) temp = tem_loc.get(j).playerid(); x = j; } player_location.add(new Location(tem_loc.get(x).playerid(), new Position(tem_loc.get(x).pos().x(), tem_loc.get(x).pos().y()))); tem_loc.remove(x); } List<List<Character>> TMap = new ArrayList<>(); for( List<Character> sublist : CurrentMap) { TMap.add(new ArrayList<>(sublist)); } Checkpoints.add(new Checkpoint(TMap, undoQuota, new ArrayList<>(player_location))); } public void putEntity(Position position, Entity entity) { // TODO position.y(); if(entity instanceof Wall){ return; } return; } public @Nullable Entity getEntity(@NotNull Position position) { // TODO switch (CurrentMap.get(position.y()).get(position.x())){ case '@': return new Empty(); case '.': return new Empty(); case '#': return new Wall(); case ' ': //throw new IllegalArgumentException(\"out of boundar.\"); return null; default: if(CurrentMap.get(position.y()).get(position.x()).toString().matches(\"[A-Z]\")){ return new Player(CurrentMap.get(position.y()).get(position.x()) - 'A'); } else if(CurrentMap.get(position.y()).get(position.x()).toString().matches(\"[a-z]\")){ return new Box(CurrentMap.get(position.y()).get(position.x()) - 'a'); } } return new Empty(); } /** * Get all box destination positions as a set in the game map. * This should be the same as that in {@link GameMap}",
        "label": "F"
    },
    "1415": {
        "dataset": "COMP 3021",
        "project": "cfjlu",
        "bug_id": "39",
        "T": "void testUndoWhenThereIsMoveButNoCheckpoint() { final var gameState = new GameState(TestHelper.parseGameMap(\"\"\" 233 ###### #A.a@# #..a@# ###### \"\"\" )); gameState.move(Position.of(1, 1), Position.of(2, 1)); gameState.undo(); }",
        "C": "public GameState(@NotNull GameMap map) { // TODO for( List<Character> sublist : map.Map) { CurrentMap.add(new ArrayList<>(sublist)); } undoQuota = map.getUndoLimit().get().intValue(); destination = new HashSet<>(map.getDestinations()); maxHeight = map.getMaxHeight(); maxWidth = map.getMaxWidth(); gameMap = map; playerId = new HashSet<>(map.getPlayerIds()); //sort the player location List<Location> tem_loc = new ArrayList<Location>( map.getPlayers_loc()); while (!tem_loc.isEmpty()){ int temp = tem_loc.get(0).playerid(); int x = 0; for(int j = 0; j < tem_loc.size(); j++){ if(tem_loc.get(j).playerid() < temp) temp = tem_loc.get(j).playerid(); x = j; } player_location.add(new Location(tem_loc.get(x).playerid(), new Position(tem_loc.get(x).pos().x(), tem_loc.get(x).pos().y()))); tem_loc.remove(x); } List<List<Character>> TMap = new ArrayList<>(); for( List<Character> sublist : CurrentMap) { TMap.add(new ArrayList<>(sublist)); } Checkpoints.add(new Checkpoint(TMap, undoQuota, new ArrayList<>(player_location))); } public void move(Position from, Position to) { // TODO var FromEnt = getEntity(from); CurrentMap.get(to.y()).set(to.x(), CurrentMap.get(from.y()).get(from.x())); var TO = gameMap.Map.get(from.y()).get(from.x()); if(TO.toString().matches(\"[A-Za-z]\")) TO = '.'; CurrentMap.get(from.y()).set(from.x(), TO); if((FromEnt).getClass() == Player.class) { player_location.set(((Player) FromEnt).getId(), new Location(((Player) FromEnt).getId(), to)); } } /** * Record a checkpoint of the game state, including: * <li>All current positions of entities in the game map.</li> * <li>Current undo quota</li> * <p> * Checkpoint is used in {@link GameState#undo()} public static @NotNull Position of(int x, int y) { return new Position(x, y); } public void undo() { // TODO if(Checkpoints.size() <= 1) return; var checkpoint= Checkpoints.get(Checkpoints.size()-2); Checkpoints.remove(Checkpoints.size()-1); CurrentMap = checkpoint.map(); player_location = checkpoint.player_loc(); undoQuota -= 1; } /** * Get the maximum width of the game map. * This should be the same as that in {@link GameMap}",
        "label": "P"
    },
    "1416": {
        "dataset": "COMP 3021",
        "project": "cfjlu",
        "bug_id": "40",
        "T": "void testGameExit() { final var gameState = mock(GameState.class); final var inputEngine = mock(TerminalInputEngine.class); final var renderingEngine = mock(TerminalRenderingEngine.class); when(gameState.isWin()).thenReturn(false, false, false); when(inputEngine.fetchAction()) .thenReturn(new InvalidInput(0, \"\"), new InvalidInput(0, \"\"), new Exit(0)); final var game = new TerminalSokobanGame(gameState, inputEngine, renderingEngine); game.run(); verify(renderingEngine, atLeastOnce()).message(any()); }",
        "C": "public InvalidInput(int initiator, @NotNull String message) { super(initiator); this.message = message; } public Exit(int initiator) { super(initiator); } public TerminalSokobanGame(GameState gameState, TerminalInputEngine inputEngine, TerminalRenderingEngine renderingEngine) { super(gameState); this.inputEngine = inputEngine; this.renderingEngine = renderingEngine; // TODO if( state.getAllPlayerPositions().size() > 2) { throw new IllegalArgumentException(\"invalid number of player\"); } } public void run() { // TODO while(!shouldStop()){ renderingEngine.render(state); Action act = inputEngine.fetchAction(); ActionResult result = processAction(act); if(result instanceof ActionResult.Failed) { System.out.println(((ActionResult.Failed) result).getReason()); } var undoQuota = state.getUndoQuota(); if (undoQuota.orElse(-2) > -1) { renderingEngine.message(\"Undo Quota: \" + undoQuota.orElse(-2)); } else if (undoQuota.isEmpty()) { renderingEngine.message(\"Undo Quota: unlimited\"); } } renderingEngine.render(state); if(state.isWin()) renderingEngine.message(\"you win\"); }",
        "label": "P"
    },
    "1417": {
        "dataset": "COMP 3021",
        "project": "cfjlu",
        "bug_id": "41",
        "T": "void testGameWin() { final var gameState = mock(GameState.class); final var inputEngine = mock(TerminalInputEngine.class); final var renderingEngine = mock(TerminalRenderingEngine.class); when(gameState.isWin()).thenReturn(false, false, false, true); when(inputEngine.fetchAction()) .thenReturn(new InvalidInput(0, \"\")); final var game = new TerminalSokobanGame(gameState, inputEngine, renderingEngine); game.run(); verify(gameState, atLeastOnce()).isWin(); verify(renderingEngine, atLeastOnce()).message(any()); }",
        "C": "public InvalidInput(int initiator, @NotNull String message) { super(initiator); this.message = message; } public TerminalSokobanGame(GameState gameState, TerminalInputEngine inputEngine, TerminalRenderingEngine renderingEngine) { super(gameState); this.inputEngine = inputEngine; this.renderingEngine = renderingEngine; // TODO if( state.getAllPlayerPositions().size() > 2) { throw new IllegalArgumentException(\"invalid number of player\"); } } public void run() { // TODO while(!shouldStop()){ renderingEngine.render(state); Action act = inputEngine.fetchAction(); ActionResult result = processAction(act); if(result instanceof ActionResult.Failed) { System.out.println(((ActionResult.Failed) result).getReason()); } var undoQuota = state.getUndoQuota(); if (undoQuota.orElse(-2) > -1) { renderingEngine.message(\"Undo Quota: \" + undoQuota.orElse(-2)); } else if (undoQuota.isEmpty()) { renderingEngine.message(\"Undo Quota: unlimited\"); } } renderingEngine.render(state); if(state.isWin()) renderingEngine.message(\"you win\"); }",
        "label": "P"
    },
    "1418": {
        "dataset": "COMP 3021",
        "project": "cfjlu",
        "bug_id": "42",
        "T": "void testMoreThanTwoPlayers() { final var gameState = mock(GameState.class); final var inputEngine = mock(TerminalInputEngine.class); final var renderingEngine = mock(TerminalRenderingEngine.class); when(gameState.getAllPlayerPositions()).thenReturn(new HashSet<>(Arrays.asList(Position.of(1, 1), Position.of(1, 2), Position.of(1, 3)))); }",
        "C": "public static @NotNull Position of(int x, int y) { return new Position(x, y); }",
        "label": "P"
    },
    "1419": {
        "dataset": "COMP 3021",
        "project": "tliangac",
        "bug_id": "0",
        "T": "void moveUp() { Position.of(233, 232), new Move.Up(-1).nextPosition(pos) ); }",
        "C": "public static @NotNull Position of(int x, int y) { return new Position(x, y); } public Up(int initiator) { super(initiator); }",
        "label": "F"
    },
    "1420": {
        "dataset": "COMP 3021",
        "project": "tliangac",
        "bug_id": "1",
        "T": "void moveDown() { Position.of(233, 234), new Move.Down(-1).nextPosition(pos) ); }",
        "C": "public static @NotNull Position of(int x, int y) { return new Position(x, y); } public Down(int initiator) { super(initiator); }",
        "label": "F"
    },
    "1421": {
        "dataset": "COMP 3021",
        "project": "tliangac",
        "bug_id": "2",
        "T": "void moveRight() { Position.of(234, 233), new Move.Right(-1).nextPosition(pos) ); }",
        "C": "public static @NotNull Position of(int x, int y) { return new Position(x, y); } public Right(int initiator) { super(initiator); }",
        "label": "P"
    },
    "1422": {
        "dataset": "COMP 3021",
        "project": "tliangac",
        "bug_id": "3",
        "T": "void testExceedingUndoQuota() { final var gameState = mock(GameState.class); when(gameState.getPlayerPositionById(anyInt())).thenReturn(Position.of(0, 0)); when(gameState.getUndoQuota()).thenReturn(Optional.of(0)); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Undo(0)); }",
        "C": "public Undo(int initiator) { super(initiator); }",
        "label": "P"
    },
    "1423": {
        "dataset": "COMP 3021",
        "project": "tliangac",
        "bug_id": "4",
        "T": "void testExit() { final var gameState = mock(GameState.class); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Exit(0)); }",
        "C": "public Exit(int initiator) { super(initiator); }",
        "label": "F"
    },
    "1424": {
        "dataset": "COMP 3021",
        "project": "tliangac",
        "bug_id": "5",
        "T": "void testUndoUnlimited() { final var gameState = mock(GameState.class); when(gameState.getPlayerPositionById(anyInt())).thenReturn(Position.of(0, 0)); when(gameState.getUndoQuota()).thenReturn(Optional.empty()); final var game = new SokobanGameForTesting(gameState); for (int i = 0; i < 10000; i++) { final var result = game.feedActionForProcessing(new Undo(0)); } verify(gameState, times(10000)).undo(); }",
        "C": "public TerminalRenderingEngine(PrintStream outputSteam) { this.outputSteam = outputSteam; } public Undo(int initiator) { super(initiator); }",
        "label": "F"
    },
    "1425": {
        "dataset": "COMP 3021",
        "project": "tliangac",
        "bug_id": "6",
        "T": "void testPushOtherPlayerBox() { String mapText = \"\"\" 233 ###### #AB.@# #b.a.# #@...# ###### \"\"\"; final var testMap = TestHelper.parseGameMap(mapText); final var gameState = spy(new GameState(testMap)); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Move.Down(0)); verify(gameState, never()).move(any(), any()); }",
        "C": "public GameState(@NotNull GameMap map) { // TODO for( char c = 'a'; c <= 'z'; ++c){ player.put((int)(c-'a'),null); box.put((int)(c-'a'),null); } width=map.width; height=map.height; undolimit=map.undolimit; for(Position t:map.destination){ destination.add(new Position(t.x(),t.y())); } for(Position t:map.wall){ wall.add(new Position(t.x(),t.y())); } for(Position t:map.empty){ empty.add(new Position(t.x(),t.y())); } for(int i=0;i<26;i++){ if(map.player.get(i)!=null){ player.put(i,new Position(map.player.get(i).x(),map.player.get(i).y())); } if(map.box.get(i)!=null){ box.put(i,new ArrayList<>()); for(int j=0;j<map.box.get(i).size();j++){ box.get(i).add(new Position(map.box.get(i).get(j).x(),map.box.get(i).get(j).y())); } } } thismap=map; p.add(new GameMap(width,height,destination,undolimit,wall,player,box,empty)); } public Down(int initiator) { super(initiator); }",
        "label": "P"
    },
    "1426": {
        "dataset": "COMP 3021",
        "project": "tliangac",
        "bug_id": "7",
        "T": "void testMoveNonExistingPlayer() { String mapText = \"\"\" 233 ###### #A..@# #a...# ##...# ###### \"\"\"; final var testMap = TestHelper.parseGameMap(mapText); final var gameState = spy(new GameState(testMap)); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Move.Down(23)); }",
        "C": "public GameState(@NotNull GameMap map) { // TODO for( char c = 'a'; c <= 'z'; ++c){ player.put((int)(c-'a'),null); box.put((int)(c-'a'),null); } width=map.width; height=map.height; undolimit=map.undolimit; for(Position t:map.destination){ destination.add(new Position(t.x(),t.y())); } for(Position t:map.wall){ wall.add(new Position(t.x(),t.y())); } for(Position t:map.empty){ empty.add(new Position(t.x(),t.y())); } for(int i=0;i<26;i++){ if(map.player.get(i)!=null){ player.put(i,new Position(map.player.get(i).x(),map.player.get(i).y())); } if(map.box.get(i)!=null){ box.put(i,new ArrayList<>()); for(int j=0;j<map.box.get(i).size();j++){ box.get(i).add(new Position(map.box.get(i).get(j).x(),map.box.get(i).get(j).y())); } } } thismap=map; p.add(new GameMap(width,height,destination,undolimit,wall,player,box,empty)); } public Down(int initiator) { super(initiator); }",
        "label": "F"
    },
    "1427": {
        "dataset": "COMP 3021",
        "project": "tliangac",
        "bug_id": "8",
        "T": "void testCheckpointWhenNeed() { final var gameState = spy(new GameState(TestHelper.parseGameMap(\"\"\" 233 ###### #.Aa@# #..a@# ###### \"\"\" ))); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Move.Right(0)); verify(gameState, times(1)).checkpoint(); }",
        "C": "public GameState(@NotNull GameMap map) { // TODO for( char c = 'a'; c <= 'z'; ++c){ player.put((int)(c-'a'),null); box.put((int)(c-'a'),null); } width=map.width; height=map.height; undolimit=map.undolimit; for(Position t:map.destination){ destination.add(new Position(t.x(),t.y())); } for(Position t:map.wall){ wall.add(new Position(t.x(),t.y())); } for(Position t:map.empty){ empty.add(new Position(t.x(),t.y())); } for(int i=0;i<26;i++){ if(map.player.get(i)!=null){ player.put(i,new Position(map.player.get(i).x(),map.player.get(i).y())); } if(map.box.get(i)!=null){ box.put(i,new ArrayList<>()); for(int j=0;j<map.box.get(i).size();j++){ box.get(i).add(new Position(map.box.get(i).get(j).x(),map.box.get(i).get(j).y())); } } } thismap=map; p.add(new GameMap(width,height,destination,undolimit,wall,player,box,empty)); } public Right(int initiator) { super(initiator); }",
        "label": "P"
    },
    "1428": {
        "dataset": "COMP 3021",
        "project": "tliangac",
        "bug_id": "9",
        "T": "void testPushBoxAgainstWall() { String mapText = \"\"\" 233 ###### #A..@# #a...# ##...# ###### \"\"\"; final var testMap = TestHelper.parseGameMap(mapText); final var gameState = spy(new GameState(testMap)); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Move.Down(0)); verify(gameState, never()).move(any(), any()); }",
        "C": "public GameState(@NotNull GameMap map) { // TODO for( char c = 'a'; c <= 'z'; ++c){ player.put((int)(c-'a'),null); box.put((int)(c-'a'),null); } width=map.width; height=map.height; undolimit=map.undolimit; for(Position t:map.destination){ destination.add(new Position(t.x(),t.y())); } for(Position t:map.wall){ wall.add(new Position(t.x(),t.y())); } for(Position t:map.empty){ empty.add(new Position(t.x(),t.y())); } for(int i=0;i<26;i++){ if(map.player.get(i)!=null){ player.put(i,new Position(map.player.get(i).x(),map.player.get(i).y())); } if(map.box.get(i)!=null){ box.put(i,new ArrayList<>()); for(int j=0;j<map.box.get(i).size();j++){ box.get(i).add(new Position(map.box.get(i).get(j).x(),map.box.get(i).get(j).y())); } } } thismap=map; p.add(new GameMap(width,height,destination,undolimit,wall,player,box,empty)); } public Down(int initiator) { super(initiator); }",
        "label": "P"
    },
    "1429": {
        "dataset": "COMP 3021",
        "project": "tliangac",
        "bug_id": "10",
        "T": "void testCheckpointWhenNotNeed() { final var gameState = spy(new GameState(TestHelper.parseGameMap(\"\"\" 233 ###### #A.a@# #..a@# ###### \"\"\" ))); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Move.Right(0)); verify(gameState, never()).checkpoint(); } private static class SokobanGameForTesting extends AbstractSokobanGame { protected SokobanGameForTesting(GameState gameState) { super(gameState); } @Override public void run() { } public ActionResult feedActionForProcessing(Action action) { return processAction(action); } }",
        "C": "public GameState(@NotNull GameMap map) { // TODO for( char c = 'a'; c <= 'z'; ++c){ player.put((int)(c-'a'),null); box.put((int)(c-'a'),null); } width=map.width; height=map.height; undolimit=map.undolimit; for(Position t:map.destination){ destination.add(new Position(t.x(),t.y())); } for(Position t:map.wall){ wall.add(new Position(t.x(),t.y())); } for(Position t:map.empty){ empty.add(new Position(t.x(),t.y())); } for(int i=0;i<26;i++){ if(map.player.get(i)!=null){ player.put(i,new Position(map.player.get(i).x(),map.player.get(i).y())); } if(map.box.get(i)!=null){ box.put(i,new ArrayList<>()); for(int j=0;j<map.box.get(i).size();j++){ box.get(i).add(new Position(map.box.get(i).get(j).x(),map.box.get(i).get(j).y())); } } } thismap=map; p.add(new GameMap(width,height,destination,undolimit,wall,player,box,empty)); } public Right(int initiator) { super(initiator); } public void run() { // TODO renderingEngine.render(state); while(!this.state.isWin()){ var t=inputEngine.fetchAction(); renderingEngine.render(this.state); if(t instanceof Exit){ renderingEngine.message(StringResources.GAME_EXIT_MESSAGE); break; } if(t instanceof InvalidInput){ renderingEngine.message(StringResources.INVALID_INPUT_MESSAGE); } if(processAction(t) instanceof ActionResult.Failed){ renderingEngine.message(StringResources.INVALID_INPUT_MESSAGE); } if(state.getUndoQuota()==Optional.of(0)){ renderingEngine.message(StringResources.UNDO_QUOTA_RUN_OUT); } } renderingEngine.message(StringResources.WIN_MESSAGE); } protected ActionResult processAction(@NotNull Action action) { // TODO Position playerposition=state.getPlayerPositionById(action.getInitiator()); if(action instanceof Move.Down){ Position t= new Position(playerposition.x(),playerposition.y()+1); if(state.getEntity(t) instanceof Wall || state.getEntity(t) instanceof Player){ return new ActionResult.Failed(action,StringResources.INVALID_INPUT_MESSAGE); } else if(state.getEntity(t) instanceof Box){ if(state.thismap.box.get(action.getInitiator()).contains(t)){ Position m=new Position(t.x(),t.y()+1); if(state.getEntity(m) instanceof Wall){ return new ActionResult.Failed(action,StringResources.INVALID_INPUT_MESSAGE); } else{ state.move(t,m); } } else{ return new ActionResult.Failed(action,StringResources.INVALID_INPUT_MESSAGE); } } state.move(playerposition,t); state.checkpoint(); return new ActionResult.Success(action); } else if(action instanceof Move.Up){ Position t= new Position(playerposition.x(),playerposition.y()-1); if(state.getEntity(t) instanceof Wall || state.getEntity(t) instanceof Player){ return new ActionResult.Failed(action,StringResources.INVALID_INPUT_MESSAGE); } else if(state.getEntity(t) instanceof Box){ if(state.thismap.box.get(action.getInitiator()).contains(t)){ Position m=new Position(t.x(),t.y()-1); if(state.getEntity(m) instanceof Wall){ return new ActionResult.Failed(action,StringResources.INVALID_INPUT_MESSAGE); } else{ state.move(t,m); } } else{ return new ActionResult.Failed(action,StringResources.INVALID_INPUT_MESSAGE); } } state.move(playerposition,t); state.checkpoint(); return new ActionResult.Success(action); } else if(action instanceof Move.Left){ Position t= new Position(playerposition.x()-1,playerposition.y()); if(state.getEntity(t) instanceof Wall || state.getEntity(t) instanceof Player){ return new ActionResult.Failed(action,StringResources.INVALID_INPUT_MESSAGE); } else if(state.getEntity(t) instanceof Box){ if(state.thismap.box.get(action.getInitiator()).contains(t)){ Position m=new Position(t.x()-1,t.y()); if(state.getEntity(m) instanceof Wall){ return new ActionResult.Failed(action,StringResources.INVALID_INPUT_MESSAGE); } else{ state.move(t,m); } } else{ return new ActionResult.Failed(action,StringResources.INVALID_INPUT_MESSAGE); } } state.move(playerposition,t); state.checkpoint(); return new ActionResult.Success(action); } else if(action instanceof Move.Right){ Position t= new Position(playerposition.x()+1,playerposition.y()); if(state.getEntity(t) instanceof Wall || state.getEntity(t) instanceof Player){ return new ActionResult.Failed(action,StringResources.INVALID_INPUT_MESSAGE); } else if(state.getEntity(t) instanceof Box){ if(state.thismap.box.get(action.getInitiator()).contains(t)){ Position m=new Position(t.x()+1,t.y()); if(state.getEntity(m) instanceof Wall){ return new ActionResult.Failed(action,StringResources.INVALID_INPUT_MESSAGE); } else{ state.move(t,m); } } else{ return new ActionResult.Failed(action,StringResources.INVALID_INPUT_MESSAGE); } } state.move(playerposition,t); state.checkpoint(); return new ActionResult.Success(action); } else { return new ActionResult.Failed(action,StringResources.INVALID_INPUT_MESSAGE); } }",
        "label": "F"
    },
    "1430": {
        "dataset": "COMP 3021",
        "project": "tliangac",
        "bug_id": "11",
        "T": "void testHitAnotherPlayer() { String mapText = \"\"\" 233 ###### #A..@# #B...# #ab.@# ###### \"\"\"; final var testMap = TestHelper.parseGameMap(mapText); final var gameState = spy(new GameState(testMap)); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Move.Down(0)); verify(gameState, never()).move(any(), any()); }",
        "C": "public GameState(@NotNull GameMap map) { // TODO for( char c = 'a'; c <= 'z'; ++c){ player.put((int)(c-'a'),null); box.put((int)(c-'a'),null); } width=map.width; height=map.height; undolimit=map.undolimit; for(Position t:map.destination){ destination.add(new Position(t.x(),t.y())); } for(Position t:map.wall){ wall.add(new Position(t.x(),t.y())); } for(Position t:map.empty){ empty.add(new Position(t.x(),t.y())); } for(int i=0;i<26;i++){ if(map.player.get(i)!=null){ player.put(i,new Position(map.player.get(i).x(),map.player.get(i).y())); } if(map.box.get(i)!=null){ box.put(i,new ArrayList<>()); for(int j=0;j<map.box.get(i).size();j++){ box.get(i).add(new Position(map.box.get(i).get(j).x(),map.box.get(i).get(j).y())); } } } thismap=map; p.add(new GameMap(width,height,destination,undolimit,wall,player,box,empty)); } public Down(int initiator) { super(initiator); }",
        "label": "P"
    },
    "1431": {
        "dataset": "COMP 3021",
        "project": "tliangac",
        "bug_id": "12",
        "T": "void testUndoWithinQuota() { final var gameState = mock(GameState.class); when(gameState.getPlayerPositionById(anyInt())).thenReturn(Position.of(0, 0)); when(gameState.getUndoQuota()).thenReturn(Optional.of(1)); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Undo(0)); verify(gameState, times(1)).undo(); }",
        "C": "public Undo(int initiator) { super(initiator); }",
        "label": "F"
    },
    "1432": {
        "dataset": "COMP 3021",
        "project": "tliangac",
        "bug_id": "13",
        "T": "void testInvalidInput() { final var game = new SokobanGameForTesting(mock(GameState.class)); final var message = String.valueOf(new Random().nextLong()); final var action = new InvalidInput(-1, message); final var result = game.feedActionForProcessing(action); }",
        "C": "public InvalidInput(int initiator, @NotNull String message) { super(initiator); this.message = message; }",
        "label": "P"
    },
    "1433": {
        "dataset": "COMP 3021",
        "project": "tliangac",
        "bug_id": "14",
        "T": "void testUndoLimitParsing() { final var gameMap = TestHelper.parseGameMap(rectangularMap); }",
        "C": "",
        "label": "P"
    },
    "1434": {
        "dataset": "COMP 3021",
        "project": "tliangac",
        "bug_id": "15",
        "T": "void testWidthForNonRectangularMap() { final var gameMap = TestHelper.parseGameMap(nonRectangularMap); }",
        "C": "",
        "label": "P"
    },
    "1435": {
        "dataset": "COMP 3021",
        "project": "tliangac",
        "bug_id": "16",
        "T": "void testTwoPlayersMap() { final var twoPlayersMap = \"\"\" 233 ###### #A..@# #..B@# #....# #.a..# #..b.# ###### \"\"\"; final var gameMap = TestHelper.parseGameMap(twoPlayersMap); final var playerIds = gameMap.getPlayerIds(); final var expectedIds = new HashSet<Integer>(); expectedIds.add(0); expectedIds.add(1); }",
        "C": "public Set<Integer> getPlayerIds() { // TODO Set<Integer> re=new HashSet<>(); for(int i=0;i<26;i++){ if(player.get(i)!=null){ re.add(i); } } return re; }",
        "label": "P"
    },
    "1436": {
        "dataset": "COMP 3021",
        "project": "tliangac",
        "bug_id": "17",
        "T": "void testMapWithoutPlayer() { final var invalidMap = \"\"\" 233 ### #.# ### \"\"\"; } // @Tag(TestKind.HIDDEN) // @Test // void testUnmatchedPlayersAndBoxes() { // final var invalidMap = \"\"\" // 233 // ###### // #A..@# // #...@# // #a.b@# // #.a.@# // #..a.# // ###### // \"\"\"; // assertThrowsExactly(IllegalArgumentException.class, () -> TestHelper.parseGameMap(invalidMap)); // }",
        "C": "public TerminalRenderingEngine(PrintStream outputSteam) { this.outputSteam = outputSteam; }",
        "label": "P"
    },
    "1437": {
        "dataset": "COMP 3021",
        "project": "tliangac",
        "bug_id": "18",
        "T": "void testManyPlayersMap() { final var manyPlayersMap = \"\"\" 233 ###### #A.P@@# #vCB@@# #.cpD@# #Ga.d@# #g.bV@# ###### \"\"\"; final var gameMap = TestHelper.parseGameMap(manyPlayersMap); final var playerIds = gameMap.getPlayerIds(); final var expectedIds = new HashSet<>(Arrays.asList( 0, 'P' - 'A', 'C' - 'A', 'B' - 'A', 'D' - 'A', 'G' - 'A', 'V' - 'A' )); }",
        "C": "public Set<Integer> getPlayerIds() { // TODO Set<Integer> re=new HashSet<>(); for(int i=0;i<26;i++){ if(player.get(i)!=null){ re.add(i); } } return re; }",
        "label": "F"
    },
    "1438": {
        "dataset": "COMP 3021",
        "project": "tliangac",
        "bug_id": "19",
        "T": "void testHeightForNonRectangularMap() { final var gameMap = TestHelper.parseGameMap(nonRectangularMap); }",
        "C": "",
        "label": "P"
    },
    "1439": {
        "dataset": "COMP 3021",
        "project": "tliangac",
        "bug_id": "20",
        "T": "void testDuplicatedPlayers() { final var invalidMap = \"\"\" 233 ###### #A..@# #..A@# #....# #.a..# #..b.# ###### \"\"\"; }",
        "C": "",
        "label": "P"
    },
    "1440": {
        "dataset": "COMP 3021",
        "project": "tliangac",
        "bug_id": "21",
        "T": "void testParseMapWithoutUndoLimit() { final var invalidMap = String.join(\"\\n\", rectangularMap.lines().skip(1).toList()); }",
        "C": "",
        "label": "P"
    },
    "1441": {
        "dataset": "COMP 3021",
        "project": "tliangac",
        "bug_id": "22",
        "T": "void testInsufficientDestinations() { final var invalidMap = \"\"\" 233 ###### #A..@# #...@# #a...# #.a..# #..a.# ###### \"\"\"; }",
        "C": "",
        "label": "P"
    },
    "1442": {
        "dataset": "COMP 3021",
        "project": "tliangac",
        "bug_id": "23",
        "T": "void testSuperLargeMap() { try { new GameMap(Integer.MAX_VALUE, Integer.MAX_VALUE, Collections.emptySet(), 0); } catch (OutOfMemoryError e) { throw new RuntimeException(e); } }); }",
        "C": "public GameMap(int maxWidth, int maxHeight, Set<Position> destinations, int undoLimit) { // TODO this.width=maxWidth; this.height=maxHeight; this.destination=destinations; this.undolimit=undoLimit; } public GameMap(int maxWidth, int maxHeight, Set<Position> destinations, int undoLimit,Set<Position> wall, HashMap<Integer,Position> player, HashMap<Integer,List<Position>> box,Set<Position> empty) { this.wall=wall; this.box=box; this.player=player; this.width=maxWidth; this.height=maxHeight; this.destination=destinations; this.undolimit=undoLimit; this.empty=empty; } /** * Parses the map from a string representation. * The first line is undo limit. * Starting from the second line, the game map is represented as follows, * <li># represents a {@link Wall}</li> * <li>@ represents a box destination.</li> * <li>Any upper-case letter represents a {@link Player}.</li> * <li> * Any lower-case letter represents a {@link Box} that is only movable by the player with the corresponding upper-case letter. * For instance, box \"a\" can only be moved by player \"A\" and not movable by player \"B\". * </li> * <li>. represents an {@link Empty} position in the map, meaning there is no player or box currently at this position.</li> * <p> * Notes: * <li> * There can be at most 26 players. * All implementations of classes in the hk.ust.comp3021.game package should support up to 26 players. * </li> * <li> * For simplicity, we assume the given map is bounded with a closed boundary. * There is no need to check this point. * </li> * <li> * Example maps can be found in \"src/main/resources\". * </li> * * @param mapText The string representation. * @return The parsed GameMap object. * @throws IllegalArgumentException if undo limit is negative but not -1. * @throws IllegalArgumentException if there are multiple same upper-case letters, i.e., one player can only exist at one position. * @throws IllegalArgumentException if there are no players in the map. * @throws IllegalArgumentException if the number of boxes is not equal to the number of box destinations. * @throws IllegalArgumentException if there are boxes whose {@link Box#getPlayerId()} public TerminalRenderingEngine(PrintStream outputSteam) { this.outputSteam = outputSteam; }",
        "label": "P"
    },
    "1443": {
        "dataset": "COMP 3021",
        "project": "tliangac",
        "bug_id": "24",
        "T": "void testInvalidUndoLimit() { final var invalidMap = \"\"\" -233 ###### #A..@# #...@# #a.b@# #.a.@# #..a.# ###### \"\"\"; }",
        "C": "",
        "label": "P"
    },
    "1444": {
        "dataset": "COMP 3021",
        "project": "tliangac",
        "bug_id": "25",
        "T": "void testEmptyMap() { final var invalidMap = \"\"; }",
        "C": "",
        "label": "P"
    },
    "1445": {
        "dataset": "COMP 3021",
        "project": "tliangac",
        "bug_id": "26",
        "T": "void testMove(String input, String name, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); } private InputStream fixValueStream(String content) { final var bytes = content.getBytes(StandardCharsets.UTF_8); return new ByteArrayInputStream(bytes); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine(); // TODO if(inputLine.equals(StringResources.EXIT_COMMAND_TEXT)){ return new Exit(0); } else if(inputLine.equals(\"A\") || inputLine.equals(\"H\")){ return new Move.Left(0); } else if(inputLine.equals(\"S\") || inputLine.equals(\"J\")){ return new Move.Down(0); } else if(inputLine.equals(\"W\") || inputLine.equals(\"K\")){ return new Move.Up(0); } else if(inputLine.equals(\"D\") || inputLine.equals(\"L\")){ return new Move.Right(0); } else if(inputLine.equals(\"U\")){ return new Undo(0); } return new InvalidInput(0, StringResources.INVALID_INPUT_MESSAGE); }",
        "label": "P"
    },
    "1446": {
        "dataset": "COMP 3021",
        "project": "tliangac",
        "bug_id": "27",
        "T": "void testMove(String input, String name, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); } private InputStream fixValueStream(String content) { final var bytes = content.getBytes(StandardCharsets.UTF_8); return new ByteArrayInputStream(bytes); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine(); // TODO if(inputLine.equals(StringResources.EXIT_COMMAND_TEXT)){ return new Exit(0); } else if(inputLine.equals(\"A\") || inputLine.equals(\"H\")){ return new Move.Left(0); } else if(inputLine.equals(\"S\") || inputLine.equals(\"J\")){ return new Move.Down(0); } else if(inputLine.equals(\"W\") || inputLine.equals(\"K\")){ return new Move.Up(0); } else if(inputLine.equals(\"D\") || inputLine.equals(\"L\")){ return new Move.Right(0); } else if(inputLine.equals(\"U\")){ return new Undo(0); } return new InvalidInput(0, StringResources.INVALID_INPUT_MESSAGE); }",
        "label": "P"
    },
    "1447": {
        "dataset": "COMP 3021",
        "project": "tliangac",
        "bug_id": "28",
        "T": "void testMove(String input, String name, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); } private InputStream fixValueStream(String content) { final var bytes = content.getBytes(StandardCharsets.UTF_8); return new ByteArrayInputStream(bytes); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine(); // TODO if(inputLine.equals(StringResources.EXIT_COMMAND_TEXT)){ return new Exit(0); } else if(inputLine.equals(\"A\") || inputLine.equals(\"H\")){ return new Move.Left(0); } else if(inputLine.equals(\"S\") || inputLine.equals(\"J\")){ return new Move.Down(0); } else if(inputLine.equals(\"W\") || inputLine.equals(\"K\")){ return new Move.Up(0); } else if(inputLine.equals(\"D\") || inputLine.equals(\"L\")){ return new Move.Right(0); } else if(inputLine.equals(\"U\")){ return new Undo(0); } return new InvalidInput(0, StringResources.INVALID_INPUT_MESSAGE); }",
        "label": "P"
    },
    "1448": {
        "dataset": "COMP 3021",
        "project": "tliangac",
        "bug_id": "29",
        "T": "void testMove(String input, String name, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); } private InputStream fixValueStream(String content) { final var bytes = content.getBytes(StandardCharsets.UTF_8); return new ByteArrayInputStream(bytes); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine(); // TODO if(inputLine.equals(StringResources.EXIT_COMMAND_TEXT)){ return new Exit(0); } else if(inputLine.equals(\"A\") || inputLine.equals(\"H\")){ return new Move.Left(0); } else if(inputLine.equals(\"S\") || inputLine.equals(\"J\")){ return new Move.Down(0); } else if(inputLine.equals(\"W\") || inputLine.equals(\"K\")){ return new Move.Up(0); } else if(inputLine.equals(\"D\") || inputLine.equals(\"L\")){ return new Move.Right(0); } else if(inputLine.equals(\"U\")){ return new Undo(0); } return new InvalidInput(0, StringResources.INVALID_INPUT_MESSAGE); }",
        "label": "P"
    },
    "1449": {
        "dataset": "COMP 3021",
        "project": "tliangac",
        "bug_id": "30",
        "T": "void testMove(String input, String name, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); } private InputStream fixValueStream(String content) { final var bytes = content.getBytes(StandardCharsets.UTF_8); return new ByteArrayInputStream(bytes); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine(); // TODO if(inputLine.equals(StringResources.EXIT_COMMAND_TEXT)){ return new Exit(0); } else if(inputLine.equals(\"A\") || inputLine.equals(\"H\")){ return new Move.Left(0); } else if(inputLine.equals(\"S\") || inputLine.equals(\"J\")){ return new Move.Down(0); } else if(inputLine.equals(\"W\") || inputLine.equals(\"K\")){ return new Move.Up(0); } else if(inputLine.equals(\"D\") || inputLine.equals(\"L\")){ return new Move.Right(0); } else if(inputLine.equals(\"U\")){ return new Undo(0); } return new InvalidInput(0, StringResources.INVALID_INPUT_MESSAGE); }",
        "label": "F"
    },
    "1450": {
        "dataset": "COMP 3021",
        "project": "tliangac",
        "bug_id": "31",
        "T": "void testMove(String input, String name, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); } private InputStream fixValueStream(String content) { final var bytes = content.getBytes(StandardCharsets.UTF_8); return new ByteArrayInputStream(bytes); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine(); // TODO if(inputLine.equals(StringResources.EXIT_COMMAND_TEXT)){ return new Exit(0); } else if(inputLine.equals(\"A\") || inputLine.equals(\"H\")){ return new Move.Left(0); } else if(inputLine.equals(\"S\") || inputLine.equals(\"J\")){ return new Move.Down(0); } else if(inputLine.equals(\"W\") || inputLine.equals(\"K\")){ return new Move.Up(0); } else if(inputLine.equals(\"D\") || inputLine.equals(\"L\")){ return new Move.Right(0); } else if(inputLine.equals(\"U\")){ return new Undo(0); } return new InvalidInput(0, StringResources.INVALID_INPUT_MESSAGE); }",
        "label": "F"
    },
    "1451": {
        "dataset": "COMP 3021",
        "project": "tliangac",
        "bug_id": "32",
        "T": "void testMove(String input, String name, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); } private InputStream fixValueStream(String content) { final var bytes = content.getBytes(StandardCharsets.UTF_8); return new ByteArrayInputStream(bytes); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine(); // TODO if(inputLine.equals(StringResources.EXIT_COMMAND_TEXT)){ return new Exit(0); } else if(inputLine.equals(\"A\") || inputLine.equals(\"H\")){ return new Move.Left(0); } else if(inputLine.equals(\"S\") || inputLine.equals(\"J\")){ return new Move.Down(0); } else if(inputLine.equals(\"W\") || inputLine.equals(\"K\")){ return new Move.Up(0); } else if(inputLine.equals(\"D\") || inputLine.equals(\"L\")){ return new Move.Right(0); } else if(inputLine.equals(\"U\")){ return new Undo(0); } return new InvalidInput(0, StringResources.INVALID_INPUT_MESSAGE); }",
        "label": "F"
    },
    "1452": {
        "dataset": "COMP 3021",
        "project": "tliangac",
        "bug_id": "33",
        "T": "void testMove(String input, String name, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); } private InputStream fixValueStream(String content) { final var bytes = content.getBytes(StandardCharsets.UTF_8); return new ByteArrayInputStream(bytes); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine(); // TODO if(inputLine.equals(StringResources.EXIT_COMMAND_TEXT)){ return new Exit(0); } else if(inputLine.equals(\"A\") || inputLine.equals(\"H\")){ return new Move.Left(0); } else if(inputLine.equals(\"S\") || inputLine.equals(\"J\")){ return new Move.Down(0); } else if(inputLine.equals(\"W\") || inputLine.equals(\"K\")){ return new Move.Up(0); } else if(inputLine.equals(\"D\") || inputLine.equals(\"L\")){ return new Move.Right(0); } else if(inputLine.equals(\"U\")){ return new Undo(0); } return new InvalidInput(0, StringResources.INVALID_INPUT_MESSAGE); }",
        "label": "F"
    },
    "1453": {
        "dataset": "COMP 3021",
        "project": "tliangac",
        "bug_id": "34",
        "T": "void testUndo(String input, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine(); // TODO if(inputLine.equals(StringResources.EXIT_COMMAND_TEXT)){ return new Exit(0); } else if(inputLine.equals(\"A\") || inputLine.equals(\"H\")){ return new Move.Left(0); } else if(inputLine.equals(\"S\") || inputLine.equals(\"J\")){ return new Move.Down(0); } else if(inputLine.equals(\"W\") || inputLine.equals(\"K\")){ return new Move.Up(0); } else if(inputLine.equals(\"D\") || inputLine.equals(\"L\")){ return new Move.Right(0); } else if(inputLine.equals(\"U\")){ return new Undo(0); } return new InvalidInput(0, StringResources.INVALID_INPUT_MESSAGE); }",
        "label": "P"
    },
    "1454": {
        "dataset": "COMP 3021",
        "project": "tliangac",
        "bug_id": "35",
        "T": "void testInvalidInput() { final var inputStream = fixValueStream(\"blah blah\"); final var inputEngine = new TerminalInputEngine(inputStream); final var action = inputEngine.fetchAction(); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine(); // TODO if(inputLine.equals(StringResources.EXIT_COMMAND_TEXT)){ return new Exit(0); } else if(inputLine.equals(\"A\") || inputLine.equals(\"H\")){ return new Move.Left(0); } else if(inputLine.equals(\"S\") || inputLine.equals(\"J\")){ return new Move.Down(0); } else if(inputLine.equals(\"W\") || inputLine.equals(\"K\")){ return new Move.Up(0); } else if(inputLine.equals(\"D\") || inputLine.equals(\"L\")){ return new Move.Right(0); } else if(inputLine.equals(\"U\")){ return new Undo(0); } return new InvalidInput(0, StringResources.INVALID_INPUT_MESSAGE); }",
        "label": "P"
    },
    "1455": {
        "dataset": "COMP 3021",
        "project": "tliangac",
        "bug_id": "36",
        "T": "void testUndoWhenThereIsNoMove() { final var gameState = new GameState(TestHelper.parseGameMap(\"\"\" 233 ###### #A.a@# #..a@# ###### \"\"\" )); gameState.undo(); } private Entity generateEntity(int key) { return switch (key % 4) { case 0 -> new Box(0); case 1 -> new Empty(); case 2 -> new Player(0); case 3 -> new Wall(); default -> throw new ShouldNotReachException(); }; }",
        "C": "public GameState(@NotNull GameMap map) { // TODO for( char c = 'a'; c <= 'z'; ++c){ player.put((int)(c-'a'),null); box.put((int)(c-'a'),null); } width=map.width; height=map.height; undolimit=map.undolimit; for(Position t:map.destination){ destination.add(new Position(t.x(),t.y())); } for(Position t:map.wall){ wall.add(new Position(t.x(),t.y())); } for(Position t:map.empty){ empty.add(new Position(t.x(),t.y())); } for(int i=0;i<26;i++){ if(map.player.get(i)!=null){ player.put(i,new Position(map.player.get(i).x(),map.player.get(i).y())); } if(map.box.get(i)!=null){ box.put(i,new ArrayList<>()); for(int j=0;j<map.box.get(i).size();j++){ box.get(i).add(new Position(map.box.get(i).get(j).x(),map.box.get(i).get(j).y())); } } } thismap=map; p.add(new GameMap(width,height,destination,undolimit,wall,player,box,empty)); } public void undo() { // TODO if(p.size()==2){ thismap=p.get(0); } else{ thismap=p.get(p.size()-2); } thismap.undolimit--; } /** * Get the maximum width of the game map. * This should be the same as that in {@link GameMap} public TerminalRenderingEngine(PrintStream outputSteam) { this.outputSteam = outputSteam; } public Box(int playerId) { this.playerId = playerId; } public Player(int id) { this.id = id; } public ShouldNotReachException() { super(\"This branch should not be reached.\"); }",
        "label": "F"
    },
    "1456": {
        "dataset": "COMP 3021",
        "project": "tliangac",
        "bug_id": "37",
        "T": "void testGetUndoUnlimited() { final var gameState = new GameState(TestHelper.parseGameMap(\"\"\" -1 ###### #.Aa@# #..a@# ###### \"\"\" )); }",
        "C": "public GameState(@NotNull GameMap map) { // TODO for( char c = 'a'; c <= 'z'; ++c){ player.put((int)(c-'a'),null); box.put((int)(c-'a'),null); } width=map.width; height=map.height; undolimit=map.undolimit; for(Position t:map.destination){ destination.add(new Position(t.x(),t.y())); } for(Position t:map.wall){ wall.add(new Position(t.x(),t.y())); } for(Position t:map.empty){ empty.add(new Position(t.x(),t.y())); } for(int i=0;i<26;i++){ if(map.player.get(i)!=null){ player.put(i,new Position(map.player.get(i).x(),map.player.get(i).y())); } if(map.box.get(i)!=null){ box.put(i,new ArrayList<>()); for(int j=0;j<map.box.get(i).size();j++){ box.get(i).add(new Position(map.box.get(i).get(j).x(),map.box.get(i).get(j).y())); } } } thismap=map; p.add(new GameMap(width,height,destination,undolimit,wall,player,box,empty)); }",
        "label": "F"
    },
    "1457": {
        "dataset": "COMP 3021",
        "project": "tliangac",
        "bug_id": "38",
        "T": "void testMapCopying() { final var maxWidth = 2333; final var maxHeight = 2333; final var random = new Random(); final var randomEntities = Stream.generate(() -> Position.of(random.nextInt(maxWidth), random.nextInt(maxHeight))) .distinct() .limit(100) .collect(Collectors.toMap(Function.identity(), it -> generateEntity(it.x()))); final var firstPos = randomEntities.keySet().stream().findFirst(); final var gameMap = new GameMap(maxWidth, maxHeight, Collections.singleton(firstPos.get()), 233); randomEntities.forEach(gameMap::putEntity); final var gameState = new GameState(gameMap); final var randomPosition = randomEntities.keySet().stream().findAny(); gameMap.putEntity(randomPosition.get(), new Empty()); randomEntities.forEach((p, e) -> assertEquals(e, gameState.getEntity(p))); }",
        "C": "public static @NotNull Position of(int x, int y) { return new Position(x, y); } public GameMap(int maxWidth, int maxHeight, Set<Position> destinations, int undoLimit) { // TODO this.width=maxWidth; this.height=maxHeight; this.destination=destinations; this.undolimit=undoLimit; } public GameMap(int maxWidth, int maxHeight, Set<Position> destinations, int undoLimit,Set<Position> wall, HashMap<Integer,Position> player, HashMap<Integer,List<Position>> box,Set<Position> empty) { this.wall=wall; this.box=box; this.player=player; this.width=maxWidth; this.height=maxHeight; this.destination=destinations; this.undolimit=undoLimit; this.empty=empty; } /** * Parses the map from a string representation. * The first line is undo limit. * Starting from the second line, the game map is represented as follows, * <li># represents a {@link Wall}</li> * <li>@ represents a box destination.</li> * <li>Any upper-case letter represents a {@link Player}.</li> * <li> * Any lower-case letter represents a {@link Box} that is only movable by the player with the corresponding upper-case letter. * For instance, box \"a\" can only be moved by player \"A\" and not movable by player \"B\". * </li> * <li>. represents an {@link Empty} position in the map, meaning there is no player or box currently at this position.</li> * <p> * Notes: * <li> * There can be at most 26 players. * All implementations of classes in the hk.ust.comp3021.game package should support up to 26 players. * </li> * <li> * For simplicity, we assume the given map is bounded with a closed boundary. * There is no need to check this point. * </li> * <li> * Example maps can be found in \"src/main/resources\". * </li> * * @param mapText The string representation. * @return The parsed GameMap object. * @throws IllegalArgumentException if undo limit is negative but not -1. * @throws IllegalArgumentException if there are multiple same upper-case letters, i.e., one player can only exist at one position. * @throws IllegalArgumentException if there are no players in the map. * @throws IllegalArgumentException if the number of boxes is not equal to the number of box destinations. * @throws IllegalArgumentException if there are boxes whose {@link Box#getPlayerId()} public GameState(@NotNull GameMap map) { // TODO for( char c = 'a'; c <= 'z'; ++c){ player.put((int)(c-'a'),null); box.put((int)(c-'a'),null); } width=map.width; height=map.height; undolimit=map.undolimit; for(Position t:map.destination){ destination.add(new Position(t.x(),t.y())); } for(Position t:map.wall){ wall.add(new Position(t.x(),t.y())); } for(Position t:map.empty){ empty.add(new Position(t.x(),t.y())); } for(int i=0;i<26;i++){ if(map.player.get(i)!=null){ player.put(i,new Position(map.player.get(i).x(),map.player.get(i).y())); } if(map.box.get(i)!=null){ box.put(i,new ArrayList<>()); for(int j=0;j<map.box.get(i).size();j++){ box.get(i).add(new Position(map.box.get(i).get(j).x(),map.box.get(i).get(j).y())); } } } thismap=map; p.add(new GameMap(width,height,destination,undolimit,wall,player,box,empty)); } public void putEntity(Position position, Entity entity) { // TODO` if(entity instanceof Box){ if(box.get(((Box) entity).getPlayerId())==null){ box.put(((Box) entity).getPlayerId(),new ArrayList<>()); } box.get(((Box) entity).getPlayerId()).add(position); } if(entity instanceof Wall){ wall.add(position); } if(entity instanceof Player){ player.put(((Player) entity).getId(), position); } if(entity instanceof Empty){ empty.add(position); } } public @Nullable Entity getEntity(@NotNull Position position) { // TODO if(thismap.wall.contains(position)){ return new Wall(); } for(int i=0;i<26;i++){ if(thismap.box.get(i)==null || thismap.player.get(i)==null){ continue; } else if(thismap.box.get(i).contains(position)){ return new Box(i); } else if(thismap.player.get(i).equals(position)){ return new Player(i); } } return new Empty(); } /** * Get all box destination positions as a set in the game map. * This should be the same as that in {@link GameMap}",
        "label": "F"
    },
    "1458": {
        "dataset": "COMP 3021",
        "project": "tliangac",
        "bug_id": "39",
        "T": "void testUndoWhenThereIsMoveButNoCheckpoint() { final var gameState = new GameState(TestHelper.parseGameMap(\"\"\" 233 ###### #A.a@# #..a@# ###### \"\"\" )); gameState.move(Position.of(1, 1), Position.of(2, 1)); gameState.undo(); }",
        "C": "public GameState(@NotNull GameMap map) { // TODO for( char c = 'a'; c <= 'z'; ++c){ player.put((int)(c-'a'),null); box.put((int)(c-'a'),null); } width=map.width; height=map.height; undolimit=map.undolimit; for(Position t:map.destination){ destination.add(new Position(t.x(),t.y())); } for(Position t:map.wall){ wall.add(new Position(t.x(),t.y())); } for(Position t:map.empty){ empty.add(new Position(t.x(),t.y())); } for(int i=0;i<26;i++){ if(map.player.get(i)!=null){ player.put(i,new Position(map.player.get(i).x(),map.player.get(i).y())); } if(map.box.get(i)!=null){ box.put(i,new ArrayList<>()); for(int j=0;j<map.box.get(i).size();j++){ box.get(i).add(new Position(map.box.get(i).get(j).x(),map.box.get(i).get(j).y())); } } } thismap=map; p.add(new GameMap(width,height,destination,undolimit,wall,player,box,empty)); } public void move(Position from, Position to) { // TODO Entity fr=getEntity(from); thismap.removeEntity(from,fr); thismap.putEntity(to,fr); } /** * Record a checkpoint of the game state, including: * <li>All current positions of entities in the game map.</li> * <li>Current undo quota</li> * <p> * Checkpoint is used in {@link GameState#undo()} public static @NotNull Position of(int x, int y) { return new Position(x, y); } public void undo() { // TODO if(p.size()==2){ thismap=p.get(0); } else{ thismap=p.get(p.size()-2); } thismap.undolimit--; } /** * Get the maximum width of the game map. * This should be the same as that in {@link GameMap}",
        "label": "F"
    },
    "1459": {
        "dataset": "COMP 3021",
        "project": "tliangac",
        "bug_id": "40",
        "T": "void testGameExit() { final var gameState = mock(GameState.class); final var inputEngine = mock(TerminalInputEngine.class); final var renderingEngine = mock(TerminalRenderingEngine.class); when(gameState.isWin()).thenReturn(false, false, false); when(inputEngine.fetchAction()) .thenReturn(new InvalidInput(0, \"\"), new InvalidInput(0, \"\"), new Exit(0)); final var game = new TerminalSokobanGame(gameState, inputEngine, renderingEngine); game.run(); verify(renderingEngine, atLeastOnce()).message(any()); }",
        "C": "public InvalidInput(int initiator, @NotNull String message) { super(initiator); this.message = message; } public Exit(int initiator) { super(initiator); } public TerminalSokobanGame(GameState gameState, TerminalInputEngine inputEngine, TerminalRenderingEngine renderingEngine) { super(gameState); this.inputEngine=inputEngine; this.renderingEngine = renderingEngine; // TODO // Check the number of players if(this.state.getAllPlayerPositions().size()>2){ throw new IllegalArgumentException(); } } public void run() { // TODO renderingEngine.render(state); while(!this.state.isWin()){ var t=inputEngine.fetchAction(); renderingEngine.render(this.state); if(t instanceof Exit){ renderingEngine.message(StringResources.GAME_EXIT_MESSAGE); break; } if(t instanceof InvalidInput){ renderingEngine.message(StringResources.INVALID_INPUT_MESSAGE); } if(processAction(t) instanceof ActionResult.Failed){ renderingEngine.message(StringResources.INVALID_INPUT_MESSAGE); } if(state.getUndoQuota()==Optional.of(0)){ renderingEngine.message(StringResources.UNDO_QUOTA_RUN_OUT); } } renderingEngine.message(StringResources.WIN_MESSAGE); }",
        "label": "P"
    },
    "1460": {
        "dataset": "COMP 3021",
        "project": "tliangac",
        "bug_id": "41",
        "T": "void testGameWin() { final var gameState = mock(GameState.class); final var inputEngine = mock(TerminalInputEngine.class); final var renderingEngine = mock(TerminalRenderingEngine.class); when(gameState.isWin()).thenReturn(false, false, false, true); when(inputEngine.fetchAction()) .thenReturn(new InvalidInput(0, \"\")); final var game = new TerminalSokobanGame(gameState, inputEngine, renderingEngine); game.run(); verify(gameState, atLeastOnce()).isWin(); verify(renderingEngine, atLeastOnce()).message(any()); }",
        "C": "public InvalidInput(int initiator, @NotNull String message) { super(initiator); this.message = message; } public TerminalSokobanGame(GameState gameState, TerminalInputEngine inputEngine, TerminalRenderingEngine renderingEngine) { super(gameState); this.inputEngine=inputEngine; this.renderingEngine = renderingEngine; // TODO // Check the number of players if(this.state.getAllPlayerPositions().size()>2){ throw new IllegalArgumentException(); } } public void run() { // TODO renderingEngine.render(state); while(!this.state.isWin()){ var t=inputEngine.fetchAction(); renderingEngine.render(this.state); if(t instanceof Exit){ renderingEngine.message(StringResources.GAME_EXIT_MESSAGE); break; } if(t instanceof InvalidInput){ renderingEngine.message(StringResources.INVALID_INPUT_MESSAGE); } if(processAction(t) instanceof ActionResult.Failed){ renderingEngine.message(StringResources.INVALID_INPUT_MESSAGE); } if(state.getUndoQuota()==Optional.of(0)){ renderingEngine.message(StringResources.UNDO_QUOTA_RUN_OUT); } } renderingEngine.message(StringResources.WIN_MESSAGE); }",
        "label": "P"
    },
    "1461": {
        "dataset": "COMP 3021",
        "project": "tliangac",
        "bug_id": "42",
        "T": "void testMoreThanTwoPlayers() { final var gameState = mock(GameState.class); final var inputEngine = mock(TerminalInputEngine.class); final var renderingEngine = mock(TerminalRenderingEngine.class); when(gameState.getAllPlayerPositions()).thenReturn(new HashSet<>(Arrays.asList(Position.of(1, 1), Position.of(1, 2), Position.of(1, 3)))); }",
        "C": "public static @NotNull Position of(int x, int y) { return new Position(x, y); }",
        "label": "P"
    },
    "1462": {
        "dataset": "COMP 3021",
        "project": "phchauaa",
        "bug_id": "0",
        "T": "void moveUp() { Position.of(233, 232), new Move.Up(-1).nextPosition(pos) ); }",
        "C": "public static @NotNull Position of(int x, int y) { return new Position(x, y); } public Up(int initiator) { super(initiator); }",
        "label": "P"
    },
    "1463": {
        "dataset": "COMP 3021",
        "project": "phchauaa",
        "bug_id": "1",
        "T": "void moveDown() { Position.of(233, 234), new Move.Down(-1).nextPosition(pos) ); }",
        "C": "public static @NotNull Position of(int x, int y) { return new Position(x, y); } public Down(int initiator) { super(initiator); }",
        "label": "P"
    },
    "1464": {
        "dataset": "COMP 3021",
        "project": "phchauaa",
        "bug_id": "2",
        "T": "void moveRight() { Position.of(234, 233), new Move.Right(-1).nextPosition(pos) ); }",
        "C": "public static @NotNull Position of(int x, int y) { return new Position(x, y); } public Right(int initiator) { super(initiator); }",
        "label": "P"
    },
    "1465": {
        "dataset": "COMP 3021",
        "project": "phchauaa",
        "bug_id": "3",
        "T": "void testExceedingUndoQuota() { final var gameState = mock(GameState.class); when(gameState.getPlayerPositionById(anyInt())).thenReturn(Position.of(0, 0)); when(gameState.getUndoQuota()).thenReturn(Optional.of(0)); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Undo(0)); }",
        "C": "public Undo(int initiator) { super(initiator); }",
        "label": "P"
    },
    "1466": {
        "dataset": "COMP 3021",
        "project": "phchauaa",
        "bug_id": "4",
        "T": "void testExit() { final var gameState = mock(GameState.class); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Exit(0)); }",
        "C": "public Exit(int initiator) { super(initiator); }",
        "label": "P"
    },
    "1467": {
        "dataset": "COMP 3021",
        "project": "phchauaa",
        "bug_id": "5",
        "T": "void testUndoUnlimited() { final var gameState = mock(GameState.class); when(gameState.getPlayerPositionById(anyInt())).thenReturn(Position.of(0, 0)); when(gameState.getUndoQuota()).thenReturn(Optional.empty()); final var game = new SokobanGameForTesting(gameState); for (int i = 0; i < 10000; i++) { final var result = game.feedActionForProcessing(new Undo(0)); } verify(gameState, times(10000)).undo(); }",
        "C": "public TerminalRenderingEngine(PrintStream outputSteam) { this.outputSteam = outputSteam; } public Undo(int initiator) { super(initiator); }",
        "label": "P"
    },
    "1468": {
        "dataset": "COMP 3021",
        "project": "phchauaa",
        "bug_id": "6",
        "T": "void testPushOtherPlayerBox() { String mapText = \"\"\" 233 ###### #AB.@# #b.a.# #@...# ###### \"\"\"; final var testMap = TestHelper.parseGameMap(mapText); final var gameState = spy(new GameState(testMap)); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Move.Down(0)); verify(gameState, never()).move(any(), any()); }",
        "C": "public GameState(@NotNull GameMap map) { // TODO this.map = map; this.undoQuota = map.getUndoLimit(); this.historicalMoves = new ArrayList<ArrayList<Position[]>>(); this.latestMoves = new ArrayList<Position[]>(); // this.historicalStates = new ArrayList<GameState>(); // this.historicalStates.add(this); // throw new NotImplementedException(); } public Down(int initiator) { super(initiator); }",
        "label": "P"
    },
    "1469": {
        "dataset": "COMP 3021",
        "project": "phchauaa",
        "bug_id": "7",
        "T": "void testMoveNonExistingPlayer() { String mapText = \"\"\" 233 ###### #A..@# #a...# ##...# ###### \"\"\"; final var testMap = TestHelper.parseGameMap(mapText); final var gameState = spy(new GameState(testMap)); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Move.Down(23)); }",
        "C": "public GameState(@NotNull GameMap map) { // TODO this.map = map; this.undoQuota = map.getUndoLimit(); this.historicalMoves = new ArrayList<ArrayList<Position[]>>(); this.latestMoves = new ArrayList<Position[]>(); // this.historicalStates = new ArrayList<GameState>(); // this.historicalStates.add(this); // throw new NotImplementedException(); } public Down(int initiator) { super(initiator); }",
        "label": "F"
    },
    "1470": {
        "dataset": "COMP 3021",
        "project": "phchauaa",
        "bug_id": "8",
        "T": "void testCheckpointWhenNeed() { final var gameState = spy(new GameState(TestHelper.parseGameMap(\"\"\" 233 ###### #.Aa@# #..a@# ###### \"\"\" ))); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Move.Right(0)); verify(gameState, times(1)).checkpoint(); }",
        "C": "public GameState(@NotNull GameMap map) { // TODO this.map = map; this.undoQuota = map.getUndoLimit(); this.historicalMoves = new ArrayList<ArrayList<Position[]>>(); this.latestMoves = new ArrayList<Position[]>(); // this.historicalStates = new ArrayList<GameState>(); // this.historicalStates.add(this); // throw new NotImplementedException(); } public Right(int initiator) { super(initiator); }",
        "label": "P"
    },
    "1471": {
        "dataset": "COMP 3021",
        "project": "phchauaa",
        "bug_id": "9",
        "T": "void testPushBoxAgainstWall() { String mapText = \"\"\" 233 ###### #A..@# #a...# ##...# ###### \"\"\"; final var testMap = TestHelper.parseGameMap(mapText); final var gameState = spy(new GameState(testMap)); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Move.Down(0)); verify(gameState, never()).move(any(), any()); }",
        "C": "public GameState(@NotNull GameMap map) { // TODO this.map = map; this.undoQuota = map.getUndoLimit(); this.historicalMoves = new ArrayList<ArrayList<Position[]>>(); this.latestMoves = new ArrayList<Position[]>(); // this.historicalStates = new ArrayList<GameState>(); // this.historicalStates.add(this); // throw new NotImplementedException(); } public Down(int initiator) { super(initiator); }",
        "label": "P"
    },
    "1472": {
        "dataset": "COMP 3021",
        "project": "phchauaa",
        "bug_id": "10",
        "T": "void testCheckpointWhenNotNeed() { final var gameState = spy(new GameState(TestHelper.parseGameMap(\"\"\" 233 ###### #A.a@# #..a@# ###### \"\"\" ))); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Move.Right(0)); verify(gameState, never()).checkpoint(); } private static class SokobanGameForTesting extends AbstractSokobanGame { protected SokobanGameForTesting(GameState gameState) { super(gameState); } @Override public void run() { } public ActionResult feedActionForProcessing(Action action) { return processAction(action); } }",
        "C": "public GameState(@NotNull GameMap map) { // TODO this.map = map; this.undoQuota = map.getUndoLimit(); this.historicalMoves = new ArrayList<ArrayList<Position[]>>(); this.latestMoves = new ArrayList<Position[]>(); // this.historicalStates = new ArrayList<GameState>(); // this.historicalStates.add(this); // throw new NotImplementedException(); } public Right(int initiator) { super(initiator); } public void run() { // TODO // Initial message printing renderingEngine.message(StringResources.GAME_READY_MESSAGE); renderingEngine.render(this.state); // Enter game loop while(!this.shouldStop()){ // Print undoQuota // Unlimited undoQuota if(!this.state.getUndoQuota().isPresent()){ this.renderingEngine.message(String.format(StringResources.UNDO_QUOTA_TEMPLATE, StringResources.UNDO_QUOTA_UNLIMITED)); } else { // Pre-set undoQuota this.renderingEngine.message(String.format(StringResources.UNDO_QUOTA_TEMPLATE, String.valueOf(this.state.getUndoQuota().get()))); } // Prompt user input this.renderingEngine.message(new String(\">>>\")); // Fetch user input, process result Action action = this.inputEngine.fetchAction(); ActionResult result = this.processAction(action); if(result instanceof ActionResult.Failed){ renderingEngine.message(((ActionResult.Failed)result).getReason()); } // Print State renderingEngine.render(this.state); renderingEngine.message(\"\\n\"); } if(this.state.isWin()){ renderingEngine.message(StringResources.WIN_MESSAGE); } else{ renderingEngine.message(StringResources.GAME_EXIT_MESSAGE); } // throw new NotImplementedException(); } protected ActionResult processAction(@NotNull Action action) { // TODO if(action instanceof Exit){ this.exit = true; return new ActionResult.Success(action); } else if (action instanceof InvalidInput) { return new ActionResult.Failed(action, ((InvalidInput) action).getMessage()); } else if (action instanceof Undo) { if(!this.state.getUndoQuota().isPresent()){ this.state.undo(); return new ActionResult.Success(action); } if(this.state.getUndoQuota().get() > 0){ this.state.undo(); return new ActionResult.Success(action); } else{ return new ActionResult.Failed(action, StringResources.UNDO_QUOTA_RUN_OUT); } } else if (action instanceof Move) { int playerId = ((Move) action).getInitiator(); Position playerPos = this.state.getPlayerPositionById(playerId); Position nextPos = ((Move) action).nextPosition(playerPos); Entity nextPosEntity = this.state.getEntity(nextPos); if(nextPosEntity instanceof Wall){ return new ActionResult.Failed(action, \"Bumped into Wall.\"); } if(nextPosEntity instanceof Empty) { this.state.move(playerPos, nextPos); return new ActionResult.Success(action); } if(nextPosEntity instanceof Player) { return new ActionResult.Failed(action, \"Bumped into another player.\"); } if(nextPosEntity instanceof Box) { if(((Box) nextPosEntity).getPlayerId() == playerId){ // check if box movable Position boxNextPos = ((Move) action).nextPosition(nextPos); if(this.state.getEntity(boxNextPos) instanceof Empty) { this.state.move(nextPos, boxNextPos); this.state.move(playerPos, nextPos); // make checkpoint as box is moved this.state.checkpoint(); return new ActionResult.Success(action); } else{ return new ActionResult.Failed(action, \"Box unmovable.\"); } } return new ActionResult.Failed(action, StringResources.PLAYER_NOT_FOUND); } } return new ActionResult.Failed(action, \"Unknown action type.\"); // throw new NotImplementedException(); }",
        "label": "P"
    },
    "1473": {
        "dataset": "COMP 3021",
        "project": "phchauaa",
        "bug_id": "11",
        "T": "void testHitAnotherPlayer() { String mapText = \"\"\" 233 ###### #A..@# #B...# #ab.@# ###### \"\"\"; final var testMap = TestHelper.parseGameMap(mapText); final var gameState = spy(new GameState(testMap)); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Move.Down(0)); verify(gameState, never()).move(any(), any()); }",
        "C": "public GameState(@NotNull GameMap map) { // TODO this.map = map; this.undoQuota = map.getUndoLimit(); this.historicalMoves = new ArrayList<ArrayList<Position[]>>(); this.latestMoves = new ArrayList<Position[]>(); // this.historicalStates = new ArrayList<GameState>(); // this.historicalStates.add(this); // throw new NotImplementedException(); } public Down(int initiator) { super(initiator); }",
        "label": "P"
    },
    "1474": {
        "dataset": "COMP 3021",
        "project": "phchauaa",
        "bug_id": "12",
        "T": "void testUndoWithinQuota() { final var gameState = mock(GameState.class); when(gameState.getPlayerPositionById(anyInt())).thenReturn(Position.of(0, 0)); when(gameState.getUndoQuota()).thenReturn(Optional.of(1)); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Undo(0)); verify(gameState, times(1)).undo(); }",
        "C": "public Undo(int initiator) { super(initiator); }",
        "label": "P"
    },
    "1475": {
        "dataset": "COMP 3021",
        "project": "phchauaa",
        "bug_id": "13",
        "T": "void testInvalidInput() { final var game = new SokobanGameForTesting(mock(GameState.class)); final var message = String.valueOf(new Random().nextLong()); final var action = new InvalidInput(-1, message); final var result = game.feedActionForProcessing(action); }",
        "C": "public InvalidInput(int initiator, @NotNull String message) { super(initiator); this.message = message; }",
        "label": "P"
    },
    "1476": {
        "dataset": "COMP 3021",
        "project": "phchauaa",
        "bug_id": "14",
        "T": "void testUndoLimitParsing() { final var gameMap = TestHelper.parseGameMap(rectangularMap); }",
        "C": "",
        "label": "P"
    },
    "1477": {
        "dataset": "COMP 3021",
        "project": "phchauaa",
        "bug_id": "15",
        "T": "void testWidthForNonRectangularMap() { final var gameMap = TestHelper.parseGameMap(nonRectangularMap); }",
        "C": "",
        "label": "P"
    },
    "1478": {
        "dataset": "COMP 3021",
        "project": "phchauaa",
        "bug_id": "16",
        "T": "void testTwoPlayersMap() { final var twoPlayersMap = \"\"\" 233 ###### #A..@# #..B@# #....# #.a..# #..b.# ###### \"\"\"; final var gameMap = TestHelper.parseGameMap(twoPlayersMap); final var playerIds = gameMap.getPlayerIds(); final var expectedIds = new HashSet<Integer>(); expectedIds.add(0); expectedIds.add(1); }",
        "C": "public Set<Integer> getPlayerIds() { // TODO Set<Integer> result = new HashSet<Integer>(); for(int i = 0; i < maxWidth; i++){ for(int j = 0; j < maxHeight; j++){ if(this.map[i][j] instanceof Player) { result.add(((Player) this.map[i][j]).getId()); } } } return result; // throw new NotImplementedException(); }",
        "label": "P"
    },
    "1479": {
        "dataset": "COMP 3021",
        "project": "phchauaa",
        "bug_id": "17",
        "T": "void testMapWithoutPlayer() { final var invalidMap = \"\"\" 233 ### #.# ### \"\"\"; } // @Tag(TestKind.HIDDEN) // @Test // void testUnmatchedPlayersAndBoxes() { // final var invalidMap = \"\"\" // 233 // ###### // #A..@# // #...@# // #a.b@# // #.a.@# // #..a.# // ###### // \"\"\"; // assertThrowsExactly(IllegalArgumentException.class, () -> TestHelper.parseGameMap(invalidMap)); // }",
        "C": "public TerminalRenderingEngine(PrintStream outputSteam) { this.outputSteam = outputSteam; }",
        "label": "P"
    },
    "1480": {
        "dataset": "COMP 3021",
        "project": "phchauaa",
        "bug_id": "18",
        "T": "void testManyPlayersMap() { final var manyPlayersMap = \"\"\" 233 ###### #A.P@@# #vCB@@# #.cpD@# #Ga.d@# #g.bV@# ###### \"\"\"; final var gameMap = TestHelper.parseGameMap(manyPlayersMap); final var playerIds = gameMap.getPlayerIds(); final var expectedIds = new HashSet<>(Arrays.asList( 0, 'P' - 'A', 'C' - 'A', 'B' - 'A', 'D' - 'A', 'G' - 'A', 'V' - 'A' )); }",
        "C": "public Set<Integer> getPlayerIds() { // TODO Set<Integer> result = new HashSet<Integer>(); for(int i = 0; i < maxWidth; i++){ for(int j = 0; j < maxHeight; j++){ if(this.map[i][j] instanceof Player) { result.add(((Player) this.map[i][j]).getId()); } } } return result; // throw new NotImplementedException(); }",
        "label": "P"
    },
    "1481": {
        "dataset": "COMP 3021",
        "project": "phchauaa",
        "bug_id": "19",
        "T": "void testHeightForNonRectangularMap() { final var gameMap = TestHelper.parseGameMap(nonRectangularMap); }",
        "C": "",
        "label": "P"
    },
    "1482": {
        "dataset": "COMP 3021",
        "project": "phchauaa",
        "bug_id": "20",
        "T": "void testDuplicatedPlayers() { final var invalidMap = \"\"\" 233 ###### #A..@# #..A@# #....# #.a..# #..b.# ###### \"\"\"; }",
        "C": "",
        "label": "P"
    },
    "1483": {
        "dataset": "COMP 3021",
        "project": "phchauaa",
        "bug_id": "21",
        "T": "void testParseMapWithoutUndoLimit() { final var invalidMap = String.join(\"\\n\", rectangularMap.lines().skip(1).toList()); }",
        "C": "",
        "label": "P"
    },
    "1484": {
        "dataset": "COMP 3021",
        "project": "phchauaa",
        "bug_id": "22",
        "T": "void testInsufficientDestinations() { final var invalidMap = \"\"\" 233 ###### #A..@# #...@# #a...# #.a..# #..a.# ###### \"\"\"; }",
        "C": "",
        "label": "P"
    },
    "1485": {
        "dataset": "COMP 3021",
        "project": "phchauaa",
        "bug_id": "23",
        "T": "void testSuperLargeMap() { try { new GameMap(Integer.MAX_VALUE, Integer.MAX_VALUE, Collections.emptySet(), 0); } catch (OutOfMemoryError e) { throw new RuntimeException(e); } }); }",
        "C": "public GameMap(int maxWidth, int maxHeight, Set<Position> destinations, int undoLimit) { // TODO this.maxWidth = maxWidth; this.maxHeight = maxHeight; // Coordinate[x][y] this.map = new Entity[maxWidth][maxHeight]; this.destinations = new HashSet<Position>(); this.destinations.addAll(destinations); this.undoLimit = undoLimit; } /** * Parses the map from a string representation. * The first line is undo limit. * Starting from the second line, the game map is represented as follows, * <li># represents a {@link Wall}</li> * <li>@ represents a box destination.</li> * <li>Any upper-case letter represents a {@link Player}.</li> * <li> * Any lower-case letter represents a {@link Box} that is only movable by the player with the corresponding upper-case letter. * For instance, box \"a\" can only be moved by player \"A\" and not movable by player \"B\". * </li> * <li>. represents an {@link Empty} position in the map, meaning there is no player or box currently at this position.</li> * <p> * Notes: * <li> * There can be at most 26 players. * All implementations of classes in the hk.ust.comp3021.game package should support up to 26 players. * </li> * <li> * For simplicity, we assume the given map is bounded with a closed boundary. * There is no need to check this point. * </li> * <li> * Example maps can be found in \"src/main/resources\". * </li> * * @param mapText The string representation. * @return The parsed GameMap object. * @throws IllegalArgumentException if undo limit is negative but not -1. * @throws IllegalArgumentException if there are multiple same upper-case letters, i.e., one player can only exist at one position. * @throws IllegalArgumentException if there are no players in the map. * @throws IllegalArgumentException if the number of boxes is not equal to the number of box destinations. * @throws IllegalArgumentException if there are boxes whose {@link Box#getPlayerId()} public TerminalRenderingEngine(PrintStream outputSteam) { this.outputSteam = outputSteam; }",
        "label": "F"
    },
    "1486": {
        "dataset": "COMP 3021",
        "project": "phchauaa",
        "bug_id": "24",
        "T": "void testInvalidUndoLimit() { final var invalidMap = \"\"\" -233 ###### #A..@# #...@# #a.b@# #.a.@# #..a.# ###### \"\"\"; }",
        "C": "",
        "label": "P"
    },
    "1487": {
        "dataset": "COMP 3021",
        "project": "phchauaa",
        "bug_id": "25",
        "T": "void testEmptyMap() { final var invalidMap = \"\"; }",
        "C": "",
        "label": "P"
    },
    "1488": {
        "dataset": "COMP 3021",
        "project": "phchauaa",
        "bug_id": "26",
        "T": "void testMove(String input, String name, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); } private InputStream fixValueStream(String content) { final var bytes = content.getBytes(StandardCharsets.UTF_8); return new ByteArrayInputStream(bytes); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine(); // TODO String strInputLine = ((String) inputLine).strip(); // Return exit action if exit is prompted: Special case if(strInputLine.toLowerCase().compareTo(StringResources.EXIT_COMMAND_TEXT) == 0){ return new Exit(0); } // Else, input is deemed invalid if length more than 1 character if(strInputLine.length() != 1) { return new InvalidInput(0, StringResources.INVALID_INPUT_MESSAGE); } char charInputLine = strInputLine.charAt(0); // Invalid if character is not letter if(!Character.isLetter(charInputLine)) { return new InvalidInput(0, StringResources.INVALID_INPUT_MESSAGE); } if(Character.toLowerCase(charInputLine) - 'a' == 0){ return new Move.Left(0); } if(Character.toLowerCase(charInputLine) - 's' == 0){ return new Move.Down(0); } if(Character.toLowerCase(charInputLine) - 'w' == 0){ return new Move.Up(0); } if(Character.toLowerCase(charInputLine) - 'd' == 0){ return new Move.Right(0); } if(Character.toLowerCase(charInputLine) - 'h' == 0){ return new Move.Left(1); } if(Character.toLowerCase(charInputLine) - 'j' == 0){ return new Move.Down(1); } if(Character.toLowerCase(charInputLine) - 'k' == 0){ return new Move.Up(1); } if(Character.toLowerCase(charInputLine) - 'l' == 0){ return new Move.Right(1); } if(Character.toLowerCase(charInputLine) - 'u' == 0){ return new Undo(0); } return new InvalidInput(0, StringResources.INVALID_INPUT_MESSAGE); // throw new NotImplementedException(); }",
        "label": "P"
    },
    "1489": {
        "dataset": "COMP 3021",
        "project": "phchauaa",
        "bug_id": "27",
        "T": "void testMove(String input, String name, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); } private InputStream fixValueStream(String content) { final var bytes = content.getBytes(StandardCharsets.UTF_8); return new ByteArrayInputStream(bytes); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine(); // TODO String strInputLine = ((String) inputLine).strip(); // Return exit action if exit is prompted: Special case if(strInputLine.toLowerCase().compareTo(StringResources.EXIT_COMMAND_TEXT) == 0){ return new Exit(0); } // Else, input is deemed invalid if length more than 1 character if(strInputLine.length() != 1) { return new InvalidInput(0, StringResources.INVALID_INPUT_MESSAGE); } char charInputLine = strInputLine.charAt(0); // Invalid if character is not letter if(!Character.isLetter(charInputLine)) { return new InvalidInput(0, StringResources.INVALID_INPUT_MESSAGE); } if(Character.toLowerCase(charInputLine) - 'a' == 0){ return new Move.Left(0); } if(Character.toLowerCase(charInputLine) - 's' == 0){ return new Move.Down(0); } if(Character.toLowerCase(charInputLine) - 'w' == 0){ return new Move.Up(0); } if(Character.toLowerCase(charInputLine) - 'd' == 0){ return new Move.Right(0); } if(Character.toLowerCase(charInputLine) - 'h' == 0){ return new Move.Left(1); } if(Character.toLowerCase(charInputLine) - 'j' == 0){ return new Move.Down(1); } if(Character.toLowerCase(charInputLine) - 'k' == 0){ return new Move.Up(1); } if(Character.toLowerCase(charInputLine) - 'l' == 0){ return new Move.Right(1); } if(Character.toLowerCase(charInputLine) - 'u' == 0){ return new Undo(0); } return new InvalidInput(0, StringResources.INVALID_INPUT_MESSAGE); // throw new NotImplementedException(); }",
        "label": "P"
    },
    "1490": {
        "dataset": "COMP 3021",
        "project": "phchauaa",
        "bug_id": "28",
        "T": "void testMove(String input, String name, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); } private InputStream fixValueStream(String content) { final var bytes = content.getBytes(StandardCharsets.UTF_8); return new ByteArrayInputStream(bytes); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine(); // TODO String strInputLine = ((String) inputLine).strip(); // Return exit action if exit is prompted: Special case if(strInputLine.toLowerCase().compareTo(StringResources.EXIT_COMMAND_TEXT) == 0){ return new Exit(0); } // Else, input is deemed invalid if length more than 1 character if(strInputLine.length() != 1) { return new InvalidInput(0, StringResources.INVALID_INPUT_MESSAGE); } char charInputLine = strInputLine.charAt(0); // Invalid if character is not letter if(!Character.isLetter(charInputLine)) { return new InvalidInput(0, StringResources.INVALID_INPUT_MESSAGE); } if(Character.toLowerCase(charInputLine) - 'a' == 0){ return new Move.Left(0); } if(Character.toLowerCase(charInputLine) - 's' == 0){ return new Move.Down(0); } if(Character.toLowerCase(charInputLine) - 'w' == 0){ return new Move.Up(0); } if(Character.toLowerCase(charInputLine) - 'd' == 0){ return new Move.Right(0); } if(Character.toLowerCase(charInputLine) - 'h' == 0){ return new Move.Left(1); } if(Character.toLowerCase(charInputLine) - 'j' == 0){ return new Move.Down(1); } if(Character.toLowerCase(charInputLine) - 'k' == 0){ return new Move.Up(1); } if(Character.toLowerCase(charInputLine) - 'l' == 0){ return new Move.Right(1); } if(Character.toLowerCase(charInputLine) - 'u' == 0){ return new Undo(0); } return new InvalidInput(0, StringResources.INVALID_INPUT_MESSAGE); // throw new NotImplementedException(); }",
        "label": "P"
    },
    "1491": {
        "dataset": "COMP 3021",
        "project": "phchauaa",
        "bug_id": "29",
        "T": "void testMove(String input, String name, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); } private InputStream fixValueStream(String content) { final var bytes = content.getBytes(StandardCharsets.UTF_8); return new ByteArrayInputStream(bytes); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine(); // TODO String strInputLine = ((String) inputLine).strip(); // Return exit action if exit is prompted: Special case if(strInputLine.toLowerCase().compareTo(StringResources.EXIT_COMMAND_TEXT) == 0){ return new Exit(0); } // Else, input is deemed invalid if length more than 1 character if(strInputLine.length() != 1) { return new InvalidInput(0, StringResources.INVALID_INPUT_MESSAGE); } char charInputLine = strInputLine.charAt(0); // Invalid if character is not letter if(!Character.isLetter(charInputLine)) { return new InvalidInput(0, StringResources.INVALID_INPUT_MESSAGE); } if(Character.toLowerCase(charInputLine) - 'a' == 0){ return new Move.Left(0); } if(Character.toLowerCase(charInputLine) - 's' == 0){ return new Move.Down(0); } if(Character.toLowerCase(charInputLine) - 'w' == 0){ return new Move.Up(0); } if(Character.toLowerCase(charInputLine) - 'd' == 0){ return new Move.Right(0); } if(Character.toLowerCase(charInputLine) - 'h' == 0){ return new Move.Left(1); } if(Character.toLowerCase(charInputLine) - 'j' == 0){ return new Move.Down(1); } if(Character.toLowerCase(charInputLine) - 'k' == 0){ return new Move.Up(1); } if(Character.toLowerCase(charInputLine) - 'l' == 0){ return new Move.Right(1); } if(Character.toLowerCase(charInputLine) - 'u' == 0){ return new Undo(0); } return new InvalidInput(0, StringResources.INVALID_INPUT_MESSAGE); // throw new NotImplementedException(); }",
        "label": "P"
    },
    "1492": {
        "dataset": "COMP 3021",
        "project": "phchauaa",
        "bug_id": "30",
        "T": "void testMove(String input, String name, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); } private InputStream fixValueStream(String content) { final var bytes = content.getBytes(StandardCharsets.UTF_8); return new ByteArrayInputStream(bytes); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine(); // TODO String strInputLine = ((String) inputLine).strip(); // Return exit action if exit is prompted: Special case if(strInputLine.toLowerCase().compareTo(StringResources.EXIT_COMMAND_TEXT) == 0){ return new Exit(0); } // Else, input is deemed invalid if length more than 1 character if(strInputLine.length() != 1) { return new InvalidInput(0, StringResources.INVALID_INPUT_MESSAGE); } char charInputLine = strInputLine.charAt(0); // Invalid if character is not letter if(!Character.isLetter(charInputLine)) { return new InvalidInput(0, StringResources.INVALID_INPUT_MESSAGE); } if(Character.toLowerCase(charInputLine) - 'a' == 0){ return new Move.Left(0); } if(Character.toLowerCase(charInputLine) - 's' == 0){ return new Move.Down(0); } if(Character.toLowerCase(charInputLine) - 'w' == 0){ return new Move.Up(0); } if(Character.toLowerCase(charInputLine) - 'd' == 0){ return new Move.Right(0); } if(Character.toLowerCase(charInputLine) - 'h' == 0){ return new Move.Left(1); } if(Character.toLowerCase(charInputLine) - 'j' == 0){ return new Move.Down(1); } if(Character.toLowerCase(charInputLine) - 'k' == 0){ return new Move.Up(1); } if(Character.toLowerCase(charInputLine) - 'l' == 0){ return new Move.Right(1); } if(Character.toLowerCase(charInputLine) - 'u' == 0){ return new Undo(0); } return new InvalidInput(0, StringResources.INVALID_INPUT_MESSAGE); // throw new NotImplementedException(); }",
        "label": "P"
    },
    "1493": {
        "dataset": "COMP 3021",
        "project": "phchauaa",
        "bug_id": "31",
        "T": "void testMove(String input, String name, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); } private InputStream fixValueStream(String content) { final var bytes = content.getBytes(StandardCharsets.UTF_8); return new ByteArrayInputStream(bytes); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine(); // TODO String strInputLine = ((String) inputLine).strip(); // Return exit action if exit is prompted: Special case if(strInputLine.toLowerCase().compareTo(StringResources.EXIT_COMMAND_TEXT) == 0){ return new Exit(0); } // Else, input is deemed invalid if length more than 1 character if(strInputLine.length() != 1) { return new InvalidInput(0, StringResources.INVALID_INPUT_MESSAGE); } char charInputLine = strInputLine.charAt(0); // Invalid if character is not letter if(!Character.isLetter(charInputLine)) { return new InvalidInput(0, StringResources.INVALID_INPUT_MESSAGE); } if(Character.toLowerCase(charInputLine) - 'a' == 0){ return new Move.Left(0); } if(Character.toLowerCase(charInputLine) - 's' == 0){ return new Move.Down(0); } if(Character.toLowerCase(charInputLine) - 'w' == 0){ return new Move.Up(0); } if(Character.toLowerCase(charInputLine) - 'd' == 0){ return new Move.Right(0); } if(Character.toLowerCase(charInputLine) - 'h' == 0){ return new Move.Left(1); } if(Character.toLowerCase(charInputLine) - 'j' == 0){ return new Move.Down(1); } if(Character.toLowerCase(charInputLine) - 'k' == 0){ return new Move.Up(1); } if(Character.toLowerCase(charInputLine) - 'l' == 0){ return new Move.Right(1); } if(Character.toLowerCase(charInputLine) - 'u' == 0){ return new Undo(0); } return new InvalidInput(0, StringResources.INVALID_INPUT_MESSAGE); // throw new NotImplementedException(); }",
        "label": "P"
    },
    "1494": {
        "dataset": "COMP 3021",
        "project": "phchauaa",
        "bug_id": "32",
        "T": "void testMove(String input, String name, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); } private InputStream fixValueStream(String content) { final var bytes = content.getBytes(StandardCharsets.UTF_8); return new ByteArrayInputStream(bytes); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine(); // TODO String strInputLine = ((String) inputLine).strip(); // Return exit action if exit is prompted: Special case if(strInputLine.toLowerCase().compareTo(StringResources.EXIT_COMMAND_TEXT) == 0){ return new Exit(0); } // Else, input is deemed invalid if length more than 1 character if(strInputLine.length() != 1) { return new InvalidInput(0, StringResources.INVALID_INPUT_MESSAGE); } char charInputLine = strInputLine.charAt(0); // Invalid if character is not letter if(!Character.isLetter(charInputLine)) { return new InvalidInput(0, StringResources.INVALID_INPUT_MESSAGE); } if(Character.toLowerCase(charInputLine) - 'a' == 0){ return new Move.Left(0); } if(Character.toLowerCase(charInputLine) - 's' == 0){ return new Move.Down(0); } if(Character.toLowerCase(charInputLine) - 'w' == 0){ return new Move.Up(0); } if(Character.toLowerCase(charInputLine) - 'd' == 0){ return new Move.Right(0); } if(Character.toLowerCase(charInputLine) - 'h' == 0){ return new Move.Left(1); } if(Character.toLowerCase(charInputLine) - 'j' == 0){ return new Move.Down(1); } if(Character.toLowerCase(charInputLine) - 'k' == 0){ return new Move.Up(1); } if(Character.toLowerCase(charInputLine) - 'l' == 0){ return new Move.Right(1); } if(Character.toLowerCase(charInputLine) - 'u' == 0){ return new Undo(0); } return new InvalidInput(0, StringResources.INVALID_INPUT_MESSAGE); // throw new NotImplementedException(); }",
        "label": "P"
    },
    "1495": {
        "dataset": "COMP 3021",
        "project": "phchauaa",
        "bug_id": "33",
        "T": "void testMove(String input, String name, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); } private InputStream fixValueStream(String content) { final var bytes = content.getBytes(StandardCharsets.UTF_8); return new ByteArrayInputStream(bytes); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine(); // TODO String strInputLine = ((String) inputLine).strip(); // Return exit action if exit is prompted: Special case if(strInputLine.toLowerCase().compareTo(StringResources.EXIT_COMMAND_TEXT) == 0){ return new Exit(0); } // Else, input is deemed invalid if length more than 1 character if(strInputLine.length() != 1) { return new InvalidInput(0, StringResources.INVALID_INPUT_MESSAGE); } char charInputLine = strInputLine.charAt(0); // Invalid if character is not letter if(!Character.isLetter(charInputLine)) { return new InvalidInput(0, StringResources.INVALID_INPUT_MESSAGE); } if(Character.toLowerCase(charInputLine) - 'a' == 0){ return new Move.Left(0); } if(Character.toLowerCase(charInputLine) - 's' == 0){ return new Move.Down(0); } if(Character.toLowerCase(charInputLine) - 'w' == 0){ return new Move.Up(0); } if(Character.toLowerCase(charInputLine) - 'd' == 0){ return new Move.Right(0); } if(Character.toLowerCase(charInputLine) - 'h' == 0){ return new Move.Left(1); } if(Character.toLowerCase(charInputLine) - 'j' == 0){ return new Move.Down(1); } if(Character.toLowerCase(charInputLine) - 'k' == 0){ return new Move.Up(1); } if(Character.toLowerCase(charInputLine) - 'l' == 0){ return new Move.Right(1); } if(Character.toLowerCase(charInputLine) - 'u' == 0){ return new Undo(0); } return new InvalidInput(0, StringResources.INVALID_INPUT_MESSAGE); // throw new NotImplementedException(); }",
        "label": "P"
    },
    "1496": {
        "dataset": "COMP 3021",
        "project": "phchauaa",
        "bug_id": "34",
        "T": "void testUndo(String input, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine(); // TODO String strInputLine = ((String) inputLine).strip(); // Return exit action if exit is prompted: Special case if(strInputLine.toLowerCase().compareTo(StringResources.EXIT_COMMAND_TEXT) == 0){ return new Exit(0); } // Else, input is deemed invalid if length more than 1 character if(strInputLine.length() != 1) { return new InvalidInput(0, StringResources.INVALID_INPUT_MESSAGE); } char charInputLine = strInputLine.charAt(0); // Invalid if character is not letter if(!Character.isLetter(charInputLine)) { return new InvalidInput(0, StringResources.INVALID_INPUT_MESSAGE); } if(Character.toLowerCase(charInputLine) - 'a' == 0){ return new Move.Left(0); } if(Character.toLowerCase(charInputLine) - 's' == 0){ return new Move.Down(0); } if(Character.toLowerCase(charInputLine) - 'w' == 0){ return new Move.Up(0); } if(Character.toLowerCase(charInputLine) - 'd' == 0){ return new Move.Right(0); } if(Character.toLowerCase(charInputLine) - 'h' == 0){ return new Move.Left(1); } if(Character.toLowerCase(charInputLine) - 'j' == 0){ return new Move.Down(1); } if(Character.toLowerCase(charInputLine) - 'k' == 0){ return new Move.Up(1); } if(Character.toLowerCase(charInputLine) - 'l' == 0){ return new Move.Right(1); } if(Character.toLowerCase(charInputLine) - 'u' == 0){ return new Undo(0); } return new InvalidInput(0, StringResources.INVALID_INPUT_MESSAGE); // throw new NotImplementedException(); }",
        "label": "P"
    },
    "1497": {
        "dataset": "COMP 3021",
        "project": "phchauaa",
        "bug_id": "35",
        "T": "void testInvalidInput() { final var inputStream = fixValueStream(\"blah blah\"); final var inputEngine = new TerminalInputEngine(inputStream); final var action = inputEngine.fetchAction(); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine(); // TODO String strInputLine = ((String) inputLine).strip(); // Return exit action if exit is prompted: Special case if(strInputLine.toLowerCase().compareTo(StringResources.EXIT_COMMAND_TEXT) == 0){ return new Exit(0); } // Else, input is deemed invalid if length more than 1 character if(strInputLine.length() != 1) { return new InvalidInput(0, StringResources.INVALID_INPUT_MESSAGE); } char charInputLine = strInputLine.charAt(0); // Invalid if character is not letter if(!Character.isLetter(charInputLine)) { return new InvalidInput(0, StringResources.INVALID_INPUT_MESSAGE); } if(Character.toLowerCase(charInputLine) - 'a' == 0){ return new Move.Left(0); } if(Character.toLowerCase(charInputLine) - 's' == 0){ return new Move.Down(0); } if(Character.toLowerCase(charInputLine) - 'w' == 0){ return new Move.Up(0); } if(Character.toLowerCase(charInputLine) - 'd' == 0){ return new Move.Right(0); } if(Character.toLowerCase(charInputLine) - 'h' == 0){ return new Move.Left(1); } if(Character.toLowerCase(charInputLine) - 'j' == 0){ return new Move.Down(1); } if(Character.toLowerCase(charInputLine) - 'k' == 0){ return new Move.Up(1); } if(Character.toLowerCase(charInputLine) - 'l' == 0){ return new Move.Right(1); } if(Character.toLowerCase(charInputLine) - 'u' == 0){ return new Undo(0); } return new InvalidInput(0, StringResources.INVALID_INPUT_MESSAGE); // throw new NotImplementedException(); }",
        "label": "P"
    },
    "1498": {
        "dataset": "COMP 3021",
        "project": "phchauaa",
        "bug_id": "36",
        "T": "void testUndoWhenThereIsNoMove() { final var gameState = new GameState(TestHelper.parseGameMap(\"\"\" 233 ###### #A.a@# #..a@# ###### \"\"\" )); gameState.undo(); } private Entity generateEntity(int key) { return switch (key % 4) { case 0 -> new Box(0); case 1 -> new Empty(); case 2 -> new Player(0); case 3 -> new Wall(); default -> throw new ShouldNotReachException(); }; }",
        "C": "public GameState(@NotNull GameMap map) { // TODO this.map = map; this.undoQuota = map.getUndoLimit(); this.historicalMoves = new ArrayList<ArrayList<Position[]>>(); this.latestMoves = new ArrayList<Position[]>(); // this.historicalStates = new ArrayList<GameState>(); // this.historicalStates.add(this); // throw new NotImplementedException(); } public void undo() { // TODO if(this.historicalMoves.size() > 0){ ArrayList<Position[]> moves = this.historicalMoves.remove(this.historicalMoves.size() - 1); for(Position[] move : moves){ this.moveWithoutRecord(move[1], move[0]); } if(this.undoQuota.isPresent()) { this.undoQuota = Optional.of(this.getUndoQuota().get() - 1); } } else{ // No checkpoints, revert to initial gamestate if(this.latestMoves.size() > 0){ ArrayList<Position[]> moves = this.latestMoves; for(Position[] move : moves){ this.moveWithoutRecord(move[1], move[0]); } this.latestMoves.clear(); // if(this.undoQuota.isPresent()) { // this.undoQuota = Optional.of(this.getUndoQuota().get() - 1); // } } } } /** * Get the maximum width of the game map. * This should be the same as that in {@link GameMap} public TerminalRenderingEngine(PrintStream outputSteam) { this.outputSteam = outputSteam; } public Box(int playerId) { this.playerId = playerId; } public Player(int id) { this.id = id; } public ShouldNotReachException() { super(\"This branch should not be reached.\"); }",
        "label": "P"
    },
    "1499": {
        "dataset": "COMP 3021",
        "project": "phchauaa",
        "bug_id": "37",
        "T": "void testGetUndoUnlimited() { final var gameState = new GameState(TestHelper.parseGameMap(\"\"\" -1 ###### #.Aa@# #..a@# ###### \"\"\" )); }",
        "C": "public GameState(@NotNull GameMap map) { // TODO this.map = map; this.undoQuota = map.getUndoLimit(); this.historicalMoves = new ArrayList<ArrayList<Position[]>>(); this.latestMoves = new ArrayList<Position[]>(); // this.historicalStates = new ArrayList<GameState>(); // this.historicalStates.add(this); // throw new NotImplementedException(); }",
        "label": "F"
    },
    "1500": {
        "dataset": "COMP 3021",
        "project": "phchauaa",
        "bug_id": "38",
        "T": "void testMapCopying() { final var maxWidth = 2333; final var maxHeight = 2333; final var random = new Random(); final var randomEntities = Stream.generate(() -> Position.of(random.nextInt(maxWidth), random.nextInt(maxHeight))) .distinct() .limit(100) .collect(Collectors.toMap(Function.identity(), it -> generateEntity(it.x()))); final var firstPos = randomEntities.keySet().stream().findFirst(); final var gameMap = new GameMap(maxWidth, maxHeight, Collections.singleton(firstPos.get()), 233); randomEntities.forEach(gameMap::putEntity); final var gameState = new GameState(gameMap); final var randomPosition = randomEntities.keySet().stream().findAny(); gameMap.putEntity(randomPosition.get(), new Empty()); randomEntities.forEach((p, e) -> assertEquals(e, gameState.getEntity(p))); }",
        "C": "public static @NotNull Position of(int x, int y) { return new Position(x, y); } public GameMap(int maxWidth, int maxHeight, Set<Position> destinations, int undoLimit) { // TODO this.maxWidth = maxWidth; this.maxHeight = maxHeight; // Coordinate[x][y] this.map = new Entity[maxWidth][maxHeight]; this.destinations = new HashSet<Position>(); this.destinations.addAll(destinations); this.undoLimit = undoLimit; } /** * Parses the map from a string representation. * The first line is undo limit. * Starting from the second line, the game map is represented as follows, * <li># represents a {@link Wall}</li> * <li>@ represents a box destination.</li> * <li>Any upper-case letter represents a {@link Player}.</li> * <li> * Any lower-case letter represents a {@link Box} that is only movable by the player with the corresponding upper-case letter. * For instance, box \"a\" can only be moved by player \"A\" and not movable by player \"B\". * </li> * <li>. represents an {@link Empty} position in the map, meaning there is no player or box currently at this position.</li> * <p> * Notes: * <li> * There can be at most 26 players. * All implementations of classes in the hk.ust.comp3021.game package should support up to 26 players. * </li> * <li> * For simplicity, we assume the given map is bounded with a closed boundary. * There is no need to check this point. * </li> * <li> * Example maps can be found in \"src/main/resources\". * </li> * * @param mapText The string representation. * @return The parsed GameMap object. * @throws IllegalArgumentException if undo limit is negative but not -1. * @throws IllegalArgumentException if there are multiple same upper-case letters, i.e., one player can only exist at one position. * @throws IllegalArgumentException if there are no players in the map. * @throws IllegalArgumentException if the number of boxes is not equal to the number of box destinations. * @throws IllegalArgumentException if there are boxes whose {@link Box#getPlayerId()} public GameState(@NotNull GameMap map) { // TODO this.map = map; this.undoQuota = map.getUndoLimit(); this.historicalMoves = new ArrayList<ArrayList<Position[]>>(); this.latestMoves = new ArrayList<Position[]>(); // this.historicalStates = new ArrayList<GameState>(); // this.historicalStates.add(this); // throw new NotImplementedException(); } public void putEntity(Position position, Entity entity) { // TODO this.map[position.x()][position.y()] = entity; // throw new NotImplementedException(); } public @Nullable Entity getEntity(@NotNull Position position) { // TODO return this.map.getEntity(position); // throw new NotImplementedException(); } /** * Get all box destination positions as a set in the game map. * This should be the same as that in {@link GameMap}",
        "label": "F"
    },
    "1501": {
        "dataset": "COMP 3021",
        "project": "phchauaa",
        "bug_id": "39",
        "T": "void testUndoWhenThereIsMoveButNoCheckpoint() { final var gameState = new GameState(TestHelper.parseGameMap(\"\"\" 233 ###### #A.a@# #..a@# ###### \"\"\" )); gameState.move(Position.of(1, 1), Position.of(2, 1)); gameState.undo(); }",
        "C": "public GameState(@NotNull GameMap map) { // TODO this.map = map; this.undoQuota = map.getUndoLimit(); this.historicalMoves = new ArrayList<ArrayList<Position[]>>(); this.latestMoves = new ArrayList<Position[]>(); // this.historicalStates = new ArrayList<GameState>(); // this.historicalStates.add(this); // throw new NotImplementedException(); } public void move(Position from, Position to) { // TODO Entity fromEntity = this.map.getEntity(from); Entity toEntity = this.map.getEntity(to); this.map.putEntity(from, toEntity); this.map.putEntity(to, fromEntity); Position[] moveArr = {from, to}; this.latestMoves.add(0, moveArr); // throw new NotImplementedException(); } public static @NotNull Position of(int x, int y) { return new Position(x, y); } public void undo() { // TODO if(this.historicalMoves.size() > 0){ ArrayList<Position[]> moves = this.historicalMoves.remove(this.historicalMoves.size() - 1); for(Position[] move : moves){ this.moveWithoutRecord(move[1], move[0]); } if(this.undoQuota.isPresent()) { this.undoQuota = Optional.of(this.getUndoQuota().get() - 1); } } else{ // No checkpoints, revert to initial gamestate if(this.latestMoves.size() > 0){ ArrayList<Position[]> moves = this.latestMoves; for(Position[] move : moves){ this.moveWithoutRecord(move[1], move[0]); } this.latestMoves.clear(); // if(this.undoQuota.isPresent()) { // this.undoQuota = Optional.of(this.getUndoQuota().get() - 1); // } } } } /** * Get the maximum width of the game map. * This should be the same as that in {@link GameMap}",
        "label": "P"
    },
    "1502": {
        "dataset": "COMP 3021",
        "project": "phchauaa",
        "bug_id": "40",
        "T": "void testGameExit() { final var gameState = mock(GameState.class); final var inputEngine = mock(TerminalInputEngine.class); final var renderingEngine = mock(TerminalRenderingEngine.class); when(gameState.isWin()).thenReturn(false, false, false); when(inputEngine.fetchAction()) .thenReturn(new InvalidInput(0, \"\"), new InvalidInput(0, \"\"), new Exit(0)); final var game = new TerminalSokobanGame(gameState, inputEngine, renderingEngine); game.run(); verify(renderingEngine, atLeastOnce()).message(any()); }",
        "C": "public InvalidInput(int initiator, @NotNull String message) { super(initiator); this.message = message; } public Exit(int initiator) { super(initiator); } public TerminalSokobanGame(GameState gameState, TerminalInputEngine inputEngine, TerminalRenderingEngine renderingEngine) { super(gameState); this.inputEngine = inputEngine; this.renderingEngine = renderingEngine; // TODO // Check the number of players if(gameState.getAllPlayerPositions().size() > 2){ throw new IllegalArgumentException(); } // throw new NotImplementedException(); } public void run() { // TODO // Initial message printing renderingEngine.message(StringResources.GAME_READY_MESSAGE); renderingEngine.render(this.state); // Enter game loop while(!this.shouldStop()){ // Print undoQuota // Unlimited undoQuota if(!this.state.getUndoQuota().isPresent()){ this.renderingEngine.message(String.format(StringResources.UNDO_QUOTA_TEMPLATE, StringResources.UNDO_QUOTA_UNLIMITED)); } else { // Pre-set undoQuota this.renderingEngine.message(String.format(StringResources.UNDO_QUOTA_TEMPLATE, String.valueOf(this.state.getUndoQuota().get()))); } // Prompt user input this.renderingEngine.message(new String(\">>>\")); // Fetch user input, process result Action action = this.inputEngine.fetchAction(); ActionResult result = this.processAction(action); if(result instanceof ActionResult.Failed){ renderingEngine.message(((ActionResult.Failed)result).getReason()); } // Print State renderingEngine.render(this.state); renderingEngine.message(\"\\n\"); } if(this.state.isWin()){ renderingEngine.message(StringResources.WIN_MESSAGE); } else{ renderingEngine.message(StringResources.GAME_EXIT_MESSAGE); } // throw new NotImplementedException(); }",
        "label": "P"
    },
    "1503": {
        "dataset": "COMP 3021",
        "project": "phchauaa",
        "bug_id": "41",
        "T": "void testGameWin() { final var gameState = mock(GameState.class); final var inputEngine = mock(TerminalInputEngine.class); final var renderingEngine = mock(TerminalRenderingEngine.class); when(gameState.isWin()).thenReturn(false, false, false, true); when(inputEngine.fetchAction()) .thenReturn(new InvalidInput(0, \"\")); final var game = new TerminalSokobanGame(gameState, inputEngine, renderingEngine); game.run(); verify(gameState, atLeastOnce()).isWin(); verify(renderingEngine, atLeastOnce()).message(any()); }",
        "C": "public InvalidInput(int initiator, @NotNull String message) { super(initiator); this.message = message; } public TerminalSokobanGame(GameState gameState, TerminalInputEngine inputEngine, TerminalRenderingEngine renderingEngine) { super(gameState); this.inputEngine = inputEngine; this.renderingEngine = renderingEngine; // TODO // Check the number of players if(gameState.getAllPlayerPositions().size() > 2){ throw new IllegalArgumentException(); } // throw new NotImplementedException(); } public void run() { // TODO // Initial message printing renderingEngine.message(StringResources.GAME_READY_MESSAGE); renderingEngine.render(this.state); // Enter game loop while(!this.shouldStop()){ // Print undoQuota // Unlimited undoQuota if(!this.state.getUndoQuota().isPresent()){ this.renderingEngine.message(String.format(StringResources.UNDO_QUOTA_TEMPLATE, StringResources.UNDO_QUOTA_UNLIMITED)); } else { // Pre-set undoQuota this.renderingEngine.message(String.format(StringResources.UNDO_QUOTA_TEMPLATE, String.valueOf(this.state.getUndoQuota().get()))); } // Prompt user input this.renderingEngine.message(new String(\">>>\")); // Fetch user input, process result Action action = this.inputEngine.fetchAction(); ActionResult result = this.processAction(action); if(result instanceof ActionResult.Failed){ renderingEngine.message(((ActionResult.Failed)result).getReason()); } // Print State renderingEngine.render(this.state); renderingEngine.message(\"\\n\"); } if(this.state.isWin()){ renderingEngine.message(StringResources.WIN_MESSAGE); } else{ renderingEngine.message(StringResources.GAME_EXIT_MESSAGE); } // throw new NotImplementedException(); }",
        "label": "P"
    },
    "1504": {
        "dataset": "COMP 3021",
        "project": "phchauaa",
        "bug_id": "42",
        "T": "void testMoreThanTwoPlayers() { final var gameState = mock(GameState.class); final var inputEngine = mock(TerminalInputEngine.class); final var renderingEngine = mock(TerminalRenderingEngine.class); when(gameState.getAllPlayerPositions()).thenReturn(new HashSet<>(Arrays.asList(Position.of(1, 1), Position.of(1, 2), Position.of(1, 3)))); }",
        "C": "public static @NotNull Position of(int x, int y) { return new Position(x, y); }",
        "label": "P"
    },
    "1505": {
        "dataset": "COMP 3021",
        "project": "hywongcj",
        "bug_id": "0",
        "T": "void moveUp() { Position.of(233, 232), new Move.Up(-1).nextPosition(pos) ); }",
        "C": "public static @NotNull Position of(int x, int y) { return new Position(x, y); } public Up(int initiator) { super(initiator); }",
        "label": "P"
    },
    "1506": {
        "dataset": "COMP 3021",
        "project": "hywongcj",
        "bug_id": "1",
        "T": "void moveDown() { Position.of(233, 234), new Move.Down(-1).nextPosition(pos) ); }",
        "C": "public static @NotNull Position of(int x, int y) { return new Position(x, y); } public Down(int initiator) { super(initiator); }",
        "label": "P"
    },
    "1507": {
        "dataset": "COMP 3021",
        "project": "hywongcj",
        "bug_id": "2",
        "T": "void moveRight() { Position.of(234, 233), new Move.Right(-1).nextPosition(pos) ); }",
        "C": "public static @NotNull Position of(int x, int y) { return new Position(x, y); } public Right(int initiator) { super(initiator); }",
        "label": "P"
    },
    "1508": {
        "dataset": "COMP 3021",
        "project": "hywongcj",
        "bug_id": "3",
        "T": "void testExceedingUndoQuota() { final var gameState = mock(GameState.class); when(gameState.getPlayerPositionById(anyInt())).thenReturn(Position.of(0, 0)); when(gameState.getUndoQuota()).thenReturn(Optional.of(0)); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Undo(0)); }",
        "C": "public Undo(int initiator) { super(initiator); }",
        "label": "P"
    },
    "1509": {
        "dataset": "COMP 3021",
        "project": "hywongcj",
        "bug_id": "4",
        "T": "void testExit() { final var gameState = mock(GameState.class); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Exit(0)); }",
        "C": "public Exit(int initiator) { super(initiator); }",
        "label": "P"
    },
    "1510": {
        "dataset": "COMP 3021",
        "project": "hywongcj",
        "bug_id": "5",
        "T": "void testUndoUnlimited() { final var gameState = mock(GameState.class); when(gameState.getPlayerPositionById(anyInt())).thenReturn(Position.of(0, 0)); when(gameState.getUndoQuota()).thenReturn(Optional.empty()); final var game = new SokobanGameForTesting(gameState); for (int i = 0; i < 10000; i++) { final var result = game.feedActionForProcessing(new Undo(0)); } verify(gameState, times(10000)).undo(); }",
        "C": "public TerminalRenderingEngine(PrintStream outputSteam) { this.outputSteam = outputSteam; } public Undo(int initiator) { super(initiator); }",
        "label": "P"
    },
    "1511": {
        "dataset": "COMP 3021",
        "project": "hywongcj",
        "bug_id": "6",
        "T": "void testPushOtherPlayerBox() { String mapText = \"\"\" 233 ###### #AB.@# #b.a.# #@...# ###### \"\"\"; final var testMap = TestHelper.parseGameMap(mapText); final var gameState = spy(new GameState(testMap)); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Move.Down(0)); verify(gameState, never()).move(any(), any()); }",
        "C": "public GameState(@NotNull GameMap map) { // TODO gameStates.add(map); checkpoint(); } public Down(int initiator) { super(initiator); }",
        "label": "P"
    },
    "1512": {
        "dataset": "COMP 3021",
        "project": "hywongcj",
        "bug_id": "7",
        "T": "void testMoveNonExistingPlayer() { String mapText = \"\"\" 233 ###### #A..@# #a...# ##...# ###### \"\"\"; final var testMap = TestHelper.parseGameMap(mapText); final var gameState = spy(new GameState(testMap)); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Move.Down(23)); }",
        "C": "public GameState(@NotNull GameMap map) { // TODO gameStates.add(map); checkpoint(); } public Down(int initiator) { super(initiator); }",
        "label": "P"
    },
    "1513": {
        "dataset": "COMP 3021",
        "project": "hywongcj",
        "bug_id": "8",
        "T": "void testCheckpointWhenNeed() { final var gameState = spy(new GameState(TestHelper.parseGameMap(\"\"\" 233 ###### #.Aa@# #..a@# ###### \"\"\" ))); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Move.Right(0)); verify(gameState, times(1)).checkpoint(); }",
        "C": "public GameState(@NotNull GameMap map) { // TODO gameStates.add(map); checkpoint(); } public Right(int initiator) { super(initiator); }",
        "label": "P"
    },
    "1514": {
        "dataset": "COMP 3021",
        "project": "hywongcj",
        "bug_id": "9",
        "T": "void testPushBoxAgainstWall() { String mapText = \"\"\" 233 ###### #A..@# #a...# ##...# ###### \"\"\"; final var testMap = TestHelper.parseGameMap(mapText); final var gameState = spy(new GameState(testMap)); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Move.Down(0)); verify(gameState, never()).move(any(), any()); }",
        "C": "public GameState(@NotNull GameMap map) { // TODO gameStates.add(map); checkpoint(); } public Down(int initiator) { super(initiator); }",
        "label": "P"
    },
    "1515": {
        "dataset": "COMP 3021",
        "project": "hywongcj",
        "bug_id": "10",
        "T": "void testCheckpointWhenNotNeed() { final var gameState = spy(new GameState(TestHelper.parseGameMap(\"\"\" 233 ###### #A.a@# #..a@# ###### \"\"\" ))); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Move.Right(0)); verify(gameState, never()).checkpoint(); } private static class SokobanGameForTesting extends AbstractSokobanGame { protected SokobanGameForTesting(GameState gameState) { super(gameState); } @Override public void run() { } public ActionResult feedActionForProcessing(Action action) { return processAction(action); } }",
        "C": "public GameState(@NotNull GameMap map) { // TODO gameStates.add(map); checkpoint(); } public Right(int initiator) { super(initiator); } public void run() { // TODO renderingEngine.message(GAME_READY_MESSAGE); renderingEngine.render(state); /*if (state.getUndoQuota().isPresent()) renderingEngine.message(String.format(UNDO_QUOTA_TEMPLATE, state.getUndoQuota().get())); else renderingEngine.message(UNDO_QUOTA_UNLIMITED);*/ while(!shouldStop()){ if (state.getUndoQuota().isPresent()) renderingEngine.message(String.format(UNDO_QUOTA_TEMPLATE, state.getUndoQuota().get())); else renderingEngine.message(UNDO_QUOTA_UNLIMITED); renderingEngine.message(\">>>\"); final var result = processAction(inputEngine.fetchAction()); if (result instanceof ActionResult.Failed) renderingEngine.message(((ActionResult.Failed) result).getReason()); renderingEngine.render(state); } renderingEngine.message(GAME_EXIT_MESSAGE); if (state.isWin()) renderingEngine.message(WIN_MESSAGE); // System.exit(0); } protected ActionResult processAction(@NotNull Action action) { // TODO switch (action){ case Exit ignored ->{ exit = true; return new ActionResult.Success(action); } case Undo ignored ->{ if (state.getUndoQuota().isPresent()) if (state.getUndoQuota().get() == 0) return new ActionResult.Failed(action, UNDO_QUOTA_RUN_OUT); state.undo(); return new ActionResult.Success(action); } case Move m ->{ if (!state.getCurrentState().getPlayerIds().contains(action.getInitiator())) return new ActionResult.Failed(action, PLAYER_NOT_FOUND); var currentPosition = state.getPlayerPositionById(action.getInitiator()); var nextPosition = m.nextPosition(currentPosition); switch (state.getEntity(nextPosition)){ case Empty ignored -> { state.move(currentPosition, nextPosition); return new ActionResult.Success(action); } case Wall ignored -> { return new ActionResult.Failed(action, HIT_WALL); } case Player ignored ->{ return new ActionResult.Failed(action, HIT_PLAYER); } case Box b ->{ if (b.getPlayerId() != action.getInitiator()) return new ActionResult.Failed(action, BOX_UNMATCH); var boxNextPosition = m.nextPosition(nextPosition); if (state.getEntity(boxNextPosition) instanceof Empty){ state.move(nextPosition, boxNextPosition); state.move(currentPosition, nextPosition); state.checkpoint(); return new ActionResult.Success(action); } else return new ActionResult.Failed(action, BOX_FAILED); } } } default ->{ return new ActionResult.Failed(action, INVALID_INPUT_MESSAGE); } } return new ActionResult.Failed(action, INVALID_INPUT_MESSAGE); }",
        "label": "P"
    },
    "1516": {
        "dataset": "COMP 3021",
        "project": "hywongcj",
        "bug_id": "11",
        "T": "void testHitAnotherPlayer() { String mapText = \"\"\" 233 ###### #A..@# #B...# #ab.@# ###### \"\"\"; final var testMap = TestHelper.parseGameMap(mapText); final var gameState = spy(new GameState(testMap)); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Move.Down(0)); verify(gameState, never()).move(any(), any()); }",
        "C": "public GameState(@NotNull GameMap map) { // TODO gameStates.add(map); checkpoint(); } public Down(int initiator) { super(initiator); }",
        "label": "P"
    },
    "1517": {
        "dataset": "COMP 3021",
        "project": "hywongcj",
        "bug_id": "12",
        "T": "void testUndoWithinQuota() { final var gameState = mock(GameState.class); when(gameState.getPlayerPositionById(anyInt())).thenReturn(Position.of(0, 0)); when(gameState.getUndoQuota()).thenReturn(Optional.of(1)); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Undo(0)); verify(gameState, times(1)).undo(); }",
        "C": "public Undo(int initiator) { super(initiator); }",
        "label": "P"
    },
    "1518": {
        "dataset": "COMP 3021",
        "project": "hywongcj",
        "bug_id": "13",
        "T": "void testInvalidInput() { final var game = new SokobanGameForTesting(mock(GameState.class)); final var message = String.valueOf(new Random().nextLong()); final var action = new InvalidInput(-1, message); final var result = game.feedActionForProcessing(action); }",
        "C": "public InvalidInput(int initiator, @NotNull String message) { super(initiator); this.message = message; }",
        "label": "P"
    },
    "1519": {
        "dataset": "COMP 3021",
        "project": "hywongcj",
        "bug_id": "14",
        "T": "void testUndoLimitParsing() { final var gameMap = TestHelper.parseGameMap(rectangularMap); }",
        "C": "",
        "label": "P"
    },
    "1520": {
        "dataset": "COMP 3021",
        "project": "hywongcj",
        "bug_id": "15",
        "T": "void testWidthForNonRectangularMap() { final var gameMap = TestHelper.parseGameMap(nonRectangularMap); }",
        "C": "",
        "label": "P"
    },
    "1521": {
        "dataset": "COMP 3021",
        "project": "hywongcj",
        "bug_id": "16",
        "T": "void testTwoPlayersMap() { final var twoPlayersMap = \"\"\" 233 ###### #A..@# #..B@# #....# #.a..# #..b.# ###### \"\"\"; final var gameMap = TestHelper.parseGameMap(twoPlayersMap); final var playerIds = gameMap.getPlayerIds(); final var expectedIds = new HashSet<Integer>(); expectedIds.add(0); expectedIds.add(1); }",
        "C": "public Set<Integer> getPlayerIds() { // TODO if (playerIds.isEmpty()){ for (int i = 0; i < maxHeight; i++){ for (int j = 0; j < maxWidth; j++){ if (entityMap[i][j] instanceof Player p){ playerIds.add(p.getId()); } } } } return playerIds; }",
        "label": "P"
    },
    "1522": {
        "dataset": "COMP 3021",
        "project": "hywongcj",
        "bug_id": "17",
        "T": "void testMapWithoutPlayer() { final var invalidMap = \"\"\" 233 ### #.# ### \"\"\"; } // @Tag(TestKind.HIDDEN) // @Test // void testUnmatchedPlayersAndBoxes() { // final var invalidMap = \"\"\" // 233 // ###### // #A..@# // #...@# // #a.b@# // #.a.@# // #..a.# // ###### // \"\"\"; // assertThrowsExactly(IllegalArgumentException.class, () -> TestHelper.parseGameMap(invalidMap)); // }",
        "C": "public TerminalRenderingEngine(PrintStream outputSteam) { this.outputSteam = outputSteam; }",
        "label": "P"
    },
    "1523": {
        "dataset": "COMP 3021",
        "project": "hywongcj",
        "bug_id": "18",
        "T": "void testManyPlayersMap() { final var manyPlayersMap = \"\"\" 233 ###### #A.P@@# #vCB@@# #.cpD@# #Ga.d@# #g.bV@# ###### \"\"\"; final var gameMap = TestHelper.parseGameMap(manyPlayersMap); final var playerIds = gameMap.getPlayerIds(); final var expectedIds = new HashSet<>(Arrays.asList( 0, 'P' - 'A', 'C' - 'A', 'B' - 'A', 'D' - 'A', 'G' - 'A', 'V' - 'A' )); }",
        "C": "public Set<Integer> getPlayerIds() { // TODO if (playerIds.isEmpty()){ for (int i = 0; i < maxHeight; i++){ for (int j = 0; j < maxWidth; j++){ if (entityMap[i][j] instanceof Player p){ playerIds.add(p.getId()); } } } } return playerIds; }",
        "label": "P"
    },
    "1524": {
        "dataset": "COMP 3021",
        "project": "hywongcj",
        "bug_id": "19",
        "T": "void testHeightForNonRectangularMap() { final var gameMap = TestHelper.parseGameMap(nonRectangularMap); }",
        "C": "",
        "label": "P"
    },
    "1525": {
        "dataset": "COMP 3021",
        "project": "hywongcj",
        "bug_id": "20",
        "T": "void testDuplicatedPlayers() { final var invalidMap = \"\"\" 233 ###### #A..@# #..A@# #....# #.a..# #..b.# ###### \"\"\"; }",
        "C": "",
        "label": "P"
    },
    "1526": {
        "dataset": "COMP 3021",
        "project": "hywongcj",
        "bug_id": "21",
        "T": "void testParseMapWithoutUndoLimit() { final var invalidMap = String.join(\"\\n\", rectangularMap.lines().skip(1).toList()); }",
        "C": "",
        "label": "P"
    },
    "1527": {
        "dataset": "COMP 3021",
        "project": "hywongcj",
        "bug_id": "22",
        "T": "void testInsufficientDestinations() { final var invalidMap = \"\"\" 233 ###### #A..@# #...@# #a...# #.a..# #..a.# ###### \"\"\"; }",
        "C": "",
        "label": "P"
    },
    "1528": {
        "dataset": "COMP 3021",
        "project": "hywongcj",
        "bug_id": "23",
        "T": "void testSuperLargeMap() { try { new GameMap(Integer.MAX_VALUE, Integer.MAX_VALUE, Collections.emptySet(), 0); } catch (OutOfMemoryError e) { throw new RuntimeException(e); } }); }",
        "C": "public GameMap(int maxWidth, int maxHeight, Set<Position> destinations, int undoLimit) { // TODO this.maxWidth = maxWidth; this.maxHeight = maxHeight; this.destinations = destinations; if (!validateUndoLimit(undoLimit)) throw new IllegalArgumentException(); this.undoLimit = (undoLimit >= 0)? Optional.of(undoLimit) : Optional.empty(); this.playerIds = new HashSet<>(); this.entityMap = new Entity[maxHeight][maxWidth]; } GameMap(GameMap copy) { maxWidth = copy.maxWidth; maxHeight = copy.maxHeight; destinations = new HashSet<>(); destinations.addAll(copy.destinations); undoLimit = (copy.undoLimit.isPresent())? Optional.of(copy.undoLimit.get()) : Optional.empty(); playerIds = new HashSet<>(); playerIds.addAll(copy.playerIds); entityMap = new Entity[maxHeight][maxWidth]; var copyEntityMap = copy.getEntityMap(); for (int i = 0; i < maxHeight; i++){ for (int j = 0; j < maxWidth; j++){ entityMap[i][j] = switch(copyEntityMap[i][j]){ case Box b -> new Box(b.getPlayerId()); case Empty ignored -> new Empty(); case Player p -> new Player(p.getId()); case Wall ignored -> new Wall(); case null -> null; }; } } } /** * Parses the map from a string representation. * The first line is undo limit. * Starting from the second line, the game map is represented as follows, * <li># represents a {@link Wall}</li> * <li>@ represents a box destination.</li> * <li>Any upper-case letter represents a {@link Player}.</li> * <li> * Any lower-case letter represents a {@link Box} that is only movable by the player with the corresponding upper-case letter. * For instance, box \"a\" can only be moved by player \"A\" and not movable by player \"B\". * </li> * <li>. represents an {@link Empty} position in the map, meaning there is no player or box currently at this position.</li> * <p> * Notes: * <li> * There can be at most 26 players. * All implementations of classes in the hk.ust.comp3021.game package should support up to 26 players. * </li> * <li> * For simplicity, we assume the given map is bounded with a closed boundary. * There is no need to check this point. * </li> * <li> * Example maps can be found in \"src/main/resources\". * </li> * * @param mapText The string representation. * @return The parsed GameMap object. * @throws IllegalArgumentException if undo limit is negative but not -1. * @throws IllegalArgumentException if there are multiple same upper-case letters, i.e., one player can only exist at one position. * @throws IllegalArgumentException if there are no players in the map. * @throws IllegalArgumentException if the number of boxes is not equal to the number of box destinations. * @throws IllegalArgumentException if there are boxes whose {@link Box#getPlayerId()} public TerminalRenderingEngine(PrintStream outputSteam) { this.outputSteam = outputSteam; }",
        "label": "F"
    },
    "1529": {
        "dataset": "COMP 3021",
        "project": "hywongcj",
        "bug_id": "24",
        "T": "void testInvalidUndoLimit() { final var invalidMap = \"\"\" -233 ###### #A..@# #...@# #a.b@# #.a.@# #..a.# ###### \"\"\"; }",
        "C": "",
        "label": "P"
    },
    "1530": {
        "dataset": "COMP 3021",
        "project": "hywongcj",
        "bug_id": "25",
        "T": "void testEmptyMap() { final var invalidMap = \"\"; }",
        "C": "",
        "label": "P"
    },
    "1531": {
        "dataset": "COMP 3021",
        "project": "hywongcj",
        "bug_id": "26",
        "T": "void testMove(String input, String name, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); } private InputStream fixValueStream(String content) { final var bytes = content.getBytes(StandardCharsets.UTF_8); return new ByteArrayInputStream(bytes); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. var inputLine = terminalScanner.nextLine(); inputLine = inputLine.toLowerCase(); // TODO Action action = switch(inputLine){ case \"a\" -> new Move.Left(0); case \"h\" -> new Move.Left(1); case \"s\" -> new Move.Down(0); case \"j\" -> new Move.Down(1); case \"w\" -> new Move.Up(0); case \"k\" -> new Move.Up(1); case \"d\" -> new Move.Right(0); case \"l\" -> new Move.Right(1); case \"u\" -> new Undo(0); case EXIT_COMMAND_TEXT -> new Exit(0); default -> new InvalidInput(0, INVALID_INPUT_MESSAGE); }; return action; }",
        "label": "P"
    },
    "1532": {
        "dataset": "COMP 3021",
        "project": "hywongcj",
        "bug_id": "27",
        "T": "void testMove(String input, String name, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); } private InputStream fixValueStream(String content) { final var bytes = content.getBytes(StandardCharsets.UTF_8); return new ByteArrayInputStream(bytes); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. var inputLine = terminalScanner.nextLine(); inputLine = inputLine.toLowerCase(); // TODO Action action = switch(inputLine){ case \"a\" -> new Move.Left(0); case \"h\" -> new Move.Left(1); case \"s\" -> new Move.Down(0); case \"j\" -> new Move.Down(1); case \"w\" -> new Move.Up(0); case \"k\" -> new Move.Up(1); case \"d\" -> new Move.Right(0); case \"l\" -> new Move.Right(1); case \"u\" -> new Undo(0); case EXIT_COMMAND_TEXT -> new Exit(0); default -> new InvalidInput(0, INVALID_INPUT_MESSAGE); }; return action; }",
        "label": "P"
    },
    "1533": {
        "dataset": "COMP 3021",
        "project": "hywongcj",
        "bug_id": "28",
        "T": "void testMove(String input, String name, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); } private InputStream fixValueStream(String content) { final var bytes = content.getBytes(StandardCharsets.UTF_8); return new ByteArrayInputStream(bytes); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. var inputLine = terminalScanner.nextLine(); inputLine = inputLine.toLowerCase(); // TODO Action action = switch(inputLine){ case \"a\" -> new Move.Left(0); case \"h\" -> new Move.Left(1); case \"s\" -> new Move.Down(0); case \"j\" -> new Move.Down(1); case \"w\" -> new Move.Up(0); case \"k\" -> new Move.Up(1); case \"d\" -> new Move.Right(0); case \"l\" -> new Move.Right(1); case \"u\" -> new Undo(0); case EXIT_COMMAND_TEXT -> new Exit(0); default -> new InvalidInput(0, INVALID_INPUT_MESSAGE); }; return action; }",
        "label": "P"
    },
    "1534": {
        "dataset": "COMP 3021",
        "project": "hywongcj",
        "bug_id": "29",
        "T": "void testMove(String input, String name, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); } private InputStream fixValueStream(String content) { final var bytes = content.getBytes(StandardCharsets.UTF_8); return new ByteArrayInputStream(bytes); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. var inputLine = terminalScanner.nextLine(); inputLine = inputLine.toLowerCase(); // TODO Action action = switch(inputLine){ case \"a\" -> new Move.Left(0); case \"h\" -> new Move.Left(1); case \"s\" -> new Move.Down(0); case \"j\" -> new Move.Down(1); case \"w\" -> new Move.Up(0); case \"k\" -> new Move.Up(1); case \"d\" -> new Move.Right(0); case \"l\" -> new Move.Right(1); case \"u\" -> new Undo(0); case EXIT_COMMAND_TEXT -> new Exit(0); default -> new InvalidInput(0, INVALID_INPUT_MESSAGE); }; return action; }",
        "label": "P"
    },
    "1535": {
        "dataset": "COMP 3021",
        "project": "hywongcj",
        "bug_id": "30",
        "T": "void testMove(String input, String name, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); } private InputStream fixValueStream(String content) { final var bytes = content.getBytes(StandardCharsets.UTF_8); return new ByteArrayInputStream(bytes); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. var inputLine = terminalScanner.nextLine(); inputLine = inputLine.toLowerCase(); // TODO Action action = switch(inputLine){ case \"a\" -> new Move.Left(0); case \"h\" -> new Move.Left(1); case \"s\" -> new Move.Down(0); case \"j\" -> new Move.Down(1); case \"w\" -> new Move.Up(0); case \"k\" -> new Move.Up(1); case \"d\" -> new Move.Right(0); case \"l\" -> new Move.Right(1); case \"u\" -> new Undo(0); case EXIT_COMMAND_TEXT -> new Exit(0); default -> new InvalidInput(0, INVALID_INPUT_MESSAGE); }; return action; }",
        "label": "P"
    },
    "1536": {
        "dataset": "COMP 3021",
        "project": "hywongcj",
        "bug_id": "31",
        "T": "void testMove(String input, String name, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); } private InputStream fixValueStream(String content) { final var bytes = content.getBytes(StandardCharsets.UTF_8); return new ByteArrayInputStream(bytes); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. var inputLine = terminalScanner.nextLine(); inputLine = inputLine.toLowerCase(); // TODO Action action = switch(inputLine){ case \"a\" -> new Move.Left(0); case \"h\" -> new Move.Left(1); case \"s\" -> new Move.Down(0); case \"j\" -> new Move.Down(1); case \"w\" -> new Move.Up(0); case \"k\" -> new Move.Up(1); case \"d\" -> new Move.Right(0); case \"l\" -> new Move.Right(1); case \"u\" -> new Undo(0); case EXIT_COMMAND_TEXT -> new Exit(0); default -> new InvalidInput(0, INVALID_INPUT_MESSAGE); }; return action; }",
        "label": "P"
    },
    "1537": {
        "dataset": "COMP 3021",
        "project": "hywongcj",
        "bug_id": "32",
        "T": "void testMove(String input, String name, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); } private InputStream fixValueStream(String content) { final var bytes = content.getBytes(StandardCharsets.UTF_8); return new ByteArrayInputStream(bytes); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. var inputLine = terminalScanner.nextLine(); inputLine = inputLine.toLowerCase(); // TODO Action action = switch(inputLine){ case \"a\" -> new Move.Left(0); case \"h\" -> new Move.Left(1); case \"s\" -> new Move.Down(0); case \"j\" -> new Move.Down(1); case \"w\" -> new Move.Up(0); case \"k\" -> new Move.Up(1); case \"d\" -> new Move.Right(0); case \"l\" -> new Move.Right(1); case \"u\" -> new Undo(0); case EXIT_COMMAND_TEXT -> new Exit(0); default -> new InvalidInput(0, INVALID_INPUT_MESSAGE); }; return action; }",
        "label": "P"
    },
    "1538": {
        "dataset": "COMP 3021",
        "project": "hywongcj",
        "bug_id": "33",
        "T": "void testMove(String input, String name, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); } private InputStream fixValueStream(String content) { final var bytes = content.getBytes(StandardCharsets.UTF_8); return new ByteArrayInputStream(bytes); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. var inputLine = terminalScanner.nextLine(); inputLine = inputLine.toLowerCase(); // TODO Action action = switch(inputLine){ case \"a\" -> new Move.Left(0); case \"h\" -> new Move.Left(1); case \"s\" -> new Move.Down(0); case \"j\" -> new Move.Down(1); case \"w\" -> new Move.Up(0); case \"k\" -> new Move.Up(1); case \"d\" -> new Move.Right(0); case \"l\" -> new Move.Right(1); case \"u\" -> new Undo(0); case EXIT_COMMAND_TEXT -> new Exit(0); default -> new InvalidInput(0, INVALID_INPUT_MESSAGE); }; return action; }",
        "label": "P"
    },
    "1539": {
        "dataset": "COMP 3021",
        "project": "hywongcj",
        "bug_id": "34",
        "T": "void testUndo(String input, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. var inputLine = terminalScanner.nextLine(); inputLine = inputLine.toLowerCase(); // TODO Action action = switch(inputLine){ case \"a\" -> new Move.Left(0); case \"h\" -> new Move.Left(1); case \"s\" -> new Move.Down(0); case \"j\" -> new Move.Down(1); case \"w\" -> new Move.Up(0); case \"k\" -> new Move.Up(1); case \"d\" -> new Move.Right(0); case \"l\" -> new Move.Right(1); case \"u\" -> new Undo(0); case EXIT_COMMAND_TEXT -> new Exit(0); default -> new InvalidInput(0, INVALID_INPUT_MESSAGE); }; return action; }",
        "label": "P"
    },
    "1540": {
        "dataset": "COMP 3021",
        "project": "hywongcj",
        "bug_id": "35",
        "T": "void testInvalidInput() { final var inputStream = fixValueStream(\"blah blah\"); final var inputEngine = new TerminalInputEngine(inputStream); final var action = inputEngine.fetchAction(); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. var inputLine = terminalScanner.nextLine(); inputLine = inputLine.toLowerCase(); // TODO Action action = switch(inputLine){ case \"a\" -> new Move.Left(0); case \"h\" -> new Move.Left(1); case \"s\" -> new Move.Down(0); case \"j\" -> new Move.Down(1); case \"w\" -> new Move.Up(0); case \"k\" -> new Move.Up(1); case \"d\" -> new Move.Right(0); case \"l\" -> new Move.Right(1); case \"u\" -> new Undo(0); case EXIT_COMMAND_TEXT -> new Exit(0); default -> new InvalidInput(0, INVALID_INPUT_MESSAGE); }; return action; }",
        "label": "P"
    },
    "1541": {
        "dataset": "COMP 3021",
        "project": "hywongcj",
        "bug_id": "36",
        "T": "void testUndoWhenThereIsNoMove() { final var gameState = new GameState(TestHelper.parseGameMap(\"\"\" 233 ###### #A.a@# #..a@# ###### \"\"\" )); gameState.undo(); } private Entity generateEntity(int key) { return switch (key % 4) { case 0 -> new Box(0); case 1 -> new Empty(); case 2 -> new Player(0); case 3 -> new Wall(); default -> throw new ShouldNotReachException(); }; }",
        "C": "public GameState(@NotNull GameMap map) { // TODO gameStates.add(map); checkpoint(); } public void undo() { // TODO int temp = -1; if (getCurrentState().getUndoLimit().isPresent()){ temp = getCurrentState().getUndoLimit().get(); } gameStates.remove(currentState); currentState -= 1; if (currentState >= 1){ gameStates.remove(currentState); currentState -= 1; if (temp != -1){ // int temp = getCurrentState().getUndoLimit().get(); temp -= 1; getCurrentState().setUndoLimit(Optional.of(temp)); } } checkpoint(); } /** * Get the maximum width of the game map. * This should be the same as that in {@link GameMap} public TerminalRenderingEngine(PrintStream outputSteam) { this.outputSteam = outputSteam; } public Box(int playerId) { this.playerId = playerId; } public Player(int id) { this.id = id; } public ShouldNotReachException() { super(\"This branch should not be reached.\"); }",
        "label": "P"
    },
    "1542": {
        "dataset": "COMP 3021",
        "project": "hywongcj",
        "bug_id": "37",
        "T": "void testGetUndoUnlimited() { final var gameState = new GameState(TestHelper.parseGameMap(\"\"\" -1 ###### #.Aa@# #..a@# ###### \"\"\" )); }",
        "C": "public GameState(@NotNull GameMap map) { // TODO gameStates.add(map); checkpoint(); }",
        "label": "P"
    },
    "1543": {
        "dataset": "COMP 3021",
        "project": "hywongcj",
        "bug_id": "38",
        "T": "void testMapCopying() { final var maxWidth = 2333; final var maxHeight = 2333; final var random = new Random(); final var randomEntities = Stream.generate(() -> Position.of(random.nextInt(maxWidth), random.nextInt(maxHeight))) .distinct() .limit(100) .collect(Collectors.toMap(Function.identity(), it -> generateEntity(it.x()))); final var firstPos = randomEntities.keySet().stream().findFirst(); final var gameMap = new GameMap(maxWidth, maxHeight, Collections.singleton(firstPos.get()), 233); randomEntities.forEach(gameMap::putEntity); final var gameState = new GameState(gameMap); final var randomPosition = randomEntities.keySet().stream().findAny(); gameMap.putEntity(randomPosition.get(), new Empty()); randomEntities.forEach((p, e) -> assertEquals(e, gameState.getEntity(p))); }",
        "C": "public static @NotNull Position of(int x, int y) { return new Position(x, y); } public GameMap(int maxWidth, int maxHeight, Set<Position> destinations, int undoLimit) { // TODO this.maxWidth = maxWidth; this.maxHeight = maxHeight; this.destinations = destinations; if (!validateUndoLimit(undoLimit)) throw new IllegalArgumentException(); this.undoLimit = (undoLimit >= 0)? Optional.of(undoLimit) : Optional.empty(); this.playerIds = new HashSet<>(); this.entityMap = new Entity[maxHeight][maxWidth]; } GameMap(GameMap copy) { maxWidth = copy.maxWidth; maxHeight = copy.maxHeight; destinations = new HashSet<>(); destinations.addAll(copy.destinations); undoLimit = (copy.undoLimit.isPresent())? Optional.of(copy.undoLimit.get()) : Optional.empty(); playerIds = new HashSet<>(); playerIds.addAll(copy.playerIds); entityMap = new Entity[maxHeight][maxWidth]; var copyEntityMap = copy.getEntityMap(); for (int i = 0; i < maxHeight; i++){ for (int j = 0; j < maxWidth; j++){ entityMap[i][j] = switch(copyEntityMap[i][j]){ case Box b -> new Box(b.getPlayerId()); case Empty ignored -> new Empty(); case Player p -> new Player(p.getId()); case Wall ignored -> new Wall(); case null -> null; }; } } } /** * Parses the map from a string representation. * The first line is undo limit. * Starting from the second line, the game map is represented as follows, * <li># represents a {@link Wall}</li> * <li>@ represents a box destination.</li> * <li>Any upper-case letter represents a {@link Player}.</li> * <li> * Any lower-case letter represents a {@link Box} that is only movable by the player with the corresponding upper-case letter. * For instance, box \"a\" can only be moved by player \"A\" and not movable by player \"B\". * </li> * <li>. represents an {@link Empty} position in the map, meaning there is no player or box currently at this position.</li> * <p> * Notes: * <li> * There can be at most 26 players. * All implementations of classes in the hk.ust.comp3021.game package should support up to 26 players. * </li> * <li> * For simplicity, we assume the given map is bounded with a closed boundary. * There is no need to check this point. * </li> * <li> * Example maps can be found in \"src/main/resources\". * </li> * * @param mapText The string representation. * @return The parsed GameMap object. * @throws IllegalArgumentException if undo limit is negative but not -1. * @throws IllegalArgumentException if there are multiple same upper-case letters, i.e., one player can only exist at one position. * @throws IllegalArgumentException if there are no players in the map. * @throws IllegalArgumentException if the number of boxes is not equal to the number of box destinations. * @throws IllegalArgumentException if there are boxes whose {@link Box#getPlayerId()} public GameState(@NotNull GameMap map) { // TODO gameStates.add(map); checkpoint(); } public void putEntity(Position position, Entity entity) { // TODO entityMap[position.y()][position.x()] = entity; } public @Nullable Entity getEntity(@NotNull Position position) { // TODO return getCurrentState().getEntity(position); } /** * Get all box destination positions as a set in the game map. * This should be the same as that in {@link GameMap}",
        "label": "F"
    },
    "1544": {
        "dataset": "COMP 3021",
        "project": "hywongcj",
        "bug_id": "39",
        "T": "void testUndoWhenThereIsMoveButNoCheckpoint() { final var gameState = new GameState(TestHelper.parseGameMap(\"\"\" 233 ###### #A.a@# #..a@# ###### \"\"\" )); gameState.move(Position.of(1, 1), Position.of(2, 1)); gameState.undo(); }",
        "C": "public GameState(@NotNull GameMap map) { // TODO gameStates.add(map); checkpoint(); } public void move(Position from, Position to) { // TODO var currentGameMap = getCurrentState(); currentGameMap.putEntity(to, currentGameMap.getEntity(from)); currentGameMap.putEntity(from, new Empty()); } /** * Record a checkpoint of the game state, including: * <li>All current positions of entities in the game map.</li> * <li>Current undo quota</li> * <p> * Checkpoint is used in {@link GameState#undo()} public static @NotNull Position of(int x, int y) { return new Position(x, y); } public void undo() { // TODO int temp = -1; if (getCurrentState().getUndoLimit().isPresent()){ temp = getCurrentState().getUndoLimit().get(); } gameStates.remove(currentState); currentState -= 1; if (currentState >= 1){ gameStates.remove(currentState); currentState -= 1; if (temp != -1){ // int temp = getCurrentState().getUndoLimit().get(); temp -= 1; getCurrentState().setUndoLimit(Optional.of(temp)); } } checkpoint(); } /** * Get the maximum width of the game map. * This should be the same as that in {@link GameMap}",
        "label": "P"
    },
    "1545": {
        "dataset": "COMP 3021",
        "project": "hywongcj",
        "bug_id": "40",
        "T": "void testGameExit() { final var gameState = mock(GameState.class); final var inputEngine = mock(TerminalInputEngine.class); final var renderingEngine = mock(TerminalRenderingEngine.class); when(gameState.isWin()).thenReturn(false, false, false); when(inputEngine.fetchAction()) .thenReturn(new InvalidInput(0, \"\"), new InvalidInput(0, \"\"), new Exit(0)); final var game = new TerminalSokobanGame(gameState, inputEngine, renderingEngine); game.run(); verify(renderingEngine, atLeastOnce()).message(any()); }",
        "C": "public InvalidInput(int initiator, @NotNull String message) { super(initiator); this.message = message; } public Exit(int initiator) { super(initiator); } public TerminalSokobanGame(GameState gameState, TerminalInputEngine inputEngine, TerminalRenderingEngine renderingEngine) { super(gameState); this.inputEngine = inputEngine; this.renderingEngine = renderingEngine; // TODO // Check the number of players if (gameState.getAllPlayerPositions().size() > 2) throw new IllegalArgumentException(); } public void run() { // TODO renderingEngine.message(GAME_READY_MESSAGE); renderingEngine.render(state); /*if (state.getUndoQuota().isPresent()) renderingEngine.message(String.format(UNDO_QUOTA_TEMPLATE, state.getUndoQuota().get())); else renderingEngine.message(UNDO_QUOTA_UNLIMITED);*/ while(!shouldStop()){ if (state.getUndoQuota().isPresent()) renderingEngine.message(String.format(UNDO_QUOTA_TEMPLATE, state.getUndoQuota().get())); else renderingEngine.message(UNDO_QUOTA_UNLIMITED); renderingEngine.message(\">>>\"); final var result = processAction(inputEngine.fetchAction()); if (result instanceof ActionResult.Failed) renderingEngine.message(((ActionResult.Failed) result).getReason()); renderingEngine.render(state); } renderingEngine.message(GAME_EXIT_MESSAGE); if (state.isWin()) renderingEngine.message(WIN_MESSAGE); // System.exit(0); }",
        "label": "P"
    },
    "1546": {
        "dataset": "COMP 3021",
        "project": "hywongcj",
        "bug_id": "41",
        "T": "void testGameWin() { final var gameState = mock(GameState.class); final var inputEngine = mock(TerminalInputEngine.class); final var renderingEngine = mock(TerminalRenderingEngine.class); when(gameState.isWin()).thenReturn(false, false, false, true); when(inputEngine.fetchAction()) .thenReturn(new InvalidInput(0, \"\")); final var game = new TerminalSokobanGame(gameState, inputEngine, renderingEngine); game.run(); verify(gameState, atLeastOnce()).isWin(); verify(renderingEngine, atLeastOnce()).message(any()); }",
        "C": "public InvalidInput(int initiator, @NotNull String message) { super(initiator); this.message = message; } public TerminalSokobanGame(GameState gameState, TerminalInputEngine inputEngine, TerminalRenderingEngine renderingEngine) { super(gameState); this.inputEngine = inputEngine; this.renderingEngine = renderingEngine; // TODO // Check the number of players if (gameState.getAllPlayerPositions().size() > 2) throw new IllegalArgumentException(); } public void run() { // TODO renderingEngine.message(GAME_READY_MESSAGE); renderingEngine.render(state); /*if (state.getUndoQuota().isPresent()) renderingEngine.message(String.format(UNDO_QUOTA_TEMPLATE, state.getUndoQuota().get())); else renderingEngine.message(UNDO_QUOTA_UNLIMITED);*/ while(!shouldStop()){ if (state.getUndoQuota().isPresent()) renderingEngine.message(String.format(UNDO_QUOTA_TEMPLATE, state.getUndoQuota().get())); else renderingEngine.message(UNDO_QUOTA_UNLIMITED); renderingEngine.message(\">>>\"); final var result = processAction(inputEngine.fetchAction()); if (result instanceof ActionResult.Failed) renderingEngine.message(((ActionResult.Failed) result).getReason()); renderingEngine.render(state); } renderingEngine.message(GAME_EXIT_MESSAGE); if (state.isWin()) renderingEngine.message(WIN_MESSAGE); // System.exit(0); }",
        "label": "P"
    },
    "1547": {
        "dataset": "COMP 3021",
        "project": "hywongcj",
        "bug_id": "42",
        "T": "void testMoreThanTwoPlayers() { final var gameState = mock(GameState.class); final var inputEngine = mock(TerminalInputEngine.class); final var renderingEngine = mock(TerminalRenderingEngine.class); when(gameState.getAllPlayerPositions()).thenReturn(new HashSet<>(Arrays.asList(Position.of(1, 1), Position.of(1, 2), Position.of(1, 3)))); }",
        "C": "public static @NotNull Position of(int x, int y) { return new Position(x, y); }",
        "label": "P"
    },
    "1548": {
        "dataset": "COMP 3021",
        "project": "rvtanuwijaya",
        "bug_id": "0",
        "T": "void moveUp() { Position.of(233, 232), new Move.Up(-1).nextPosition(pos) ); }",
        "C": "public static @NotNull Position of(int x, int y) { return new Position(x, y); } public Up(int initiator) { super(initiator); }",
        "label": "P"
    },
    "1549": {
        "dataset": "COMP 3021",
        "project": "rvtanuwijaya",
        "bug_id": "1",
        "T": "void moveDown() { Position.of(233, 234), new Move.Down(-1).nextPosition(pos) ); }",
        "C": "public static @NotNull Position of(int x, int y) { return new Position(x, y); } public Down(int initiator) { super(initiator); }",
        "label": "P"
    },
    "1550": {
        "dataset": "COMP 3021",
        "project": "rvtanuwijaya",
        "bug_id": "2",
        "T": "void moveRight() { Position.of(234, 233), new Move.Right(-1).nextPosition(pos) ); }",
        "C": "public static @NotNull Position of(int x, int y) { return new Position(x, y); } public Right(int initiator) { super(initiator); }",
        "label": "P"
    },
    "1551": {
        "dataset": "COMP 3021",
        "project": "rvtanuwijaya",
        "bug_id": "3",
        "T": "void testExceedingUndoQuota() { final var gameState = mock(GameState.class); when(gameState.getPlayerPositionById(anyInt())).thenReturn(Position.of(0, 0)); when(gameState.getUndoQuota()).thenReturn(Optional.of(0)); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Undo(0)); }",
        "C": "public Undo(int initiator) { super(initiator); }",
        "label": "P"
    },
    "1552": {
        "dataset": "COMP 3021",
        "project": "rvtanuwijaya",
        "bug_id": "4",
        "T": "void testExit() { final var gameState = mock(GameState.class); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Exit(0)); }",
        "C": "public Exit(int initiator) { super(initiator); }",
        "label": "P"
    },
    "1553": {
        "dataset": "COMP 3021",
        "project": "rvtanuwijaya",
        "bug_id": "5",
        "T": "void testUndoUnlimited() { final var gameState = mock(GameState.class); when(gameState.getPlayerPositionById(anyInt())).thenReturn(Position.of(0, 0)); when(gameState.getUndoQuota()).thenReturn(Optional.empty()); final var game = new SokobanGameForTesting(gameState); for (int i = 0; i < 10000; i++) { final var result = game.feedActionForProcessing(new Undo(0)); } verify(gameState, times(10000)).undo(); }",
        "C": "public Undo(int initiator) { super(initiator); }",
        "label": "P"
    },
    "1554": {
        "dataset": "COMP 3021",
        "project": "rvtanuwijaya",
        "bug_id": "6",
        "T": "void testPushOtherPlayerBox() { String mapText = \"\"\" 233 ###### #AB.@# #b.a.# #@...# ###### \"\"\"; final var testMap = TestHelper.parseGameMap(mapText); final var gameState = spy(new GameState(testMap)); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Move.Down(0)); verify(gameState, never()).move(any(), any()); }",
        "C": "public GameState(@NotNull GameMap map) { // TODO this.map = map; this.mapHashMap = map.mapHashMap; this.undoQuota = map.undoLimit; this.crateLocations = map.crateLocations; checkpoint(); //getUndoQuota(); //throw new NotImplementedException(); } public Down(int initiator) { super(initiator); }",
        "label": "P"
    },
    "1555": {
        "dataset": "COMP 3021",
        "project": "rvtanuwijaya",
        "bug_id": "7",
        "T": "void testMoveNonExistingPlayer() { String mapText = \"\"\" 233 ###### #A..@# #a...# ##...# ###### \"\"\"; final var testMap = TestHelper.parseGameMap(mapText); final var gameState = spy(new GameState(testMap)); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Move.Down(23)); }",
        "C": "public GameState(@NotNull GameMap map) { // TODO this.map = map; this.mapHashMap = map.mapHashMap; this.undoQuota = map.undoLimit; this.crateLocations = map.crateLocations; checkpoint(); //getUndoQuota(); //throw new NotImplementedException(); } public Down(int initiator) { super(initiator); }",
        "label": "P"
    },
    "1556": {
        "dataset": "COMP 3021",
        "project": "rvtanuwijaya",
        "bug_id": "8",
        "T": "void testCheckpointWhenNeed() { final var gameState = spy(new GameState(TestHelper.parseGameMap(\"\"\" 233 ###### #.Aa@# #..a@# ###### \"\"\" ))); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Move.Right(0)); verify(gameState, times(1)).checkpoint(); }",
        "C": "public GameState(@NotNull GameMap map) { // TODO this.map = map; this.mapHashMap = map.mapHashMap; this.undoQuota = map.undoLimit; this.crateLocations = map.crateLocations; checkpoint(); //getUndoQuota(); //throw new NotImplementedException(); } public Right(int initiator) { super(initiator); }",
        "label": "P"
    },
    "1557": {
        "dataset": "COMP 3021",
        "project": "rvtanuwijaya",
        "bug_id": "9",
        "T": "void testPushBoxAgainstWall() { String mapText = \"\"\" 233 ###### #A..@# #a...# ##...# ###### \"\"\"; final var testMap = TestHelper.parseGameMap(mapText); final var gameState = spy(new GameState(testMap)); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Move.Down(0)); verify(gameState, never()).move(any(), any()); }",
        "C": "public GameState(@NotNull GameMap map) { // TODO this.map = map; this.mapHashMap = map.mapHashMap; this.undoQuota = map.undoLimit; this.crateLocations = map.crateLocations; checkpoint(); //getUndoQuota(); //throw new NotImplementedException(); } public Down(int initiator) { super(initiator); }",
        "label": "P"
    },
    "1558": {
        "dataset": "COMP 3021",
        "project": "rvtanuwijaya",
        "bug_id": "10",
        "T": "void testCheckpointWhenNotNeed() { final var gameState = spy(new GameState(TestHelper.parseGameMap(\"\"\" 233 ###### #A.a@# #..a@# ###### \"\"\" ))); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Move.Right(0)); verify(gameState, never()).checkpoint(); } private static class SokobanGameForTesting extends AbstractSokobanGame { protected SokobanGameForTesting(GameState gameState) { super(gameState); } @Override public void run() { } public ActionResult feedActionForProcessing(Action action) { return processAction(action); } }",
        "C": "public GameState(@NotNull GameMap map) { // TODO this.map = map; this.mapHashMap = map.mapHashMap; this.undoQuota = map.undoLimit; this.crateLocations = map.crateLocations; checkpoint(); //getUndoQuota(); //throw new NotImplementedException(); } public Right(int initiator) { super(initiator); } public void run() { // TODO renderingEngine.message(StringResources.GAME_READY_MESSAGE); renderingEngine.render(state); //int temp = state.getUndoQuota().get(); if (state.getUndoQuota().isEmpty()) { renderingEngine.message(String.format(StringResources.UNDO_QUOTA_TEMPLATE, StringResources.UNDO_QUOTA_UNLIMITED)); } else { renderingEngine.message(String.format(StringResources.UNDO_QUOTA_TEMPLATE, state.getUndoQuota().get()).toString()); } while (!shouldStop()) { Action input = inputEngine.fetchAction(); ActionResult result = processAction(input); renderingEngine.render(state); if (result.getClass() == ActionResult.Failed.class) { renderingEngine.message(((ActionResult.Failed) result).getReason()); } if (state.getUndoQuota().isEmpty()) { renderingEngine.message(String.format(StringResources.UNDO_QUOTA_TEMPLATE, StringResources.UNDO_QUOTA_UNLIMITED)); } else { renderingEngine.message(String.format(StringResources.UNDO_QUOTA_TEMPLATE, state.getUndoQuota().get()).toString() ); } renderingEngine.message(\">>>\"); // renderingEngine.render(state); // if (!(input == null)) { // ActionResult result = processAction(input); // if (result.getClass() == ActionResult.Success.class) { // renderingEngine.render(state); // } else { // renderingEngine.message(\"Invalid Input\"); // } // } } if (gameState.isWin()) { renderingEngine.message(StringResources.GAME_EXIT_MESSAGE); renderingEngine.message(StringResources.WIN_MESSAGE); } else { renderingEngine.message(StringResources.GAME_EXIT_MESSAGE); } return; //throw new NotImplementedException(); } protected ActionResult processAction(@NotNull Action action) { // TODO if(action == null) { return new ActionResult.Failed(action, StringResources.INVALID_INPUT_MESSAGE); } if (action.getClass().equals(Move.Down.class)) { int playerID = action.getInitiator(); Position playerPosition = state.getPlayerPositionById(playerID); if (playerPosition == null) { return new ActionResult.Failed(action, StringResources.PLAYER_NOT_FOUND); } Position downPosition = new Position(playerPosition.x(),playerPosition.y()+1); if (state.getEntity(downPosition).getClass() == Empty.class) { state.move(playerPosition,downPosition); } else if ((state.getEntity(downPosition).getClass() == Box.class)){ int boxID = state.crateLocations.get(downPosition); if (boxID == playerID) { Position downDownPosition = new Position(downPosition.x(),downPosition.y()+1); if (state.getEntity(downDownPosition).getClass() == Empty.class) { state.move(downPosition,downDownPosition); state.move(playerPosition, downPosition); state.crateLocations.put(downDownPosition, boxID); } else { return new ActionResult.Failed(action, \"Failed to move the box.\"); } } else { return new ActionResult.Failed(action, \"Unable to move another player's box.\"); } state.checkpoint(); } else if ((state.getEntity(downPosition).getClass() == Player.class)) { return new ActionResult.Failed(action, \"You hit a player.\"); } else { return new ActionResult.Failed(action, \"You hit a wall.\"); } //state.checkpoint(); return new ActionResult.Success(action); } if (action.getClass().equals(Move.Up.class)) { int playerID = action.getInitiator(); Position playerPosition = state.getPlayerPositionById(playerID); if (playerPosition == null) { return new ActionResult.Failed(action, StringResources.PLAYER_NOT_FOUND); } Position upPosition = new Position(playerPosition.x(),playerPosition.y()-1); if (state.getEntity(upPosition).getClass() == Empty.class) { state.move(playerPosition,upPosition); } else if ((state.getEntity(upPosition).getClass() == Box.class)){ int boxID = state.crateLocations.get(upPosition); if (boxID == playerID) { Position downDownPosition = new Position(upPosition.x(),upPosition.y()-1); if (state.getEntity(downDownPosition).getClass() == Empty.class) { state.move(upPosition,downDownPosition); state.move(playerPosition, upPosition); state.crateLocations.put(downDownPosition, boxID); } else { return new ActionResult.Failed(action, \"Failed to move the box.\"); } } else { return new ActionResult.Failed(action, \"Unable to move another player's box.\"); } state.checkpoint(); } else if ((state.getEntity(upPosition).getClass() == Player.class)) { return new ActionResult.Failed(action, \"You hit a player.\"); } else { return new ActionResult.Failed(action, \"You hit a wall.\"); } //state.checkpoint(); return new ActionResult.Success(action); } if (action.getClass().equals(Move.Left.class)) { int playerID = action.getInitiator(); Position playerPosition = state.getPlayerPositionById(playerID); if (playerPosition == null) { return new ActionResult.Failed(action, StringResources.PLAYER_NOT_FOUND); } Position leftPosition = new Position(playerPosition.x()-1,playerPosition.y()); if (state.getEntity(leftPosition).getClass() == Empty.class) { state.move(playerPosition,leftPosition); } else if ((state.getEntity(leftPosition).getClass() == Box.class)){ int boxID = state.crateLocations.get(leftPosition); if (boxID == playerID) { Position downDownPosition = new Position(leftPosition.x()-1,leftPosition.y()); if (state.getEntity(downDownPosition).getClass() == Empty.class) { state.move(leftPosition,downDownPosition); state.move(playerPosition, leftPosition); state.crateLocations.put(downDownPosition, boxID); } else { return new ActionResult.Failed(action, \"Failed to move the box.\"); } } else { return new ActionResult.Failed(action, \"Unable to move another player's box.\"); } state.checkpoint(); } else if ((state.getEntity(leftPosition).getClass() == Player.class)) { return new ActionResult.Failed(action, \"You hit a player.\"); } else { return new ActionResult.Failed(action, \"You hit a wall.\"); } //state.checkpoint(); return new ActionResult.Success(action); } if (action.getClass().equals(Move.Right.class)) { int playerID = action.getInitiator(); Position playerPosition = state.getPlayerPositionById(playerID); if (playerPosition == null) { return new ActionResult.Failed(action, StringResources.PLAYER_NOT_FOUND); } Position rightPosition = new Position(playerPosition.x()+1,playerPosition.y()); if (state.getEntity(rightPosition).getClass() == Empty.class) { state.move(playerPosition,rightPosition); } else if ((state.getEntity(rightPosition).getClass() == Box.class)){ int boxID = state.crateLocations.get(rightPosition); if (boxID == playerID) { Position downDownPosition = new Position(rightPosition.x()+1,rightPosition.y()); if (state.getEntity(downDownPosition).getClass() == Empty.class) { state.move(rightPosition,downDownPosition); state.move(playerPosition, rightPosition); state.crateLocations.put(downDownPosition, boxID); } else { return new ActionResult.Failed(action, \"Failed to move the box.\"); } } else { return new ActionResult.Failed(action, \"Unable to move another player's box.\"); } state.checkpoint(); } else if ((state.getEntity(rightPosition).getClass() == Player.class)) { return new ActionResult.Failed(action, \"You hit a player.\"); } else { return new ActionResult.Failed(action, \"You hit a wall.\"); } //state.checkpoint(); return new ActionResult.Success(action); } if (action.getClass() == Exit.class) { state.exitBool = true; return new ActionResult.Success(action); } if (action.getClass() == Undo.class) { if (state.getUndoQuota().equals(Optional.of(0))){ return new ActionResult.Failed(action, StringResources.UNDO_QUOTA_RUN_OUT); } state.undo(); return new ActionResult.Success(action); } return new ActionResult.Failed(action, StringResources.INVALID_INPUT_MESSAGE); //throw new NotImplementedException(); }",
        "label": "P"
    },
    "1559": {
        "dataset": "COMP 3021",
        "project": "rvtanuwijaya",
        "bug_id": "11",
        "T": "void testHitAnotherPlayer() { String mapText = \"\"\" 233 ###### #A..@# #B...# #ab.@# ###### \"\"\"; final var testMap = TestHelper.parseGameMap(mapText); final var gameState = spy(new GameState(testMap)); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Move.Down(0)); verify(gameState, never()).move(any(), any()); }",
        "C": "public GameState(@NotNull GameMap map) { // TODO this.map = map; this.mapHashMap = map.mapHashMap; this.undoQuota = map.undoLimit; this.crateLocations = map.crateLocations; checkpoint(); //getUndoQuota(); //throw new NotImplementedException(); } public Down(int initiator) { super(initiator); }",
        "label": "P"
    },
    "1560": {
        "dataset": "COMP 3021",
        "project": "rvtanuwijaya",
        "bug_id": "12",
        "T": "void testUndoWithinQuota() { final var gameState = mock(GameState.class); when(gameState.getPlayerPositionById(anyInt())).thenReturn(Position.of(0, 0)); when(gameState.getUndoQuota()).thenReturn(Optional.of(1)); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Undo(0)); verify(gameState, times(1)).undo(); }",
        "C": "public Undo(int initiator) { super(initiator); }",
        "label": "P"
    },
    "1561": {
        "dataset": "COMP 3021",
        "project": "rvtanuwijaya",
        "bug_id": "13",
        "T": "void testInvalidInput() { final var game = new SokobanGameForTesting(mock(GameState.class)); final var message = String.valueOf(new Random().nextLong()); final var action = new InvalidInput(-1, message); final var result = game.feedActionForProcessing(action); }",
        "C": "public InvalidInput(int initiator, @NotNull String message) { super(initiator); this.message = message; }",
        "label": "P"
    },
    "1562": {
        "dataset": "COMP 3021",
        "project": "rvtanuwijaya",
        "bug_id": "14",
        "T": "void testUndoLimitParsing() { final var gameMap = TestHelper.parseGameMap(rectangularMap); }",
        "C": "",
        "label": "P"
    },
    "1563": {
        "dataset": "COMP 3021",
        "project": "rvtanuwijaya",
        "bug_id": "15",
        "T": "void testWidthForNonRectangularMap() { final var gameMap = TestHelper.parseGameMap(nonRectangularMap); }",
        "C": "",
        "label": "P"
    },
    "1564": {
        "dataset": "COMP 3021",
        "project": "rvtanuwijaya",
        "bug_id": "16",
        "T": "void testTwoPlayersMap() { final var twoPlayersMap = \"\"\" 233 ###### #A..@# #..B@# #....# #.a..# #..b.# ###### \"\"\"; final var gameMap = TestHelper.parseGameMap(twoPlayersMap); final var playerIds = gameMap.getPlayerIds(); final var expectedIds = new HashSet<Integer>(); expectedIds.add(0); expectedIds.add(1); }",
        "C": "public Set<Integer> getPlayerIds() { // TODO Set<Integer> temp = new HashSet<Integer>(); for (int i = 0; i < getMaxWidth(); i++) { for (int j = 0; j < getMaxHeight(); j++) { Position tempPosition = new Position(i,j); Entity tempEntity = mapHashMap.get(tempPosition); if ((tempEntity != null) && (tempEntity.getClass() == Player.class)) { temp.add(((Player) tempEntity).getId()); } } } //mapHashMap.forEach((); return temp; //throw new NotImplementedException(); }",
        "label": "P"
    },
    "1565": {
        "dataset": "COMP 3021",
        "project": "rvtanuwijaya",
        "bug_id": "17",
        "T": "void testMapWithoutPlayer() { final var invalidMap = \"\"\" 233 ### #.# ### \"\"\"; } // @Tag(TestKind.HIDDEN) // @Test // void testUnmatchedPlayersAndBoxes() { // final var invalidMap = \"\"\" // 233 // ###### // #A..@# // #...@# // #a.b@# // #.a.@# // #..a.# // ###### // \"\"\"; // assertThrowsExactly(IllegalArgumentException.class, () -> TestHelper.parseGameMap(invalidMap)); // }",
        "C": "",
        "label": "P"
    },
    "1566": {
        "dataset": "COMP 3021",
        "project": "rvtanuwijaya",
        "bug_id": "18",
        "T": "void testManyPlayersMap() { final var manyPlayersMap = \"\"\" 233 ###### #A.P@@# #vCB@@# #.cpD@# #Ga.d@# #g.bV@# ###### \"\"\"; final var gameMap = TestHelper.parseGameMap(manyPlayersMap); final var playerIds = gameMap.getPlayerIds(); final var expectedIds = new HashSet<>(Arrays.asList( 0, 'P' - 'A', 'C' - 'A', 'B' - 'A', 'D' - 'A', 'G' - 'A', 'V' - 'A' )); }",
        "C": "public Set<Integer> getPlayerIds() { // TODO Set<Integer> temp = new HashSet<Integer>(); for (int i = 0; i < getMaxWidth(); i++) { for (int j = 0; j < getMaxHeight(); j++) { Position tempPosition = new Position(i,j); Entity tempEntity = mapHashMap.get(tempPosition); if ((tempEntity != null) && (tempEntity.getClass() == Player.class)) { temp.add(((Player) tempEntity).getId()); } } } //mapHashMap.forEach((); return temp; //throw new NotImplementedException(); }",
        "label": "P"
    },
    "1567": {
        "dataset": "COMP 3021",
        "project": "rvtanuwijaya",
        "bug_id": "19",
        "T": "void testHeightForNonRectangularMap() { final var gameMap = TestHelper.parseGameMap(nonRectangularMap); }",
        "C": "",
        "label": "P"
    },
    "1568": {
        "dataset": "COMP 3021",
        "project": "rvtanuwijaya",
        "bug_id": "20",
        "T": "void testDuplicatedPlayers() { final var invalidMap = \"\"\" 233 ###### #A..@# #..A@# #....# #.a..# #..b.# ###### \"\"\"; }",
        "C": "",
        "label": "P"
    },
    "1569": {
        "dataset": "COMP 3021",
        "project": "rvtanuwijaya",
        "bug_id": "21",
        "T": "void testParseMapWithoutUndoLimit() { final var invalidMap = String.join(\"\\n\", rectangularMap.lines().skip(1).toList()); }",
        "C": "",
        "label": "P"
    },
    "1570": {
        "dataset": "COMP 3021",
        "project": "rvtanuwijaya",
        "bug_id": "22",
        "T": "void testInsufficientDestinations() { final var invalidMap = \"\"\" 233 ###### #A..@# #...@# #a...# #.a..# #..a.# ###### \"\"\"; }",
        "C": "",
        "label": "P"
    },
    "1571": {
        "dataset": "COMP 3021",
        "project": "rvtanuwijaya",
        "bug_id": "23",
        "T": "void testSuperLargeMap() { try { new GameMap(Integer.MAX_VALUE, Integer.MAX_VALUE, Collections.emptySet(), 0); } catch (OutOfMemoryError e) { throw new RuntimeException(e); } }); }",
        "C": "public GameMap(int maxWidth, int maxHeight, Set<Position> destinations, int undoLimit) { // TODO this.maxWidth = maxWidth; this.maxHeight = maxHeight; this.destinations = destinations; this.undoLimit = undoLimit; //throw new NotImplementedException(); } /** * Parses the map from a string representation. * The first line is undo limit. * Starting from the second line, the game map is represented as follows, * <li># represents a {@link Wall}</li> * <li>@ represents a box destination.</li> * <li>Any upper-case letter represents a {@link Player}.</li> * <li> * Any lower-case letter represents a {@link Box} that is only movable by the player with the corresponding upper-case letter. * For instance, box \"a\" can only be moved by player \"A\" and not movable by player \"B\". * </li> * <li>. represents an {@link Empty} position in the map, meaning there is no player or box currently at this position.</li> * <p> * Notes: * <li> * There can be at most 26 players. * All implementations of classes in the hk.ust.comp3021.game package should support up to 26 players. * </li> * <li> * For simplicity, we assume the given map is bounded with a closed boundary. * There is no need to check this point. * </li> * <li> * Example maps can be found in \"src/main/resources\". * </li> * * @param mapText The string representation. * @return The parsed GameMap object. * @throws IllegalArgumentException if undo limit is negative but not -1. * @throws IllegalArgumentException if there are multiple same upper-case letters, i.e., one player can only exist at one position. * @throws IllegalArgumentException if there are no players in the map. * @throws IllegalArgumentException if the number of boxes is not equal to the number of box destinations. * @throws IllegalArgumentException if there are boxes whose {@link Box#getPlayerId()}",
        "label": "P"
    },
    "1572": {
        "dataset": "COMP 3021",
        "project": "rvtanuwijaya",
        "bug_id": "24",
        "T": "void testInvalidUndoLimit() { final var invalidMap = \"\"\" -233 ###### #A..@# #...@# #a.b@# #.a.@# #..a.# ###### \"\"\"; }",
        "C": "",
        "label": "P"
    },
    "1573": {
        "dataset": "COMP 3021",
        "project": "rvtanuwijaya",
        "bug_id": "25",
        "T": "void testEmptyMap() { final var invalidMap = \"\"; }",
        "C": "",
        "label": "P"
    },
    "1574": {
        "dataset": "COMP 3021",
        "project": "rvtanuwijaya",
        "bug_id": "26",
        "T": "void testMove(String input, String name, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); } private InputStream fixValueStream(String content) { final var bytes = content.getBytes(StandardCharsets.UTF_8); return new ByteArrayInputStream(bytes); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine(); // TODO Action actions = null; if (inputLine.equals(\"W\") || inputLine.equals(\"w\") ) { actions = new Move.Up(0); } if (inputLine.equals(\"A\") || inputLine.equals(\"a\") ) { actions = new Move.Left(0); } if (inputLine.equals(\"S\") || inputLine.equals(\"s\") ) { actions = new Move.Down(0); } if (inputLine.equals(\"D\") || inputLine.equals(\"d\") ) { actions = new Move.Right(0); } if (inputLine.equals(\"H\") || inputLine.equals(\"h\") ) { actions = new Move.Left(1); } if (inputLine.equals(\"J\") || inputLine.equals(\"j\") ) { actions = new Move.Down(1); } if (inputLine.equals(\"K\") || inputLine.equals(\"k\") ) { actions = new Move.Up(1); } if (inputLine.equals(\"L\") || inputLine.equals(\"l\") ) { actions = new Move.Right(1); } if (inputLine.equals(\"U\") || inputLine.equals(\"u\") ) { actions = new Undo(0); } if (inputLine.equals(\"exit\")) { actions = new Exit(0); } return actions; //throw new NotImplementedException(); }",
        "label": "P"
    },
    "1575": {
        "dataset": "COMP 3021",
        "project": "rvtanuwijaya",
        "bug_id": "27",
        "T": "void testMove(String input, String name, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); } private InputStream fixValueStream(String content) { final var bytes = content.getBytes(StandardCharsets.UTF_8); return new ByteArrayInputStream(bytes); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine(); // TODO Action actions = null; if (inputLine.equals(\"W\") || inputLine.equals(\"w\") ) { actions = new Move.Up(0); } if (inputLine.equals(\"A\") || inputLine.equals(\"a\") ) { actions = new Move.Left(0); } if (inputLine.equals(\"S\") || inputLine.equals(\"s\") ) { actions = new Move.Down(0); } if (inputLine.equals(\"D\") || inputLine.equals(\"d\") ) { actions = new Move.Right(0); } if (inputLine.equals(\"H\") || inputLine.equals(\"h\") ) { actions = new Move.Left(1); } if (inputLine.equals(\"J\") || inputLine.equals(\"j\") ) { actions = new Move.Down(1); } if (inputLine.equals(\"K\") || inputLine.equals(\"k\") ) { actions = new Move.Up(1); } if (inputLine.equals(\"L\") || inputLine.equals(\"l\") ) { actions = new Move.Right(1); } if (inputLine.equals(\"U\") || inputLine.equals(\"u\") ) { actions = new Undo(0); } if (inputLine.equals(\"exit\")) { actions = new Exit(0); } return actions; //throw new NotImplementedException(); }",
        "label": "P"
    },
    "1576": {
        "dataset": "COMP 3021",
        "project": "rvtanuwijaya",
        "bug_id": "28",
        "T": "void testMove(String input, String name, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); } private InputStream fixValueStream(String content) { final var bytes = content.getBytes(StandardCharsets.UTF_8); return new ByteArrayInputStream(bytes); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine(); // TODO Action actions = null; if (inputLine.equals(\"W\") || inputLine.equals(\"w\") ) { actions = new Move.Up(0); } if (inputLine.equals(\"A\") || inputLine.equals(\"a\") ) { actions = new Move.Left(0); } if (inputLine.equals(\"S\") || inputLine.equals(\"s\") ) { actions = new Move.Down(0); } if (inputLine.equals(\"D\") || inputLine.equals(\"d\") ) { actions = new Move.Right(0); } if (inputLine.equals(\"H\") || inputLine.equals(\"h\") ) { actions = new Move.Left(1); } if (inputLine.equals(\"J\") || inputLine.equals(\"j\") ) { actions = new Move.Down(1); } if (inputLine.equals(\"K\") || inputLine.equals(\"k\") ) { actions = new Move.Up(1); } if (inputLine.equals(\"L\") || inputLine.equals(\"l\") ) { actions = new Move.Right(1); } if (inputLine.equals(\"U\") || inputLine.equals(\"u\") ) { actions = new Undo(0); } if (inputLine.equals(\"exit\")) { actions = new Exit(0); } return actions; //throw new NotImplementedException(); }",
        "label": "P"
    },
    "1577": {
        "dataset": "COMP 3021",
        "project": "rvtanuwijaya",
        "bug_id": "29",
        "T": "void testMove(String input, String name, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); } private InputStream fixValueStream(String content) { final var bytes = content.getBytes(StandardCharsets.UTF_8); return new ByteArrayInputStream(bytes); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine(); // TODO Action actions = null; if (inputLine.equals(\"W\") || inputLine.equals(\"w\") ) { actions = new Move.Up(0); } if (inputLine.equals(\"A\") || inputLine.equals(\"a\") ) { actions = new Move.Left(0); } if (inputLine.equals(\"S\") || inputLine.equals(\"s\") ) { actions = new Move.Down(0); } if (inputLine.equals(\"D\") || inputLine.equals(\"d\") ) { actions = new Move.Right(0); } if (inputLine.equals(\"H\") || inputLine.equals(\"h\") ) { actions = new Move.Left(1); } if (inputLine.equals(\"J\") || inputLine.equals(\"j\") ) { actions = new Move.Down(1); } if (inputLine.equals(\"K\") || inputLine.equals(\"k\") ) { actions = new Move.Up(1); } if (inputLine.equals(\"L\") || inputLine.equals(\"l\") ) { actions = new Move.Right(1); } if (inputLine.equals(\"U\") || inputLine.equals(\"u\") ) { actions = new Undo(0); } if (inputLine.equals(\"exit\")) { actions = new Exit(0); } return actions; //throw new NotImplementedException(); }",
        "label": "P"
    },
    "1578": {
        "dataset": "COMP 3021",
        "project": "rvtanuwijaya",
        "bug_id": "30",
        "T": "void testMove(String input, String name, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); } private InputStream fixValueStream(String content) { final var bytes = content.getBytes(StandardCharsets.UTF_8); return new ByteArrayInputStream(bytes); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine(); // TODO Action actions = null; if (inputLine.equals(\"W\") || inputLine.equals(\"w\") ) { actions = new Move.Up(0); } if (inputLine.equals(\"A\") || inputLine.equals(\"a\") ) { actions = new Move.Left(0); } if (inputLine.equals(\"S\") || inputLine.equals(\"s\") ) { actions = new Move.Down(0); } if (inputLine.equals(\"D\") || inputLine.equals(\"d\") ) { actions = new Move.Right(0); } if (inputLine.equals(\"H\") || inputLine.equals(\"h\") ) { actions = new Move.Left(1); } if (inputLine.equals(\"J\") || inputLine.equals(\"j\") ) { actions = new Move.Down(1); } if (inputLine.equals(\"K\") || inputLine.equals(\"k\") ) { actions = new Move.Up(1); } if (inputLine.equals(\"L\") || inputLine.equals(\"l\") ) { actions = new Move.Right(1); } if (inputLine.equals(\"U\") || inputLine.equals(\"u\") ) { actions = new Undo(0); } if (inputLine.equals(\"exit\")) { actions = new Exit(0); } return actions; //throw new NotImplementedException(); }",
        "label": "P"
    },
    "1579": {
        "dataset": "COMP 3021",
        "project": "rvtanuwijaya",
        "bug_id": "31",
        "T": "void testMove(String input, String name, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); } private InputStream fixValueStream(String content) { final var bytes = content.getBytes(StandardCharsets.UTF_8); return new ByteArrayInputStream(bytes); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine(); // TODO Action actions = null; if (inputLine.equals(\"W\") || inputLine.equals(\"w\") ) { actions = new Move.Up(0); } if (inputLine.equals(\"A\") || inputLine.equals(\"a\") ) { actions = new Move.Left(0); } if (inputLine.equals(\"S\") || inputLine.equals(\"s\") ) { actions = new Move.Down(0); } if (inputLine.equals(\"D\") || inputLine.equals(\"d\") ) { actions = new Move.Right(0); } if (inputLine.equals(\"H\") || inputLine.equals(\"h\") ) { actions = new Move.Left(1); } if (inputLine.equals(\"J\") || inputLine.equals(\"j\") ) { actions = new Move.Down(1); } if (inputLine.equals(\"K\") || inputLine.equals(\"k\") ) { actions = new Move.Up(1); } if (inputLine.equals(\"L\") || inputLine.equals(\"l\") ) { actions = new Move.Right(1); } if (inputLine.equals(\"U\") || inputLine.equals(\"u\") ) { actions = new Undo(0); } if (inputLine.equals(\"exit\")) { actions = new Exit(0); } return actions; //throw new NotImplementedException(); }",
        "label": "P"
    },
    "1580": {
        "dataset": "COMP 3021",
        "project": "rvtanuwijaya",
        "bug_id": "32",
        "T": "void testMove(String input, String name, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); } private InputStream fixValueStream(String content) { final var bytes = content.getBytes(StandardCharsets.UTF_8); return new ByteArrayInputStream(bytes); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine(); // TODO Action actions = null; if (inputLine.equals(\"W\") || inputLine.equals(\"w\") ) { actions = new Move.Up(0); } if (inputLine.equals(\"A\") || inputLine.equals(\"a\") ) { actions = new Move.Left(0); } if (inputLine.equals(\"S\") || inputLine.equals(\"s\") ) { actions = new Move.Down(0); } if (inputLine.equals(\"D\") || inputLine.equals(\"d\") ) { actions = new Move.Right(0); } if (inputLine.equals(\"H\") || inputLine.equals(\"h\") ) { actions = new Move.Left(1); } if (inputLine.equals(\"J\") || inputLine.equals(\"j\") ) { actions = new Move.Down(1); } if (inputLine.equals(\"K\") || inputLine.equals(\"k\") ) { actions = new Move.Up(1); } if (inputLine.equals(\"L\") || inputLine.equals(\"l\") ) { actions = new Move.Right(1); } if (inputLine.equals(\"U\") || inputLine.equals(\"u\") ) { actions = new Undo(0); } if (inputLine.equals(\"exit\")) { actions = new Exit(0); } return actions; //throw new NotImplementedException(); }",
        "label": "P"
    },
    "1581": {
        "dataset": "COMP 3021",
        "project": "rvtanuwijaya",
        "bug_id": "33",
        "T": "void testMove(String input, String name, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); } private InputStream fixValueStream(String content) { final var bytes = content.getBytes(StandardCharsets.UTF_8); return new ByteArrayInputStream(bytes); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine(); // TODO Action actions = null; if (inputLine.equals(\"W\") || inputLine.equals(\"w\") ) { actions = new Move.Up(0); } if (inputLine.equals(\"A\") || inputLine.equals(\"a\") ) { actions = new Move.Left(0); } if (inputLine.equals(\"S\") || inputLine.equals(\"s\") ) { actions = new Move.Down(0); } if (inputLine.equals(\"D\") || inputLine.equals(\"d\") ) { actions = new Move.Right(0); } if (inputLine.equals(\"H\") || inputLine.equals(\"h\") ) { actions = new Move.Left(1); } if (inputLine.equals(\"J\") || inputLine.equals(\"j\") ) { actions = new Move.Down(1); } if (inputLine.equals(\"K\") || inputLine.equals(\"k\") ) { actions = new Move.Up(1); } if (inputLine.equals(\"L\") || inputLine.equals(\"l\") ) { actions = new Move.Right(1); } if (inputLine.equals(\"U\") || inputLine.equals(\"u\") ) { actions = new Undo(0); } if (inputLine.equals(\"exit\")) { actions = new Exit(0); } return actions; //throw new NotImplementedException(); }",
        "label": "P"
    },
    "1582": {
        "dataset": "COMP 3021",
        "project": "rvtanuwijaya",
        "bug_id": "34",
        "T": "void testUndo(String input, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine(); // TODO Action actions = null; if (inputLine.equals(\"W\") || inputLine.equals(\"w\") ) { actions = new Move.Up(0); } if (inputLine.equals(\"A\") || inputLine.equals(\"a\") ) { actions = new Move.Left(0); } if (inputLine.equals(\"S\") || inputLine.equals(\"s\") ) { actions = new Move.Down(0); } if (inputLine.equals(\"D\") || inputLine.equals(\"d\") ) { actions = new Move.Right(0); } if (inputLine.equals(\"H\") || inputLine.equals(\"h\") ) { actions = new Move.Left(1); } if (inputLine.equals(\"J\") || inputLine.equals(\"j\") ) { actions = new Move.Down(1); } if (inputLine.equals(\"K\") || inputLine.equals(\"k\") ) { actions = new Move.Up(1); } if (inputLine.equals(\"L\") || inputLine.equals(\"l\") ) { actions = new Move.Right(1); } if (inputLine.equals(\"U\") || inputLine.equals(\"u\") ) { actions = new Undo(0); } if (inputLine.equals(\"exit\")) { actions = new Exit(0); } return actions; //throw new NotImplementedException(); }",
        "label": "P"
    },
    "1583": {
        "dataset": "COMP 3021",
        "project": "rvtanuwijaya",
        "bug_id": "35",
        "T": "void testInvalidInput() { final var inputStream = fixValueStream(\"blah blah\"); final var inputEngine = new TerminalInputEngine(inputStream); final var action = inputEngine.fetchAction(); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine(); // TODO Action actions = null; if (inputLine.equals(\"W\") || inputLine.equals(\"w\") ) { actions = new Move.Up(0); } if (inputLine.equals(\"A\") || inputLine.equals(\"a\") ) { actions = new Move.Left(0); } if (inputLine.equals(\"S\") || inputLine.equals(\"s\") ) { actions = new Move.Down(0); } if (inputLine.equals(\"D\") || inputLine.equals(\"d\") ) { actions = new Move.Right(0); } if (inputLine.equals(\"H\") || inputLine.equals(\"h\") ) { actions = new Move.Left(1); } if (inputLine.equals(\"J\") || inputLine.equals(\"j\") ) { actions = new Move.Down(1); } if (inputLine.equals(\"K\") || inputLine.equals(\"k\") ) { actions = new Move.Up(1); } if (inputLine.equals(\"L\") || inputLine.equals(\"l\") ) { actions = new Move.Right(1); } if (inputLine.equals(\"U\") || inputLine.equals(\"u\") ) { actions = new Undo(0); } if (inputLine.equals(\"exit\")) { actions = new Exit(0); } return actions; //throw new NotImplementedException(); }",
        "label": "F"
    },
    "1584": {
        "dataset": "COMP 3021",
        "project": "rvtanuwijaya",
        "bug_id": "36",
        "T": "void testUndoWhenThereIsNoMove() { final var gameState = new GameState(TestHelper.parseGameMap(\"\"\" 233 ###### #A.a@# #..a@# ###### \"\"\" )); gameState.undo(); } private Entity generateEntity(int key) { return switch (key % 4) { case 0 -> new Box(0); case 1 -> new Empty(); case 2 -> new Player(0); case 3 -> new Wall(); default -> throw new ShouldNotReachException(); }; }",
        "C": "public GameState(@NotNull GameMap map) { // TODO this.map = map; this.mapHashMap = map.mapHashMap; this.undoQuota = map.undoLimit; this.crateLocations = map.crateLocations; checkpoint(); //getUndoQuota(); //throw new NotImplementedException(); } public void undo() { // TODO if (numOfCheckpoints == 1) { HashMap<Position, Entity> cloned = new HashMap<>(checkpoints.get(numOfCheckpoints-1)); this.mapHashMap = cloned; } if (numOfCheckpoints-2>=0) { if (!getUndoQuota().isEmpty()){ undoQuota--; } HashMap<Position, Entity> cloned = new HashMap<>(checkpoints.get(numOfCheckpoints-2)); numOfCheckpoints--; this.mapHashMap = cloned; } return; //throw new NotImplementedException(); } /** * Get the maximum width of the game map. * This should be the same as that in {@link GameMap} public Box(int playerId) { this.playerId = playerId; } public Player(int id) { this.id = id; } public ShouldNotReachException() { super(\"This branch should not be reached.\"); }",
        "label": "P"
    },
    "1585": {
        "dataset": "COMP 3021",
        "project": "rvtanuwijaya",
        "bug_id": "37",
        "T": "void testGetUndoUnlimited() { final var gameState = new GameState(TestHelper.parseGameMap(\"\"\" -1 ###### #.Aa@# #..a@# ###### \"\"\" )); }",
        "C": "public GameState(@NotNull GameMap map) { // TODO this.map = map; this.mapHashMap = map.mapHashMap; this.undoQuota = map.undoLimit; this.crateLocations = map.crateLocations; checkpoint(); //getUndoQuota(); //throw new NotImplementedException(); }",
        "label": "P"
    },
    "1586": {
        "dataset": "COMP 3021",
        "project": "rvtanuwijaya",
        "bug_id": "38",
        "T": "void testMapCopying() { final var maxWidth = 2333; final var maxHeight = 2333; final var random = new Random(); final var randomEntities = Stream.generate(() -> Position.of(random.nextInt(maxWidth), random.nextInt(maxHeight))) .distinct() .limit(100) .collect(Collectors.toMap(Function.identity(), it -> generateEntity(it.x()))); final var firstPos = randomEntities.keySet().stream().findFirst(); final var gameMap = new GameMap(maxWidth, maxHeight, Collections.singleton(firstPos.get()), 233); randomEntities.forEach(gameMap::putEntity); final var gameState = new GameState(gameMap); final var randomPosition = randomEntities.keySet().stream().findAny(); gameMap.putEntity(randomPosition.get(), new Empty()); randomEntities.forEach((p, e) -> assertEquals(e, gameState.getEntity(p))); }",
        "C": "public static @NotNull Position of(int x, int y) { return new Position(x, y); } public GameMap(int maxWidth, int maxHeight, Set<Position> destinations, int undoLimit) { // TODO this.maxWidth = maxWidth; this.maxHeight = maxHeight; this.destinations = destinations; this.undoLimit = undoLimit; //throw new NotImplementedException(); } /** * Parses the map from a string representation. * The first line is undo limit. * Starting from the second line, the game map is represented as follows, * <li># represents a {@link Wall}</li> * <li>@ represents a box destination.</li> * <li>Any upper-case letter represents a {@link Player}.</li> * <li> * Any lower-case letter represents a {@link Box} that is only movable by the player with the corresponding upper-case letter. * For instance, box \"a\" can only be moved by player \"A\" and not movable by player \"B\". * </li> * <li>. represents an {@link Empty} position in the map, meaning there is no player or box currently at this position.</li> * <p> * Notes: * <li> * There can be at most 26 players. * All implementations of classes in the hk.ust.comp3021.game package should support up to 26 players. * </li> * <li> * For simplicity, we assume the given map is bounded with a closed boundary. * There is no need to check this point. * </li> * <li> * Example maps can be found in \"src/main/resources\". * </li> * * @param mapText The string representation. * @return The parsed GameMap object. * @throws IllegalArgumentException if undo limit is negative but not -1. * @throws IllegalArgumentException if there are multiple same upper-case letters, i.e., one player can only exist at one position. * @throws IllegalArgumentException if there are no players in the map. * @throws IllegalArgumentException if the number of boxes is not equal to the number of box destinations. * @throws IllegalArgumentException if there are boxes whose {@link Box#getPlayerId()} public GameState(@NotNull GameMap map) { // TODO this.map = map; this.mapHashMap = map.mapHashMap; this.undoQuota = map.undoLimit; this.crateLocations = map.crateLocations; checkpoint(); //getUndoQuota(); //throw new NotImplementedException(); } public void putEntity(Position position, Entity entity) { // TODO mapHashMap.put(position, entity); if (entity.getClass() == Box.class) { crateLocations.put(position, ((Box) entity).getPlayerId()); } return; //throw new NotImplementedException(); } public @Nullable Entity getEntity(@NotNull Position position) { // TODO return mapHashMap.get(position); //throw new NotImplementedException(); } /** * Get all box destination positions as a set in the game map. * This should be the same as that in {@link GameMap}",
        "label": "F"
    },
    "1587": {
        "dataset": "COMP 3021",
        "project": "rvtanuwijaya",
        "bug_id": "39",
        "T": "void testUndoWhenThereIsMoveButNoCheckpoint() { final var gameState = new GameState(TestHelper.parseGameMap(\"\"\" 233 ###### #A.a@# #..a@# ###### \"\"\" )); gameState.move(Position.of(1, 1), Position.of(2, 1)); gameState.undo(); }",
        "C": "public GameState(@NotNull GameMap map) { // TODO this.map = map; this.mapHashMap = map.mapHashMap; this.undoQuota = map.undoLimit; this.crateLocations = map.crateLocations; checkpoint(); //getUndoQuota(); //throw new NotImplementedException(); } public void move(Position from, Position to) { // TODO Entity entityFrom = mapHashMap.get(from); Entity entityTo = mapHashMap.get(to); mapHashMap.remove(from,entityFrom); mapHashMap.remove(to,entityTo); mapHashMap.put(to, entityFrom); mapHashMap.put(from, new Empty()); // if (entityFrom.getClass() == Player.class) { // checkpoint(); // } return; //throw new NotImplementedException(); } /** * Record a checkpoint of the game state, including: * <li>All current positions of entities in the game map.</li> * <li>Current undo quota</li> * <p> * Checkpoint is used in {@link GameState#undo()} public static @NotNull Position of(int x, int y) { return new Position(x, y); } public void undo() { // TODO if (numOfCheckpoints == 1) { HashMap<Position, Entity> cloned = new HashMap<>(checkpoints.get(numOfCheckpoints-1)); this.mapHashMap = cloned; } if (numOfCheckpoints-2>=0) { if (!getUndoQuota().isEmpty()){ undoQuota--; } HashMap<Position, Entity> cloned = new HashMap<>(checkpoints.get(numOfCheckpoints-2)); numOfCheckpoints--; this.mapHashMap = cloned; } return; //throw new NotImplementedException(); } /** * Get the maximum width of the game map. * This should be the same as that in {@link GameMap}",
        "label": "P"
    },
    "1588": {
        "dataset": "COMP 3021",
        "project": "rvtanuwijaya",
        "bug_id": "40",
        "T": "void testGameExit() { final var gameState = mock(GameState.class); final var inputEngine = mock(TerminalInputEngine.class); final var renderingEngine = mock(TerminalRenderingEngine.class); when(gameState.isWin()).thenReturn(false, false, false); when(inputEngine.fetchAction()) .thenReturn(new InvalidInput(0, \"\"), new InvalidInput(0, \"\"), new Exit(0)); final var game = new TerminalSokobanGame(gameState, inputEngine, renderingEngine); game.run(); verify(renderingEngine, atLeastOnce()).message(any()); }",
        "C": "public InvalidInput(int initiator, @NotNull String message) { super(initiator); this.message = message; } public Exit(int initiator) { super(initiator); } public TerminalSokobanGame(GameState gameState, TerminalInputEngine inputEngine, TerminalRenderingEngine renderingEngine) { super(gameState); this.inputEngine = inputEngine; this.renderingEngine = renderingEngine; // TODO this.gameState = gameState; if (gameState.getAllPlayerPositions().size()>2) { throw new IllegalArgumentException(); } // Check the number of players //throw new NotImplementedException(); } public void run() { // TODO renderingEngine.message(StringResources.GAME_READY_MESSAGE); renderingEngine.render(state); //int temp = state.getUndoQuota().get(); if (state.getUndoQuota().isEmpty()) { renderingEngine.message(String.format(StringResources.UNDO_QUOTA_TEMPLATE, StringResources.UNDO_QUOTA_UNLIMITED)); } else { renderingEngine.message(String.format(StringResources.UNDO_QUOTA_TEMPLATE, state.getUndoQuota().get()).toString()); } while (!shouldStop()) { Action input = inputEngine.fetchAction(); ActionResult result = processAction(input); renderingEngine.render(state); if (result.getClass() == ActionResult.Failed.class) { renderingEngine.message(((ActionResult.Failed) result).getReason()); } if (state.getUndoQuota().isEmpty()) { renderingEngine.message(String.format(StringResources.UNDO_QUOTA_TEMPLATE, StringResources.UNDO_QUOTA_UNLIMITED)); } else { renderingEngine.message(String.format(StringResources.UNDO_QUOTA_TEMPLATE, state.getUndoQuota().get()).toString() ); } renderingEngine.message(\">>>\"); // renderingEngine.render(state); // if (!(input == null)) { // ActionResult result = processAction(input); // if (result.getClass() == ActionResult.Success.class) { // renderingEngine.render(state); // } else { // renderingEngine.message(\"Invalid Input\"); // } // } } if (gameState.isWin()) { renderingEngine.message(StringResources.GAME_EXIT_MESSAGE); renderingEngine.message(StringResources.WIN_MESSAGE); } else { renderingEngine.message(StringResources.GAME_EXIT_MESSAGE); } return; //throw new NotImplementedException(); }",
        "label": "P"
    },
    "1589": {
        "dataset": "COMP 3021",
        "project": "rvtanuwijaya",
        "bug_id": "41",
        "T": "void testGameWin() { final var gameState = mock(GameState.class); final var inputEngine = mock(TerminalInputEngine.class); final var renderingEngine = mock(TerminalRenderingEngine.class); when(gameState.isWin()).thenReturn(false, false, false, true); when(inputEngine.fetchAction()) .thenReturn(new InvalidInput(0, \"\")); final var game = new TerminalSokobanGame(gameState, inputEngine, renderingEngine); game.run(); verify(gameState, atLeastOnce()).isWin(); verify(renderingEngine, atLeastOnce()).message(any()); }",
        "C": "public InvalidInput(int initiator, @NotNull String message) { super(initiator); this.message = message; } public TerminalSokobanGame(GameState gameState, TerminalInputEngine inputEngine, TerminalRenderingEngine renderingEngine) { super(gameState); this.inputEngine = inputEngine; this.renderingEngine = renderingEngine; // TODO this.gameState = gameState; if (gameState.getAllPlayerPositions().size()>2) { throw new IllegalArgumentException(); } // Check the number of players //throw new NotImplementedException(); } public void run() { // TODO renderingEngine.message(StringResources.GAME_READY_MESSAGE); renderingEngine.render(state); //int temp = state.getUndoQuota().get(); if (state.getUndoQuota().isEmpty()) { renderingEngine.message(String.format(StringResources.UNDO_QUOTA_TEMPLATE, StringResources.UNDO_QUOTA_UNLIMITED)); } else { renderingEngine.message(String.format(StringResources.UNDO_QUOTA_TEMPLATE, state.getUndoQuota().get()).toString()); } while (!shouldStop()) { Action input = inputEngine.fetchAction(); ActionResult result = processAction(input); renderingEngine.render(state); if (result.getClass() == ActionResult.Failed.class) { renderingEngine.message(((ActionResult.Failed) result).getReason()); } if (state.getUndoQuota().isEmpty()) { renderingEngine.message(String.format(StringResources.UNDO_QUOTA_TEMPLATE, StringResources.UNDO_QUOTA_UNLIMITED)); } else { renderingEngine.message(String.format(StringResources.UNDO_QUOTA_TEMPLATE, state.getUndoQuota().get()).toString() ); } renderingEngine.message(\">>>\"); // renderingEngine.render(state); // if (!(input == null)) { // ActionResult result = processAction(input); // if (result.getClass() == ActionResult.Success.class) { // renderingEngine.render(state); // } else { // renderingEngine.message(\"Invalid Input\"); // } // } } if (gameState.isWin()) { renderingEngine.message(StringResources.GAME_EXIT_MESSAGE); renderingEngine.message(StringResources.WIN_MESSAGE); } else { renderingEngine.message(StringResources.GAME_EXIT_MESSAGE); } return; //throw new NotImplementedException(); }",
        "label": "P"
    },
    "1590": {
        "dataset": "COMP 3021",
        "project": "rvtanuwijaya",
        "bug_id": "42",
        "T": "void testMoreThanTwoPlayers() { final var gameState = mock(GameState.class); final var inputEngine = mock(TerminalInputEngine.class); final var renderingEngine = mock(TerminalRenderingEngine.class); when(gameState.getAllPlayerPositions()).thenReturn(new HashSet<>(Arrays.asList(Position.of(1, 1), Position.of(1, 2), Position.of(1, 3)))); }",
        "C": "public static @NotNull Position of(int x, int y) { return new Position(x, y); }",
        "label": "P"
    },
    "1591": {
        "dataset": "COMP 3021",
        "project": "kcmaad",
        "bug_id": "0",
        "T": "void moveUp() { Position.of(233, 232), new Move.Up(-1).nextPosition(pos) ); }",
        "C": "public static @NotNull Position of(int x, int y) { return new Position(x, y); } public Up(int initiator) { super(initiator); }",
        "label": "F"
    },
    "1592": {
        "dataset": "COMP 3021",
        "project": "kcmaad",
        "bug_id": "1",
        "T": "void moveDown() { Position.of(233, 234), new Move.Down(-1).nextPosition(pos) ); }",
        "C": "public static @NotNull Position of(int x, int y) { return new Position(x, y); } public Down(int initiator) { super(initiator); }",
        "label": "F"
    },
    "1593": {
        "dataset": "COMP 3021",
        "project": "kcmaad",
        "bug_id": "2",
        "T": "void moveRight() { Position.of(234, 233), new Move.Right(-1).nextPosition(pos) ); }",
        "C": "public static @NotNull Position of(int x, int y) { return new Position(x, y); } public Right(int initiator) { super(initiator); }",
        "label": "P"
    },
    "1594": {
        "dataset": "COMP 3021",
        "project": "kcmaad",
        "bug_id": "3",
        "T": "void testExceedingUndoQuota() { final var gameState = mock(GameState.class); when(gameState.getPlayerPositionById(anyInt())).thenReturn(Position.of(0, 0)); when(gameState.getUndoQuota()).thenReturn(Optional.of(0)); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Undo(0)); }",
        "C": "public Undo(int initiator) { super(initiator); }",
        "label": "P"
    },
    "1595": {
        "dataset": "COMP 3021",
        "project": "kcmaad",
        "bug_id": "4",
        "T": "void testExit() { final var gameState = mock(GameState.class); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Exit(0)); }",
        "C": "public Exit(int initiator) { super(initiator); }",
        "label": "P"
    },
    "1596": {
        "dataset": "COMP 3021",
        "project": "kcmaad",
        "bug_id": "5",
        "T": "void testUndoUnlimited() { final var gameState = mock(GameState.class); when(gameState.getPlayerPositionById(anyInt())).thenReturn(Position.of(0, 0)); when(gameState.getUndoQuota()).thenReturn(Optional.empty()); final var game = new SokobanGameForTesting(gameState); for (int i = 0; i < 10000; i++) { final var result = game.feedActionForProcessing(new Undo(0)); } verify(gameState, times(10000)).undo(); }",
        "C": "public TerminalRenderingEngine(PrintStream outputSteam) { this.outputStream = outputSteam; } public Undo(int initiator) { super(initiator); } public static void verify(String mapText) { // helper function Scanner scanner = new Scanner(mapText); int undoLimit = Integer.parseInt(scanner.nextLine()); if (undoLimit < 0 && undoLimit != -1) { throw new IllegalArgumentException(); } boolean playerCheck = false; for(int i = 65; i < 91; i++) { if (count(mapText, (char)i) > 1) { throw new IllegalArgumentException(); } if (count(mapText, (char)i) == 1) { playerCheck = true; } } if (!playerCheck) { throw new IllegalArgumentException(); } int destinationCount = count(mapText, '@'); int boxCount = 0; for(int i = 97; i < 123; ++i) { boxCount += count(mapText, (char)i); if (mapText.contains(Character.toString((char)i)) ^ mapText.contains(Character.toString((char)(i - 32)))) { throw new IllegalArgumentException(); } } if (destinationCount != boxCount) { throw new IllegalArgumentException(); } }",
        "label": "F"
    },
    "1597": {
        "dataset": "COMP 3021",
        "project": "kcmaad",
        "bug_id": "6",
        "T": "void testPushOtherPlayerBox() { String mapText = \"\"\" 233 ###### #AB.@# #b.a.# #@...# ###### \"\"\"; final var testMap = TestHelper.parseGameMap(mapText); final var gameState = spy(new GameState(testMap)); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Move.Down(0)); verify(gameState, never()).move(any(), any()); }",
        "C": "public GameState(@NotNull GameMap map) { this.map = new GameMap(map); for (int y = 0; y < this.map.getMaxHeight(); y++) { for (int x = 0; x < this.map.map.get(y).size(); x++) { Position pos = new Position(x, y); if (getEntity(pos) instanceof Player) { playerPositions.add(pos); } if (getEntity(pos) instanceof Box) { boxPositions.add(pos); } } } checkpoint(); // creates a checkpoint of the original values } public Down(int initiator) { super(initiator); } public static void verify(String mapText) { // helper function Scanner scanner = new Scanner(mapText); int undoLimit = Integer.parseInt(scanner.nextLine()); if (undoLimit < 0 && undoLimit != -1) { throw new IllegalArgumentException(); } boolean playerCheck = false; for(int i = 65; i < 91; i++) { if (count(mapText, (char)i) > 1) { throw new IllegalArgumentException(); } if (count(mapText, (char)i) == 1) { playerCheck = true; } } if (!playerCheck) { throw new IllegalArgumentException(); } int destinationCount = count(mapText, '@'); int boxCount = 0; for(int i = 97; i < 123; ++i) { boxCount += count(mapText, (char)i); if (mapText.contains(Character.toString((char)i)) ^ mapText.contains(Character.toString((char)(i - 32)))) { throw new IllegalArgumentException(); } } if (destinationCount != boxCount) { throw new IllegalArgumentException(); } }",
        "label": "P"
    },
    "1598": {
        "dataset": "COMP 3021",
        "project": "kcmaad",
        "bug_id": "7",
        "T": "void testMoveNonExistingPlayer() { String mapText = \"\"\" 233 ###### #A..@# #a...# ##...# ###### \"\"\"; final var testMap = TestHelper.parseGameMap(mapText); final var gameState = spy(new GameState(testMap)); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Move.Down(23)); }",
        "C": "public GameState(@NotNull GameMap map) { this.map = new GameMap(map); for (int y = 0; y < this.map.getMaxHeight(); y++) { for (int x = 0; x < this.map.map.get(y).size(); x++) { Position pos = new Position(x, y); if (getEntity(pos) instanceof Player) { playerPositions.add(pos); } if (getEntity(pos) instanceof Box) { boxPositions.add(pos); } } } checkpoint(); // creates a checkpoint of the original values } public Down(int initiator) { super(initiator); }",
        "label": "F"
    },
    "1599": {
        "dataset": "COMP 3021",
        "project": "kcmaad",
        "bug_id": "8",
        "T": "void testCheckpointWhenNeed() { final var gameState = spy(new GameState(TestHelper.parseGameMap(\"\"\" 233 ###### #.Aa@# #..a@# ###### \"\"\" ))); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Move.Right(0)); verify(gameState, times(1)).checkpoint(); }",
        "C": "public GameState(@NotNull GameMap map) { this.map = new GameMap(map); for (int y = 0; y < this.map.getMaxHeight(); y++) { for (int x = 0; x < this.map.map.get(y).size(); x++) { Position pos = new Position(x, y); if (getEntity(pos) instanceof Player) { playerPositions.add(pos); } if (getEntity(pos) instanceof Box) { boxPositions.add(pos); } } } checkpoint(); // creates a checkpoint of the original values } public Right(int initiator) { super(initiator); } public static void verify(String mapText) { // helper function Scanner scanner = new Scanner(mapText); int undoLimit = Integer.parseInt(scanner.nextLine()); if (undoLimit < 0 && undoLimit != -1) { throw new IllegalArgumentException(); } boolean playerCheck = false; for(int i = 65; i < 91; i++) { if (count(mapText, (char)i) > 1) { throw new IllegalArgumentException(); } if (count(mapText, (char)i) == 1) { playerCheck = true; } } if (!playerCheck) { throw new IllegalArgumentException(); } int destinationCount = count(mapText, '@'); int boxCount = 0; for(int i = 97; i < 123; ++i) { boxCount += count(mapText, (char)i); if (mapText.contains(Character.toString((char)i)) ^ mapText.contains(Character.toString((char)(i - 32)))) { throw new IllegalArgumentException(); } } if (destinationCount != boxCount) { throw new IllegalArgumentException(); } }",
        "label": "P"
    },
    "1600": {
        "dataset": "COMP 3021",
        "project": "kcmaad",
        "bug_id": "9",
        "T": "void testPushBoxAgainstWall() { String mapText = \"\"\" 233 ###### #A..@# #a...# ##...# ###### \"\"\"; final var testMap = TestHelper.parseGameMap(mapText); final var gameState = spy(new GameState(testMap)); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Move.Down(0)); verify(gameState, never()).move(any(), any()); }",
        "C": "public GameState(@NotNull GameMap map) { this.map = new GameMap(map); for (int y = 0; y < this.map.getMaxHeight(); y++) { for (int x = 0; x < this.map.map.get(y).size(); x++) { Position pos = new Position(x, y); if (getEntity(pos) instanceof Player) { playerPositions.add(pos); } if (getEntity(pos) instanceof Box) { boxPositions.add(pos); } } } checkpoint(); // creates a checkpoint of the original values } public Down(int initiator) { super(initiator); } public static void verify(String mapText) { // helper function Scanner scanner = new Scanner(mapText); int undoLimit = Integer.parseInt(scanner.nextLine()); if (undoLimit < 0 && undoLimit != -1) { throw new IllegalArgumentException(); } boolean playerCheck = false; for(int i = 65; i < 91; i++) { if (count(mapText, (char)i) > 1) { throw new IllegalArgumentException(); } if (count(mapText, (char)i) == 1) { playerCheck = true; } } if (!playerCheck) { throw new IllegalArgumentException(); } int destinationCount = count(mapText, '@'); int boxCount = 0; for(int i = 97; i < 123; ++i) { boxCount += count(mapText, (char)i); if (mapText.contains(Character.toString((char)i)) ^ mapText.contains(Character.toString((char)(i - 32)))) { throw new IllegalArgumentException(); } } if (destinationCount != boxCount) { throw new IllegalArgumentException(); } }",
        "label": "P"
    },
    "1601": {
        "dataset": "COMP 3021",
        "project": "kcmaad",
        "bug_id": "10",
        "T": "void testCheckpointWhenNotNeed() { final var gameState = spy(new GameState(TestHelper.parseGameMap(\"\"\" 233 ###### #A.a@# #..a@# ###### \"\"\" ))); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Move.Right(0)); verify(gameState, never()).checkpoint(); } private static class SokobanGameForTesting extends AbstractSokobanGame { protected SokobanGameForTesting(GameState gameState) { super(gameState); } @Override public void run() { } public ActionResult feedActionForProcessing(Action action) { return processAction(action); } }",
        "C": "public GameState(@NotNull GameMap map) { this.map = new GameMap(map); for (int y = 0; y < this.map.getMaxHeight(); y++) { for (int x = 0; x < this.map.map.get(y).size(); x++) { Position pos = new Position(x, y); if (getEntity(pos) instanceof Player) { playerPositions.add(pos); } if (getEntity(pos) instanceof Box) { boxPositions.add(pos); } } } checkpoint(); // creates a checkpoint of the original values } public Right(int initiator) { super(initiator); } public static void verify(String mapText) { // helper function Scanner scanner = new Scanner(mapText); int undoLimit = Integer.parseInt(scanner.nextLine()); if (undoLimit < 0 && undoLimit != -1) { throw new IllegalArgumentException(); } boolean playerCheck = false; for(int i = 65; i < 91; i++) { if (count(mapText, (char)i) > 1) { throw new IllegalArgumentException(); } if (count(mapText, (char)i) == 1) { playerCheck = true; } } if (!playerCheck) { throw new IllegalArgumentException(); } int destinationCount = count(mapText, '@'); int boxCount = 0; for(int i = 97; i < 123; ++i) { boxCount += count(mapText, (char)i); if (mapText.contains(Character.toString((char)i)) ^ mapText.contains(Character.toString((char)(i - 32)))) { throw new IllegalArgumentException(); } } if (destinationCount != boxCount) { throw new IllegalArgumentException(); } } public void run() { renderingEngine.message(\"Sokoban game is ready.\"); renderingEngine.render(state); if (state.getUndoQuota().orElse(0) >= 0) { renderingEngine.message(\"Undo Quota: \" + state.getUndoQuota().orElse(0)); } else { renderingEngine.message(\"Unlimited\"); } while (!super.shouldStop()) { Action action = inputEngine.fetchAction(); if (!(action instanceof InvalidInput)) { ActionResult result = super.processAction(action); if (result instanceof ActionResult.Failed) { renderingEngine.message(((ActionResult.Failed) result).getReason()); } } else { renderingEngine.message(((InvalidInput) action).getMessage()); } renderingEngine.render(state); if (state.getUndoQuota().orElse(0) >= 0) { renderingEngine.message(\"Undo Quota: \" + state.getUndoQuota().orElse(0)); } else { renderingEngine.message(\"Unlimited\"); } renderingEngine.message(\"\"); } renderingEngine.message(\"Game exits.\"); if (state.isWin()) { renderingEngine.message(\"You win.\"); } } protected ActionResult processAction(@NotNull Action action) { if (action instanceof Exit) { over = true; return new ActionResult.Success(action); } if (action instanceof InvalidInput) { return new ActionResult.Failed(action, \"Invalid Input\"); } if (action instanceof Undo) { if (state.getUndoQuota().orElse(0) > 0) { state.undo(); return new ActionResult.Success(action); } else { if (state.getUndoQuota().orElse(0) == -1) { state.undo(); return new ActionResult.Success(action); } else { return new ActionResult.Failed(action, \"You have run out of your undo quota.\"); } } } if (action instanceof Move) { if (state.map.getPlayerIds().contains(action.getInitiator())) { int moveDirection = 0; Position newPosition = null; // find new position given action type if (action instanceof Move.Down) { newPosition = new Position(state.getPlayerPositionById(action.getInitiator()).x() , state.getPlayerPositionById(action.getInitiator()).y() + 1); moveDirection = 1; } if (action instanceof Move.Up) { newPosition = new Position(state.getPlayerPositionById(action.getInitiator()).x() , state.getPlayerPositionById(action.getInitiator()).y() - 1); moveDirection = 2; } if (action instanceof Move.Left) { newPosition = new Position(state.getPlayerPositionById(action.getInitiator()).x() - 1 , state.getPlayerPositionById(action.getInitiator()).y()); moveDirection = 3; } if (action instanceof Move.Right) { newPosition = new Position(state.getPlayerPositionById(action.getInitiator()).x() + 1 , state.getPlayerPositionById(action.getInitiator()).y()); moveDirection = 4; } if (state.map.getEntity(newPosition) instanceof Wall) // if new position is a wall return new ActionResult.Failed(action, \"You hit a wall\"); if (state.map.getEntity(newPosition) instanceof Player) // if new position is a wall return new ActionResult.Failed(action, \"You hit another player.\"); if (state.map.getEntity(newPosition) instanceof Box) { // if new position is Box, need to push if (action.getInitiator() != ((Box) state.map.getEntity(newPosition)).getPlayerId()) { return new ActionResult.Failed(action, \"You cannot move other players' boxes\"); } Position newBoxPosition = null; switch (moveDirection) { case 1: { newBoxPosition = new Position(newPosition.x(), newPosition.y() + 1); break; } case 2: { newBoxPosition = new Position(newPosition.x(), newPosition.y() - 1); break; } case 3: { newBoxPosition = new Position(newPosition.x() - 1, newPosition.y()); break; } case 4: { newBoxPosition = new Position(newPosition.x() + 1, newPosition.y()); break; } default: { break; } } if (!(state.map.getEntity(newBoxPosition) instanceof Empty)) { return new ActionResult.Failed(action, \"Failed to push the box.\"); } else { state.move(newPosition, newBoxPosition); state.move(state.getPlayerPositionById(action.getInitiator()), newPosition); state.checkpoint(); return new ActionResult.Success(action); } } state.move(state.getPlayerPositionById(action.getInitiator()), newPosition); return new ActionResult.Success(action); } else { return new ActionResult.Failed(action, \"Invalid input.\"); } } return new ActionResult.Failed(action, \"Impossible actions taken\"); }",
        "label": "P"
    },
    "1602": {
        "dataset": "COMP 3021",
        "project": "kcmaad",
        "bug_id": "11",
        "T": "void testHitAnotherPlayer() { String mapText = \"\"\" 233 ###### #A..@# #B...# #ab.@# ###### \"\"\"; final var testMap = TestHelper.parseGameMap(mapText); final var gameState = spy(new GameState(testMap)); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Move.Down(0)); verify(gameState, never()).move(any(), any()); }",
        "C": "public GameState(@NotNull GameMap map) { this.map = new GameMap(map); for (int y = 0; y < this.map.getMaxHeight(); y++) { for (int x = 0; x < this.map.map.get(y).size(); x++) { Position pos = new Position(x, y); if (getEntity(pos) instanceof Player) { playerPositions.add(pos); } if (getEntity(pos) instanceof Box) { boxPositions.add(pos); } } } checkpoint(); // creates a checkpoint of the original values } public Down(int initiator) { super(initiator); } public static void verify(String mapText) { // helper function Scanner scanner = new Scanner(mapText); int undoLimit = Integer.parseInt(scanner.nextLine()); if (undoLimit < 0 && undoLimit != -1) { throw new IllegalArgumentException(); } boolean playerCheck = false; for(int i = 65; i < 91; i++) { if (count(mapText, (char)i) > 1) { throw new IllegalArgumentException(); } if (count(mapText, (char)i) == 1) { playerCheck = true; } } if (!playerCheck) { throw new IllegalArgumentException(); } int destinationCount = count(mapText, '@'); int boxCount = 0; for(int i = 97; i < 123; ++i) { boxCount += count(mapText, (char)i); if (mapText.contains(Character.toString((char)i)) ^ mapText.contains(Character.toString((char)(i - 32)))) { throw new IllegalArgumentException(); } } if (destinationCount != boxCount) { throw new IllegalArgumentException(); } }",
        "label": "P"
    },
    "1603": {
        "dataset": "COMP 3021",
        "project": "kcmaad",
        "bug_id": "12",
        "T": "void testUndoWithinQuota() { final var gameState = mock(GameState.class); when(gameState.getPlayerPositionById(anyInt())).thenReturn(Position.of(0, 0)); when(gameState.getUndoQuota()).thenReturn(Optional.of(1)); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Undo(0)); verify(gameState, times(1)).undo(); }",
        "C": "public Undo(int initiator) { super(initiator); } public static void verify(String mapText) { // helper function Scanner scanner = new Scanner(mapText); int undoLimit = Integer.parseInt(scanner.nextLine()); if (undoLimit < 0 && undoLimit != -1) { throw new IllegalArgumentException(); } boolean playerCheck = false; for(int i = 65; i < 91; i++) { if (count(mapText, (char)i) > 1) { throw new IllegalArgumentException(); } if (count(mapText, (char)i) == 1) { playerCheck = true; } } if (!playerCheck) { throw new IllegalArgumentException(); } int destinationCount = count(mapText, '@'); int boxCount = 0; for(int i = 97; i < 123; ++i) { boxCount += count(mapText, (char)i); if (mapText.contains(Character.toString((char)i)) ^ mapText.contains(Character.toString((char)(i - 32)))) { throw new IllegalArgumentException(); } } if (destinationCount != boxCount) { throw new IllegalArgumentException(); } }",
        "label": "P"
    },
    "1604": {
        "dataset": "COMP 3021",
        "project": "kcmaad",
        "bug_id": "13",
        "T": "void testInvalidInput() { final var game = new SokobanGameForTesting(mock(GameState.class)); final var message = String.valueOf(new Random().nextLong()); final var action = new InvalidInput(-1, message); final var result = game.feedActionForProcessing(action); }",
        "C": "public InvalidInput(int initiator, @NotNull String message) { super(initiator); this.message = message; }",
        "label": "P"
    },
    "1605": {
        "dataset": "COMP 3021",
        "project": "kcmaad",
        "bug_id": "14",
        "T": "void testUndoLimitParsing() { final var gameMap = TestHelper.parseGameMap(rectangularMap); }",
        "C": "",
        "label": "P"
    },
    "1606": {
        "dataset": "COMP 3021",
        "project": "kcmaad",
        "bug_id": "15",
        "T": "void testWidthForNonRectangularMap() { final var gameMap = TestHelper.parseGameMap(nonRectangularMap); }",
        "C": "",
        "label": "P"
    },
    "1607": {
        "dataset": "COMP 3021",
        "project": "kcmaad",
        "bug_id": "16",
        "T": "void testTwoPlayersMap() { final var twoPlayersMap = \"\"\" 233 ###### #A..@# #..B@# #....# #.a..# #..b.# ###### \"\"\"; final var gameMap = TestHelper.parseGameMap(twoPlayersMap); final var playerIds = gameMap.getPlayerIds(); final var expectedIds = new HashSet<Integer>(); expectedIds.add(0); expectedIds.add(1); }",
        "C": "public Set<Integer> getPlayerIds() { return playerIDs; }",
        "label": "F"
    },
    "1608": {
        "dataset": "COMP 3021",
        "project": "kcmaad",
        "bug_id": "17",
        "T": "void testMapWithoutPlayer() { final var invalidMap = \"\"\" 233 ### #.# ### \"\"\"; } // @Tag(TestKind.HIDDEN) // @Test // void testUnmatchedPlayersAndBoxes() { // final var invalidMap = \"\"\" // 233 // ###### // #A..@# // #...@# // #a.b@# // #.a.@# // #..a.# // ###### // \"\"\"; // assertThrowsExactly(IllegalArgumentException.class, () -> TestHelper.parseGameMap(invalidMap)); // }",
        "C": "public TerminalRenderingEngine(PrintStream outputSteam) { this.outputStream = outputSteam; }",
        "label": "P"
    },
    "1609": {
        "dataset": "COMP 3021",
        "project": "kcmaad",
        "bug_id": "18",
        "T": "void testManyPlayersMap() { final var manyPlayersMap = \"\"\" 233 ###### #A.P@@# #vCB@@# #.cpD@# #Ga.d@# #g.bV@# ###### \"\"\"; final var gameMap = TestHelper.parseGameMap(manyPlayersMap); final var playerIds = gameMap.getPlayerIds(); final var expectedIds = new HashSet<>(Arrays.asList( 0, 'P' - 'A', 'C' - 'A', 'B' - 'A', 'D' - 'A', 'G' - 'A', 'V' - 'A' )); }",
        "C": "public Set<Integer> getPlayerIds() { return playerIDs; }",
        "label": "F"
    },
    "1610": {
        "dataset": "COMP 3021",
        "project": "kcmaad",
        "bug_id": "19",
        "T": "void testHeightForNonRectangularMap() { final var gameMap = TestHelper.parseGameMap(nonRectangularMap); }",
        "C": "",
        "label": "P"
    },
    "1611": {
        "dataset": "COMP 3021",
        "project": "kcmaad",
        "bug_id": "20",
        "T": "void testDuplicatedPlayers() { final var invalidMap = \"\"\" 233 ###### #A..@# #..A@# #....# #.a..# #..b.# ###### \"\"\"; }",
        "C": "",
        "label": "P"
    },
    "1612": {
        "dataset": "COMP 3021",
        "project": "kcmaad",
        "bug_id": "21",
        "T": "void testParseMapWithoutUndoLimit() { final var invalidMap = String.join(\"\\n\", rectangularMap.lines().skip(1).toList()); }",
        "C": "",
        "label": "P"
    },
    "1613": {
        "dataset": "COMP 3021",
        "project": "kcmaad",
        "bug_id": "22",
        "T": "void testInsufficientDestinations() { final var invalidMap = \"\"\" 233 ###### #A..@# #...@# #a...# #.a..# #..a.# ###### \"\"\"; }",
        "C": "",
        "label": "P"
    },
    "1614": {
        "dataset": "COMP 3021",
        "project": "kcmaad",
        "bug_id": "23",
        "T": "void testSuperLargeMap() { try { new GameMap(Integer.MAX_VALUE, Integer.MAX_VALUE, Collections.emptySet(), 0); } catch (OutOfMemoryError e) { throw new RuntimeException(e); } }); }",
        "C": "public GameMap(int maxWidth, int maxHeight, Set<Position> destinations, int undoLimit) { this.maxWidth = maxWidth; this.maxHeight = maxHeight; this.destinations = destinations; this.undoLimit = undoLimit; } public TerminalRenderingEngine(PrintStream outputSteam) { this.outputStream = outputSteam; }",
        "label": "P"
    },
    "1615": {
        "dataset": "COMP 3021",
        "project": "kcmaad",
        "bug_id": "24",
        "T": "void testInvalidUndoLimit() { final var invalidMap = \"\"\" -233 ###### #A..@# #...@# #a.b@# #.a.@# #..a.# ###### \"\"\"; }",
        "C": "",
        "label": "P"
    },
    "1616": {
        "dataset": "COMP 3021",
        "project": "kcmaad",
        "bug_id": "25",
        "T": "void testEmptyMap() { final var invalidMap = \"\"; }",
        "C": "",
        "label": "P"
    },
    "1617": {
        "dataset": "COMP 3021",
        "project": "kcmaad",
        "bug_id": "26",
        "T": "void testMove(String input, String name, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); } private InputStream fixValueStream(String content) { final var bytes = content.getBytes(StandardCharsets.UTF_8); return new ByteArrayInputStream(bytes); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine(); // actual input var lowerCaseInput = inputLine.toLowerCase(); // input in lowercase to ignore cases Action result = switch(lowerCaseInput) { case \"w\": { yield new Move.Up(0); } case \"a\": { yield new Move.Left(0); } case \"s\": { yield new Move.Down(0); } case \"d\": { yield new Move.Right(0); } case \"h\": { yield new Move.Left(1); } case \"j\": { yield new Move.Down(1); } case \"k\": { yield new Move.Up(1); } case \"l\": { yield new Move.Right(1); } case \"exit\": { yield new Exit(0); } case \"u\": { yield new Undo(0); } default: { yield new InvalidInput(0, \"Invaild input\"); } }; return result; }",
        "label": "P"
    },
    "1618": {
        "dataset": "COMP 3021",
        "project": "kcmaad",
        "bug_id": "27",
        "T": "void testMove(String input, String name, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); } private InputStream fixValueStream(String content) { final var bytes = content.getBytes(StandardCharsets.UTF_8); return new ByteArrayInputStream(bytes); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine(); // actual input var lowerCaseInput = inputLine.toLowerCase(); // input in lowercase to ignore cases Action result = switch(lowerCaseInput) { case \"w\": { yield new Move.Up(0); } case \"a\": { yield new Move.Left(0); } case \"s\": { yield new Move.Down(0); } case \"d\": { yield new Move.Right(0); } case \"h\": { yield new Move.Left(1); } case \"j\": { yield new Move.Down(1); } case \"k\": { yield new Move.Up(1); } case \"l\": { yield new Move.Right(1); } case \"exit\": { yield new Exit(0); } case \"u\": { yield new Undo(0); } default: { yield new InvalidInput(0, \"Invaild input\"); } }; return result; }",
        "label": "P"
    },
    "1619": {
        "dataset": "COMP 3021",
        "project": "kcmaad",
        "bug_id": "28",
        "T": "void testMove(String input, String name, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); } private InputStream fixValueStream(String content) { final var bytes = content.getBytes(StandardCharsets.UTF_8); return new ByteArrayInputStream(bytes); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine(); // actual input var lowerCaseInput = inputLine.toLowerCase(); // input in lowercase to ignore cases Action result = switch(lowerCaseInput) { case \"w\": { yield new Move.Up(0); } case \"a\": { yield new Move.Left(0); } case \"s\": { yield new Move.Down(0); } case \"d\": { yield new Move.Right(0); } case \"h\": { yield new Move.Left(1); } case \"j\": { yield new Move.Down(1); } case \"k\": { yield new Move.Up(1); } case \"l\": { yield new Move.Right(1); } case \"exit\": { yield new Exit(0); } case \"u\": { yield new Undo(0); } default: { yield new InvalidInput(0, \"Invaild input\"); } }; return result; }",
        "label": "P"
    },
    "1620": {
        "dataset": "COMP 3021",
        "project": "kcmaad",
        "bug_id": "29",
        "T": "void testMove(String input, String name, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); } private InputStream fixValueStream(String content) { final var bytes = content.getBytes(StandardCharsets.UTF_8); return new ByteArrayInputStream(bytes); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine(); // actual input var lowerCaseInput = inputLine.toLowerCase(); // input in lowercase to ignore cases Action result = switch(lowerCaseInput) { case \"w\": { yield new Move.Up(0); } case \"a\": { yield new Move.Left(0); } case \"s\": { yield new Move.Down(0); } case \"d\": { yield new Move.Right(0); } case \"h\": { yield new Move.Left(1); } case \"j\": { yield new Move.Down(1); } case \"k\": { yield new Move.Up(1); } case \"l\": { yield new Move.Right(1); } case \"exit\": { yield new Exit(0); } case \"u\": { yield new Undo(0); } default: { yield new InvalidInput(0, \"Invaild input\"); } }; return result; }",
        "label": "P"
    },
    "1621": {
        "dataset": "COMP 3021",
        "project": "kcmaad",
        "bug_id": "30",
        "T": "void testMove(String input, String name, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); } private InputStream fixValueStream(String content) { final var bytes = content.getBytes(StandardCharsets.UTF_8); return new ByteArrayInputStream(bytes); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine(); // actual input var lowerCaseInput = inputLine.toLowerCase(); // input in lowercase to ignore cases Action result = switch(lowerCaseInput) { case \"w\": { yield new Move.Up(0); } case \"a\": { yield new Move.Left(0); } case \"s\": { yield new Move.Down(0); } case \"d\": { yield new Move.Right(0); } case \"h\": { yield new Move.Left(1); } case \"j\": { yield new Move.Down(1); } case \"k\": { yield new Move.Up(1); } case \"l\": { yield new Move.Right(1); } case \"exit\": { yield new Exit(0); } case \"u\": { yield new Undo(0); } default: { yield new InvalidInput(0, \"Invaild input\"); } }; return result; }",
        "label": "P"
    },
    "1622": {
        "dataset": "COMP 3021",
        "project": "kcmaad",
        "bug_id": "31",
        "T": "void testMove(String input, String name, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); } private InputStream fixValueStream(String content) { final var bytes = content.getBytes(StandardCharsets.UTF_8); return new ByteArrayInputStream(bytes); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine(); // actual input var lowerCaseInput = inputLine.toLowerCase(); // input in lowercase to ignore cases Action result = switch(lowerCaseInput) { case \"w\": { yield new Move.Up(0); } case \"a\": { yield new Move.Left(0); } case \"s\": { yield new Move.Down(0); } case \"d\": { yield new Move.Right(0); } case \"h\": { yield new Move.Left(1); } case \"j\": { yield new Move.Down(1); } case \"k\": { yield new Move.Up(1); } case \"l\": { yield new Move.Right(1); } case \"exit\": { yield new Exit(0); } case \"u\": { yield new Undo(0); } default: { yield new InvalidInput(0, \"Invaild input\"); } }; return result; }",
        "label": "P"
    },
    "1623": {
        "dataset": "COMP 3021",
        "project": "kcmaad",
        "bug_id": "32",
        "T": "void testMove(String input, String name, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); } private InputStream fixValueStream(String content) { final var bytes = content.getBytes(StandardCharsets.UTF_8); return new ByteArrayInputStream(bytes); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine(); // actual input var lowerCaseInput = inputLine.toLowerCase(); // input in lowercase to ignore cases Action result = switch(lowerCaseInput) { case \"w\": { yield new Move.Up(0); } case \"a\": { yield new Move.Left(0); } case \"s\": { yield new Move.Down(0); } case \"d\": { yield new Move.Right(0); } case \"h\": { yield new Move.Left(1); } case \"j\": { yield new Move.Down(1); } case \"k\": { yield new Move.Up(1); } case \"l\": { yield new Move.Right(1); } case \"exit\": { yield new Exit(0); } case \"u\": { yield new Undo(0); } default: { yield new InvalidInput(0, \"Invaild input\"); } }; return result; }",
        "label": "P"
    },
    "1624": {
        "dataset": "COMP 3021",
        "project": "kcmaad",
        "bug_id": "33",
        "T": "void testMove(String input, String name, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); } private InputStream fixValueStream(String content) { final var bytes = content.getBytes(StandardCharsets.UTF_8); return new ByteArrayInputStream(bytes); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine(); // actual input var lowerCaseInput = inputLine.toLowerCase(); // input in lowercase to ignore cases Action result = switch(lowerCaseInput) { case \"w\": { yield new Move.Up(0); } case \"a\": { yield new Move.Left(0); } case \"s\": { yield new Move.Down(0); } case \"d\": { yield new Move.Right(0); } case \"h\": { yield new Move.Left(1); } case \"j\": { yield new Move.Down(1); } case \"k\": { yield new Move.Up(1); } case \"l\": { yield new Move.Right(1); } case \"exit\": { yield new Exit(0); } case \"u\": { yield new Undo(0); } default: { yield new InvalidInput(0, \"Invaild input\"); } }; return result; }",
        "label": "P"
    },
    "1625": {
        "dataset": "COMP 3021",
        "project": "kcmaad",
        "bug_id": "34",
        "T": "void testUndo(String input, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine(); // actual input var lowerCaseInput = inputLine.toLowerCase(); // input in lowercase to ignore cases Action result = switch(lowerCaseInput) { case \"w\": { yield new Move.Up(0); } case \"a\": { yield new Move.Left(0); } case \"s\": { yield new Move.Down(0); } case \"d\": { yield new Move.Right(0); } case \"h\": { yield new Move.Left(1); } case \"j\": { yield new Move.Down(1); } case \"k\": { yield new Move.Up(1); } case \"l\": { yield new Move.Right(1); } case \"exit\": { yield new Exit(0); } case \"u\": { yield new Undo(0); } default: { yield new InvalidInput(0, \"Invaild input\"); } }; return result; }",
        "label": "P"
    },
    "1626": {
        "dataset": "COMP 3021",
        "project": "kcmaad",
        "bug_id": "35",
        "T": "void testInvalidInput() { final var inputStream = fixValueStream(\"blah blah\"); final var inputEngine = new TerminalInputEngine(inputStream); final var action = inputEngine.fetchAction(); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine(); // actual input var lowerCaseInput = inputLine.toLowerCase(); // input in lowercase to ignore cases Action result = switch(lowerCaseInput) { case \"w\": { yield new Move.Up(0); } case \"a\": { yield new Move.Left(0); } case \"s\": { yield new Move.Down(0); } case \"d\": { yield new Move.Right(0); } case \"h\": { yield new Move.Left(1); } case \"j\": { yield new Move.Down(1); } case \"k\": { yield new Move.Up(1); } case \"l\": { yield new Move.Right(1); } case \"exit\": { yield new Exit(0); } case \"u\": { yield new Undo(0); } default: { yield new InvalidInput(0, \"Invaild input\"); } }; return result; }",
        "label": "P"
    },
    "1627": {
        "dataset": "COMP 3021",
        "project": "kcmaad",
        "bug_id": "36",
        "T": "void testUndoWhenThereIsNoMove() { final var gameState = new GameState(TestHelper.parseGameMap(\"\"\" 233 ###### #A.a@# #..a@# ###### \"\"\" )); gameState.undo(); } private Entity generateEntity(int key) { return switch (key % 4) { case 0 -> new Box(0); case 1 -> new Empty(); case 2 -> new Player(0); case 3 -> new Wall(); default -> throw new ShouldNotReachException(); }; }",
        "C": "public GameState(@NotNull GameMap map) { this.map = new GameMap(map); for (int y = 0; y < this.map.getMaxHeight(); y++) { for (int x = 0; x < this.map.map.get(y).size(); x++) { Position pos = new Position(x, y); if (getEntity(pos) instanceof Player) { playerPositions.add(pos); } if (getEntity(pos) instanceof Box) { boxPositions.add(pos); } } } checkpoint(); // creates a checkpoint of the original values } public void undo() { if (saveStates.size() > 1) { saveStates.remove((saveStates.size() - 1)); // removes save state if (getUndoQuota().orElse(0) != -1) { this.map.undoLimit--; } } this.map.map = saveStates.get(saveStates.size() - 1); playerPositions.clear(); boxPositions.clear(); // resets all locations for (int y = 0; y < map.getMaxHeight(); y++) { for (int x = 0; x < map.map.get(y).size(); x++) { Position pos = new Position(x, y); if (getEntity(pos) instanceof Player) { playerPositions.add(pos); } if (getEntity(pos) instanceof Box) { boxPositions.add(pos); } } } } /** * Get the maximum width of the game map. * This should be the same as that in {@link GameMap} public TerminalRenderingEngine(PrintStream outputSteam) { this.outputStream = outputSteam; } public Box(int playerId) { this.playerId = playerId; } public Player(int id) { this.id = id; } public ShouldNotReachException() { super(\"This branch should not be reached.\"); }",
        "label": "P"
    },
    "1628": {
        "dataset": "COMP 3021",
        "project": "kcmaad",
        "bug_id": "37",
        "T": "void testGetUndoUnlimited() { final var gameState = new GameState(TestHelper.parseGameMap(\"\"\" -1 ###### #.Aa@# #..a@# ###### \"\"\" )); }",
        "C": "public GameState(@NotNull GameMap map) { this.map = new GameMap(map); for (int y = 0; y < this.map.getMaxHeight(); y++) { for (int x = 0; x < this.map.map.get(y).size(); x++) { Position pos = new Position(x, y); if (getEntity(pos) instanceof Player) { playerPositions.add(pos); } if (getEntity(pos) instanceof Box) { boxPositions.add(pos); } } } checkpoint(); // creates a checkpoint of the original values }",
        "label": "F"
    },
    "1629": {
        "dataset": "COMP 3021",
        "project": "kcmaad",
        "bug_id": "38",
        "T": "void testMapCopying() { final var maxWidth = 2333; final var maxHeight = 2333; final var random = new Random(); final var randomEntities = Stream.generate(() -> Position.of(random.nextInt(maxWidth), random.nextInt(maxHeight))) .distinct() .limit(100) .collect(Collectors.toMap(Function.identity(), it -> generateEntity(it.x()))); final var firstPos = randomEntities.keySet().stream().findFirst(); final var gameMap = new GameMap(maxWidth, maxHeight, Collections.singleton(firstPos.get()), 233); randomEntities.forEach(gameMap::putEntity); final var gameState = new GameState(gameMap); final var randomPosition = randomEntities.keySet().stream().findAny(); gameMap.putEntity(randomPosition.get(), new Empty()); randomEntities.forEach((p, e) -> assertEquals(e, gameState.getEntity(p))); }",
        "C": "public static @NotNull Position of(int x, int y) { return new Position(x, y); } public GameMap(int maxWidth, int maxHeight, Set<Position> destinations, int undoLimit) { this.maxWidth = maxWidth; this.maxHeight = maxHeight; this.destinations = destinations; this.undoLimit = undoLimit; } public GameState(@NotNull GameMap map) { this.map = new GameMap(map); for (int y = 0; y < this.map.getMaxHeight(); y++) { for (int x = 0; x < this.map.map.get(y).size(); x++) { Position pos = new Position(x, y); if (getEntity(pos) instanceof Player) { playerPositions.add(pos); } if (getEntity(pos) instanceof Box) { boxPositions.add(pos); } } } checkpoint(); // creates a checkpoint of the original values } public void putEntity(@NotNull Position position, Entity entity) { if (!(position.x() >= (map.get(position.y()).size()))) { // check for valid access map.get(position.y()).set(position.x(), entity); } } public @Nullable Entity getEntity(@NotNull Position position) { return map.getEntity(position); } /** * Get all box destination positions as a set in the game map. * This should be the same as that in {@link GameMap}",
        "label": "F"
    },
    "1630": {
        "dataset": "COMP 3021",
        "project": "kcmaad",
        "bug_id": "39",
        "T": "void testUndoWhenThereIsMoveButNoCheckpoint() { final var gameState = new GameState(TestHelper.parseGameMap(\"\"\" 233 ###### #A.a@# #..a@# ###### \"\"\" )); gameState.move(Position.of(1, 1), Position.of(2, 1)); gameState.undo(); }",
        "C": "public GameState(@NotNull GameMap map) { this.map = new GameMap(map); for (int y = 0; y < this.map.getMaxHeight(); y++) { for (int x = 0; x < this.map.map.get(y).size(); x++) { Position pos = new Position(x, y); if (getEntity(pos) instanceof Player) { playerPositions.add(pos); } if (getEntity(pos) instanceof Box) { boxPositions.add(pos); } } } checkpoint(); // creates a checkpoint of the original values } public void move(Position from, Position to) { if (getEntity(from) instanceof Player) { playerPositions.add(to); this.map.putEntity(to, new Player(((Player) getEntity(from)).getId())); playerPositions.remove(from); this.map.putEntity(from, new Empty()); } if (getEntity(from) instanceof Box) { boxPositions.add(to); this.map.putEntity(to, new Box(((Box) getEntity(from)).getPlayerId())); boxPositions.remove(from); this.map.putEntity(from, new Empty()); } } /** * Record a checkpoint of the game state, including: * <li>All current positions of entities in the game map.</li> * <li>Current undo quota</li> * <p> * Checkpoint is used in {@link GameState#undo()} public static @NotNull Position of(int x, int y) { return new Position(x, y); } public void undo() { if (saveStates.size() > 1) { saveStates.remove((saveStates.size() - 1)); // removes save state if (getUndoQuota().orElse(0) != -1) { this.map.undoLimit--; } } this.map.map = saveStates.get(saveStates.size() - 1); playerPositions.clear(); boxPositions.clear(); // resets all locations for (int y = 0; y < map.getMaxHeight(); y++) { for (int x = 0; x < map.map.get(y).size(); x++) { Position pos = new Position(x, y); if (getEntity(pos) instanceof Player) { playerPositions.add(pos); } if (getEntity(pos) instanceof Box) { boxPositions.add(pos); } } } } /** * Get the maximum width of the game map. * This should be the same as that in {@link GameMap}",
        "label": "P"
    },
    "1631": {
        "dataset": "COMP 3021",
        "project": "kcmaad",
        "bug_id": "40",
        "T": "void testGameExit() { final var gameState = mock(GameState.class); final var inputEngine = mock(TerminalInputEngine.class); final var renderingEngine = mock(TerminalRenderingEngine.class); when(gameState.isWin()).thenReturn(false, false, false); when(inputEngine.fetchAction()) .thenReturn(new InvalidInput(0, \"\"), new InvalidInput(0, \"\"), new Exit(0)); final var game = new TerminalSokobanGame(gameState, inputEngine, renderingEngine); game.run(); verify(renderingEngine, atLeastOnce()).message(any()); }",
        "C": "public InvalidInput(int initiator, @NotNull String message) { super(initiator); this.message = message; } public Exit(int initiator) { super(initiator); } public TerminalSokobanGame(GameState gameState, TerminalInputEngine inputEngine, TerminalRenderingEngine renderingEngine) { super(gameState); this.inputEngine = inputEngine; this.renderingEngine = renderingEngine; int playerCount = state.getAllPlayerPositions().size(); if (playerCount > 2) throw new IllegalArgumentException(); } public void run() { renderingEngine.message(\"Sokoban game is ready.\"); renderingEngine.render(state); if (state.getUndoQuota().orElse(0) >= 0) { renderingEngine.message(\"Undo Quota: \" + state.getUndoQuota().orElse(0)); } else { renderingEngine.message(\"Unlimited\"); } while (!super.shouldStop()) { Action action = inputEngine.fetchAction(); if (!(action instanceof InvalidInput)) { ActionResult result = super.processAction(action); if (result instanceof ActionResult.Failed) { renderingEngine.message(((ActionResult.Failed) result).getReason()); } } else { renderingEngine.message(((InvalidInput) action).getMessage()); } renderingEngine.render(state); if (state.getUndoQuota().orElse(0) >= 0) { renderingEngine.message(\"Undo Quota: \" + state.getUndoQuota().orElse(0)); } else { renderingEngine.message(\"Unlimited\"); } renderingEngine.message(\"\"); } renderingEngine.message(\"Game exits.\"); if (state.isWin()) { renderingEngine.message(\"You win.\"); } } public static void verify(String mapText) { // helper function Scanner scanner = new Scanner(mapText); int undoLimit = Integer.parseInt(scanner.nextLine()); if (undoLimit < 0 && undoLimit != -1) { throw new IllegalArgumentException(); } boolean playerCheck = false; for(int i = 65; i < 91; i++) { if (count(mapText, (char)i) > 1) { throw new IllegalArgumentException(); } if (count(mapText, (char)i) == 1) { playerCheck = true; } } if (!playerCheck) { throw new IllegalArgumentException(); } int destinationCount = count(mapText, '@'); int boxCount = 0; for(int i = 97; i < 123; ++i) { boxCount += count(mapText, (char)i); if (mapText.contains(Character.toString((char)i)) ^ mapText.contains(Character.toString((char)(i - 32)))) { throw new IllegalArgumentException(); } } if (destinationCount != boxCount) { throw new IllegalArgumentException(); } }",
        "label": "P"
    },
    "1632": {
        "dataset": "COMP 3021",
        "project": "kcmaad",
        "bug_id": "41",
        "T": "void testGameWin() { final var gameState = mock(GameState.class); final var inputEngine = mock(TerminalInputEngine.class); final var renderingEngine = mock(TerminalRenderingEngine.class); when(gameState.isWin()).thenReturn(false, false, false, true); when(inputEngine.fetchAction()) .thenReturn(new InvalidInput(0, \"\")); final var game = new TerminalSokobanGame(gameState, inputEngine, renderingEngine); game.run(); verify(gameState, atLeastOnce()).isWin(); verify(renderingEngine, atLeastOnce()).message(any()); }",
        "C": "public InvalidInput(int initiator, @NotNull String message) { super(initiator); this.message = message; } public TerminalSokobanGame(GameState gameState, TerminalInputEngine inputEngine, TerminalRenderingEngine renderingEngine) { super(gameState); this.inputEngine = inputEngine; this.renderingEngine = renderingEngine; int playerCount = state.getAllPlayerPositions().size(); if (playerCount > 2) throw new IllegalArgumentException(); } public void run() { renderingEngine.message(\"Sokoban game is ready.\"); renderingEngine.render(state); if (state.getUndoQuota().orElse(0) >= 0) { renderingEngine.message(\"Undo Quota: \" + state.getUndoQuota().orElse(0)); } else { renderingEngine.message(\"Unlimited\"); } while (!super.shouldStop()) { Action action = inputEngine.fetchAction(); if (!(action instanceof InvalidInput)) { ActionResult result = super.processAction(action); if (result instanceof ActionResult.Failed) { renderingEngine.message(((ActionResult.Failed) result).getReason()); } } else { renderingEngine.message(((InvalidInput) action).getMessage()); } renderingEngine.render(state); if (state.getUndoQuota().orElse(0) >= 0) { renderingEngine.message(\"Undo Quota: \" + state.getUndoQuota().orElse(0)); } else { renderingEngine.message(\"Unlimited\"); } renderingEngine.message(\"\"); } renderingEngine.message(\"Game exits.\"); if (state.isWin()) { renderingEngine.message(\"You win.\"); } } public static void verify(String mapText) { // helper function Scanner scanner = new Scanner(mapText); int undoLimit = Integer.parseInt(scanner.nextLine()); if (undoLimit < 0 && undoLimit != -1) { throw new IllegalArgumentException(); } boolean playerCheck = false; for(int i = 65; i < 91; i++) { if (count(mapText, (char)i) > 1) { throw new IllegalArgumentException(); } if (count(mapText, (char)i) == 1) { playerCheck = true; } } if (!playerCheck) { throw new IllegalArgumentException(); } int destinationCount = count(mapText, '@'); int boxCount = 0; for(int i = 97; i < 123; ++i) { boxCount += count(mapText, (char)i); if (mapText.contains(Character.toString((char)i)) ^ mapText.contains(Character.toString((char)(i - 32)))) { throw new IllegalArgumentException(); } } if (destinationCount != boxCount) { throw new IllegalArgumentException(); } }",
        "label": "P"
    },
    "1633": {
        "dataset": "COMP 3021",
        "project": "kcmaad",
        "bug_id": "42",
        "T": "void testMoreThanTwoPlayers() { final var gameState = mock(GameState.class); final var inputEngine = mock(TerminalInputEngine.class); final var renderingEngine = mock(TerminalRenderingEngine.class); when(gameState.getAllPlayerPositions()).thenReturn(new HashSet<>(Arrays.asList(Position.of(1, 1), Position.of(1, 2), Position.of(1, 3)))); }",
        "C": "public static @NotNull Position of(int x, int y) { return new Position(x, y); }",
        "label": "P"
    },
    "1634": {
        "dataset": "COMP 3021",
        "project": "hwolee",
        "bug_id": "0",
        "T": "void moveUp() { Position.of(233, 232), new Move.Up(-1).nextPosition(pos) ); }",
        "C": "public static @NotNull Position of(int x, int y) { return new Position(x, y); } public Up(int initiator) { super(initiator); }",
        "label": "P"
    },
    "1635": {
        "dataset": "COMP 3021",
        "project": "hwolee",
        "bug_id": "1",
        "T": "void moveDown() { Position.of(233, 234), new Move.Down(-1).nextPosition(pos) ); }",
        "C": "public static @NotNull Position of(int x, int y) { return new Position(x, y); } public Down(int initiator) { super(initiator); }",
        "label": "P"
    },
    "1636": {
        "dataset": "COMP 3021",
        "project": "hwolee",
        "bug_id": "2",
        "T": "void moveRight() { Position.of(234, 233), new Move.Right(-1).nextPosition(pos) ); }",
        "C": "public static @NotNull Position of(int x, int y) { return new Position(x, y); } public Right(int initiator) { super(initiator); }",
        "label": "P"
    },
    "1637": {
        "dataset": "COMP 3021",
        "project": "hwolee",
        "bug_id": "3",
        "T": "void testExceedingUndoQuota() { final var gameState = mock(GameState.class); when(gameState.getPlayerPositionById(anyInt())).thenReturn(Position.of(0, 0)); when(gameState.getUndoQuota()).thenReturn(Optional.of(0)); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Undo(0)); }",
        "C": "public Undo(int initiator) { super(initiator); }",
        "label": "P"
    },
    "1638": {
        "dataset": "COMP 3021",
        "project": "hwolee",
        "bug_id": "4",
        "T": "void testExit() { final var gameState = mock(GameState.class); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Exit(0)); }",
        "C": "public Exit(int initiator) { super(initiator); }",
        "label": "P"
    },
    "1639": {
        "dataset": "COMP 3021",
        "project": "hwolee",
        "bug_id": "5",
        "T": "void testUndoUnlimited() { final var gameState = mock(GameState.class); when(gameState.getPlayerPositionById(anyInt())).thenReturn(Position.of(0, 0)); when(gameState.getUndoQuota()).thenReturn(Optional.empty()); final var game = new SokobanGameForTesting(gameState); for (int i = 0; i < 10000; i++) { final var result = game.feedActionForProcessing(new Undo(0)); } verify(gameState, times(10000)).undo(); }",
        "C": "public TerminalRenderingEngine(PrintStream outputSteam) { this.outputSteam = outputSteam; } public Undo(int initiator) { super(initiator); }",
        "label": "P"
    },
    "1640": {
        "dataset": "COMP 3021",
        "project": "hwolee",
        "bug_id": "6",
        "T": "void testPushOtherPlayerBox() { String mapText = \"\"\" 233 ###### #AB.@# #b.a.# #@...# ###### \"\"\"; final var testMap = TestHelper.parseGameMap(mapText); final var gameState = spy(new GameState(testMap)); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Move.Down(0)); verify(gameState, never()).move(any(), any()); }",
        "C": "public GameState(@NotNull GameMap map) { // DONE this.originalGameMap = map; this.undoQuotaLeft = originalGameMap.getUndoLimit().isPresent() ? originalGameMap.getUndoLimit().get() : -1; this.checkpoints = new ArrayList<>(); this.currentMap = this.initializeMapFromOriginalGameMap(); this.updateStatesFromCurrentMap(); } public Down(int initiator) { super(initiator); }",
        "label": "P"
    },
    "1641": {
        "dataset": "COMP 3021",
        "project": "hwolee",
        "bug_id": "7",
        "T": "void testMoveNonExistingPlayer() { String mapText = \"\"\" 233 ###### #A..@# #a...# ##...# ###### \"\"\"; final var testMap = TestHelper.parseGameMap(mapText); final var gameState = spy(new GameState(testMap)); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Move.Down(23)); }",
        "C": "public GameState(@NotNull GameMap map) { // DONE this.originalGameMap = map; this.undoQuotaLeft = originalGameMap.getUndoLimit().isPresent() ? originalGameMap.getUndoLimit().get() : -1; this.checkpoints = new ArrayList<>(); this.currentMap = this.initializeMapFromOriginalGameMap(); this.updateStatesFromCurrentMap(); } public Down(int initiator) { super(initiator); }",
        "label": "P"
    },
    "1642": {
        "dataset": "COMP 3021",
        "project": "hwolee",
        "bug_id": "8",
        "T": "void testCheckpointWhenNeed() { final var gameState = spy(new GameState(TestHelper.parseGameMap(\"\"\" 233 ###### #.Aa@# #..a@# ###### \"\"\" ))); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Move.Right(0)); verify(gameState, times(1)).checkpoint(); }",
        "C": "public GameState(@NotNull GameMap map) { // DONE this.originalGameMap = map; this.undoQuotaLeft = originalGameMap.getUndoLimit().isPresent() ? originalGameMap.getUndoLimit().get() : -1; this.checkpoints = new ArrayList<>(); this.currentMap = this.initializeMapFromOriginalGameMap(); this.updateStatesFromCurrentMap(); } public Right(int initiator) { super(initiator); }",
        "label": "P"
    },
    "1643": {
        "dataset": "COMP 3021",
        "project": "hwolee",
        "bug_id": "9",
        "T": "void testPushBoxAgainstWall() { String mapText = \"\"\" 233 ###### #A..@# #a...# ##...# ###### \"\"\"; final var testMap = TestHelper.parseGameMap(mapText); final var gameState = spy(new GameState(testMap)); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Move.Down(0)); verify(gameState, never()).move(any(), any()); }",
        "C": "public GameState(@NotNull GameMap map) { // DONE this.originalGameMap = map; this.undoQuotaLeft = originalGameMap.getUndoLimit().isPresent() ? originalGameMap.getUndoLimit().get() : -1; this.checkpoints = new ArrayList<>(); this.currentMap = this.initializeMapFromOriginalGameMap(); this.updateStatesFromCurrentMap(); } public Down(int initiator) { super(initiator); }",
        "label": "P"
    },
    "1644": {
        "dataset": "COMP 3021",
        "project": "hwolee",
        "bug_id": "10",
        "T": "void testCheckpointWhenNotNeed() { final var gameState = spy(new GameState(TestHelper.parseGameMap(\"\"\" 233 ###### #A.a@# #..a@# ###### \"\"\" ))); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Move.Right(0)); verify(gameState, never()).checkpoint(); } private static class SokobanGameForTesting extends AbstractSokobanGame { protected SokobanGameForTesting(GameState gameState) { super(gameState); } @Override public void run() { } public ActionResult feedActionForProcessing(Action action) { return processAction(action); } }",
        "C": "public GameState(@NotNull GameMap map) { // DONE this.originalGameMap = map; this.undoQuotaLeft = originalGameMap.getUndoLimit().isPresent() ? originalGameMap.getUndoLimit().get() : -1; this.checkpoints = new ArrayList<>(); this.currentMap = this.initializeMapFromOriginalGameMap(); this.updateStatesFromCurrentMap(); } public Right(int initiator) { super(initiator); } public void run() { // DONE this.renderingEngine.message(\"Sokoban game is ready.\"); this.renderingEngine.render(this.state); // Game terminates when the game is won or the player performs Exit action // Deadlock checking is not required while (!this.shouldStop()) { // Game loop if (this.state.getUndoQuota().isPresent()) { this.renderingEngine.message(\"Undo Quota: %d\".formatted(this.state.getUndoQuota().get())); } else { this.renderingEngine.message(\"Unlimited\"); } this.renderingEngine.message(\">>>\"); switch (this.processAction(this.inputEngine.fetchAction())) { case ActionResult.Success success -> {} case ActionResult.Failed failed -> { this.renderingEngine.message(failed.getReason()); } } this.renderingEngine.render(this.state); } this.renderingEngine.message(\"Game exits.\"); if (this.state.isWin()) { this.renderingEngine.message(\"You win.\"); } } protected ActionResult processAction(@NotNull Action action) { // DONE // All updates to GameState after each Action are performed in this function this.state.mostRecentAction = action; return switch (action) { case InvalidInput invalidInput -> { yield new ActionResult.Failed(invalidInput, \"Invalid Input.\"); } case Exit exit -> { yield new ActionResult.Success(exit); } case Undo undo -> { if (this.state.getUndoQuota().isPresent() && this.state.getUndoQuota().get() == 0) { // Undo quota used up yield new ActionResult.Failed(undo, \"You have run out of your undo quota.\"); } else { // Undo to last checkpoint this.state.undo(); yield new ActionResult.Success(undo); } } case Move move -> { int playerId = move.getInitiator(); Position playerPosition = this.state.getPlayerPositionById(playerId); if (playerPosition == null) { // PlayerID does not exist yield new ActionResult.Failed(move, \"Player not found.\"); } // Process Move // Players can only move one box in each Move // Check movable by confirming nextPosition contains either own Box or Empty // If nextPosition contains own Box, check nextNextPosition contains Empty then can move // If nextPosition contains Empty, can move Position nextDestination = move.nextPosition(playerPosition); yield switch (this.state.getEntity(nextDestination)) { case Empty empty -> { // Player can move to nextDestination this.state.move(playerPosition, nextDestination); yield new ActionResult.Success(move); } case Box box -> { if (box.getPlayerId() != playerId) { // Pushed other players' Box yield new ActionResult.Failed(move, \"You cannot move other players' boxes.\"); } // Check nextNextDestination for space to push own Box Position nextNextDestination = move.nextPosition(nextDestination); switch (this.state.getEntity(nextNextDestination)) { case Empty empty -> { // Can push box this.state.move(nextDestination, nextNextDestination); this.state.move(playerPosition, nextDestination); // Checkpoint after moving Box this.state.checkpoint(); yield new ActionResult.Success(move); } case null, default -> { // Blocked, cannot push box yield new ActionResult.Failed(move, \"Failed to push the box.\"); } } } case Wall wall -> { yield new ActionResult.Failed(move, \"You hit a wall.\"); } case Player player -> { yield new ActionResult.Failed(move, \"You hit another player.\"); } }; } }; }",
        "label": "P"
    },
    "1645": {
        "dataset": "COMP 3021",
        "project": "hwolee",
        "bug_id": "11",
        "T": "void testHitAnotherPlayer() { String mapText = \"\"\" 233 ###### #A..@# #B...# #ab.@# ###### \"\"\"; final var testMap = TestHelper.parseGameMap(mapText); final var gameState = spy(new GameState(testMap)); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Move.Down(0)); verify(gameState, never()).move(any(), any()); }",
        "C": "public GameState(@NotNull GameMap map) { // DONE this.originalGameMap = map; this.undoQuotaLeft = originalGameMap.getUndoLimit().isPresent() ? originalGameMap.getUndoLimit().get() : -1; this.checkpoints = new ArrayList<>(); this.currentMap = this.initializeMapFromOriginalGameMap(); this.updateStatesFromCurrentMap(); } public Down(int initiator) { super(initiator); }",
        "label": "P"
    },
    "1646": {
        "dataset": "COMP 3021",
        "project": "hwolee",
        "bug_id": "12",
        "T": "void testUndoWithinQuota() { final var gameState = mock(GameState.class); when(gameState.getPlayerPositionById(anyInt())).thenReturn(Position.of(0, 0)); when(gameState.getUndoQuota()).thenReturn(Optional.of(1)); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Undo(0)); verify(gameState, times(1)).undo(); }",
        "C": "public Undo(int initiator) { super(initiator); }",
        "label": "P"
    },
    "1647": {
        "dataset": "COMP 3021",
        "project": "hwolee",
        "bug_id": "13",
        "T": "void testInvalidInput() { final var game = new SokobanGameForTesting(mock(GameState.class)); final var message = String.valueOf(new Random().nextLong()); final var action = new InvalidInput(-1, message); final var result = game.feedActionForProcessing(action); }",
        "C": "public InvalidInput(int initiator, @NotNull String message) { super(initiator); this.message = message; }",
        "label": "P"
    },
    "1648": {
        "dataset": "COMP 3021",
        "project": "hwolee",
        "bug_id": "14",
        "T": "void testUndoLimitParsing() { final var gameMap = TestHelper.parseGameMap(rectangularMap); }",
        "C": "",
        "label": "P"
    },
    "1649": {
        "dataset": "COMP 3021",
        "project": "hwolee",
        "bug_id": "15",
        "T": "void testWidthForNonRectangularMap() { final var gameMap = TestHelper.parseGameMap(nonRectangularMap); }",
        "C": "",
        "label": "P"
    },
    "1650": {
        "dataset": "COMP 3021",
        "project": "hwolee",
        "bug_id": "16",
        "T": "void testTwoPlayersMap() { final var twoPlayersMap = \"\"\" 233 ###### #A..@# #..B@# #....# #.a..# #..b.# ###### \"\"\"; final var gameMap = TestHelper.parseGameMap(twoPlayersMap); final var playerIds = gameMap.getPlayerIds(); final var expectedIds = new HashSet<Integer>(); expectedIds.add(0); expectedIds.add(1); }",
        "C": "public Set<Integer> getPlayerIds() { // DONE return new HashSet<>(initialPlayersPositions.values()); }",
        "label": "P"
    },
    "1651": {
        "dataset": "COMP 3021",
        "project": "hwolee",
        "bug_id": "17",
        "T": "void testMapWithoutPlayer() { final var invalidMap = \"\"\" 233 ### #.# ### \"\"\"; } // @Tag(TestKind.HIDDEN) // @Test // void testUnmatchedPlayersAndBoxes() { // final var invalidMap = \"\"\" // 233 // ###### // #A..@# // #...@# // #a.b@# // #.a.@# // #..a.# // ###### // \"\"\"; // assertThrowsExactly(IllegalArgumentException.class, () -> TestHelper.parseGameMap(invalidMap)); // }",
        "C": "public TerminalRenderingEngine(PrintStream outputSteam) { this.outputSteam = outputSteam; }",
        "label": "P"
    },
    "1652": {
        "dataset": "COMP 3021",
        "project": "hwolee",
        "bug_id": "18",
        "T": "void testManyPlayersMap() { final var manyPlayersMap = \"\"\" 233 ###### #A.P@@# #vCB@@# #.cpD@# #Ga.d@# #g.bV@# ###### \"\"\"; final var gameMap = TestHelper.parseGameMap(manyPlayersMap); final var playerIds = gameMap.getPlayerIds(); final var expectedIds = new HashSet<>(Arrays.asList( 0, 'P' - 'A', 'C' - 'A', 'B' - 'A', 'D' - 'A', 'G' - 'A', 'V' - 'A' )); }",
        "C": "public Set<Integer> getPlayerIds() { // DONE return new HashSet<>(initialPlayersPositions.values()); }",
        "label": "P"
    },
    "1653": {
        "dataset": "COMP 3021",
        "project": "hwolee",
        "bug_id": "19",
        "T": "void testHeightForNonRectangularMap() { final var gameMap = TestHelper.parseGameMap(nonRectangularMap); }",
        "C": "",
        "label": "P"
    },
    "1654": {
        "dataset": "COMP 3021",
        "project": "hwolee",
        "bug_id": "20",
        "T": "void testDuplicatedPlayers() { final var invalidMap = \"\"\" 233 ###### #A..@# #..A@# #....# #.a..# #..b.# ###### \"\"\"; }",
        "C": "",
        "label": "P"
    },
    "1655": {
        "dataset": "COMP 3021",
        "project": "hwolee",
        "bug_id": "21",
        "T": "void testParseMapWithoutUndoLimit() { final var invalidMap = String.join(\"\\n\", rectangularMap.lines().skip(1).toList()); }",
        "C": "",
        "label": "P"
    },
    "1656": {
        "dataset": "COMP 3021",
        "project": "hwolee",
        "bug_id": "22",
        "T": "void testInsufficientDestinations() { final var invalidMap = \"\"\" 233 ###### #A..@# #...@# #a...# #.a..# #..a.# ###### \"\"\"; }",
        "C": "",
        "label": "P"
    },
    "1657": {
        "dataset": "COMP 3021",
        "project": "hwolee",
        "bug_id": "23",
        "T": "void testSuperLargeMap() { try { new GameMap(Integer.MAX_VALUE, Integer.MAX_VALUE, Collections.emptySet(), 0); } catch (OutOfMemoryError e) { throw new RuntimeException(e); } }); }",
        "C": "public GameMap(int maxWidth, int maxHeight, Set<Position> destinations, int undoLimit) { // DONE this.maxWidth = maxWidth; this.maxHeight = maxHeight; this.destinations = destinations; this.undoLimit = undoLimit; } /** * Parses the map from a string representation. * The first line is undo limit. * Starting from the second line, the game map is represented as follows, * <li># represents a {@link Wall}</li> * <li>@ represents a box destination.</li> * <li>Any upper-case letter represents a {@link Player}.</li> * <li> * Any lower-case letter represents a {@link Box} that is only movable by the player with the corresponding upper-case letter. * For instance, box \"a\" can only be moved by player \"A\" and not movable by player \"B\". * </li> * <li>. represents an {@link Empty} position in the map, meaning there is no player or box currently at this position.</li> * <p> * Notes: * <li> * There can be at most 26 players. * All implementations of classes in the hk.ust.comp3021.game package should support up to 26 players. * </li> * <li> * For simplicity, we assume the given map is bounded with a closed boundary. * There is no need to check this point. * </li> * <li> * Example maps can be found in \"src/main/resources\". * </li> * * @param mapText The string representation. * @return The parsed GameMap object. * @throws IllegalArgumentException if undo limit is negative but not -1. * @throws IllegalArgumentException if there are multiple same upper-case letters, i.e., one player can only exist at one position. * @throws IllegalArgumentException if there are no players in the map. * @throws IllegalArgumentException if the number of boxes is not equal to the number of box destinations. * @throws IllegalArgumentException if there are boxes whose {@link Box#getPlayerId()} public TerminalRenderingEngine(PrintStream outputSteam) { this.outputSteam = outputSteam; }",
        "label": "P"
    },
    "1658": {
        "dataset": "COMP 3021",
        "project": "hwolee",
        "bug_id": "24",
        "T": "void testInvalidUndoLimit() { final var invalidMap = \"\"\" -233 ###### #A..@# #...@# #a.b@# #.a.@# #..a.# ###### \"\"\"; }",
        "C": "",
        "label": "P"
    },
    "1659": {
        "dataset": "COMP 3021",
        "project": "hwolee",
        "bug_id": "25",
        "T": "void testEmptyMap() { final var invalidMap = \"\"; }",
        "C": "",
        "label": "P"
    },
    "1660": {
        "dataset": "COMP 3021",
        "project": "hwolee",
        "bug_id": "26",
        "T": "void testMove(String input, String name, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); } private InputStream fixValueStream(String content) { final var bytes = content.getBytes(StandardCharsets.UTF_8); return new ByteArrayInputStream(bytes); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine(); // DONE String instruction = inputLine.toUpperCase(); // EXIT: exit game if (instruction.equals(\"EXIT\")) { return new Exit(-1); } // ASWD: move Player with ID 0 to Left, Down, Up, Right if (instruction.equals(\"A\")) { return new Move.Left(0); } else if (instruction.equals(\"S\")) { return new Move.Down(0); } else if (instruction.equals(\"W\")) { return new Move.Up(0); } else if (instruction.equals(\"D\")) { return new Move.Right(0); } // HJKL: move Player with ID 1 to Left, Down, Up, Right if (instruction.equals(\"H\")) { return new Move.Left(1); } else if (instruction.equals(\"J\")) { return new Move.Down(1); } else if (instruction.equals(\"K\")) { return new Move.Up(1); } else if (instruction.equals(\"L\")) { return new Move.Right(1); } // U: undo to previous GameState if (instruction.equals(\"U\")) { return new Undo(-1); } return new InvalidInput(-1, \"Invalid Input.\"); }",
        "label": "P"
    },
    "1661": {
        "dataset": "COMP 3021",
        "project": "hwolee",
        "bug_id": "27",
        "T": "void testMove(String input, String name, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); } private InputStream fixValueStream(String content) { final var bytes = content.getBytes(StandardCharsets.UTF_8); return new ByteArrayInputStream(bytes); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine(); // DONE String instruction = inputLine.toUpperCase(); // EXIT: exit game if (instruction.equals(\"EXIT\")) { return new Exit(-1); } // ASWD: move Player with ID 0 to Left, Down, Up, Right if (instruction.equals(\"A\")) { return new Move.Left(0); } else if (instruction.equals(\"S\")) { return new Move.Down(0); } else if (instruction.equals(\"W\")) { return new Move.Up(0); } else if (instruction.equals(\"D\")) { return new Move.Right(0); } // HJKL: move Player with ID 1 to Left, Down, Up, Right if (instruction.equals(\"H\")) { return new Move.Left(1); } else if (instruction.equals(\"J\")) { return new Move.Down(1); } else if (instruction.equals(\"K\")) { return new Move.Up(1); } else if (instruction.equals(\"L\")) { return new Move.Right(1); } // U: undo to previous GameState if (instruction.equals(\"U\")) { return new Undo(-1); } return new InvalidInput(-1, \"Invalid Input.\"); }",
        "label": "P"
    },
    "1662": {
        "dataset": "COMP 3021",
        "project": "hwolee",
        "bug_id": "28",
        "T": "void testMove(String input, String name, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); } private InputStream fixValueStream(String content) { final var bytes = content.getBytes(StandardCharsets.UTF_8); return new ByteArrayInputStream(bytes); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine(); // DONE String instruction = inputLine.toUpperCase(); // EXIT: exit game if (instruction.equals(\"EXIT\")) { return new Exit(-1); } // ASWD: move Player with ID 0 to Left, Down, Up, Right if (instruction.equals(\"A\")) { return new Move.Left(0); } else if (instruction.equals(\"S\")) { return new Move.Down(0); } else if (instruction.equals(\"W\")) { return new Move.Up(0); } else if (instruction.equals(\"D\")) { return new Move.Right(0); } // HJKL: move Player with ID 1 to Left, Down, Up, Right if (instruction.equals(\"H\")) { return new Move.Left(1); } else if (instruction.equals(\"J\")) { return new Move.Down(1); } else if (instruction.equals(\"K\")) { return new Move.Up(1); } else if (instruction.equals(\"L\")) { return new Move.Right(1); } // U: undo to previous GameState if (instruction.equals(\"U\")) { return new Undo(-1); } return new InvalidInput(-1, \"Invalid Input.\"); }",
        "label": "P"
    },
    "1663": {
        "dataset": "COMP 3021",
        "project": "hwolee",
        "bug_id": "29",
        "T": "void testMove(String input, String name, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); } private InputStream fixValueStream(String content) { final var bytes = content.getBytes(StandardCharsets.UTF_8); return new ByteArrayInputStream(bytes); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine(); // DONE String instruction = inputLine.toUpperCase(); // EXIT: exit game if (instruction.equals(\"EXIT\")) { return new Exit(-1); } // ASWD: move Player with ID 0 to Left, Down, Up, Right if (instruction.equals(\"A\")) { return new Move.Left(0); } else if (instruction.equals(\"S\")) { return new Move.Down(0); } else if (instruction.equals(\"W\")) { return new Move.Up(0); } else if (instruction.equals(\"D\")) { return new Move.Right(0); } // HJKL: move Player with ID 1 to Left, Down, Up, Right if (instruction.equals(\"H\")) { return new Move.Left(1); } else if (instruction.equals(\"J\")) { return new Move.Down(1); } else if (instruction.equals(\"K\")) { return new Move.Up(1); } else if (instruction.equals(\"L\")) { return new Move.Right(1); } // U: undo to previous GameState if (instruction.equals(\"U\")) { return new Undo(-1); } return new InvalidInput(-1, \"Invalid Input.\"); }",
        "label": "P"
    },
    "1664": {
        "dataset": "COMP 3021",
        "project": "hwolee",
        "bug_id": "30",
        "T": "void testMove(String input, String name, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); } private InputStream fixValueStream(String content) { final var bytes = content.getBytes(StandardCharsets.UTF_8); return new ByteArrayInputStream(bytes); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine(); // DONE String instruction = inputLine.toUpperCase(); // EXIT: exit game if (instruction.equals(\"EXIT\")) { return new Exit(-1); } // ASWD: move Player with ID 0 to Left, Down, Up, Right if (instruction.equals(\"A\")) { return new Move.Left(0); } else if (instruction.equals(\"S\")) { return new Move.Down(0); } else if (instruction.equals(\"W\")) { return new Move.Up(0); } else if (instruction.equals(\"D\")) { return new Move.Right(0); } // HJKL: move Player with ID 1 to Left, Down, Up, Right if (instruction.equals(\"H\")) { return new Move.Left(1); } else if (instruction.equals(\"J\")) { return new Move.Down(1); } else if (instruction.equals(\"K\")) { return new Move.Up(1); } else if (instruction.equals(\"L\")) { return new Move.Right(1); } // U: undo to previous GameState if (instruction.equals(\"U\")) { return new Undo(-1); } return new InvalidInput(-1, \"Invalid Input.\"); }",
        "label": "P"
    },
    "1665": {
        "dataset": "COMP 3021",
        "project": "hwolee",
        "bug_id": "31",
        "T": "void testMove(String input, String name, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); } private InputStream fixValueStream(String content) { final var bytes = content.getBytes(StandardCharsets.UTF_8); return new ByteArrayInputStream(bytes); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine(); // DONE String instruction = inputLine.toUpperCase(); // EXIT: exit game if (instruction.equals(\"EXIT\")) { return new Exit(-1); } // ASWD: move Player with ID 0 to Left, Down, Up, Right if (instruction.equals(\"A\")) { return new Move.Left(0); } else if (instruction.equals(\"S\")) { return new Move.Down(0); } else if (instruction.equals(\"W\")) { return new Move.Up(0); } else if (instruction.equals(\"D\")) { return new Move.Right(0); } // HJKL: move Player with ID 1 to Left, Down, Up, Right if (instruction.equals(\"H\")) { return new Move.Left(1); } else if (instruction.equals(\"J\")) { return new Move.Down(1); } else if (instruction.equals(\"K\")) { return new Move.Up(1); } else if (instruction.equals(\"L\")) { return new Move.Right(1); } // U: undo to previous GameState if (instruction.equals(\"U\")) { return new Undo(-1); } return new InvalidInput(-1, \"Invalid Input.\"); }",
        "label": "P"
    },
    "1666": {
        "dataset": "COMP 3021",
        "project": "hwolee",
        "bug_id": "32",
        "T": "void testMove(String input, String name, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); } private InputStream fixValueStream(String content) { final var bytes = content.getBytes(StandardCharsets.UTF_8); return new ByteArrayInputStream(bytes); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine(); // DONE String instruction = inputLine.toUpperCase(); // EXIT: exit game if (instruction.equals(\"EXIT\")) { return new Exit(-1); } // ASWD: move Player with ID 0 to Left, Down, Up, Right if (instruction.equals(\"A\")) { return new Move.Left(0); } else if (instruction.equals(\"S\")) { return new Move.Down(0); } else if (instruction.equals(\"W\")) { return new Move.Up(0); } else if (instruction.equals(\"D\")) { return new Move.Right(0); } // HJKL: move Player with ID 1 to Left, Down, Up, Right if (instruction.equals(\"H\")) { return new Move.Left(1); } else if (instruction.equals(\"J\")) { return new Move.Down(1); } else if (instruction.equals(\"K\")) { return new Move.Up(1); } else if (instruction.equals(\"L\")) { return new Move.Right(1); } // U: undo to previous GameState if (instruction.equals(\"U\")) { return new Undo(-1); } return new InvalidInput(-1, \"Invalid Input.\"); }",
        "label": "P"
    },
    "1667": {
        "dataset": "COMP 3021",
        "project": "hwolee",
        "bug_id": "33",
        "T": "void testMove(String input, String name, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); } private InputStream fixValueStream(String content) { final var bytes = content.getBytes(StandardCharsets.UTF_8); return new ByteArrayInputStream(bytes); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine(); // DONE String instruction = inputLine.toUpperCase(); // EXIT: exit game if (instruction.equals(\"EXIT\")) { return new Exit(-1); } // ASWD: move Player with ID 0 to Left, Down, Up, Right if (instruction.equals(\"A\")) { return new Move.Left(0); } else if (instruction.equals(\"S\")) { return new Move.Down(0); } else if (instruction.equals(\"W\")) { return new Move.Up(0); } else if (instruction.equals(\"D\")) { return new Move.Right(0); } // HJKL: move Player with ID 1 to Left, Down, Up, Right if (instruction.equals(\"H\")) { return new Move.Left(1); } else if (instruction.equals(\"J\")) { return new Move.Down(1); } else if (instruction.equals(\"K\")) { return new Move.Up(1); } else if (instruction.equals(\"L\")) { return new Move.Right(1); } // U: undo to previous GameState if (instruction.equals(\"U\")) { return new Undo(-1); } return new InvalidInput(-1, \"Invalid Input.\"); }",
        "label": "P"
    },
    "1668": {
        "dataset": "COMP 3021",
        "project": "hwolee",
        "bug_id": "34",
        "T": "void testUndo(String input, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine(); // DONE String instruction = inputLine.toUpperCase(); // EXIT: exit game if (instruction.equals(\"EXIT\")) { return new Exit(-1); } // ASWD: move Player with ID 0 to Left, Down, Up, Right if (instruction.equals(\"A\")) { return new Move.Left(0); } else if (instruction.equals(\"S\")) { return new Move.Down(0); } else if (instruction.equals(\"W\")) { return new Move.Up(0); } else if (instruction.equals(\"D\")) { return new Move.Right(0); } // HJKL: move Player with ID 1 to Left, Down, Up, Right if (instruction.equals(\"H\")) { return new Move.Left(1); } else if (instruction.equals(\"J\")) { return new Move.Down(1); } else if (instruction.equals(\"K\")) { return new Move.Up(1); } else if (instruction.equals(\"L\")) { return new Move.Right(1); } // U: undo to previous GameState if (instruction.equals(\"U\")) { return new Undo(-1); } return new InvalidInput(-1, \"Invalid Input.\"); }",
        "label": "P"
    },
    "1669": {
        "dataset": "COMP 3021",
        "project": "hwolee",
        "bug_id": "35",
        "T": "void testInvalidInput() { final var inputStream = fixValueStream(\"blah blah\"); final var inputEngine = new TerminalInputEngine(inputStream); final var action = inputEngine.fetchAction(); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine(); // DONE String instruction = inputLine.toUpperCase(); // EXIT: exit game if (instruction.equals(\"EXIT\")) { return new Exit(-1); } // ASWD: move Player with ID 0 to Left, Down, Up, Right if (instruction.equals(\"A\")) { return new Move.Left(0); } else if (instruction.equals(\"S\")) { return new Move.Down(0); } else if (instruction.equals(\"W\")) { return new Move.Up(0); } else if (instruction.equals(\"D\")) { return new Move.Right(0); } // HJKL: move Player with ID 1 to Left, Down, Up, Right if (instruction.equals(\"H\")) { return new Move.Left(1); } else if (instruction.equals(\"J\")) { return new Move.Down(1); } else if (instruction.equals(\"K\")) { return new Move.Up(1); } else if (instruction.equals(\"L\")) { return new Move.Right(1); } // U: undo to previous GameState if (instruction.equals(\"U\")) { return new Undo(-1); } return new InvalidInput(-1, \"Invalid Input.\"); }",
        "label": "P"
    },
    "1670": {
        "dataset": "COMP 3021",
        "project": "hwolee",
        "bug_id": "36",
        "T": "void testUndoWhenThereIsNoMove() { final var gameState = new GameState(TestHelper.parseGameMap(\"\"\" 233 ###### #A.a@# #..a@# ###### \"\"\" )); gameState.undo(); } private Entity generateEntity(int key) { return switch (key % 4) { case 0 -> new Box(0); case 1 -> new Empty(); case 2 -> new Player(0); case 3 -> new Wall(); default -> throw new ShouldNotReachException(); }; }",
        "C": "public GameState(@NotNull GameMap map) { // DONE this.originalGameMap = map; this.undoQuotaLeft = originalGameMap.getUndoLimit().isPresent() ? originalGameMap.getUndoLimit().get() : -1; this.checkpoints = new ArrayList<>(); this.currentMap = this.initializeMapFromOriginalGameMap(); this.updateStatesFromCurrentMap(); } public void undo() { // DONE if (this.getUndoQuota().isPresent() && !this.checkpoints.isEmpty()) { this.undoQuotaLeft--; } this.mostRecentAction = null; if (!this.checkpoints.isEmpty()) { this.checkpoints.remove(this.checkpoints.size() - 1); } if (this.checkpoints.isEmpty()) { // Revert to initial game state this.currentMap = this.initializeMapFromOriginalGameMap(); } else { // Revert to previous checkpoint Checkpoint checkpoint = this.checkpoints.get(this.checkpoints.size() - 1); // Remove Players and Boxes from currentMap for (int playerId: checkpoint.playerLocations.keySet()) { // Remove Player from currentMap Position playerPosition = this.getPlayerPositionById(playerId); this.currentMap[playerPosition.x()][playerPosition.y()] = new Empty(); } for (Position cratePosition: this.currentCratesLocations.keySet()) { // Remove Box from currentMap this.currentMap[cratePosition.x()][cratePosition.y()] = new Empty(); } // Add Players and Boxes to currentMap by Checkpoint Positions for (int playerId: checkpoint.playerLocations.keySet()) { // Add Player to currentMap Position playerPosition = checkpoint.playerLocations.get(playerId); this.currentMap[playerPosition.x()][playerPosition.y()] = new Player(playerId); } for (Position cratePosition: checkpoint.cratesLocations.keySet()) { // Add Box to currentMap int playerId = checkpoint.cratesLocations.get(cratePosition); this.currentMap[cratePosition.x()][cratePosition.y()] = new Box(playerId); } } this.updateStatesFromCurrentMap(); } /** * Get the maximum width of the game map. * This should be the same as that in {@link GameMap} public TerminalRenderingEngine(PrintStream outputSteam) { this.outputSteam = outputSteam; } public Box(int playerId) { this.playerId = playerId; } public Player(int id) { this.id = id; } public ShouldNotReachException() { super(\"This branch should not be reached.\"); }",
        "label": "P"
    },
    "1671": {
        "dataset": "COMP 3021",
        "project": "hwolee",
        "bug_id": "37",
        "T": "void testGetUndoUnlimited() { final var gameState = new GameState(TestHelper.parseGameMap(\"\"\" -1 ###### #.Aa@# #..a@# ###### \"\"\" )); }",
        "C": "public GameState(@NotNull GameMap map) { // DONE this.originalGameMap = map; this.undoQuotaLeft = originalGameMap.getUndoLimit().isPresent() ? originalGameMap.getUndoLimit().get() : -1; this.checkpoints = new ArrayList<>(); this.currentMap = this.initializeMapFromOriginalGameMap(); this.updateStatesFromCurrentMap(); }",
        "label": "P"
    },
    "1672": {
        "dataset": "COMP 3021",
        "project": "hwolee",
        "bug_id": "38",
        "T": "void testMapCopying() { final var maxWidth = 2333; final var maxHeight = 2333; final var random = new Random(); final var randomEntities = Stream.generate(() -> Position.of(random.nextInt(maxWidth), random.nextInt(maxHeight))) .distinct() .limit(100) .collect(Collectors.toMap(Function.identity(), it -> generateEntity(it.x()))); final var firstPos = randomEntities.keySet().stream().findFirst(); final var gameMap = new GameMap(maxWidth, maxHeight, Collections.singleton(firstPos.get()), 233); randomEntities.forEach(gameMap::putEntity); final var gameState = new GameState(gameMap); final var randomPosition = randomEntities.keySet().stream().findAny(); gameMap.putEntity(randomPosition.get(), new Empty()); randomEntities.forEach((p, e) -> assertEquals(e, gameState.getEntity(p))); }",
        "C": "public static @NotNull Position of(int x, int y) { return new Position(x, y); } public GameMap(int maxWidth, int maxHeight, Set<Position> destinations, int undoLimit) { // DONE this.maxWidth = maxWidth; this.maxHeight = maxHeight; this.destinations = destinations; this.undoLimit = undoLimit; } /** * Parses the map from a string representation. * The first line is undo limit. * Starting from the second line, the game map is represented as follows, * <li># represents a {@link Wall}</li> * <li>@ represents a box destination.</li> * <li>Any upper-case letter represents a {@link Player}.</li> * <li> * Any lower-case letter represents a {@link Box} that is only movable by the player with the corresponding upper-case letter. * For instance, box \"a\" can only be moved by player \"A\" and not movable by player \"B\". * </li> * <li>. represents an {@link Empty} position in the map, meaning there is no player or box currently at this position.</li> * <p> * Notes: * <li> * There can be at most 26 players. * All implementations of classes in the hk.ust.comp3021.game package should support up to 26 players. * </li> * <li> * For simplicity, we assume the given map is bounded with a closed boundary. * There is no need to check this point. * </li> * <li> * Example maps can be found in \"src/main/resources\". * </li> * * @param mapText The string representation. * @return The parsed GameMap object. * @throws IllegalArgumentException if undo limit is negative but not -1. * @throws IllegalArgumentException if there are multiple same upper-case letters, i.e., one player can only exist at one position. * @throws IllegalArgumentException if there are no players in the map. * @throws IllegalArgumentException if the number of boxes is not equal to the number of box destinations. * @throws IllegalArgumentException if there are boxes whose {@link Box#getPlayerId()} public GameState(@NotNull GameMap map) { // DONE this.originalGameMap = map; this.undoQuotaLeft = originalGameMap.getUndoLimit().isPresent() ? originalGameMap.getUndoLimit().get() : -1; this.checkpoints = new ArrayList<>(); this.currentMap = this.initializeMapFromOriginalGameMap(); this.updateStatesFromCurrentMap(); } public void putEntity(Position position, Entity entity) { // DONE this.entities[position.x()][position.y()] = entity; } public @Nullable Entity getEntity(@NotNull Position position) { // DONE return this.currentMap[position.x()][position.y()]; } /** * Get all box destination positions as a set in the game map. * This should be the same as that in {@link GameMap}",
        "label": "F"
    },
    "1673": {
        "dataset": "COMP 3021",
        "project": "hwolee",
        "bug_id": "39",
        "T": "void testUndoWhenThereIsMoveButNoCheckpoint() { final var gameState = new GameState(TestHelper.parseGameMap(\"\"\" 233 ###### #A.a@# #..a@# ###### \"\"\" )); gameState.move(Position.of(1, 1), Position.of(2, 1)); gameState.undo(); }",
        "C": "public GameState(@NotNull GameMap map) { // DONE this.originalGameMap = map; this.undoQuotaLeft = originalGameMap.getUndoLimit().isPresent() ? originalGameMap.getUndoLimit().get() : -1; this.checkpoints = new ArrayList<>(); this.currentMap = this.initializeMapFromOriginalGameMap(); this.updateStatesFromCurrentMap(); } public void move(Position from, Position to) { // DONE // Perform swapping 2 Entities Positions Entity entityFrom = this.currentMap[from.x()][from.y()]; switch (entityFrom) { case Player player -> this.currentPlayersLocations.put(player.getId(), to); case Box box -> { this.currentCratesLocations.remove(from); this.currentCratesLocations.put(to, box.getPlayerId()); } case null, default -> {} } this.currentMap[from.x()][from.y()] = this.currentMap[to.x()][to.y()]; this.currentMap[to.x()][to.y()] = entityFrom; } /** * Record a checkpoint of the game state, including: * <li>All current positions of entities in the game map.</li> * <li>Current undo quota</li> * <p> * Checkpoint is used in {@link GameState#undo()} public static @NotNull Position of(int x, int y) { return new Position(x, y); } public void undo() { // DONE if (this.getUndoQuota().isPresent() && !this.checkpoints.isEmpty()) { this.undoQuotaLeft--; } this.mostRecentAction = null; if (!this.checkpoints.isEmpty()) { this.checkpoints.remove(this.checkpoints.size() - 1); } if (this.checkpoints.isEmpty()) { // Revert to initial game state this.currentMap = this.initializeMapFromOriginalGameMap(); } else { // Revert to previous checkpoint Checkpoint checkpoint = this.checkpoints.get(this.checkpoints.size() - 1); // Remove Players and Boxes from currentMap for (int playerId: checkpoint.playerLocations.keySet()) { // Remove Player from currentMap Position playerPosition = this.getPlayerPositionById(playerId); this.currentMap[playerPosition.x()][playerPosition.y()] = new Empty(); } for (Position cratePosition: this.currentCratesLocations.keySet()) { // Remove Box from currentMap this.currentMap[cratePosition.x()][cratePosition.y()] = new Empty(); } // Add Players and Boxes to currentMap by Checkpoint Positions for (int playerId: checkpoint.playerLocations.keySet()) { // Add Player to currentMap Position playerPosition = checkpoint.playerLocations.get(playerId); this.currentMap[playerPosition.x()][playerPosition.y()] = new Player(playerId); } for (Position cratePosition: checkpoint.cratesLocations.keySet()) { // Add Box to currentMap int playerId = checkpoint.cratesLocations.get(cratePosition); this.currentMap[cratePosition.x()][cratePosition.y()] = new Box(playerId); } } this.updateStatesFromCurrentMap(); } /** * Get the maximum width of the game map. * This should be the same as that in {@link GameMap}",
        "label": "P"
    },
    "1674": {
        "dataset": "COMP 3021",
        "project": "hwolee",
        "bug_id": "40",
        "T": "void testGameExit() { final var gameState = mock(GameState.class); final var inputEngine = mock(TerminalInputEngine.class); final var renderingEngine = mock(TerminalRenderingEngine.class); when(gameState.isWin()).thenReturn(false, false, false); when(inputEngine.fetchAction()) .thenReturn(new InvalidInput(0, \"\"), new InvalidInput(0, \"\"), new Exit(0)); final var game = new TerminalSokobanGame(gameState, inputEngine, renderingEngine); game.run(); verify(renderingEngine, atLeastOnce()).message(any()); }",
        "C": "public InvalidInput(int initiator, @NotNull String message) { super(initiator); this.message = message; } public Exit(int initiator) { super(initiator); } public TerminalSokobanGame(GameState gameState, TerminalInputEngine inputEngine, TerminalRenderingEngine renderingEngine) { super(gameState); this.inputEngine = inputEngine; this.renderingEngine = renderingEngine; // DONE // Check the number of players if (gameState.getAllPlayerPositions().size() > 2) { throw new IllegalArgumentException(\"There cannot be more than two players in the map!\"); } } public void run() { // DONE this.renderingEngine.message(\"Sokoban game is ready.\"); this.renderingEngine.render(this.state); // Game terminates when the game is won or the player performs Exit action // Deadlock checking is not required while (!this.shouldStop()) { // Game loop if (this.state.getUndoQuota().isPresent()) { this.renderingEngine.message(\"Undo Quota: %d\".formatted(this.state.getUndoQuota().get())); } else { this.renderingEngine.message(\"Unlimited\"); } this.renderingEngine.message(\">>>\"); switch (this.processAction(this.inputEngine.fetchAction())) { case ActionResult.Success success -> {} case ActionResult.Failed failed -> { this.renderingEngine.message(failed.getReason()); } } this.renderingEngine.render(this.state); } this.renderingEngine.message(\"Game exits.\"); if (this.state.isWin()) { this.renderingEngine.message(\"You win.\"); } }",
        "label": "P"
    },
    "1675": {
        "dataset": "COMP 3021",
        "project": "hwolee",
        "bug_id": "41",
        "T": "void testGameWin() { final var gameState = mock(GameState.class); final var inputEngine = mock(TerminalInputEngine.class); final var renderingEngine = mock(TerminalRenderingEngine.class); when(gameState.isWin()).thenReturn(false, false, false, true); when(inputEngine.fetchAction()) .thenReturn(new InvalidInput(0, \"\")); final var game = new TerminalSokobanGame(gameState, inputEngine, renderingEngine); game.run(); verify(gameState, atLeastOnce()).isWin(); verify(renderingEngine, atLeastOnce()).message(any()); }",
        "C": "public InvalidInput(int initiator, @NotNull String message) { super(initiator); this.message = message; } public TerminalSokobanGame(GameState gameState, TerminalInputEngine inputEngine, TerminalRenderingEngine renderingEngine) { super(gameState); this.inputEngine = inputEngine; this.renderingEngine = renderingEngine; // DONE // Check the number of players if (gameState.getAllPlayerPositions().size() > 2) { throw new IllegalArgumentException(\"There cannot be more than two players in the map!\"); } } public void run() { // DONE this.renderingEngine.message(\"Sokoban game is ready.\"); this.renderingEngine.render(this.state); // Game terminates when the game is won or the player performs Exit action // Deadlock checking is not required while (!this.shouldStop()) { // Game loop if (this.state.getUndoQuota().isPresent()) { this.renderingEngine.message(\"Undo Quota: %d\".formatted(this.state.getUndoQuota().get())); } else { this.renderingEngine.message(\"Unlimited\"); } this.renderingEngine.message(\">>>\"); switch (this.processAction(this.inputEngine.fetchAction())) { case ActionResult.Success success -> {} case ActionResult.Failed failed -> { this.renderingEngine.message(failed.getReason()); } } this.renderingEngine.render(this.state); } this.renderingEngine.message(\"Game exits.\"); if (this.state.isWin()) { this.renderingEngine.message(\"You win.\"); } }",
        "label": "P"
    },
    "1676": {
        "dataset": "COMP 3021",
        "project": "hwolee",
        "bug_id": "42",
        "T": "void testMoreThanTwoPlayers() { final var gameState = mock(GameState.class); final var inputEngine = mock(TerminalInputEngine.class); final var renderingEngine = mock(TerminalRenderingEngine.class); when(gameState.getAllPlayerPositions()).thenReturn(new HashSet<>(Arrays.asList(Position.of(1, 1), Position.of(1, 2), Position.of(1, 3)))); }",
        "C": "public static @NotNull Position of(int x, int y) { return new Position(x, y); }",
        "label": "P"
    },
    "1677": {
        "dataset": "COMP 3021",
        "project": "hwlim",
        "bug_id": "0",
        "T": "void moveUp() { Position.of(233, 232), new Move.Up(-1).nextPosition(pos) ); }",
        "C": "public static @NotNull Position of(int x, int y) { return new Position(x, y); } public Up(int initiator) { super(initiator); }",
        "label": "P"
    },
    "1678": {
        "dataset": "COMP 3021",
        "project": "hwlim",
        "bug_id": "1",
        "T": "void moveDown() { Position.of(233, 234), new Move.Down(-1).nextPosition(pos) ); }",
        "C": "public static @NotNull Position of(int x, int y) { return new Position(x, y); } public Down(int initiator) { super(initiator); }",
        "label": "P"
    },
    "1679": {
        "dataset": "COMP 3021",
        "project": "hwlim",
        "bug_id": "2",
        "T": "void moveRight() { Position.of(234, 233), new Move.Right(-1).nextPosition(pos) ); }",
        "C": "public static @NotNull Position of(int x, int y) { return new Position(x, y); } public Right(int initiator) { super(initiator); }",
        "label": "P"
    },
    "1680": {
        "dataset": "COMP 3021",
        "project": "hwlim",
        "bug_id": "3",
        "T": "void testExceedingUndoQuota() { final var gameState = mock(GameState.class); when(gameState.getPlayerPositionById(anyInt())).thenReturn(Position.of(0, 0)); when(gameState.getUndoQuota()).thenReturn(Optional.of(0)); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Undo(0)); }",
        "C": "public Undo(int initiator) { super(initiator); }",
        "label": "P"
    },
    "1681": {
        "dataset": "COMP 3021",
        "project": "hwlim",
        "bug_id": "4",
        "T": "void testExit() { final var gameState = mock(GameState.class); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Exit(0)); }",
        "C": "public Exit(int initiator) { super(initiator); }",
        "label": "F"
    },
    "1682": {
        "dataset": "COMP 3021",
        "project": "hwlim",
        "bug_id": "5",
        "T": "void testUndoUnlimited() { final var gameState = mock(GameState.class); when(gameState.getPlayerPositionById(anyInt())).thenReturn(Position.of(0, 0)); when(gameState.getUndoQuota()).thenReturn(Optional.empty()); final var game = new SokobanGameForTesting(gameState); for (int i = 0; i < 10000; i++) { final var result = game.feedActionForProcessing(new Undo(0)); } verify(gameState, times(10000)).undo(); }",
        "C": "public TerminalRenderingEngine(PrintStream outputSteam) { this.outputSteam = outputSteam; } public Undo(int initiator) { super(initiator); }",
        "label": "P"
    },
    "1683": {
        "dataset": "COMP 3021",
        "project": "hwlim",
        "bug_id": "6",
        "T": "void testPushOtherPlayerBox() { String mapText = \"\"\" 233 ###### #AB.@# #b.a.# #@...# ###### \"\"\"; final var testMap = TestHelper.parseGameMap(mapText); final var gameState = spy(new GameState(testMap)); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Move.Down(0)); verify(gameState, never()).move(any(), any()); }",
        "C": "public GameState(@NotNull GameMap map) { // TODO this.currentBoxesLocations = map.getInitialBoxesLocations(); this.currentPlayerLocation = map.getInitialPlayerLocations(); this.undoLimitLeft = map.getUndoLimit().get(); this.destinations = map.getDestinations(); this.maxHeight = map.getMaxHeight(); this.maxWidth = map.getMaxWidth(); this.currentEntityLocations = map.getInitialEntityLocations(); this.checkpointBoxesLocations.add(new HashMap<>(map.getInitialBoxesLocations())); this.checkpointPlayerLocations.add(new HashMap<>(map.getInitialPlayerLocations())); this.checkpointEntityLocations.add(new HashMap<>(map.getInitialEntityLocations())); // System.out.println(\"checkpoint before: checkpointPlayerLocations = \" + checkpointPlayerLocations); // this.checkpointToGo; // Starts at -1 this.numberOfPlayers = map.getNumberOfPlayers(); //throw new NotImplementedException(); } public Down(int initiator) { super(initiator); }",
        "label": "P"
    },
    "1684": {
        "dataset": "COMP 3021",
        "project": "hwlim",
        "bug_id": "7",
        "T": "void testMoveNonExistingPlayer() { String mapText = \"\"\" 233 ###### #A..@# #a...# ##...# ###### \"\"\"; final var testMap = TestHelper.parseGameMap(mapText); final var gameState = spy(new GameState(testMap)); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Move.Down(23)); }",
        "C": "public GameState(@NotNull GameMap map) { // TODO this.currentBoxesLocations = map.getInitialBoxesLocations(); this.currentPlayerLocation = map.getInitialPlayerLocations(); this.undoLimitLeft = map.getUndoLimit().get(); this.destinations = map.getDestinations(); this.maxHeight = map.getMaxHeight(); this.maxWidth = map.getMaxWidth(); this.currentEntityLocations = map.getInitialEntityLocations(); this.checkpointBoxesLocations.add(new HashMap<>(map.getInitialBoxesLocations())); this.checkpointPlayerLocations.add(new HashMap<>(map.getInitialPlayerLocations())); this.checkpointEntityLocations.add(new HashMap<>(map.getInitialEntityLocations())); // System.out.println(\"checkpoint before: checkpointPlayerLocations = \" + checkpointPlayerLocations); // this.checkpointToGo; // Starts at -1 this.numberOfPlayers = map.getNumberOfPlayers(); //throw new NotImplementedException(); } public Down(int initiator) { super(initiator); }",
        "label": "P"
    },
    "1685": {
        "dataset": "COMP 3021",
        "project": "hwlim",
        "bug_id": "8",
        "T": "void testCheckpointWhenNeed() { final var gameState = spy(new GameState(TestHelper.parseGameMap(\"\"\" 233 ###### #.Aa@# #..a@# ###### \"\"\" ))); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Move.Right(0)); verify(gameState, times(1)).checkpoint(); }",
        "C": "public GameState(@NotNull GameMap map) { // TODO this.currentBoxesLocations = map.getInitialBoxesLocations(); this.currentPlayerLocation = map.getInitialPlayerLocations(); this.undoLimitLeft = map.getUndoLimit().get(); this.destinations = map.getDestinations(); this.maxHeight = map.getMaxHeight(); this.maxWidth = map.getMaxWidth(); this.currentEntityLocations = map.getInitialEntityLocations(); this.checkpointBoxesLocations.add(new HashMap<>(map.getInitialBoxesLocations())); this.checkpointPlayerLocations.add(new HashMap<>(map.getInitialPlayerLocations())); this.checkpointEntityLocations.add(new HashMap<>(map.getInitialEntityLocations())); // System.out.println(\"checkpoint before: checkpointPlayerLocations = \" + checkpointPlayerLocations); // this.checkpointToGo; // Starts at -1 this.numberOfPlayers = map.getNumberOfPlayers(); //throw new NotImplementedException(); } public Right(int initiator) { super(initiator); }",
        "label": "P"
    },
    "1686": {
        "dataset": "COMP 3021",
        "project": "hwlim",
        "bug_id": "9",
        "T": "void testPushBoxAgainstWall() { String mapText = \"\"\" 233 ###### #A..@# #a...# ##...# ###### \"\"\"; final var testMap = TestHelper.parseGameMap(mapText); final var gameState = spy(new GameState(testMap)); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Move.Down(0)); verify(gameState, never()).move(any(), any()); }",
        "C": "public GameState(@NotNull GameMap map) { // TODO this.currentBoxesLocations = map.getInitialBoxesLocations(); this.currentPlayerLocation = map.getInitialPlayerLocations(); this.undoLimitLeft = map.getUndoLimit().get(); this.destinations = map.getDestinations(); this.maxHeight = map.getMaxHeight(); this.maxWidth = map.getMaxWidth(); this.currentEntityLocations = map.getInitialEntityLocations(); this.checkpointBoxesLocations.add(new HashMap<>(map.getInitialBoxesLocations())); this.checkpointPlayerLocations.add(new HashMap<>(map.getInitialPlayerLocations())); this.checkpointEntityLocations.add(new HashMap<>(map.getInitialEntityLocations())); // System.out.println(\"checkpoint before: checkpointPlayerLocations = \" + checkpointPlayerLocations); // this.checkpointToGo; // Starts at -1 this.numberOfPlayers = map.getNumberOfPlayers(); //throw new NotImplementedException(); } public Down(int initiator) { super(initiator); }",
        "label": "P"
    },
    "1687": {
        "dataset": "COMP 3021",
        "project": "hwlim",
        "bug_id": "10",
        "T": "void testCheckpointWhenNotNeed() { final var gameState = spy(new GameState(TestHelper.parseGameMap(\"\"\" 233 ###### #A.a@# #..a@# ###### \"\"\" ))); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Move.Right(0)); verify(gameState, never()).checkpoint(); } private static class SokobanGameForTesting extends AbstractSokobanGame { protected SokobanGameForTesting(GameState gameState) { super(gameState); } @Override public void run() { } public ActionResult feedActionForProcessing(Action action) { return processAction(action); } }",
        "C": "public GameState(@NotNull GameMap map) { // TODO this.currentBoxesLocations = map.getInitialBoxesLocations(); this.currentPlayerLocation = map.getInitialPlayerLocations(); this.undoLimitLeft = map.getUndoLimit().get(); this.destinations = map.getDestinations(); this.maxHeight = map.getMaxHeight(); this.maxWidth = map.getMaxWidth(); this.currentEntityLocations = map.getInitialEntityLocations(); this.checkpointBoxesLocations.add(new HashMap<>(map.getInitialBoxesLocations())); this.checkpointPlayerLocations.add(new HashMap<>(map.getInitialPlayerLocations())); this.checkpointEntityLocations.add(new HashMap<>(map.getInitialEntityLocations())); // System.out.println(\"checkpoint before: checkpointPlayerLocations = \" + checkpointPlayerLocations); // this.checkpointToGo; // Starts at -1 this.numberOfPlayers = map.getNumberOfPlayers(); //throw new NotImplementedException(); } public Right(int initiator) { super(initiator); } public void run() { // TODO renderingEngine.message(StringResources.GAME_READY_MESSAGE); renderingEngine.render(state); if (!state.getUndoQuota().isPresent()) { renderingEngine.message(String.format(StringResources.UNDO_QUOTA_TEMPLATE, StringResources.UNDO_QUOTA_UNLIMITED)); } else { renderingEngine.message(String.format(StringResources.UNDO_QUOTA_TEMPLATE, state.getUndoQuota().get())); } while (!this.shouldStop()) { Action userAction = inputEngine.fetchAction(); ActionResult userActionResult = this.processAction(userAction); if (userActionResult instanceof ActionResult.Failed) { renderingEngine.message(((ActionResult.Failed) userActionResult).getReason()); } renderingEngine.render(state); if (userAction instanceof Exit) { renderingEngine.message(StringResources.GAME_EXIT_MESSAGE); return; } if (!state.getUndoQuota().isPresent()) { renderingEngine.message(String.format(StringResources.UNDO_QUOTA_TEMPLATE, StringResources.UNDO_QUOTA_UNLIMITED)); } else { renderingEngine.message(String.format(StringResources.UNDO_QUOTA_TEMPLATE, state.getUndoQuota().get())); } renderingEngine.message(\">>>\"); } if (this.shouldStop()) { // Player won the game renderingEngine.message(StringResources.GAME_EXIT_MESSAGE); renderingEngine.message(StringResources.WIN_MESSAGE); } // throw new NotImplementedException(); } protected ActionResult processAction(@NotNull Action action) { // TODO if (action instanceof InvalidInput) { return new ActionResult.Failed(action, ((InvalidInput) action).getMessage()); } if (action instanceof Move) { var position = state.getPlayerPositionById(action.getInitiator()); if (position == null) return new ActionResult.Failed(action, StringResources.PLAYER_NOT_FOUND); Position newPosition; Position oneMorePushPosition; if (action instanceof Move.Up) { newPosition = ((Move.Up) action).nextPosition(position); oneMorePushPosition = ((Move.Up) action).nextPosition(newPosition); } else if (action instanceof Move.Down) { newPosition = ((Move.Down) action).nextPosition(position); oneMorePushPosition = ((Move.Down) action).nextPosition(newPosition); } else if (action instanceof Move.Left) { newPosition = ((Move.Left) action).nextPosition(position); oneMorePushPosition = ((Move.Left) action).nextPosition(newPosition); } else { newPosition = ((Move.Right) action).nextPosition(position); oneMorePushPosition = ((Move.Right) action).nextPosition(newPosition); } Entity entityAtNewPosition = state.getEntity(newPosition); Entity entityAtOneMorePushPosition = state.getEntity(oneMorePushPosition); if (entityAtNewPosition instanceof Empty) { state.move(position, newPosition); return new ActionResult.Success(action); } if (entityAtNewPosition instanceof Box) { if (((Box) entityAtNewPosition).getPlayerId() == action.getInitiator()) { // Box is for that player if (entityAtOneMorePushPosition instanceof Empty) { // Box can be pushed to that location state.move(newPosition, oneMorePushPosition); state.move(position, newPosition); state.checkpoint(); // if (state.getDestinations().contains(entityAtOneMorePushPosition)) { // // Box has been pushed onto a destination, update checkpoint. // state.checkpoint(); // } return new ActionResult.Success(action); } } else { // Player pushing another player's box. Don't allow this. return new ActionResult.Failed(action, \"You cannot move other players' boxes.\"); } return new ActionResult.Failed(action, \"Failed to push the box.\"); } if (entityAtNewPosition instanceof Player) { // Player pushing another player. Don't allow this. return new ActionResult.Failed(action, \"You hit another player.\"); } return new ActionResult.Failed(action, \"You hit a wall.\"); } if (action instanceof Undo) { // System.out.println(\"action instanceof Undo\"); if (state.getUndoQuota().isPresent() && state.getUndoQuota().get() == 0) { return new ActionResult.Failed(action, StringResources.UNDO_QUOTA_RUN_OUT); } state.undo(); return new ActionResult.Success(action); } if (action instanceof Exit) { // userSpecifiedExit is used for checking whether user typed 'exit' // in terminalSokobanGame.shouldStop(); state.setUserSpecifiedExitToTrue(); return new ActionResult.Success(action); } throw new ShouldNotReachException(); // throw new NotImplementedException(); }",
        "label": "P"
    },
    "1688": {
        "dataset": "COMP 3021",
        "project": "hwlim",
        "bug_id": "11",
        "T": "void testHitAnotherPlayer() { String mapText = \"\"\" 233 ###### #A..@# #B...# #ab.@# ###### \"\"\"; final var testMap = TestHelper.parseGameMap(mapText); final var gameState = spy(new GameState(testMap)); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Move.Down(0)); verify(gameState, never()).move(any(), any()); }",
        "C": "public GameState(@NotNull GameMap map) { // TODO this.currentBoxesLocations = map.getInitialBoxesLocations(); this.currentPlayerLocation = map.getInitialPlayerLocations(); this.undoLimitLeft = map.getUndoLimit().get(); this.destinations = map.getDestinations(); this.maxHeight = map.getMaxHeight(); this.maxWidth = map.getMaxWidth(); this.currentEntityLocations = map.getInitialEntityLocations(); this.checkpointBoxesLocations.add(new HashMap<>(map.getInitialBoxesLocations())); this.checkpointPlayerLocations.add(new HashMap<>(map.getInitialPlayerLocations())); this.checkpointEntityLocations.add(new HashMap<>(map.getInitialEntityLocations())); // System.out.println(\"checkpoint before: checkpointPlayerLocations = \" + checkpointPlayerLocations); // this.checkpointToGo; // Starts at -1 this.numberOfPlayers = map.getNumberOfPlayers(); //throw new NotImplementedException(); } public Down(int initiator) { super(initiator); }",
        "label": "P"
    },
    "1689": {
        "dataset": "COMP 3021",
        "project": "hwlim",
        "bug_id": "12",
        "T": "void testUndoWithinQuota() { final var gameState = mock(GameState.class); when(gameState.getPlayerPositionById(anyInt())).thenReturn(Position.of(0, 0)); when(gameState.getUndoQuota()).thenReturn(Optional.of(1)); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Undo(0)); verify(gameState, times(1)).undo(); }",
        "C": "public Undo(int initiator) { super(initiator); }",
        "label": "P"
    },
    "1690": {
        "dataset": "COMP 3021",
        "project": "hwlim",
        "bug_id": "13",
        "T": "void testInvalidInput() { final var game = new SokobanGameForTesting(mock(GameState.class)); final var message = String.valueOf(new Random().nextLong()); final var action = new InvalidInput(-1, message); final var result = game.feedActionForProcessing(action); }",
        "C": "public InvalidInput(int initiator, @NotNull String message) { super(initiator); this.message = message; }",
        "label": "P"
    },
    "1691": {
        "dataset": "COMP 3021",
        "project": "hwlim",
        "bug_id": "14",
        "T": "void testUndoLimitParsing() { final var gameMap = TestHelper.parseGameMap(rectangularMap); }",
        "C": "",
        "label": "P"
    },
    "1692": {
        "dataset": "COMP 3021",
        "project": "hwlim",
        "bug_id": "15",
        "T": "void testWidthForNonRectangularMap() { final var gameMap = TestHelper.parseGameMap(nonRectangularMap); }",
        "C": "",
        "label": "P"
    },
    "1693": {
        "dataset": "COMP 3021",
        "project": "hwlim",
        "bug_id": "16",
        "T": "void testTwoPlayersMap() { final var twoPlayersMap = \"\"\" 233 ###### #A..@# #..B@# #....# #.a..# #..b.# ###### \"\"\"; final var gameMap = TestHelper.parseGameMap(twoPlayersMap); final var playerIds = gameMap.getPlayerIds(); final var expectedIds = new HashSet<Integer>(); expectedIds.add(0); expectedIds.add(1); }",
        "C": "public Set<Integer> getPlayerIds() { // TODO Set<Integer> playerIDSet = Collections.emptySet(); for (Player player : initialPlayerLocations.values()) { playerIDSet.add(player.getId()); } return playerIDSet; // throw new NotImplementedException(); }",
        "label": "F"
    },
    "1694": {
        "dataset": "COMP 3021",
        "project": "hwlim",
        "bug_id": "17",
        "T": "void testMapWithoutPlayer() { final var invalidMap = \"\"\" 233 ### #.# ### \"\"\"; } // @Tag(TestKind.HIDDEN) // @Test // void testUnmatchedPlayersAndBoxes() { // final var invalidMap = \"\"\" // 233 // ###### // #A..@# // #...@# // #a.b@# // #.a.@# // #..a.# // ###### // \"\"\"; // assertThrowsExactly(IllegalArgumentException.class, () -> TestHelper.parseGameMap(invalidMap)); // }",
        "C": "public TerminalRenderingEngine(PrintStream outputSteam) { this.outputSteam = outputSteam; }",
        "label": "P"
    },
    "1695": {
        "dataset": "COMP 3021",
        "project": "hwlim",
        "bug_id": "18",
        "T": "void testManyPlayersMap() { final var manyPlayersMap = \"\"\" 233 ###### #A.P@@# #vCB@@# #.cpD@# #Ga.d@# #g.bV@# ###### \"\"\"; final var gameMap = TestHelper.parseGameMap(manyPlayersMap); final var playerIds = gameMap.getPlayerIds(); final var expectedIds = new HashSet<>(Arrays.asList( 0, 'P' - 'A', 'C' - 'A', 'B' - 'A', 'D' - 'A', 'G' - 'A', 'V' - 'A' )); }",
        "C": "public Set<Integer> getPlayerIds() { // TODO Set<Integer> playerIDSet = Collections.emptySet(); for (Player player : initialPlayerLocations.values()) { playerIDSet.add(player.getId()); } return playerIDSet; // throw new NotImplementedException(); }",
        "label": "F"
    },
    "1696": {
        "dataset": "COMP 3021",
        "project": "hwlim",
        "bug_id": "19",
        "T": "void testHeightForNonRectangularMap() { final var gameMap = TestHelper.parseGameMap(nonRectangularMap); }",
        "C": "",
        "label": "P"
    },
    "1697": {
        "dataset": "COMP 3021",
        "project": "hwlim",
        "bug_id": "20",
        "T": "void testDuplicatedPlayers() { final var invalidMap = \"\"\" 233 ###### #A..@# #..A@# #....# #.a..# #..b.# ###### \"\"\"; }",
        "C": "",
        "label": "P"
    },
    "1698": {
        "dataset": "COMP 3021",
        "project": "hwlim",
        "bug_id": "21",
        "T": "void testParseMapWithoutUndoLimit() { final var invalidMap = String.join(\"\\n\", rectangularMap.lines().skip(1).toList()); }",
        "C": "",
        "label": "P"
    },
    "1699": {
        "dataset": "COMP 3021",
        "project": "hwlim",
        "bug_id": "22",
        "T": "void testInsufficientDestinations() { final var invalidMap = \"\"\" 233 ###### #A..@# #...@# #a...# #.a..# #..a.# ###### \"\"\"; }",
        "C": "",
        "label": "P"
    },
    "1700": {
        "dataset": "COMP 3021",
        "project": "hwlim",
        "bug_id": "23",
        "T": "void testSuperLargeMap() { try { new GameMap(Integer.MAX_VALUE, Integer.MAX_VALUE, Collections.emptySet(), 0); } catch (OutOfMemoryError e) { throw new RuntimeException(e); } }); }",
        "C": "public GameMap(int maxWidth, int maxHeight, Set<Position> destinations, int undoLimit) { // TODO this.maxWidth = maxWidth; this.maxHeight = maxHeight; this.destinations = destinations; this.undoLimit = undoLimit; //throw new NotImplementedException(); } /** * Parses the map from a string representation. * The first line is undo limit. * Starting from the second line, the game map is represented as follows, * <li># represents a {@link Wall}</li> * <li>@ represents a box destination.</li> * <li>Any upper-case letter represents a {@link Player}.</li> * <li> * Any lower-case letter represents a {@link Box} that is only movable by the player with the corresponding upper-case letter. * For instance, box \"a\" can only be moved by player \"A\" and not movable by player \"B\". * </li> * <li>. represents an {@link Empty} position in the map, meaning there is no player or box currently at this position.</li> * <p> * Notes: * <li> * There can be at most 26 players. * All implementations of classes in the hk.ust.comp3021.game package should support up to 26 players. * </li> * <li> * For simplicity, we assume the given map is bounded with a closed boundary. * There is no need to check this point. * </li> * <li> * Example maps can be found in \"src/main/resources\". * </li> * * @param mapText The string representation. * @return The parsed GameMap object. * @throws IllegalArgumentException if undo limit is negative but not -1. * @throws IllegalArgumentException if there are multiple same upper-case letters, i.e., one player can only exist at one position. * @throws IllegalArgumentException if there are no players in the map. * @throws IllegalArgumentException if the number of boxes is not equal to the number of box destinations. * @throws IllegalArgumentException if there are boxes whose {@link Box#getPlayerId()} public TerminalRenderingEngine(PrintStream outputSteam) { this.outputSteam = outputSteam; }",
        "label": "P"
    },
    "1701": {
        "dataset": "COMP 3021",
        "project": "hwlim",
        "bug_id": "24",
        "T": "void testInvalidUndoLimit() { final var invalidMap = \"\"\" -233 ###### #A..@# #...@# #a.b@# #.a.@# #..a.# ###### \"\"\"; }",
        "C": "",
        "label": "P"
    },
    "1702": {
        "dataset": "COMP 3021",
        "project": "hwlim",
        "bug_id": "25",
        "T": "void testEmptyMap() { final var invalidMap = \"\"; }",
        "C": "",
        "label": "P"
    },
    "1703": {
        "dataset": "COMP 3021",
        "project": "hwlim",
        "bug_id": "26",
        "T": "void testMove(String input, String name, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); } private InputStream fixValueStream(String content) { final var bytes = content.getBytes(StandardCharsets.UTF_8); return new ByteArrayInputStream(bytes); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // System.out.println(\"fetched action\"); // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. // terminalScanner.next(); final var inputLine = terminalScanner.nextLine(); // TODO // Check how to check the initiator int initiator = 0; if (inputLine.equals(StringResources.EXIT_COMMAND_TEXT)) return new Exit(-1); if (inputLine.length() != 1) { return new InvalidInput(initiator, StringResources.INVALID_INPUT_MESSAGE); } String lowerInputLine = inputLine.toLowerCase(); Character inputChar = lowerInputLine.charAt(0); switch (inputChar) { case 'a': return new Move.Left(initiator); case 'w': return new Move.Up(initiator); case 's': return new Move.Down(initiator); case 'd': return new Move.Right(initiator); case 'h': return new Move.Left(1); case 'j': return new Move.Down(1); case 'k': return new Move.Up(1); case 'l': return new Move.Right(1); case 'u': return new Undo(-1); default: return new InvalidInput(-1, StringResources.INVALID_INPUT_MESSAGE); } // throw new NotImplementedException(); }",
        "label": "P"
    },
    "1704": {
        "dataset": "COMP 3021",
        "project": "hwlim",
        "bug_id": "27",
        "T": "void testMove(String input, String name, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); } private InputStream fixValueStream(String content) { final var bytes = content.getBytes(StandardCharsets.UTF_8); return new ByteArrayInputStream(bytes); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // System.out.println(\"fetched action\"); // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. // terminalScanner.next(); final var inputLine = terminalScanner.nextLine(); // TODO // Check how to check the initiator int initiator = 0; if (inputLine.equals(StringResources.EXIT_COMMAND_TEXT)) return new Exit(-1); if (inputLine.length() != 1) { return new InvalidInput(initiator, StringResources.INVALID_INPUT_MESSAGE); } String lowerInputLine = inputLine.toLowerCase(); Character inputChar = lowerInputLine.charAt(0); switch (inputChar) { case 'a': return new Move.Left(initiator); case 'w': return new Move.Up(initiator); case 's': return new Move.Down(initiator); case 'd': return new Move.Right(initiator); case 'h': return new Move.Left(1); case 'j': return new Move.Down(1); case 'k': return new Move.Up(1); case 'l': return new Move.Right(1); case 'u': return new Undo(-1); default: return new InvalidInput(-1, StringResources.INVALID_INPUT_MESSAGE); } // throw new NotImplementedException(); }",
        "label": "P"
    },
    "1705": {
        "dataset": "COMP 3021",
        "project": "hwlim",
        "bug_id": "28",
        "T": "void testMove(String input, String name, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); } private InputStream fixValueStream(String content) { final var bytes = content.getBytes(StandardCharsets.UTF_8); return new ByteArrayInputStream(bytes); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // System.out.println(\"fetched action\"); // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. // terminalScanner.next(); final var inputLine = terminalScanner.nextLine(); // TODO // Check how to check the initiator int initiator = 0; if (inputLine.equals(StringResources.EXIT_COMMAND_TEXT)) return new Exit(-1); if (inputLine.length() != 1) { return new InvalidInput(initiator, StringResources.INVALID_INPUT_MESSAGE); } String lowerInputLine = inputLine.toLowerCase(); Character inputChar = lowerInputLine.charAt(0); switch (inputChar) { case 'a': return new Move.Left(initiator); case 'w': return new Move.Up(initiator); case 's': return new Move.Down(initiator); case 'd': return new Move.Right(initiator); case 'h': return new Move.Left(1); case 'j': return new Move.Down(1); case 'k': return new Move.Up(1); case 'l': return new Move.Right(1); case 'u': return new Undo(-1); default: return new InvalidInput(-1, StringResources.INVALID_INPUT_MESSAGE); } // throw new NotImplementedException(); }",
        "label": "P"
    },
    "1706": {
        "dataset": "COMP 3021",
        "project": "hwlim",
        "bug_id": "29",
        "T": "void testMove(String input, String name, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); } private InputStream fixValueStream(String content) { final var bytes = content.getBytes(StandardCharsets.UTF_8); return new ByteArrayInputStream(bytes); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // System.out.println(\"fetched action\"); // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. // terminalScanner.next(); final var inputLine = terminalScanner.nextLine(); // TODO // Check how to check the initiator int initiator = 0; if (inputLine.equals(StringResources.EXIT_COMMAND_TEXT)) return new Exit(-1); if (inputLine.length() != 1) { return new InvalidInput(initiator, StringResources.INVALID_INPUT_MESSAGE); } String lowerInputLine = inputLine.toLowerCase(); Character inputChar = lowerInputLine.charAt(0); switch (inputChar) { case 'a': return new Move.Left(initiator); case 'w': return new Move.Up(initiator); case 's': return new Move.Down(initiator); case 'd': return new Move.Right(initiator); case 'h': return new Move.Left(1); case 'j': return new Move.Down(1); case 'k': return new Move.Up(1); case 'l': return new Move.Right(1); case 'u': return new Undo(-1); default: return new InvalidInput(-1, StringResources.INVALID_INPUT_MESSAGE); } // throw new NotImplementedException(); }",
        "label": "P"
    },
    "1707": {
        "dataset": "COMP 3021",
        "project": "hwlim",
        "bug_id": "30",
        "T": "void testMove(String input, String name, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); } private InputStream fixValueStream(String content) { final var bytes = content.getBytes(StandardCharsets.UTF_8); return new ByteArrayInputStream(bytes); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // System.out.println(\"fetched action\"); // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. // terminalScanner.next(); final var inputLine = terminalScanner.nextLine(); // TODO // Check how to check the initiator int initiator = 0; if (inputLine.equals(StringResources.EXIT_COMMAND_TEXT)) return new Exit(-1); if (inputLine.length() != 1) { return new InvalidInput(initiator, StringResources.INVALID_INPUT_MESSAGE); } String lowerInputLine = inputLine.toLowerCase(); Character inputChar = lowerInputLine.charAt(0); switch (inputChar) { case 'a': return new Move.Left(initiator); case 'w': return new Move.Up(initiator); case 's': return new Move.Down(initiator); case 'd': return new Move.Right(initiator); case 'h': return new Move.Left(1); case 'j': return new Move.Down(1); case 'k': return new Move.Up(1); case 'l': return new Move.Right(1); case 'u': return new Undo(-1); default: return new InvalidInput(-1, StringResources.INVALID_INPUT_MESSAGE); } // throw new NotImplementedException(); }",
        "label": "P"
    },
    "1708": {
        "dataset": "COMP 3021",
        "project": "hwlim",
        "bug_id": "31",
        "T": "void testMove(String input, String name, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); } private InputStream fixValueStream(String content) { final var bytes = content.getBytes(StandardCharsets.UTF_8); return new ByteArrayInputStream(bytes); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // System.out.println(\"fetched action\"); // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. // terminalScanner.next(); final var inputLine = terminalScanner.nextLine(); // TODO // Check how to check the initiator int initiator = 0; if (inputLine.equals(StringResources.EXIT_COMMAND_TEXT)) return new Exit(-1); if (inputLine.length() != 1) { return new InvalidInput(initiator, StringResources.INVALID_INPUT_MESSAGE); } String lowerInputLine = inputLine.toLowerCase(); Character inputChar = lowerInputLine.charAt(0); switch (inputChar) { case 'a': return new Move.Left(initiator); case 'w': return new Move.Up(initiator); case 's': return new Move.Down(initiator); case 'd': return new Move.Right(initiator); case 'h': return new Move.Left(1); case 'j': return new Move.Down(1); case 'k': return new Move.Up(1); case 'l': return new Move.Right(1); case 'u': return new Undo(-1); default: return new InvalidInput(-1, StringResources.INVALID_INPUT_MESSAGE); } // throw new NotImplementedException(); }",
        "label": "P"
    },
    "1709": {
        "dataset": "COMP 3021",
        "project": "hwlim",
        "bug_id": "32",
        "T": "void testMove(String input, String name, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); } private InputStream fixValueStream(String content) { final var bytes = content.getBytes(StandardCharsets.UTF_8); return new ByteArrayInputStream(bytes); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // System.out.println(\"fetched action\"); // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. // terminalScanner.next(); final var inputLine = terminalScanner.nextLine(); // TODO // Check how to check the initiator int initiator = 0; if (inputLine.equals(StringResources.EXIT_COMMAND_TEXT)) return new Exit(-1); if (inputLine.length() != 1) { return new InvalidInput(initiator, StringResources.INVALID_INPUT_MESSAGE); } String lowerInputLine = inputLine.toLowerCase(); Character inputChar = lowerInputLine.charAt(0); switch (inputChar) { case 'a': return new Move.Left(initiator); case 'w': return new Move.Up(initiator); case 's': return new Move.Down(initiator); case 'd': return new Move.Right(initiator); case 'h': return new Move.Left(1); case 'j': return new Move.Down(1); case 'k': return new Move.Up(1); case 'l': return new Move.Right(1); case 'u': return new Undo(-1); default: return new InvalidInput(-1, StringResources.INVALID_INPUT_MESSAGE); } // throw new NotImplementedException(); }",
        "label": "P"
    },
    "1710": {
        "dataset": "COMP 3021",
        "project": "hwlim",
        "bug_id": "33",
        "T": "void testMove(String input, String name, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); } private InputStream fixValueStream(String content) { final var bytes = content.getBytes(StandardCharsets.UTF_8); return new ByteArrayInputStream(bytes); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // System.out.println(\"fetched action\"); // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. // terminalScanner.next(); final var inputLine = terminalScanner.nextLine(); // TODO // Check how to check the initiator int initiator = 0; if (inputLine.equals(StringResources.EXIT_COMMAND_TEXT)) return new Exit(-1); if (inputLine.length() != 1) { return new InvalidInput(initiator, StringResources.INVALID_INPUT_MESSAGE); } String lowerInputLine = inputLine.toLowerCase(); Character inputChar = lowerInputLine.charAt(0); switch (inputChar) { case 'a': return new Move.Left(initiator); case 'w': return new Move.Up(initiator); case 's': return new Move.Down(initiator); case 'd': return new Move.Right(initiator); case 'h': return new Move.Left(1); case 'j': return new Move.Down(1); case 'k': return new Move.Up(1); case 'l': return new Move.Right(1); case 'u': return new Undo(-1); default: return new InvalidInput(-1, StringResources.INVALID_INPUT_MESSAGE); } // throw new NotImplementedException(); }",
        "label": "P"
    },
    "1711": {
        "dataset": "COMP 3021",
        "project": "hwlim",
        "bug_id": "34",
        "T": "void testUndo(String input, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // System.out.println(\"fetched action\"); // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. // terminalScanner.next(); final var inputLine = terminalScanner.nextLine(); // TODO // Check how to check the initiator int initiator = 0; if (inputLine.equals(StringResources.EXIT_COMMAND_TEXT)) return new Exit(-1); if (inputLine.length() != 1) { return new InvalidInput(initiator, StringResources.INVALID_INPUT_MESSAGE); } String lowerInputLine = inputLine.toLowerCase(); Character inputChar = lowerInputLine.charAt(0); switch (inputChar) { case 'a': return new Move.Left(initiator); case 'w': return new Move.Up(initiator); case 's': return new Move.Down(initiator); case 'd': return new Move.Right(initiator); case 'h': return new Move.Left(1); case 'j': return new Move.Down(1); case 'k': return new Move.Up(1); case 'l': return new Move.Right(1); case 'u': return new Undo(-1); default: return new InvalidInput(-1, StringResources.INVALID_INPUT_MESSAGE); } // throw new NotImplementedException(); }",
        "label": "P"
    },
    "1712": {
        "dataset": "COMP 3021",
        "project": "hwlim",
        "bug_id": "35",
        "T": "void testInvalidInput() { final var inputStream = fixValueStream(\"blah blah\"); final var inputEngine = new TerminalInputEngine(inputStream); final var action = inputEngine.fetchAction(); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // System.out.println(\"fetched action\"); // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. // terminalScanner.next(); final var inputLine = terminalScanner.nextLine(); // TODO // Check how to check the initiator int initiator = 0; if (inputLine.equals(StringResources.EXIT_COMMAND_TEXT)) return new Exit(-1); if (inputLine.length() != 1) { return new InvalidInput(initiator, StringResources.INVALID_INPUT_MESSAGE); } String lowerInputLine = inputLine.toLowerCase(); Character inputChar = lowerInputLine.charAt(0); switch (inputChar) { case 'a': return new Move.Left(initiator); case 'w': return new Move.Up(initiator); case 's': return new Move.Down(initiator); case 'd': return new Move.Right(initiator); case 'h': return new Move.Left(1); case 'j': return new Move.Down(1); case 'k': return new Move.Up(1); case 'l': return new Move.Right(1); case 'u': return new Undo(-1); default: return new InvalidInput(-1, StringResources.INVALID_INPUT_MESSAGE); } // throw new NotImplementedException(); }",
        "label": "P"
    },
    "1713": {
        "dataset": "COMP 3021",
        "project": "hwlim",
        "bug_id": "36",
        "T": "void testUndoWhenThereIsNoMove() { final var gameState = new GameState(TestHelper.parseGameMap(\"\"\" 233 ###### #A.a@# #..a@# ###### \"\"\" )); gameState.undo(); } private Entity generateEntity(int key) { return switch (key % 4) { case 0 -> new Box(0); case 1 -> new Empty(); case 2 -> new Player(0); case 3 -> new Wall(); default -> throw new ShouldNotReachException(); }; }",
        "C": "public GameState(@NotNull GameMap map) { // TODO this.currentBoxesLocations = map.getInitialBoxesLocations(); this.currentPlayerLocation = map.getInitialPlayerLocations(); this.undoLimitLeft = map.getUndoLimit().get(); this.destinations = map.getDestinations(); this.maxHeight = map.getMaxHeight(); this.maxWidth = map.getMaxWidth(); this.currentEntityLocations = map.getInitialEntityLocations(); this.checkpointBoxesLocations.add(new HashMap<>(map.getInitialBoxesLocations())); this.checkpointPlayerLocations.add(new HashMap<>(map.getInitialPlayerLocations())); this.checkpointEntityLocations.add(new HashMap<>(map.getInitialEntityLocations())); // System.out.println(\"checkpoint before: checkpointPlayerLocations = \" + checkpointPlayerLocations); // this.checkpointToGo; // Starts at -1 this.numberOfPlayers = map.getNumberOfPlayers(); //throw new NotImplementedException(); } public void undo() { // TODO // System.out.println(\"undo called\"); if (checkpointToGo == -1) { // no checkpoints stored. Do nothing. // Return to first (initial) checkpoint currentPlayerLocation = new HashMap<>(checkpointPlayerLocations.get(0)); currentBoxesLocations = new HashMap<>(checkpointBoxesLocations.get(0)); currentEntityLocations = new HashMap<>(checkpointEntityLocations.get(0)); return; } undoLimitLeft -= 1; currentPlayerLocation = new HashMap<>(checkpointPlayerLocations.get(checkpointToGo)); currentBoxesLocations = new HashMap<>(checkpointBoxesLocations.get(checkpointToGo)); currentEntityLocations = new HashMap<>(checkpointEntityLocations.get(checkpointToGo)); checkpointPlayerLocations.remove(checkpointToGo+1); checkpointBoxesLocations.remove(checkpointToGo+1); checkpointEntityLocations.remove(checkpointToGo+1); checkpointToGo -= 1; // System.out.println(\"currentplayer location in undo \" + currentPlayerLocation); // throw new NotImplementedException(); } /** * Get the maximum width of the game map. * This should be the same as that in {@link GameMap} public TerminalRenderingEngine(PrintStream outputSteam) { this.outputSteam = outputSteam; } public Box(int playerId) { this.playerId = playerId; } public Player(int id) { this.id = id; } public ShouldNotReachException() { super(\"This branch should not be reached.\"); }",
        "label": "P"
    },
    "1714": {
        "dataset": "COMP 3021",
        "project": "hwlim",
        "bug_id": "37",
        "T": "void testGetUndoUnlimited() { final var gameState = new GameState(TestHelper.parseGameMap(\"\"\" -1 ###### #.Aa@# #..a@# ###### \"\"\" )); }",
        "C": "public GameState(@NotNull GameMap map) { // TODO this.currentBoxesLocations = map.getInitialBoxesLocations(); this.currentPlayerLocation = map.getInitialPlayerLocations(); this.undoLimitLeft = map.getUndoLimit().get(); this.destinations = map.getDestinations(); this.maxHeight = map.getMaxHeight(); this.maxWidth = map.getMaxWidth(); this.currentEntityLocations = map.getInitialEntityLocations(); this.checkpointBoxesLocations.add(new HashMap<>(map.getInitialBoxesLocations())); this.checkpointPlayerLocations.add(new HashMap<>(map.getInitialPlayerLocations())); this.checkpointEntityLocations.add(new HashMap<>(map.getInitialEntityLocations())); // System.out.println(\"checkpoint before: checkpointPlayerLocations = \" + checkpointPlayerLocations); // this.checkpointToGo; // Starts at -1 this.numberOfPlayers = map.getNumberOfPlayers(); //throw new NotImplementedException(); }",
        "label": "P"
    },
    "1715": {
        "dataset": "COMP 3021",
        "project": "hwlim",
        "bug_id": "38",
        "T": "void testMapCopying() { final var maxWidth = 2333; final var maxHeight = 2333; final var random = new Random(); final var randomEntities = Stream.generate(() -> Position.of(random.nextInt(maxWidth), random.nextInt(maxHeight))) .distinct() .limit(100) .collect(Collectors.toMap(Function.identity(), it -> generateEntity(it.x()))); final var firstPos = randomEntities.keySet().stream().findFirst(); final var gameMap = new GameMap(maxWidth, maxHeight, Collections.singleton(firstPos.get()), 233); randomEntities.forEach(gameMap::putEntity); final var gameState = new GameState(gameMap); final var randomPosition = randomEntities.keySet().stream().findAny(); gameMap.putEntity(randomPosition.get(), new Empty()); randomEntities.forEach((p, e) -> assertEquals(e, gameState.getEntity(p))); }",
        "C": "public static @NotNull Position of(int x, int y) { return new Position(x, y); } public GameMap(int maxWidth, int maxHeight, Set<Position> destinations, int undoLimit) { // TODO this.maxWidth = maxWidth; this.maxHeight = maxHeight; this.destinations = destinations; this.undoLimit = undoLimit; //throw new NotImplementedException(); } /** * Parses the map from a string representation. * The first line is undo limit. * Starting from the second line, the game map is represented as follows, * <li># represents a {@link Wall}</li> * <li>@ represents a box destination.</li> * <li>Any upper-case letter represents a {@link Player}.</li> * <li> * Any lower-case letter represents a {@link Box} that is only movable by the player with the corresponding upper-case letter. * For instance, box \"a\" can only be moved by player \"A\" and not movable by player \"B\". * </li> * <li>. represents an {@link Empty} position in the map, meaning there is no player or box currently at this position.</li> * <p> * Notes: * <li> * There can be at most 26 players. * All implementations of classes in the hk.ust.comp3021.game package should support up to 26 players. * </li> * <li> * For simplicity, we assume the given map is bounded with a closed boundary. * There is no need to check this point. * </li> * <li> * Example maps can be found in \"src/main/resources\". * </li> * * @param mapText The string representation. * @return The parsed GameMap object. * @throws IllegalArgumentException if undo limit is negative but not -1. * @throws IllegalArgumentException if there are multiple same upper-case letters, i.e., one player can only exist at one position. * @throws IllegalArgumentException if there are no players in the map. * @throws IllegalArgumentException if the number of boxes is not equal to the number of box destinations. * @throws IllegalArgumentException if there are boxes whose {@link Box#getPlayerId()} public GameState(@NotNull GameMap map) { // TODO this.currentBoxesLocations = map.getInitialBoxesLocations(); this.currentPlayerLocation = map.getInitialPlayerLocations(); this.undoLimitLeft = map.getUndoLimit().get(); this.destinations = map.getDestinations(); this.maxHeight = map.getMaxHeight(); this.maxWidth = map.getMaxWidth(); this.currentEntityLocations = map.getInitialEntityLocations(); this.checkpointBoxesLocations.add(new HashMap<>(map.getInitialBoxesLocations())); this.checkpointPlayerLocations.add(new HashMap<>(map.getInitialPlayerLocations())); this.checkpointEntityLocations.add(new HashMap<>(map.getInitialEntityLocations())); // System.out.println(\"checkpoint before: checkpointPlayerLocations = \" + checkpointPlayerLocations); // this.checkpointToGo; // Starts at -1 this.numberOfPlayers = map.getNumberOfPlayers(); //throw new NotImplementedException(); } public void putEntity(Position position, Entity entity) { // TODO initialEntityLocations.put(position, entity); if (entity instanceof Box) { initialBoxesLocations.put(position, (Box) entity); } else if (entity instanceof Player) { initialPlayerLocations.put(position, (Player) entity); } // DO we need to do numberOfPlayers += 1 if its player? And check if there's two of same player? // throw new NotImplementedException(); } public @Nullable Entity getEntity(@NotNull Position position) { // TODO for (Map.Entry<Position, Entity> entity : currentEntityLocations.entrySet()) { if (entity.getKey().x() == position.x() && entity.getKey().y() == position.y()) { return entity.getValue(); } } return null; // how? if there is a static class at GameMap storing all the entities position then its possible // throw new NotImplementedException(); } /** * Get all box destination positions as a set in the game map. * This should be the same as that in {@link GameMap}",
        "label": "F"
    },
    "1716": {
        "dataset": "COMP 3021",
        "project": "hwlim",
        "bug_id": "39",
        "T": "void testUndoWhenThereIsMoveButNoCheckpoint() { final var gameState = new GameState(TestHelper.parseGameMap(\"\"\" 233 ###### #A.a@# #..a@# ###### \"\"\" )); gameState.move(Position.of(1, 1), Position.of(2, 1)); gameState.undo(); }",
        "C": "public GameState(@NotNull GameMap map) { // TODO this.currentBoxesLocations = map.getInitialBoxesLocations(); this.currentPlayerLocation = map.getInitialPlayerLocations(); this.undoLimitLeft = map.getUndoLimit().get(); this.destinations = map.getDestinations(); this.maxHeight = map.getMaxHeight(); this.maxWidth = map.getMaxWidth(); this.currentEntityLocations = map.getInitialEntityLocations(); this.checkpointBoxesLocations.add(new HashMap<>(map.getInitialBoxesLocations())); this.checkpointPlayerLocations.add(new HashMap<>(map.getInitialPlayerLocations())); this.checkpointEntityLocations.add(new HashMap<>(map.getInitialEntityLocations())); // System.out.println(\"checkpoint before: checkpointPlayerLocations = \" + checkpointPlayerLocations); // this.checkpointToGo; // Starts at -1 this.numberOfPlayers = map.getNumberOfPlayers(); //throw new NotImplementedException(); } public void move(Position from, Position to) { // System.out.println(currentEntityLocations); // System.out.println(currentPlayerLocation); // System.out.println(currentBoxesLocations); // TODO Entity entityAtFrom = getEntity(from); moveHistory.put(to, entityAtFrom); currentEntityLocations.replace(from, new Empty()); currentEntityLocations.replace(to, entityAtFrom); // check if this works properly // if (test == null) { // System.out.println(\"doesnt work\"); // throw new NotImplementedException(); // } // Works for currentEntityLocations, since getEntity returns the instance from currentEntityLocations if (entityAtFrom instanceof Box) { // var test2 = currentBoxesLocations.replace((Box) entityAtFrom, to); Boolean found = false; Box foundBox = new Box(0); Position foundBoxPosition = new Position(2,0); for (Map.Entry<Position, Box> entry : currentBoxesLocations.entrySet()) { // if (entry.getValue().equals(from)) { if (entry.getKey().y() == from.y() && entry.getKey().x() == from.x()) { // Found entity in the 'from' location found = true; foundBox = entry.getValue(); foundBoxPosition = entry.getKey(); break; // var testing = currentEntityLocations.replace(entityAtFrom, to); // if (testing == null) { // System.out.println(\"testing failed\"); // } else { // System.out.println(\"testing \" + testing); // } // System.out.println(\"moved \" + from + \" to \" + to); } } if (found) { currentBoxesLocations.put(to, foundBox); currentBoxesLocations.remove(foundBoxPosition); } // System.out.println(\"current boxes locations \" + currentBoxesLocations); // if (test2 != null) { // System.out.println(\"WORKS\"); // } else { // System.out.println(\"DOESNT WORK\"); // } } else if (entityAtFrom instanceof Player) { Boolean found = false; Player foundPlayer = new Player(0); Position foundPlayerPosition = new Position(1,0); // currentPlayerLocation.replace((Player) entityAtFrom, to); for (Map.Entry<Position, Player> entry : currentPlayerLocation.entrySet()) { if (entry.getKey().y() == from.y() && entry.getKey().x() == from.x()) { // Found entity in the 'from' location found = true; foundPlayer = entry.getValue(); foundPlayerPosition = entry.getKey(); break; // var testing = currentEntityLocations.replace(entityAtFrom, to); // if (testing == null) { // System.out.println(\"testing failed\"); // } else { // System.out.println(\"testing \" + testing + \". from : \" + from + \" beocmes \" + to); // } // System.out.println(\"player moved \" + from + \" to \" + to); } } if (found) { currentPlayerLocation.put(to, foundPlayer); currentPlayerLocation.remove(foundPlayerPosition); } } // throw new NotImplementedException(); } /** * Record a checkpoint of the game state, including: * <li>All current positions of entities in the game map.</li> * <li>Current undo quota</li> * <p> * Checkpoint is used in {@link GameState#undo()} public static @NotNull Position of(int x, int y) { return new Position(x, y); } public void undo() { // TODO // System.out.println(\"undo called\"); if (checkpointToGo == -1) { // no checkpoints stored. Do nothing. // Return to first (initial) checkpoint currentPlayerLocation = new HashMap<>(checkpointPlayerLocations.get(0)); currentBoxesLocations = new HashMap<>(checkpointBoxesLocations.get(0)); currentEntityLocations = new HashMap<>(checkpointEntityLocations.get(0)); return; } undoLimitLeft -= 1; currentPlayerLocation = new HashMap<>(checkpointPlayerLocations.get(checkpointToGo)); currentBoxesLocations = new HashMap<>(checkpointBoxesLocations.get(checkpointToGo)); currentEntityLocations = new HashMap<>(checkpointEntityLocations.get(checkpointToGo)); checkpointPlayerLocations.remove(checkpointToGo+1); checkpointBoxesLocations.remove(checkpointToGo+1); checkpointEntityLocations.remove(checkpointToGo+1); checkpointToGo -= 1; // System.out.println(\"currentplayer location in undo \" + currentPlayerLocation); // throw new NotImplementedException(); } /** * Get the maximum width of the game map. * This should be the same as that in {@link GameMap}",
        "label": "P"
    },
    "1717": {
        "dataset": "COMP 3021",
        "project": "hwlim",
        "bug_id": "40",
        "T": "void testGameExit() { final var gameState = mock(GameState.class); final var inputEngine = mock(TerminalInputEngine.class); final var renderingEngine = mock(TerminalRenderingEngine.class); when(gameState.isWin()).thenReturn(false, false, false); when(inputEngine.fetchAction()) .thenReturn(new InvalidInput(0, \"\"), new InvalidInput(0, \"\"), new Exit(0)); final var game = new TerminalSokobanGame(gameState, inputEngine, renderingEngine); game.run(); verify(renderingEngine, atLeastOnce()).message(any()); }",
        "C": "public InvalidInput(int initiator, @NotNull String message) { super(initiator); this.message = message; } public Exit(int initiator) { super(initiator); } public TerminalSokobanGame(GameState gameState, TerminalInputEngine inputEngine, TerminalRenderingEngine renderingEngine) { super(gameState); this.inputEngine = inputEngine; this.renderingEngine = renderingEngine; // TODO // Check the number of players if (this.state.getNumberOfPlayers() > 2) { throw new IllegalArgumentException(); } // throw new NotImplementedException(); } public void run() { // TODO renderingEngine.message(StringResources.GAME_READY_MESSAGE); renderingEngine.render(state); if (!state.getUndoQuota().isPresent()) { renderingEngine.message(String.format(StringResources.UNDO_QUOTA_TEMPLATE, StringResources.UNDO_QUOTA_UNLIMITED)); } else { renderingEngine.message(String.format(StringResources.UNDO_QUOTA_TEMPLATE, state.getUndoQuota().get())); } while (!this.shouldStop()) { Action userAction = inputEngine.fetchAction(); ActionResult userActionResult = this.processAction(userAction); if (userActionResult instanceof ActionResult.Failed) { renderingEngine.message(((ActionResult.Failed) userActionResult).getReason()); } renderingEngine.render(state); if (userAction instanceof Exit) { renderingEngine.message(StringResources.GAME_EXIT_MESSAGE); return; } if (!state.getUndoQuota().isPresent()) { renderingEngine.message(String.format(StringResources.UNDO_QUOTA_TEMPLATE, StringResources.UNDO_QUOTA_UNLIMITED)); } else { renderingEngine.message(String.format(StringResources.UNDO_QUOTA_TEMPLATE, state.getUndoQuota().get())); } renderingEngine.message(\">>>\"); } if (this.shouldStop()) { // Player won the game renderingEngine.message(StringResources.GAME_EXIT_MESSAGE); renderingEngine.message(StringResources.WIN_MESSAGE); } // throw new NotImplementedException(); }",
        "label": "P"
    },
    "1718": {
        "dataset": "COMP 3021",
        "project": "hwlim",
        "bug_id": "41",
        "T": "void testGameWin() { final var gameState = mock(GameState.class); final var inputEngine = mock(TerminalInputEngine.class); final var renderingEngine = mock(TerminalRenderingEngine.class); when(gameState.isWin()).thenReturn(false, false, false, true); when(inputEngine.fetchAction()) .thenReturn(new InvalidInput(0, \"\")); final var game = new TerminalSokobanGame(gameState, inputEngine, renderingEngine); game.run(); verify(gameState, atLeastOnce()).isWin(); verify(renderingEngine, atLeastOnce()).message(any()); }",
        "C": "public InvalidInput(int initiator, @NotNull String message) { super(initiator); this.message = message; } public TerminalSokobanGame(GameState gameState, TerminalInputEngine inputEngine, TerminalRenderingEngine renderingEngine) { super(gameState); this.inputEngine = inputEngine; this.renderingEngine = renderingEngine; // TODO // Check the number of players if (this.state.getNumberOfPlayers() > 2) { throw new IllegalArgumentException(); } // throw new NotImplementedException(); } public void run() { // TODO renderingEngine.message(StringResources.GAME_READY_MESSAGE); renderingEngine.render(state); if (!state.getUndoQuota().isPresent()) { renderingEngine.message(String.format(StringResources.UNDO_QUOTA_TEMPLATE, StringResources.UNDO_QUOTA_UNLIMITED)); } else { renderingEngine.message(String.format(StringResources.UNDO_QUOTA_TEMPLATE, state.getUndoQuota().get())); } while (!this.shouldStop()) { Action userAction = inputEngine.fetchAction(); ActionResult userActionResult = this.processAction(userAction); if (userActionResult instanceof ActionResult.Failed) { renderingEngine.message(((ActionResult.Failed) userActionResult).getReason()); } renderingEngine.render(state); if (userAction instanceof Exit) { renderingEngine.message(StringResources.GAME_EXIT_MESSAGE); return; } if (!state.getUndoQuota().isPresent()) { renderingEngine.message(String.format(StringResources.UNDO_QUOTA_TEMPLATE, StringResources.UNDO_QUOTA_UNLIMITED)); } else { renderingEngine.message(String.format(StringResources.UNDO_QUOTA_TEMPLATE, state.getUndoQuota().get())); } renderingEngine.message(\">>>\"); } if (this.shouldStop()) { // Player won the game renderingEngine.message(StringResources.GAME_EXIT_MESSAGE); renderingEngine.message(StringResources.WIN_MESSAGE); } // throw new NotImplementedException(); }",
        "label": "P"
    },
    "1719": {
        "dataset": "COMP 3021",
        "project": "hwlim",
        "bug_id": "42",
        "T": "void testMoreThanTwoPlayers() { final var gameState = mock(GameState.class); final var inputEngine = mock(TerminalInputEngine.class); final var renderingEngine = mock(TerminalRenderingEngine.class); when(gameState.getAllPlayerPositions()).thenReturn(new HashSet<>(Arrays.asList(Position.of(1, 1), Position.of(1, 2), Position.of(1, 3)))); }",
        "C": "public static @NotNull Position of(int x, int y) { return new Position(x, y); }",
        "label": "F"
    },
    "1720": {
        "dataset": "COMP 3021",
        "project": "jsung",
        "bug_id": "0",
        "T": "void moveUp() { Position.of(233, 232), new Move.Up(-1).nextPosition(pos) ); }",
        "C": "public static @NotNull Position of(int x, int y) { return new Position(x, y); } public Up(int initiator) { super(initiator); }",
        "label": "P"
    },
    "1721": {
        "dataset": "COMP 3021",
        "project": "jsung",
        "bug_id": "1",
        "T": "void moveDown() { Position.of(233, 234), new Move.Down(-1).nextPosition(pos) ); }",
        "C": "public static @NotNull Position of(int x, int y) { return new Position(x, y); } public Down(int initiator) { super(initiator); }",
        "label": "P"
    },
    "1722": {
        "dataset": "COMP 3021",
        "project": "jsung",
        "bug_id": "2",
        "T": "void moveRight() { Position.of(234, 233), new Move.Right(-1).nextPosition(pos) ); }",
        "C": "public static @NotNull Position of(int x, int y) { return new Position(x, y); } public Right(int initiator) { super(initiator); }",
        "label": "P"
    },
    "1723": {
        "dataset": "COMP 3021",
        "project": "jsung",
        "bug_id": "3",
        "T": "void testExceedingUndoQuota() { final var gameState = mock(GameState.class); when(gameState.getPlayerPositionById(anyInt())).thenReturn(Position.of(0, 0)); when(gameState.getUndoQuota()).thenReturn(Optional.of(0)); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Undo(0)); }",
        "C": "public Undo(int initiator) { super(initiator); }",
        "label": "F"
    },
    "1724": {
        "dataset": "COMP 3021",
        "project": "jsung",
        "bug_id": "4",
        "T": "void testExit() { final var gameState = mock(GameState.class); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Exit(0)); }",
        "C": "public Exit(int initiator) { super(initiator); }",
        "label": "P"
    },
    "1725": {
        "dataset": "COMP 3021",
        "project": "jsung",
        "bug_id": "5",
        "T": "void testUndoUnlimited() { final var gameState = mock(GameState.class); when(gameState.getPlayerPositionById(anyInt())).thenReturn(Position.of(0, 0)); when(gameState.getUndoQuota()).thenReturn(Optional.empty()); final var game = new SokobanGameForTesting(gameState); for (int i = 0; i < 10000; i++) { final var result = game.feedActionForProcessing(new Undo(0)); } verify(gameState, times(10000)).undo(); }",
        "C": "public TerminalRenderingEngine(PrintStream outputSteam) { this.outputSteam = outputSteam; } public Undo(int initiator) { super(initiator); }",
        "label": "P"
    },
    "1726": {
        "dataset": "COMP 3021",
        "project": "jsung",
        "bug_id": "6",
        "T": "void testPushOtherPlayerBox() { String mapText = \"\"\" 233 ###### #AB.@# #b.a.# #@...# ###### \"\"\"; final var testMap = TestHelper.parseGameMap(mapText); final var gameState = spy(new GameState(testMap)); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Move.Down(0)); verify(gameState, never()).move(any(), any()); }",
        "C": "public GameState(@NotNull GameMap map) { // TODO // this.stateMap = new GameMap(map.getMaxWidth(), map.getMaxHeight(), map.getDestinations(), map.undoLimit); this.stateMap = map; // throw new NotImplementedException(); } public Down(int initiator) { super(initiator); }",
        "label": "P"
    },
    "1727": {
        "dataset": "COMP 3021",
        "project": "jsung",
        "bug_id": "7",
        "T": "void testMoveNonExistingPlayer() { String mapText = \"\"\" 233 ###### #A..@# #a...# ##...# ###### \"\"\"; final var testMap = TestHelper.parseGameMap(mapText); final var gameState = spy(new GameState(testMap)); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Move.Down(23)); }",
        "C": "public GameState(@NotNull GameMap map) { // TODO // this.stateMap = new GameMap(map.getMaxWidth(), map.getMaxHeight(), map.getDestinations(), map.undoLimit); this.stateMap = map; // throw new NotImplementedException(); } public Down(int initiator) { super(initiator); }",
        "label": "F"
    },
    "1728": {
        "dataset": "COMP 3021",
        "project": "jsung",
        "bug_id": "8",
        "T": "void testCheckpointWhenNeed() { final var gameState = spy(new GameState(TestHelper.parseGameMap(\"\"\" 233 ###### #.Aa@# #..a@# ###### \"\"\" ))); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Move.Right(0)); verify(gameState, times(1)).checkpoint(); }",
        "C": "public GameState(@NotNull GameMap map) { // TODO // this.stateMap = new GameMap(map.getMaxWidth(), map.getMaxHeight(), map.getDestinations(), map.undoLimit); this.stateMap = map; // throw new NotImplementedException(); } public Right(int initiator) { super(initiator); }",
        "label": "P"
    },
    "1729": {
        "dataset": "COMP 3021",
        "project": "jsung",
        "bug_id": "9",
        "T": "void testPushBoxAgainstWall() { String mapText = \"\"\" 233 ###### #A..@# #a...# ##...# ###### \"\"\"; final var testMap = TestHelper.parseGameMap(mapText); final var gameState = spy(new GameState(testMap)); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Move.Down(0)); verify(gameState, never()).move(any(), any()); }",
        "C": "public GameState(@NotNull GameMap map) { // TODO // this.stateMap = new GameMap(map.getMaxWidth(), map.getMaxHeight(), map.getDestinations(), map.undoLimit); this.stateMap = map; // throw new NotImplementedException(); } public Down(int initiator) { super(initiator); }",
        "label": "P"
    },
    "1730": {
        "dataset": "COMP 3021",
        "project": "jsung",
        "bug_id": "10",
        "T": "void testCheckpointWhenNotNeed() { final var gameState = spy(new GameState(TestHelper.parseGameMap(\"\"\" 233 ###### #A.a@# #..a@# ###### \"\"\" ))); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Move.Right(0)); verify(gameState, never()).checkpoint(); } private static class SokobanGameForTesting extends AbstractSokobanGame { protected SokobanGameForTesting(GameState gameState) { super(gameState); } @Override public void run() { } public ActionResult feedActionForProcessing(Action action) { return processAction(action); } }",
        "C": "public GameState(@NotNull GameMap map) { // TODO // this.stateMap = new GameMap(map.getMaxWidth(), map.getMaxHeight(), map.getDestinations(), map.undoLimit); this.stateMap = map; // throw new NotImplementedException(); } public Right(int initiator) { super(initiator); } public void run() { // TODO System.out.println(StringResources.GAME_READY_MESSAGE); // renderingEngine.render(state); // if (state.getUndoQuota().isPresent()) { // int undoLimit = state.getUndoQuota().get(); // System.out.printf(StringResources.UNDO_QUOTA_TEMPLATE, // (undoLimit == -1) ? StringResources.UNDO_QUOTA_UNLIMITED : Integer.toString(undoLimit)); // System.out.println(); // } // System.out.println(\">>>\"); while (!super.shouldStop()) { // and !exit renderingEngine.render(state); if (state.getUndoQuota().isPresent()) { int undoLimit = state.getUndoQuota().get(); System.out.printf(StringResources.UNDO_QUOTA_TEMPLATE, (undoLimit == -1) ? StringResources.UNDO_QUOTA_UNLIMITED : Integer.toString(undoLimit)); System.out.println(); System.out.println(\">>>\"); } ActionResult actionResult = processAction(inputEngine.fetchAction()); if (actionResult instanceof ActionResult.Failed) { renderingEngine.message(((ActionResult.Failed) actionResult).getReason()); } } renderingEngine.render(state); // throw new NotImplementedException(); } protected ActionResult processAction(@NotNull Action action) { // TODO if (action instanceof Exit) { System.out.print(StringResources.GAME_EXIT_MESSAGE); isExit = true; return new ActionResult.Success(action); } else if (action instanceof InvalidInput) { return new ActionResult.Failed(action, StringResources.INVALID_INPUT_MESSAGE); } else if (action instanceof Move) { Position currPos = state.getPlayerPositionById(action.getInitiator()); // System.out.println(action.getInitiator()); // System.out.println(currPos); // check Position nextPos = ((Move) action).nextPosition(currPos); if (state.stateMap.getEntity(nextPos) instanceof Box) { // id\uac00 \uac19\uc73c\uba74 success, \uc6c0\uc9c1\uc774\uae30 // \uc6c0\uc9c1\uc774\ub294 \uac83\uae4c\uc9c0 \uad6c\ud604 \ud574\uc57c\ud568? if (((Box) state.stateMap.getEntity(nextPos)).getPlayerId() == action.getInitiator()) { Position nextnextPos = ((Move) action).nextPosition(nextPos); if (state.stateMap.getEntity(nextnextPos) instanceof Empty) { state.move(nextPos, nextnextPos); state.move(currPos, nextPos); state.checkpoint(); return new ActionResult.Success(action); } else { return new ActionResult.Failed(action,\"Wall after box!\"); } // if (nextPos.x() - currPos.x() == 1) { // move right // if (state.stateMap.getEntity(Position.of(nextPos.x() + 1, nextPos.y())) instanceof Empty) { // state.move(nextPos, Position.of(nextPos.x() + 1, nextPos.y())); //// System.out.println(\"move from\" + nextPos + \"to\" + Position.of(nextPos.x() + 1, nextPos.y())); // } // } else if (nextPos.x() - currPos.x() == -1) { // move left // if (state.stateMap.getEntity(Position.of(nextPos.x() - 1, nextPos.y())) instanceof Empty) // state.move(nextPos, Position.of(nextPos.x() - 1, nextPos.y())); // } else if (nextPos.y() - currPos.y() == 1) { // move down // if (state.stateMap.getEntity(Position.of(nextPos.x(), nextPos.y() + 1)) instanceof Empty) // state.move(nextPos, Position.of(nextPos.x(), nextPos.y() + 1)); // } else if (nextPos.y() - currPos.y() == -1) { // move up // if (state.stateMap.getEntity(Position.of(nextPos.x(), nextPos.y() - 1)) instanceof Empty) // state.move(nextPos, Position.of(nextPos.x(), nextPos.y() - 1)); // } // state.move(currPos, nextPos); // System.out.println(state.getPlayerPositionById(0)); // check // System.out.println(state.stateMap.getEntity(Position.of(3, 1))); } else { return new ActionResult.Failed(action, \"Trying to move invalid box.\"); } } else if (state.stateMap.getEntity(nextPos) instanceof Empty) { state.move(currPos, nextPos); return new ActionResult.Success(action); } else if (state.stateMap.getEntity(nextPos) instanceof Player) { return new ActionResult.Failed(action, \"There is another player next to you.\"); } else if (state.stateMap.getEntity(nextPos) instanceof Wall) { return new ActionResult.Failed(action, \"Failed to push the wall.\"); } } // if (action instanceof Undo) state.undo(); return new ActionResult.Success(action); // throw new NotImplementedException(); }",
        "label": "P"
    },
    "1731": {
        "dataset": "COMP 3021",
        "project": "jsung",
        "bug_id": "11",
        "T": "void testHitAnotherPlayer() { String mapText = \"\"\" 233 ###### #A..@# #B...# #ab.@# ###### \"\"\"; final var testMap = TestHelper.parseGameMap(mapText); final var gameState = spy(new GameState(testMap)); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Move.Down(0)); verify(gameState, never()).move(any(), any()); }",
        "C": "public GameState(@NotNull GameMap map) { // TODO // this.stateMap = new GameMap(map.getMaxWidth(), map.getMaxHeight(), map.getDestinations(), map.undoLimit); this.stateMap = map; // throw new NotImplementedException(); } public Down(int initiator) { super(initiator); }",
        "label": "P"
    },
    "1732": {
        "dataset": "COMP 3021",
        "project": "jsung",
        "bug_id": "12",
        "T": "void testUndoWithinQuota() { final var gameState = mock(GameState.class); when(gameState.getPlayerPositionById(anyInt())).thenReturn(Position.of(0, 0)); when(gameState.getUndoQuota()).thenReturn(Optional.of(1)); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Undo(0)); verify(gameState, times(1)).undo(); }",
        "C": "public Undo(int initiator) { super(initiator); }",
        "label": "P"
    },
    "1733": {
        "dataset": "COMP 3021",
        "project": "jsung",
        "bug_id": "13",
        "T": "void testInvalidInput() { final var game = new SokobanGameForTesting(mock(GameState.class)); final var message = String.valueOf(new Random().nextLong()); final var action = new InvalidInput(-1, message); final var result = game.feedActionForProcessing(action); }",
        "C": "public InvalidInput(int initiator, @NotNull String message) { super(initiator); this.message = message; }",
        "label": "P"
    },
    "1734": {
        "dataset": "COMP 3021",
        "project": "jsung",
        "bug_id": "14",
        "T": "void testUndoLimitParsing() { final var gameMap = TestHelper.parseGameMap(rectangularMap); }",
        "C": "",
        "label": "P"
    },
    "1735": {
        "dataset": "COMP 3021",
        "project": "jsung",
        "bug_id": "15",
        "T": "void testWidthForNonRectangularMap() { final var gameMap = TestHelper.parseGameMap(nonRectangularMap); }",
        "C": "",
        "label": "P"
    },
    "1736": {
        "dataset": "COMP 3021",
        "project": "jsung",
        "bug_id": "16",
        "T": "void testTwoPlayersMap() { final var twoPlayersMap = \"\"\" 233 ###### #A..@# #..B@# #....# #.a..# #..b.# ###### \"\"\"; final var gameMap = TestHelper.parseGameMap(twoPlayersMap); final var playerIds = gameMap.getPlayerIds(); final var expectedIds = new HashSet<Integer>(); expectedIds.add(0); expectedIds.add(1); }",
        "C": "public Set<Integer> getPlayerIds() { // TODO Set<Integer> playerIDs = new HashSet<>(); // for (Map.Entry<Integer, Position> set : initialPlayerMap.entrySet()) { // playerIDs.add(set.getKey()); // } for (int i=0; i<entityMap.size(); i++) { for (int j=0; j<entityMap.get(i).size(); j++) { if (entityMap.get(i).get(j) instanceof Player) { playerIDs.add(((Player) entityMap.get(i).get(j)).getId()); } } } return playerIDs; // throw new NotImplementedException(); }",
        "label": "P"
    },
    "1737": {
        "dataset": "COMP 3021",
        "project": "jsung",
        "bug_id": "17",
        "T": "void testMapWithoutPlayer() { final var invalidMap = \"\"\" 233 ### #.# ### \"\"\"; } // @Tag(TestKind.HIDDEN) // @Test // void testUnmatchedPlayersAndBoxes() { // final var invalidMap = \"\"\" // 233 // ###### // #A..@# // #...@# // #a.b@# // #.a.@# // #..a.# // ###### // \"\"\"; // assertThrowsExactly(IllegalArgumentException.class, () -> TestHelper.parseGameMap(invalidMap)); // }",
        "C": "public TerminalRenderingEngine(PrintStream outputSteam) { this.outputSteam = outputSteam; }",
        "label": "P"
    },
    "1738": {
        "dataset": "COMP 3021",
        "project": "jsung",
        "bug_id": "18",
        "T": "void testManyPlayersMap() { final var manyPlayersMap = \"\"\" 233 ###### #A.P@@# #vCB@@# #.cpD@# #Ga.d@# #g.bV@# ###### \"\"\"; final var gameMap = TestHelper.parseGameMap(manyPlayersMap); final var playerIds = gameMap.getPlayerIds(); final var expectedIds = new HashSet<>(Arrays.asList( 0, 'P' - 'A', 'C' - 'A', 'B' - 'A', 'D' - 'A', 'G' - 'A', 'V' - 'A' )); }",
        "C": "public Set<Integer> getPlayerIds() { // TODO Set<Integer> playerIDs = new HashSet<>(); // for (Map.Entry<Integer, Position> set : initialPlayerMap.entrySet()) { // playerIDs.add(set.getKey()); // } for (int i=0; i<entityMap.size(); i++) { for (int j=0; j<entityMap.get(i).size(); j++) { if (entityMap.get(i).get(j) instanceof Player) { playerIDs.add(((Player) entityMap.get(i).get(j)).getId()); } } } return playerIDs; // throw new NotImplementedException(); }",
        "label": "P"
    },
    "1739": {
        "dataset": "COMP 3021",
        "project": "jsung",
        "bug_id": "19",
        "T": "void testHeightForNonRectangularMap() { final var gameMap = TestHelper.parseGameMap(nonRectangularMap); }",
        "C": "",
        "label": "P"
    },
    "1740": {
        "dataset": "COMP 3021",
        "project": "jsung",
        "bug_id": "20",
        "T": "void testDuplicatedPlayers() { final var invalidMap = \"\"\" 233 ###### #A..@# #..A@# #....# #.a..# #..b.# ###### \"\"\"; }",
        "C": "",
        "label": "P"
    },
    "1741": {
        "dataset": "COMP 3021",
        "project": "jsung",
        "bug_id": "21",
        "T": "void testParseMapWithoutUndoLimit() { final var invalidMap = String.join(\"\\n\", rectangularMap.lines().skip(1).toList()); }",
        "C": "",
        "label": "P"
    },
    "1742": {
        "dataset": "COMP 3021",
        "project": "jsung",
        "bug_id": "22",
        "T": "void testInsufficientDestinations() { final var invalidMap = \"\"\" 233 ###### #A..@# #...@# #a...# #.a..# #..a.# ###### \"\"\"; }",
        "C": "",
        "label": "F"
    },
    "1743": {
        "dataset": "COMP 3021",
        "project": "jsung",
        "bug_id": "23",
        "T": "void testSuperLargeMap() { try { new GameMap(Integer.MAX_VALUE, Integer.MAX_VALUE, Collections.emptySet(), 0); } catch (OutOfMemoryError e) { throw new RuntimeException(e); } }); }",
        "C": "public GameMap(int maxWidth, int maxHeight, Set<Position> destinations, int undoLimit) { // TODO this.maxWidth = maxWidth; this.maxHeight = maxHeight; this.destinations = destinations; this.undoLimit = undoLimit; // for (Position x : destinations) { // this.destinations.add(x); // } // throw new NotImplementedException(); } /** * Parses the map from a string representation. * The first line is undo limit. * Starting from the second line, the game map is represented as follows, * <li># represents a {@link Wall}</li> * <li>@ represents a box destination.</li> * <li>Any upper-case letter represents a {@link Player}.</li> * <li> * Any lower-case letter represents a {@link Box} that is only movable by the player with the corresponding upper-case letter. * For instance, box \"a\" can only be moved by player \"A\" and not movable by player \"B\". * </li> * <li>. represents an {@link Empty} position in the map, meaning there is no player or box currently at this position.</li> * <p> * Notes: * <li> * There can be at most 26 players. * All implementations of classes in the hk.ust.comp3021.game package should support up to 26 players. * </li> * <li> * For simplicity, we assume the given map is bounded with a closed boundary. * There is no need to check this point. * </li> * <li> * Example maps can be found in \"src/main/resources\". * </li> * * @param mapText The string representation. * @return The parsed GameMap object. * @throws IllegalArgumentException if undo limit is negative but not -1. * @throws IllegalArgumentException if there are multiple same upper-case letters, i.e., one player can only exist at one position. * @throws IllegalArgumentException if there are no players in the map. * @throws IllegalArgumentException if the number of boxes is not equal to the number of box destinations. * @throws IllegalArgumentException if there are boxes whose {@link Box#getPlayerId()} public TerminalRenderingEngine(PrintStream outputSteam) { this.outputSteam = outputSteam; }",
        "label": "P"
    },
    "1744": {
        "dataset": "COMP 3021",
        "project": "jsung",
        "bug_id": "24",
        "T": "void testInvalidUndoLimit() { final var invalidMap = \"\"\" -233 ###### #A..@# #...@# #a.b@# #.a.@# #..a.# ###### \"\"\"; }",
        "C": "",
        "label": "P"
    },
    "1745": {
        "dataset": "COMP 3021",
        "project": "jsung",
        "bug_id": "25",
        "T": "void testEmptyMap() { final var invalidMap = \"\"; }",
        "C": "",
        "label": "P"
    },
    "1746": {
        "dataset": "COMP 3021",
        "project": "jsung",
        "bug_id": "26",
        "T": "void testMove(String input, String name, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); } private InputStream fixValueStream(String content) { final var bytes = content.getBytes(StandardCharsets.UTF_8); return new ByteArrayInputStream(bytes); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. // TODO final var inputLine = terminalScanner.nextLine(); if (inputLine.equalsIgnoreCase(\"EXIT\")) { return new Exit(0); } else if (inputLine.equalsIgnoreCase(\"A\")) { return new Move.Left(0); } else if (inputLine.equalsIgnoreCase(\"S\")) { return new Move.Down(0); } else if (inputLine.equalsIgnoreCase(\"W\")) { return new Move.Up(0); } else if (inputLine.equalsIgnoreCase(\"D\")) { return new Move.Right(0); } else if (inputLine.equalsIgnoreCase(\"H\")) { return new Move.Left(1); } else if (inputLine.equalsIgnoreCase(\"J\")) { return new Move.Down(1); } else if (inputLine.equalsIgnoreCase(\"K\")) { return new Move.Right(1); } else if (inputLine.equalsIgnoreCase(\"L\")) { return new Move.Up(1); } else if (inputLine.equalsIgnoreCase(\"U\")) { // undo return new Undo(0); } return new InvalidInput(-1, StringResources.INVALID_INPUT_MESSAGE); // throw new NotImplementedException(); }",
        "label": "P"
    },
    "1747": {
        "dataset": "COMP 3021",
        "project": "jsung",
        "bug_id": "27",
        "T": "void testMove(String input, String name, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); } private InputStream fixValueStream(String content) { final var bytes = content.getBytes(StandardCharsets.UTF_8); return new ByteArrayInputStream(bytes); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. // TODO final var inputLine = terminalScanner.nextLine(); if (inputLine.equalsIgnoreCase(\"EXIT\")) { return new Exit(0); } else if (inputLine.equalsIgnoreCase(\"A\")) { return new Move.Left(0); } else if (inputLine.equalsIgnoreCase(\"S\")) { return new Move.Down(0); } else if (inputLine.equalsIgnoreCase(\"W\")) { return new Move.Up(0); } else if (inputLine.equalsIgnoreCase(\"D\")) { return new Move.Right(0); } else if (inputLine.equalsIgnoreCase(\"H\")) { return new Move.Left(1); } else if (inputLine.equalsIgnoreCase(\"J\")) { return new Move.Down(1); } else if (inputLine.equalsIgnoreCase(\"K\")) { return new Move.Right(1); } else if (inputLine.equalsIgnoreCase(\"L\")) { return new Move.Up(1); } else if (inputLine.equalsIgnoreCase(\"U\")) { // undo return new Undo(0); } return new InvalidInput(-1, StringResources.INVALID_INPUT_MESSAGE); // throw new NotImplementedException(); }",
        "label": "P"
    },
    "1748": {
        "dataset": "COMP 3021",
        "project": "jsung",
        "bug_id": "28",
        "T": "void testMove(String input, String name, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); } private InputStream fixValueStream(String content) { final var bytes = content.getBytes(StandardCharsets.UTF_8); return new ByteArrayInputStream(bytes); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. // TODO final var inputLine = terminalScanner.nextLine(); if (inputLine.equalsIgnoreCase(\"EXIT\")) { return new Exit(0); } else if (inputLine.equalsIgnoreCase(\"A\")) { return new Move.Left(0); } else if (inputLine.equalsIgnoreCase(\"S\")) { return new Move.Down(0); } else if (inputLine.equalsIgnoreCase(\"W\")) { return new Move.Up(0); } else if (inputLine.equalsIgnoreCase(\"D\")) { return new Move.Right(0); } else if (inputLine.equalsIgnoreCase(\"H\")) { return new Move.Left(1); } else if (inputLine.equalsIgnoreCase(\"J\")) { return new Move.Down(1); } else if (inputLine.equalsIgnoreCase(\"K\")) { return new Move.Right(1); } else if (inputLine.equalsIgnoreCase(\"L\")) { return new Move.Up(1); } else if (inputLine.equalsIgnoreCase(\"U\")) { // undo return new Undo(0); } return new InvalidInput(-1, StringResources.INVALID_INPUT_MESSAGE); // throw new NotImplementedException(); }",
        "label": "P"
    },
    "1749": {
        "dataset": "COMP 3021",
        "project": "jsung",
        "bug_id": "29",
        "T": "void testMove(String input, String name, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); } private InputStream fixValueStream(String content) { final var bytes = content.getBytes(StandardCharsets.UTF_8); return new ByteArrayInputStream(bytes); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. // TODO final var inputLine = terminalScanner.nextLine(); if (inputLine.equalsIgnoreCase(\"EXIT\")) { return new Exit(0); } else if (inputLine.equalsIgnoreCase(\"A\")) { return new Move.Left(0); } else if (inputLine.equalsIgnoreCase(\"S\")) { return new Move.Down(0); } else if (inputLine.equalsIgnoreCase(\"W\")) { return new Move.Up(0); } else if (inputLine.equalsIgnoreCase(\"D\")) { return new Move.Right(0); } else if (inputLine.equalsIgnoreCase(\"H\")) { return new Move.Left(1); } else if (inputLine.equalsIgnoreCase(\"J\")) { return new Move.Down(1); } else if (inputLine.equalsIgnoreCase(\"K\")) { return new Move.Right(1); } else if (inputLine.equalsIgnoreCase(\"L\")) { return new Move.Up(1); } else if (inputLine.equalsIgnoreCase(\"U\")) { // undo return new Undo(0); } return new InvalidInput(-1, StringResources.INVALID_INPUT_MESSAGE); // throw new NotImplementedException(); }",
        "label": "P"
    },
    "1750": {
        "dataset": "COMP 3021",
        "project": "jsung",
        "bug_id": "30",
        "T": "void testMove(String input, String name, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); } private InputStream fixValueStream(String content) { final var bytes = content.getBytes(StandardCharsets.UTF_8); return new ByteArrayInputStream(bytes); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. // TODO final var inputLine = terminalScanner.nextLine(); if (inputLine.equalsIgnoreCase(\"EXIT\")) { return new Exit(0); } else if (inputLine.equalsIgnoreCase(\"A\")) { return new Move.Left(0); } else if (inputLine.equalsIgnoreCase(\"S\")) { return new Move.Down(0); } else if (inputLine.equalsIgnoreCase(\"W\")) { return new Move.Up(0); } else if (inputLine.equalsIgnoreCase(\"D\")) { return new Move.Right(0); } else if (inputLine.equalsIgnoreCase(\"H\")) { return new Move.Left(1); } else if (inputLine.equalsIgnoreCase(\"J\")) { return new Move.Down(1); } else if (inputLine.equalsIgnoreCase(\"K\")) { return new Move.Right(1); } else if (inputLine.equalsIgnoreCase(\"L\")) { return new Move.Up(1); } else if (inputLine.equalsIgnoreCase(\"U\")) { // undo return new Undo(0); } return new InvalidInput(-1, StringResources.INVALID_INPUT_MESSAGE); // throw new NotImplementedException(); }",
        "label": "P"
    },
    "1751": {
        "dataset": "COMP 3021",
        "project": "jsung",
        "bug_id": "31",
        "T": "void testMove(String input, String name, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); } private InputStream fixValueStream(String content) { final var bytes = content.getBytes(StandardCharsets.UTF_8); return new ByteArrayInputStream(bytes); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. // TODO final var inputLine = terminalScanner.nextLine(); if (inputLine.equalsIgnoreCase(\"EXIT\")) { return new Exit(0); } else if (inputLine.equalsIgnoreCase(\"A\")) { return new Move.Left(0); } else if (inputLine.equalsIgnoreCase(\"S\")) { return new Move.Down(0); } else if (inputLine.equalsIgnoreCase(\"W\")) { return new Move.Up(0); } else if (inputLine.equalsIgnoreCase(\"D\")) { return new Move.Right(0); } else if (inputLine.equalsIgnoreCase(\"H\")) { return new Move.Left(1); } else if (inputLine.equalsIgnoreCase(\"J\")) { return new Move.Down(1); } else if (inputLine.equalsIgnoreCase(\"K\")) { return new Move.Right(1); } else if (inputLine.equalsIgnoreCase(\"L\")) { return new Move.Up(1); } else if (inputLine.equalsIgnoreCase(\"U\")) { // undo return new Undo(0); } return new InvalidInput(-1, StringResources.INVALID_INPUT_MESSAGE); // throw new NotImplementedException(); }",
        "label": "P"
    },
    "1752": {
        "dataset": "COMP 3021",
        "project": "jsung",
        "bug_id": "32",
        "T": "void testMove(String input, String name, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); } private InputStream fixValueStream(String content) { final var bytes = content.getBytes(StandardCharsets.UTF_8); return new ByteArrayInputStream(bytes); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. // TODO final var inputLine = terminalScanner.nextLine(); if (inputLine.equalsIgnoreCase(\"EXIT\")) { return new Exit(0); } else if (inputLine.equalsIgnoreCase(\"A\")) { return new Move.Left(0); } else if (inputLine.equalsIgnoreCase(\"S\")) { return new Move.Down(0); } else if (inputLine.equalsIgnoreCase(\"W\")) { return new Move.Up(0); } else if (inputLine.equalsIgnoreCase(\"D\")) { return new Move.Right(0); } else if (inputLine.equalsIgnoreCase(\"H\")) { return new Move.Left(1); } else if (inputLine.equalsIgnoreCase(\"J\")) { return new Move.Down(1); } else if (inputLine.equalsIgnoreCase(\"K\")) { return new Move.Right(1); } else if (inputLine.equalsIgnoreCase(\"L\")) { return new Move.Up(1); } else if (inputLine.equalsIgnoreCase(\"U\")) { // undo return new Undo(0); } return new InvalidInput(-1, StringResources.INVALID_INPUT_MESSAGE); // throw new NotImplementedException(); }",
        "label": "F"
    },
    "1753": {
        "dataset": "COMP 3021",
        "project": "jsung",
        "bug_id": "33",
        "T": "void testMove(String input, String name, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); } private InputStream fixValueStream(String content) { final var bytes = content.getBytes(StandardCharsets.UTF_8); return new ByteArrayInputStream(bytes); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. // TODO final var inputLine = terminalScanner.nextLine(); if (inputLine.equalsIgnoreCase(\"EXIT\")) { return new Exit(0); } else if (inputLine.equalsIgnoreCase(\"A\")) { return new Move.Left(0); } else if (inputLine.equalsIgnoreCase(\"S\")) { return new Move.Down(0); } else if (inputLine.equalsIgnoreCase(\"W\")) { return new Move.Up(0); } else if (inputLine.equalsIgnoreCase(\"D\")) { return new Move.Right(0); } else if (inputLine.equalsIgnoreCase(\"H\")) { return new Move.Left(1); } else if (inputLine.equalsIgnoreCase(\"J\")) { return new Move.Down(1); } else if (inputLine.equalsIgnoreCase(\"K\")) { return new Move.Right(1); } else if (inputLine.equalsIgnoreCase(\"L\")) { return new Move.Up(1); } else if (inputLine.equalsIgnoreCase(\"U\")) { // undo return new Undo(0); } return new InvalidInput(-1, StringResources.INVALID_INPUT_MESSAGE); // throw new NotImplementedException(); }",
        "label": "F"
    },
    "1754": {
        "dataset": "COMP 3021",
        "project": "jsung",
        "bug_id": "34",
        "T": "void testUndo(String input, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. // TODO final var inputLine = terminalScanner.nextLine(); if (inputLine.equalsIgnoreCase(\"EXIT\")) { return new Exit(0); } else if (inputLine.equalsIgnoreCase(\"A\")) { return new Move.Left(0); } else if (inputLine.equalsIgnoreCase(\"S\")) { return new Move.Down(0); } else if (inputLine.equalsIgnoreCase(\"W\")) { return new Move.Up(0); } else if (inputLine.equalsIgnoreCase(\"D\")) { return new Move.Right(0); } else if (inputLine.equalsIgnoreCase(\"H\")) { return new Move.Left(1); } else if (inputLine.equalsIgnoreCase(\"J\")) { return new Move.Down(1); } else if (inputLine.equalsIgnoreCase(\"K\")) { return new Move.Right(1); } else if (inputLine.equalsIgnoreCase(\"L\")) { return new Move.Up(1); } else if (inputLine.equalsIgnoreCase(\"U\")) { // undo return new Undo(0); } return new InvalidInput(-1, StringResources.INVALID_INPUT_MESSAGE); // throw new NotImplementedException(); }",
        "label": "P"
    },
    "1755": {
        "dataset": "COMP 3021",
        "project": "jsung",
        "bug_id": "35",
        "T": "void testInvalidInput() { final var inputStream = fixValueStream(\"blah blah\"); final var inputEngine = new TerminalInputEngine(inputStream); final var action = inputEngine.fetchAction(); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. // TODO final var inputLine = terminalScanner.nextLine(); if (inputLine.equalsIgnoreCase(\"EXIT\")) { return new Exit(0); } else if (inputLine.equalsIgnoreCase(\"A\")) { return new Move.Left(0); } else if (inputLine.equalsIgnoreCase(\"S\")) { return new Move.Down(0); } else if (inputLine.equalsIgnoreCase(\"W\")) { return new Move.Up(0); } else if (inputLine.equalsIgnoreCase(\"D\")) { return new Move.Right(0); } else if (inputLine.equalsIgnoreCase(\"H\")) { return new Move.Left(1); } else if (inputLine.equalsIgnoreCase(\"J\")) { return new Move.Down(1); } else if (inputLine.equalsIgnoreCase(\"K\")) { return new Move.Right(1); } else if (inputLine.equalsIgnoreCase(\"L\")) { return new Move.Up(1); } else if (inputLine.equalsIgnoreCase(\"U\")) { // undo return new Undo(0); } return new InvalidInput(-1, StringResources.INVALID_INPUT_MESSAGE); // throw new NotImplementedException(); }",
        "label": "P"
    },
    "1756": {
        "dataset": "COMP 3021",
        "project": "jsung",
        "bug_id": "36",
        "T": "void testUndoWhenThereIsNoMove() { final var gameState = new GameState(TestHelper.parseGameMap(\"\"\" 233 ###### #A.a@# #..a@# ###### \"\"\" )); gameState.undo(); } private Entity generateEntity(int key) { return switch (key % 4) { case 0 -> new Box(0); case 1 -> new Empty(); case 2 -> new Player(0); case 3 -> new Wall(); default -> throw new ShouldNotReachException(); }; }",
        "C": "public GameState(@NotNull GameMap map) { // TODO // this.stateMap = new GameMap(map.getMaxWidth(), map.getMaxHeight(), map.getDestinations(), map.undoLimit); this.stateMap = map; // throw new NotImplementedException(); } public void undo() { // TODO // \uc870\uae08 \ub354 \ud6a8\uc728\uc801\uc778 \ubc29\ubc95\uc774 \uc788\uc744\uae4c? if (!(mapCheckPoint == null)) { stateMap = mapCheckPoint.stateMap; mapCheckPoint.stateMap.undoLimit--; } // throw new NotImplementedException(); } /** * Get the maximum width of the game map. * This should be the same as that in {@link GameMap} public TerminalRenderingEngine(PrintStream outputSteam) { this.outputSteam = outputSteam; } public Box(int playerId) { this.playerId = playerId; } public Player(int id) { this.id = id; } public ShouldNotReachException() { super(\"This branch should not be reached.\"); }",
        "label": "P"
    },
    "1757": {
        "dataset": "COMP 3021",
        "project": "jsung",
        "bug_id": "37",
        "T": "void testGetUndoUnlimited() { final var gameState = new GameState(TestHelper.parseGameMap(\"\"\" -1 ###### #.Aa@# #..a@# ###### \"\"\" )); }",
        "C": "public GameState(@NotNull GameMap map) { // TODO // this.stateMap = new GameMap(map.getMaxWidth(), map.getMaxHeight(), map.getDestinations(), map.undoLimit); this.stateMap = map; // throw new NotImplementedException(); }",
        "label": "P"
    },
    "1758": {
        "dataset": "COMP 3021",
        "project": "jsung",
        "bug_id": "38",
        "T": "void testMapCopying() { final var maxWidth = 2333; final var maxHeight = 2333; final var random = new Random(); final var randomEntities = Stream.generate(() -> Position.of(random.nextInt(maxWidth), random.nextInt(maxHeight))) .distinct() .limit(100) .collect(Collectors.toMap(Function.identity(), it -> generateEntity(it.x()))); final var firstPos = randomEntities.keySet().stream().findFirst(); final var gameMap = new GameMap(maxWidth, maxHeight, Collections.singleton(firstPos.get()), 233); randomEntities.forEach(gameMap::putEntity); final var gameState = new GameState(gameMap); final var randomPosition = randomEntities.keySet().stream().findAny(); gameMap.putEntity(randomPosition.get(), new Empty()); randomEntities.forEach((p, e) -> assertEquals(e, gameState.getEntity(p))); }",
        "C": "public static @NotNull Position of(int x, int y) { return new Position(x, y); } public GameMap(int maxWidth, int maxHeight, Set<Position> destinations, int undoLimit) { // TODO this.maxWidth = maxWidth; this.maxHeight = maxHeight; this.destinations = destinations; this.undoLimit = undoLimit; // for (Position x : destinations) { // this.destinations.add(x); // } // throw new NotImplementedException(); } /** * Parses the map from a string representation. * The first line is undo limit. * Starting from the second line, the game map is represented as follows, * <li># represents a {@link Wall}</li> * <li>@ represents a box destination.</li> * <li>Any upper-case letter represents a {@link Player}.</li> * <li> * Any lower-case letter represents a {@link Box} that is only movable by the player with the corresponding upper-case letter. * For instance, box \"a\" can only be moved by player \"A\" and not movable by player \"B\". * </li> * <li>. represents an {@link Empty} position in the map, meaning there is no player or box currently at this position.</li> * <p> * Notes: * <li> * There can be at most 26 players. * All implementations of classes in the hk.ust.comp3021.game package should support up to 26 players. * </li> * <li> * For simplicity, we assume the given map is bounded with a closed boundary. * There is no need to check this point. * </li> * <li> * Example maps can be found in \"src/main/resources\". * </li> * * @param mapText The string representation. * @return The parsed GameMap object. * @throws IllegalArgumentException if undo limit is negative but not -1. * @throws IllegalArgumentException if there are multiple same upper-case letters, i.e., one player can only exist at one position. * @throws IllegalArgumentException if there are no players in the map. * @throws IllegalArgumentException if the number of boxes is not equal to the number of box destinations. * @throws IllegalArgumentException if there are boxes whose {@link Box#getPlayerId()} public GameState(@NotNull GameMap map) { // TODO // this.stateMap = new GameMap(map.getMaxWidth(), map.getMaxHeight(), map.getDestinations(), map.undoLimit); this.stateMap = map; // throw new NotImplementedException(); } public void putEntity(Position position, Entity entity) { // TODO entityMap.get(position.y()).set(position.x(), entity); // throw new NotImplementedException(); } public @Nullable Entity getEntity(@NotNull Position position) { // TODO return stateMap.getEntity(position); // throw new NotImplementedException(); } /** * Get all box destination positions as a set in the game map. * This should be the same as that in {@link GameMap}",
        "label": "F"
    },
    "1759": {
        "dataset": "COMP 3021",
        "project": "jsung",
        "bug_id": "39",
        "T": "void testUndoWhenThereIsMoveButNoCheckpoint() { final var gameState = new GameState(TestHelper.parseGameMap(\"\"\" 233 ###### #A.a@# #..a@# ###### \"\"\" )); gameState.move(Position.of(1, 1), Position.of(2, 1)); gameState.undo(); }",
        "C": "public GameState(@NotNull GameMap map) { // TODO // this.stateMap = new GameMap(map.getMaxWidth(), map.getMaxHeight(), map.getDestinations(), map.undoLimit); this.stateMap = map; // throw new NotImplementedException(); } public void move(Position from, Position to) { // TODO // if (getEntity(from) instanceof Box || getEntity(to) instanceof Box) { // moveHistory.push(from); // moveHistory.push(to); // if (to.x()-from.x()==1) { // moveHistory.push(Position.of(from.x()-1, from.y())); // moveHistory.push(Position.of(to.x()-1, to.y())); // } else if (to.x()-from.x()==-1) { // moveHistory.push(Position.of(from.x()+1, from.y())); // moveHistory.push(Position.of(to.x()+1, to.y())); // } else if (to.y()-from.y()==1) { // moveHistory.push(Position.of(from.x(), from.y()-1)); // moveHistory.push(Position.of(to.x(), to.y()-1)); // } else if (to.y()-from.y()==-1) { // moveHistory.push(Position.of(from.x(), from.y()+1)); // moveHistory.push(Position.of(to.x(), to.y()+1)); // } // } stateMap.putEntity(to, getEntity(from)); stateMap.putEntity(from, new Empty()); // throw new NotImplementedException(); } /** * Record a checkpoint of the game state, including: * <li>All current positions of entities in the game map.</li> * <li>Current undo quota</li> * <p> * Checkpoint is used in {@link GameState#undo()} public static @NotNull Position of(int x, int y) { return new Position(x, y); } public void undo() { // TODO // \uc870\uae08 \ub354 \ud6a8\uc728\uc801\uc778 \ubc29\ubc95\uc774 \uc788\uc744\uae4c? if (!(mapCheckPoint == null)) { stateMap = mapCheckPoint.stateMap; mapCheckPoint.stateMap.undoLimit--; } // throw new NotImplementedException(); } /** * Get the maximum width of the game map. * This should be the same as that in {@link GameMap}",
        "label": "P"
    },
    "1760": {
        "dataset": "COMP 3021",
        "project": "jsung",
        "bug_id": "40",
        "T": "void testGameExit() { final var gameState = mock(GameState.class); final var inputEngine = mock(TerminalInputEngine.class); final var renderingEngine = mock(TerminalRenderingEngine.class); when(gameState.isWin()).thenReturn(false, false, false); when(inputEngine.fetchAction()) .thenReturn(new InvalidInput(0, \"\"), new InvalidInput(0, \"\"), new Exit(0)); final var game = new TerminalSokobanGame(gameState, inputEngine, renderingEngine); game.run(); verify(renderingEngine, atLeastOnce()).message(any()); }",
        "C": "public InvalidInput(int initiator, @NotNull String message) { super(initiator); this.message = message; } public Exit(int initiator) { super(initiator); } public TerminalSokobanGame(GameState gameState, TerminalInputEngine inputEngine, TerminalRenderingEngine renderingEngine) { super(gameState); this.inputEngine = inputEngine; this.renderingEngine = renderingEngine; // TODO // Check the number of players if (gameState.getAllPlayerPositions().size() > 2) { throw new IllegalArgumentException(); } // throw new NotImplementedException(); } public void run() { // TODO System.out.println(StringResources.GAME_READY_MESSAGE); // renderingEngine.render(state); // if (state.getUndoQuota().isPresent()) { // int undoLimit = state.getUndoQuota().get(); // System.out.printf(StringResources.UNDO_QUOTA_TEMPLATE, // (undoLimit == -1) ? StringResources.UNDO_QUOTA_UNLIMITED : Integer.toString(undoLimit)); // System.out.println(); // } // System.out.println(\">>>\"); while (!super.shouldStop()) { // and !exit renderingEngine.render(state); if (state.getUndoQuota().isPresent()) { int undoLimit = state.getUndoQuota().get(); System.out.printf(StringResources.UNDO_QUOTA_TEMPLATE, (undoLimit == -1) ? StringResources.UNDO_QUOTA_UNLIMITED : Integer.toString(undoLimit)); System.out.println(); System.out.println(\">>>\"); } ActionResult actionResult = processAction(inputEngine.fetchAction()); if (actionResult instanceof ActionResult.Failed) { renderingEngine.message(((ActionResult.Failed) actionResult).getReason()); } } renderingEngine.render(state); // throw new NotImplementedException(); }",
        "label": "P"
    },
    "1761": {
        "dataset": "COMP 3021",
        "project": "jsung",
        "bug_id": "41",
        "T": "void testGameWin() { final var gameState = mock(GameState.class); final var inputEngine = mock(TerminalInputEngine.class); final var renderingEngine = mock(TerminalRenderingEngine.class); when(gameState.isWin()).thenReturn(false, false, false, true); when(inputEngine.fetchAction()) .thenReturn(new InvalidInput(0, \"\")); final var game = new TerminalSokobanGame(gameState, inputEngine, renderingEngine); game.run(); verify(gameState, atLeastOnce()).isWin(); verify(renderingEngine, atLeastOnce()).message(any()); }",
        "C": "public InvalidInput(int initiator, @NotNull String message) { super(initiator); this.message = message; } public TerminalSokobanGame(GameState gameState, TerminalInputEngine inputEngine, TerminalRenderingEngine renderingEngine) { super(gameState); this.inputEngine = inputEngine; this.renderingEngine = renderingEngine; // TODO // Check the number of players if (gameState.getAllPlayerPositions().size() > 2) { throw new IllegalArgumentException(); } // throw new NotImplementedException(); } public void run() { // TODO System.out.println(StringResources.GAME_READY_MESSAGE); // renderingEngine.render(state); // if (state.getUndoQuota().isPresent()) { // int undoLimit = state.getUndoQuota().get(); // System.out.printf(StringResources.UNDO_QUOTA_TEMPLATE, // (undoLimit == -1) ? StringResources.UNDO_QUOTA_UNLIMITED : Integer.toString(undoLimit)); // System.out.println(); // } // System.out.println(\">>>\"); while (!super.shouldStop()) { // and !exit renderingEngine.render(state); if (state.getUndoQuota().isPresent()) { int undoLimit = state.getUndoQuota().get(); System.out.printf(StringResources.UNDO_QUOTA_TEMPLATE, (undoLimit == -1) ? StringResources.UNDO_QUOTA_UNLIMITED : Integer.toString(undoLimit)); System.out.println(); System.out.println(\">>>\"); } ActionResult actionResult = processAction(inputEngine.fetchAction()); if (actionResult instanceof ActionResult.Failed) { renderingEngine.message(((ActionResult.Failed) actionResult).getReason()); } } renderingEngine.render(state); // throw new NotImplementedException(); }",
        "label": "P"
    },
    "1762": {
        "dataset": "COMP 3021",
        "project": "jsung",
        "bug_id": "42",
        "T": "void testMoreThanTwoPlayers() { final var gameState = mock(GameState.class); final var inputEngine = mock(TerminalInputEngine.class); final var renderingEngine = mock(TerminalRenderingEngine.class); when(gameState.getAllPlayerPositions()).thenReturn(new HashSet<>(Arrays.asList(Position.of(1, 1), Position.of(1, 2), Position.of(1, 3)))); }",
        "C": "public static @NotNull Position of(int x, int y) { return new Position(x, y); }",
        "label": "P"
    },
    "1763": {
        "dataset": "COMP 3021",
        "project": "jhecf",
        "bug_id": "0",
        "T": "void moveUp() { Position.of(233, 232), new Move.Up(-1).nextPosition(pos) ); }",
        "C": "public static @NotNull Position of(int x, int y) { return new Position(x, y); } public Up(int initiator) { super(initiator); }",
        "label": "P"
    },
    "1764": {
        "dataset": "COMP 3021",
        "project": "jhecf",
        "bug_id": "1",
        "T": "void moveDown() { Position.of(233, 234), new Move.Down(-1).nextPosition(pos) ); }",
        "C": "public static @NotNull Position of(int x, int y) { return new Position(x, y); } public Down(int initiator) { super(initiator); }",
        "label": "P"
    },
    "1765": {
        "dataset": "COMP 3021",
        "project": "jhecf",
        "bug_id": "2",
        "T": "void moveRight() { Position.of(234, 233), new Move.Right(-1).nextPosition(pos) ); }",
        "C": "public static @NotNull Position of(int x, int y) { return new Position(x, y); } public Right(int initiator) { super(initiator); }",
        "label": "P"
    },
    "1766": {
        "dataset": "COMP 3021",
        "project": "jhecf",
        "bug_id": "3",
        "T": "void testExceedingUndoQuota() { final var gameState = mock(GameState.class); when(gameState.getPlayerPositionById(anyInt())).thenReturn(Position.of(0, 0)); when(gameState.getUndoQuota()).thenReturn(Optional.of(0)); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Undo(0)); }",
        "C": "public Undo(int initiator) { super(initiator); }",
        "label": "P"
    },
    "1767": {
        "dataset": "COMP 3021",
        "project": "jhecf",
        "bug_id": "4",
        "T": "void testExit() { final var gameState = mock(GameState.class); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Exit(0)); }",
        "C": "public Exit(int initiator) { super(initiator); }",
        "label": "P"
    },
    "1768": {
        "dataset": "COMP 3021",
        "project": "jhecf",
        "bug_id": "5",
        "T": "void testUndoUnlimited() { final var gameState = mock(GameState.class); when(gameState.getPlayerPositionById(anyInt())).thenReturn(Position.of(0, 0)); when(gameState.getUndoQuota()).thenReturn(Optional.empty()); final var game = new SokobanGameForTesting(gameState); for (int i = 0; i < 10000; i++) { final var result = game.feedActionForProcessing(new Undo(0)); } verify(gameState, times(10000)).undo(); }",
        "C": "public Undo(int initiator) { super(initiator); }",
        "label": "P"
    },
    "1769": {
        "dataset": "COMP 3021",
        "project": "jhecf",
        "bug_id": "6",
        "T": "void testPushOtherPlayerBox() { String mapText = \"\"\" 233 ###### #AB.@# #b.a.# #@...# ###### \"\"\"; final var testMap = TestHelper.parseGameMap(mapText); final var gameState = spy(new GameState(testMap)); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Move.Down(0)); verify(gameState, never()).move(any(), any()); }",
        "C": "public GameState(@NotNull GameMap map) { // TODO playerId = map.getPlayerIds(); destinations = map.getDestinations(); maxHeight = map.getMaxHeight(); maxWidth = map.getMaxWidth(); var init = new Entity[map.getMaxHeight()][map.getMaxWidth()]; curMap = new Entity[map.getMaxHeight()][map.getMaxWidth()]; for(int y = 0; y < maxHeight; ++y) { for(int x = 0; x < maxWidth; ++x) { init[y][x] = switch (map.getEntity(Position.of(x, y))) { case Wall ignored -> new Wall(); case Box b -> new Box(b.getPlayerId()); case Player p -> new Player(p.getId()); case Empty ignored -> new Empty(); case null -> null; }; curMap[y][x] = switch (map.getEntity(Position.of(x, y))) { case Wall ignored -> new Wall(); case Box b -> new Box(b.getPlayerId()); case Player p -> new Player(p.getId()); case Empty ignored -> new Empty(); case null -> null; }; } } ckpt = new ArrayList<Entity[][]>(); ckpt.add(init); if(!map.getUndoLimit().isPresent()) { infQuota = true; } else { undoQuota = map.getUndoLimit().get(); } } public Down(int initiator) { super(initiator); }",
        "label": "P"
    },
    "1770": {
        "dataset": "COMP 3021",
        "project": "jhecf",
        "bug_id": "7",
        "T": "void testMoveNonExistingPlayer() { String mapText = \"\"\" 233 ###### #A..@# #a...# ##...# ###### \"\"\"; final var testMap = TestHelper.parseGameMap(mapText); final var gameState = spy(new GameState(testMap)); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Move.Down(23)); }",
        "C": "public GameState(@NotNull GameMap map) { // TODO playerId = map.getPlayerIds(); destinations = map.getDestinations(); maxHeight = map.getMaxHeight(); maxWidth = map.getMaxWidth(); var init = new Entity[map.getMaxHeight()][map.getMaxWidth()]; curMap = new Entity[map.getMaxHeight()][map.getMaxWidth()]; for(int y = 0; y < maxHeight; ++y) { for(int x = 0; x < maxWidth; ++x) { init[y][x] = switch (map.getEntity(Position.of(x, y))) { case Wall ignored -> new Wall(); case Box b -> new Box(b.getPlayerId()); case Player p -> new Player(p.getId()); case Empty ignored -> new Empty(); case null -> null; }; curMap[y][x] = switch (map.getEntity(Position.of(x, y))) { case Wall ignored -> new Wall(); case Box b -> new Box(b.getPlayerId()); case Player p -> new Player(p.getId()); case Empty ignored -> new Empty(); case null -> null; }; } } ckpt = new ArrayList<Entity[][]>(); ckpt.add(init); if(!map.getUndoLimit().isPresent()) { infQuota = true; } else { undoQuota = map.getUndoLimit().get(); } } public Down(int initiator) { super(initiator); }",
        "label": "P"
    },
    "1771": {
        "dataset": "COMP 3021",
        "project": "jhecf",
        "bug_id": "8",
        "T": "void testCheckpointWhenNeed() { final var gameState = spy(new GameState(TestHelper.parseGameMap(\"\"\" 233 ###### #.Aa@# #..a@# ###### \"\"\" ))); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Move.Right(0)); verify(gameState, times(1)).checkpoint(); }",
        "C": "public GameState(@NotNull GameMap map) { // TODO playerId = map.getPlayerIds(); destinations = map.getDestinations(); maxHeight = map.getMaxHeight(); maxWidth = map.getMaxWidth(); var init = new Entity[map.getMaxHeight()][map.getMaxWidth()]; curMap = new Entity[map.getMaxHeight()][map.getMaxWidth()]; for(int y = 0; y < maxHeight; ++y) { for(int x = 0; x < maxWidth; ++x) { init[y][x] = switch (map.getEntity(Position.of(x, y))) { case Wall ignored -> new Wall(); case Box b -> new Box(b.getPlayerId()); case Player p -> new Player(p.getId()); case Empty ignored -> new Empty(); case null -> null; }; curMap[y][x] = switch (map.getEntity(Position.of(x, y))) { case Wall ignored -> new Wall(); case Box b -> new Box(b.getPlayerId()); case Player p -> new Player(p.getId()); case Empty ignored -> new Empty(); case null -> null; }; } } ckpt = new ArrayList<Entity[][]>(); ckpt.add(init); if(!map.getUndoLimit().isPresent()) { infQuota = true; } else { undoQuota = map.getUndoLimit().get(); } } public Right(int initiator) { super(initiator); }",
        "label": "P"
    },
    "1772": {
        "dataset": "COMP 3021",
        "project": "jhecf",
        "bug_id": "9",
        "T": "void testPushBoxAgainstWall() { String mapText = \"\"\" 233 ###### #A..@# #a...# ##...# ###### \"\"\"; final var testMap = TestHelper.parseGameMap(mapText); final var gameState = spy(new GameState(testMap)); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Move.Down(0)); verify(gameState, never()).move(any(), any()); }",
        "C": "public GameState(@NotNull GameMap map) { // TODO playerId = map.getPlayerIds(); destinations = map.getDestinations(); maxHeight = map.getMaxHeight(); maxWidth = map.getMaxWidth(); var init = new Entity[map.getMaxHeight()][map.getMaxWidth()]; curMap = new Entity[map.getMaxHeight()][map.getMaxWidth()]; for(int y = 0; y < maxHeight; ++y) { for(int x = 0; x < maxWidth; ++x) { init[y][x] = switch (map.getEntity(Position.of(x, y))) { case Wall ignored -> new Wall(); case Box b -> new Box(b.getPlayerId()); case Player p -> new Player(p.getId()); case Empty ignored -> new Empty(); case null -> null; }; curMap[y][x] = switch (map.getEntity(Position.of(x, y))) { case Wall ignored -> new Wall(); case Box b -> new Box(b.getPlayerId()); case Player p -> new Player(p.getId()); case Empty ignored -> new Empty(); case null -> null; }; } } ckpt = new ArrayList<Entity[][]>(); ckpt.add(init); if(!map.getUndoLimit().isPresent()) { infQuota = true; } else { undoQuota = map.getUndoLimit().get(); } } public Down(int initiator) { super(initiator); }",
        "label": "P"
    },
    "1773": {
        "dataset": "COMP 3021",
        "project": "jhecf",
        "bug_id": "10",
        "T": "void testCheckpointWhenNotNeed() { final var gameState = spy(new GameState(TestHelper.parseGameMap(\"\"\" 233 ###### #A.a@# #..a@# ###### \"\"\" ))); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Move.Right(0)); verify(gameState, never()).checkpoint(); } private static class SokobanGameForTesting extends AbstractSokobanGame { protected SokobanGameForTesting(GameState gameState) { super(gameState); } @Override public void run() { } public ActionResult feedActionForProcessing(Action action) { return processAction(action); } }",
        "C": "public GameState(@NotNull GameMap map) { // TODO playerId = map.getPlayerIds(); destinations = map.getDestinations(); maxHeight = map.getMaxHeight(); maxWidth = map.getMaxWidth(); var init = new Entity[map.getMaxHeight()][map.getMaxWidth()]; curMap = new Entity[map.getMaxHeight()][map.getMaxWidth()]; for(int y = 0; y < maxHeight; ++y) { for(int x = 0; x < maxWidth; ++x) { init[y][x] = switch (map.getEntity(Position.of(x, y))) { case Wall ignored -> new Wall(); case Box b -> new Box(b.getPlayerId()); case Player p -> new Player(p.getId()); case Empty ignored -> new Empty(); case null -> null; }; curMap[y][x] = switch (map.getEntity(Position.of(x, y))) { case Wall ignored -> new Wall(); case Box b -> new Box(b.getPlayerId()); case Player p -> new Player(p.getId()); case Empty ignored -> new Empty(); case null -> null; }; } } ckpt = new ArrayList<Entity[][]>(); ckpt.add(init); if(!map.getUndoLimit().isPresent()) { infQuota = true; } else { undoQuota = map.getUndoLimit().get(); } } public Right(int initiator) { super(initiator); } public void run() { // TODO renderingEngine.message(GAME_READY_MESSAGE); renderingEngine.render(state); while (!shouldStop()) { if(state.getUndoQuota().isPresent()) renderingEngine.message(String.format(UNDO_QUOTA_TEMPLATE,String.valueOf(state.getUndoQuota().get()))); else renderingEngine.message(UNDO_QUOTA_UNLIMITED); renderingEngine.message(\">>>\"); var action = inputEngine.fetchAction(); var result = processAction(action); if(result instanceof ActionResult.Failed) { renderingEngine.message(((ActionResult.Failed) result).getReason()); } renderingEngine.render(state); } renderingEngine.message(GAME_EXIT_MESSAGE); if(state.isWin()) renderingEngine.message(WIN_MESSAGE); } protected ActionResult processAction(@NotNull Action action) { // TODO if(action instanceof Move) { int initiator = action.getInitiator(); Position player = state.getPlayerPositionById(initiator); if(player == null) return new ActionResult.Failed(action, PLAYER_NOT_FOUND); Position tar = ((Move) action).nextPosition(player); Entity nxt = state.getEntity(tar); if(nxt instanceof Empty) { state.move(player, tar); } else if(nxt instanceof Wall) { return new ActionResult.Failed(action, \"You hit a wall.\"); } else if(nxt instanceof Player) { return new ActionResult.Failed(action, \"You hit another player.\"); } else if(nxt instanceof Box) { if(((Box) nxt).getPlayerId() != initiator) { return new ActionResult.Failed(action, \"You cannot move other players' boxes.\"); } Position tar2 = ((Move) action).nextPosition(tar); Entity nxt2 = state.getEntity(tar2); if(nxt2 instanceof Empty) { state.move(tar, tar2); state.move(player, tar); state.checkpoint(); } else { return new ActionResult.Failed(action, \"Failed to push the box.\"); } } return new ActionResult.Success(action); } else if(action instanceof Exit) { exit = true; return new ActionResult.Success(action); } else if(action instanceof Undo) { if(state.getUndoQuota().isPresent() && state.getUndoQuota().get() <= 0) return new ActionResult.Failed(action, UNDO_QUOTA_RUN_OUT); state.undo(); return new ActionResult.Success(action); } else if(action instanceof InvalidInput) { return new ActionResult.Failed(action, ((InvalidInput) action).getMessage()); } return new ActionResult.Success(action); }",
        "label": "P"
    },
    "1774": {
        "dataset": "COMP 3021",
        "project": "jhecf",
        "bug_id": "11",
        "T": "void testHitAnotherPlayer() { String mapText = \"\"\" 233 ###### #A..@# #B...# #ab.@# ###### \"\"\"; final var testMap = TestHelper.parseGameMap(mapText); final var gameState = spy(new GameState(testMap)); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Move.Down(0)); verify(gameState, never()).move(any(), any()); }",
        "C": "public GameState(@NotNull GameMap map) { // TODO playerId = map.getPlayerIds(); destinations = map.getDestinations(); maxHeight = map.getMaxHeight(); maxWidth = map.getMaxWidth(); var init = new Entity[map.getMaxHeight()][map.getMaxWidth()]; curMap = new Entity[map.getMaxHeight()][map.getMaxWidth()]; for(int y = 0; y < maxHeight; ++y) { for(int x = 0; x < maxWidth; ++x) { init[y][x] = switch (map.getEntity(Position.of(x, y))) { case Wall ignored -> new Wall(); case Box b -> new Box(b.getPlayerId()); case Player p -> new Player(p.getId()); case Empty ignored -> new Empty(); case null -> null; }; curMap[y][x] = switch (map.getEntity(Position.of(x, y))) { case Wall ignored -> new Wall(); case Box b -> new Box(b.getPlayerId()); case Player p -> new Player(p.getId()); case Empty ignored -> new Empty(); case null -> null; }; } } ckpt = new ArrayList<Entity[][]>(); ckpt.add(init); if(!map.getUndoLimit().isPresent()) { infQuota = true; } else { undoQuota = map.getUndoLimit().get(); } } public Down(int initiator) { super(initiator); }",
        "label": "P"
    },
    "1775": {
        "dataset": "COMP 3021",
        "project": "jhecf",
        "bug_id": "12",
        "T": "void testUndoWithinQuota() { final var gameState = mock(GameState.class); when(gameState.getPlayerPositionById(anyInt())).thenReturn(Position.of(0, 0)); when(gameState.getUndoQuota()).thenReturn(Optional.of(1)); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Undo(0)); verify(gameState, times(1)).undo(); }",
        "C": "public Undo(int initiator) { super(initiator); }",
        "label": "P"
    },
    "1776": {
        "dataset": "COMP 3021",
        "project": "jhecf",
        "bug_id": "13",
        "T": "void testInvalidInput() { final var game = new SokobanGameForTesting(mock(GameState.class)); final var message = String.valueOf(new Random().nextLong()); final var action = new InvalidInput(-1, message); final var result = game.feedActionForProcessing(action); }",
        "C": "public InvalidInput(int initiator, @NotNull String message) { super(initiator); this.message = message; }",
        "label": "P"
    },
    "1777": {
        "dataset": "COMP 3021",
        "project": "jhecf",
        "bug_id": "14",
        "T": "void testUndoLimitParsing() { final var gameMap = TestHelper.parseGameMap(rectangularMap); }",
        "C": "",
        "label": "P"
    },
    "1778": {
        "dataset": "COMP 3021",
        "project": "jhecf",
        "bug_id": "15",
        "T": "void testWidthForNonRectangularMap() { final var gameMap = TestHelper.parseGameMap(nonRectangularMap); }",
        "C": "",
        "label": "P"
    },
    "1779": {
        "dataset": "COMP 3021",
        "project": "jhecf",
        "bug_id": "16",
        "T": "void testTwoPlayersMap() { final var twoPlayersMap = \"\"\" 233 ###### #A..@# #..B@# #....# #.a..# #..b.# ###### \"\"\"; final var gameMap = TestHelper.parseGameMap(twoPlayersMap); final var playerIds = gameMap.getPlayerIds(); final var expectedIds = new HashSet<Integer>(); expectedIds.add(0); expectedIds.add(1); }",
        "C": "public Set<Integer> getPlayerIds() { // TODO return playerId; }",
        "label": "P"
    },
    "1780": {
        "dataset": "COMP 3021",
        "project": "jhecf",
        "bug_id": "17",
        "T": "void testMapWithoutPlayer() { final var invalidMap = \"\"\" 233 ### #.# ### \"\"\"; } // @Tag(TestKind.HIDDEN) // @Test // void testUnmatchedPlayersAndBoxes() { // final var invalidMap = \"\"\" // 233 // ###### // #A..@# // #...@# // #a.b@# // #.a.@# // #..a.# // ###### // \"\"\"; // assertThrowsExactly(IllegalArgumentException.class, () -> TestHelper.parseGameMap(invalidMap)); // }",
        "C": "",
        "label": "P"
    },
    "1781": {
        "dataset": "COMP 3021",
        "project": "jhecf",
        "bug_id": "18",
        "T": "void testManyPlayersMap() { final var manyPlayersMap = \"\"\" 233 ###### #A.P@@# #vCB@@# #.cpD@# #Ga.d@# #g.bV@# ###### \"\"\"; final var gameMap = TestHelper.parseGameMap(manyPlayersMap); final var playerIds = gameMap.getPlayerIds(); final var expectedIds = new HashSet<>(Arrays.asList( 0, 'P' - 'A', 'C' - 'A', 'B' - 'A', 'D' - 'A', 'G' - 'A', 'V' - 'A' )); }",
        "C": "public Set<Integer> getPlayerIds() { // TODO return playerId; }",
        "label": "P"
    },
    "1782": {
        "dataset": "COMP 3021",
        "project": "jhecf",
        "bug_id": "19",
        "T": "void testHeightForNonRectangularMap() { final var gameMap = TestHelper.parseGameMap(nonRectangularMap); }",
        "C": "",
        "label": "P"
    },
    "1783": {
        "dataset": "COMP 3021",
        "project": "jhecf",
        "bug_id": "20",
        "T": "void testDuplicatedPlayers() { final var invalidMap = \"\"\" 233 ###### #A..@# #..A@# #....# #.a..# #..b.# ###### \"\"\"; }",
        "C": "",
        "label": "P"
    },
    "1784": {
        "dataset": "COMP 3021",
        "project": "jhecf",
        "bug_id": "21",
        "T": "void testParseMapWithoutUndoLimit() { final var invalidMap = String.join(\"\\n\", rectangularMap.lines().skip(1).toList()); }",
        "C": "",
        "label": "P"
    },
    "1785": {
        "dataset": "COMP 3021",
        "project": "jhecf",
        "bug_id": "22",
        "T": "void testInsufficientDestinations() { final var invalidMap = \"\"\" 233 ###### #A..@# #...@# #a...# #.a..# #..a.# ###### \"\"\"; }",
        "C": "",
        "label": "P"
    },
    "1786": {
        "dataset": "COMP 3021",
        "project": "jhecf",
        "bug_id": "23",
        "T": "void testSuperLargeMap() { try { new GameMap(Integer.MAX_VALUE, Integer.MAX_VALUE, Collections.emptySet(), 0); } catch (OutOfMemoryError e) { throw new RuntimeException(e); } }); }",
        "C": "public GameMap(int maxWidth, int maxHeight, Set<Position> destinations, int undoLimit) { // TODO this.maxWidth = maxWidth; this.maxHeight = maxHeight; this.destinations = destinations; this.undoLimit = undoLimit; this.boxId = new HashSet<Integer>(); this.playerId = new HashSet<Integer>(); this.boxPos = new HashSet<Position>(); this.map = new Entity[maxHeight][maxWidth]; for (int y = 0; y < maxHeight; ++y) { for (int x = 0; x < maxWidth; ++x) { this.map[y][x] = null; if(destinations.contains(Position.of(x, y) )) this.map[y][x] = new Empty(); } } } /** * Parses the map from a string representation. * The first line is undo limit. * Starting from the second line, the game map is represented as follows, * <li># represents a {@link Wall}</li> * <li>@ represents a box destination.</li> * <li>Any upper-case letter represents a {@link Player}.</li> * <li> * Any lower-case letter represents a {@link Box} that is only movable by the player with the corresponding upper-case letter. * For instance, box \"a\" can only be moved by player \"A\" and not movable by player \"B\". * </li> * <li>. represents an {@link Empty} position in the map, meaning there is no player or box currently at this position.</li> * <p> * Notes: * <li> * There can be at most 26 players. * All implementations of classes in the hk.ust.comp3021.game package should support up to 26 players. * </li> * <li> * For simplicity, we assume the given map is bounded with a closed boundary. * There is no need to check this point. * </li> * <li> * Example maps can be found in \"src/main/resources\". * </li> * * @param mapText The string representation. * @return The parsed GameMap object. * @throws IllegalArgumentException if undo limit is negative but not -1. * @throws IllegalArgumentException if there are multiple same upper-case letters, i.e., one player can only exist at one position. * @throws IllegalArgumentException if there are no players in the map. * @throws IllegalArgumentException if the number of boxes is not equal to the number of box destinations. * @throws IllegalArgumentException if there are boxes whose {@link Box#getPlayerId()}",
        "label": "F"
    },
    "1787": {
        "dataset": "COMP 3021",
        "project": "jhecf",
        "bug_id": "24",
        "T": "void testInvalidUndoLimit() { final var invalidMap = \"\"\" -233 ###### #A..@# #...@# #a.b@# #.a.@# #..a.# ###### \"\"\"; }",
        "C": "",
        "label": "P"
    },
    "1788": {
        "dataset": "COMP 3021",
        "project": "jhecf",
        "bug_id": "25",
        "T": "void testEmptyMap() { final var invalidMap = \"\"; }",
        "C": "",
        "label": "P"
    },
    "1789": {
        "dataset": "COMP 3021",
        "project": "jhecf",
        "bug_id": "26",
        "T": "void testMove(String input, String name, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); } private InputStream fixValueStream(String content) { final var bytes = content.getBytes(StandardCharsets.UTF_8); return new ByteArrayInputStream(bytes); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine(); // TODO Action res = switch (inputLine.toLowerCase()) { case \"a\" -> new Move.Left(0); case \"s\" -> new Move.Down(0); case \"w\" -> new Move.Up(0); case \"d\" -> new Move.Right(0); case \"h\" -> new Move.Left(1); case \"j\" -> new Move.Down(1); case \"k\" -> new Move.Up(1); case \"l\" -> new Move.Right(1); case \"u\" -> new Undo(0); case EXIT_COMMAND_TEXT -> new Exit(0); default -> new InvalidInput(0, INVALID_INPUT_MESSAGE); }; return res; }",
        "label": "P"
    },
    "1790": {
        "dataset": "COMP 3021",
        "project": "jhecf",
        "bug_id": "27",
        "T": "void testMove(String input, String name, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); } private InputStream fixValueStream(String content) { final var bytes = content.getBytes(StandardCharsets.UTF_8); return new ByteArrayInputStream(bytes); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine(); // TODO Action res = switch (inputLine.toLowerCase()) { case \"a\" -> new Move.Left(0); case \"s\" -> new Move.Down(0); case \"w\" -> new Move.Up(0); case \"d\" -> new Move.Right(0); case \"h\" -> new Move.Left(1); case \"j\" -> new Move.Down(1); case \"k\" -> new Move.Up(1); case \"l\" -> new Move.Right(1); case \"u\" -> new Undo(0); case EXIT_COMMAND_TEXT -> new Exit(0); default -> new InvalidInput(0, INVALID_INPUT_MESSAGE); }; return res; }",
        "label": "P"
    },
    "1791": {
        "dataset": "COMP 3021",
        "project": "jhecf",
        "bug_id": "28",
        "T": "void testMove(String input, String name, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); } private InputStream fixValueStream(String content) { final var bytes = content.getBytes(StandardCharsets.UTF_8); return new ByteArrayInputStream(bytes); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine(); // TODO Action res = switch (inputLine.toLowerCase()) { case \"a\" -> new Move.Left(0); case \"s\" -> new Move.Down(0); case \"w\" -> new Move.Up(0); case \"d\" -> new Move.Right(0); case \"h\" -> new Move.Left(1); case \"j\" -> new Move.Down(1); case \"k\" -> new Move.Up(1); case \"l\" -> new Move.Right(1); case \"u\" -> new Undo(0); case EXIT_COMMAND_TEXT -> new Exit(0); default -> new InvalidInput(0, INVALID_INPUT_MESSAGE); }; return res; }",
        "label": "P"
    },
    "1792": {
        "dataset": "COMP 3021",
        "project": "jhecf",
        "bug_id": "29",
        "T": "void testMove(String input, String name, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); } private InputStream fixValueStream(String content) { final var bytes = content.getBytes(StandardCharsets.UTF_8); return new ByteArrayInputStream(bytes); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine(); // TODO Action res = switch (inputLine.toLowerCase()) { case \"a\" -> new Move.Left(0); case \"s\" -> new Move.Down(0); case \"w\" -> new Move.Up(0); case \"d\" -> new Move.Right(0); case \"h\" -> new Move.Left(1); case \"j\" -> new Move.Down(1); case \"k\" -> new Move.Up(1); case \"l\" -> new Move.Right(1); case \"u\" -> new Undo(0); case EXIT_COMMAND_TEXT -> new Exit(0); default -> new InvalidInput(0, INVALID_INPUT_MESSAGE); }; return res; }",
        "label": "P"
    },
    "1793": {
        "dataset": "COMP 3021",
        "project": "jhecf",
        "bug_id": "30",
        "T": "void testMove(String input, String name, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); } private InputStream fixValueStream(String content) { final var bytes = content.getBytes(StandardCharsets.UTF_8); return new ByteArrayInputStream(bytes); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine(); // TODO Action res = switch (inputLine.toLowerCase()) { case \"a\" -> new Move.Left(0); case \"s\" -> new Move.Down(0); case \"w\" -> new Move.Up(0); case \"d\" -> new Move.Right(0); case \"h\" -> new Move.Left(1); case \"j\" -> new Move.Down(1); case \"k\" -> new Move.Up(1); case \"l\" -> new Move.Right(1); case \"u\" -> new Undo(0); case EXIT_COMMAND_TEXT -> new Exit(0); default -> new InvalidInput(0, INVALID_INPUT_MESSAGE); }; return res; }",
        "label": "P"
    },
    "1794": {
        "dataset": "COMP 3021",
        "project": "jhecf",
        "bug_id": "31",
        "T": "void testMove(String input, String name, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); } private InputStream fixValueStream(String content) { final var bytes = content.getBytes(StandardCharsets.UTF_8); return new ByteArrayInputStream(bytes); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine(); // TODO Action res = switch (inputLine.toLowerCase()) { case \"a\" -> new Move.Left(0); case \"s\" -> new Move.Down(0); case \"w\" -> new Move.Up(0); case \"d\" -> new Move.Right(0); case \"h\" -> new Move.Left(1); case \"j\" -> new Move.Down(1); case \"k\" -> new Move.Up(1); case \"l\" -> new Move.Right(1); case \"u\" -> new Undo(0); case EXIT_COMMAND_TEXT -> new Exit(0); default -> new InvalidInput(0, INVALID_INPUT_MESSAGE); }; return res; }",
        "label": "P"
    },
    "1795": {
        "dataset": "COMP 3021",
        "project": "jhecf",
        "bug_id": "32",
        "T": "void testMove(String input, String name, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); } private InputStream fixValueStream(String content) { final var bytes = content.getBytes(StandardCharsets.UTF_8); return new ByteArrayInputStream(bytes); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine(); // TODO Action res = switch (inputLine.toLowerCase()) { case \"a\" -> new Move.Left(0); case \"s\" -> new Move.Down(0); case \"w\" -> new Move.Up(0); case \"d\" -> new Move.Right(0); case \"h\" -> new Move.Left(1); case \"j\" -> new Move.Down(1); case \"k\" -> new Move.Up(1); case \"l\" -> new Move.Right(1); case \"u\" -> new Undo(0); case EXIT_COMMAND_TEXT -> new Exit(0); default -> new InvalidInput(0, INVALID_INPUT_MESSAGE); }; return res; }",
        "label": "P"
    },
    "1796": {
        "dataset": "COMP 3021",
        "project": "jhecf",
        "bug_id": "33",
        "T": "void testMove(String input, String name, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); } private InputStream fixValueStream(String content) { final var bytes = content.getBytes(StandardCharsets.UTF_8); return new ByteArrayInputStream(bytes); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine(); // TODO Action res = switch (inputLine.toLowerCase()) { case \"a\" -> new Move.Left(0); case \"s\" -> new Move.Down(0); case \"w\" -> new Move.Up(0); case \"d\" -> new Move.Right(0); case \"h\" -> new Move.Left(1); case \"j\" -> new Move.Down(1); case \"k\" -> new Move.Up(1); case \"l\" -> new Move.Right(1); case \"u\" -> new Undo(0); case EXIT_COMMAND_TEXT -> new Exit(0); default -> new InvalidInput(0, INVALID_INPUT_MESSAGE); }; return res; }",
        "label": "P"
    },
    "1797": {
        "dataset": "COMP 3021",
        "project": "jhecf",
        "bug_id": "34",
        "T": "void testUndo(String input, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine(); // TODO Action res = switch (inputLine.toLowerCase()) { case \"a\" -> new Move.Left(0); case \"s\" -> new Move.Down(0); case \"w\" -> new Move.Up(0); case \"d\" -> new Move.Right(0); case \"h\" -> new Move.Left(1); case \"j\" -> new Move.Down(1); case \"k\" -> new Move.Up(1); case \"l\" -> new Move.Right(1); case \"u\" -> new Undo(0); case EXIT_COMMAND_TEXT -> new Exit(0); default -> new InvalidInput(0, INVALID_INPUT_MESSAGE); }; return res; }",
        "label": "P"
    },
    "1798": {
        "dataset": "COMP 3021",
        "project": "jhecf",
        "bug_id": "35",
        "T": "void testInvalidInput() { final var inputStream = fixValueStream(\"blah blah\"); final var inputEngine = new TerminalInputEngine(inputStream); final var action = inputEngine.fetchAction(); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine(); // TODO Action res = switch (inputLine.toLowerCase()) { case \"a\" -> new Move.Left(0); case \"s\" -> new Move.Down(0); case \"w\" -> new Move.Up(0); case \"d\" -> new Move.Right(0); case \"h\" -> new Move.Left(1); case \"j\" -> new Move.Down(1); case \"k\" -> new Move.Up(1); case \"l\" -> new Move.Right(1); case \"u\" -> new Undo(0); case EXIT_COMMAND_TEXT -> new Exit(0); default -> new InvalidInput(0, INVALID_INPUT_MESSAGE); }; return res; }",
        "label": "P"
    },
    "1799": {
        "dataset": "COMP 3021",
        "project": "jhecf",
        "bug_id": "36",
        "T": "void testUndoWhenThereIsNoMove() { final var gameState = new GameState(TestHelper.parseGameMap(\"\"\" 233 ###### #A.a@# #..a@# ###### \"\"\" )); gameState.undo(); } private Entity generateEntity(int key) { return switch (key % 4) { case 0 -> new Box(0); case 1 -> new Empty(); case 2 -> new Player(0); case 3 -> new Wall(); default -> throw new ShouldNotReachException(); }; }",
        "C": "public GameState(@NotNull GameMap map) { // TODO playerId = map.getPlayerIds(); destinations = map.getDestinations(); maxHeight = map.getMaxHeight(); maxWidth = map.getMaxWidth(); var init = new Entity[map.getMaxHeight()][map.getMaxWidth()]; curMap = new Entity[map.getMaxHeight()][map.getMaxWidth()]; for(int y = 0; y < maxHeight; ++y) { for(int x = 0; x < maxWidth; ++x) { init[y][x] = switch (map.getEntity(Position.of(x, y))) { case Wall ignored -> new Wall(); case Box b -> new Box(b.getPlayerId()); case Player p -> new Player(p.getId()); case Empty ignored -> new Empty(); case null -> null; }; curMap[y][x] = switch (map.getEntity(Position.of(x, y))) { case Wall ignored -> new Wall(); case Box b -> new Box(b.getPlayerId()); case Player p -> new Player(p.getId()); case Empty ignored -> new Empty(); case null -> null; }; } } ckpt = new ArrayList<Entity[][]>(); ckpt.add(init); if(!map.getUndoLimit().isPresent()) { infQuota = true; } else { undoQuota = map.getUndoLimit().get(); } } public void undo() { // TODO curMap = new Entity[maxHeight][maxWidth]; int id; if(ckpt.size() == 1) id = 0; else { undoQuota--; id = ckpt.size() - 2; ckpt.remove(ckpt.size() - 1); } for(int y = 0; y < maxHeight; ++y) { for(int x = 0; x < maxWidth; ++x) { curMap[y][x] = switch (ckpt.get(id)[y][x]) { case Wall ignored -> new Wall(); case Box b -> new Box(b.getPlayerId()); case Player p -> new Player(p.getId()); case Empty ignored -> new Empty(); case null -> null; }; } } } /** * Get the maximum width of the game map. * This should be the same as that in {@link GameMap} public Box(int playerId) { this.playerId = playerId; } public Player(int id) { this.id = id; } public ShouldNotReachException() { super(\"This branch should not be reached.\"); }",
        "label": "P"
    },
    "1800": {
        "dataset": "COMP 3021",
        "project": "jhecf",
        "bug_id": "37",
        "T": "void testGetUndoUnlimited() { final var gameState = new GameState(TestHelper.parseGameMap(\"\"\" -1 ###### #.Aa@# #..a@# ###### \"\"\" )); }",
        "C": "public GameState(@NotNull GameMap map) { // TODO playerId = map.getPlayerIds(); destinations = map.getDestinations(); maxHeight = map.getMaxHeight(); maxWidth = map.getMaxWidth(); var init = new Entity[map.getMaxHeight()][map.getMaxWidth()]; curMap = new Entity[map.getMaxHeight()][map.getMaxWidth()]; for(int y = 0; y < maxHeight; ++y) { for(int x = 0; x < maxWidth; ++x) { init[y][x] = switch (map.getEntity(Position.of(x, y))) { case Wall ignored -> new Wall(); case Box b -> new Box(b.getPlayerId()); case Player p -> new Player(p.getId()); case Empty ignored -> new Empty(); case null -> null; }; curMap[y][x] = switch (map.getEntity(Position.of(x, y))) { case Wall ignored -> new Wall(); case Box b -> new Box(b.getPlayerId()); case Player p -> new Player(p.getId()); case Empty ignored -> new Empty(); case null -> null; }; } } ckpt = new ArrayList<Entity[][]>(); ckpt.add(init); if(!map.getUndoLimit().isPresent()) { infQuota = true; } else { undoQuota = map.getUndoLimit().get(); } }",
        "label": "P"
    },
    "1801": {
        "dataset": "COMP 3021",
        "project": "jhecf",
        "bug_id": "38",
        "T": "void testMapCopying() { final var maxWidth = 2333; final var maxHeight = 2333; final var random = new Random(); final var randomEntities = Stream.generate(() -> Position.of(random.nextInt(maxWidth), random.nextInt(maxHeight))) .distinct() .limit(100) .collect(Collectors.toMap(Function.identity(), it -> generateEntity(it.x()))); final var firstPos = randomEntities.keySet().stream().findFirst(); final var gameMap = new GameMap(maxWidth, maxHeight, Collections.singleton(firstPos.get()), 233); randomEntities.forEach(gameMap::putEntity); final var gameState = new GameState(gameMap); final var randomPosition = randomEntities.keySet().stream().findAny(); gameMap.putEntity(randomPosition.get(), new Empty()); randomEntities.forEach((p, e) -> assertEquals(e, gameState.getEntity(p))); }",
        "C": "public static @NotNull Position of(int x, int y) { return new Position(x, y); } public GameMap(int maxWidth, int maxHeight, Set<Position> destinations, int undoLimit) { // TODO this.maxWidth = maxWidth; this.maxHeight = maxHeight; this.destinations = destinations; this.undoLimit = undoLimit; this.boxId = new HashSet<Integer>(); this.playerId = new HashSet<Integer>(); this.boxPos = new HashSet<Position>(); this.map = new Entity[maxHeight][maxWidth]; for (int y = 0; y < maxHeight; ++y) { for (int x = 0; x < maxWidth; ++x) { this.map[y][x] = null; if(destinations.contains(Position.of(x, y) )) this.map[y][x] = new Empty(); } } } /** * Parses the map from a string representation. * The first line is undo limit. * Starting from the second line, the game map is represented as follows, * <li># represents a {@link Wall}</li> * <li>@ represents a box destination.</li> * <li>Any upper-case letter represents a {@link Player}.</li> * <li> * Any lower-case letter represents a {@link Box} that is only movable by the player with the corresponding upper-case letter. * For instance, box \"a\" can only be moved by player \"A\" and not movable by player \"B\". * </li> * <li>. represents an {@link Empty} position in the map, meaning there is no player or box currently at this position.</li> * <p> * Notes: * <li> * There can be at most 26 players. * All implementations of classes in the hk.ust.comp3021.game package should support up to 26 players. * </li> * <li> * For simplicity, we assume the given map is bounded with a closed boundary. * There is no need to check this point. * </li> * <li> * Example maps can be found in \"src/main/resources\". * </li> * * @param mapText The string representation. * @return The parsed GameMap object. * @throws IllegalArgumentException if undo limit is negative but not -1. * @throws IllegalArgumentException if there are multiple same upper-case letters, i.e., one player can only exist at one position. * @throws IllegalArgumentException if there are no players in the map. * @throws IllegalArgumentException if the number of boxes is not equal to the number of box destinations. * @throws IllegalArgumentException if there are boxes whose {@link Box#getPlayerId()} public GameState(@NotNull GameMap map) { // TODO playerId = map.getPlayerIds(); destinations = map.getDestinations(); maxHeight = map.getMaxHeight(); maxWidth = map.getMaxWidth(); var init = new Entity[map.getMaxHeight()][map.getMaxWidth()]; curMap = new Entity[map.getMaxHeight()][map.getMaxWidth()]; for(int y = 0; y < maxHeight; ++y) { for(int x = 0; x < maxWidth; ++x) { init[y][x] = switch (map.getEntity(Position.of(x, y))) { case Wall ignored -> new Wall(); case Box b -> new Box(b.getPlayerId()); case Player p -> new Player(p.getId()); case Empty ignored -> new Empty(); case null -> null; }; curMap[y][x] = switch (map.getEntity(Position.of(x, y))) { case Wall ignored -> new Wall(); case Box b -> new Box(b.getPlayerId()); case Player p -> new Player(p.getId()); case Empty ignored -> new Empty(); case null -> null; }; } } ckpt = new ArrayList<Entity[][]>(); ckpt.add(init); if(!map.getUndoLimit().isPresent()) { infQuota = true; } else { undoQuota = map.getUndoLimit().get(); } } public void putEntity(Position position, Entity entity) { // TODO map[position.y()][position.x()] = entity; if (entity instanceof Player) { if(playerId.contains(((Player) entity).getId())) throw new IllegalArgumentException(); playerId.add(((Player) entity).getId()); } else if(entity instanceof Box) { boxId.add(((Box) entity).getPlayerId()); boxPos.add(position); } } public @Nullable Entity getEntity(@NotNull Position position) { // TODO return curMap[position.y()][position.x()]; } /** * Get all box destination positions as a set in the game map. * This should be the same as that in {@link GameMap}",
        "label": "F"
    },
    "1802": {
        "dataset": "COMP 3021",
        "project": "jhecf",
        "bug_id": "39",
        "T": "void testUndoWhenThereIsMoveButNoCheckpoint() { final var gameState = new GameState(TestHelper.parseGameMap(\"\"\" 233 ###### #A.a@# #..a@# ###### \"\"\" )); gameState.move(Position.of(1, 1), Position.of(2, 1)); gameState.undo(); }",
        "C": "public GameState(@NotNull GameMap map) { // TODO playerId = map.getPlayerIds(); destinations = map.getDestinations(); maxHeight = map.getMaxHeight(); maxWidth = map.getMaxWidth(); var init = new Entity[map.getMaxHeight()][map.getMaxWidth()]; curMap = new Entity[map.getMaxHeight()][map.getMaxWidth()]; for(int y = 0; y < maxHeight; ++y) { for(int x = 0; x < maxWidth; ++x) { init[y][x] = switch (map.getEntity(Position.of(x, y))) { case Wall ignored -> new Wall(); case Box b -> new Box(b.getPlayerId()); case Player p -> new Player(p.getId()); case Empty ignored -> new Empty(); case null -> null; }; curMap[y][x] = switch (map.getEntity(Position.of(x, y))) { case Wall ignored -> new Wall(); case Box b -> new Box(b.getPlayerId()); case Player p -> new Player(p.getId()); case Empty ignored -> new Empty(); case null -> null; }; } } ckpt = new ArrayList<Entity[][]>(); ckpt.add(init); if(!map.getUndoLimit().isPresent()) { infQuota = true; } else { undoQuota = map.getUndoLimit().get(); } } public void move(Position from, Position to) { // TODO Entity tmp = getEntity(from); curMap[from.y()][from.x()] = curMap[to.y()][to.x()]; curMap[to.y()][to.x()] = tmp; } /** * Record a checkpoint of the game state, including: * <li>All current positions of entities in the game map.</li> * <li>Current undo quota</li> * <p> * Checkpoint is used in {@link GameState#undo()} public static @NotNull Position of(int x, int y) { return new Position(x, y); } public void undo() { // TODO curMap = new Entity[maxHeight][maxWidth]; int id; if(ckpt.size() == 1) id = 0; else { undoQuota--; id = ckpt.size() - 2; ckpt.remove(ckpt.size() - 1); } for(int y = 0; y < maxHeight; ++y) { for(int x = 0; x < maxWidth; ++x) { curMap[y][x] = switch (ckpt.get(id)[y][x]) { case Wall ignored -> new Wall(); case Box b -> new Box(b.getPlayerId()); case Player p -> new Player(p.getId()); case Empty ignored -> new Empty(); case null -> null; }; } } } /** * Get the maximum width of the game map. * This should be the same as that in {@link GameMap}",
        "label": "P"
    },
    "1803": {
        "dataset": "COMP 3021",
        "project": "jhecf",
        "bug_id": "40",
        "T": "void testGameExit() { final var gameState = mock(GameState.class); final var inputEngine = mock(TerminalInputEngine.class); final var renderingEngine = mock(TerminalRenderingEngine.class); when(gameState.isWin()).thenReturn(false, false, false); when(inputEngine.fetchAction()) .thenReturn(new InvalidInput(0, \"\"), new InvalidInput(0, \"\"), new Exit(0)); final var game = new TerminalSokobanGame(gameState, inputEngine, renderingEngine); game.run(); verify(renderingEngine, atLeastOnce()).message(any()); }",
        "C": "public InvalidInput(int initiator, @NotNull String message) { super(initiator); this.message = message; } public Exit(int initiator) { super(initiator); } public TerminalSokobanGame(GameState gameState, TerminalInputEngine inputEngine, TerminalRenderingEngine renderingEngine) { super(gameState); this.inputEngine = inputEngine; this.renderingEngine = renderingEngine; // TODO // Check the number of players var t = state.getAllPlayerPositions(); if(t.size() > 2) throw new IllegalArgumentException(); } public void run() { // TODO renderingEngine.message(GAME_READY_MESSAGE); renderingEngine.render(state); while (!shouldStop()) { if(state.getUndoQuota().isPresent()) renderingEngine.message(String.format(UNDO_QUOTA_TEMPLATE,String.valueOf(state.getUndoQuota().get()))); else renderingEngine.message(UNDO_QUOTA_UNLIMITED); renderingEngine.message(\">>>\"); var action = inputEngine.fetchAction(); var result = processAction(action); if(result instanceof ActionResult.Failed) { renderingEngine.message(((ActionResult.Failed) result).getReason()); } renderingEngine.render(state); } renderingEngine.message(GAME_EXIT_MESSAGE); if(state.isWin()) renderingEngine.message(WIN_MESSAGE); }",
        "label": "P"
    },
    "1804": {
        "dataset": "COMP 3021",
        "project": "jhecf",
        "bug_id": "41",
        "T": "void testGameWin() { final var gameState = mock(GameState.class); final var inputEngine = mock(TerminalInputEngine.class); final var renderingEngine = mock(TerminalRenderingEngine.class); when(gameState.isWin()).thenReturn(false, false, false, true); when(inputEngine.fetchAction()) .thenReturn(new InvalidInput(0, \"\")); final var game = new TerminalSokobanGame(gameState, inputEngine, renderingEngine); game.run(); verify(gameState, atLeastOnce()).isWin(); verify(renderingEngine, atLeastOnce()).message(any()); }",
        "C": "public InvalidInput(int initiator, @NotNull String message) { super(initiator); this.message = message; } public TerminalSokobanGame(GameState gameState, TerminalInputEngine inputEngine, TerminalRenderingEngine renderingEngine) { super(gameState); this.inputEngine = inputEngine; this.renderingEngine = renderingEngine; // TODO // Check the number of players var t = state.getAllPlayerPositions(); if(t.size() > 2) throw new IllegalArgumentException(); } public void run() { // TODO renderingEngine.message(GAME_READY_MESSAGE); renderingEngine.render(state); while (!shouldStop()) { if(state.getUndoQuota().isPresent()) renderingEngine.message(String.format(UNDO_QUOTA_TEMPLATE,String.valueOf(state.getUndoQuota().get()))); else renderingEngine.message(UNDO_QUOTA_UNLIMITED); renderingEngine.message(\">>>\"); var action = inputEngine.fetchAction(); var result = processAction(action); if(result instanceof ActionResult.Failed) { renderingEngine.message(((ActionResult.Failed) result).getReason()); } renderingEngine.render(state); } renderingEngine.message(GAME_EXIT_MESSAGE); if(state.isWin()) renderingEngine.message(WIN_MESSAGE); }",
        "label": "P"
    },
    "1805": {
        "dataset": "COMP 3021",
        "project": "jhecf",
        "bug_id": "42",
        "T": "void testMoreThanTwoPlayers() { final var gameState = mock(GameState.class); final var inputEngine = mock(TerminalInputEngine.class); final var renderingEngine = mock(TerminalRenderingEngine.class); when(gameState.getAllPlayerPositions()).thenReturn(new HashSet<>(Arrays.asList(Position.of(1, 1), Position.of(1, 2), Position.of(1, 3)))); }",
        "C": "public static @NotNull Position of(int x, int y) { return new Position(x, y); }",
        "label": "P"
    },
    "1806": {
        "dataset": "COMP 3021",
        "project": "chngbk",
        "bug_id": "0",
        "T": "void moveUp() { Position.of(233, 232), new Move.Up(-1).nextPosition(pos) ); }",
        "C": "public static @NotNull Position of(int x, int y) { return new Position(x, y); } public Up(int initiator) { super(initiator); }",
        "label": "P"
    },
    "1807": {
        "dataset": "COMP 3021",
        "project": "chngbk",
        "bug_id": "1",
        "T": "void moveDown() { Position.of(233, 234), new Move.Down(-1).nextPosition(pos) ); }",
        "C": "public static @NotNull Position of(int x, int y) { return new Position(x, y); } public Down(int initiator) { super(initiator); }",
        "label": "P"
    },
    "1808": {
        "dataset": "COMP 3021",
        "project": "chngbk",
        "bug_id": "2",
        "T": "void moveRight() { Position.of(234, 233), new Move.Right(-1).nextPosition(pos) ); }",
        "C": "public static @NotNull Position of(int x, int y) { return new Position(x, y); } public Right(int initiator) { super(initiator); }",
        "label": "P"
    },
    "1809": {
        "dataset": "COMP 3021",
        "project": "chngbk",
        "bug_id": "3",
        "T": "void testExceedingUndoQuota() { final var gameState = mock(GameState.class); when(gameState.getPlayerPositionById(anyInt())).thenReturn(Position.of(0, 0)); when(gameState.getUndoQuota()).thenReturn(Optional.of(0)); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Undo(0)); }",
        "C": "public Undo(int initiator) { super(initiator); }",
        "label": "P"
    },
    "1810": {
        "dataset": "COMP 3021",
        "project": "chngbk",
        "bug_id": "4",
        "T": "void testExit() { final var gameState = mock(GameState.class); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Exit(0)); }",
        "C": "public Exit(int initiator) { super(initiator); }",
        "label": "P"
    },
    "1811": {
        "dataset": "COMP 3021",
        "project": "chngbk",
        "bug_id": "5",
        "T": "void testUndoUnlimited() { final var gameState = mock(GameState.class); when(gameState.getPlayerPositionById(anyInt())).thenReturn(Position.of(0, 0)); when(gameState.getUndoQuota()).thenReturn(Optional.empty()); final var game = new SokobanGameForTesting(gameState); for (int i = 0; i < 10000; i++) { final var result = game.feedActionForProcessing(new Undo(0)); } verify(gameState, times(10000)).undo(); }",
        "C": "public TerminalRenderingEngine(PrintStream outputSteam) { this.outputSteam = outputSteam; } public Undo(int initiator) { super(initiator); }",
        "label": "F"
    },
    "1812": {
        "dataset": "COMP 3021",
        "project": "chngbk",
        "bug_id": "6",
        "T": "void testPushOtherPlayerBox() { String mapText = \"\"\" 233 ###### #AB.@# #b.a.# #@...# ###### \"\"\"; final var testMap = TestHelper.parseGameMap(mapText); final var gameState = spy(new GameState(testMap)); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Move.Down(0)); verify(gameState, never()).move(any(), any()); }",
        "C": "public GameState(@NotNull GameMap map) { // TODO this.map = map; this.positionEntityMap.putAll(map.getPositionEntityMap()); for(Map.Entry<Position, Entity> entry : positionEntityMap.entrySet()){ if(entry.getValue() instanceof Player){ Player temp = (Player) entry.getValue(); playerPositionsById.put(temp.getId(), entry.getKey()); allPlayerPositions.add(entry.getKey()); } else if (entry.getValue() instanceof Box) { boxLocations.add(entry.getKey()); } } this.destinations = map.getDestinations(); this.maxMapWidth = map.getMaxWidth(); this.maxMapHeight = map.getMaxHeight(); this.undoQuota = map.getUndoLimit().get(); } public Down(int initiator) { super(initiator); }",
        "label": "P"
    },
    "1813": {
        "dataset": "COMP 3021",
        "project": "chngbk",
        "bug_id": "7",
        "T": "void testMoveNonExistingPlayer() { String mapText = \"\"\" 233 ###### #A..@# #a...# ##...# ###### \"\"\"; final var testMap = TestHelper.parseGameMap(mapText); final var gameState = spy(new GameState(testMap)); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Move.Down(23)); }",
        "C": "public GameState(@NotNull GameMap map) { // TODO this.map = map; this.positionEntityMap.putAll(map.getPositionEntityMap()); for(Map.Entry<Position, Entity> entry : positionEntityMap.entrySet()){ if(entry.getValue() instanceof Player){ Player temp = (Player) entry.getValue(); playerPositionsById.put(temp.getId(), entry.getKey()); allPlayerPositions.add(entry.getKey()); } else if (entry.getValue() instanceof Box) { boxLocations.add(entry.getKey()); } } this.destinations = map.getDestinations(); this.maxMapWidth = map.getMaxWidth(); this.maxMapHeight = map.getMaxHeight(); this.undoQuota = map.getUndoLimit().get(); } public Down(int initiator) { super(initiator); }",
        "label": "F"
    },
    "1814": {
        "dataset": "COMP 3021",
        "project": "chngbk",
        "bug_id": "8",
        "T": "void testCheckpointWhenNeed() { final var gameState = spy(new GameState(TestHelper.parseGameMap(\"\"\" 233 ###### #.Aa@# #..a@# ###### \"\"\" ))); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Move.Right(0)); verify(gameState, times(1)).checkpoint(); }",
        "C": "public GameState(@NotNull GameMap map) { // TODO this.map = map; this.positionEntityMap.putAll(map.getPositionEntityMap()); for(Map.Entry<Position, Entity> entry : positionEntityMap.entrySet()){ if(entry.getValue() instanceof Player){ Player temp = (Player) entry.getValue(); playerPositionsById.put(temp.getId(), entry.getKey()); allPlayerPositions.add(entry.getKey()); } else if (entry.getValue() instanceof Box) { boxLocations.add(entry.getKey()); } } this.destinations = map.getDestinations(); this.maxMapWidth = map.getMaxWidth(); this.maxMapHeight = map.getMaxHeight(); this.undoQuota = map.getUndoLimit().get(); } public Right(int initiator) { super(initiator); }",
        "label": "P"
    },
    "1815": {
        "dataset": "COMP 3021",
        "project": "chngbk",
        "bug_id": "9",
        "T": "void testPushBoxAgainstWall() { String mapText = \"\"\" 233 ###### #A..@# #a...# ##...# ###### \"\"\"; final var testMap = TestHelper.parseGameMap(mapText); final var gameState = spy(new GameState(testMap)); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Move.Down(0)); verify(gameState, never()).move(any(), any()); }",
        "C": "public GameState(@NotNull GameMap map) { // TODO this.map = map; this.positionEntityMap.putAll(map.getPositionEntityMap()); for(Map.Entry<Position, Entity> entry : positionEntityMap.entrySet()){ if(entry.getValue() instanceof Player){ Player temp = (Player) entry.getValue(); playerPositionsById.put(temp.getId(), entry.getKey()); allPlayerPositions.add(entry.getKey()); } else if (entry.getValue() instanceof Box) { boxLocations.add(entry.getKey()); } } this.destinations = map.getDestinations(); this.maxMapWidth = map.getMaxWidth(); this.maxMapHeight = map.getMaxHeight(); this.undoQuota = map.getUndoLimit().get(); } public Down(int initiator) { super(initiator); }",
        "label": "P"
    },
    "1816": {
        "dataset": "COMP 3021",
        "project": "chngbk",
        "bug_id": "10",
        "T": "void testCheckpointWhenNotNeed() { final var gameState = spy(new GameState(TestHelper.parseGameMap(\"\"\" 233 ###### #A.a@# #..a@# ###### \"\"\" ))); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Move.Right(0)); verify(gameState, never()).checkpoint(); } private static class SokobanGameForTesting extends AbstractSokobanGame { protected SokobanGameForTesting(GameState gameState) { super(gameState); } @Override public void run() { } public ActionResult feedActionForProcessing(Action action) { return processAction(action); } }",
        "C": "public GameState(@NotNull GameMap map) { // TODO this.map = map; this.positionEntityMap.putAll(map.getPositionEntityMap()); for(Map.Entry<Position, Entity> entry : positionEntityMap.entrySet()){ if(entry.getValue() instanceof Player){ Player temp = (Player) entry.getValue(); playerPositionsById.put(temp.getId(), entry.getKey()); allPlayerPositions.add(entry.getKey()); } else if (entry.getValue() instanceof Box) { boxLocations.add(entry.getKey()); } } this.destinations = map.getDestinations(); this.maxMapWidth = map.getMaxWidth(); this.maxMapHeight = map.getMaxHeight(); this.undoQuota = map.getUndoLimit().get(); } public Right(int initiator) { super(initiator); } public void run() { // TODO this.processAction(this.inputEngine.fetchAction()); this.renderingEngine.render(state); if(!this.shouldStop()) { this.renderingEngine.message(\"Undo Quota: \" + state.getUndoQuota()); this.run(); } } protected ActionResult processAction(@NotNull Action action) { // TODO this.action = action; if(action instanceof InvalidInput){ return new ActionResult.Failed(action, ((InvalidInput) action).getMessage()); } else{ if(action instanceof Move){ int playerId = action.getInitiator(); var presentPosition = state.getPlayerPositionById(playerId); var nextPosition = ((Move) action).nextPosition(presentPosition); var objectEntity = state.getEntity(nextPosition); if(objectEntity instanceof Wall) return new ActionResult.Failed(action, \"Action Fail\"); else if(objectEntity instanceof Box){ if(((Box) objectEntity).getPlayerId() != playerId) return new ActionResult.Failed(action, \"Action Fail\"); var boxNextPosition = ((Move) action).nextPosition(nextPosition); if(state.getEntity(boxNextPosition) instanceof Wall || state.getEntity(boxNextPosition) instanceof Box){ return new ActionResult.Failed(action, \"Action Fail\"); } state.move(nextPosition, boxNextPosition); state.move(presentPosition, nextPosition); state.checkpoint(); } else{ state.move(presentPosition, nextPosition); } } else if (action instanceof Undo){ if(state.getUndoQuota().get() == 0){ return new ActionResult.Failed(action, \"Action Fail\"); } state.undo(); } return new ActionResult.Success(action); } }",
        "label": "P"
    },
    "1817": {
        "dataset": "COMP 3021",
        "project": "chngbk",
        "bug_id": "11",
        "T": "void testHitAnotherPlayer() { String mapText = \"\"\" 233 ###### #A..@# #B...# #ab.@# ###### \"\"\"; final var testMap = TestHelper.parseGameMap(mapText); final var gameState = spy(new GameState(testMap)); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Move.Down(0)); verify(gameState, never()).move(any(), any()); }",
        "C": "public GameState(@NotNull GameMap map) { // TODO this.map = map; this.positionEntityMap.putAll(map.getPositionEntityMap()); for(Map.Entry<Position, Entity> entry : positionEntityMap.entrySet()){ if(entry.getValue() instanceof Player){ Player temp = (Player) entry.getValue(); playerPositionsById.put(temp.getId(), entry.getKey()); allPlayerPositions.add(entry.getKey()); } else if (entry.getValue() instanceof Box) { boxLocations.add(entry.getKey()); } } this.destinations = map.getDestinations(); this.maxMapWidth = map.getMaxWidth(); this.maxMapHeight = map.getMaxHeight(); this.undoQuota = map.getUndoLimit().get(); } public Down(int initiator) { super(initiator); }",
        "label": "F"
    },
    "1818": {
        "dataset": "COMP 3021",
        "project": "chngbk",
        "bug_id": "12",
        "T": "void testUndoWithinQuota() { final var gameState = mock(GameState.class); when(gameState.getPlayerPositionById(anyInt())).thenReturn(Position.of(0, 0)); when(gameState.getUndoQuota()).thenReturn(Optional.of(1)); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Undo(0)); verify(gameState, times(1)).undo(); }",
        "C": "public Undo(int initiator) { super(initiator); }",
        "label": "P"
    },
    "1819": {
        "dataset": "COMP 3021",
        "project": "chngbk",
        "bug_id": "13",
        "T": "void testInvalidInput() { final var game = new SokobanGameForTesting(mock(GameState.class)); final var message = String.valueOf(new Random().nextLong()); final var action = new InvalidInput(-1, message); final var result = game.feedActionForProcessing(action); }",
        "C": "public InvalidInput(int initiator, @NotNull String message) { super(initiator); this.message = message; }",
        "label": "P"
    },
    "1820": {
        "dataset": "COMP 3021",
        "project": "chngbk",
        "bug_id": "14",
        "T": "void testUndoLimitParsing() { final var gameMap = TestHelper.parseGameMap(rectangularMap); }",
        "C": "",
        "label": "P"
    },
    "1821": {
        "dataset": "COMP 3021",
        "project": "chngbk",
        "bug_id": "15",
        "T": "void testWidthForNonRectangularMap() { final var gameMap = TestHelper.parseGameMap(nonRectangularMap); }",
        "C": "",
        "label": "P"
    },
    "1822": {
        "dataset": "COMP 3021",
        "project": "chngbk",
        "bug_id": "16",
        "T": "void testTwoPlayersMap() { final var twoPlayersMap = \"\"\" 233 ###### #A..@# #..B@# #....# #.a..# #..b.# ###### \"\"\"; final var gameMap = TestHelper.parseGameMap(twoPlayersMap); final var playerIds = gameMap.getPlayerIds(); final var expectedIds = new HashSet<Integer>(); expectedIds.add(0); expectedIds.add(1); }",
        "C": "public Set<Integer> getPlayerIds() { // TODO return this.playerIds; }",
        "label": "P"
    },
    "1823": {
        "dataset": "COMP 3021",
        "project": "chngbk",
        "bug_id": "17",
        "T": "void testMapWithoutPlayer() { final var invalidMap = \"\"\" 233 ### #.# ### \"\"\"; } // @Tag(TestKind.HIDDEN) // @Test // void testUnmatchedPlayersAndBoxes() { // final var invalidMap = \"\"\" // 233 // ###### // #A..@# // #...@# // #a.b@# // #.a.@# // #..a.# // ###### // \"\"\"; // assertThrowsExactly(IllegalArgumentException.class, () -> TestHelper.parseGameMap(invalidMap)); // }",
        "C": "public TerminalRenderingEngine(PrintStream outputSteam) { this.outputSteam = outputSteam; }",
        "label": "P"
    },
    "1824": {
        "dataset": "COMP 3021",
        "project": "chngbk",
        "bug_id": "18",
        "T": "void testManyPlayersMap() { final var manyPlayersMap = \"\"\" 233 ###### #A.P@@# #vCB@@# #.cpD@# #Ga.d@# #g.bV@# ###### \"\"\"; final var gameMap = TestHelper.parseGameMap(manyPlayersMap); final var playerIds = gameMap.getPlayerIds(); final var expectedIds = new HashSet<>(Arrays.asList( 0, 'P' - 'A', 'C' - 'A', 'B' - 'A', 'D' - 'A', 'G' - 'A', 'V' - 'A' )); }",
        "C": "public Set<Integer> getPlayerIds() { // TODO return this.playerIds; }",
        "label": "P"
    },
    "1825": {
        "dataset": "COMP 3021",
        "project": "chngbk",
        "bug_id": "19",
        "T": "void testHeightForNonRectangularMap() { final var gameMap = TestHelper.parseGameMap(nonRectangularMap); }",
        "C": "",
        "label": "P"
    },
    "1826": {
        "dataset": "COMP 3021",
        "project": "chngbk",
        "bug_id": "20",
        "T": "void testDuplicatedPlayers() { final var invalidMap = \"\"\" 233 ###### #A..@# #..A@# #....# #.a..# #..b.# ###### \"\"\"; }",
        "C": "",
        "label": "P"
    },
    "1827": {
        "dataset": "COMP 3021",
        "project": "chngbk",
        "bug_id": "21",
        "T": "void testParseMapWithoutUndoLimit() { final var invalidMap = String.join(\"\\n\", rectangularMap.lines().skip(1).toList()); }",
        "C": "",
        "label": "P"
    },
    "1828": {
        "dataset": "COMP 3021",
        "project": "chngbk",
        "bug_id": "22",
        "T": "void testInsufficientDestinations() { final var invalidMap = \"\"\" 233 ###### #A..@# #...@# #a...# #.a..# #..a.# ###### \"\"\"; }",
        "C": "",
        "label": "P"
    },
    "1829": {
        "dataset": "COMP 3021",
        "project": "chngbk",
        "bug_id": "23",
        "T": "void testSuperLargeMap() { try { new GameMap(Integer.MAX_VALUE, Integer.MAX_VALUE, Collections.emptySet(), 0); } catch (OutOfMemoryError e) { throw new RuntimeException(e); } }); }",
        "C": "public GameMap(int maxWidth, int maxHeight, Set<Position> destinations, int undoLimit) { // TODO this.maxWidth = maxWidth; this.maxHeight = maxHeight; this.destinations = destinations; this.undoLimit = undoLimit; } /** * Parses the map from a string representation. * The first line is undo limit. * Starting from the second line, the game map is represented as follows, * <li># represents a {@link Wall}</li> * <li>@ represents a box destination.</li> * <li>Any upper-case letter represents a {@link Player}.</li> * <li> * Any lower-case letter represents a {@link Box} that is only movable by the player with the corresponding upper-case letter. * For instance, box \"a\" can only be moved by player \"A\" and not movable by player \"B\". * </li> * <li>. represents an {@link Empty} position in the map, meaning there is no player or box currently at this position.</li> * <p> * Notes: * <li> * There can be at most 26 players. * All implementations of classes in the hk.ust.comp3021.game package should support up to 26 players. * </li> * <li> * For simplicity, we assume the given map is bounded with a closed boundary. * There is no need to check this point. * </li> * <li> * Example maps can be found in \"src/main/resources\". * </li> * * @param mapText The string representation. * @return The parsed GameMap object. * @throws IllegalArgumentException if undo limit is negative but not -1. * @throws IllegalArgumentException if there are multiple same upper-case letters, i.e., one player can only exist at one position. * @throws IllegalArgumentException if there are no players in the map. * @throws IllegalArgumentException if the number of boxes is not equal to the number of box destinations. * @throws IllegalArgumentException if there are boxes whose {@link Box#getPlayerId()} public TerminalRenderingEngine(PrintStream outputSteam) { this.outputSteam = outputSteam; }",
        "label": "P"
    },
    "1830": {
        "dataset": "COMP 3021",
        "project": "chngbk",
        "bug_id": "24",
        "T": "void testInvalidUndoLimit() { final var invalidMap = \"\"\" -233 ###### #A..@# #...@# #a.b@# #.a.@# #..a.# ###### \"\"\"; }",
        "C": "",
        "label": "P"
    },
    "1831": {
        "dataset": "COMP 3021",
        "project": "chngbk",
        "bug_id": "25",
        "T": "void testEmptyMap() { final var invalidMap = \"\"; }",
        "C": "",
        "label": "P"
    },
    "1832": {
        "dataset": "COMP 3021",
        "project": "chngbk",
        "bug_id": "26",
        "T": "void testMove(String input, String name, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); } private InputStream fixValueStream(String content) { final var bytes = content.getBytes(StandardCharsets.UTF_8); return new ByteArrayInputStream(bytes); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine(); // TODO switch(inputLine.toUpperCase()){ case \"A\" :{ return new Move.Left(0); } case \"S\":{ return new Move.Down(0); } case \"W\":{ return new Move.Up(0); } case \"D\":{ return new Move.Right(0); } case \"H\":{ return new Move.Left(1); } case \"J\":{ return new Move.Down(1); } case \"K\":{ return new Move.Up(1); } case \"L\":{ return new Move.Right(1); } case \"U\":{ return new Undo(-1); } case \"EXIT\":{ return new Exit(-1); } default:{ return new InvalidInput(-1, \"Invalid Input!\"); } } }",
        "label": "P"
    },
    "1833": {
        "dataset": "COMP 3021",
        "project": "chngbk",
        "bug_id": "27",
        "T": "void testMove(String input, String name, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); } private InputStream fixValueStream(String content) { final var bytes = content.getBytes(StandardCharsets.UTF_8); return new ByteArrayInputStream(bytes); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine(); // TODO switch(inputLine.toUpperCase()){ case \"A\" :{ return new Move.Left(0); } case \"S\":{ return new Move.Down(0); } case \"W\":{ return new Move.Up(0); } case \"D\":{ return new Move.Right(0); } case \"H\":{ return new Move.Left(1); } case \"J\":{ return new Move.Down(1); } case \"K\":{ return new Move.Up(1); } case \"L\":{ return new Move.Right(1); } case \"U\":{ return new Undo(-1); } case \"EXIT\":{ return new Exit(-1); } default:{ return new InvalidInput(-1, \"Invalid Input!\"); } } }",
        "label": "P"
    },
    "1834": {
        "dataset": "COMP 3021",
        "project": "chngbk",
        "bug_id": "28",
        "T": "void testMove(String input, String name, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); } private InputStream fixValueStream(String content) { final var bytes = content.getBytes(StandardCharsets.UTF_8); return new ByteArrayInputStream(bytes); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine(); // TODO switch(inputLine.toUpperCase()){ case \"A\" :{ return new Move.Left(0); } case \"S\":{ return new Move.Down(0); } case \"W\":{ return new Move.Up(0); } case \"D\":{ return new Move.Right(0); } case \"H\":{ return new Move.Left(1); } case \"J\":{ return new Move.Down(1); } case \"K\":{ return new Move.Up(1); } case \"L\":{ return new Move.Right(1); } case \"U\":{ return new Undo(-1); } case \"EXIT\":{ return new Exit(-1); } default:{ return new InvalidInput(-1, \"Invalid Input!\"); } } }",
        "label": "P"
    },
    "1835": {
        "dataset": "COMP 3021",
        "project": "chngbk",
        "bug_id": "29",
        "T": "void testMove(String input, String name, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); } private InputStream fixValueStream(String content) { final var bytes = content.getBytes(StandardCharsets.UTF_8); return new ByteArrayInputStream(bytes); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine(); // TODO switch(inputLine.toUpperCase()){ case \"A\" :{ return new Move.Left(0); } case \"S\":{ return new Move.Down(0); } case \"W\":{ return new Move.Up(0); } case \"D\":{ return new Move.Right(0); } case \"H\":{ return new Move.Left(1); } case \"J\":{ return new Move.Down(1); } case \"K\":{ return new Move.Up(1); } case \"L\":{ return new Move.Right(1); } case \"U\":{ return new Undo(-1); } case \"EXIT\":{ return new Exit(-1); } default:{ return new InvalidInput(-1, \"Invalid Input!\"); } } }",
        "label": "P"
    },
    "1836": {
        "dataset": "COMP 3021",
        "project": "chngbk",
        "bug_id": "30",
        "T": "void testMove(String input, String name, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); } private InputStream fixValueStream(String content) { final var bytes = content.getBytes(StandardCharsets.UTF_8); return new ByteArrayInputStream(bytes); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine(); // TODO switch(inputLine.toUpperCase()){ case \"A\" :{ return new Move.Left(0); } case \"S\":{ return new Move.Down(0); } case \"W\":{ return new Move.Up(0); } case \"D\":{ return new Move.Right(0); } case \"H\":{ return new Move.Left(1); } case \"J\":{ return new Move.Down(1); } case \"K\":{ return new Move.Up(1); } case \"L\":{ return new Move.Right(1); } case \"U\":{ return new Undo(-1); } case \"EXIT\":{ return new Exit(-1); } default:{ return new InvalidInput(-1, \"Invalid Input!\"); } } }",
        "label": "P"
    },
    "1837": {
        "dataset": "COMP 3021",
        "project": "chngbk",
        "bug_id": "31",
        "T": "void testMove(String input, String name, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); } private InputStream fixValueStream(String content) { final var bytes = content.getBytes(StandardCharsets.UTF_8); return new ByteArrayInputStream(bytes); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine(); // TODO switch(inputLine.toUpperCase()){ case \"A\" :{ return new Move.Left(0); } case \"S\":{ return new Move.Down(0); } case \"W\":{ return new Move.Up(0); } case \"D\":{ return new Move.Right(0); } case \"H\":{ return new Move.Left(1); } case \"J\":{ return new Move.Down(1); } case \"K\":{ return new Move.Up(1); } case \"L\":{ return new Move.Right(1); } case \"U\":{ return new Undo(-1); } case \"EXIT\":{ return new Exit(-1); } default:{ return new InvalidInput(-1, \"Invalid Input!\"); } } }",
        "label": "P"
    },
    "1838": {
        "dataset": "COMP 3021",
        "project": "chngbk",
        "bug_id": "32",
        "T": "void testMove(String input, String name, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); } private InputStream fixValueStream(String content) { final var bytes = content.getBytes(StandardCharsets.UTF_8); return new ByteArrayInputStream(bytes); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine(); // TODO switch(inputLine.toUpperCase()){ case \"A\" :{ return new Move.Left(0); } case \"S\":{ return new Move.Down(0); } case \"W\":{ return new Move.Up(0); } case \"D\":{ return new Move.Right(0); } case \"H\":{ return new Move.Left(1); } case \"J\":{ return new Move.Down(1); } case \"K\":{ return new Move.Up(1); } case \"L\":{ return new Move.Right(1); } case \"U\":{ return new Undo(-1); } case \"EXIT\":{ return new Exit(-1); } default:{ return new InvalidInput(-1, \"Invalid Input!\"); } } }",
        "label": "P"
    },
    "1839": {
        "dataset": "COMP 3021",
        "project": "chngbk",
        "bug_id": "33",
        "T": "void testMove(String input, String name, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); } private InputStream fixValueStream(String content) { final var bytes = content.getBytes(StandardCharsets.UTF_8); return new ByteArrayInputStream(bytes); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine(); // TODO switch(inputLine.toUpperCase()){ case \"A\" :{ return new Move.Left(0); } case \"S\":{ return new Move.Down(0); } case \"W\":{ return new Move.Up(0); } case \"D\":{ return new Move.Right(0); } case \"H\":{ return new Move.Left(1); } case \"J\":{ return new Move.Down(1); } case \"K\":{ return new Move.Up(1); } case \"L\":{ return new Move.Right(1); } case \"U\":{ return new Undo(-1); } case \"EXIT\":{ return new Exit(-1); } default:{ return new InvalidInput(-1, \"Invalid Input!\"); } } }",
        "label": "P"
    },
    "1840": {
        "dataset": "COMP 3021",
        "project": "chngbk",
        "bug_id": "34",
        "T": "void testUndo(String input, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine(); // TODO switch(inputLine.toUpperCase()){ case \"A\" :{ return new Move.Left(0); } case \"S\":{ return new Move.Down(0); } case \"W\":{ return new Move.Up(0); } case \"D\":{ return new Move.Right(0); } case \"H\":{ return new Move.Left(1); } case \"J\":{ return new Move.Down(1); } case \"K\":{ return new Move.Up(1); } case \"L\":{ return new Move.Right(1); } case \"U\":{ return new Undo(-1); } case \"EXIT\":{ return new Exit(-1); } default:{ return new InvalidInput(-1, \"Invalid Input!\"); } } }",
        "label": "P"
    },
    "1841": {
        "dataset": "COMP 3021",
        "project": "chngbk",
        "bug_id": "35",
        "T": "void testInvalidInput() { final var inputStream = fixValueStream(\"blah blah\"); final var inputEngine = new TerminalInputEngine(inputStream); final var action = inputEngine.fetchAction(); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine(); // TODO switch(inputLine.toUpperCase()){ case \"A\" :{ return new Move.Left(0); } case \"S\":{ return new Move.Down(0); } case \"W\":{ return new Move.Up(0); } case \"D\":{ return new Move.Right(0); } case \"H\":{ return new Move.Left(1); } case \"J\":{ return new Move.Down(1); } case \"K\":{ return new Move.Up(1); } case \"L\":{ return new Move.Right(1); } case \"U\":{ return new Undo(-1); } case \"EXIT\":{ return new Exit(-1); } default:{ return new InvalidInput(-1, \"Invalid Input!\"); } } }",
        "label": "P"
    },
    "1842": {
        "dataset": "COMP 3021",
        "project": "chngbk",
        "bug_id": "36",
        "T": "void testUndoWhenThereIsNoMove() { final var gameState = new GameState(TestHelper.parseGameMap(\"\"\" 233 ###### #A.a@# #..a@# ###### \"\"\" )); gameState.undo(); } private Entity generateEntity(int key) { return switch (key % 4) { case 0 -> new Box(0); case 1 -> new Empty(); case 2 -> new Player(0); case 3 -> new Wall(); default -> throw new ShouldNotReachException(); }; }",
        "C": "public GameState(@NotNull GameMap map) { // TODO this.map = map; this.positionEntityMap.putAll(map.getPositionEntityMap()); for(Map.Entry<Position, Entity> entry : positionEntityMap.entrySet()){ if(entry.getValue() instanceof Player){ Player temp = (Player) entry.getValue(); playerPositionsById.put(temp.getId(), entry.getKey()); allPlayerPositions.add(entry.getKey()); } else if (entry.getValue() instanceof Box) { boxLocations.add(entry.getKey()); } } this.destinations = map.getDestinations(); this.maxMapWidth = map.getMaxWidth(); this.maxMapHeight = map.getMaxHeight(); this.undoQuota = map.getUndoLimit().get(); } public void undo() { // TODO if(this.checkPoint.size() > 0 ) { GameState previousState = this.checkPoint.get(this.checkPoint.size() - 1); if(this.positionEntityMap != previousState.positionEntityMap) { this.positionEntityMap = previousState.positionEntityMap; this.checkPoint = previousState.checkPoint; this.boxLocations = previousState.boxLocations; this.allPlayerPositions = previousState.allPlayerPositions; this.playerPositionsById = previousState.playerPositionsById; } else{ GameState initialState = new GameState(this.map); this.positionEntityMap = initialState.positionEntityMap; this.boxLocations = initialState.boxLocations; this.allPlayerPositions = initialState.allPlayerPositions; this.playerPositionsById = initialState.playerPositionsById; } this.undoQuota -= 1; } else{ GameState initialState = new GameState(this.map); this.positionEntityMap = initialState.positionEntityMap; this.boxLocations = initialState.boxLocations; this.allPlayerPositions = initialState.allPlayerPositions; this.playerPositionsById = initialState.playerPositionsById; } } /** * Get the maximum width of the game map. * This should be the same as that in {@link GameMap} public TerminalRenderingEngine(PrintStream outputSteam) { this.outputSteam = outputSteam; } public Box(int playerId) { this.playerId = playerId; } public Player(int id) { this.id = id; } public ShouldNotReachException() { super(\"This branch should not be reached.\"); }",
        "label": "F"
    },
    "1843": {
        "dataset": "COMP 3021",
        "project": "chngbk",
        "bug_id": "37",
        "T": "void testGetUndoUnlimited() { final var gameState = new GameState(TestHelper.parseGameMap(\"\"\" -1 ###### #.Aa@# #..a@# ###### \"\"\" )); }",
        "C": "public GameState(@NotNull GameMap map) { // TODO this.map = map; this.positionEntityMap.putAll(map.getPositionEntityMap()); for(Map.Entry<Position, Entity> entry : positionEntityMap.entrySet()){ if(entry.getValue() instanceof Player){ Player temp = (Player) entry.getValue(); playerPositionsById.put(temp.getId(), entry.getKey()); allPlayerPositions.add(entry.getKey()); } else if (entry.getValue() instanceof Box) { boxLocations.add(entry.getKey()); } } this.destinations = map.getDestinations(); this.maxMapWidth = map.getMaxWidth(); this.maxMapHeight = map.getMaxHeight(); this.undoQuota = map.getUndoLimit().get(); }",
        "label": "F"
    },
    "1844": {
        "dataset": "COMP 3021",
        "project": "chngbk",
        "bug_id": "38",
        "T": "void testMapCopying() { final var maxWidth = 2333; final var maxHeight = 2333; final var random = new Random(); final var randomEntities = Stream.generate(() -> Position.of(random.nextInt(maxWidth), random.nextInt(maxHeight))) .distinct() .limit(100) .collect(Collectors.toMap(Function.identity(), it -> generateEntity(it.x()))); final var firstPos = randomEntities.keySet().stream().findFirst(); final var gameMap = new GameMap(maxWidth, maxHeight, Collections.singleton(firstPos.get()), 233); randomEntities.forEach(gameMap::putEntity); final var gameState = new GameState(gameMap); final var randomPosition = randomEntities.keySet().stream().findAny(); gameMap.putEntity(randomPosition.get(), new Empty()); randomEntities.forEach((p, e) -> assertEquals(e, gameState.getEntity(p))); }",
        "C": "public static @NotNull Position of(int x, int y) { return new Position(x, y); } public GameMap(int maxWidth, int maxHeight, Set<Position> destinations, int undoLimit) { // TODO this.maxWidth = maxWidth; this.maxHeight = maxHeight; this.destinations = destinations; this.undoLimit = undoLimit; } /** * Parses the map from a string representation. * The first line is undo limit. * Starting from the second line, the game map is represented as follows, * <li># represents a {@link Wall}</li> * <li>@ represents a box destination.</li> * <li>Any upper-case letter represents a {@link Player}.</li> * <li> * Any lower-case letter represents a {@link Box} that is only movable by the player with the corresponding upper-case letter. * For instance, box \"a\" can only be moved by player \"A\" and not movable by player \"B\". * </li> * <li>. represents an {@link Empty} position in the map, meaning there is no player or box currently at this position.</li> * <p> * Notes: * <li> * There can be at most 26 players. * All implementations of classes in the hk.ust.comp3021.game package should support up to 26 players. * </li> * <li> * For simplicity, we assume the given map is bounded with a closed boundary. * There is no need to check this point. * </li> * <li> * Example maps can be found in \"src/main/resources\". * </li> * * @param mapText The string representation. * @return The parsed GameMap object. * @throws IllegalArgumentException if undo limit is negative but not -1. * @throws IllegalArgumentException if there are multiple same upper-case letters, i.e., one player can only exist at one position. * @throws IllegalArgumentException if there are no players in the map. * @throws IllegalArgumentException if the number of boxes is not equal to the number of box destinations. * @throws IllegalArgumentException if there are boxes whose {@link Box#getPlayerId()} public GameState(@NotNull GameMap map) { // TODO this.map = map; this.positionEntityMap.putAll(map.getPositionEntityMap()); for(Map.Entry<Position, Entity> entry : positionEntityMap.entrySet()){ if(entry.getValue() instanceof Player){ Player temp = (Player) entry.getValue(); playerPositionsById.put(temp.getId(), entry.getKey()); allPlayerPositions.add(entry.getKey()); } else if (entry.getValue() instanceof Box) { boxLocations.add(entry.getKey()); } } this.destinations = map.getDestinations(); this.maxMapWidth = map.getMaxWidth(); this.maxMapHeight = map.getMaxHeight(); this.undoQuota = map.getUndoLimit().get(); } public void putEntity(Position position, Entity entity) { // TODO this.positionEntityMap.put(position, entity); } public @Nullable Entity getEntity(@NotNull Position position) { // TODO return positionEntityMap.get(position); } /** * Get all box destination positions as a set in the game map. * This should be the same as that in {@link GameMap}",
        "label": "P"
    },
    "1845": {
        "dataset": "COMP 3021",
        "project": "chngbk",
        "bug_id": "39",
        "T": "void testUndoWhenThereIsMoveButNoCheckpoint() { final var gameState = new GameState(TestHelper.parseGameMap(\"\"\" 233 ###### #A.a@# #..a@# ###### \"\"\" )); gameState.move(Position.of(1, 1), Position.of(2, 1)); gameState.undo(); }",
        "C": "public GameState(@NotNull GameMap map) { // TODO this.map = map; this.positionEntityMap.putAll(map.getPositionEntityMap()); for(Map.Entry<Position, Entity> entry : positionEntityMap.entrySet()){ if(entry.getValue() instanceof Player){ Player temp = (Player) entry.getValue(); playerPositionsById.put(temp.getId(), entry.getKey()); allPlayerPositions.add(entry.getKey()); } else if (entry.getValue() instanceof Box) { boxLocations.add(entry.getKey()); } } this.destinations = map.getDestinations(); this.maxMapWidth = map.getMaxWidth(); this.maxMapHeight = map.getMaxHeight(); this.undoQuota = map.getUndoLimit().get(); } public void move(Position from, Position to) { // TODO Entity fromEntity = getEntity(from); if(fromEntity instanceof Player){ this.positionEntityMap.put(to, fromEntity); this.positionEntityMap.put(from, new Empty()); allPlayerPositions.remove(from); allPlayerPositions.add(to); playerPositionsById.put(((Player) fromEntity).getId(), to); } else if(fromEntity instanceof Box){ boxLocations.remove(from); boxLocations.add(to); this.positionEntityMap.put(to, fromEntity); this.positionEntityMap.put(from, new Empty()); } } /** * Record a checkpoint of the game state, including: * <li>All current positions of entities in the game map.</li> * <li>Current undo quota</li> * <p> * Checkpoint is used in {@link GameState#undo()} public static @NotNull Position of(int x, int y) { return new Position(x, y); } public void undo() { // TODO if(this.checkPoint.size() > 0 ) { GameState previousState = this.checkPoint.get(this.checkPoint.size() - 1); if(this.positionEntityMap != previousState.positionEntityMap) { this.positionEntityMap = previousState.positionEntityMap; this.checkPoint = previousState.checkPoint; this.boxLocations = previousState.boxLocations; this.allPlayerPositions = previousState.allPlayerPositions; this.playerPositionsById = previousState.playerPositionsById; } else{ GameState initialState = new GameState(this.map); this.positionEntityMap = initialState.positionEntityMap; this.boxLocations = initialState.boxLocations; this.allPlayerPositions = initialState.allPlayerPositions; this.playerPositionsById = initialState.playerPositionsById; } this.undoQuota -= 1; } else{ GameState initialState = new GameState(this.map); this.positionEntityMap = initialState.positionEntityMap; this.boxLocations = initialState.boxLocations; this.allPlayerPositions = initialState.allPlayerPositions; this.playerPositionsById = initialState.playerPositionsById; } } /** * Get the maximum width of the game map. * This should be the same as that in {@link GameMap}",
        "label": "F"
    },
    "1846": {
        "dataset": "COMP 3021",
        "project": "chngbk",
        "bug_id": "40",
        "T": "void testGameExit() { final var gameState = mock(GameState.class); final var inputEngine = mock(TerminalInputEngine.class); final var renderingEngine = mock(TerminalRenderingEngine.class); when(gameState.isWin()).thenReturn(false, false, false); when(inputEngine.fetchAction()) .thenReturn(new InvalidInput(0, \"\"), new InvalidInput(0, \"\"), new Exit(0)); final var game = new TerminalSokobanGame(gameState, inputEngine, renderingEngine); game.run(); verify(renderingEngine, atLeastOnce()).message(any()); }",
        "C": "public InvalidInput(int initiator, @NotNull String message) { super(initiator); this.message = message; } public Exit(int initiator) { super(initiator); } public TerminalSokobanGame(GameState gameState, TerminalInputEngine inputEngine, TerminalRenderingEngine renderingEngine) { super(gameState); this.inputEngine = inputEngine; this.renderingEngine = renderingEngine; // TODO // Check the number of players if(gameState.getAllPlayerPositions().size() > 2) throw new NotImplementedException(); else { this.renderingEngine.render(gameState); this.renderingEngine.message(\"Undo Quota: \" + gameState.getUndoQuota()); } } public void run() { // TODO this.processAction(this.inputEngine.fetchAction()); this.renderingEngine.render(state); if(!this.shouldStop()) { this.renderingEngine.message(\"Undo Quota: \" + state.getUndoQuota()); this.run(); } }",
        "label": "P"
    },
    "1847": {
        "dataset": "COMP 3021",
        "project": "chngbk",
        "bug_id": "41",
        "T": "void testGameWin() { final var gameState = mock(GameState.class); final var inputEngine = mock(TerminalInputEngine.class); final var renderingEngine = mock(TerminalRenderingEngine.class); when(gameState.isWin()).thenReturn(false, false, false, true); when(inputEngine.fetchAction()) .thenReturn(new InvalidInput(0, \"\")); final var game = new TerminalSokobanGame(gameState, inputEngine, renderingEngine); game.run(); verify(gameState, atLeastOnce()).isWin(); verify(renderingEngine, atLeastOnce()).message(any()); }",
        "C": "public InvalidInput(int initiator, @NotNull String message) { super(initiator); this.message = message; } public TerminalSokobanGame(GameState gameState, TerminalInputEngine inputEngine, TerminalRenderingEngine renderingEngine) { super(gameState); this.inputEngine = inputEngine; this.renderingEngine = renderingEngine; // TODO // Check the number of players if(gameState.getAllPlayerPositions().size() > 2) throw new NotImplementedException(); else { this.renderingEngine.render(gameState); this.renderingEngine.message(\"Undo Quota: \" + gameState.getUndoQuota()); } } public void run() { // TODO this.processAction(this.inputEngine.fetchAction()); this.renderingEngine.render(state); if(!this.shouldStop()) { this.renderingEngine.message(\"Undo Quota: \" + state.getUndoQuota()); this.run(); } }",
        "label": "P"
    },
    "1848": {
        "dataset": "COMP 3021",
        "project": "chngbk",
        "bug_id": "42",
        "T": "void testMoreThanTwoPlayers() { final var gameState = mock(GameState.class); final var inputEngine = mock(TerminalInputEngine.class); final var renderingEngine = mock(TerminalRenderingEngine.class); when(gameState.getAllPlayerPositions()).thenReturn(new HashSet<>(Arrays.asList(Position.of(1, 1), Position.of(1, 2), Position.of(1, 3)))); }",
        "C": "public static @NotNull Position of(int x, int y) { return new Position(x, y); }",
        "label": "F"
    },
    "1849": {
        "dataset": "COMP 3021",
        "project": "hychancm",
        "bug_id": "0",
        "T": "void moveUp() { Position.of(233, 232), new Move.Up(-1).nextPosition(pos) ); }",
        "C": "public static @NotNull Position of(int x, int y) { return new Position(x, y); } public Up(int initiator) { super(initiator); }",
        "label": "P"
    },
    "1850": {
        "dataset": "COMP 3021",
        "project": "hychancm",
        "bug_id": "1",
        "T": "void moveDown() { Position.of(233, 234), new Move.Down(-1).nextPosition(pos) ); }",
        "C": "public static @NotNull Position of(int x, int y) { return new Position(x, y); } public Down(int initiator) { super(initiator); }",
        "label": "P"
    },
    "1851": {
        "dataset": "COMP 3021",
        "project": "hychancm",
        "bug_id": "2",
        "T": "void moveRight() { Position.of(234, 233), new Move.Right(-1).nextPosition(pos) ); }",
        "C": "public static @NotNull Position of(int x, int y) { return new Position(x, y); } public Right(int initiator) { super(initiator); }",
        "label": "P"
    },
    "1852": {
        "dataset": "COMP 3021",
        "project": "hychancm",
        "bug_id": "3",
        "T": "void testExceedingUndoQuota() { final var gameState = mock(GameState.class); when(gameState.getPlayerPositionById(anyInt())).thenReturn(Position.of(0, 0)); when(gameState.getUndoQuota()).thenReturn(Optional.of(0)); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Undo(0)); }",
        "C": "public Undo(int initiator) { super(initiator); }",
        "label": "P"
    },
    "1853": {
        "dataset": "COMP 3021",
        "project": "hychancm",
        "bug_id": "4",
        "T": "void testExit() { final var gameState = mock(GameState.class); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Exit(0)); }",
        "C": "public Exit(int initiator) { super(initiator); }",
        "label": "P"
    },
    "1854": {
        "dataset": "COMP 3021",
        "project": "hychancm",
        "bug_id": "5",
        "T": "void testUndoUnlimited() { final var gameState = mock(GameState.class); when(gameState.getPlayerPositionById(anyInt())).thenReturn(Position.of(0, 0)); when(gameState.getUndoQuota()).thenReturn(Optional.empty()); final var game = new SokobanGameForTesting(gameState); for (int i = 0; i < 10000; i++) { final var result = game.feedActionForProcessing(new Undo(0)); } verify(gameState, times(10000)).undo(); }",
        "C": "public TerminalRenderingEngine(PrintStream outputSteam) { this.outputSteam = outputSteam; } public Undo(int initiator) { super(initiator); }",
        "label": "P"
    },
    "1855": {
        "dataset": "COMP 3021",
        "project": "hychancm",
        "bug_id": "6",
        "T": "void testPushOtherPlayerBox() { String mapText = \"\"\" 233 ###### #AB.@# #b.a.# #@...# ###### \"\"\"; final var testMap = TestHelper.parseGameMap(mapText); final var gameState = spy(new GameState(testMap)); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Move.Down(0)); verify(gameState, never()).move(any(), any()); }",
        "C": "public GameState(@NotNull GameMap map) { // TODO this.Width = map.getMaxWidth(); this.Height = map.getMaxHeight(); this.destinations = map.getDestinations(); this.undolimit = map.getUndoLimit(); this.map = map.map; this.playerids = map.getPlayerIds(); List<Position> boxesPos = new ArrayList<Position>(); for (int i=1; i<=this.Height; i++){ int widthofthisline = this.map[i].length(); for (int j=0; j<widthofthisline; j++){ if(Character.isLowerCase(this.map[i].charAt(j))){ boxesPos.add(new Position(j,i-1)); } } } this.boxesPosition = boxesPos; this.mapHistory.push(this.map.clone()); List<Position> deepCopyPos =new ArrayList<>(); deepCopyPos.addAll(this.boxesPosition); this.boxPosHistory.push(deepCopyPos); } public Down(int initiator) { super(initiator); }",
        "label": "P"
    },
    "1856": {
        "dataset": "COMP 3021",
        "project": "hychancm",
        "bug_id": "7",
        "T": "void testMoveNonExistingPlayer() { String mapText = \"\"\" 233 ###### #A..@# #a...# ##...# ###### \"\"\"; final var testMap = TestHelper.parseGameMap(mapText); final var gameState = spy(new GameState(testMap)); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Move.Down(23)); }",
        "C": "public GameState(@NotNull GameMap map) { // TODO this.Width = map.getMaxWidth(); this.Height = map.getMaxHeight(); this.destinations = map.getDestinations(); this.undolimit = map.getUndoLimit(); this.map = map.map; this.playerids = map.getPlayerIds(); List<Position> boxesPos = new ArrayList<Position>(); for (int i=1; i<=this.Height; i++){ int widthofthisline = this.map[i].length(); for (int j=0; j<widthofthisline; j++){ if(Character.isLowerCase(this.map[i].charAt(j))){ boxesPos.add(new Position(j,i-1)); } } } this.boxesPosition = boxesPos; this.mapHistory.push(this.map.clone()); List<Position> deepCopyPos =new ArrayList<>(); deepCopyPos.addAll(this.boxesPosition); this.boxPosHistory.push(deepCopyPos); } public Down(int initiator) { super(initiator); }",
        "label": "F"
    },
    "1857": {
        "dataset": "COMP 3021",
        "project": "hychancm",
        "bug_id": "8",
        "T": "void testCheckpointWhenNeed() { final var gameState = spy(new GameState(TestHelper.parseGameMap(\"\"\" 233 ###### #.Aa@# #..a@# ###### \"\"\" ))); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Move.Right(0)); verify(gameState, times(1)).checkpoint(); }",
        "C": "public GameState(@NotNull GameMap map) { // TODO this.Width = map.getMaxWidth(); this.Height = map.getMaxHeight(); this.destinations = map.getDestinations(); this.undolimit = map.getUndoLimit(); this.map = map.map; this.playerids = map.getPlayerIds(); List<Position> boxesPos = new ArrayList<Position>(); for (int i=1; i<=this.Height; i++){ int widthofthisline = this.map[i].length(); for (int j=0; j<widthofthisline; j++){ if(Character.isLowerCase(this.map[i].charAt(j))){ boxesPos.add(new Position(j,i-1)); } } } this.boxesPosition = boxesPos; this.mapHistory.push(this.map.clone()); List<Position> deepCopyPos =new ArrayList<>(); deepCopyPos.addAll(this.boxesPosition); this.boxPosHistory.push(deepCopyPos); } public Right(int initiator) { super(initiator); }",
        "label": "P"
    },
    "1858": {
        "dataset": "COMP 3021",
        "project": "hychancm",
        "bug_id": "9",
        "T": "void testPushBoxAgainstWall() { String mapText = \"\"\" 233 ###### #A..@# #a...# ##...# ###### \"\"\"; final var testMap = TestHelper.parseGameMap(mapText); final var gameState = spy(new GameState(testMap)); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Move.Down(0)); verify(gameState, never()).move(any(), any()); }",
        "C": "public GameState(@NotNull GameMap map) { // TODO this.Width = map.getMaxWidth(); this.Height = map.getMaxHeight(); this.destinations = map.getDestinations(); this.undolimit = map.getUndoLimit(); this.map = map.map; this.playerids = map.getPlayerIds(); List<Position> boxesPos = new ArrayList<Position>(); for (int i=1; i<=this.Height; i++){ int widthofthisline = this.map[i].length(); for (int j=0; j<widthofthisline; j++){ if(Character.isLowerCase(this.map[i].charAt(j))){ boxesPos.add(new Position(j,i-1)); } } } this.boxesPosition = boxesPos; this.mapHistory.push(this.map.clone()); List<Position> deepCopyPos =new ArrayList<>(); deepCopyPos.addAll(this.boxesPosition); this.boxPosHistory.push(deepCopyPos); } public Down(int initiator) { super(initiator); }",
        "label": "P"
    },
    "1859": {
        "dataset": "COMP 3021",
        "project": "hychancm",
        "bug_id": "10",
        "T": "void testCheckpointWhenNotNeed() { final var gameState = spy(new GameState(TestHelper.parseGameMap(\"\"\" 233 ###### #A.a@# #..a@# ###### \"\"\" ))); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Move.Right(0)); verify(gameState, never()).checkpoint(); } private static class SokobanGameForTesting extends AbstractSokobanGame { protected SokobanGameForTesting(GameState gameState) { super(gameState); } @Override public void run() { } public ActionResult feedActionForProcessing(Action action) { return processAction(action); } }",
        "C": "public GameState(@NotNull GameMap map) { // TODO this.Width = map.getMaxWidth(); this.Height = map.getMaxHeight(); this.destinations = map.getDestinations(); this.undolimit = map.getUndoLimit(); this.map = map.map; this.playerids = map.getPlayerIds(); List<Position> boxesPos = new ArrayList<Position>(); for (int i=1; i<=this.Height; i++){ int widthofthisline = this.map[i].length(); for (int j=0; j<widthofthisline; j++){ if(Character.isLowerCase(this.map[i].charAt(j))){ boxesPos.add(new Position(j,i-1)); } } } this.boxesPosition = boxesPos; this.mapHistory.push(this.map.clone()); List<Position> deepCopyPos =new ArrayList<>(); deepCopyPos.addAll(this.boxesPosition); this.boxPosHistory.push(deepCopyPos); } public Right(int initiator) { super(initiator); } public void run() { // TODO renderingEngine.message(\"Sokoban game is ready.\"); renderingEngine.render(state); if(state.getUndoQuota().isEmpty()){ renderingEngine.message(\"Unlimited\"); }else { renderingEngine.message(\"Undo Quota: \"+state.getUndoQuota().get()); } while (true){ Action action = inputEngine.fetchAction(); ActionResult actionresult = processAction(action); if(actionresult.getClass().equals(ActionResult.Failed.class)){ renderingEngine.message (((ActionResult.Failed) actionresult).getReason()); } renderingEngine.render(state); if(shouldStop()){ break; } if(state.getUndoQuota().isEmpty()){ renderingEngine.message(\"Unlimited\"); }else { renderingEngine.message(\"Undo Quota: \"+state.getUndoQuota().get()); } } renderingEngine.message(\"Game exits.\"); if(state.isWin()){ renderingEngine.message(\"You win.\"); } return; } protected ActionResult processAction(@NotNull Action action) { // TODO if(action.getClass().equals(Exit.class)){ isExit = true; return new ActionResult.Success(action); } else if (action.getClass().equals(InvalidInput.class)) { return new ActionResult.Failed(action, ((InvalidInput) action).getMessage()); } else if (action.getClass().equals(Undo.class)) { if(state.getUndoQuota().isEmpty() || state.getUndoQuota().get()>0){ state.undo(); return new ActionResult.Success(action); }else { return new ActionResult.Failed(action, \"You have run out of your undo quota.\"); } } else if (action.getClass().equals(Move.Up.class)) { var playerid = action.getInitiator(); var playerPos = state.getPlayerPositionById(playerid); Position positionUp = new Position(playerPos.x(), playerPos.y()-1); var EntityUp = state.getEntity(positionUp); if(EntityUp.getClass().equals(Wall.class)){ return new ActionResult.Failed(action, \"You hit a wall.\"); } else if (EntityUp.getClass().equals(Player.class)) { return new ActionResult.Failed(action, \"You hit another player.\"); } else if (EntityUp.getClass().equals(Box.class)) { var boxid = ((Box) EntityUp).getPlayerId(); if(playerid == boxid){ Position positionUpUp = new Position(playerPos.x(), playerPos.y()-2); var EntityUpUp = state.getEntity(positionUpUp); if(EntityUpUp.getClass().equals(Empty.class)){ state.move(positionUp,positionUpUp); state.move(playerPos,positionUp); state.checkpoint(); return new ActionResult.Success(action); }else { return new ActionResult.Failed(action, \"Failed to push the box.\"); } }else { return new ActionResult.Failed(action, \"You cannot move other players' boxes.\"); } } else if(EntityUp.getClass().equals(Empty.class)){ state.move(playerPos,positionUp); return new ActionResult.Success(action); } } else if (action.getClass().equals(Move.Down.class)) { var playerid = action.getInitiator(); var playerPos = state.getPlayerPositionById(playerid); Position positionDown = new Position(playerPos.x(), playerPos.y()+1); var EntityDown = state.getEntity(positionDown); if(EntityDown.getClass().equals(Wall.class)){ return new ActionResult.Failed(action, \"You hit a wall.\"); } else if (EntityDown.getClass().equals(Player.class)) { return new ActionResult.Failed(action, \"You hit another player.\"); } else if (EntityDown.getClass().equals(Box.class)) { var boxid = ((Box) EntityDown).getPlayerId(); if(playerid == boxid){ Position positionDownDown = new Position(playerPos.x(), playerPos.y()+2); var EntityDownDown = state.getEntity(positionDownDown); if(EntityDownDown.getClass().equals(Empty.class)){ state.move(positionDown,positionDownDown); state.move(playerPos,positionDown); state.checkpoint(); return new ActionResult.Success(action); }else { return new ActionResult.Failed(action, \"Failed to push the box.\"); } }else { return new ActionResult.Failed(action, \"You cannot move other players' boxes.\"); } } else if(EntityDown.getClass().equals(Empty.class)) { state.move(playerPos, positionDown); return new ActionResult.Success(action); } } else if (action.getClass().equals(Move.Left.class)) { var playerid = action.getInitiator(); var playerPos = state.getPlayerPositionById(playerid); Position positionLeft = new Position(playerPos.x()-1, playerPos.y()); var EntityLeft = state.getEntity(positionLeft); if(EntityLeft.getClass().equals(Wall.class)){ return new ActionResult.Failed(action, \"You hit a wall.\"); } else if (EntityLeft.getClass().equals(Player.class)) { return new ActionResult.Failed(action, \"You hit another player.\"); } else if (EntityLeft.getClass().equals(Box.class)) { var boxid = ((Box) EntityLeft).getPlayerId(); if(playerid == boxid){ Position positionLeftLeft = new Position(playerPos.x()-2, playerPos.y()); var EntityLeftLeft = state.getEntity(positionLeftLeft); if(EntityLeftLeft.getClass().equals(Empty.class)){ state.move(positionLeft,positionLeftLeft); state.move(playerPos,positionLeft); state.checkpoint(); return new ActionResult.Success(action); }else { return new ActionResult.Failed(action, \"Failed to push the box.\"); } }else { return new ActionResult.Failed(action, \"You cannot move other players' boxes.\"); } } else if(EntityLeft.getClass().equals(Empty.class)) { state.move(playerPos, positionLeft); return new ActionResult.Success(action); } } else if (action.getClass().equals(Move.Right.class)) { var playerid = action.getInitiator(); var playerPos = state.getPlayerPositionById(playerid); Position positionRight = new Position(playerPos.x()+1, playerPos.y()); var EntityRight = state.getEntity(positionRight); if(EntityRight.getClass().equals(Wall.class)){ return new ActionResult.Failed(action, \"You hit a wall.\"); } else if (EntityRight.getClass().equals(Player.class)) { return new ActionResult.Failed(action, \"You hit another player.\"); } else if (EntityRight.getClass().equals(Box.class)) { var boxid = ((Box) EntityRight).getPlayerId(); if(playerid == boxid){ Position positionRightRight = new Position(playerPos.x()+2, playerPos.y()); var EntityRightRight = state.getEntity(positionRightRight); if(EntityRightRight.getClass().equals(Empty.class)){ state.move(positionRight,positionRightRight); state.move(playerPos,positionRight); state.checkpoint(); return new ActionResult.Success(action); }else { return new ActionResult.Failed(action, \"Failed to push the box.\"); } }else { return new ActionResult.Failed(action, \"You cannot move other players' boxes.\"); } } else if(EntityRight.getClass().equals(Empty.class)) { state.move(playerPos, positionRight); return new ActionResult.Success(action); } } return null; }",
        "label": "P"
    },
    "1860": {
        "dataset": "COMP 3021",
        "project": "hychancm",
        "bug_id": "11",
        "T": "void testHitAnotherPlayer() { String mapText = \"\"\" 233 ###### #A..@# #B...# #ab.@# ###### \"\"\"; final var testMap = TestHelper.parseGameMap(mapText); final var gameState = spy(new GameState(testMap)); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Move.Down(0)); verify(gameState, never()).move(any(), any()); }",
        "C": "public GameState(@NotNull GameMap map) { // TODO this.Width = map.getMaxWidth(); this.Height = map.getMaxHeight(); this.destinations = map.getDestinations(); this.undolimit = map.getUndoLimit(); this.map = map.map; this.playerids = map.getPlayerIds(); List<Position> boxesPos = new ArrayList<Position>(); for (int i=1; i<=this.Height; i++){ int widthofthisline = this.map[i].length(); for (int j=0; j<widthofthisline; j++){ if(Character.isLowerCase(this.map[i].charAt(j))){ boxesPos.add(new Position(j,i-1)); } } } this.boxesPosition = boxesPos; this.mapHistory.push(this.map.clone()); List<Position> deepCopyPos =new ArrayList<>(); deepCopyPos.addAll(this.boxesPosition); this.boxPosHistory.push(deepCopyPos); } public Down(int initiator) { super(initiator); }",
        "label": "P"
    },
    "1861": {
        "dataset": "COMP 3021",
        "project": "hychancm",
        "bug_id": "12",
        "T": "void testUndoWithinQuota() { final var gameState = mock(GameState.class); when(gameState.getPlayerPositionById(anyInt())).thenReturn(Position.of(0, 0)); when(gameState.getUndoQuota()).thenReturn(Optional.of(1)); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Undo(0)); verify(gameState, times(1)).undo(); }",
        "C": "public Undo(int initiator) { super(initiator); }",
        "label": "P"
    },
    "1862": {
        "dataset": "COMP 3021",
        "project": "hychancm",
        "bug_id": "13",
        "T": "void testInvalidInput() { final var game = new SokobanGameForTesting(mock(GameState.class)); final var message = String.valueOf(new Random().nextLong()); final var action = new InvalidInput(-1, message); final var result = game.feedActionForProcessing(action); }",
        "C": "public InvalidInput(int initiator, @NotNull String message) { super(initiator); this.message = message; }",
        "label": "P"
    },
    "1863": {
        "dataset": "COMP 3021",
        "project": "hychancm",
        "bug_id": "14",
        "T": "void testUndoLimitParsing() { final var gameMap = TestHelper.parseGameMap(rectangularMap); }",
        "C": "",
        "label": "P"
    },
    "1864": {
        "dataset": "COMP 3021",
        "project": "hychancm",
        "bug_id": "15",
        "T": "void testWidthForNonRectangularMap() { final var gameMap = TestHelper.parseGameMap(nonRectangularMap); }",
        "C": "",
        "label": "P"
    },
    "1865": {
        "dataset": "COMP 3021",
        "project": "hychancm",
        "bug_id": "16",
        "T": "void testTwoPlayersMap() { final var twoPlayersMap = \"\"\" 233 ###### #A..@# #..B@# #....# #.a..# #..b.# ###### \"\"\"; final var gameMap = TestHelper.parseGameMap(twoPlayersMap); final var playerIds = gameMap.getPlayerIds(); final var expectedIds = new HashSet<Integer>(); expectedIds.add(0); expectedIds.add(1); }",
        "C": "public Set<Integer> getPlayerIds() { // TODO Set<Integer> playerids = new HashSet<Integer>(); for (int i=1; i<=this.getMaxHeight(); i++){ int widthofthisline = map[i].length(); for (int j=0; j<widthofthisline; j++){ if (Character.isUpperCase(map[i].charAt(j))) { playerids.add((int)map[i].charAt(j)-'A'); } } } return playerids; }",
        "label": "P"
    },
    "1866": {
        "dataset": "COMP 3021",
        "project": "hychancm",
        "bug_id": "17",
        "T": "void testMapWithoutPlayer() { final var invalidMap = \"\"\" 233 ### #.# ### \"\"\"; } // @Tag(TestKind.HIDDEN) // @Test // void testUnmatchedPlayersAndBoxes() { // final var invalidMap = \"\"\" // 233 // ###### // #A..@# // #...@# // #a.b@# // #.a.@# // #..a.# // ###### // \"\"\"; // assertThrowsExactly(IllegalArgumentException.class, () -> TestHelper.parseGameMap(invalidMap)); // }",
        "C": "public TerminalRenderingEngine(PrintStream outputSteam) { this.outputSteam = outputSteam; }",
        "label": "P"
    },
    "1867": {
        "dataset": "COMP 3021",
        "project": "hychancm",
        "bug_id": "18",
        "T": "void testManyPlayersMap() { final var manyPlayersMap = \"\"\" 233 ###### #A.P@@# #vCB@@# #.cpD@# #Ga.d@# #g.bV@# ###### \"\"\"; final var gameMap = TestHelper.parseGameMap(manyPlayersMap); final var playerIds = gameMap.getPlayerIds(); final var expectedIds = new HashSet<>(Arrays.asList( 0, 'P' - 'A', 'C' - 'A', 'B' - 'A', 'D' - 'A', 'G' - 'A', 'V' - 'A' )); }",
        "C": "public Set<Integer> getPlayerIds() { // TODO Set<Integer> playerids = new HashSet<Integer>(); for (int i=1; i<=this.getMaxHeight(); i++){ int widthofthisline = map[i].length(); for (int j=0; j<widthofthisline; j++){ if (Character.isUpperCase(map[i].charAt(j))) { playerids.add((int)map[i].charAt(j)-'A'); } } } return playerids; }",
        "label": "P"
    },
    "1868": {
        "dataset": "COMP 3021",
        "project": "hychancm",
        "bug_id": "19",
        "T": "void testHeightForNonRectangularMap() { final var gameMap = TestHelper.parseGameMap(nonRectangularMap); }",
        "C": "",
        "label": "P"
    },
    "1869": {
        "dataset": "COMP 3021",
        "project": "hychancm",
        "bug_id": "20",
        "T": "void testDuplicatedPlayers() { final var invalidMap = \"\"\" 233 ###### #A..@# #..A@# #....# #.a..# #..b.# ###### \"\"\"; }",
        "C": "",
        "label": "P"
    },
    "1870": {
        "dataset": "COMP 3021",
        "project": "hychancm",
        "bug_id": "21",
        "T": "void testParseMapWithoutUndoLimit() { final var invalidMap = String.join(\"\\n\", rectangularMap.lines().skip(1).toList()); }",
        "C": "",
        "label": "P"
    },
    "1871": {
        "dataset": "COMP 3021",
        "project": "hychancm",
        "bug_id": "22",
        "T": "void testInsufficientDestinations() { final var invalidMap = \"\"\" 233 ###### #A..@# #...@# #a...# #.a..# #..a.# ###### \"\"\"; }",
        "C": "",
        "label": "P"
    },
    "1872": {
        "dataset": "COMP 3021",
        "project": "hychancm",
        "bug_id": "23",
        "T": "void testSuperLargeMap() { try { new GameMap(Integer.MAX_VALUE, Integer.MAX_VALUE, Collections.emptySet(), 0); } catch (OutOfMemoryError e) { throw new RuntimeException(e); } }); }",
        "C": "public GameMap(int maxWidth, int maxHeight, Set<Position> destinations, int undoLimit) { // TODO this.Width = maxWidth; this.Height = maxHeight; this.destinations = destinations; this.undolimit = undoLimit; } /** * Parses the map from a string representation. * The first line is undo limit. * Starting from the second line, the game map is represented as follows, * <li># represents a {@link Wall}</li> * <li>@ represents a box destination.</li> * <li>Any upper-case letter represents a {@link Player}.</li> * <li> * Any lower-case letter represents a {@link Box} that is only movable by the player with the corresponding upper-case letter. * For instance, box \"a\" can only be moved by player \"A\" and not movable by player \"B\". * </li> * <li>. represents an {@link Empty} position in the map, meaning there is no player or box currently at this position.</li> * <p> * Notes: * <li> * There can be at most 26 players. * All implementations of classes in the hk.ust.comp3021.game package should support up to 26 players. * </li> * <li> * For simplicity, we assume the given map is bounded with a closed boundary. * There is no need to check this point. * </li> * <li> * Example maps can be found in \"src/main/resources\". * </li> * * @param mapText The string representation. * @return The parsed GameMap object. * @throws IllegalArgumentException if undo limit is negative but not -1. * @throws IllegalArgumentException if there are multiple same upper-case letters, i.e., one player can only exist at one position. * @throws IllegalArgumentException if there are no players in the map. * @throws IllegalArgumentException if the number of boxes is not equal to the number of box destinations. * @throws IllegalArgumentException if there are boxes whose {@link Box#getPlayerId()} public TerminalRenderingEngine(PrintStream outputSteam) { this.outputSteam = outputSteam; }",
        "label": "P"
    },
    "1873": {
        "dataset": "COMP 3021",
        "project": "hychancm",
        "bug_id": "24",
        "T": "void testInvalidUndoLimit() { final var invalidMap = \"\"\" -233 ###### #A..@# #...@# #a.b@# #.a.@# #..a.# ###### \"\"\"; }",
        "C": "",
        "label": "P"
    },
    "1874": {
        "dataset": "COMP 3021",
        "project": "hychancm",
        "bug_id": "25",
        "T": "void testEmptyMap() { final var invalidMap = \"\"; }",
        "C": "",
        "label": "P"
    },
    "1875": {
        "dataset": "COMP 3021",
        "project": "hychancm",
        "bug_id": "26",
        "T": "void testMove(String input, String name, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); } private InputStream fixValueStream(String content) { final var bytes = content.getBytes(StandardCharsets.UTF_8); return new ByteArrayInputStream(bytes); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine(); // TODO if(inputLine.equalsIgnoreCase(\"W\")){ return new Move.Up(0); } else if (inputLine.equalsIgnoreCase(\"A\")) { return new Move.Left(0); } else if (inputLine.equalsIgnoreCase(\"S\")) { return new Move.Down(0); } else if (inputLine.equalsIgnoreCase(\"D\")) { return new Move.Right(0); } else if (inputLine.equalsIgnoreCase(\"H\")) { return new Move.Left(1); } else if (inputLine.equalsIgnoreCase(\"J\")) { return new Move.Down(1); } else if (inputLine.equalsIgnoreCase(\"K\")) { return new Move.Up(1); } else if (inputLine.equalsIgnoreCase(\"L\")) { return new Move.Right(1); } else if (inputLine.equalsIgnoreCase(\"U\")) { return new Undo(-1); } else if (inputLine.equalsIgnoreCase(\"EXIT\")) { return new Exit(-1); } else { return new InvalidInput(-1,\"Invalid Input.\"); } }",
        "label": "P"
    },
    "1876": {
        "dataset": "COMP 3021",
        "project": "hychancm",
        "bug_id": "27",
        "T": "void testMove(String input, String name, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); } private InputStream fixValueStream(String content) { final var bytes = content.getBytes(StandardCharsets.UTF_8); return new ByteArrayInputStream(bytes); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine(); // TODO if(inputLine.equalsIgnoreCase(\"W\")){ return new Move.Up(0); } else if (inputLine.equalsIgnoreCase(\"A\")) { return new Move.Left(0); } else if (inputLine.equalsIgnoreCase(\"S\")) { return new Move.Down(0); } else if (inputLine.equalsIgnoreCase(\"D\")) { return new Move.Right(0); } else if (inputLine.equalsIgnoreCase(\"H\")) { return new Move.Left(1); } else if (inputLine.equalsIgnoreCase(\"J\")) { return new Move.Down(1); } else if (inputLine.equalsIgnoreCase(\"K\")) { return new Move.Up(1); } else if (inputLine.equalsIgnoreCase(\"L\")) { return new Move.Right(1); } else if (inputLine.equalsIgnoreCase(\"U\")) { return new Undo(-1); } else if (inputLine.equalsIgnoreCase(\"EXIT\")) { return new Exit(-1); } else { return new InvalidInput(-1,\"Invalid Input.\"); } }",
        "label": "P"
    },
    "1877": {
        "dataset": "COMP 3021",
        "project": "hychancm",
        "bug_id": "28",
        "T": "void testMove(String input, String name, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); } private InputStream fixValueStream(String content) { final var bytes = content.getBytes(StandardCharsets.UTF_8); return new ByteArrayInputStream(bytes); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine(); // TODO if(inputLine.equalsIgnoreCase(\"W\")){ return new Move.Up(0); } else if (inputLine.equalsIgnoreCase(\"A\")) { return new Move.Left(0); } else if (inputLine.equalsIgnoreCase(\"S\")) { return new Move.Down(0); } else if (inputLine.equalsIgnoreCase(\"D\")) { return new Move.Right(0); } else if (inputLine.equalsIgnoreCase(\"H\")) { return new Move.Left(1); } else if (inputLine.equalsIgnoreCase(\"J\")) { return new Move.Down(1); } else if (inputLine.equalsIgnoreCase(\"K\")) { return new Move.Up(1); } else if (inputLine.equalsIgnoreCase(\"L\")) { return new Move.Right(1); } else if (inputLine.equalsIgnoreCase(\"U\")) { return new Undo(-1); } else if (inputLine.equalsIgnoreCase(\"EXIT\")) { return new Exit(-1); } else { return new InvalidInput(-1,\"Invalid Input.\"); } }",
        "label": "P"
    },
    "1878": {
        "dataset": "COMP 3021",
        "project": "hychancm",
        "bug_id": "29",
        "T": "void testMove(String input, String name, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); } private InputStream fixValueStream(String content) { final var bytes = content.getBytes(StandardCharsets.UTF_8); return new ByteArrayInputStream(bytes); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine(); // TODO if(inputLine.equalsIgnoreCase(\"W\")){ return new Move.Up(0); } else if (inputLine.equalsIgnoreCase(\"A\")) { return new Move.Left(0); } else if (inputLine.equalsIgnoreCase(\"S\")) { return new Move.Down(0); } else if (inputLine.equalsIgnoreCase(\"D\")) { return new Move.Right(0); } else if (inputLine.equalsIgnoreCase(\"H\")) { return new Move.Left(1); } else if (inputLine.equalsIgnoreCase(\"J\")) { return new Move.Down(1); } else if (inputLine.equalsIgnoreCase(\"K\")) { return new Move.Up(1); } else if (inputLine.equalsIgnoreCase(\"L\")) { return new Move.Right(1); } else if (inputLine.equalsIgnoreCase(\"U\")) { return new Undo(-1); } else if (inputLine.equalsIgnoreCase(\"EXIT\")) { return new Exit(-1); } else { return new InvalidInput(-1,\"Invalid Input.\"); } }",
        "label": "P"
    },
    "1879": {
        "dataset": "COMP 3021",
        "project": "hychancm",
        "bug_id": "30",
        "T": "void testMove(String input, String name, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); } private InputStream fixValueStream(String content) { final var bytes = content.getBytes(StandardCharsets.UTF_8); return new ByteArrayInputStream(bytes); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine(); // TODO if(inputLine.equalsIgnoreCase(\"W\")){ return new Move.Up(0); } else if (inputLine.equalsIgnoreCase(\"A\")) { return new Move.Left(0); } else if (inputLine.equalsIgnoreCase(\"S\")) { return new Move.Down(0); } else if (inputLine.equalsIgnoreCase(\"D\")) { return new Move.Right(0); } else if (inputLine.equalsIgnoreCase(\"H\")) { return new Move.Left(1); } else if (inputLine.equalsIgnoreCase(\"J\")) { return new Move.Down(1); } else if (inputLine.equalsIgnoreCase(\"K\")) { return new Move.Up(1); } else if (inputLine.equalsIgnoreCase(\"L\")) { return new Move.Right(1); } else if (inputLine.equalsIgnoreCase(\"U\")) { return new Undo(-1); } else if (inputLine.equalsIgnoreCase(\"EXIT\")) { return new Exit(-1); } else { return new InvalidInput(-1,\"Invalid Input.\"); } }",
        "label": "P"
    },
    "1880": {
        "dataset": "COMP 3021",
        "project": "hychancm",
        "bug_id": "31",
        "T": "void testMove(String input, String name, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); } private InputStream fixValueStream(String content) { final var bytes = content.getBytes(StandardCharsets.UTF_8); return new ByteArrayInputStream(bytes); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine(); // TODO if(inputLine.equalsIgnoreCase(\"W\")){ return new Move.Up(0); } else if (inputLine.equalsIgnoreCase(\"A\")) { return new Move.Left(0); } else if (inputLine.equalsIgnoreCase(\"S\")) { return new Move.Down(0); } else if (inputLine.equalsIgnoreCase(\"D\")) { return new Move.Right(0); } else if (inputLine.equalsIgnoreCase(\"H\")) { return new Move.Left(1); } else if (inputLine.equalsIgnoreCase(\"J\")) { return new Move.Down(1); } else if (inputLine.equalsIgnoreCase(\"K\")) { return new Move.Up(1); } else if (inputLine.equalsIgnoreCase(\"L\")) { return new Move.Right(1); } else if (inputLine.equalsIgnoreCase(\"U\")) { return new Undo(-1); } else if (inputLine.equalsIgnoreCase(\"EXIT\")) { return new Exit(-1); } else { return new InvalidInput(-1,\"Invalid Input.\"); } }",
        "label": "P"
    },
    "1881": {
        "dataset": "COMP 3021",
        "project": "hychancm",
        "bug_id": "32",
        "T": "void testMove(String input, String name, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); } private InputStream fixValueStream(String content) { final var bytes = content.getBytes(StandardCharsets.UTF_8); return new ByteArrayInputStream(bytes); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine(); // TODO if(inputLine.equalsIgnoreCase(\"W\")){ return new Move.Up(0); } else if (inputLine.equalsIgnoreCase(\"A\")) { return new Move.Left(0); } else if (inputLine.equalsIgnoreCase(\"S\")) { return new Move.Down(0); } else if (inputLine.equalsIgnoreCase(\"D\")) { return new Move.Right(0); } else if (inputLine.equalsIgnoreCase(\"H\")) { return new Move.Left(1); } else if (inputLine.equalsIgnoreCase(\"J\")) { return new Move.Down(1); } else if (inputLine.equalsIgnoreCase(\"K\")) { return new Move.Up(1); } else if (inputLine.equalsIgnoreCase(\"L\")) { return new Move.Right(1); } else if (inputLine.equalsIgnoreCase(\"U\")) { return new Undo(-1); } else if (inputLine.equalsIgnoreCase(\"EXIT\")) { return new Exit(-1); } else { return new InvalidInput(-1,\"Invalid Input.\"); } }",
        "label": "P"
    },
    "1882": {
        "dataset": "COMP 3021",
        "project": "hychancm",
        "bug_id": "33",
        "T": "void testMove(String input, String name, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); } private InputStream fixValueStream(String content) { final var bytes = content.getBytes(StandardCharsets.UTF_8); return new ByteArrayInputStream(bytes); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine(); // TODO if(inputLine.equalsIgnoreCase(\"W\")){ return new Move.Up(0); } else if (inputLine.equalsIgnoreCase(\"A\")) { return new Move.Left(0); } else if (inputLine.equalsIgnoreCase(\"S\")) { return new Move.Down(0); } else if (inputLine.equalsIgnoreCase(\"D\")) { return new Move.Right(0); } else if (inputLine.equalsIgnoreCase(\"H\")) { return new Move.Left(1); } else if (inputLine.equalsIgnoreCase(\"J\")) { return new Move.Down(1); } else if (inputLine.equalsIgnoreCase(\"K\")) { return new Move.Up(1); } else if (inputLine.equalsIgnoreCase(\"L\")) { return new Move.Right(1); } else if (inputLine.equalsIgnoreCase(\"U\")) { return new Undo(-1); } else if (inputLine.equalsIgnoreCase(\"EXIT\")) { return new Exit(-1); } else { return new InvalidInput(-1,\"Invalid Input.\"); } }",
        "label": "P"
    },
    "1883": {
        "dataset": "COMP 3021",
        "project": "hychancm",
        "bug_id": "34",
        "T": "void testUndo(String input, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine(); // TODO if(inputLine.equalsIgnoreCase(\"W\")){ return new Move.Up(0); } else if (inputLine.equalsIgnoreCase(\"A\")) { return new Move.Left(0); } else if (inputLine.equalsIgnoreCase(\"S\")) { return new Move.Down(0); } else if (inputLine.equalsIgnoreCase(\"D\")) { return new Move.Right(0); } else if (inputLine.equalsIgnoreCase(\"H\")) { return new Move.Left(1); } else if (inputLine.equalsIgnoreCase(\"J\")) { return new Move.Down(1); } else if (inputLine.equalsIgnoreCase(\"K\")) { return new Move.Up(1); } else if (inputLine.equalsIgnoreCase(\"L\")) { return new Move.Right(1); } else if (inputLine.equalsIgnoreCase(\"U\")) { return new Undo(-1); } else if (inputLine.equalsIgnoreCase(\"EXIT\")) { return new Exit(-1); } else { return new InvalidInput(-1,\"Invalid Input.\"); } }",
        "label": "P"
    },
    "1884": {
        "dataset": "COMP 3021",
        "project": "hychancm",
        "bug_id": "35",
        "T": "void testInvalidInput() { final var inputStream = fixValueStream(\"blah blah\"); final var inputEngine = new TerminalInputEngine(inputStream); final var action = inputEngine.fetchAction(); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine(); // TODO if(inputLine.equalsIgnoreCase(\"W\")){ return new Move.Up(0); } else if (inputLine.equalsIgnoreCase(\"A\")) { return new Move.Left(0); } else if (inputLine.equalsIgnoreCase(\"S\")) { return new Move.Down(0); } else if (inputLine.equalsIgnoreCase(\"D\")) { return new Move.Right(0); } else if (inputLine.equalsIgnoreCase(\"H\")) { return new Move.Left(1); } else if (inputLine.equalsIgnoreCase(\"J\")) { return new Move.Down(1); } else if (inputLine.equalsIgnoreCase(\"K\")) { return new Move.Up(1); } else if (inputLine.equalsIgnoreCase(\"L\")) { return new Move.Right(1); } else if (inputLine.equalsIgnoreCase(\"U\")) { return new Undo(-1); } else if (inputLine.equalsIgnoreCase(\"EXIT\")) { return new Exit(-1); } else { return new InvalidInput(-1,\"Invalid Input.\"); } }",
        "label": "P"
    },
    "1885": {
        "dataset": "COMP 3021",
        "project": "hychancm",
        "bug_id": "36",
        "T": "void testUndoWhenThereIsNoMove() { final var gameState = new GameState(TestHelper.parseGameMap(\"\"\" 233 ###### #A.a@# #..a@# ###### \"\"\" )); gameState.undo(); } private Entity generateEntity(int key) { return switch (key % 4) { case 0 -> new Box(0); case 1 -> new Empty(); case 2 -> new Player(0); case 3 -> new Wall(); default -> throw new ShouldNotReachException(); }; }",
        "C": "public GameState(@NotNull GameMap map) { // TODO this.Width = map.getMaxWidth(); this.Height = map.getMaxHeight(); this.destinations = map.getDestinations(); this.undolimit = map.getUndoLimit(); this.map = map.map; this.playerids = map.getPlayerIds(); List<Position> boxesPos = new ArrayList<Position>(); for (int i=1; i<=this.Height; i++){ int widthofthisline = this.map[i].length(); for (int j=0; j<widthofthisline; j++){ if(Character.isLowerCase(this.map[i].charAt(j))){ boxesPos.add(new Position(j,i-1)); } } } this.boxesPosition = boxesPos; this.mapHistory.push(this.map.clone()); List<Position> deepCopyPos =new ArrayList<>(); deepCopyPos.addAll(this.boxesPosition); this.boxPosHistory.push(deepCopyPos); } public void undo() { // TODO if(this.undolimit.isEmpty() || this.undolimit.get()>0) { if (this.mapHistory.size() == 1) { this.map = mapHistory.peek().clone(); this.boxesPosition.clear(); this.boxesPosition.addAll(boxPosHistory.peek()); return; } else if (this.mapHistory.size() > 1) { this.mapHistory.pop(); this.boxPosHistory.pop(); this.map = mapHistory.peek().clone(); this.boxesPosition.clear(); this.boxesPosition.addAll(boxPosHistory.peek()); if(!this.undolimit.isEmpty()) { this.undolimit = Optional.of(this.undolimit.get() - 1); } } } return; } /** * Get the maximum width of the game map. * This should be the same as that in {@link GameMap} public TerminalRenderingEngine(PrintStream outputSteam) { this.outputSteam = outputSteam; } public Box(int playerId) { this.playerId = playerId; } public Player(int id) { this.id = id; } public ShouldNotReachException() { super(\"This branch should not be reached.\"); }",
        "label": "P"
    },
    "1886": {
        "dataset": "COMP 3021",
        "project": "hychancm",
        "bug_id": "37",
        "T": "void testGetUndoUnlimited() { final var gameState = new GameState(TestHelper.parseGameMap(\"\"\" -1 ###### #.Aa@# #..a@# ###### \"\"\" )); }",
        "C": "public GameState(@NotNull GameMap map) { // TODO this.Width = map.getMaxWidth(); this.Height = map.getMaxHeight(); this.destinations = map.getDestinations(); this.undolimit = map.getUndoLimit(); this.map = map.map; this.playerids = map.getPlayerIds(); List<Position> boxesPos = new ArrayList<Position>(); for (int i=1; i<=this.Height; i++){ int widthofthisline = this.map[i].length(); for (int j=0; j<widthofthisline; j++){ if(Character.isLowerCase(this.map[i].charAt(j))){ boxesPos.add(new Position(j,i-1)); } } } this.boxesPosition = boxesPos; this.mapHistory.push(this.map.clone()); List<Position> deepCopyPos =new ArrayList<>(); deepCopyPos.addAll(this.boxesPosition); this.boxPosHistory.push(deepCopyPos); }",
        "label": "P"
    },
    "1887": {
        "dataset": "COMP 3021",
        "project": "hychancm",
        "bug_id": "38",
        "T": "void testMapCopying() { final var maxWidth = 2333; final var maxHeight = 2333; final var random = new Random(); final var randomEntities = Stream.generate(() -> Position.of(random.nextInt(maxWidth), random.nextInt(maxHeight))) .distinct() .limit(100) .collect(Collectors.toMap(Function.identity(), it -> generateEntity(it.x()))); final var firstPos = randomEntities.keySet().stream().findFirst(); final var gameMap = new GameMap(maxWidth, maxHeight, Collections.singleton(firstPos.get()), 233); randomEntities.forEach(gameMap::putEntity); final var gameState = new GameState(gameMap); final var randomPosition = randomEntities.keySet().stream().findAny(); gameMap.putEntity(randomPosition.get(), new Empty()); randomEntities.forEach((p, e) -> assertEquals(e, gameState.getEntity(p))); }",
        "C": "public static @NotNull Position of(int x, int y) { return new Position(x, y); } public GameMap(int maxWidth, int maxHeight, Set<Position> destinations, int undoLimit) { // TODO this.Width = maxWidth; this.Height = maxHeight; this.destinations = destinations; this.undolimit = undoLimit; } /** * Parses the map from a string representation. * The first line is undo limit. * Starting from the second line, the game map is represented as follows, * <li># represents a {@link Wall}</li> * <li>@ represents a box destination.</li> * <li>Any upper-case letter represents a {@link Player}.</li> * <li> * Any lower-case letter represents a {@link Box} that is only movable by the player with the corresponding upper-case letter. * For instance, box \"a\" can only be moved by player \"A\" and not movable by player \"B\". * </li> * <li>. represents an {@link Empty} position in the map, meaning there is no player or box currently at this position.</li> * <p> * Notes: * <li> * There can be at most 26 players. * All implementations of classes in the hk.ust.comp3021.game package should support up to 26 players. * </li> * <li> * For simplicity, we assume the given map is bounded with a closed boundary. * There is no need to check this point. * </li> * <li> * Example maps can be found in \"src/main/resources\". * </li> * * @param mapText The string representation. * @return The parsed GameMap object. * @throws IllegalArgumentException if undo limit is negative but not -1. * @throws IllegalArgumentException if there are multiple same upper-case letters, i.e., one player can only exist at one position. * @throws IllegalArgumentException if there are no players in the map. * @throws IllegalArgumentException if the number of boxes is not equal to the number of box destinations. * @throws IllegalArgumentException if there are boxes whose {@link Box#getPlayerId()} public GameState(@NotNull GameMap map) { // TODO this.Width = map.getMaxWidth(); this.Height = map.getMaxHeight(); this.destinations = map.getDestinations(); this.undolimit = map.getUndoLimit(); this.map = map.map; this.playerids = map.getPlayerIds(); List<Position> boxesPos = new ArrayList<Position>(); for (int i=1; i<=this.Height; i++){ int widthofthisline = this.map[i].length(); for (int j=0; j<widthofthisline; j++){ if(Character.isLowerCase(this.map[i].charAt(j))){ boxesPos.add(new Position(j,i-1)); } } } this.boxesPosition = boxesPos; this.mapHistory.push(this.map.clone()); List<Position> deepCopyPos =new ArrayList<>(); deepCopyPos.addAll(this.boxesPosition); this.boxPosHistory.push(deepCopyPos); } public void putEntity(Position position, Entity entity) { // TODO if(entity.getClass().equals(new Empty().getClass())){ var line = map[position.y()+1]; char[] chars = line.toCharArray(); chars[position.x()] = '.'; map[position.y()+1] = String.valueOf(chars); } else if (entity.getClass().equals(new Wall().getClass())) { var line = map[position.y()+1]; char[] chars = line.toCharArray(); chars[position.x()] = '#'; map[position.y()+1] = String.valueOf(chars); } else if (entity.getClass().equals(new Player(0).getClass())) { var player = (Player)entity; char symbol = (char) (player.getId()+'A'); var line = map[position.y()+1]; char[] chars = line.toCharArray(); chars[position.x()] = symbol; map[position.y()+1] = String.valueOf(chars); } else if (entity.getClass().equals(new Box(0).getClass())) { var box = (Box)entity; char symbol = (char)(box.getPlayerId()+'a'); var line = map[position.y()+1]; char[] chars = line.toCharArray(); chars[position.x()] = symbol; map[position.y()+1] = String.valueOf(chars); } } public @Nullable Entity getEntity(@NotNull Position position) { // TODO if(this.getMapMaxHeight()<= position.y()||this.map[position.y()+1].length()<=position.x()){ return null; } var entity = this.map[position.y()+1].charAt(position.x()); if(entity == '#'){ return new Wall(); } else if (Character.isUpperCase(entity)) { return new Player((int)entity-'A'); } else if (Character.isLowerCase(entity)) { return new Box((int)entity-'a'); } else if(entity == '.' || entity=='@'){ return new Empty(); } else { return null; } } /** * Get all box destination positions as a set in the game map. * This should be the same as that in {@link GameMap}",
        "label": "F"
    },
    "1888": {
        "dataset": "COMP 3021",
        "project": "hychancm",
        "bug_id": "39",
        "T": "void testUndoWhenThereIsMoveButNoCheckpoint() { final var gameState = new GameState(TestHelper.parseGameMap(\"\"\" 233 ###### #A.a@# #..a@# ###### \"\"\" )); gameState.move(Position.of(1, 1), Position.of(2, 1)); gameState.undo(); }",
        "C": "public GameState(@NotNull GameMap map) { // TODO this.Width = map.getMaxWidth(); this.Height = map.getMaxHeight(); this.destinations = map.getDestinations(); this.undolimit = map.getUndoLimit(); this.map = map.map; this.playerids = map.getPlayerIds(); List<Position> boxesPos = new ArrayList<Position>(); for (int i=1; i<=this.Height; i++){ int widthofthisline = this.map[i].length(); for (int j=0; j<widthofthisline; j++){ if(Character.isLowerCase(this.map[i].charAt(j))){ boxesPos.add(new Position(j,i-1)); } } } this.boxesPosition = boxesPos; this.mapHistory.push(this.map.clone()); List<Position> deepCopyPos =new ArrayList<>(); deepCopyPos.addAll(this.boxesPosition); this.boxPosHistory.push(deepCopyPos); } public void move(Position from, Position to) { // TODO Entity entityToMove = this.getEntity(from); switch (entityToMove){ case Player p-> { int pid = p.getId(); if (destinations.contains(from)) { var line = map[from.y() + 1]; char[] chars = line.toCharArray(); chars[from.x()] = '@'; map[from.y() + 1] = String.valueOf(chars); } else { var line = map[from.y() + 1]; char[] chars = line.toCharArray(); chars[from.x()] = '.'; map[from.y() + 1] = String.valueOf(chars); } var line = map[to.y() + 1]; char[] chars = line.toCharArray(); chars[to.x()] = (char) (pid+'A'); map[to.y() + 1] = String.valueOf(chars); } case Box b->{ int bid = b.getPlayerId(); boxesPosition.remove(from); boxesPosition.add(to); if (destinations.contains(from)) { var line = map[from.y() + 1]; char[] chars = line.toCharArray(); chars[from.x()] = '@'; map[from.y() + 1] = String.valueOf(chars); } else { var line = map[from.y() + 1]; char[] chars = line.toCharArray(); chars[from.x()] = '.'; map[from.y() + 1] = String.valueOf(chars); } var line = map[to.y() + 1]; char[] chars = line.toCharArray(); chars[to.x()] = (char) (bid+'a'); map[to.y() + 1] = String.valueOf(chars); } default -> {return;} } } /** * Record a checkpoint of the game state, including: * <li>All current positions of entities in the game map.</li> * <li>Current undo quota</li> * <p> * Checkpoint is used in {@link GameState#undo()} public static @NotNull Position of(int x, int y) { return new Position(x, y); } public void undo() { // TODO if(this.undolimit.isEmpty() || this.undolimit.get()>0) { if (this.mapHistory.size() == 1) { this.map = mapHistory.peek().clone(); this.boxesPosition.clear(); this.boxesPosition.addAll(boxPosHistory.peek()); return; } else if (this.mapHistory.size() > 1) { this.mapHistory.pop(); this.boxPosHistory.pop(); this.map = mapHistory.peek().clone(); this.boxesPosition.clear(); this.boxesPosition.addAll(boxPosHistory.peek()); if(!this.undolimit.isEmpty()) { this.undolimit = Optional.of(this.undolimit.get() - 1); } } } return; } /** * Get the maximum width of the game map. * This should be the same as that in {@link GameMap}",
        "label": "P"
    },
    "1889": {
        "dataset": "COMP 3021",
        "project": "hychancm",
        "bug_id": "40",
        "T": "void testGameExit() { final var gameState = mock(GameState.class); final var inputEngine = mock(TerminalInputEngine.class); final var renderingEngine = mock(TerminalRenderingEngine.class); when(gameState.isWin()).thenReturn(false, false, false); when(inputEngine.fetchAction()) .thenReturn(new InvalidInput(0, \"\"), new InvalidInput(0, \"\"), new Exit(0)); final var game = new TerminalSokobanGame(gameState, inputEngine, renderingEngine); game.run(); verify(renderingEngine, atLeastOnce()).message(any()); }",
        "C": "public InvalidInput(int initiator, @NotNull String message) { super(initiator); this.message = message; } public Exit(int initiator) { super(initiator); } public TerminalSokobanGame(GameState gameState, TerminalInputEngine inputEngine, TerminalRenderingEngine renderingEngine) { super(gameState); this.inputEngine = inputEngine; this.renderingEngine = renderingEngine; // TODO // Check the number of players if(gameState.getAllPlayerPositions().size()>2){ throw new IllegalArgumentException(); } } public void run() { // TODO renderingEngine.message(\"Sokoban game is ready.\"); renderingEngine.render(state); if(state.getUndoQuota().isEmpty()){ renderingEngine.message(\"Unlimited\"); }else { renderingEngine.message(\"Undo Quota: \"+state.getUndoQuota().get()); } while (true){ Action action = inputEngine.fetchAction(); ActionResult actionresult = processAction(action); if(actionresult.getClass().equals(ActionResult.Failed.class)){ renderingEngine.message (((ActionResult.Failed) actionresult).getReason()); } renderingEngine.render(state); if(shouldStop()){ break; } if(state.getUndoQuota().isEmpty()){ renderingEngine.message(\"Unlimited\"); }else { renderingEngine.message(\"Undo Quota: \"+state.getUndoQuota().get()); } } renderingEngine.message(\"Game exits.\"); if(state.isWin()){ renderingEngine.message(\"You win.\"); } return; }",
        "label": "P"
    },
    "1890": {
        "dataset": "COMP 3021",
        "project": "hychancm",
        "bug_id": "41",
        "T": "void testGameWin() { final var gameState = mock(GameState.class); final var inputEngine = mock(TerminalInputEngine.class); final var renderingEngine = mock(TerminalRenderingEngine.class); when(gameState.isWin()).thenReturn(false, false, false, true); when(inputEngine.fetchAction()) .thenReturn(new InvalidInput(0, \"\")); final var game = new TerminalSokobanGame(gameState, inputEngine, renderingEngine); game.run(); verify(gameState, atLeastOnce()).isWin(); verify(renderingEngine, atLeastOnce()).message(any()); }",
        "C": "public InvalidInput(int initiator, @NotNull String message) { super(initiator); this.message = message; } public TerminalSokobanGame(GameState gameState, TerminalInputEngine inputEngine, TerminalRenderingEngine renderingEngine) { super(gameState); this.inputEngine = inputEngine; this.renderingEngine = renderingEngine; // TODO // Check the number of players if(gameState.getAllPlayerPositions().size()>2){ throw new IllegalArgumentException(); } } public void run() { // TODO renderingEngine.message(\"Sokoban game is ready.\"); renderingEngine.render(state); if(state.getUndoQuota().isEmpty()){ renderingEngine.message(\"Unlimited\"); }else { renderingEngine.message(\"Undo Quota: \"+state.getUndoQuota().get()); } while (true){ Action action = inputEngine.fetchAction(); ActionResult actionresult = processAction(action); if(actionresult.getClass().equals(ActionResult.Failed.class)){ renderingEngine.message (((ActionResult.Failed) actionresult).getReason()); } renderingEngine.render(state); if(shouldStop()){ break; } if(state.getUndoQuota().isEmpty()){ renderingEngine.message(\"Unlimited\"); }else { renderingEngine.message(\"Undo Quota: \"+state.getUndoQuota().get()); } } renderingEngine.message(\"Game exits.\"); if(state.isWin()){ renderingEngine.message(\"You win.\"); } return; }",
        "label": "P"
    },
    "1891": {
        "dataset": "COMP 3021",
        "project": "hychancm",
        "bug_id": "42",
        "T": "void testMoreThanTwoPlayers() { final var gameState = mock(GameState.class); final var inputEngine = mock(TerminalInputEngine.class); final var renderingEngine = mock(TerminalRenderingEngine.class); when(gameState.getAllPlayerPositions()).thenReturn(new HashSet<>(Arrays.asList(Position.of(1, 1), Position.of(1, 2), Position.of(1, 3)))); }",
        "C": "public static @NotNull Position of(int x, int y) { return new Position(x, y); }",
        "label": "P"
    },
    "1892": {
        "dataset": "COMP 3021",
        "project": "dlibk",
        "bug_id": "0",
        "T": "void moveUp() { Position.of(233, 232), new Move.Up(-1).nextPosition(pos) ); }",
        "C": "public static @NotNull Position of(int x, int y) { return new Position(x, y); } public Up(int initiator) { super(initiator); }",
        "label": "P"
    },
    "1893": {
        "dataset": "COMP 3021",
        "project": "dlibk",
        "bug_id": "1",
        "T": "void moveDown() { Position.of(233, 234), new Move.Down(-1).nextPosition(pos) ); }",
        "C": "public static @NotNull Position of(int x, int y) { return new Position(x, y); } public Down(int initiator) { super(initiator); }",
        "label": "P"
    },
    "1894": {
        "dataset": "COMP 3021",
        "project": "dlibk",
        "bug_id": "2",
        "T": "void moveRight() { Position.of(234, 233), new Move.Right(-1).nextPosition(pos) ); }",
        "C": "public static @NotNull Position of(int x, int y) { return new Position(x, y); } public Right(int initiator) { super(initiator); }",
        "label": "P"
    },
    "1895": {
        "dataset": "COMP 3021",
        "project": "dlibk",
        "bug_id": "3",
        "T": "void testExceedingUndoQuota() { final var gameState = mock(GameState.class); when(gameState.getPlayerPositionById(anyInt())).thenReturn(Position.of(0, 0)); when(gameState.getUndoQuota()).thenReturn(Optional.of(0)); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Undo(0)); }",
        "C": "public Undo(int initiator) { super(initiator); }",
        "label": "P"
    },
    "1896": {
        "dataset": "COMP 3021",
        "project": "dlibk",
        "bug_id": "4",
        "T": "void testExit() { final var gameState = mock(GameState.class); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Exit(0)); }",
        "C": "public Exit(int initiator) { super(initiator); }",
        "label": "P"
    },
    "1897": {
        "dataset": "COMP 3021",
        "project": "dlibk",
        "bug_id": "5",
        "T": "void testUndoUnlimited() { final var gameState = mock(GameState.class); when(gameState.getPlayerPositionById(anyInt())).thenReturn(Position.of(0, 0)); when(gameState.getUndoQuota()).thenReturn(Optional.empty()); final var game = new SokobanGameForTesting(gameState); for (int i = 0; i < 10000; i++) { final var result = game.feedActionForProcessing(new Undo(0)); } verify(gameState, times(10000)).undo(); }",
        "C": "public TerminalRenderingEngine(PrintStream outputSteam) { this.outputSteam = outputSteam; } public Undo(int initiator) { super(initiator); }",
        "label": "P"
    },
    "1898": {
        "dataset": "COMP 3021",
        "project": "dlibk",
        "bug_id": "6",
        "T": "void testPushOtherPlayerBox() { String mapText = \"\"\" 233 ###### #AB.@# #b.a.# #@...# ###### \"\"\"; final var testMap = TestHelper.parseGameMap(mapText); final var gameState = spy(new GameState(testMap)); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Move.Down(0)); verify(gameState, never()).move(any(), any()); }",
        "C": "public GameState(@NotNull GameMap map) { // TODO this.map = map; undoLimit = map.getUndoLimit(); moveHistory = new ArrayList<>(); checkpoints = new ArrayList<>(); } public Down(int initiator) { super(initiator); }",
        "label": "P"
    },
    "1899": {
        "dataset": "COMP 3021",
        "project": "dlibk",
        "bug_id": "7",
        "T": "void testMoveNonExistingPlayer() { String mapText = \"\"\" 233 ###### #A..@# #a...# ##...# ###### \"\"\"; final var testMap = TestHelper.parseGameMap(mapText); final var gameState = spy(new GameState(testMap)); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Move.Down(23)); }",
        "C": "public GameState(@NotNull GameMap map) { // TODO this.map = map; undoLimit = map.getUndoLimit(); moveHistory = new ArrayList<>(); checkpoints = new ArrayList<>(); } public Down(int initiator) { super(initiator); }",
        "label": "P"
    },
    "1900": {
        "dataset": "COMP 3021",
        "project": "dlibk",
        "bug_id": "8",
        "T": "void testCheckpointWhenNeed() { final var gameState = spy(new GameState(TestHelper.parseGameMap(\"\"\" 233 ###### #.Aa@# #..a@# ###### \"\"\" ))); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Move.Right(0)); verify(gameState, times(1)).checkpoint(); }",
        "C": "public GameState(@NotNull GameMap map) { // TODO this.map = map; undoLimit = map.getUndoLimit(); moveHistory = new ArrayList<>(); checkpoints = new ArrayList<>(); } public Right(int initiator) { super(initiator); }",
        "label": "P"
    },
    "1901": {
        "dataset": "COMP 3021",
        "project": "dlibk",
        "bug_id": "9",
        "T": "void testPushBoxAgainstWall() { String mapText = \"\"\" 233 ###### #A..@# #a...# ##...# ###### \"\"\"; final var testMap = TestHelper.parseGameMap(mapText); final var gameState = spy(new GameState(testMap)); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Move.Down(0)); verify(gameState, never()).move(any(), any()); }",
        "C": "public GameState(@NotNull GameMap map) { // TODO this.map = map; undoLimit = map.getUndoLimit(); moveHistory = new ArrayList<>(); checkpoints = new ArrayList<>(); } public Down(int initiator) { super(initiator); }",
        "label": "P"
    },
    "1902": {
        "dataset": "COMP 3021",
        "project": "dlibk",
        "bug_id": "10",
        "T": "void testCheckpointWhenNotNeed() { final var gameState = spy(new GameState(TestHelper.parseGameMap(\"\"\" 233 ###### #A.a@# #..a@# ###### \"\"\" ))); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Move.Right(0)); verify(gameState, never()).checkpoint(); } private static class SokobanGameForTesting extends AbstractSokobanGame { protected SokobanGameForTesting(GameState gameState) { super(gameState); } @Override public void run() { } public ActionResult feedActionForProcessing(Action action) { return processAction(action); } }",
        "C": "public GameState(@NotNull GameMap map) { // TODO this.map = map; undoLimit = map.getUndoLimit(); moveHistory = new ArrayList<>(); checkpoints = new ArrayList<>(); } public Right(int initiator) { super(initiator); } public void run() { // TODO System.out.println(StringResources.GAME_READY_MESSAGE); renderingEngine.render(state); while (true) { Action action = inputEngine.fetchAction(); ActionResult actionResult = processAction(action); if (actionResult instanceof ActionResult.Failed) { renderingEngine.message(((ActionResult.Failed) actionResult).getReason()); } renderingEngine.render(state); if (this.shouldStop()) { System.out.println(StringResources.GAME_EXIT_MESSAGE); if (state.isWin()) { System.out.println(StringResources.WIN_MESSAGE); } break; } if (state.getUndoQuota().isEmpty()) { System.out.printf(StringResources.UNDO_QUOTA_TEMPLATE, StringResources.UNDO_QUOTA_UNLIMITED); } else { System.out.printf(StringResources.UNDO_QUOTA_TEMPLATE, state.getUndoQuota().get().toString()); } System.out.println(); System.out.println(\">>>\"); } } protected ActionResult processAction(@NotNull Action action) { // TODO Position playerPosition = state.getPlayerPositionById(action.getInitiator()); switch (action) { case Exit ignored: stopped = true; return new ActionResult.Success(action); case Undo ignored: if (state.getUndoQuota().isEmpty() || state.getUndoQuota().get() > 0) { state.undo(); return new ActionResult.Success(action); } else { return new ActionResult.Failed(action, StringResources.UNDO_QUOTA_RUN_OUT); } case Move move: //Valid input but no such player if (playerPosition == null) { return new ActionResult.Failed(action, StringResources.PLAYER_NOT_FOUND); } Position nextPosition = move.nextPosition(playerPosition); Entity entity = state.getEntity(nextPosition); if (entity instanceof Empty) {// The player move to next position state.move(playerPosition, nextPosition); state.checkpoint(); return new ActionResult.Success(action); } else if (entity instanceof Box // The next position is a box corresponding to the player && ((Box) entity).getPlayerId() == ((Player) state.getEntity(playerPosition)).getId()) { Position nextNextPosition = move.nextPosition(nextPosition); // The box is going to an empty place if (state.getEntity(nextNextPosition) instanceof Empty) { state.move(nextPosition, nextNextPosition); state.move(playerPosition, nextPosition); state.checkpoint(); return new ActionResult.Success(action); } else { return new ActionResult.Failed(action, \"Failed to push the box.\"); } } else {// Otherwise return new ActionResult.Failed(action, \"You hit a wall.\"); } case InvalidInput invalidInput: return new ActionResult.Failed(action, invalidInput.getMessage()); default: throw new ShouldNotReachException(); } }",
        "label": "F"
    },
    "1903": {
        "dataset": "COMP 3021",
        "project": "dlibk",
        "bug_id": "11",
        "T": "void testHitAnotherPlayer() { String mapText = \"\"\" 233 ###### #A..@# #B...# #ab.@# ###### \"\"\"; final var testMap = TestHelper.parseGameMap(mapText); final var gameState = spy(new GameState(testMap)); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Move.Down(0)); verify(gameState, never()).move(any(), any()); }",
        "C": "public GameState(@NotNull GameMap map) { // TODO this.map = map; undoLimit = map.getUndoLimit(); moveHistory = new ArrayList<>(); checkpoints = new ArrayList<>(); } public Down(int initiator) { super(initiator); }",
        "label": "P"
    },
    "1904": {
        "dataset": "COMP 3021",
        "project": "dlibk",
        "bug_id": "12",
        "T": "void testUndoWithinQuota() { final var gameState = mock(GameState.class); when(gameState.getPlayerPositionById(anyInt())).thenReturn(Position.of(0, 0)); when(gameState.getUndoQuota()).thenReturn(Optional.of(1)); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Undo(0)); verify(gameState, times(1)).undo(); }",
        "C": "public Undo(int initiator) { super(initiator); }",
        "label": "P"
    },
    "1905": {
        "dataset": "COMP 3021",
        "project": "dlibk",
        "bug_id": "13",
        "T": "void testInvalidInput() { final var game = new SokobanGameForTesting(mock(GameState.class)); final var message = String.valueOf(new Random().nextLong()); final var action = new InvalidInput(-1, message); final var result = game.feedActionForProcessing(action); }",
        "C": "public InvalidInput(int initiator, @NotNull String message) { super(initiator); this.message = message; }",
        "label": "P"
    },
    "1906": {
        "dataset": "COMP 3021",
        "project": "dlibk",
        "bug_id": "14",
        "T": "void testUndoLimitParsing() { final var gameMap = TestHelper.parseGameMap(rectangularMap); }",
        "C": "",
        "label": "P"
    },
    "1907": {
        "dataset": "COMP 3021",
        "project": "dlibk",
        "bug_id": "15",
        "T": "void testWidthForNonRectangularMap() { final var gameMap = TestHelper.parseGameMap(nonRectangularMap); }",
        "C": "",
        "label": "P"
    },
    "1908": {
        "dataset": "COMP 3021",
        "project": "dlibk",
        "bug_id": "16",
        "T": "void testTwoPlayersMap() { final var twoPlayersMap = \"\"\" 233 ###### #A..@# #..B@# #....# #.a..# #..b.# ###### \"\"\"; final var gameMap = TestHelper.parseGameMap(twoPlayersMap); final var playerIds = gameMap.getPlayerIds(); final var expectedIds = new HashSet<Integer>(); expectedIds.add(0); expectedIds.add(1); }",
        "C": "public Set<Integer> getPlayerIds() { // TODO Set<Integer> allPlayers = new HashSet<>(); for (int i = 0; i < maxHeight; i++) { for (int j = 0; j < maxWidth; j++) { Entity entity = getEntity(new Position(j, i)); if (entity instanceof Player) { allPlayers.add(((Player) entity).getId()); } } } return allPlayers; }",
        "label": "P"
    },
    "1909": {
        "dataset": "COMP 3021",
        "project": "dlibk",
        "bug_id": "17",
        "T": "void testMapWithoutPlayer() { final var invalidMap = \"\"\" 233 ### #.# ### \"\"\"; } // @Tag(TestKind.HIDDEN) // @Test // void testUnmatchedPlayersAndBoxes() { // final var invalidMap = \"\"\" // 233 // ###### // #A..@# // #...@# // #a.b@# // #.a.@# // #..a.# // ###### // \"\"\"; // assertThrowsExactly(IllegalArgumentException.class, () -> TestHelper.parseGameMap(invalidMap)); // }",
        "C": "public TerminalRenderingEngine(PrintStream outputSteam) { this.outputSteam = outputSteam; }",
        "label": "P"
    },
    "1910": {
        "dataset": "COMP 3021",
        "project": "dlibk",
        "bug_id": "18",
        "T": "void testManyPlayersMap() { final var manyPlayersMap = \"\"\" 233 ###### #A.P@@# #vCB@@# #.cpD@# #Ga.d@# #g.bV@# ###### \"\"\"; final var gameMap = TestHelper.parseGameMap(manyPlayersMap); final var playerIds = gameMap.getPlayerIds(); final var expectedIds = new HashSet<>(Arrays.asList( 0, 'P' - 'A', 'C' - 'A', 'B' - 'A', 'D' - 'A', 'G' - 'A', 'V' - 'A' )); }",
        "C": "public Set<Integer> getPlayerIds() { // TODO Set<Integer> allPlayers = new HashSet<>(); for (int i = 0; i < maxHeight; i++) { for (int j = 0; j < maxWidth; j++) { Entity entity = getEntity(new Position(j, i)); if (entity instanceof Player) { allPlayers.add(((Player) entity).getId()); } } } return allPlayers; }",
        "label": "P"
    },
    "1911": {
        "dataset": "COMP 3021",
        "project": "dlibk",
        "bug_id": "19",
        "T": "void testHeightForNonRectangularMap() { final var gameMap = TestHelper.parseGameMap(nonRectangularMap); }",
        "C": "",
        "label": "P"
    },
    "1912": {
        "dataset": "COMP 3021",
        "project": "dlibk",
        "bug_id": "20",
        "T": "void testDuplicatedPlayers() { final var invalidMap = \"\"\" 233 ###### #A..@# #..A@# #....# #.a..# #..b.# ###### \"\"\"; }",
        "C": "",
        "label": "P"
    },
    "1913": {
        "dataset": "COMP 3021",
        "project": "dlibk",
        "bug_id": "21",
        "T": "void testParseMapWithoutUndoLimit() { final var invalidMap = String.join(\"\\n\", rectangularMap.lines().skip(1).toList()); }",
        "C": "",
        "label": "P"
    },
    "1914": {
        "dataset": "COMP 3021",
        "project": "dlibk",
        "bug_id": "22",
        "T": "void testInsufficientDestinations() { final var invalidMap = \"\"\" 233 ###### #A..@# #...@# #a...# #.a..# #..a.# ###### \"\"\"; }",
        "C": "",
        "label": "P"
    },
    "1915": {
        "dataset": "COMP 3021",
        "project": "dlibk",
        "bug_id": "23",
        "T": "void testSuperLargeMap() { try { new GameMap(Integer.MAX_VALUE, Integer.MAX_VALUE, Collections.emptySet(), 0); } catch (OutOfMemoryError e) { throw new RuntimeException(e); } }); }",
        "C": "public GameMap(int maxWidth, int maxHeight, Set<Position> destinations, int undoLimit) { // TODO this.maxWidth = maxWidth; this.maxHeight = maxHeight; this.destinations = destinations; this.undoLimit = undoLimit; this.map = new Entity[maxHeight][maxWidth]; } /** * Parses the map from a string representation. * The first line is undo limit. * Starting from the second line, the game map is represented as follows, * <li># represents a {@link Wall}</li> * <li>@ represents a box destination.</li> * <li>Any upper-case letter represents a {@link Player}.</li> * <li> * Any lower-case letter represents a {@link Box} that is only movable by the player with the corresponding upper-case letter. * For instance, box \"a\" can only be moved by player \"A\" and not movable by player \"B\". * </li> * <li>. represents an {@link Empty} position in the map, meaning there is no player or box currently at this position.</li> * <p> * Notes: * <li> * There can be at most 26 players. * All implementations of classes in the hk.ust.comp3021.game package should support up to 26 players. * </li> * <li> * For simplicity, we assume the given map is bounded with a closed boundary. * There is no need to check this point. * </li> * <li> * Example maps can be found in \"src/main/resources\". * </li> * * @param mapText The string representation. * @return The parsed GameMap object. * @throws IllegalArgumentException if undo limit is negative but not -1. * @throws IllegalArgumentException if there are multiple same upper-case letters, i.e., one player can only exist at one position. * @throws IllegalArgumentException if there are no players in the map. * @throws IllegalArgumentException if the number of boxes is not equal to the number of box destinations. * @throws IllegalArgumentException if there are boxes whose {@link Box#getPlayerId()} public TerminalRenderingEngine(PrintStream outputSteam) { this.outputSteam = outputSteam; }",
        "label": "F"
    },
    "1916": {
        "dataset": "COMP 3021",
        "project": "dlibk",
        "bug_id": "24",
        "T": "void testInvalidUndoLimit() { final var invalidMap = \"\"\" -233 ###### #A..@# #...@# #a.b@# #.a.@# #..a.# ###### \"\"\"; }",
        "C": "",
        "label": "P"
    },
    "1917": {
        "dataset": "COMP 3021",
        "project": "dlibk",
        "bug_id": "25",
        "T": "void testEmptyMap() { final var invalidMap = \"\"; }",
        "C": "",
        "label": "P"
    },
    "1918": {
        "dataset": "COMP 3021",
        "project": "dlibk",
        "bug_id": "26",
        "T": "void testMove(String input, String name, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); } private InputStream fixValueStream(String content) { final var bytes = content.getBytes(StandardCharsets.UTF_8); return new ByteArrayInputStream(bytes); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine(); // TODO if (inputLine.equalsIgnoreCase(StringResources.EXIT_COMMAND_TEXT)) { return new Exit(-1); } switch (inputLine) { case \"A\": case \"a\": return new Move.Left(0); case \"S\": case \"s\": return new Move.Down(0); case \"W\": case \"w\": return new Move.Up(0); case \"D\": case \"d\": return new Move.Right(0); case \"H\": case \"h\": return new Move.Left(1); case \"J\": case \"j\": return new Move.Down(1); case \"K\": case \"k\": return new Move.Up(1); case \"L\": case \"l\": return new Move.Right(1); case \"U\": case \"u\": return new Undo(-1); default: return new InvalidInput(-1, StringResources.INVALID_INPUT_MESSAGE); } }",
        "label": "P"
    },
    "1919": {
        "dataset": "COMP 3021",
        "project": "dlibk",
        "bug_id": "27",
        "T": "void testMove(String input, String name, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); } private InputStream fixValueStream(String content) { final var bytes = content.getBytes(StandardCharsets.UTF_8); return new ByteArrayInputStream(bytes); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine(); // TODO if (inputLine.equalsIgnoreCase(StringResources.EXIT_COMMAND_TEXT)) { return new Exit(-1); } switch (inputLine) { case \"A\": case \"a\": return new Move.Left(0); case \"S\": case \"s\": return new Move.Down(0); case \"W\": case \"w\": return new Move.Up(0); case \"D\": case \"d\": return new Move.Right(0); case \"H\": case \"h\": return new Move.Left(1); case \"J\": case \"j\": return new Move.Down(1); case \"K\": case \"k\": return new Move.Up(1); case \"L\": case \"l\": return new Move.Right(1); case \"U\": case \"u\": return new Undo(-1); default: return new InvalidInput(-1, StringResources.INVALID_INPUT_MESSAGE); } }",
        "label": "P"
    },
    "1920": {
        "dataset": "COMP 3021",
        "project": "dlibk",
        "bug_id": "28",
        "T": "void testMove(String input, String name, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); } private InputStream fixValueStream(String content) { final var bytes = content.getBytes(StandardCharsets.UTF_8); return new ByteArrayInputStream(bytes); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine(); // TODO if (inputLine.equalsIgnoreCase(StringResources.EXIT_COMMAND_TEXT)) { return new Exit(-1); } switch (inputLine) { case \"A\": case \"a\": return new Move.Left(0); case \"S\": case \"s\": return new Move.Down(0); case \"W\": case \"w\": return new Move.Up(0); case \"D\": case \"d\": return new Move.Right(0); case \"H\": case \"h\": return new Move.Left(1); case \"J\": case \"j\": return new Move.Down(1); case \"K\": case \"k\": return new Move.Up(1); case \"L\": case \"l\": return new Move.Right(1); case \"U\": case \"u\": return new Undo(-1); default: return new InvalidInput(-1, StringResources.INVALID_INPUT_MESSAGE); } }",
        "label": "P"
    },
    "1921": {
        "dataset": "COMP 3021",
        "project": "dlibk",
        "bug_id": "29",
        "T": "void testMove(String input, String name, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); } private InputStream fixValueStream(String content) { final var bytes = content.getBytes(StandardCharsets.UTF_8); return new ByteArrayInputStream(bytes); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine(); // TODO if (inputLine.equalsIgnoreCase(StringResources.EXIT_COMMAND_TEXT)) { return new Exit(-1); } switch (inputLine) { case \"A\": case \"a\": return new Move.Left(0); case \"S\": case \"s\": return new Move.Down(0); case \"W\": case \"w\": return new Move.Up(0); case \"D\": case \"d\": return new Move.Right(0); case \"H\": case \"h\": return new Move.Left(1); case \"J\": case \"j\": return new Move.Down(1); case \"K\": case \"k\": return new Move.Up(1); case \"L\": case \"l\": return new Move.Right(1); case \"U\": case \"u\": return new Undo(-1); default: return new InvalidInput(-1, StringResources.INVALID_INPUT_MESSAGE); } }",
        "label": "P"
    },
    "1922": {
        "dataset": "COMP 3021",
        "project": "dlibk",
        "bug_id": "30",
        "T": "void testMove(String input, String name, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); } private InputStream fixValueStream(String content) { final var bytes = content.getBytes(StandardCharsets.UTF_8); return new ByteArrayInputStream(bytes); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine(); // TODO if (inputLine.equalsIgnoreCase(StringResources.EXIT_COMMAND_TEXT)) { return new Exit(-1); } switch (inputLine) { case \"A\": case \"a\": return new Move.Left(0); case \"S\": case \"s\": return new Move.Down(0); case \"W\": case \"w\": return new Move.Up(0); case \"D\": case \"d\": return new Move.Right(0); case \"H\": case \"h\": return new Move.Left(1); case \"J\": case \"j\": return new Move.Down(1); case \"K\": case \"k\": return new Move.Up(1); case \"L\": case \"l\": return new Move.Right(1); case \"U\": case \"u\": return new Undo(-1); default: return new InvalidInput(-1, StringResources.INVALID_INPUT_MESSAGE); } }",
        "label": "P"
    },
    "1923": {
        "dataset": "COMP 3021",
        "project": "dlibk",
        "bug_id": "31",
        "T": "void testMove(String input, String name, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); } private InputStream fixValueStream(String content) { final var bytes = content.getBytes(StandardCharsets.UTF_8); return new ByteArrayInputStream(bytes); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine(); // TODO if (inputLine.equalsIgnoreCase(StringResources.EXIT_COMMAND_TEXT)) { return new Exit(-1); } switch (inputLine) { case \"A\": case \"a\": return new Move.Left(0); case \"S\": case \"s\": return new Move.Down(0); case \"W\": case \"w\": return new Move.Up(0); case \"D\": case \"d\": return new Move.Right(0); case \"H\": case \"h\": return new Move.Left(1); case \"J\": case \"j\": return new Move.Down(1); case \"K\": case \"k\": return new Move.Up(1); case \"L\": case \"l\": return new Move.Right(1); case \"U\": case \"u\": return new Undo(-1); default: return new InvalidInput(-1, StringResources.INVALID_INPUT_MESSAGE); } }",
        "label": "P"
    },
    "1924": {
        "dataset": "COMP 3021",
        "project": "dlibk",
        "bug_id": "32",
        "T": "void testMove(String input, String name, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); } private InputStream fixValueStream(String content) { final var bytes = content.getBytes(StandardCharsets.UTF_8); return new ByteArrayInputStream(bytes); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine(); // TODO if (inputLine.equalsIgnoreCase(StringResources.EXIT_COMMAND_TEXT)) { return new Exit(-1); } switch (inputLine) { case \"A\": case \"a\": return new Move.Left(0); case \"S\": case \"s\": return new Move.Down(0); case \"W\": case \"w\": return new Move.Up(0); case \"D\": case \"d\": return new Move.Right(0); case \"H\": case \"h\": return new Move.Left(1); case \"J\": case \"j\": return new Move.Down(1); case \"K\": case \"k\": return new Move.Up(1); case \"L\": case \"l\": return new Move.Right(1); case \"U\": case \"u\": return new Undo(-1); default: return new InvalidInput(-1, StringResources.INVALID_INPUT_MESSAGE); } }",
        "label": "P"
    },
    "1925": {
        "dataset": "COMP 3021",
        "project": "dlibk",
        "bug_id": "33",
        "T": "void testMove(String input, String name, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); } private InputStream fixValueStream(String content) { final var bytes = content.getBytes(StandardCharsets.UTF_8); return new ByteArrayInputStream(bytes); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine(); // TODO if (inputLine.equalsIgnoreCase(StringResources.EXIT_COMMAND_TEXT)) { return new Exit(-1); } switch (inputLine) { case \"A\": case \"a\": return new Move.Left(0); case \"S\": case \"s\": return new Move.Down(0); case \"W\": case \"w\": return new Move.Up(0); case \"D\": case \"d\": return new Move.Right(0); case \"H\": case \"h\": return new Move.Left(1); case \"J\": case \"j\": return new Move.Down(1); case \"K\": case \"k\": return new Move.Up(1); case \"L\": case \"l\": return new Move.Right(1); case \"U\": case \"u\": return new Undo(-1); default: return new InvalidInput(-1, StringResources.INVALID_INPUT_MESSAGE); } }",
        "label": "P"
    },
    "1926": {
        "dataset": "COMP 3021",
        "project": "dlibk",
        "bug_id": "34",
        "T": "void testUndo(String input, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine(); // TODO if (inputLine.equalsIgnoreCase(StringResources.EXIT_COMMAND_TEXT)) { return new Exit(-1); } switch (inputLine) { case \"A\": case \"a\": return new Move.Left(0); case \"S\": case \"s\": return new Move.Down(0); case \"W\": case \"w\": return new Move.Up(0); case \"D\": case \"d\": return new Move.Right(0); case \"H\": case \"h\": return new Move.Left(1); case \"J\": case \"j\": return new Move.Down(1); case \"K\": case \"k\": return new Move.Up(1); case \"L\": case \"l\": return new Move.Right(1); case \"U\": case \"u\": return new Undo(-1); default: return new InvalidInput(-1, StringResources.INVALID_INPUT_MESSAGE); } }",
        "label": "P"
    },
    "1927": {
        "dataset": "COMP 3021",
        "project": "dlibk",
        "bug_id": "35",
        "T": "void testInvalidInput() { final var inputStream = fixValueStream(\"blah blah\"); final var inputEngine = new TerminalInputEngine(inputStream); final var action = inputEngine.fetchAction(); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine(); // TODO if (inputLine.equalsIgnoreCase(StringResources.EXIT_COMMAND_TEXT)) { return new Exit(-1); } switch (inputLine) { case \"A\": case \"a\": return new Move.Left(0); case \"S\": case \"s\": return new Move.Down(0); case \"W\": case \"w\": return new Move.Up(0); case \"D\": case \"d\": return new Move.Right(0); case \"H\": case \"h\": return new Move.Left(1); case \"J\": case \"j\": return new Move.Down(1); case \"K\": case \"k\": return new Move.Up(1); case \"L\": case \"l\": return new Move.Right(1); case \"U\": case \"u\": return new Undo(-1); default: return new InvalidInput(-1, StringResources.INVALID_INPUT_MESSAGE); } }",
        "label": "P"
    },
    "1928": {
        "dataset": "COMP 3021",
        "project": "dlibk",
        "bug_id": "36",
        "T": "void testUndoWhenThereIsNoMove() { final var gameState = new GameState(TestHelper.parseGameMap(\"\"\" 233 ###### #A.a@# #..a@# ###### \"\"\" )); gameState.undo(); } private Entity generateEntity(int key) { return switch (key % 4) { case 0 -> new Box(0); case 1 -> new Empty(); case 2 -> new Player(0); case 3 -> new Wall(); default -> throw new ShouldNotReachException(); }; }",
        "C": "public GameState(@NotNull GameMap map) { // TODO this.map = map; undoLimit = map.getUndoLimit(); moveHistory = new ArrayList<>(); checkpoints = new ArrayList<>(); } public void undo() { // TODO int checkpoint; if (checkpoints.isEmpty()) { checkpoint = 0; } else if (checkpoints.size() == 1) { checkpoints.remove(0); checkpoint = 0; } else { checkpoints.remove(checkpoints.size() - 1); checkpoint = checkpoints.get(checkpoints.size() - 1); } while (moveHistory.size() > checkpoint) { move(moveHistory.get(moveHistory.size() - 1).to(), moveHistory.get(moveHistory.size() - 1).from()); moveHistory.remove(moveHistory.size() - 1); moveHistory.remove(moveHistory.size() - 1); } if (!undoLimit.isEmpty()) { undoLimit = Optional.of(undoLimit.get() - 1); } } /** * Get the maximum width of the game map. * This should be the same as that in {@link GameMap} public TerminalRenderingEngine(PrintStream outputSteam) { this.outputSteam = outputSteam; } public Box(int playerId) { this.playerId = playerId; } public Player(int id) { this.id = id; } public ShouldNotReachException() { super(\"This branch should not be reached.\"); }",
        "label": "F"
    },
    "1929": {
        "dataset": "COMP 3021",
        "project": "dlibk",
        "bug_id": "37",
        "T": "void testGetUndoUnlimited() { final var gameState = new GameState(TestHelper.parseGameMap(\"\"\" -1 ###### #.Aa@# #..a@# ###### \"\"\" )); }",
        "C": "public GameState(@NotNull GameMap map) { // TODO this.map = map; undoLimit = map.getUndoLimit(); moveHistory = new ArrayList<>(); checkpoints = new ArrayList<>(); }",
        "label": "F"
    },
    "1930": {
        "dataset": "COMP 3021",
        "project": "dlibk",
        "bug_id": "38",
        "T": "void testMapCopying() { final var maxWidth = 2333; final var maxHeight = 2333; final var random = new Random(); final var randomEntities = Stream.generate(() -> Position.of(random.nextInt(maxWidth), random.nextInt(maxHeight))) .distinct() .limit(100) .collect(Collectors.toMap(Function.identity(), it -> generateEntity(it.x()))); final var firstPos = randomEntities.keySet().stream().findFirst(); final var gameMap = new GameMap(maxWidth, maxHeight, Collections.singleton(firstPos.get()), 233); randomEntities.forEach(gameMap::putEntity); final var gameState = new GameState(gameMap); final var randomPosition = randomEntities.keySet().stream().findAny(); gameMap.putEntity(randomPosition.get(), new Empty()); randomEntities.forEach((p, e) -> assertEquals(e, gameState.getEntity(p))); }",
        "C": "public static @NotNull Position of(int x, int y) { return new Position(x, y); } public GameMap(int maxWidth, int maxHeight, Set<Position> destinations, int undoLimit) { // TODO this.maxWidth = maxWidth; this.maxHeight = maxHeight; this.destinations = destinations; this.undoLimit = undoLimit; this.map = new Entity[maxHeight][maxWidth]; } /** * Parses the map from a string representation. * The first line is undo limit. * Starting from the second line, the game map is represented as follows, * <li># represents a {@link Wall}</li> * <li>@ represents a box destination.</li> * <li>Any upper-case letter represents a {@link Player}.</li> * <li> * Any lower-case letter represents a {@link Box} that is only movable by the player with the corresponding upper-case letter. * For instance, box \"a\" can only be moved by player \"A\" and not movable by player \"B\". * </li> * <li>. represents an {@link Empty} position in the map, meaning there is no player or box currently at this position.</li> * <p> * Notes: * <li> * There can be at most 26 players. * All implementations of classes in the hk.ust.comp3021.game package should support up to 26 players. * </li> * <li> * For simplicity, we assume the given map is bounded with a closed boundary. * There is no need to check this point. * </li> * <li> * Example maps can be found in \"src/main/resources\". * </li> * * @param mapText The string representation. * @return The parsed GameMap object. * @throws IllegalArgumentException if undo limit is negative but not -1. * @throws IllegalArgumentException if there are multiple same upper-case letters, i.e., one player can only exist at one position. * @throws IllegalArgumentException if there are no players in the map. * @throws IllegalArgumentException if the number of boxes is not equal to the number of box destinations. * @throws IllegalArgumentException if there are boxes whose {@link Box#getPlayerId()} public GameState(@NotNull GameMap map) { // TODO this.map = map; undoLimit = map.getUndoLimit(); moveHistory = new ArrayList<>(); checkpoints = new ArrayList<>(); } public void putEntity(Position position, Entity entity) { // TODO map[position.y()][position.x()] = entity; return; } public @Nullable Entity getEntity(@NotNull Position position) { // TODO return map.getEntity(position); } /** * Get all box destination positions as a set in the game map. * This should be the same as that in {@link GameMap}",
        "label": "F"
    },
    "1931": {
        "dataset": "COMP 3021",
        "project": "dlibk",
        "bug_id": "39",
        "T": "void testUndoWhenThereIsMoveButNoCheckpoint() { final var gameState = new GameState(TestHelper.parseGameMap(\"\"\" 233 ###### #A.a@# #..a@# ###### \"\"\" )); gameState.move(Position.of(1, 1), Position.of(2, 1)); gameState.undo(); }",
        "C": "public GameState(@NotNull GameMap map) { // TODO this.map = map; undoLimit = map.getUndoLimit(); moveHistory = new ArrayList<>(); checkpoints = new ArrayList<>(); } public void move(Position from, Position to) { // TODO map.putEntity(to, getEntity(from)); map.putEntity(from, new Empty()); moveHistory.add(new Movement(from, to)); } /** * Record a checkpoint of the game state, including: * <li>All current positions of entities in the game map.</li> * <li>Current undo quota</li> * <p> * Checkpoint is used in {@link GameState#undo()} public static @NotNull Position of(int x, int y) { return new Position(x, y); } public void undo() { // TODO int checkpoint; if (checkpoints.isEmpty()) { checkpoint = 0; } else if (checkpoints.size() == 1) { checkpoints.remove(0); checkpoint = 0; } else { checkpoints.remove(checkpoints.size() - 1); checkpoint = checkpoints.get(checkpoints.size() - 1); } while (moveHistory.size() > checkpoint) { move(moveHistory.get(moveHistory.size() - 1).to(), moveHistory.get(moveHistory.size() - 1).from()); moveHistory.remove(moveHistory.size() - 1); moveHistory.remove(moveHistory.size() - 1); } if (!undoLimit.isEmpty()) { undoLimit = Optional.of(undoLimit.get() - 1); } } /** * Get the maximum width of the game map. * This should be the same as that in {@link GameMap}",
        "label": "F"
    },
    "1932": {
        "dataset": "COMP 3021",
        "project": "dlibk",
        "bug_id": "40",
        "T": "void testGameExit() { final var gameState = mock(GameState.class); final var inputEngine = mock(TerminalInputEngine.class); final var renderingEngine = mock(TerminalRenderingEngine.class); when(gameState.isWin()).thenReturn(false, false, false); when(inputEngine.fetchAction()) .thenReturn(new InvalidInput(0, \"\"), new InvalidInput(0, \"\"), new Exit(0)); final var game = new TerminalSokobanGame(gameState, inputEngine, renderingEngine); game.run(); verify(renderingEngine, atLeastOnce()).message(any()); }",
        "C": "public InvalidInput(int initiator, @NotNull String message) { super(initiator); this.message = message; } public Exit(int initiator) { super(initiator); } public TerminalSokobanGame(GameState gameState, TerminalInputEngine inputEngine, TerminalRenderingEngine renderingEngine) { super(gameState); this.inputEngine = inputEngine; this.renderingEngine = renderingEngine; // TODO // Check the number of players if (gameState.getAllPlayerPositions().size() > 2) { throw new IllegalArgumentException(); } } public void run() { // TODO System.out.println(StringResources.GAME_READY_MESSAGE); renderingEngine.render(state); while (true) { Action action = inputEngine.fetchAction(); ActionResult actionResult = processAction(action); if (actionResult instanceof ActionResult.Failed) { renderingEngine.message(((ActionResult.Failed) actionResult).getReason()); } renderingEngine.render(state); if (this.shouldStop()) { System.out.println(StringResources.GAME_EXIT_MESSAGE); if (state.isWin()) { System.out.println(StringResources.WIN_MESSAGE); } break; } if (state.getUndoQuota().isEmpty()) { System.out.printf(StringResources.UNDO_QUOTA_TEMPLATE, StringResources.UNDO_QUOTA_UNLIMITED); } else { System.out.printf(StringResources.UNDO_QUOTA_TEMPLATE, state.getUndoQuota().get().toString()); } System.out.println(); System.out.println(\">>>\"); } }",
        "label": "P"
    },
    "1933": {
        "dataset": "COMP 3021",
        "project": "dlibk",
        "bug_id": "41",
        "T": "void testGameWin() { final var gameState = mock(GameState.class); final var inputEngine = mock(TerminalInputEngine.class); final var renderingEngine = mock(TerminalRenderingEngine.class); when(gameState.isWin()).thenReturn(false, false, false, true); when(inputEngine.fetchAction()) .thenReturn(new InvalidInput(0, \"\")); final var game = new TerminalSokobanGame(gameState, inputEngine, renderingEngine); game.run(); verify(gameState, atLeastOnce()).isWin(); verify(renderingEngine, atLeastOnce()).message(any()); }",
        "C": "public InvalidInput(int initiator, @NotNull String message) { super(initiator); this.message = message; } public TerminalSokobanGame(GameState gameState, TerminalInputEngine inputEngine, TerminalRenderingEngine renderingEngine) { super(gameState); this.inputEngine = inputEngine; this.renderingEngine = renderingEngine; // TODO // Check the number of players if (gameState.getAllPlayerPositions().size() > 2) { throw new IllegalArgumentException(); } } public void run() { // TODO System.out.println(StringResources.GAME_READY_MESSAGE); renderingEngine.render(state); while (true) { Action action = inputEngine.fetchAction(); ActionResult actionResult = processAction(action); if (actionResult instanceof ActionResult.Failed) { renderingEngine.message(((ActionResult.Failed) actionResult).getReason()); } renderingEngine.render(state); if (this.shouldStop()) { System.out.println(StringResources.GAME_EXIT_MESSAGE); if (state.isWin()) { System.out.println(StringResources.WIN_MESSAGE); } break; } if (state.getUndoQuota().isEmpty()) { System.out.printf(StringResources.UNDO_QUOTA_TEMPLATE, StringResources.UNDO_QUOTA_UNLIMITED); } else { System.out.printf(StringResources.UNDO_QUOTA_TEMPLATE, state.getUndoQuota().get().toString()); } System.out.println(); System.out.println(\">>>\"); } }",
        "label": "P"
    },
    "1934": {
        "dataset": "COMP 3021",
        "project": "dlibk",
        "bug_id": "42",
        "T": "void testMoreThanTwoPlayers() { final var gameState = mock(GameState.class); final var inputEngine = mock(TerminalInputEngine.class); final var renderingEngine = mock(TerminalRenderingEngine.class); when(gameState.getAllPlayerPositions()).thenReturn(new HashSet<>(Arrays.asList(Position.of(1, 1), Position.of(1, 2), Position.of(1, 3)))); }",
        "C": "public static @NotNull Position of(int x, int y) { return new Position(x, y); }",
        "label": "P"
    },
    "1935": {
        "dataset": "COMP 3021",
        "project": "slwongah",
        "bug_id": "0",
        "T": "void moveUp() { Position.of(233, 232), new Move.Up(-1).nextPosition(pos) ); }",
        "C": "public static @NotNull Position of(int x, int y) { return new Position(x, y); } public Up(int initiator) { super(initiator); }",
        "label": "P"
    },
    "1936": {
        "dataset": "COMP 3021",
        "project": "slwongah",
        "bug_id": "1",
        "T": "void moveDown() { Position.of(233, 234), new Move.Down(-1).nextPosition(pos) ); }",
        "C": "public static @NotNull Position of(int x, int y) { return new Position(x, y); } public Down(int initiator) { super(initiator); }",
        "label": "P"
    },
    "1937": {
        "dataset": "COMP 3021",
        "project": "slwongah",
        "bug_id": "2",
        "T": "void moveRight() { Position.of(234, 233), new Move.Right(-1).nextPosition(pos) ); }",
        "C": "public static @NotNull Position of(int x, int y) { return new Position(x, y); } public Right(int initiator) { super(initiator); }",
        "label": "P"
    },
    "1938": {
        "dataset": "COMP 3021",
        "project": "slwongah",
        "bug_id": "3",
        "T": "void testExceedingUndoQuota() { final var gameState = mock(GameState.class); when(gameState.getPlayerPositionById(anyInt())).thenReturn(Position.of(0, 0)); when(gameState.getUndoQuota()).thenReturn(Optional.of(0)); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Undo(0)); }",
        "C": "public Undo(int initiator) { super(initiator); }",
        "label": "P"
    },
    "1939": {
        "dataset": "COMP 3021",
        "project": "slwongah",
        "bug_id": "4",
        "T": "void testExit() { final var gameState = mock(GameState.class); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Exit(0)); }",
        "C": "public Exit(int initiator) { super(initiator); }",
        "label": "F"
    },
    "1940": {
        "dataset": "COMP 3021",
        "project": "slwongah",
        "bug_id": "5",
        "T": "void testUndoUnlimited() { final var gameState = mock(GameState.class); when(gameState.getPlayerPositionById(anyInt())).thenReturn(Position.of(0, 0)); when(gameState.getUndoQuota()).thenReturn(Optional.empty()); final var game = new SokobanGameForTesting(gameState); for (int i = 0; i < 10000; i++) { final var result = game.feedActionForProcessing(new Undo(0)); } verify(gameState, times(10000)).undo(); }",
        "C": "public Undo(int initiator) { super(initiator); }",
        "label": "P"
    },
    "1941": {
        "dataset": "COMP 3021",
        "project": "slwongah",
        "bug_id": "6",
        "T": "void testPushOtherPlayerBox() { String mapText = \"\"\" 233 ###### #AB.@# #b.a.# #@...# ###### \"\"\"; final var testMap = TestHelper.parseGameMap(mapText); final var gameState = spy(new GameState(testMap)); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Move.Down(0)); verify(gameState, never()).move(any(), any()); }",
        "C": "public GameState(@NotNull GameMap map) { this.undoQuota = map.undoLimit; this.destinations = map.getDestinations(); this.maxHeight = map.getMaxHeight(); this.maxWidth = map.getMaxWidth(); this.mapArr = map.getMap(); this.players = map.players; this.stateHistory = new ArrayList<Entity[][]>(0); original = deepCopyMap(this.mapArr); this.checkpoint(); } public Down(int initiator) { super(initiator); }",
        "label": "P"
    },
    "1942": {
        "dataset": "COMP 3021",
        "project": "slwongah",
        "bug_id": "7",
        "T": "void testMoveNonExistingPlayer() { String mapText = \"\"\" 233 ###### #A..@# #a...# ##...# ###### \"\"\"; final var testMap = TestHelper.parseGameMap(mapText); final var gameState = spy(new GameState(testMap)); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Move.Down(23)); }",
        "C": "public GameState(@NotNull GameMap map) { this.undoQuota = map.undoLimit; this.destinations = map.getDestinations(); this.maxHeight = map.getMaxHeight(); this.maxWidth = map.getMaxWidth(); this.mapArr = map.getMap(); this.players = map.players; this.stateHistory = new ArrayList<Entity[][]>(0); original = deepCopyMap(this.mapArr); this.checkpoint(); } public Down(int initiator) { super(initiator); }",
        "label": "P"
    },
    "1943": {
        "dataset": "COMP 3021",
        "project": "slwongah",
        "bug_id": "8",
        "T": "void testCheckpointWhenNeed() { final var gameState = spy(new GameState(TestHelper.parseGameMap(\"\"\" 233 ###### #.Aa@# #..a@# ###### \"\"\" ))); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Move.Right(0)); verify(gameState, times(1)).checkpoint(); }",
        "C": "public GameState(@NotNull GameMap map) { this.undoQuota = map.undoLimit; this.destinations = map.getDestinations(); this.maxHeight = map.getMaxHeight(); this.maxWidth = map.getMaxWidth(); this.mapArr = map.getMap(); this.players = map.players; this.stateHistory = new ArrayList<Entity[][]>(0); original = deepCopyMap(this.mapArr); this.checkpoint(); } public Right(int initiator) { super(initiator); }",
        "label": "P"
    },
    "1944": {
        "dataset": "COMP 3021",
        "project": "slwongah",
        "bug_id": "9",
        "T": "void testPushBoxAgainstWall() { String mapText = \"\"\" 233 ###### #A..@# #a...# ##...# ###### \"\"\"; final var testMap = TestHelper.parseGameMap(mapText); final var gameState = spy(new GameState(testMap)); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Move.Down(0)); verify(gameState, never()).move(any(), any()); }",
        "C": "public GameState(@NotNull GameMap map) { this.undoQuota = map.undoLimit; this.destinations = map.getDestinations(); this.maxHeight = map.getMaxHeight(); this.maxWidth = map.getMaxWidth(); this.mapArr = map.getMap(); this.players = map.players; this.stateHistory = new ArrayList<Entity[][]>(0); original = deepCopyMap(this.mapArr); this.checkpoint(); } public Down(int initiator) { super(initiator); }",
        "label": "P"
    },
    "1945": {
        "dataset": "COMP 3021",
        "project": "slwongah",
        "bug_id": "10",
        "T": "void testCheckpointWhenNotNeed() { final var gameState = spy(new GameState(TestHelper.parseGameMap(\"\"\" 233 ###### #A.a@# #..a@# ###### \"\"\" ))); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Move.Right(0)); verify(gameState, never()).checkpoint(); } private static class SokobanGameForTesting extends AbstractSokobanGame { protected SokobanGameForTesting(GameState gameState) { super(gameState); } @Override public void run() { } public ActionResult feedActionForProcessing(Action action) { return processAction(action); } }",
        "C": "public GameState(@NotNull GameMap map) { this.undoQuota = map.undoLimit; this.destinations = map.getDestinations(); this.maxHeight = map.getMaxHeight(); this.maxWidth = map.getMaxWidth(); this.mapArr = map.getMap(); this.players = map.players; this.stateHistory = new ArrayList<Entity[][]>(0); original = deepCopyMap(this.mapArr); this.checkpoint(); } public Right(int initiator) { super(initiator); } public void run() { renderingEngine.message(\"Sokoban game is ready.\"); renderingEngine.render(state); Optional<Integer> undoQuota = state.getUndoQuota(); if (undoQuota.isPresent()) { renderingEngine.message(\"\\nUndo Quota: \" + undoQuota.get()); } else renderingEngine.message(\"\\nUnlimited\"); Action action; ActionResult result; while (true){ action = inputEngine.fetchAction(); result = processAction(action); undoQuota = state.getUndoQuota(); if (result instanceof ActionResult.Failed) renderingEngine.message(((ActionResult.Failed) result).getReason()); renderingEngine.render(state); if (action instanceof Exit) { renderingEngine.message(((ActionResult.Failed) result).getReason()); break; } if (state.isWin()){ renderingEngine.message(\"\\nGame exits.\\nYou win.\"); break; } if (undoQuota.isPresent()) { renderingEngine.message(\"\\nUndo Quota: \" + undoQuota.get()); } else renderingEngine.message(\"\\nUnlimited\"); } } protected ActionResult processAction(@NotNull Action action) { Position currentPosition; try { currentPosition = state.getPlayerPositionById(action.getInitiator()); } catch (Exception e) { return new ActionResult.Failed(action,\"Player not found.\"); } Optional<Integer> undoQuota = state.getUndoQuota(); if (action instanceof Move) { Position nextPosition = ((Move) action).nextPosition(currentPosition); Entity targetEntity = state.getEntity(nextPosition); if (targetEntity == null) throw new IllegalArgumentException(\"This branch should not be reached.\"); if (targetEntity instanceof Box) { if (((Box) targetEntity).getPlayerId()!=action.getInitiator()){ return new ActionResult.Failed(action, \"You cannot move other players' boxes.\"); } if (!(state.getEntity(currentPosition.oneFurther(nextPosition)) instanceof Empty)) { return new ActionResult.Failed(action, \"Failed to push the box.\"); } else { state.move(nextPosition, currentPosition.oneFurther(nextPosition)); state.move(currentPosition, nextPosition); state.checkpoint(); return new ActionResult.Success(action); } } else if (targetEntity instanceof Player) { return new ActionResult.Failed(action, \"You hit another player.\"); } else if (targetEntity instanceof Wall) { return new ActionResult.Failed(action, \"You hit a wall\"); } else { state.move(currentPosition, nextPosition); return new ActionResult.Success(action); } } else if (action instanceof Undo) { if (undoQuota.isEmpty()){ state.undo(); return new ActionResult.Success(action); } else if (undoQuota.get() > 0 ){ state.undo(); return new ActionResult.Success(action); } else{ return new ActionResult.Failed(action,\"You have run out of your undo quota.\"); } } else if (action instanceof InvalidInput) { return new ActionResult.Failed(action, \"Invalid Input.\"); } else if (action instanceof Exit){ return new ActionResult.Failed(action, \"\\nGame exits.\"); } return new ActionResult.Success(action); } }",
        "label": "P"
    },
    "1946": {
        "dataset": "COMP 3021",
        "project": "slwongah",
        "bug_id": "11",
        "T": "void testHitAnotherPlayer() { String mapText = \"\"\" 233 ###### #A..@# #B...# #ab.@# ###### \"\"\"; final var testMap = TestHelper.parseGameMap(mapText); final var gameState = spy(new GameState(testMap)); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Move.Down(0)); verify(gameState, never()).move(any(), any()); }",
        "C": "public GameState(@NotNull GameMap map) { this.undoQuota = map.undoLimit; this.destinations = map.getDestinations(); this.maxHeight = map.getMaxHeight(); this.maxWidth = map.getMaxWidth(); this.mapArr = map.getMap(); this.players = map.players; this.stateHistory = new ArrayList<Entity[][]>(0); original = deepCopyMap(this.mapArr); this.checkpoint(); } public Down(int initiator) { super(initiator); }",
        "label": "P"
    },
    "1947": {
        "dataset": "COMP 3021",
        "project": "slwongah",
        "bug_id": "12",
        "T": "void testUndoWithinQuota() { final var gameState = mock(GameState.class); when(gameState.getPlayerPositionById(anyInt())).thenReturn(Position.of(0, 0)); when(gameState.getUndoQuota()).thenReturn(Optional.of(1)); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Undo(0)); verify(gameState, times(1)).undo(); }",
        "C": "public Undo(int initiator) { super(initiator); }",
        "label": "P"
    },
    "1948": {
        "dataset": "COMP 3021",
        "project": "slwongah",
        "bug_id": "13",
        "T": "void testInvalidInput() { final var game = new SokobanGameForTesting(mock(GameState.class)); final var message = String.valueOf(new Random().nextLong()); final var action = new InvalidInput(-1, message); final var result = game.feedActionForProcessing(action); }",
        "C": "public InvalidInput(int initiator, @NotNull String message) { super(initiator); this.message = message; }",
        "label": "P"
    },
    "1949": {
        "dataset": "COMP 3021",
        "project": "slwongah",
        "bug_id": "14",
        "T": "void testUndoLimitParsing() { final var gameMap = TestHelper.parseGameMap(rectangularMap); }",
        "C": "",
        "label": "P"
    },
    "1950": {
        "dataset": "COMP 3021",
        "project": "slwongah",
        "bug_id": "15",
        "T": "void testWidthForNonRectangularMap() { final var gameMap = TestHelper.parseGameMap(nonRectangularMap); }",
        "C": "",
        "label": "P"
    },
    "1951": {
        "dataset": "COMP 3021",
        "project": "slwongah",
        "bug_id": "16",
        "T": "void testTwoPlayersMap() { final var twoPlayersMap = \"\"\" 233 ###### #A..@# #..B@# #....# #.a..# #..b.# ###### \"\"\"; final var gameMap = TestHelper.parseGameMap(twoPlayersMap); final var playerIds = gameMap.getPlayerIds(); final var expectedIds = new HashSet<Integer>(); expectedIds.add(0); expectedIds.add(1); }",
        "C": "public Set<Integer> getPlayerIds() { Set<Integer> ids = new HashSet<Integer>(); for (Player player: this.players) ids.add(player.getId()); return ids; }",
        "label": "P"
    },
    "1952": {
        "dataset": "COMP 3021",
        "project": "slwongah",
        "bug_id": "17",
        "T": "void testMapWithoutPlayer() { final var invalidMap = \"\"\" 233 ### #.# ### \"\"\"; } // @Tag(TestKind.HIDDEN) // @Test // void testUnmatchedPlayersAndBoxes() { // final var invalidMap = \"\"\" // 233 // ###### // #A..@# // #...@# // #a.b@# // #.a.@# // #..a.# // ###### // \"\"\"; // assertThrowsExactly(IllegalArgumentException.class, () -> TestHelper.parseGameMap(invalidMap)); // }",
        "C": "",
        "label": "F"
    },
    "1953": {
        "dataset": "COMP 3021",
        "project": "slwongah",
        "bug_id": "18",
        "T": "void testManyPlayersMap() { final var manyPlayersMap = \"\"\" 233 ###### #A.P@@# #vCB@@# #.cpD@# #Ga.d@# #g.bV@# ###### \"\"\"; final var gameMap = TestHelper.parseGameMap(manyPlayersMap); final var playerIds = gameMap.getPlayerIds(); final var expectedIds = new HashSet<>(Arrays.asList( 0, 'P' - 'A', 'C' - 'A', 'B' - 'A', 'D' - 'A', 'G' - 'A', 'V' - 'A' )); }",
        "C": "public Set<Integer> getPlayerIds() { Set<Integer> ids = new HashSet<Integer>(); for (Player player: this.players) ids.add(player.getId()); return ids; }",
        "label": "P"
    },
    "1954": {
        "dataset": "COMP 3021",
        "project": "slwongah",
        "bug_id": "19",
        "T": "void testHeightForNonRectangularMap() { final var gameMap = TestHelper.parseGameMap(nonRectangularMap); }",
        "C": "",
        "label": "P"
    },
    "1955": {
        "dataset": "COMP 3021",
        "project": "slwongah",
        "bug_id": "20",
        "T": "void testDuplicatedPlayers() { final var invalidMap = \"\"\" 233 ###### #A..@# #..A@# #....# #.a..# #..b.# ###### \"\"\"; }",
        "C": "",
        "label": "P"
    },
    "1956": {
        "dataset": "COMP 3021",
        "project": "slwongah",
        "bug_id": "21",
        "T": "void testParseMapWithoutUndoLimit() { final var invalidMap = String.join(\"\\n\", rectangularMap.lines().skip(1).toList()); }",
        "C": "",
        "label": "P"
    },
    "1957": {
        "dataset": "COMP 3021",
        "project": "slwongah",
        "bug_id": "22",
        "T": "void testInsufficientDestinations() { final var invalidMap = \"\"\" 233 ###### #A..@# #...@# #a...# #.a..# #..a.# ###### \"\"\"; }",
        "C": "",
        "label": "P"
    },
    "1958": {
        "dataset": "COMP 3021",
        "project": "slwongah",
        "bug_id": "23",
        "T": "void testSuperLargeMap() { try { new GameMap(Integer.MAX_VALUE, Integer.MAX_VALUE, Collections.emptySet(), 0); } catch (OutOfMemoryError e) { throw new RuntimeException(e); } }); }",
        "C": "public GameMap(int maxWidth, int maxHeight, Set<Position> destinations, int undoLimit) { if (maxWidth <=0 || maxHeight<=0 || undoLimit <-1) throw new IllegalArgumentException(); this.maxWidth = maxWidth; this.maxHeight = maxHeight; this.destinations = destinations; if (undoLimit >0) { this.undoLimit = Optional.ofNullable(undoLimit); } else this.undoLimit = Optional.empty(); } /** * Parses the map from a string representation. * The first line is undo limit. * Starting from the second line, the game map is represented as follows, * <li># represents a {@link Wall}</li> * <li>@ represents a box destination.</li> * <li>Any upper-case letter represents a {@link Player}.</li> * <li> * Any lower-case letter represents a {@link Box} that is only movable by the player with the corresponding upper-case letter. * For instance, box \"a\" can only be moved by player \"A\" and not movable by player \"B\". * </li> * <li>. represents an {@link Empty} position in the map, meaning there is no player or box currently at this position.</li> * <p> * Notes: * <li> * There can be at most 26 players. * All implementations of classes in the hk.ust.comp3021.game package should support up to 26 players. * </li> * <li> * For simplicity, we assume the given map is bounded with a closed boundary. * There is no need to check this point. * </li> * <li> * Example maps can be found in \"src/main/resources\". * </li> * * @param mapText The string representation. * @return The parsed GameMap object. * @throws IllegalArgumentException if undo limit is negative but not -1. * @throws IllegalArgumentException if there are multiple same upper-case letters, i.e., one player can only exist at one position. * @throws IllegalArgumentException if there are no players in the map. * @throws IllegalArgumentException if the number of boxes is not equal to the number of box destinations. * @throws IllegalArgumentException if there are boxes whose {@link Box#getPlayerId()}",
        "label": "P"
    },
    "1959": {
        "dataset": "COMP 3021",
        "project": "slwongah",
        "bug_id": "24",
        "T": "void testInvalidUndoLimit() { final var invalidMap = \"\"\" -233 ###### #A..@# #...@# #a.b@# #.a.@# #..a.# ###### \"\"\"; }",
        "C": "",
        "label": "P"
    },
    "1960": {
        "dataset": "COMP 3021",
        "project": "slwongah",
        "bug_id": "25",
        "T": "void testEmptyMap() { final var invalidMap = \"\"; }",
        "C": "",
        "label": "P"
    },
    "1961": {
        "dataset": "COMP 3021",
        "project": "slwongah",
        "bug_id": "26",
        "T": "void testMove(String input, String name, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); } private InputStream fixValueStream(String content) { final var bytes = content.getBytes(StandardCharsets.UTF_8); return new ByteArrayInputStream(bytes); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine(); return switch(inputLine.toLowerCase()){ case \"a\" -> new Move.Left(0); case \"s\" -> new Move.Down(0); case \"w\" -> new Move.Up(0); case \"d\" -> new Move.Right(0); case \"h\" -> new Move.Left(1); case \"j\" -> new Move.Down(1); case \"k\" -> new Move.Up(1); case \"l\" -> new Move.Right(1); case \"exit\" -> new Exit(0); case \"u\"-> new Undo(0); case default -> new InvalidInput(0, \"Invalid input\"); }; }",
        "label": "P"
    },
    "1962": {
        "dataset": "COMP 3021",
        "project": "slwongah",
        "bug_id": "27",
        "T": "void testMove(String input, String name, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); } private InputStream fixValueStream(String content) { final var bytes = content.getBytes(StandardCharsets.UTF_8); return new ByteArrayInputStream(bytes); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine(); return switch(inputLine.toLowerCase()){ case \"a\" -> new Move.Left(0); case \"s\" -> new Move.Down(0); case \"w\" -> new Move.Up(0); case \"d\" -> new Move.Right(0); case \"h\" -> new Move.Left(1); case \"j\" -> new Move.Down(1); case \"k\" -> new Move.Up(1); case \"l\" -> new Move.Right(1); case \"exit\" -> new Exit(0); case \"u\"-> new Undo(0); case default -> new InvalidInput(0, \"Invalid input\"); }; }",
        "label": "P"
    },
    "1963": {
        "dataset": "COMP 3021",
        "project": "slwongah",
        "bug_id": "28",
        "T": "void testMove(String input, String name, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); } private InputStream fixValueStream(String content) { final var bytes = content.getBytes(StandardCharsets.UTF_8); return new ByteArrayInputStream(bytes); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine(); return switch(inputLine.toLowerCase()){ case \"a\" -> new Move.Left(0); case \"s\" -> new Move.Down(0); case \"w\" -> new Move.Up(0); case \"d\" -> new Move.Right(0); case \"h\" -> new Move.Left(1); case \"j\" -> new Move.Down(1); case \"k\" -> new Move.Up(1); case \"l\" -> new Move.Right(1); case \"exit\" -> new Exit(0); case \"u\"-> new Undo(0); case default -> new InvalidInput(0, \"Invalid input\"); }; }",
        "label": "P"
    },
    "1964": {
        "dataset": "COMP 3021",
        "project": "slwongah",
        "bug_id": "29",
        "T": "void testMove(String input, String name, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); } private InputStream fixValueStream(String content) { final var bytes = content.getBytes(StandardCharsets.UTF_8); return new ByteArrayInputStream(bytes); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine(); return switch(inputLine.toLowerCase()){ case \"a\" -> new Move.Left(0); case \"s\" -> new Move.Down(0); case \"w\" -> new Move.Up(0); case \"d\" -> new Move.Right(0); case \"h\" -> new Move.Left(1); case \"j\" -> new Move.Down(1); case \"k\" -> new Move.Up(1); case \"l\" -> new Move.Right(1); case \"exit\" -> new Exit(0); case \"u\"-> new Undo(0); case default -> new InvalidInput(0, \"Invalid input\"); }; }",
        "label": "P"
    },
    "1965": {
        "dataset": "COMP 3021",
        "project": "slwongah",
        "bug_id": "30",
        "T": "void testMove(String input, String name, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); } private InputStream fixValueStream(String content) { final var bytes = content.getBytes(StandardCharsets.UTF_8); return new ByteArrayInputStream(bytes); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine(); return switch(inputLine.toLowerCase()){ case \"a\" -> new Move.Left(0); case \"s\" -> new Move.Down(0); case \"w\" -> new Move.Up(0); case \"d\" -> new Move.Right(0); case \"h\" -> new Move.Left(1); case \"j\" -> new Move.Down(1); case \"k\" -> new Move.Up(1); case \"l\" -> new Move.Right(1); case \"exit\" -> new Exit(0); case \"u\"-> new Undo(0); case default -> new InvalidInput(0, \"Invalid input\"); }; }",
        "label": "P"
    },
    "1966": {
        "dataset": "COMP 3021",
        "project": "slwongah",
        "bug_id": "31",
        "T": "void testMove(String input, String name, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); } private InputStream fixValueStream(String content) { final var bytes = content.getBytes(StandardCharsets.UTF_8); return new ByteArrayInputStream(bytes); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine(); return switch(inputLine.toLowerCase()){ case \"a\" -> new Move.Left(0); case \"s\" -> new Move.Down(0); case \"w\" -> new Move.Up(0); case \"d\" -> new Move.Right(0); case \"h\" -> new Move.Left(1); case \"j\" -> new Move.Down(1); case \"k\" -> new Move.Up(1); case \"l\" -> new Move.Right(1); case \"exit\" -> new Exit(0); case \"u\"-> new Undo(0); case default -> new InvalidInput(0, \"Invalid input\"); }; }",
        "label": "P"
    },
    "1967": {
        "dataset": "COMP 3021",
        "project": "slwongah",
        "bug_id": "32",
        "T": "void testMove(String input, String name, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); } private InputStream fixValueStream(String content) { final var bytes = content.getBytes(StandardCharsets.UTF_8); return new ByteArrayInputStream(bytes); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine(); return switch(inputLine.toLowerCase()){ case \"a\" -> new Move.Left(0); case \"s\" -> new Move.Down(0); case \"w\" -> new Move.Up(0); case \"d\" -> new Move.Right(0); case \"h\" -> new Move.Left(1); case \"j\" -> new Move.Down(1); case \"k\" -> new Move.Up(1); case \"l\" -> new Move.Right(1); case \"exit\" -> new Exit(0); case \"u\"-> new Undo(0); case default -> new InvalidInput(0, \"Invalid input\"); }; }",
        "label": "P"
    },
    "1968": {
        "dataset": "COMP 3021",
        "project": "slwongah",
        "bug_id": "33",
        "T": "void testMove(String input, String name, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); } private InputStream fixValueStream(String content) { final var bytes = content.getBytes(StandardCharsets.UTF_8); return new ByteArrayInputStream(bytes); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine(); return switch(inputLine.toLowerCase()){ case \"a\" -> new Move.Left(0); case \"s\" -> new Move.Down(0); case \"w\" -> new Move.Up(0); case \"d\" -> new Move.Right(0); case \"h\" -> new Move.Left(1); case \"j\" -> new Move.Down(1); case \"k\" -> new Move.Up(1); case \"l\" -> new Move.Right(1); case \"exit\" -> new Exit(0); case \"u\"-> new Undo(0); case default -> new InvalidInput(0, \"Invalid input\"); }; }",
        "label": "P"
    },
    "1969": {
        "dataset": "COMP 3021",
        "project": "slwongah",
        "bug_id": "34",
        "T": "void testUndo(String input, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine(); return switch(inputLine.toLowerCase()){ case \"a\" -> new Move.Left(0); case \"s\" -> new Move.Down(0); case \"w\" -> new Move.Up(0); case \"d\" -> new Move.Right(0); case \"h\" -> new Move.Left(1); case \"j\" -> new Move.Down(1); case \"k\" -> new Move.Up(1); case \"l\" -> new Move.Right(1); case \"exit\" -> new Exit(0); case \"u\"-> new Undo(0); case default -> new InvalidInput(0, \"Invalid input\"); }; }",
        "label": "P"
    },
    "1970": {
        "dataset": "COMP 3021",
        "project": "slwongah",
        "bug_id": "35",
        "T": "void testInvalidInput() { final var inputStream = fixValueStream(\"blah blah\"); final var inputEngine = new TerminalInputEngine(inputStream); final var action = inputEngine.fetchAction(); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine(); return switch(inputLine.toLowerCase()){ case \"a\" -> new Move.Left(0); case \"s\" -> new Move.Down(0); case \"w\" -> new Move.Up(0); case \"d\" -> new Move.Right(0); case \"h\" -> new Move.Left(1); case \"j\" -> new Move.Down(1); case \"k\" -> new Move.Up(1); case \"l\" -> new Move.Right(1); case \"exit\" -> new Exit(0); case \"u\"-> new Undo(0); case default -> new InvalidInput(0, \"Invalid input\"); }; }",
        "label": "P"
    },
    "1971": {
        "dataset": "COMP 3021",
        "project": "slwongah",
        "bug_id": "36",
        "T": "void testUndoWhenThereIsNoMove() { final var gameState = new GameState(TestHelper.parseGameMap(\"\"\" 233 ###### #A.a@# #..a@# ###### \"\"\" )); gameState.undo(); } private Entity generateEntity(int key) { return switch (key % 4) { case 0 -> new Box(0); case 1 -> new Empty(); case 2 -> new Player(0); case 3 -> new Wall(); default -> throw new ShouldNotReachException(); }; }",
        "C": "public GameState(@NotNull GameMap map) { this.undoQuota = map.undoLimit; this.destinations = map.getDestinations(); this.maxHeight = map.getMaxHeight(); this.maxWidth = map.getMaxWidth(); this.mapArr = map.getMap(); this.players = map.players; this.stateHistory = new ArrayList<Entity[][]>(0); original = deepCopyMap(this.mapArr); this.checkpoint(); } public void undo() { if (this.equals(original)) return; if (stateHistory.isEmpty()){ this.mapArr = deepCopyMap(original); if (last != null) { undoQuota = undoQuota.isPresent() ? Optional.of(undoQuota.get() - 1) : undoQuota; } last = null; } else { int targetIndex = stateHistory.size() - 1; this.mapArr = deepCopyMap(stateHistory.get(targetIndex)); last = deepCopyMap(this.mapArr); stateHistory.remove(targetIndex); undoQuota = undoQuota.isPresent() ? Optional.of(undoQuota.get() - 1) : undoQuota; } } /** * Get the maximum width of the game map. * This should be the same as that in {@link GameMap} public Box(int playerId) { this.playerId = playerId; } public Player(int id) { this.id = id; } public ShouldNotReachException() { super(\"This branch should not be reached.\"); }",
        "label": "P"
    },
    "1972": {
        "dataset": "COMP 3021",
        "project": "slwongah",
        "bug_id": "37",
        "T": "void testGetUndoUnlimited() { final var gameState = new GameState(TestHelper.parseGameMap(\"\"\" -1 ###### #.Aa@# #..a@# ###### \"\"\" )); }",
        "C": "public GameState(@NotNull GameMap map) { this.undoQuota = map.undoLimit; this.destinations = map.getDestinations(); this.maxHeight = map.getMaxHeight(); this.maxWidth = map.getMaxWidth(); this.mapArr = map.getMap(); this.players = map.players; this.stateHistory = new ArrayList<Entity[][]>(0); original = deepCopyMap(this.mapArr); this.checkpoint(); }",
        "label": "P"
    },
    "1973": {
        "dataset": "COMP 3021",
        "project": "slwongah",
        "bug_id": "38",
        "T": "void testMapCopying() { final var maxWidth = 2333; final var maxHeight = 2333; final var random = new Random(); final var randomEntities = Stream.generate(() -> Position.of(random.nextInt(maxWidth), random.nextInt(maxHeight))) .distinct() .limit(100) .collect(Collectors.toMap(Function.identity(), it -> generateEntity(it.x()))); final var firstPos = randomEntities.keySet().stream().findFirst(); final var gameMap = new GameMap(maxWidth, maxHeight, Collections.singleton(firstPos.get()), 233); randomEntities.forEach(gameMap::putEntity); final var gameState = new GameState(gameMap); final var randomPosition = randomEntities.keySet().stream().findAny(); gameMap.putEntity(randomPosition.get(), new Empty()); randomEntities.forEach((p, e) -> assertEquals(e, gameState.getEntity(p))); }",
        "C": "public static @NotNull Position of(int x, int y) { return new Position(x, y); } public GameMap(int maxWidth, int maxHeight, Set<Position> destinations, int undoLimit) { if (maxWidth <=0 || maxHeight<=0 || undoLimit <-1) throw new IllegalArgumentException(); this.maxWidth = maxWidth; this.maxHeight = maxHeight; this.destinations = destinations; if (undoLimit >0) { this.undoLimit = Optional.ofNullable(undoLimit); } else this.undoLimit = Optional.empty(); } /** * Parses the map from a string representation. * The first line is undo limit. * Starting from the second line, the game map is represented as follows, * <li># represents a {@link Wall}</li> * <li>@ represents a box destination.</li> * <li>Any upper-case letter represents a {@link Player}.</li> * <li> * Any lower-case letter represents a {@link Box} that is only movable by the player with the corresponding upper-case letter. * For instance, box \"a\" can only be moved by player \"A\" and not movable by player \"B\". * </li> * <li>. represents an {@link Empty} position in the map, meaning there is no player or box currently at this position.</li> * <p> * Notes: * <li> * There can be at most 26 players. * All implementations of classes in the hk.ust.comp3021.game package should support up to 26 players. * </li> * <li> * For simplicity, we assume the given map is bounded with a closed boundary. * There is no need to check this point. * </li> * <li> * Example maps can be found in \"src/main/resources\". * </li> * * @param mapText The string representation. * @return The parsed GameMap object. * @throws IllegalArgumentException if undo limit is negative but not -1. * @throws IllegalArgumentException if there are multiple same upper-case letters, i.e., one player can only exist at one position. * @throws IllegalArgumentException if there are no players in the map. * @throws IllegalArgumentException if the number of boxes is not equal to the number of box destinations. * @throws IllegalArgumentException if there are boxes whose {@link Box#getPlayerId()} public GameState(@NotNull GameMap map) { this.undoQuota = map.undoLimit; this.destinations = map.getDestinations(); this.maxHeight = map.getMaxHeight(); this.maxWidth = map.getMaxWidth(); this.mapArr = map.getMap(); this.players = map.players; this.stateHistory = new ArrayList<Entity[][]>(0); original = deepCopyMap(this.mapArr); this.checkpoint(); } public void putEntity(Position position, Entity entity) { this.mapArr[position.y()][position.x()] = entity; } public @Nullable Entity getEntity(@NotNull Position position) { return this.mapArr[position.y()][position.x()]; } /** * Get all box destination positions as a set in the game map. * This should be the same as that in {@link GameMap}",
        "label": "F"
    },
    "1974": {
        "dataset": "COMP 3021",
        "project": "slwongah",
        "bug_id": "39",
        "T": "void testUndoWhenThereIsMoveButNoCheckpoint() { final var gameState = new GameState(TestHelper.parseGameMap(\"\"\" 233 ###### #A.a@# #..a@# ###### \"\"\" )); gameState.move(Position.of(1, 1), Position.of(2, 1)); gameState.undo(); }",
        "C": "public GameState(@NotNull GameMap map) { this.undoQuota = map.undoLimit; this.destinations = map.getDestinations(); this.maxHeight = map.getMaxHeight(); this.maxWidth = map.getMaxWidth(); this.mapArr = map.getMap(); this.players = map.players; this.stateHistory = new ArrayList<Entity[][]>(0); original = deepCopyMap(this.mapArr); this.checkpoint(); } public void move(Position from, Position to) { Entity tempEntity = mapArr[to.y()][to.x()]; mapArr[to.y()][to.x()] = mapArr[from.y()][from.x()]; mapArr[from.y()][from.x()] = tempEntity; } /** * Record a checkpoint of the game state, including: * <li>All current positions of entities in the game map.</li> * <li>Current undo quota</li> * <p> * Checkpoint is used in {@link GameState#undo()} public static @NotNull Position of(int x, int y) { return new Position(x, y); } public void undo() { if (this.equals(original)) return; if (stateHistory.isEmpty()){ this.mapArr = deepCopyMap(original); if (last != null) { undoQuota = undoQuota.isPresent() ? Optional.of(undoQuota.get() - 1) : undoQuota; } last = null; } else { int targetIndex = stateHistory.size() - 1; this.mapArr = deepCopyMap(stateHistory.get(targetIndex)); last = deepCopyMap(this.mapArr); stateHistory.remove(targetIndex); undoQuota = undoQuota.isPresent() ? Optional.of(undoQuota.get() - 1) : undoQuota; } } /** * Get the maximum width of the game map. * This should be the same as that in {@link GameMap}",
        "label": "F"
    },
    "1975": {
        "dataset": "COMP 3021",
        "project": "slwongah",
        "bug_id": "40",
        "T": "void testGameExit() { final var gameState = mock(GameState.class); final var inputEngine = mock(TerminalInputEngine.class); final var renderingEngine = mock(TerminalRenderingEngine.class); when(gameState.isWin()).thenReturn(false, false, false); when(inputEngine.fetchAction()) .thenReturn(new InvalidInput(0, \"\"), new InvalidInput(0, \"\"), new Exit(0)); final var game = new TerminalSokobanGame(gameState, inputEngine, renderingEngine); game.run(); verify(renderingEngine, atLeastOnce()).message(any()); }",
        "C": "public InvalidInput(int initiator, @NotNull String message) { super(initiator); this.message = message; } public Exit(int initiator) { super(initiator); } public TerminalSokobanGame(GameState gameState, TerminalInputEngine inputEngine, TerminalRenderingEngine renderingEngine) { super(gameState); this.inputEngine = inputEngine; this.renderingEngine = renderingEngine; if (gameState.getAllPlayerPositions().size() > 2) throw new IllegalArgumentException(\"TerminalSokobanGame only support at most two players.\"); } public void run() { renderingEngine.message(\"Sokoban game is ready.\"); renderingEngine.render(state); Optional<Integer> undoQuota = state.getUndoQuota(); if (undoQuota.isPresent()) { renderingEngine.message(\"\\nUndo Quota: \" + undoQuota.get()); } else renderingEngine.message(\"\\nUnlimited\"); Action action; ActionResult result; while (true){ action = inputEngine.fetchAction(); result = processAction(action); undoQuota = state.getUndoQuota(); if (result instanceof ActionResult.Failed) renderingEngine.message(((ActionResult.Failed) result).getReason()); renderingEngine.render(state); if (action instanceof Exit) { renderingEngine.message(((ActionResult.Failed) result).getReason()); break; } if (state.isWin()){ renderingEngine.message(\"\\nGame exits.\\nYou win.\"); break; } if (undoQuota.isPresent()) { renderingEngine.message(\"\\nUndo Quota: \" + undoQuota.get()); } else renderingEngine.message(\"\\nUnlimited\"); } }",
        "label": "P"
    },
    "1976": {
        "dataset": "COMP 3021",
        "project": "slwongah",
        "bug_id": "41",
        "T": "void testGameWin() { final var gameState = mock(GameState.class); final var inputEngine = mock(TerminalInputEngine.class); final var renderingEngine = mock(TerminalRenderingEngine.class); when(gameState.isWin()).thenReturn(false, false, false, true); when(inputEngine.fetchAction()) .thenReturn(new InvalidInput(0, \"\")); final var game = new TerminalSokobanGame(gameState, inputEngine, renderingEngine); game.run(); verify(gameState, atLeastOnce()).isWin(); verify(renderingEngine, atLeastOnce()).message(any()); }",
        "C": "public InvalidInput(int initiator, @NotNull String message) { super(initiator); this.message = message; } public TerminalSokobanGame(GameState gameState, TerminalInputEngine inputEngine, TerminalRenderingEngine renderingEngine) { super(gameState); this.inputEngine = inputEngine; this.renderingEngine = renderingEngine; if (gameState.getAllPlayerPositions().size() > 2) throw new IllegalArgumentException(\"TerminalSokobanGame only support at most two players.\"); } public void run() { renderingEngine.message(\"Sokoban game is ready.\"); renderingEngine.render(state); Optional<Integer> undoQuota = state.getUndoQuota(); if (undoQuota.isPresent()) { renderingEngine.message(\"\\nUndo Quota: \" + undoQuota.get()); } else renderingEngine.message(\"\\nUnlimited\"); Action action; ActionResult result; while (true){ action = inputEngine.fetchAction(); result = processAction(action); undoQuota = state.getUndoQuota(); if (result instanceof ActionResult.Failed) renderingEngine.message(((ActionResult.Failed) result).getReason()); renderingEngine.render(state); if (action instanceof Exit) { renderingEngine.message(((ActionResult.Failed) result).getReason()); break; } if (state.isWin()){ renderingEngine.message(\"\\nGame exits.\\nYou win.\"); break; } if (undoQuota.isPresent()) { renderingEngine.message(\"\\nUndo Quota: \" + undoQuota.get()); } else renderingEngine.message(\"\\nUnlimited\"); } }",
        "label": "P"
    },
    "1977": {
        "dataset": "COMP 3021",
        "project": "slwongah",
        "bug_id": "42",
        "T": "void testMoreThanTwoPlayers() { final var gameState = mock(GameState.class); final var inputEngine = mock(TerminalInputEngine.class); final var renderingEngine = mock(TerminalRenderingEngine.class); when(gameState.getAllPlayerPositions()).thenReturn(new HashSet<>(Arrays.asList(Position.of(1, 1), Position.of(1, 2), Position.of(1, 3)))); }",
        "C": "public static @NotNull Position of(int x, int y) { return new Position(x, y); }",
        "label": "P"
    },
    "1978": {
        "dataset": "COMP 3021",
        "project": "snab",
        "bug_id": "0",
        "T": "void moveUp() { Position.of(233, 232), new Move.Up(-1).nextPosition(pos) ); }",
        "C": "public static @NotNull Position of(int x, int y) { return new Position(x, y); } public Up(int initiator) { super(initiator); }",
        "label": "P"
    },
    "1979": {
        "dataset": "COMP 3021",
        "project": "snab",
        "bug_id": "1",
        "T": "void moveDown() { Position.of(233, 234), new Move.Down(-1).nextPosition(pos) ); }",
        "C": "public static @NotNull Position of(int x, int y) { return new Position(x, y); } public Down(int initiator) { super(initiator); }",
        "label": "P"
    },
    "1980": {
        "dataset": "COMP 3021",
        "project": "snab",
        "bug_id": "2",
        "T": "void moveRight() { Position.of(234, 233), new Move.Right(-1).nextPosition(pos) ); }",
        "C": "public static @NotNull Position of(int x, int y) { return new Position(x, y); } public Right(int initiator) { super(initiator); }",
        "label": "P"
    },
    "1981": {
        "dataset": "COMP 3021",
        "project": "snab",
        "bug_id": "3",
        "T": "void testExceedingUndoQuota() { final var gameState = mock(GameState.class); when(gameState.getPlayerPositionById(anyInt())).thenReturn(Position.of(0, 0)); when(gameState.getUndoQuota()).thenReturn(Optional.of(0)); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Undo(0)); }",
        "C": "public Undo(int initiator) { super(initiator); }",
        "label": "P"
    },
    "1982": {
        "dataset": "COMP 3021",
        "project": "snab",
        "bug_id": "4",
        "T": "void testExit() { final var gameState = mock(GameState.class); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Exit(0)); }",
        "C": "public Exit(int initiator) { super(initiator); }",
        "label": "F"
    },
    "1983": {
        "dataset": "COMP 3021",
        "project": "snab",
        "bug_id": "5",
        "T": "void testUndoUnlimited() { final var gameState = mock(GameState.class); when(gameState.getPlayerPositionById(anyInt())).thenReturn(Position.of(0, 0)); when(gameState.getUndoQuota()).thenReturn(Optional.empty()); final var game = new SokobanGameForTesting(gameState); for (int i = 0; i < 10000; i++) { final var result = game.feedActionForProcessing(new Undo(0)); } verify(gameState, times(10000)).undo(); }",
        "C": "public TerminalRenderingEngine(PrintStream outputSteam) { this.outputSteam = outputSteam; } public Undo(int initiator) { super(initiator); }",
        "label": "F"
    },
    "1984": {
        "dataset": "COMP 3021",
        "project": "snab",
        "bug_id": "6",
        "T": "void testPushOtherPlayerBox() { String mapText = \"\"\" 233 ###### #AB.@# #b.a.# #@...# ###### \"\"\"; final var testMap = TestHelper.parseGameMap(mapText); final var gameState = spy(new GameState(testMap)); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Move.Down(0)); verify(gameState, never()).move(any(), any()); }",
        "C": "public GameState(@NotNull GameMap map) { // TODO this.gameMap = map; cpMap.add(map.getMap()); } public Down(int initiator) { super(initiator); }",
        "label": "P"
    },
    "1985": {
        "dataset": "COMP 3021",
        "project": "snab",
        "bug_id": "7",
        "T": "void testMoveNonExistingPlayer() { String mapText = \"\"\" 233 ###### #A..@# #a...# ##...# ###### \"\"\"; final var testMap = TestHelper.parseGameMap(mapText); final var gameState = spy(new GameState(testMap)); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Move.Down(23)); }",
        "C": "public GameState(@NotNull GameMap map) { // TODO this.gameMap = map; cpMap.add(map.getMap()); } public Down(int initiator) { super(initiator); }",
        "label": "P"
    },
    "1986": {
        "dataset": "COMP 3021",
        "project": "snab",
        "bug_id": "8",
        "T": "void testCheckpointWhenNeed() { final var gameState = spy(new GameState(TestHelper.parseGameMap(\"\"\" 233 ###### #.Aa@# #..a@# ###### \"\"\" ))); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Move.Right(0)); verify(gameState, times(1)).checkpoint(); }",
        "C": "public GameState(@NotNull GameMap map) { // TODO this.gameMap = map; cpMap.add(map.getMap()); } public Right(int initiator) { super(initiator); }",
        "label": "P"
    },
    "1987": {
        "dataset": "COMP 3021",
        "project": "snab",
        "bug_id": "9",
        "T": "void testPushBoxAgainstWall() { String mapText = \"\"\" 233 ###### #A..@# #a...# ##...# ###### \"\"\"; final var testMap = TestHelper.parseGameMap(mapText); final var gameState = spy(new GameState(testMap)); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Move.Down(0)); verify(gameState, never()).move(any(), any()); }",
        "C": "public GameState(@NotNull GameMap map) { // TODO this.gameMap = map; cpMap.add(map.getMap()); } public Down(int initiator) { super(initiator); }",
        "label": "P"
    },
    "1988": {
        "dataset": "COMP 3021",
        "project": "snab",
        "bug_id": "10",
        "T": "void testCheckpointWhenNotNeed() { final var gameState = spy(new GameState(TestHelper.parseGameMap(\"\"\" 233 ###### #A.a@# #..a@# ###### \"\"\" ))); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Move.Right(0)); verify(gameState, never()).checkpoint(); } private static class SokobanGameForTesting extends AbstractSokobanGame { protected SokobanGameForTesting(GameState gameState) { super(gameState); } @Override public void run() { } public ActionResult feedActionForProcessing(Action action) { return processAction(action); } }",
        "C": "public GameState(@NotNull GameMap map) { // TODO this.gameMap = map; cpMap.add(map.getMap()); } public Right(int initiator) { super(initiator); } public void run() { // TODO renderingEngine.message(StringResources.GAME_READY_MESSAGE); renderingEngine.render(gameState); if (state.getUndoQuota().isPresent()){ renderingEngine.message(\"Undo Quota: \" + state.getUndoQuota().get()); } else { renderingEngine.message(StringResources.UNDO_QUOTA_UNLIMITED); } Action a = null; while (true){ if ((gameState.isWin())){ renderingEngine.message(StringResources.GAME_EXIT_MESSAGE); renderingEngine.message(StringResources.WIN_MESSAGE); break; } a = inputEngine.fetchAction(); ActionResult k = processAction(a); if (k instanceof ActionResult.Failed){ renderingEngine.message(((ActionResult.Failed) k).getReason()); renderingEngine.render(gameState); } else{ renderingEngine.render(gameState); if (a instanceof Exit){ break; } } if (state.getUndoQuota().isPresent()){ renderingEngine.message(\"Undo Quota: \" + state.getUndoQuota().get()); } else { renderingEngine.message(StringResources.UNDO_QUOTA_UNLIMITED); } } } protected ActionResult processAction(@NotNull Action action) { // TODO if (action instanceof Exit) { return new ActionResult.Success(action); } else if (action instanceof Undo) { if (Optional.of(0).get() < state.getUndoQuota().get()) { state.undo(); return new ActionResult.Success(action); } return new ActionResult.Failed(action, StringResources.UNDO_QUOTA_RUN_OUT); } Position p = state.getPlayerPositionById(action.getInitiator()); if (p != null) { if (action instanceof Move.Down) { if (state.getEntity(Position.of(p.x(), p.y() + 1)) instanceof Wall) { return new ActionResult.Failed(action, \"You hit a wall.\"); } else if (state.getEntity(Position.of(p.x(), p.y() + 1)) instanceof Box) { if (((Box) state.getEntity(Position.of(p.x(), p.y() + 1))).getPlayerId() == action.getInitiator()) { if (state.getEntity(Position.of(p.x(), p.y() + 2)) instanceof Wall || state.getEntity(Position.of(p.x(), p.y() + 2)) instanceof Box || state.getEntity(Position.of(p.x(), p.y() + 2)) instanceof Player) { return new ActionResult.Failed(action, \"Failed to push the box.\"); } else if (state.getEntity(Position.of(p.x(), p.y() + 2)) instanceof Empty) { state.move(Position.of(p.x(), p.y() + 1), Position.of(p.x(), p.y() + 2)); state.move(p, Position.of(p.x(), p.y() + 1)); state.checkpoint(); return new ActionResult.Success(action); } } else{ return new ActionResult.Failed(action, \"You cannot move other players' boxes.\"); } } else if (state.getEntity(Position.of(p.x(), p.y() + 1)) instanceof Empty) { state.move(p, Position.of(p.x(), p.y() + 1)); return new ActionResult.Success(action); } } else if (action instanceof Move.Up) { if (state.getEntity(Position.of(p.x(), p.y() - 1)) instanceof Wall) { return new ActionResult.Failed(action, \"You hit a wall.\"); } else if (state.getEntity(Position.of(p.x(), p.y() - 1)) instanceof Box) { if (((Box) state.getEntity(Position.of(p.x(), p.y() - 1))).getPlayerId() == action.getInitiator()) { if (state.getEntity(Position.of(p.x(), p.y() - 2)) instanceof Wall || state.getEntity(Position.of(p.x(), p.y() - 2)) instanceof Box || state.getEntity(Position.of(p.x(), p.y() - 2)) instanceof Player) { return new ActionResult.Failed(action, \"Failed to push the box.\"); } else if (state.getEntity(Position.of(p.x(), p.y() - 2)) instanceof Empty) { state.move(Position.of(p.x(), p.y() - 1), Position.of(p.x(), p.y() - 2)); state.move(p, Position.of(p.x(), p.y() - 1)); state.checkpoint(); return new ActionResult.Success(action); } } else { return new ActionResult.Failed(action, \"You cannot move other players' boxes.\"); } } else if (state.getEntity(Position.of(p.x(), p.y() - 1)) instanceof Empty) { state.move(p, Position.of(p.x(), p.y() - 1)); return new ActionResult.Success(action); } } else if (action instanceof Move.Left) { if (state.getEntity(Position.of(p.x() - 1, p.y())) instanceof Wall) { return new ActionResult.Failed(action, \"You hit a wall.\"); } else if (state.getEntity(Position.of(p.x() - 1, p.y())) instanceof Box) { if (((Box) state.getEntity(Position.of(p.x()-1, p.y()))).getPlayerId()== action.getInitiator()) { if (state.getEntity(Position.of(p.x() - 2, p.y())) instanceof Wall || state.getEntity(Position.of(p.x() - 2, p.y())) instanceof Box || state.getEntity(Position.of(p.x() - 2, p.y())) instanceof Player) { return new ActionResult.Failed(action, \"Failed to push the box.\"); } else if (state.getEntity(Position.of(p.x() - 2, p.y())) instanceof Empty) { state.move(Position.of(p.x() - 1, p.y()), Position.of(p.x() - 2, p.y())); state.move(p, Position.of(p.x() - 1, p.y())); state.checkpoint(); return new ActionResult.Success(action); } } else { return new ActionResult.Failed(action, \"You cannot move other players' boxes.\"); } } else if (state.getEntity(Position.of(p.x() - 1, p.y())) instanceof Empty) { state.move(p, Position.of(p.x() - 1, p.y())); return new ActionResult.Success(action); } } else if (action instanceof Move.Right) { if (state.getEntity(Position.of(p.x() + 1, p.y())) instanceof Wall) { return new ActionResult.Failed(action, \"You hit a wall.\"); } else if (state.getEntity(Position.of(p.x() + 1, p.y())) instanceof Box) { if (((Box) state.getEntity(Position.of(p.x()+1, p.y()))).getPlayerId() == action.getInitiator()) { if (state.getEntity(Position.of(p.x() + 2, p.y())) instanceof Wall || state.getEntity(Position.of(p.x() + 2, p.y())) instanceof Box || state.getEntity(Position.of(p.x() + 2, p.y())) instanceof Player) { return new ActionResult.Failed(action, \"Failed to push the box.\"); } else if (state.getEntity(Position.of(p.x() + 2, p.y())) instanceof Empty) { state.move(Position.of(p.x() + 1, p.y()), Position.of(p.x() + 2, p.y())); state.move(p, Position.of(p.x() + 1, p.y())); state.checkpoint(); return new ActionResult.Success(action); } } else { return new ActionResult.Failed(action, \"You cannot move other players' boxes.\"); } } else if (state.getEntity(Position.of(p.x() + 1, p.y())) instanceof Empty) { state.move(p, Position.of(p.x() + 1, p.y())); return new ActionResult.Success(action); } } else if (action instanceof InvalidInput) { state.getUndoQuota(); return new ActionResult.Failed(action, StringResources.INVALID_INPUT_MESSAGE); } } else{ return new ActionResult.Failed(action, StringResources.PLAYER_NOT_FOUND); } return null; }",
        "label": "P"
    },
    "1989": {
        "dataset": "COMP 3021",
        "project": "snab",
        "bug_id": "11",
        "T": "void testHitAnotherPlayer() { String mapText = \"\"\" 233 ###### #A..@# #B...# #ab.@# ###### \"\"\"; final var testMap = TestHelper.parseGameMap(mapText); final var gameState = spy(new GameState(testMap)); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Move.Down(0)); verify(gameState, never()).move(any(), any()); }",
        "C": "public GameState(@NotNull GameMap map) { // TODO this.gameMap = map; cpMap.add(map.getMap()); } public Down(int initiator) { super(initiator); }",
        "label": "F"
    },
    "1990": {
        "dataset": "COMP 3021",
        "project": "snab",
        "bug_id": "12",
        "T": "void testUndoWithinQuota() { final var gameState = mock(GameState.class); when(gameState.getPlayerPositionById(anyInt())).thenReturn(Position.of(0, 0)); when(gameState.getUndoQuota()).thenReturn(Optional.of(1)); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Undo(0)); verify(gameState, times(1)).undo(); }",
        "C": "public Undo(int initiator) { super(initiator); }",
        "label": "P"
    },
    "1991": {
        "dataset": "COMP 3021",
        "project": "snab",
        "bug_id": "13",
        "T": "void testInvalidInput() { final var game = new SokobanGameForTesting(mock(GameState.class)); final var message = String.valueOf(new Random().nextLong()); final var action = new InvalidInput(-1, message); final var result = game.feedActionForProcessing(action); }",
        "C": "public InvalidInput(int initiator, @NotNull String message) { super(initiator); this.message = message; }",
        "label": "P"
    },
    "1992": {
        "dataset": "COMP 3021",
        "project": "snab",
        "bug_id": "14",
        "T": "void testUndoLimitParsing() { final var gameMap = TestHelper.parseGameMap(rectangularMap); }",
        "C": "",
        "label": "P"
    },
    "1993": {
        "dataset": "COMP 3021",
        "project": "snab",
        "bug_id": "15",
        "T": "void testWidthForNonRectangularMap() { final var gameMap = TestHelper.parseGameMap(nonRectangularMap); }",
        "C": "",
        "label": "P"
    },
    "1994": {
        "dataset": "COMP 3021",
        "project": "snab",
        "bug_id": "16",
        "T": "void testTwoPlayersMap() { final var twoPlayersMap = \"\"\" 233 ###### #A..@# #..B@# #....# #.a..# #..b.# ###### \"\"\"; final var gameMap = TestHelper.parseGameMap(twoPlayersMap); final var playerIds = gameMap.getPlayerIds(); final var expectedIds = new HashSet<Integer>(); expectedIds.add(0); expectedIds.add(1); }",
        "C": "public Set<Integer> getPlayerIds() { // TODO String[] arr = map.split(\"\\n\"); Set<Integer> idList = new HashSet<Integer>(); for (int i = 1; i < arr.length-1; i++) { for (int j = 0; j < arr[i].length(); j++) { if (arr[i] != \" \") { if (Character.isUpperCase(arr[i].charAt(j))) { idList.add(arr[i].charAt(j) - 'A'); } } } } return idList; }",
        "label": "P"
    },
    "1995": {
        "dataset": "COMP 3021",
        "project": "snab",
        "bug_id": "17",
        "T": "void testMapWithoutPlayer() { final var invalidMap = \"\"\" 233 ### #.# ### \"\"\"; } // @Tag(TestKind.HIDDEN) // @Test // void testUnmatchedPlayersAndBoxes() { // final var invalidMap = \"\"\" // 233 // ###### // #A..@# // #...@# // #a.b@# // #.a.@# // #..a.# // ###### // \"\"\"; // assertThrowsExactly(IllegalArgumentException.class, () -> TestHelper.parseGameMap(invalidMap)); // }",
        "C": "public TerminalRenderingEngine(PrintStream outputSteam) { this.outputSteam = outputSteam; }",
        "label": "P"
    },
    "1996": {
        "dataset": "COMP 3021",
        "project": "snab",
        "bug_id": "18",
        "T": "void testManyPlayersMap() { final var manyPlayersMap = \"\"\" 233 ###### #A.P@@# #vCB@@# #.cpD@# #Ga.d@# #g.bV@# ###### \"\"\"; final var gameMap = TestHelper.parseGameMap(manyPlayersMap); final var playerIds = gameMap.getPlayerIds(); final var expectedIds = new HashSet<>(Arrays.asList( 0, 'P' - 'A', 'C' - 'A', 'B' - 'A', 'D' - 'A', 'G' - 'A', 'V' - 'A' )); }",
        "C": "public Set<Integer> getPlayerIds() { // TODO String[] arr = map.split(\"\\n\"); Set<Integer> idList = new HashSet<Integer>(); for (int i = 1; i < arr.length-1; i++) { for (int j = 0; j < arr[i].length(); j++) { if (arr[i] != \" \") { if (Character.isUpperCase(arr[i].charAt(j))) { idList.add(arr[i].charAt(j) - 'A'); } } } } return idList; }",
        "label": "P"
    },
    "1997": {
        "dataset": "COMP 3021",
        "project": "snab",
        "bug_id": "19",
        "T": "void testHeightForNonRectangularMap() { final var gameMap = TestHelper.parseGameMap(nonRectangularMap); }",
        "C": "",
        "label": "P"
    },
    "1998": {
        "dataset": "COMP 3021",
        "project": "snab",
        "bug_id": "20",
        "T": "void testDuplicatedPlayers() { final var invalidMap = \"\"\" 233 ###### #A..@# #..A@# #....# #.a..# #..b.# ###### \"\"\"; }",
        "C": "",
        "label": "F"
    },
    "1999": {
        "dataset": "COMP 3021",
        "project": "snab",
        "bug_id": "21",
        "T": "void testParseMapWithoutUndoLimit() { final var invalidMap = String.join(\"\\n\", rectangularMap.lines().skip(1).toList()); }",
        "C": "",
        "label": "P"
    },
    "2000": {
        "dataset": "COMP 3021",
        "project": "snab",
        "bug_id": "22",
        "T": "void testInsufficientDestinations() { final var invalidMap = \"\"\" 233 ###### #A..@# #...@# #a...# #.a..# #..a.# ###### \"\"\"; }",
        "C": "",
        "label": "P"
    },
    "2001": {
        "dataset": "COMP 3021",
        "project": "snab",
        "bug_id": "23",
        "T": "void testSuperLargeMap() { try { new GameMap(Integer.MAX_VALUE, Integer.MAX_VALUE, Collections.emptySet(), 0); } catch (OutOfMemoryError e) { throw new RuntimeException(e); } }); }",
        "C": "public GameMap(int maxWidth, int maxHeight, Set<Position> destinations, int undoLimit) { // TODO this.maxWidth = maxWidth; this.maxHeight = maxHeight; this.destinations = destinations; this.undoLimit = undoLimit; } /** * Parses the map from a string representation. * The first line is undo limit. * Starting from the second line, the game map is represented as follows, * <li># represents a {@link Wall}</li> * <li>@ represents a box destination.</li> * <li>Any upper-case letter represents a {@link Player}.</li> * <li> * Any lower-case letter represents a {@link Box} that is only movable by the player with the corresponding upper-case letter. * For instance, box \"a\" can only be moved by player \"A\" and not movable by player \"B\". * </li> * <li>. represents an {@link Empty} position in the map, meaning there is no player or box currently at this position.</li> * <p> * Notes: * <li> * There can be at most 26 players. * All implementations of classes in the hk.ust.comp3021.game package should support up to 26 players. * </li> * <li> * For simplicity, we assume the given map is bounded with a closed boundary. * There is no need to check this point. * </li> * <li> * Example maps can be found in \"src/main/resources\". * </li> * * @param mapText The string representation. * @return The parsed GameMap object. * @throws IllegalArgumentException if undo limit is negative but not -1. * @throws IllegalArgumentException if there are multiple same upper-case letters, i.e., one player can only exist at one position. * @throws IllegalArgumentException if there are no players in the map. * @throws IllegalArgumentException if the number of boxes is not equal to the number of box destinations. * @throws IllegalArgumentException if there are boxes whose {@link Box#getPlayerId()} public TerminalRenderingEngine(PrintStream outputSteam) { this.outputSteam = outputSteam; }",
        "label": "P"
    },
    "2002": {
        "dataset": "COMP 3021",
        "project": "snab",
        "bug_id": "24",
        "T": "void testInvalidUndoLimit() { final var invalidMap = \"\"\" -233 ###### #A..@# #...@# #a.b@# #.a.@# #..a.# ###### \"\"\"; }",
        "C": "",
        "label": "F"
    },
    "2003": {
        "dataset": "COMP 3021",
        "project": "snab",
        "bug_id": "25",
        "T": "void testEmptyMap() { final var invalidMap = \"\"; }",
        "C": "",
        "label": "P"
    },
    "2004": {
        "dataset": "COMP 3021",
        "project": "snab",
        "bug_id": "26",
        "T": "void testMove(String input, String name, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); } private InputStream fixValueStream(String content) { final var bytes = content.getBytes(StandardCharsets.UTF_8); return new ByteArrayInputStream(bytes); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine(); // TODO if (inputLine.equals(\"exit\")){ return new Exit(0); } else if (inputLine.equals(\"a\")){ return new Move.Left(0); } else if (inputLine.equals(\"s\")){ return new Move.Down(0); } else if (inputLine.equals(\"w\")){ return new Move.Up(0); } else if (inputLine.equals(\"d\")){ return new Move.Right(0); } else if (inputLine.equals(\"u\")){ return new Undo(0); } else if (inputLine.equals(\"h\")){ return new Move.Left(1); } else if (inputLine.equals(\"j\")){ return new Move.Down(1); } else if (inputLine.equals(\"k\")){ return new Move.Up(1); } else if (inputLine.equals(\"l\")){ return new Move.Right(1); } return new InvalidInput(0, StringResources.INVALID_INPUT_MESSAGE); }",
        "label": "P"
    },
    "2005": {
        "dataset": "COMP 3021",
        "project": "snab",
        "bug_id": "27",
        "T": "void testMove(String input, String name, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); } private InputStream fixValueStream(String content) { final var bytes = content.getBytes(StandardCharsets.UTF_8); return new ByteArrayInputStream(bytes); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine(); // TODO if (inputLine.equals(\"exit\")){ return new Exit(0); } else if (inputLine.equals(\"a\")){ return new Move.Left(0); } else if (inputLine.equals(\"s\")){ return new Move.Down(0); } else if (inputLine.equals(\"w\")){ return new Move.Up(0); } else if (inputLine.equals(\"d\")){ return new Move.Right(0); } else if (inputLine.equals(\"u\")){ return new Undo(0); } else if (inputLine.equals(\"h\")){ return new Move.Left(1); } else if (inputLine.equals(\"j\")){ return new Move.Down(1); } else if (inputLine.equals(\"k\")){ return new Move.Up(1); } else if (inputLine.equals(\"l\")){ return new Move.Right(1); } return new InvalidInput(0, StringResources.INVALID_INPUT_MESSAGE); }",
        "label": "P"
    },
    "2006": {
        "dataset": "COMP 3021",
        "project": "snab",
        "bug_id": "28",
        "T": "void testMove(String input, String name, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); } private InputStream fixValueStream(String content) { final var bytes = content.getBytes(StandardCharsets.UTF_8); return new ByteArrayInputStream(bytes); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine(); // TODO if (inputLine.equals(\"exit\")){ return new Exit(0); } else if (inputLine.equals(\"a\")){ return new Move.Left(0); } else if (inputLine.equals(\"s\")){ return new Move.Down(0); } else if (inputLine.equals(\"w\")){ return new Move.Up(0); } else if (inputLine.equals(\"d\")){ return new Move.Right(0); } else if (inputLine.equals(\"u\")){ return new Undo(0); } else if (inputLine.equals(\"h\")){ return new Move.Left(1); } else if (inputLine.equals(\"j\")){ return new Move.Down(1); } else if (inputLine.equals(\"k\")){ return new Move.Up(1); } else if (inputLine.equals(\"l\")){ return new Move.Right(1); } return new InvalidInput(0, StringResources.INVALID_INPUT_MESSAGE); }",
        "label": "P"
    },
    "2007": {
        "dataset": "COMP 3021",
        "project": "snab",
        "bug_id": "29",
        "T": "void testMove(String input, String name, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); } private InputStream fixValueStream(String content) { final var bytes = content.getBytes(StandardCharsets.UTF_8); return new ByteArrayInputStream(bytes); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine(); // TODO if (inputLine.equals(\"exit\")){ return new Exit(0); } else if (inputLine.equals(\"a\")){ return new Move.Left(0); } else if (inputLine.equals(\"s\")){ return new Move.Down(0); } else if (inputLine.equals(\"w\")){ return new Move.Up(0); } else if (inputLine.equals(\"d\")){ return new Move.Right(0); } else if (inputLine.equals(\"u\")){ return new Undo(0); } else if (inputLine.equals(\"h\")){ return new Move.Left(1); } else if (inputLine.equals(\"j\")){ return new Move.Down(1); } else if (inputLine.equals(\"k\")){ return new Move.Up(1); } else if (inputLine.equals(\"l\")){ return new Move.Right(1); } return new InvalidInput(0, StringResources.INVALID_INPUT_MESSAGE); }",
        "label": "P"
    },
    "2008": {
        "dataset": "COMP 3021",
        "project": "snab",
        "bug_id": "30",
        "T": "void testMove(String input, String name, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); } private InputStream fixValueStream(String content) { final var bytes = content.getBytes(StandardCharsets.UTF_8); return new ByteArrayInputStream(bytes); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine(); // TODO if (inputLine.equals(\"exit\")){ return new Exit(0); } else if (inputLine.equals(\"a\")){ return new Move.Left(0); } else if (inputLine.equals(\"s\")){ return new Move.Down(0); } else if (inputLine.equals(\"w\")){ return new Move.Up(0); } else if (inputLine.equals(\"d\")){ return new Move.Right(0); } else if (inputLine.equals(\"u\")){ return new Undo(0); } else if (inputLine.equals(\"h\")){ return new Move.Left(1); } else if (inputLine.equals(\"j\")){ return new Move.Down(1); } else if (inputLine.equals(\"k\")){ return new Move.Up(1); } else if (inputLine.equals(\"l\")){ return new Move.Right(1); } return new InvalidInput(0, StringResources.INVALID_INPUT_MESSAGE); }",
        "label": "P"
    },
    "2009": {
        "dataset": "COMP 3021",
        "project": "snab",
        "bug_id": "31",
        "T": "void testMove(String input, String name, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); } private InputStream fixValueStream(String content) { final var bytes = content.getBytes(StandardCharsets.UTF_8); return new ByteArrayInputStream(bytes); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine(); // TODO if (inputLine.equals(\"exit\")){ return new Exit(0); } else if (inputLine.equals(\"a\")){ return new Move.Left(0); } else if (inputLine.equals(\"s\")){ return new Move.Down(0); } else if (inputLine.equals(\"w\")){ return new Move.Up(0); } else if (inputLine.equals(\"d\")){ return new Move.Right(0); } else if (inputLine.equals(\"u\")){ return new Undo(0); } else if (inputLine.equals(\"h\")){ return new Move.Left(1); } else if (inputLine.equals(\"j\")){ return new Move.Down(1); } else if (inputLine.equals(\"k\")){ return new Move.Up(1); } else if (inputLine.equals(\"l\")){ return new Move.Right(1); } return new InvalidInput(0, StringResources.INVALID_INPUT_MESSAGE); }",
        "label": "P"
    },
    "2010": {
        "dataset": "COMP 3021",
        "project": "snab",
        "bug_id": "32",
        "T": "void testMove(String input, String name, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); } private InputStream fixValueStream(String content) { final var bytes = content.getBytes(StandardCharsets.UTF_8); return new ByteArrayInputStream(bytes); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine(); // TODO if (inputLine.equals(\"exit\")){ return new Exit(0); } else if (inputLine.equals(\"a\")){ return new Move.Left(0); } else if (inputLine.equals(\"s\")){ return new Move.Down(0); } else if (inputLine.equals(\"w\")){ return new Move.Up(0); } else if (inputLine.equals(\"d\")){ return new Move.Right(0); } else if (inputLine.equals(\"u\")){ return new Undo(0); } else if (inputLine.equals(\"h\")){ return new Move.Left(1); } else if (inputLine.equals(\"j\")){ return new Move.Down(1); } else if (inputLine.equals(\"k\")){ return new Move.Up(1); } else if (inputLine.equals(\"l\")){ return new Move.Right(1); } return new InvalidInput(0, StringResources.INVALID_INPUT_MESSAGE); }",
        "label": "P"
    },
    "2011": {
        "dataset": "COMP 3021",
        "project": "snab",
        "bug_id": "33",
        "T": "void testMove(String input, String name, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); } private InputStream fixValueStream(String content) { final var bytes = content.getBytes(StandardCharsets.UTF_8); return new ByteArrayInputStream(bytes); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine(); // TODO if (inputLine.equals(\"exit\")){ return new Exit(0); } else if (inputLine.equals(\"a\")){ return new Move.Left(0); } else if (inputLine.equals(\"s\")){ return new Move.Down(0); } else if (inputLine.equals(\"w\")){ return new Move.Up(0); } else if (inputLine.equals(\"d\")){ return new Move.Right(0); } else if (inputLine.equals(\"u\")){ return new Undo(0); } else if (inputLine.equals(\"h\")){ return new Move.Left(1); } else if (inputLine.equals(\"j\")){ return new Move.Down(1); } else if (inputLine.equals(\"k\")){ return new Move.Up(1); } else if (inputLine.equals(\"l\")){ return new Move.Right(1); } return new InvalidInput(0, StringResources.INVALID_INPUT_MESSAGE); }",
        "label": "P"
    },
    "2012": {
        "dataset": "COMP 3021",
        "project": "snab",
        "bug_id": "34",
        "T": "void testUndo(String input, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine(); // TODO if (inputLine.equals(\"exit\")){ return new Exit(0); } else if (inputLine.equals(\"a\")){ return new Move.Left(0); } else if (inputLine.equals(\"s\")){ return new Move.Down(0); } else if (inputLine.equals(\"w\")){ return new Move.Up(0); } else if (inputLine.equals(\"d\")){ return new Move.Right(0); } else if (inputLine.equals(\"u\")){ return new Undo(0); } else if (inputLine.equals(\"h\")){ return new Move.Left(1); } else if (inputLine.equals(\"j\")){ return new Move.Down(1); } else if (inputLine.equals(\"k\")){ return new Move.Up(1); } else if (inputLine.equals(\"l\")){ return new Move.Right(1); } return new InvalidInput(0, StringResources.INVALID_INPUT_MESSAGE); }",
        "label": "P"
    },
    "2013": {
        "dataset": "COMP 3021",
        "project": "snab",
        "bug_id": "35",
        "T": "void testInvalidInput() { final var inputStream = fixValueStream(\"blah blah\"); final var inputEngine = new TerminalInputEngine(inputStream); final var action = inputEngine.fetchAction(); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine(); // TODO if (inputLine.equals(\"exit\")){ return new Exit(0); } else if (inputLine.equals(\"a\")){ return new Move.Left(0); } else if (inputLine.equals(\"s\")){ return new Move.Down(0); } else if (inputLine.equals(\"w\")){ return new Move.Up(0); } else if (inputLine.equals(\"d\")){ return new Move.Right(0); } else if (inputLine.equals(\"u\")){ return new Undo(0); } else if (inputLine.equals(\"h\")){ return new Move.Left(1); } else if (inputLine.equals(\"j\")){ return new Move.Down(1); } else if (inputLine.equals(\"k\")){ return new Move.Up(1); } else if (inputLine.equals(\"l\")){ return new Move.Right(1); } return new InvalidInput(0, StringResources.INVALID_INPUT_MESSAGE); }",
        "label": "P"
    },
    "2014": {
        "dataset": "COMP 3021",
        "project": "snab",
        "bug_id": "36",
        "T": "void testUndoWhenThereIsNoMove() { final var gameState = new GameState(TestHelper.parseGameMap(\"\"\" 233 ###### #A.a@# #..a@# ###### \"\"\" )); gameState.undo(); } private Entity generateEntity(int key) { return switch (key % 4) { case 0 -> new Box(0); case 1 -> new Empty(); case 2 -> new Player(0); case 3 -> new Wall(); default -> throw new ShouldNotReachException(); }; }",
        "C": "public GameState(@NotNull GameMap map) { // TODO this.gameMap = map; cpMap.add(map.getMap()); } public void undo() { // TODO if (cpMap.size() > 1){ cpMap.remove(cpMap.size()-1); gameMap.undoLimit--; gameMap.map = cpMap.get(cpMap.size()-1); } else{ if (gameMap.map != cpMap.get(0)){ gameMap.map = cpMap.get(0); gameMap.undoLimit--; } } } /** * Get the maximum width of the game map. * This should be the same as that in {@link GameMap} public TerminalRenderingEngine(PrintStream outputSteam) { this.outputSteam = outputSteam; } public Box(int playerId) { this.playerId = playerId; } public Player(int id) { this.id = id; } public ShouldNotReachException() { super(\"This branch should not be reached.\"); }",
        "label": "P"
    },
    "2015": {
        "dataset": "COMP 3021",
        "project": "snab",
        "bug_id": "37",
        "T": "void testGetUndoUnlimited() { final var gameState = new GameState(TestHelper.parseGameMap(\"\"\" -1 ###### #.Aa@# #..a@# ###### \"\"\" )); }",
        "C": "public GameState(@NotNull GameMap map) { // TODO this.gameMap = map; cpMap.add(map.getMap()); }",
        "label": "F"
    },
    "2016": {
        "dataset": "COMP 3021",
        "project": "snab",
        "bug_id": "38",
        "T": "void testMapCopying() { final var maxWidth = 2333; final var maxHeight = 2333; final var random = new Random(); final var randomEntities = Stream.generate(() -> Position.of(random.nextInt(maxWidth), random.nextInt(maxHeight))) .distinct() .limit(100) .collect(Collectors.toMap(Function.identity(), it -> generateEntity(it.x()))); final var firstPos = randomEntities.keySet().stream().findFirst(); final var gameMap = new GameMap(maxWidth, maxHeight, Collections.singleton(firstPos.get()), 233); randomEntities.forEach(gameMap::putEntity); final var gameState = new GameState(gameMap); final var randomPosition = randomEntities.keySet().stream().findAny(); gameMap.putEntity(randomPosition.get(), new Empty()); randomEntities.forEach((p, e) -> assertEquals(e, gameState.getEntity(p))); }",
        "C": "public static @NotNull Position of(int x, int y) { return new Position(x, y); } public GameMap(int maxWidth, int maxHeight, Set<Position> destinations, int undoLimit) { // TODO this.maxWidth = maxWidth; this.maxHeight = maxHeight; this.destinations = destinations; this.undoLimit = undoLimit; } /** * Parses the map from a string representation. * The first line is undo limit. * Starting from the second line, the game map is represented as follows, * <li># represents a {@link Wall}</li> * <li>@ represents a box destination.</li> * <li>Any upper-case letter represents a {@link Player}.</li> * <li> * Any lower-case letter represents a {@link Box} that is only movable by the player with the corresponding upper-case letter. * For instance, box \"a\" can only be moved by player \"A\" and not movable by player \"B\". * </li> * <li>. represents an {@link Empty} position in the map, meaning there is no player or box currently at this position.</li> * <p> * Notes: * <li> * There can be at most 26 players. * All implementations of classes in the hk.ust.comp3021.game package should support up to 26 players. * </li> * <li> * For simplicity, we assume the given map is bounded with a closed boundary. * There is no need to check this point. * </li> * <li> * Example maps can be found in \"src/main/resources\". * </li> * * @param mapText The string representation. * @return The parsed GameMap object. * @throws IllegalArgumentException if undo limit is negative but not -1. * @throws IllegalArgumentException if there are multiple same upper-case letters, i.e., one player can only exist at one position. * @throws IllegalArgumentException if there are no players in the map. * @throws IllegalArgumentException if the number of boxes is not equal to the number of box destinations. * @throws IllegalArgumentException if there are boxes whose {@link Box#getPlayerId()} public GameState(@NotNull GameMap map) { // TODO this.gameMap = map; cpMap.add(map.getMap()); } public void putEntity(Position position, Entity entity) { // TODO String[] arr = map.split(\"\\n\"); char e = ' '; int x = position.x(); int y = position.y(); if (entity instanceof Box){ e = (char) (((Box) entity).getPlayerId() + 'a'); } else if (entity instanceof Player){ e = (char) (((Player) entity).getId() + 'A'); } else if (entity instanceof Empty){ e = '.'; } else if (entity instanceof Wall){ e = '#'; } arr[y+1] = arr[y+1].substring(0, x) + e + arr[y+1].substring(x+1, arr[y+1].length()); String newMap = \"\"; for (int i = 0; i < arr.length; i++){ newMap = newMap + arr[i] + \"\\n\"; } map = newMap; } public @Nullable Entity getEntity(@NotNull Position position) { // TODO //return gameMap.getEntity(position); String map = gameMap.getMap(); String[] arr = map.split(\"\\n\", 10); int x = position.x(); int y = position.y(); if (x >= arr[y+1].length()){ return null; } char e = arr[y+1].charAt(x); if (Character.isLowerCase(e)){ return new Box(e-'a'); } else if (Character.isUpperCase(e)){ return new Player(e-'A'); } else if (e == '.' || e == '@'){ return new Empty(); } else if (e == '#'){ return new Wall(); } return null; } /** * Get all box destination positions as a set in the game map. * This should be the same as that in {@link GameMap}",
        "label": "F"
    },
    "2017": {
        "dataset": "COMP 3021",
        "project": "snab",
        "bug_id": "39",
        "T": "void testUndoWhenThereIsMoveButNoCheckpoint() { final var gameState = new GameState(TestHelper.parseGameMap(\"\"\" 233 ###### #A.a@# #..a@# ###### \"\"\" )); gameState.move(Position.of(1, 1), Position.of(2, 1)); gameState.undo(); }",
        "C": "public GameState(@NotNull GameMap map) { // TODO this.gameMap = map; cpMap.add(map.getMap()); } public void move(Position from, Position to) { // TODO gameMap.putEntity(to, gameMap.getEntity(from)); gameMap.putEntity(from, new Empty()); } /** * Record a checkpoint of the game state, including: * <li>All current positions of entities in the game map.</li> * <li>Current undo quota</li> * <p> * Checkpoint is used in {@link GameState#undo()} public static @NotNull Position of(int x, int y) { return new Position(x, y); } public void undo() { // TODO if (cpMap.size() > 1){ cpMap.remove(cpMap.size()-1); gameMap.undoLimit--; gameMap.map = cpMap.get(cpMap.size()-1); } else{ if (gameMap.map != cpMap.get(0)){ gameMap.map = cpMap.get(0); gameMap.undoLimit--; } } } /** * Get the maximum width of the game map. * This should be the same as that in {@link GameMap}",
        "label": "F"
    },
    "2018": {
        "dataset": "COMP 3021",
        "project": "snab",
        "bug_id": "40",
        "T": "void testGameExit() { final var gameState = mock(GameState.class); final var inputEngine = mock(TerminalInputEngine.class); final var renderingEngine = mock(TerminalRenderingEngine.class); when(gameState.isWin()).thenReturn(false, false, false); when(inputEngine.fetchAction()) .thenReturn(new InvalidInput(0, \"\"), new InvalidInput(0, \"\"), new Exit(0)); final var game = new TerminalSokobanGame(gameState, inputEngine, renderingEngine); game.run(); verify(renderingEngine, atLeastOnce()).message(any()); }",
        "C": "public InvalidInput(int initiator, @NotNull String message) { super(initiator); this.message = message; } public Exit(int initiator) { super(initiator); } public TerminalSokobanGame(GameState gameState, TerminalInputEngine inputEngine, TerminalRenderingEngine renderingEngine) { super(gameState); this.inputEngine = inputEngine; this.renderingEngine = renderingEngine; // TODO // Check the number of players this.gameState = gameState; int numPlayer = gameState.getAllPlayerPositions().size(); if (numPlayer > 2){ throw new IllegalArgumentException(); } } public void run() { // TODO renderingEngine.message(StringResources.GAME_READY_MESSAGE); renderingEngine.render(gameState); if (state.getUndoQuota().isPresent()){ renderingEngine.message(\"Undo Quota: \" + state.getUndoQuota().get()); } else { renderingEngine.message(StringResources.UNDO_QUOTA_UNLIMITED); } Action a = null; while (true){ if ((gameState.isWin())){ renderingEngine.message(StringResources.GAME_EXIT_MESSAGE); renderingEngine.message(StringResources.WIN_MESSAGE); break; } a = inputEngine.fetchAction(); ActionResult k = processAction(a); if (k instanceof ActionResult.Failed){ renderingEngine.message(((ActionResult.Failed) k).getReason()); renderingEngine.render(gameState); } else{ renderingEngine.render(gameState); if (a instanceof Exit){ break; } } if (state.getUndoQuota().isPresent()){ renderingEngine.message(\"Undo Quota: \" + state.getUndoQuota().get()); } else { renderingEngine.message(StringResources.UNDO_QUOTA_UNLIMITED); } } }",
        "label": "P"
    },
    "2019": {
        "dataset": "COMP 3021",
        "project": "snab",
        "bug_id": "41",
        "T": "void testGameWin() { final var gameState = mock(GameState.class); final var inputEngine = mock(TerminalInputEngine.class); final var renderingEngine = mock(TerminalRenderingEngine.class); when(gameState.isWin()).thenReturn(false, false, false, true); when(inputEngine.fetchAction()) .thenReturn(new InvalidInput(0, \"\")); final var game = new TerminalSokobanGame(gameState, inputEngine, renderingEngine); game.run(); verify(gameState, atLeastOnce()).isWin(); verify(renderingEngine, atLeastOnce()).message(any()); }",
        "C": "public InvalidInput(int initiator, @NotNull String message) { super(initiator); this.message = message; } public TerminalSokobanGame(GameState gameState, TerminalInputEngine inputEngine, TerminalRenderingEngine renderingEngine) { super(gameState); this.inputEngine = inputEngine; this.renderingEngine = renderingEngine; // TODO // Check the number of players this.gameState = gameState; int numPlayer = gameState.getAllPlayerPositions().size(); if (numPlayer > 2){ throw new IllegalArgumentException(); } } public void run() { // TODO renderingEngine.message(StringResources.GAME_READY_MESSAGE); renderingEngine.render(gameState); if (state.getUndoQuota().isPresent()){ renderingEngine.message(\"Undo Quota: \" + state.getUndoQuota().get()); } else { renderingEngine.message(StringResources.UNDO_QUOTA_UNLIMITED); } Action a = null; while (true){ if ((gameState.isWin())){ renderingEngine.message(StringResources.GAME_EXIT_MESSAGE); renderingEngine.message(StringResources.WIN_MESSAGE); break; } a = inputEngine.fetchAction(); ActionResult k = processAction(a); if (k instanceof ActionResult.Failed){ renderingEngine.message(((ActionResult.Failed) k).getReason()); renderingEngine.render(gameState); } else{ renderingEngine.render(gameState); if (a instanceof Exit){ break; } } if (state.getUndoQuota().isPresent()){ renderingEngine.message(\"Undo Quota: \" + state.getUndoQuota().get()); } else { renderingEngine.message(StringResources.UNDO_QUOTA_UNLIMITED); } } }",
        "label": "P"
    },
    "2020": {
        "dataset": "COMP 3021",
        "project": "snab",
        "bug_id": "42",
        "T": "void testMoreThanTwoPlayers() { final var gameState = mock(GameState.class); final var inputEngine = mock(TerminalInputEngine.class); final var renderingEngine = mock(TerminalRenderingEngine.class); when(gameState.getAllPlayerPositions()).thenReturn(new HashSet<>(Arrays.asList(Position.of(1, 1), Position.of(1, 2), Position.of(1, 3)))); }",
        "C": "public static @NotNull Position of(int x, int y) { return new Position(x, y); }",
        "label": "P"
    },
    "2021": {
        "dataset": "COMP 3021",
        "project": "mohaa",
        "bug_id": "0",
        "T": "void moveUp() { Position.of(233, 232), new Move.Up(-1).nextPosition(pos) ); }",
        "C": "public static @NotNull Position of(int x, int y) { return new Position(x, y); } public Up(int initiator) { super(initiator); }",
        "label": "P"
    },
    "2022": {
        "dataset": "COMP 3021",
        "project": "mohaa",
        "bug_id": "1",
        "T": "void moveDown() { Position.of(233, 234), new Move.Down(-1).nextPosition(pos) ); }",
        "C": "public static @NotNull Position of(int x, int y) { return new Position(x, y); } public Down(int initiator) { super(initiator); }",
        "label": "P"
    },
    "2023": {
        "dataset": "COMP 3021",
        "project": "mohaa",
        "bug_id": "2",
        "T": "void moveRight() { Position.of(234, 233), new Move.Right(-1).nextPosition(pos) ); }",
        "C": "public static @NotNull Position of(int x, int y) { return new Position(x, y); } public Right(int initiator) { super(initiator); }",
        "label": "P"
    },
    "2024": {
        "dataset": "COMP 3021",
        "project": "mohaa",
        "bug_id": "3",
        "T": "void testExceedingUndoQuota() { final var gameState = mock(GameState.class); when(gameState.getPlayerPositionById(anyInt())).thenReturn(Position.of(0, 0)); when(gameState.getUndoQuota()).thenReturn(Optional.of(0)); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Undo(0)); }",
        "C": "public Undo(int initiator) { super(initiator); }",
        "label": "P"
    },
    "2025": {
        "dataset": "COMP 3021",
        "project": "mohaa",
        "bug_id": "4",
        "T": "void testExit() { final var gameState = mock(GameState.class); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Exit(0)); }",
        "C": "public Exit(int initiator) { super(initiator); }",
        "label": "P"
    },
    "2026": {
        "dataset": "COMP 3021",
        "project": "mohaa",
        "bug_id": "5",
        "T": "void testUndoUnlimited() { final var gameState = mock(GameState.class); when(gameState.getPlayerPositionById(anyInt())).thenReturn(Position.of(0, 0)); when(gameState.getUndoQuota()).thenReturn(Optional.empty()); final var game = new SokobanGameForTesting(gameState); for (int i = 0; i < 10000; i++) { final var result = game.feedActionForProcessing(new Undo(0)); } verify(gameState, times(10000)).undo(); }",
        "C": "public GameMap(int maxWidth, int maxHeight, Set<Position> destinations, int undoLimit) { this.maxWidth = maxWidth; this.maxHeight = maxHeight; this.destinations = destinations; if (undoLimit == -1) { this.undoLimit = Optional.empty(); } else { this.undoLimit = Optional.of(undoLimit); } this.map = new ArrayList<>(); } /** * Parses the map from a string representation. * The first line is undo limit. * Starting from the second line, the game map is represented as follows, * <li># represents a {@link Wall}</li> * <li>@ represents a box destination.</li> * <li>Any upper-case letter represents a {@link Player}.</li> * <li> * Any lower-case letter represents a {@link Box} that is only movable by the player with the corresponding upper-case letter. * For instance, box \"a\" can only be moved by player \"A\" and not movable by player \"B\". * </li> * <li>. represents an {@link Empty} position in the map, meaning there is no player or box currently at this position.</li> * <p> * Notes: * <li> * There can be at most 26 players. * All implementations of classes in the hk.ust.comp3021.game package should support up to 26 players. * </li> * <li> * For simplicity, we assume the given map is bounded with a closed boundary. * There is no need to check this point. * </li> * <li> * Example maps can be found in \"src/main/resources\". * </li> * * @param mapText The string representation. * @return The parsed GameMap object. * @throws IllegalArgumentException if undo limit is negative but not -1. * @throws IllegalArgumentException if there are multiple same upper-case letters, i.e., one player can only exist at one position. * @throws IllegalArgumentException if there are no players in the map. * @throws IllegalArgumentException if the number of boxes is not equal to the number of box destinations. * @throws IllegalArgumentException if there are boxes whose {@link Box#getPlayerId()} public Undo(int initiator) { super(initiator); }",
        "label": "P"
    },
    "2027": {
        "dataset": "COMP 3021",
        "project": "mohaa",
        "bug_id": "6",
        "T": "void testPushOtherPlayerBox() { String mapText = \"\"\" 233 ###### #AB.@# #b.a.# #@...# ###### \"\"\"; final var testMap = TestHelper.parseGameMap(mapText); final var gameState = spy(new GameState(testMap)); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Move.Down(0)); verify(gameState, never()).move(any(), any()); }",
        "C": "public GameState(@NotNull GameMap map) { this.gameMap = map; this.initialMap = map.getMapCopy(); this.checkpointMaps = new ArrayList<>(); undoQuota = map.getUndoLimit(); } public Down(int initiator) { super(initiator); }",
        "label": "P"
    },
    "2028": {
        "dataset": "COMP 3021",
        "project": "mohaa",
        "bug_id": "7",
        "T": "void testMoveNonExistingPlayer() { String mapText = \"\"\" 233 ###### #A..@# #a...# ##...# ###### \"\"\"; final var testMap = TestHelper.parseGameMap(mapText); final var gameState = spy(new GameState(testMap)); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Move.Down(23)); }",
        "C": "public GameState(@NotNull GameMap map) { this.gameMap = map; this.initialMap = map.getMapCopy(); this.checkpointMaps = new ArrayList<>(); undoQuota = map.getUndoLimit(); } public Down(int initiator) { super(initiator); }",
        "label": "F"
    },
    "2029": {
        "dataset": "COMP 3021",
        "project": "mohaa",
        "bug_id": "8",
        "T": "void testCheckpointWhenNeed() { final var gameState = spy(new GameState(TestHelper.parseGameMap(\"\"\" 233 ###### #.Aa@# #..a@# ###### \"\"\" ))); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Move.Right(0)); verify(gameState, times(1)).checkpoint(); }",
        "C": "public GameState(@NotNull GameMap map) { this.gameMap = map; this.initialMap = map.getMapCopy(); this.checkpointMaps = new ArrayList<>(); undoQuota = map.getUndoLimit(); } public Right(int initiator) { super(initiator); }",
        "label": "P"
    },
    "2030": {
        "dataset": "COMP 3021",
        "project": "mohaa",
        "bug_id": "9",
        "T": "void testPushBoxAgainstWall() { String mapText = \"\"\" 233 ###### #A..@# #a...# ##...# ###### \"\"\"; final var testMap = TestHelper.parseGameMap(mapText); final var gameState = spy(new GameState(testMap)); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Move.Down(0)); verify(gameState, never()).move(any(), any()); }",
        "C": "public GameState(@NotNull GameMap map) { this.gameMap = map; this.initialMap = map.getMapCopy(); this.checkpointMaps = new ArrayList<>(); undoQuota = map.getUndoLimit(); } public Down(int initiator) { super(initiator); }",
        "label": "P"
    },
    "2031": {
        "dataset": "COMP 3021",
        "project": "mohaa",
        "bug_id": "10",
        "T": "void testCheckpointWhenNotNeed() { final var gameState = spy(new GameState(TestHelper.parseGameMap(\"\"\" 233 ###### #A.a@# #..a@# ###### \"\"\" ))); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Move.Right(0)); verify(gameState, never()).checkpoint(); } private static class SokobanGameForTesting extends AbstractSokobanGame { protected SokobanGameForTesting(GameState gameState) { super(gameState); } @Override public void run() { } public ActionResult feedActionForProcessing(Action action) { return processAction(action); } }",
        "C": "public GameState(@NotNull GameMap map) { this.gameMap = map; this.initialMap = map.getMapCopy(); this.checkpointMaps = new ArrayList<>(); undoQuota = map.getUndoLimit(); } public Right(int initiator) { super(initiator); } public void run() { while (!super.shouldStop()) { renderingEngine.render(state); state.getUndoQuota().ifPresentOrElse( value -> System.out.printf(UNDO_QUOTA_TEMPLATE, Integer.toString(value)), () -> System.out.print(UNDO_QUOTA_UNLIMITED) ); System.out.print(\"\\n>>>\\n\"); Action action = inputEngine.fetchAction(); ActionResult result = super.processAction(action); if (result instanceof ActionResult.Failed) { renderingEngine.message(((ActionResult.Failed) result).getReason()); } } renderingEngine.render(state); System.out.println(GAME_EXIT_MESSAGE); } protected ActionResult processAction(@NotNull Action action) { if (action instanceof Exit) { isExit = true; return new ActionResult.Success(action); } else if (action instanceof Undo) { if (state.getUndoQuota().isEmpty() || state.getUndoQuota().get() > 0) { state.undo(); return new ActionResult.Success(action); } else { return new ActionResult.Failed(action,UNDO_QUOTA_RUN_OUT); } } else if (action instanceof InvalidInput) { return new ActionResult.Failed(action,((InvalidInput) action).getMessage()); } else if (action instanceof Move) { Position nextPosition = ((Move) action).nextPosition(state.getPlayerPositionById(action.getInitiator())); Entity nextEntity = state.getEntity(nextPosition); if (nextEntity instanceof Wall) { return new ActionResult.Failed(action, \"Wall blocking you!\"); } else if (nextEntity instanceof Box && ((Box) nextEntity).getPlayerId() == action.getInitiator()) { Entity nextEntity2 = state.getEntity(((Move) action).nextPosition(nextPosition)); if (nextEntity2 instanceof Wall) { return new ActionResult.Failed(action, \"Wall blocking you!\"); } else if (nextEntity2 instanceof Empty) { state.move(nextPosition,((Move) action).nextPosition(nextPosition)); state.move(state.getPlayerPositionById(action.getInitiator()),nextPosition); state.checkpoint(); return new ActionResult.Success(action); } else { return new ActionResult.Failed(action, \"Cannot move!\"); } } else if (nextEntity instanceof Empty) { state.move(state.getPlayerPositionById(action.getInitiator()),nextPosition); state.checkpoint(); return new ActionResult.Success(action); } else { return new ActionResult.Failed(action, \"Cannot move!\"); } } else { return new ActionResult.Failed(action,\"Invalid action!\"); } }",
        "label": "F"
    },
    "2032": {
        "dataset": "COMP 3021",
        "project": "mohaa",
        "bug_id": "11",
        "T": "void testHitAnotherPlayer() { String mapText = \"\"\" 233 ###### #A..@# #B...# #ab.@# ###### \"\"\"; final var testMap = TestHelper.parseGameMap(mapText); final var gameState = spy(new GameState(testMap)); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Move.Down(0)); verify(gameState, never()).move(any(), any()); }",
        "C": "public GameState(@NotNull GameMap map) { this.gameMap = map; this.initialMap = map.getMapCopy(); this.checkpointMaps = new ArrayList<>(); undoQuota = map.getUndoLimit(); } public Down(int initiator) { super(initiator); }",
        "label": "P"
    },
    "2033": {
        "dataset": "COMP 3021",
        "project": "mohaa",
        "bug_id": "12",
        "T": "void testUndoWithinQuota() { final var gameState = mock(GameState.class); when(gameState.getPlayerPositionById(anyInt())).thenReturn(Position.of(0, 0)); when(gameState.getUndoQuota()).thenReturn(Optional.of(1)); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Undo(0)); verify(gameState, times(1)).undo(); }",
        "C": "public Undo(int initiator) { super(initiator); }",
        "label": "P"
    },
    "2034": {
        "dataset": "COMP 3021",
        "project": "mohaa",
        "bug_id": "13",
        "T": "void testInvalidInput() { final var game = new SokobanGameForTesting(mock(GameState.class)); final var message = String.valueOf(new Random().nextLong()); final var action = new InvalidInput(-1, message); final var result = game.feedActionForProcessing(action); }",
        "C": "public InvalidInput(int initiator, @NotNull String message) { super(initiator); this.message = message; }",
        "label": "P"
    },
    "2035": {
        "dataset": "COMP 3021",
        "project": "mohaa",
        "bug_id": "14",
        "T": "void testUndoLimitParsing() { final var gameMap = TestHelper.parseGameMap(rectangularMap); }",
        "C": "",
        "label": "P"
    },
    "2036": {
        "dataset": "COMP 3021",
        "project": "mohaa",
        "bug_id": "15",
        "T": "void testWidthForNonRectangularMap() { final var gameMap = TestHelper.parseGameMap(nonRectangularMap); }",
        "C": "",
        "label": "P"
    },
    "2037": {
        "dataset": "COMP 3021",
        "project": "mohaa",
        "bug_id": "16",
        "T": "void testTwoPlayersMap() { final var twoPlayersMap = \"\"\" 233 ###### #A..@# #..B@# #....# #.a..# #..b.# ###### \"\"\"; final var gameMap = TestHelper.parseGameMap(twoPlayersMap); final var playerIds = gameMap.getPlayerIds(); final var expectedIds = new HashSet<Integer>(); expectedIds.add(0); expectedIds.add(1); }",
        "C": "public Set<Integer> getPlayerIds() { Set <Integer> result = new HashSet<>(); for (ArrayList<Entity> list : map) { for (Entity e : list) { if (e instanceof Player) { result.add(((Player) e).getId()); } } } return result; }",
        "label": "P"
    },
    "2038": {
        "dataset": "COMP 3021",
        "project": "mohaa",
        "bug_id": "17",
        "T": "void testMapWithoutPlayer() { final var invalidMap = \"\"\" 233 ### #.# ### \"\"\"; } // @Tag(TestKind.HIDDEN) // @Test // void testUnmatchedPlayersAndBoxes() { // final var invalidMap = \"\"\" // 233 // ###### // #A..@# // #...@# // #a.b@# // #.a.@# // #..a.# // ###### // \"\"\"; // assertThrowsExactly(IllegalArgumentException.class, () -> TestHelper.parseGameMap(invalidMap)); // }",
        "C": "public GameMap(int maxWidth, int maxHeight, Set<Position> destinations, int undoLimit) { this.maxWidth = maxWidth; this.maxHeight = maxHeight; this.destinations = destinations; if (undoLimit == -1) { this.undoLimit = Optional.empty(); } else { this.undoLimit = Optional.of(undoLimit); } this.map = new ArrayList<>(); } /** * Parses the map from a string representation. * The first line is undo limit. * Starting from the second line, the game map is represented as follows, * <li># represents a {@link Wall}</li> * <li>@ represents a box destination.</li> * <li>Any upper-case letter represents a {@link Player}.</li> * <li> * Any lower-case letter represents a {@link Box} that is only movable by the player with the corresponding upper-case letter. * For instance, box \"a\" can only be moved by player \"A\" and not movable by player \"B\". * </li> * <li>. represents an {@link Empty} position in the map, meaning there is no player or box currently at this position.</li> * <p> * Notes: * <li> * There can be at most 26 players. * All implementations of classes in the hk.ust.comp3021.game package should support up to 26 players. * </li> * <li> * For simplicity, we assume the given map is bounded with a closed boundary. * There is no need to check this point. * </li> * <li> * Example maps can be found in \"src/main/resources\". * </li> * * @param mapText The string representation. * @return The parsed GameMap object. * @throws IllegalArgumentException if undo limit is negative but not -1. * @throws IllegalArgumentException if there are multiple same upper-case letters, i.e., one player can only exist at one position. * @throws IllegalArgumentException if there are no players in the map. * @throws IllegalArgumentException if the number of boxes is not equal to the number of box destinations. * @throws IllegalArgumentException if there are boxes whose {@link Box#getPlayerId()}",
        "label": "P"
    },
    "2039": {
        "dataset": "COMP 3021",
        "project": "mohaa",
        "bug_id": "18",
        "T": "void testManyPlayersMap() { final var manyPlayersMap = \"\"\" 233 ###### #A.P@@# #vCB@@# #.cpD@# #Ga.d@# #g.bV@# ###### \"\"\"; final var gameMap = TestHelper.parseGameMap(manyPlayersMap); final var playerIds = gameMap.getPlayerIds(); final var expectedIds = new HashSet<>(Arrays.asList( 0, 'P' - 'A', 'C' - 'A', 'B' - 'A', 'D' - 'A', 'G' - 'A', 'V' - 'A' )); }",
        "C": "public Set<Integer> getPlayerIds() { Set <Integer> result = new HashSet<>(); for (ArrayList<Entity> list : map) { for (Entity e : list) { if (e instanceof Player) { result.add(((Player) e).getId()); } } } return result; }",
        "label": "P"
    },
    "2040": {
        "dataset": "COMP 3021",
        "project": "mohaa",
        "bug_id": "19",
        "T": "void testHeightForNonRectangularMap() { final var gameMap = TestHelper.parseGameMap(nonRectangularMap); }",
        "C": "",
        "label": "P"
    },
    "2041": {
        "dataset": "COMP 3021",
        "project": "mohaa",
        "bug_id": "20",
        "T": "void testDuplicatedPlayers() { final var invalidMap = \"\"\" 233 ###### #A..@# #..A@# #....# #.a..# #..b.# ###### \"\"\"; }",
        "C": "",
        "label": "P"
    },
    "2042": {
        "dataset": "COMP 3021",
        "project": "mohaa",
        "bug_id": "21",
        "T": "void testParseMapWithoutUndoLimit() { final var invalidMap = String.join(\"\\n\", rectangularMap.lines().skip(1).toList()); }",
        "C": "",
        "label": "P"
    },
    "2043": {
        "dataset": "COMP 3021",
        "project": "mohaa",
        "bug_id": "22",
        "T": "void testInsufficientDestinations() { final var invalidMap = \"\"\" 233 ###### #A..@# #...@# #a...# #.a..# #..a.# ###### \"\"\"; }",
        "C": "",
        "label": "P"
    },
    "2044": {
        "dataset": "COMP 3021",
        "project": "mohaa",
        "bug_id": "23",
        "T": "void testSuperLargeMap() { try { new GameMap(Integer.MAX_VALUE, Integer.MAX_VALUE, Collections.emptySet(), 0); } catch (OutOfMemoryError e) { throw new RuntimeException(e); } }); }",
        "C": "public GameMap(int maxWidth, int maxHeight, Set<Position> destinations, int undoLimit) { this.maxWidth = maxWidth; this.maxHeight = maxHeight; this.destinations = destinations; if (undoLimit == -1) { this.undoLimit = Optional.empty(); } else { this.undoLimit = Optional.of(undoLimit); } this.map = new ArrayList<>(); } /** * Parses the map from a string representation. * The first line is undo limit. * Starting from the second line, the game map is represented as follows, * <li># represents a {@link Wall}</li> * <li>@ represents a box destination.</li> * <li>Any upper-case letter represents a {@link Player}.</li> * <li> * Any lower-case letter represents a {@link Box} that is only movable by the player with the corresponding upper-case letter. * For instance, box \"a\" can only be moved by player \"A\" and not movable by player \"B\". * </li> * <li>. represents an {@link Empty} position in the map, meaning there is no player or box currently at this position.</li> * <p> * Notes: * <li> * There can be at most 26 players. * All implementations of classes in the hk.ust.comp3021.game package should support up to 26 players. * </li> * <li> * For simplicity, we assume the given map is bounded with a closed boundary. * There is no need to check this point. * </li> * <li> * Example maps can be found in \"src/main/resources\". * </li> * * @param mapText The string representation. * @return The parsed GameMap object. * @throws IllegalArgumentException if undo limit is negative but not -1. * @throws IllegalArgumentException if there are multiple same upper-case letters, i.e., one player can only exist at one position. * @throws IllegalArgumentException if there are no players in the map. * @throws IllegalArgumentException if the number of boxes is not equal to the number of box destinations. * @throws IllegalArgumentException if there are boxes whose {@link Box#getPlayerId()} public GameMap(int maxWidth, int maxHeight, Set<Position> destinations, int undoLimit) { this.maxWidth = maxWidth; this.maxHeight = maxHeight; this.destinations = destinations; if (undoLimit == -1) { this.undoLimit = Optional.empty(); } else { this.undoLimit = Optional.of(undoLimit); } this.map = new ArrayList<>(); } /** * Parses the map from a string representation. * The first line is undo limit. * Starting from the second line, the game map is represented as follows, * <li># represents a {@link Wall}</li> * <li>@ represents a box destination.</li> * <li>Any upper-case letter represents a {@link Player}.</li> * <li> * Any lower-case letter represents a {@link Box} that is only movable by the player with the corresponding upper-case letter. * For instance, box \"a\" can only be moved by player \"A\" and not movable by player \"B\". * </li> * <li>. represents an {@link Empty} position in the map, meaning there is no player or box currently at this position.</li> * <p> * Notes: * <li> * There can be at most 26 players. * All implementations of classes in the hk.ust.comp3021.game package should support up to 26 players. * </li> * <li> * For simplicity, we assume the given map is bounded with a closed boundary. * There is no need to check this point. * </li> * <li> * Example maps can be found in \"src/main/resources\". * </li> * * @param mapText The string representation. * @return The parsed GameMap object. * @throws IllegalArgumentException if undo limit is negative but not -1. * @throws IllegalArgumentException if there are multiple same upper-case letters, i.e., one player can only exist at one position. * @throws IllegalArgumentException if there are no players in the map. * @throws IllegalArgumentException if the number of boxes is not equal to the number of box destinations. * @throws IllegalArgumentException if there are boxes whose {@link Box#getPlayerId()}",
        "label": "P"
    },
    "2045": {
        "dataset": "COMP 3021",
        "project": "mohaa",
        "bug_id": "24",
        "T": "void testInvalidUndoLimit() { final var invalidMap = \"\"\" -233 ###### #A..@# #...@# #a.b@# #.a.@# #..a.# ###### \"\"\"; }",
        "C": "",
        "label": "P"
    },
    "2046": {
        "dataset": "COMP 3021",
        "project": "mohaa",
        "bug_id": "25",
        "T": "void testEmptyMap() { final var invalidMap = \"\"; }",
        "C": "",
        "label": "P"
    },
    "2047": {
        "dataset": "COMP 3021",
        "project": "mohaa",
        "bug_id": "26",
        "T": "void testMove(String input, String name, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); } private InputStream fixValueStream(String content) { final var bytes = content.getBytes(StandardCharsets.UTF_8); return new ByteArrayInputStream(bytes); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine(); switch (inputLine) { case \"w\": return new Move.Up(0); case \"a\": return new Move.Left(0); case \"s\": return new Move.Down(0); case \"d\": return new Move.Right(0); case \"h\": return new Move.Left(1); case \"j\": return new Move.Down(1); case \"k\": return new Move.Up(1); case \"l\": return new Move.Right(1); case \"u\": return new Undo(0); case EXIT_COMMAND_TEXT: return new Exit(0); default: return new InvalidInput(0, INVALID_INPUT_MESSAGE); } }",
        "label": "P"
    },
    "2048": {
        "dataset": "COMP 3021",
        "project": "mohaa",
        "bug_id": "27",
        "T": "void testMove(String input, String name, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); } private InputStream fixValueStream(String content) { final var bytes = content.getBytes(StandardCharsets.UTF_8); return new ByteArrayInputStream(bytes); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine(); switch (inputLine) { case \"w\": return new Move.Up(0); case \"a\": return new Move.Left(0); case \"s\": return new Move.Down(0); case \"d\": return new Move.Right(0); case \"h\": return new Move.Left(1); case \"j\": return new Move.Down(1); case \"k\": return new Move.Up(1); case \"l\": return new Move.Right(1); case \"u\": return new Undo(0); case EXIT_COMMAND_TEXT: return new Exit(0); default: return new InvalidInput(0, INVALID_INPUT_MESSAGE); } }",
        "label": "P"
    },
    "2049": {
        "dataset": "COMP 3021",
        "project": "mohaa",
        "bug_id": "28",
        "T": "void testMove(String input, String name, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); } private InputStream fixValueStream(String content) { final var bytes = content.getBytes(StandardCharsets.UTF_8); return new ByteArrayInputStream(bytes); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine(); switch (inputLine) { case \"w\": return new Move.Up(0); case \"a\": return new Move.Left(0); case \"s\": return new Move.Down(0); case \"d\": return new Move.Right(0); case \"h\": return new Move.Left(1); case \"j\": return new Move.Down(1); case \"k\": return new Move.Up(1); case \"l\": return new Move.Right(1); case \"u\": return new Undo(0); case EXIT_COMMAND_TEXT: return new Exit(0); default: return new InvalidInput(0, INVALID_INPUT_MESSAGE); } }",
        "label": "P"
    },
    "2050": {
        "dataset": "COMP 3021",
        "project": "mohaa",
        "bug_id": "29",
        "T": "void testMove(String input, String name, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); } private InputStream fixValueStream(String content) { final var bytes = content.getBytes(StandardCharsets.UTF_8); return new ByteArrayInputStream(bytes); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine(); switch (inputLine) { case \"w\": return new Move.Up(0); case \"a\": return new Move.Left(0); case \"s\": return new Move.Down(0); case \"d\": return new Move.Right(0); case \"h\": return new Move.Left(1); case \"j\": return new Move.Down(1); case \"k\": return new Move.Up(1); case \"l\": return new Move.Right(1); case \"u\": return new Undo(0); case EXIT_COMMAND_TEXT: return new Exit(0); default: return new InvalidInput(0, INVALID_INPUT_MESSAGE); } }",
        "label": "P"
    },
    "2051": {
        "dataset": "COMP 3021",
        "project": "mohaa",
        "bug_id": "30",
        "T": "void testMove(String input, String name, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); } private InputStream fixValueStream(String content) { final var bytes = content.getBytes(StandardCharsets.UTF_8); return new ByteArrayInputStream(bytes); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine(); switch (inputLine) { case \"w\": return new Move.Up(0); case \"a\": return new Move.Left(0); case \"s\": return new Move.Down(0); case \"d\": return new Move.Right(0); case \"h\": return new Move.Left(1); case \"j\": return new Move.Down(1); case \"k\": return new Move.Up(1); case \"l\": return new Move.Right(1); case \"u\": return new Undo(0); case EXIT_COMMAND_TEXT: return new Exit(0); default: return new InvalidInput(0, INVALID_INPUT_MESSAGE); } }",
        "label": "P"
    },
    "2052": {
        "dataset": "COMP 3021",
        "project": "mohaa",
        "bug_id": "31",
        "T": "void testMove(String input, String name, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); } private InputStream fixValueStream(String content) { final var bytes = content.getBytes(StandardCharsets.UTF_8); return new ByteArrayInputStream(bytes); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine(); switch (inputLine) { case \"w\": return new Move.Up(0); case \"a\": return new Move.Left(0); case \"s\": return new Move.Down(0); case \"d\": return new Move.Right(0); case \"h\": return new Move.Left(1); case \"j\": return new Move.Down(1); case \"k\": return new Move.Up(1); case \"l\": return new Move.Right(1); case \"u\": return new Undo(0); case EXIT_COMMAND_TEXT: return new Exit(0); default: return new InvalidInput(0, INVALID_INPUT_MESSAGE); } }",
        "label": "P"
    },
    "2053": {
        "dataset": "COMP 3021",
        "project": "mohaa",
        "bug_id": "32",
        "T": "void testMove(String input, String name, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); } private InputStream fixValueStream(String content) { final var bytes = content.getBytes(StandardCharsets.UTF_8); return new ByteArrayInputStream(bytes); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine(); switch (inputLine) { case \"w\": return new Move.Up(0); case \"a\": return new Move.Left(0); case \"s\": return new Move.Down(0); case \"d\": return new Move.Right(0); case \"h\": return new Move.Left(1); case \"j\": return new Move.Down(1); case \"k\": return new Move.Up(1); case \"l\": return new Move.Right(1); case \"u\": return new Undo(0); case EXIT_COMMAND_TEXT: return new Exit(0); default: return new InvalidInput(0, INVALID_INPUT_MESSAGE); } }",
        "label": "P"
    },
    "2054": {
        "dataset": "COMP 3021",
        "project": "mohaa",
        "bug_id": "33",
        "T": "void testMove(String input, String name, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); } private InputStream fixValueStream(String content) { final var bytes = content.getBytes(StandardCharsets.UTF_8); return new ByteArrayInputStream(bytes); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine(); switch (inputLine) { case \"w\": return new Move.Up(0); case \"a\": return new Move.Left(0); case \"s\": return new Move.Down(0); case \"d\": return new Move.Right(0); case \"h\": return new Move.Left(1); case \"j\": return new Move.Down(1); case \"k\": return new Move.Up(1); case \"l\": return new Move.Right(1); case \"u\": return new Undo(0); case EXIT_COMMAND_TEXT: return new Exit(0); default: return new InvalidInput(0, INVALID_INPUT_MESSAGE); } }",
        "label": "P"
    },
    "2055": {
        "dataset": "COMP 3021",
        "project": "mohaa",
        "bug_id": "34",
        "T": "void testUndo(String input, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine(); switch (inputLine) { case \"w\": return new Move.Up(0); case \"a\": return new Move.Left(0); case \"s\": return new Move.Down(0); case \"d\": return new Move.Right(0); case \"h\": return new Move.Left(1); case \"j\": return new Move.Down(1); case \"k\": return new Move.Up(1); case \"l\": return new Move.Right(1); case \"u\": return new Undo(0); case EXIT_COMMAND_TEXT: return new Exit(0); default: return new InvalidInput(0, INVALID_INPUT_MESSAGE); } }",
        "label": "P"
    },
    "2056": {
        "dataset": "COMP 3021",
        "project": "mohaa",
        "bug_id": "35",
        "T": "void testInvalidInput() { final var inputStream = fixValueStream(\"blah blah\"); final var inputEngine = new TerminalInputEngine(inputStream); final var action = inputEngine.fetchAction(); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine(); switch (inputLine) { case \"w\": return new Move.Up(0); case \"a\": return new Move.Left(0); case \"s\": return new Move.Down(0); case \"d\": return new Move.Right(0); case \"h\": return new Move.Left(1); case \"j\": return new Move.Down(1); case \"k\": return new Move.Up(1); case \"l\": return new Move.Right(1); case \"u\": return new Undo(0); case EXIT_COMMAND_TEXT: return new Exit(0); default: return new InvalidInput(0, INVALID_INPUT_MESSAGE); } }",
        "label": "P"
    },
    "2057": {
        "dataset": "COMP 3021",
        "project": "mohaa",
        "bug_id": "36",
        "T": "void testUndoWhenThereIsNoMove() { final var gameState = new GameState(TestHelper.parseGameMap(\"\"\" 233 ###### #A.a@# #..a@# ###### \"\"\" )); gameState.undo(); } private Entity generateEntity(int key) { return switch (key % 4) { case 0 -> new Box(0); case 1 -> new Empty(); case 2 -> new Player(0); case 3 -> new Wall(); default -> throw new ShouldNotReachException(); }; }",
        "C": "public GameState(@NotNull GameMap map) { this.gameMap = map; this.initialMap = map.getMapCopy(); this.checkpointMaps = new ArrayList<>(); undoQuota = map.getUndoLimit(); } public void undo() { if (undoQuota.isPresent()) { undoQuota = undoQuota.map(i->i-1); } if (checkpointMaps.size() <= 1) { gameMap.setMap(initialMap); } else { gameMap.setMap(checkpointMaps.get(checkpointMaps.size()-2)); checkpointMaps.remove(checkpointMaps.size()-1); checkpointMaps.remove(checkpointMaps.size()-1); } } /** * Get the maximum width of the game map. * This should be the same as that in {@link GameMap} public GameMap(int maxWidth, int maxHeight, Set<Position> destinations, int undoLimit) { this.maxWidth = maxWidth; this.maxHeight = maxHeight; this.destinations = destinations; if (undoLimit == -1) { this.undoLimit = Optional.empty(); } else { this.undoLimit = Optional.of(undoLimit); } this.map = new ArrayList<>(); } /** * Parses the map from a string representation. * The first line is undo limit. * Starting from the second line, the game map is represented as follows, * <li># represents a {@link Wall}</li> * <li>@ represents a box destination.</li> * <li>Any upper-case letter represents a {@link Player}.</li> * <li> * Any lower-case letter represents a {@link Box} that is only movable by the player with the corresponding upper-case letter. * For instance, box \"a\" can only be moved by player \"A\" and not movable by player \"B\". * </li> * <li>. represents an {@link Empty} position in the map, meaning there is no player or box currently at this position.</li> * <p> * Notes: * <li> * There can be at most 26 players. * All implementations of classes in the hk.ust.comp3021.game package should support up to 26 players. * </li> * <li> * For simplicity, we assume the given map is bounded with a closed boundary. * There is no need to check this point. * </li> * <li> * Example maps can be found in \"src/main/resources\". * </li> * * @param mapText The string representation. * @return The parsed GameMap object. * @throws IllegalArgumentException if undo limit is negative but not -1. * @throws IllegalArgumentException if there are multiple same upper-case letters, i.e., one player can only exist at one position. * @throws IllegalArgumentException if there are no players in the map. * @throws IllegalArgumentException if the number of boxes is not equal to the number of box destinations. * @throws IllegalArgumentException if there are boxes whose {@link Box#getPlayerId()} public Box(int playerId) { this.playerId = playerId; } public Player(int id) { this.id = id; } public ShouldNotReachException() { super(\"This branch should not be reached.\"); }",
        "label": "F"
    },
    "2058": {
        "dataset": "COMP 3021",
        "project": "mohaa",
        "bug_id": "37",
        "T": "void testGetUndoUnlimited() { final var gameState = new GameState(TestHelper.parseGameMap(\"\"\" -1 ###### #.Aa@# #..a@# ###### \"\"\" )); }",
        "C": "public GameState(@NotNull GameMap map) { this.gameMap = map; this.initialMap = map.getMapCopy(); this.checkpointMaps = new ArrayList<>(); undoQuota = map.getUndoLimit(); }",
        "label": "P"
    },
    "2059": {
        "dataset": "COMP 3021",
        "project": "mohaa",
        "bug_id": "38",
        "T": "void testMapCopying() { final var maxWidth = 2333; final var maxHeight = 2333; final var random = new Random(); final var randomEntities = Stream.generate(() -> Position.of(random.nextInt(maxWidth), random.nextInt(maxHeight))) .distinct() .limit(100) .collect(Collectors.toMap(Function.identity(), it -> generateEntity(it.x()))); final var firstPos = randomEntities.keySet().stream().findFirst(); final var gameMap = new GameMap(maxWidth, maxHeight, Collections.singleton(firstPos.get()), 233); randomEntities.forEach(gameMap::putEntity); final var gameState = new GameState(gameMap); final var randomPosition = randomEntities.keySet().stream().findAny(); gameMap.putEntity(randomPosition.get(), new Empty()); randomEntities.forEach((p, e) -> assertEquals(e, gameState.getEntity(p))); }",
        "C": "public static @NotNull Position of(int x, int y) { return new Position(x, y); } public GameMap(int maxWidth, int maxHeight, Set<Position> destinations, int undoLimit) { this.maxWidth = maxWidth; this.maxHeight = maxHeight; this.destinations = destinations; if (undoLimit == -1) { this.undoLimit = Optional.empty(); } else { this.undoLimit = Optional.of(undoLimit); } this.map = new ArrayList<>(); } /** * Parses the map from a string representation. * The first line is undo limit. * Starting from the second line, the game map is represented as follows, * <li># represents a {@link Wall}</li> * <li>@ represents a box destination.</li> * <li>Any upper-case letter represents a {@link Player}.</li> * <li> * Any lower-case letter represents a {@link Box} that is only movable by the player with the corresponding upper-case letter. * For instance, box \"a\" can only be moved by player \"A\" and not movable by player \"B\". * </li> * <li>. represents an {@link Empty} position in the map, meaning there is no player or box currently at this position.</li> * <p> * Notes: * <li> * There can be at most 26 players. * All implementations of classes in the hk.ust.comp3021.game package should support up to 26 players. * </li> * <li> * For simplicity, we assume the given map is bounded with a closed boundary. * There is no need to check this point. * </li> * <li> * Example maps can be found in \"src/main/resources\". * </li> * * @param mapText The string representation. * @return The parsed GameMap object. * @throws IllegalArgumentException if undo limit is negative but not -1. * @throws IllegalArgumentException if there are multiple same upper-case letters, i.e., one player can only exist at one position. * @throws IllegalArgumentException if there are no players in the map. * @throws IllegalArgumentException if the number of boxes is not equal to the number of box destinations. * @throws IllegalArgumentException if there are boxes whose {@link Box#getPlayerId()} public GameState(@NotNull GameMap map) { this.gameMap = map; this.initialMap = map.getMapCopy(); this.checkpointMaps = new ArrayList<>(); undoQuota = map.getUndoLimit(); } public void putEntity(Position position, Entity entity) { this.map.get(position.y()).set(position.x(), entity); } public @Nullable Entity getEntity(@NotNull Position position) { return this.gameMap.getEntity(position); } /** * Get all box destination positions as a set in the game map. * This should be the same as that in {@link GameMap}",
        "label": "F"
    },
    "2060": {
        "dataset": "COMP 3021",
        "project": "mohaa",
        "bug_id": "39",
        "T": "void testUndoWhenThereIsMoveButNoCheckpoint() { final var gameState = new GameState(TestHelper.parseGameMap(\"\"\" 233 ###### #A.a@# #..a@# ###### \"\"\" )); gameState.move(Position.of(1, 1), Position.of(2, 1)); gameState.undo(); }",
        "C": "public GameState(@NotNull GameMap map) { this.gameMap = map; this.initialMap = map.getMapCopy(); this.checkpointMaps = new ArrayList<>(); undoQuota = map.getUndoLimit(); } public void move(Position from, Position to) { Entity temp = gameMap.getEntity(to); gameMap.putEntity(to,gameMap.getEntity(from)); gameMap.putEntity(from,temp); } /** * Record a checkpoint of the game state, including: * <li>All current positions of entities in the game map.</li> * <li>Current undo quota</li> * <p> * Checkpoint is used in {@link GameState#undo()} public static @NotNull Position of(int x, int y) { return new Position(x, y); } public void undo() { if (undoQuota.isPresent()) { undoQuota = undoQuota.map(i->i-1); } if (checkpointMaps.size() <= 1) { gameMap.setMap(initialMap); } else { gameMap.setMap(checkpointMaps.get(checkpointMaps.size()-2)); checkpointMaps.remove(checkpointMaps.size()-1); checkpointMaps.remove(checkpointMaps.size()-1); } } /** * Get the maximum width of the game map. * This should be the same as that in {@link GameMap}",
        "label": "F"
    },
    "2061": {
        "dataset": "COMP 3021",
        "project": "mohaa",
        "bug_id": "40",
        "T": "void testGameExit() { final var gameState = mock(GameState.class); final var inputEngine = mock(TerminalInputEngine.class); final var renderingEngine = mock(TerminalRenderingEngine.class); when(gameState.isWin()).thenReturn(false, false, false); when(inputEngine.fetchAction()) .thenReturn(new InvalidInput(0, \"\"), new InvalidInput(0, \"\"), new Exit(0)); final var game = new TerminalSokobanGame(gameState, inputEngine, renderingEngine); game.run(); verify(renderingEngine, atLeastOnce()).message(any()); }",
        "C": "public InvalidInput(int initiator, @NotNull String message) { super(initiator); this.message = message; } public Exit(int initiator) { super(initiator); } public TerminalSokobanGame(GameState gameState, TerminalInputEngine inputEngine, TerminalRenderingEngine renderingEngine) { super(gameState); this.inputEngine = inputEngine; this.renderingEngine = renderingEngine; System.out.println(GAME_READY_MESSAGE); System.out.println(\"No. of Players: \" + gameState.getAllPlayerPositions().size()); } public void run() { while (!super.shouldStop()) { renderingEngine.render(state); state.getUndoQuota().ifPresentOrElse( value -> System.out.printf(UNDO_QUOTA_TEMPLATE, Integer.toString(value)), () -> System.out.print(UNDO_QUOTA_UNLIMITED) ); System.out.print(\"\\n>>>\\n\"); Action action = inputEngine.fetchAction(); ActionResult result = super.processAction(action); if (result instanceof ActionResult.Failed) { renderingEngine.message(((ActionResult.Failed) result).getReason()); } } renderingEngine.render(state); System.out.println(GAME_EXIT_MESSAGE); }",
        "label": "P"
    },
    "2062": {
        "dataset": "COMP 3021",
        "project": "mohaa",
        "bug_id": "41",
        "T": "void testGameWin() { final var gameState = mock(GameState.class); final var inputEngine = mock(TerminalInputEngine.class); final var renderingEngine = mock(TerminalRenderingEngine.class); when(gameState.isWin()).thenReturn(false, false, false, true); when(inputEngine.fetchAction()) .thenReturn(new InvalidInput(0, \"\")); final var game = new TerminalSokobanGame(gameState, inputEngine, renderingEngine); game.run(); verify(gameState, atLeastOnce()).isWin(); verify(renderingEngine, atLeastOnce()).message(any()); }",
        "C": "public InvalidInput(int initiator, @NotNull String message) { super(initiator); this.message = message; } public TerminalSokobanGame(GameState gameState, TerminalInputEngine inputEngine, TerminalRenderingEngine renderingEngine) { super(gameState); this.inputEngine = inputEngine; this.renderingEngine = renderingEngine; System.out.println(GAME_READY_MESSAGE); System.out.println(\"No. of Players: \" + gameState.getAllPlayerPositions().size()); } public void run() { while (!super.shouldStop()) { renderingEngine.render(state); state.getUndoQuota().ifPresentOrElse( value -> System.out.printf(UNDO_QUOTA_TEMPLATE, Integer.toString(value)), () -> System.out.print(UNDO_QUOTA_UNLIMITED) ); System.out.print(\"\\n>>>\\n\"); Action action = inputEngine.fetchAction(); ActionResult result = super.processAction(action); if (result instanceof ActionResult.Failed) { renderingEngine.message(((ActionResult.Failed) result).getReason()); } } renderingEngine.render(state); System.out.println(GAME_EXIT_MESSAGE); }",
        "label": "P"
    },
    "2063": {
        "dataset": "COMP 3021",
        "project": "mohaa",
        "bug_id": "42",
        "T": "void testMoreThanTwoPlayers() { final var gameState = mock(GameState.class); final var inputEngine = mock(TerminalInputEngine.class); final var renderingEngine = mock(TerminalRenderingEngine.class); when(gameState.getAllPlayerPositions()).thenReturn(new HashSet<>(Arrays.asList(Position.of(1, 1), Position.of(1, 2), Position.of(1, 3)))); }",
        "C": "public static @NotNull Position of(int x, int y) { return new Position(x, y); }",
        "label": "F"
    },
    "2064": {
        "dataset": "COMP 3021",
        "project": "ktckwan",
        "bug_id": "0",
        "T": "void moveUp() { Position.of(233, 232), new Move.Up(-1).nextPosition(pos) ); }",
        "C": "public static @NotNull Position of(int x, int y) { return new Position(x, y); } public Up(int initiator) { super(initiator); }",
        "label": "P"
    },
    "2065": {
        "dataset": "COMP 3021",
        "project": "ktckwan",
        "bug_id": "1",
        "T": "void moveDown() { Position.of(233, 234), new Move.Down(-1).nextPosition(pos) ); }",
        "C": "public static @NotNull Position of(int x, int y) { return new Position(x, y); } public Down(int initiator) { super(initiator); }",
        "label": "P"
    },
    "2066": {
        "dataset": "COMP 3021",
        "project": "ktckwan",
        "bug_id": "2",
        "T": "void moveRight() { Position.of(234, 233), new Move.Right(-1).nextPosition(pos) ); }",
        "C": "public static @NotNull Position of(int x, int y) { return new Position(x, y); } public Right(int initiator) { super(initiator); }",
        "label": "P"
    },
    "2067": {
        "dataset": "COMP 3021",
        "project": "ktckwan",
        "bug_id": "3",
        "T": "void testExceedingUndoQuota() { final var gameState = mock(GameState.class); when(gameState.getPlayerPositionById(anyInt())).thenReturn(Position.of(0, 0)); when(gameState.getUndoQuota()).thenReturn(Optional.of(0)); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Undo(0)); }",
        "C": "public Undo(int initiator) { super(initiator); }",
        "label": "P"
    },
    "2068": {
        "dataset": "COMP 3021",
        "project": "ktckwan",
        "bug_id": "4",
        "T": "void testExit() { final var gameState = mock(GameState.class); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Exit(0)); }",
        "C": "public Exit(int initiator) { super(initiator); }",
        "label": "P"
    },
    "2069": {
        "dataset": "COMP 3021",
        "project": "ktckwan",
        "bug_id": "5",
        "T": "void testUndoUnlimited() { final var gameState = mock(GameState.class); when(gameState.getPlayerPositionById(anyInt())).thenReturn(Position.of(0, 0)); when(gameState.getUndoQuota()).thenReturn(Optional.empty()); final var game = new SokobanGameForTesting(gameState); for (int i = 0; i < 10000; i++) { final var result = game.feedActionForProcessing(new Undo(0)); } verify(gameState, times(10000)).undo(); }",
        "C": "public TerminalRenderingEngine(PrintStream outputSteam) { this.outputSteam = outputSteam; } public Undo(int initiator) { super(initiator); }",
        "label": "P"
    },
    "2070": {
        "dataset": "COMP 3021",
        "project": "ktckwan",
        "bug_id": "6",
        "T": "void testPushOtherPlayerBox() { String mapText = \"\"\" 233 ###### #AB.@# #b.a.# #@...# ###### \"\"\"; final var testMap = TestHelper.parseGameMap(mapText); final var gameState = spy(new GameState(testMap)); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Move.Down(0)); verify(gameState, never()).move(any(), any()); }",
        "C": "public GameState(@NotNull GameMap map) { // TODO done this.map = map; // The map should not be modifed if(map.getUndoLimit().isPresent()) this.undoQuota = map.getUndoLimit().get(); // Integer value else this.undoQuota = 0; // explict this.currentMap = new GameMap(map, this.undoQuota); // currentMap is a deep copy of map // throw new NotImplementedException(); } public Down(int initiator) { super(initiator); }",
        "label": "P"
    },
    "2071": {
        "dataset": "COMP 3021",
        "project": "ktckwan",
        "bug_id": "7",
        "T": "void testMoveNonExistingPlayer() { String mapText = \"\"\" 233 ###### #A..@# #a...# ##...# ###### \"\"\"; final var testMap = TestHelper.parseGameMap(mapText); final var gameState = spy(new GameState(testMap)); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Move.Down(23)); }",
        "C": "public GameState(@NotNull GameMap map) { // TODO done this.map = map; // The map should not be modifed if(map.getUndoLimit().isPresent()) this.undoQuota = map.getUndoLimit().get(); // Integer value else this.undoQuota = 0; // explict this.currentMap = new GameMap(map, this.undoQuota); // currentMap is a deep copy of map // throw new NotImplementedException(); } public Down(int initiator) { super(initiator); }",
        "label": "P"
    },
    "2072": {
        "dataset": "COMP 3021",
        "project": "ktckwan",
        "bug_id": "8",
        "T": "void testCheckpointWhenNeed() { final var gameState = spy(new GameState(TestHelper.parseGameMap(\"\"\" 233 ###### #.Aa@# #..a@# ###### \"\"\" ))); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Move.Right(0)); verify(gameState, times(1)).checkpoint(); }",
        "C": "public GameState(@NotNull GameMap map) { // TODO done this.map = map; // The map should not be modifed if(map.getUndoLimit().isPresent()) this.undoQuota = map.getUndoLimit().get(); // Integer value else this.undoQuota = 0; // explict this.currentMap = new GameMap(map, this.undoQuota); // currentMap is a deep copy of map // throw new NotImplementedException(); } public Right(int initiator) { super(initiator); }",
        "label": "P"
    },
    "2073": {
        "dataset": "COMP 3021",
        "project": "ktckwan",
        "bug_id": "9",
        "T": "void testPushBoxAgainstWall() { String mapText = \"\"\" 233 ###### #A..@# #a...# ##...# ###### \"\"\"; final var testMap = TestHelper.parseGameMap(mapText); final var gameState = spy(new GameState(testMap)); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Move.Down(0)); verify(gameState, never()).move(any(), any()); }",
        "C": "public GameState(@NotNull GameMap map) { // TODO done this.map = map; // The map should not be modifed if(map.getUndoLimit().isPresent()) this.undoQuota = map.getUndoLimit().get(); // Integer value else this.undoQuota = 0; // explict this.currentMap = new GameMap(map, this.undoQuota); // currentMap is a deep copy of map // throw new NotImplementedException(); } public Down(int initiator) { super(initiator); }",
        "label": "P"
    },
    "2074": {
        "dataset": "COMP 3021",
        "project": "ktckwan",
        "bug_id": "10",
        "T": "void testCheckpointWhenNotNeed() { final var gameState = spy(new GameState(TestHelper.parseGameMap(\"\"\" 233 ###### #A.a@# #..a@# ###### \"\"\" ))); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Move.Right(0)); verify(gameState, never()).checkpoint(); } private static class SokobanGameForTesting extends AbstractSokobanGame { protected SokobanGameForTesting(GameState gameState) { super(gameState); } @Override public void run() { } public ActionResult feedActionForProcessing(Action action) { return processAction(action); } }",
        "C": "public GameState(@NotNull GameMap map) { // TODO done this.map = map; // The map should not be modifed if(map.getUndoLimit().isPresent()) this.undoQuota = map.getUndoLimit().get(); // Integer value else this.undoQuota = 0; // explict this.currentMap = new GameMap(map, this.undoQuota); // currentMap is a deep copy of map // throw new NotImplementedException(); } public Right(int initiator) { super(initiator); } public void run() { // TODO done renderingEngine.message(GAME_READY_MESSAGE); while (!super.shouldStop()){ renderingEngine.render(state); renderingEngine.message(\"\"); if(state.getUndoQuota().isPresent()){ var undoMsg = String.format(UNDO_QUOTA_TEMPLATE, state.getUndoQuota().get()); renderingEngine.message(undoMsg); }else{ renderingEngine.message(UNDO_QUOTA_UNLIMITED); } var action = inputEngine.fetchAction(); var result = super.processAction(action); // Print if the action is failed if(result instanceof ActionResult.Failed failed) renderingEngine.message(failed.getReason()); // print the map } renderingEngine.render(state); renderingEngine.message(\"\"); renderingEngine.message(GAME_EXIT_MESSAGE); if(state.isWin()) renderingEngine.message(WIN_MESSAGE); // throw new NotImplementedException(); } protected ActionResult processAction(@NotNull Action action) { // TODO done var initiator = action.getInitiator(); switch (action){ case InvalidInput i ->{ return new ActionResult.Failed(action, i.getMessage()); } case Move m ->{ var pos = state.getPlayerPositionById(initiator); if(pos == null){ return new ActionResult.Failed(action, PLAYER_NOT_FOUND); } // Check next pos whether is Wall # // hit the wall var nextPos = m.nextPosition(pos); var e = state.currentMap.getEntity(nextPos); switch (e){ case Empty ignored ->{ state.move(pos, nextPos); state.checkpoint(); return new ActionResult.Success(action); } case Wall ignored ->{ return new ActionResult.Failed(action,\"You hit a wall.\" ); } case Box box ->{ // Cannot push the box not belong the player if(box.getPlayerId() != initiator) return new ActionResult.Failed(action,\"Failed to push the box.\"); // Cannot push the box if the box is not going to move to empty/boxdst // Once time only push one box var boxNextPos = m.nextPosition(nextPos); var entity = state.currentMap.getEntity(boxNextPos); if(!(entity instanceof Empty)) // cannot push the box return new ActionResult.Failed(action,\"Failed to push the box.\"); // Move box then move player state.move(nextPos, boxNextPos); state.move(pos, nextPos); state.checkpoint(); return new ActionResult.Success(action); } case Player ignored ->{ return new ActionResult.Failed(action,\"You hit another player.\"); } } } case Undo ignored ->{ var i = state.getUndoQuota(); if(i.isPresent() && i.get() <= 0) return new ActionResult.Failed(action,UNDO_QUOTA_RUN_OUT); state.undo(); return new ActionResult.Success(action); } case Exit ignored ->{ exitFlag = true; return new ActionResult.Success(action); } } throw new IllegalArgumentException(); }",
        "label": "F"
    },
    "2075": {
        "dataset": "COMP 3021",
        "project": "ktckwan",
        "bug_id": "11",
        "T": "void testHitAnotherPlayer() { String mapText = \"\"\" 233 ###### #A..@# #B...# #ab.@# ###### \"\"\"; final var testMap = TestHelper.parseGameMap(mapText); final var gameState = spy(new GameState(testMap)); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Move.Down(0)); verify(gameState, never()).move(any(), any()); }",
        "C": "public GameState(@NotNull GameMap map) { // TODO done this.map = map; // The map should not be modifed if(map.getUndoLimit().isPresent()) this.undoQuota = map.getUndoLimit().get(); // Integer value else this.undoQuota = 0; // explict this.currentMap = new GameMap(map, this.undoQuota); // currentMap is a deep copy of map // throw new NotImplementedException(); } public Down(int initiator) { super(initiator); }",
        "label": "P"
    },
    "2076": {
        "dataset": "COMP 3021",
        "project": "ktckwan",
        "bug_id": "12",
        "T": "void testUndoWithinQuota() { final var gameState = mock(GameState.class); when(gameState.getPlayerPositionById(anyInt())).thenReturn(Position.of(0, 0)); when(gameState.getUndoQuota()).thenReturn(Optional.of(1)); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Undo(0)); verify(gameState, times(1)).undo(); }",
        "C": "public Undo(int initiator) { super(initiator); }",
        "label": "P"
    },
    "2077": {
        "dataset": "COMP 3021",
        "project": "ktckwan",
        "bug_id": "13",
        "T": "void testInvalidInput() { final var game = new SokobanGameForTesting(mock(GameState.class)); final var message = String.valueOf(new Random().nextLong()); final var action = new InvalidInput(-1, message); final var result = game.feedActionForProcessing(action); }",
        "C": "public InvalidInput(int initiator, @NotNull String message) { super(initiator); this.message = message; }",
        "label": "P"
    },
    "2078": {
        "dataset": "COMP 3021",
        "project": "ktckwan",
        "bug_id": "14",
        "T": "void testUndoLimitParsing() { final var gameMap = TestHelper.parseGameMap(rectangularMap); }",
        "C": "",
        "label": "P"
    },
    "2079": {
        "dataset": "COMP 3021",
        "project": "ktckwan",
        "bug_id": "15",
        "T": "void testWidthForNonRectangularMap() { final var gameMap = TestHelper.parseGameMap(nonRectangularMap); }",
        "C": "",
        "label": "P"
    },
    "2080": {
        "dataset": "COMP 3021",
        "project": "ktckwan",
        "bug_id": "16",
        "T": "void testTwoPlayersMap() { final var twoPlayersMap = \"\"\" 233 ###### #A..@# #..B@# #....# #.a..# #..b.# ###### \"\"\"; final var gameMap = TestHelper.parseGameMap(twoPlayersMap); final var playerIds = gameMap.getPlayerIds(); final var expectedIds = new HashSet<Integer>(); expectedIds.add(0); expectedIds.add(1); }",
        "C": "public Set<Integer> getPlayerIds() { // TODO done Set<Integer> playerIds = new HashSet<Integer>(); for(var entity: this.map.values()){ if(entity instanceof Player p){ playerIds.add((p.getId())); } } return playerIds; // throw new NotImplementedException(); }",
        "label": "P"
    },
    "2081": {
        "dataset": "COMP 3021",
        "project": "ktckwan",
        "bug_id": "17",
        "T": "void testMapWithoutPlayer() { final var invalidMap = \"\"\" 233 ### #.# ### \"\"\"; } // @Tag(TestKind.HIDDEN) // @Test // void testUnmatchedPlayersAndBoxes() { // final var invalidMap = \"\"\" // 233 // ###### // #A..@# // #...@# // #a.b@# // #.a.@# // #..a.# // ###### // \"\"\"; // assertThrowsExactly(IllegalArgumentException.class, () -> TestHelper.parseGameMap(invalidMap)); // }",
        "C": "public TerminalRenderingEngine(PrintStream outputSteam) { this.outputSteam = outputSteam; }",
        "label": "P"
    },
    "2082": {
        "dataset": "COMP 3021",
        "project": "ktckwan",
        "bug_id": "18",
        "T": "void testManyPlayersMap() { final var manyPlayersMap = \"\"\" 233 ###### #A.P@@# #vCB@@# #.cpD@# #Ga.d@# #g.bV@# ###### \"\"\"; final var gameMap = TestHelper.parseGameMap(manyPlayersMap); final var playerIds = gameMap.getPlayerIds(); final var expectedIds = new HashSet<>(Arrays.asList( 0, 'P' - 'A', 'C' - 'A', 'B' - 'A', 'D' - 'A', 'G' - 'A', 'V' - 'A' )); }",
        "C": "public Set<Integer> getPlayerIds() { // TODO done Set<Integer> playerIds = new HashSet<Integer>(); for(var entity: this.map.values()){ if(entity instanceof Player p){ playerIds.add((p.getId())); } } return playerIds; // throw new NotImplementedException(); }",
        "label": "P"
    },
    "2083": {
        "dataset": "COMP 3021",
        "project": "ktckwan",
        "bug_id": "19",
        "T": "void testHeightForNonRectangularMap() { final var gameMap = TestHelper.parseGameMap(nonRectangularMap); }",
        "C": "",
        "label": "P"
    },
    "2084": {
        "dataset": "COMP 3021",
        "project": "ktckwan",
        "bug_id": "20",
        "T": "void testDuplicatedPlayers() { final var invalidMap = \"\"\" 233 ###### #A..@# #..A@# #....# #.a..# #..b.# ###### \"\"\"; }",
        "C": "",
        "label": "P"
    },
    "2085": {
        "dataset": "COMP 3021",
        "project": "ktckwan",
        "bug_id": "21",
        "T": "void testParseMapWithoutUndoLimit() { final var invalidMap = String.join(\"\\n\", rectangularMap.lines().skip(1).toList()); }",
        "C": "",
        "label": "P"
    },
    "2086": {
        "dataset": "COMP 3021",
        "project": "ktckwan",
        "bug_id": "22",
        "T": "void testInsufficientDestinations() { final var invalidMap = \"\"\" 233 ###### #A..@# #...@# #a...# #.a..# #..a.# ###### \"\"\"; }",
        "C": "",
        "label": "P"
    },
    "2087": {
        "dataset": "COMP 3021",
        "project": "ktckwan",
        "bug_id": "23",
        "T": "void testSuperLargeMap() { try { new GameMap(Integer.MAX_VALUE, Integer.MAX_VALUE, Collections.emptySet(), 0); } catch (OutOfMemoryError e) { throw new RuntimeException(e); } }); }",
        "C": "public GameMap(GameMap gamemap, int undo) { this(gamemap.maxWidth, gamemap.maxHeight, gamemap.destinations, undo); // deep clone var tmp = new HashMap<Position, Entity>(); for (var pos : gamemap.map.keySet()) { tmp.put(pos, gamemap.map.get(pos)); } this.map = (HashMap<Position, Entity>)tmp; // make the map not a hashmap } public TerminalRenderingEngine(PrintStream outputSteam) { this.outputSteam = outputSteam; }",
        "label": "P"
    },
    "2088": {
        "dataset": "COMP 3021",
        "project": "ktckwan",
        "bug_id": "24",
        "T": "void testInvalidUndoLimit() { final var invalidMap = \"\"\" -233 ###### #A..@# #...@# #a.b@# #.a.@# #..a.# ###### \"\"\"; }",
        "C": "",
        "label": "P"
    },
    "2089": {
        "dataset": "COMP 3021",
        "project": "ktckwan",
        "bug_id": "25",
        "T": "void testEmptyMap() { final var invalidMap = \"\"; }",
        "C": "",
        "label": "P"
    },
    "2090": {
        "dataset": "COMP 3021",
        "project": "ktckwan",
        "bug_id": "26",
        "T": "void testMove(String input, String name, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); } private InputStream fixValueStream(String content) { final var bytes = content.getBytes(StandardCharsets.UTF_8); return new ByteArrayInputStream(bytes); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine(); // TODO done var inputLowerCase = inputLine.toLowerCase(); // Support up to 2 player var initiator = 0; // Exit if(inputLowerCase.equals(EXIT_COMMAND_TEXT)){ return new Exit(initiator); } if(inputLowerCase.length() == 1){ var ch = inputLowerCase.charAt(0); switch (ch){ case 'u' ->{ //undo return new Undo(initiator); } case 'w' -> { return new Move.Up(initiator); } case 'a' -> { return new Move.Left(initiator); } case 's' -> { return new Move.Down(initiator); } case 'd' -> { return new Move.Right(initiator); } case 'h' -> { initiator = 1; return new Move.Up(initiator); } case 'j' -> { initiator = 1; return new Move.Left(initiator); } case 'k' -> { initiator = 1; return new Move.Down(initiator); } case 'l' -> { initiator = 1; return new Move.Right(initiator); } default -> { return new InvalidInput(initiator, INVALID_INPUT_MESSAGE); } } } // Invalid Input return new InvalidInput(initiator, INVALID_INPUT_MESSAGE); // throw new NotImplementedException(); }",
        "label": "P"
    },
    "2091": {
        "dataset": "COMP 3021",
        "project": "ktckwan",
        "bug_id": "27",
        "T": "void testMove(String input, String name, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); } private InputStream fixValueStream(String content) { final var bytes = content.getBytes(StandardCharsets.UTF_8); return new ByteArrayInputStream(bytes); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine(); // TODO done var inputLowerCase = inputLine.toLowerCase(); // Support up to 2 player var initiator = 0; // Exit if(inputLowerCase.equals(EXIT_COMMAND_TEXT)){ return new Exit(initiator); } if(inputLowerCase.length() == 1){ var ch = inputLowerCase.charAt(0); switch (ch){ case 'u' ->{ //undo return new Undo(initiator); } case 'w' -> { return new Move.Up(initiator); } case 'a' -> { return new Move.Left(initiator); } case 's' -> { return new Move.Down(initiator); } case 'd' -> { return new Move.Right(initiator); } case 'h' -> { initiator = 1; return new Move.Up(initiator); } case 'j' -> { initiator = 1; return new Move.Left(initiator); } case 'k' -> { initiator = 1; return new Move.Down(initiator); } case 'l' -> { initiator = 1; return new Move.Right(initiator); } default -> { return new InvalidInput(initiator, INVALID_INPUT_MESSAGE); } } } // Invalid Input return new InvalidInput(initiator, INVALID_INPUT_MESSAGE); // throw new NotImplementedException(); }",
        "label": "P"
    },
    "2092": {
        "dataset": "COMP 3021",
        "project": "ktckwan",
        "bug_id": "28",
        "T": "void testMove(String input, String name, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); } private InputStream fixValueStream(String content) { final var bytes = content.getBytes(StandardCharsets.UTF_8); return new ByteArrayInputStream(bytes); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine(); // TODO done var inputLowerCase = inputLine.toLowerCase(); // Support up to 2 player var initiator = 0; // Exit if(inputLowerCase.equals(EXIT_COMMAND_TEXT)){ return new Exit(initiator); } if(inputLowerCase.length() == 1){ var ch = inputLowerCase.charAt(0); switch (ch){ case 'u' ->{ //undo return new Undo(initiator); } case 'w' -> { return new Move.Up(initiator); } case 'a' -> { return new Move.Left(initiator); } case 's' -> { return new Move.Down(initiator); } case 'd' -> { return new Move.Right(initiator); } case 'h' -> { initiator = 1; return new Move.Up(initiator); } case 'j' -> { initiator = 1; return new Move.Left(initiator); } case 'k' -> { initiator = 1; return new Move.Down(initiator); } case 'l' -> { initiator = 1; return new Move.Right(initiator); } default -> { return new InvalidInput(initiator, INVALID_INPUT_MESSAGE); } } } // Invalid Input return new InvalidInput(initiator, INVALID_INPUT_MESSAGE); // throw new NotImplementedException(); }",
        "label": "P"
    },
    "2093": {
        "dataset": "COMP 3021",
        "project": "ktckwan",
        "bug_id": "29",
        "T": "void testMove(String input, String name, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); } private InputStream fixValueStream(String content) { final var bytes = content.getBytes(StandardCharsets.UTF_8); return new ByteArrayInputStream(bytes); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine(); // TODO done var inputLowerCase = inputLine.toLowerCase(); // Support up to 2 player var initiator = 0; // Exit if(inputLowerCase.equals(EXIT_COMMAND_TEXT)){ return new Exit(initiator); } if(inputLowerCase.length() == 1){ var ch = inputLowerCase.charAt(0); switch (ch){ case 'u' ->{ //undo return new Undo(initiator); } case 'w' -> { return new Move.Up(initiator); } case 'a' -> { return new Move.Left(initiator); } case 's' -> { return new Move.Down(initiator); } case 'd' -> { return new Move.Right(initiator); } case 'h' -> { initiator = 1; return new Move.Up(initiator); } case 'j' -> { initiator = 1; return new Move.Left(initiator); } case 'k' -> { initiator = 1; return new Move.Down(initiator); } case 'l' -> { initiator = 1; return new Move.Right(initiator); } default -> { return new InvalidInput(initiator, INVALID_INPUT_MESSAGE); } } } // Invalid Input return new InvalidInput(initiator, INVALID_INPUT_MESSAGE); // throw new NotImplementedException(); }",
        "label": "P"
    },
    "2094": {
        "dataset": "COMP 3021",
        "project": "ktckwan",
        "bug_id": "30",
        "T": "void testMove(String input, String name, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); } private InputStream fixValueStream(String content) { final var bytes = content.getBytes(StandardCharsets.UTF_8); return new ByteArrayInputStream(bytes); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine(); // TODO done var inputLowerCase = inputLine.toLowerCase(); // Support up to 2 player var initiator = 0; // Exit if(inputLowerCase.equals(EXIT_COMMAND_TEXT)){ return new Exit(initiator); } if(inputLowerCase.length() == 1){ var ch = inputLowerCase.charAt(0); switch (ch){ case 'u' ->{ //undo return new Undo(initiator); } case 'w' -> { return new Move.Up(initiator); } case 'a' -> { return new Move.Left(initiator); } case 's' -> { return new Move.Down(initiator); } case 'd' -> { return new Move.Right(initiator); } case 'h' -> { initiator = 1; return new Move.Up(initiator); } case 'j' -> { initiator = 1; return new Move.Left(initiator); } case 'k' -> { initiator = 1; return new Move.Down(initiator); } case 'l' -> { initiator = 1; return new Move.Right(initiator); } default -> { return new InvalidInput(initiator, INVALID_INPUT_MESSAGE); } } } // Invalid Input return new InvalidInput(initiator, INVALID_INPUT_MESSAGE); // throw new NotImplementedException(); }",
        "label": "F"
    },
    "2095": {
        "dataset": "COMP 3021",
        "project": "ktckwan",
        "bug_id": "31",
        "T": "void testMove(String input, String name, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); } private InputStream fixValueStream(String content) { final var bytes = content.getBytes(StandardCharsets.UTF_8); return new ByteArrayInputStream(bytes); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine(); // TODO done var inputLowerCase = inputLine.toLowerCase(); // Support up to 2 player var initiator = 0; // Exit if(inputLowerCase.equals(EXIT_COMMAND_TEXT)){ return new Exit(initiator); } if(inputLowerCase.length() == 1){ var ch = inputLowerCase.charAt(0); switch (ch){ case 'u' ->{ //undo return new Undo(initiator); } case 'w' -> { return new Move.Up(initiator); } case 'a' -> { return new Move.Left(initiator); } case 's' -> { return new Move.Down(initiator); } case 'd' -> { return new Move.Right(initiator); } case 'h' -> { initiator = 1; return new Move.Up(initiator); } case 'j' -> { initiator = 1; return new Move.Left(initiator); } case 'k' -> { initiator = 1; return new Move.Down(initiator); } case 'l' -> { initiator = 1; return new Move.Right(initiator); } default -> { return new InvalidInput(initiator, INVALID_INPUT_MESSAGE); } } } // Invalid Input return new InvalidInput(initiator, INVALID_INPUT_MESSAGE); // throw new NotImplementedException(); }",
        "label": "F"
    },
    "2096": {
        "dataset": "COMP 3021",
        "project": "ktckwan",
        "bug_id": "32",
        "T": "void testMove(String input, String name, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); } private InputStream fixValueStream(String content) { final var bytes = content.getBytes(StandardCharsets.UTF_8); return new ByteArrayInputStream(bytes); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine(); // TODO done var inputLowerCase = inputLine.toLowerCase(); // Support up to 2 player var initiator = 0; // Exit if(inputLowerCase.equals(EXIT_COMMAND_TEXT)){ return new Exit(initiator); } if(inputLowerCase.length() == 1){ var ch = inputLowerCase.charAt(0); switch (ch){ case 'u' ->{ //undo return new Undo(initiator); } case 'w' -> { return new Move.Up(initiator); } case 'a' -> { return new Move.Left(initiator); } case 's' -> { return new Move.Down(initiator); } case 'd' -> { return new Move.Right(initiator); } case 'h' -> { initiator = 1; return new Move.Up(initiator); } case 'j' -> { initiator = 1; return new Move.Left(initiator); } case 'k' -> { initiator = 1; return new Move.Down(initiator); } case 'l' -> { initiator = 1; return new Move.Right(initiator); } default -> { return new InvalidInput(initiator, INVALID_INPUT_MESSAGE); } } } // Invalid Input return new InvalidInput(initiator, INVALID_INPUT_MESSAGE); // throw new NotImplementedException(); }",
        "label": "F"
    },
    "2097": {
        "dataset": "COMP 3021",
        "project": "ktckwan",
        "bug_id": "33",
        "T": "void testMove(String input, String name, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); } private InputStream fixValueStream(String content) { final var bytes = content.getBytes(StandardCharsets.UTF_8); return new ByteArrayInputStream(bytes); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine(); // TODO done var inputLowerCase = inputLine.toLowerCase(); // Support up to 2 player var initiator = 0; // Exit if(inputLowerCase.equals(EXIT_COMMAND_TEXT)){ return new Exit(initiator); } if(inputLowerCase.length() == 1){ var ch = inputLowerCase.charAt(0); switch (ch){ case 'u' ->{ //undo return new Undo(initiator); } case 'w' -> { return new Move.Up(initiator); } case 'a' -> { return new Move.Left(initiator); } case 's' -> { return new Move.Down(initiator); } case 'd' -> { return new Move.Right(initiator); } case 'h' -> { initiator = 1; return new Move.Up(initiator); } case 'j' -> { initiator = 1; return new Move.Left(initiator); } case 'k' -> { initiator = 1; return new Move.Down(initiator); } case 'l' -> { initiator = 1; return new Move.Right(initiator); } default -> { return new InvalidInput(initiator, INVALID_INPUT_MESSAGE); } } } // Invalid Input return new InvalidInput(initiator, INVALID_INPUT_MESSAGE); // throw new NotImplementedException(); }",
        "label": "P"
    },
    "2098": {
        "dataset": "COMP 3021",
        "project": "ktckwan",
        "bug_id": "34",
        "T": "void testUndo(String input, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine(); // TODO done var inputLowerCase = inputLine.toLowerCase(); // Support up to 2 player var initiator = 0; // Exit if(inputLowerCase.equals(EXIT_COMMAND_TEXT)){ return new Exit(initiator); } if(inputLowerCase.length() == 1){ var ch = inputLowerCase.charAt(0); switch (ch){ case 'u' ->{ //undo return new Undo(initiator); } case 'w' -> { return new Move.Up(initiator); } case 'a' -> { return new Move.Left(initiator); } case 's' -> { return new Move.Down(initiator); } case 'd' -> { return new Move.Right(initiator); } case 'h' -> { initiator = 1; return new Move.Up(initiator); } case 'j' -> { initiator = 1; return new Move.Left(initiator); } case 'k' -> { initiator = 1; return new Move.Down(initiator); } case 'l' -> { initiator = 1; return new Move.Right(initiator); } default -> { return new InvalidInput(initiator, INVALID_INPUT_MESSAGE); } } } // Invalid Input return new InvalidInput(initiator, INVALID_INPUT_MESSAGE); // throw new NotImplementedException(); }",
        "label": "P"
    },
    "2099": {
        "dataset": "COMP 3021",
        "project": "ktckwan",
        "bug_id": "35",
        "T": "void testInvalidInput() { final var inputStream = fixValueStream(\"blah blah\"); final var inputEngine = new TerminalInputEngine(inputStream); final var action = inputEngine.fetchAction(); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine(); // TODO done var inputLowerCase = inputLine.toLowerCase(); // Support up to 2 player var initiator = 0; // Exit if(inputLowerCase.equals(EXIT_COMMAND_TEXT)){ return new Exit(initiator); } if(inputLowerCase.length() == 1){ var ch = inputLowerCase.charAt(0); switch (ch){ case 'u' ->{ //undo return new Undo(initiator); } case 'w' -> { return new Move.Up(initiator); } case 'a' -> { return new Move.Left(initiator); } case 's' -> { return new Move.Down(initiator); } case 'd' -> { return new Move.Right(initiator); } case 'h' -> { initiator = 1; return new Move.Up(initiator); } case 'j' -> { initiator = 1; return new Move.Left(initiator); } case 'k' -> { initiator = 1; return new Move.Down(initiator); } case 'l' -> { initiator = 1; return new Move.Right(initiator); } default -> { return new InvalidInput(initiator, INVALID_INPUT_MESSAGE); } } } // Invalid Input return new InvalidInput(initiator, INVALID_INPUT_MESSAGE); // throw new NotImplementedException(); }",
        "label": "P"
    },
    "2100": {
        "dataset": "COMP 3021",
        "project": "ktckwan",
        "bug_id": "36",
        "T": "void testUndoWhenThereIsNoMove() { final var gameState = new GameState(TestHelper.parseGameMap(\"\"\" 233 ###### #A.a@# #..a@# ###### \"\"\" )); gameState.undo(); } private Entity generateEntity(int key) { return switch (key % 4) { case 0 -> new Box(0); case 1 -> new Empty(); case 2 -> new Player(0); case 3 -> new Wall(); default -> throw new ShouldNotReachException(); }; }",
        "C": "public GameState(@NotNull GameMap map) { // TODO done this.map = map; // The map should not be modifed if(map.getUndoLimit().isPresent()) this.undoQuota = map.getUndoLimit().get(); // Integer value else this.undoQuota = 0; // explict this.currentMap = new GameMap(map, this.undoQuota); // currentMap is a deep copy of map // throw new NotImplementedException(); } public void undo() { // TODO done if(undoQuota <= 0 && undoQuota != -1) return; // only 1 checkpt if(!checkpoints.empty()){ checkpoints.pop(); --this.undoQuota; } // empty, or 1 checkpt before use the unmodified map if(checkpoints.empty()){ // revert to the inital game state currentMap = new GameMap(map, undoQuota); return; } currentMap = checkpoints.lastElement(); // throw new NotImplementedException(); } /** * Get the maximum width of the game map. * This should be the same as that in {@link GameMap} public TerminalRenderingEngine(PrintStream outputSteam) { this.outputSteam = outputSteam; } public Box(int playerId) { this.playerId = playerId; } public Player(int id) { this.id = id; } public ShouldNotReachException() { super(\"This branch should not be reached.\"); }",
        "label": "P"
    },
    "2101": {
        "dataset": "COMP 3021",
        "project": "ktckwan",
        "bug_id": "37",
        "T": "void testGetUndoUnlimited() { final var gameState = new GameState(TestHelper.parseGameMap(\"\"\" -1 ###### #.Aa@# #..a@# ###### \"\"\" )); }",
        "C": "public GameState(@NotNull GameMap map) { // TODO done this.map = map; // The map should not be modifed if(map.getUndoLimit().isPresent()) this.undoQuota = map.getUndoLimit().get(); // Integer value else this.undoQuota = 0; // explict this.currentMap = new GameMap(map, this.undoQuota); // currentMap is a deep copy of map // throw new NotImplementedException(); }",
        "label": "P"
    },
    "2102": {
        "dataset": "COMP 3021",
        "project": "ktckwan",
        "bug_id": "38",
        "T": "void testMapCopying() { final var maxWidth = 2333; final var maxHeight = 2333; final var random = new Random(); final var randomEntities = Stream.generate(() -> Position.of(random.nextInt(maxWidth), random.nextInt(maxHeight))) .distinct() .limit(100) .collect(Collectors.toMap(Function.identity(), it -> generateEntity(it.x()))); final var firstPos = randomEntities.keySet().stream().findFirst(); final var gameMap = new GameMap(maxWidth, maxHeight, Collections.singleton(firstPos.get()), 233); randomEntities.forEach(gameMap::putEntity); final var gameState = new GameState(gameMap); final var randomPosition = randomEntities.keySet().stream().findAny(); gameMap.putEntity(randomPosition.get(), new Empty()); randomEntities.forEach((p, e) -> assertEquals(e, gameState.getEntity(p))); }",
        "C": "public static @NotNull Position of(int x, int y) { return new Position(x, y); } public GameMap(GameMap gamemap, int undo) { this(gamemap.maxWidth, gamemap.maxHeight, gamemap.destinations, undo); // deep clone var tmp = new HashMap<Position, Entity>(); for (var pos : gamemap.map.keySet()) { tmp.put(pos, gamemap.map.get(pos)); } this.map = (HashMap<Position, Entity>)tmp; // make the map not a hashmap } public GameState(@NotNull GameMap map) { // TODO done this.map = map; // The map should not be modifed if(map.getUndoLimit().isPresent()) this.undoQuota = map.getUndoLimit().get(); // Integer value else this.undoQuota = 0; // explict this.currentMap = new GameMap(map, this.undoQuota); // currentMap is a deep copy of map // throw new NotImplementedException(); } public void putEntity(Position position, Entity entity) { // TODO done map.put(position, entity); // update the var // throw new NotImplementedException(); } public @Nullable Entity getEntity(@NotNull Position position) { // TODO done return currentMap.getEntity(position); // throw new NotImplementedException(); } /** * Get all box destination positions as a set in the game map. * This should be the same as that in {@link GameMap}",
        "label": "P"
    },
    "2103": {
        "dataset": "COMP 3021",
        "project": "ktckwan",
        "bug_id": "39",
        "T": "void testUndoWhenThereIsMoveButNoCheckpoint() { final var gameState = new GameState(TestHelper.parseGameMap(\"\"\" 233 ###### #A.a@# #..a@# ###### \"\"\" )); gameState.move(Position.of(1, 1), Position.of(2, 1)); gameState.undo(); }",
        "C": "public GameState(@NotNull GameMap map) { // TODO done this.map = map; // The map should not be modifed if(map.getUndoLimit().isPresent()) this.undoQuota = map.getUndoLimit().get(); // Integer value else this.undoQuota = 0; // explict this.currentMap = new GameMap(map, this.undoQuota); // currentMap is a deep copy of map // throw new NotImplementedException(); } public void move(Position from, Position to) { // TODO done var tmp = currentMap.getEntity(from); currentMap.putEntity(from, new Empty()); currentMap.putEntity(to, tmp); } /** * Record a checkpoint of the game state, including: * <li>All current positions of entities in the game map.</li> * <li>Current undo quota</li> * <p> * Checkpoint is used in {@link GameState#undo()} public static @NotNull Position of(int x, int y) { return new Position(x, y); } public void undo() { // TODO done if(undoQuota <= 0 && undoQuota != -1) return; // only 1 checkpt if(!checkpoints.empty()){ checkpoints.pop(); --this.undoQuota; } // empty, or 1 checkpt before use the unmodified map if(checkpoints.empty()){ // revert to the inital game state currentMap = new GameMap(map, undoQuota); return; } currentMap = checkpoints.lastElement(); // throw new NotImplementedException(); } /** * Get the maximum width of the game map. * This should be the same as that in {@link GameMap}",
        "label": "P"
    },
    "2104": {
        "dataset": "COMP 3021",
        "project": "ktckwan",
        "bug_id": "40",
        "T": "void testGameExit() { final var gameState = mock(GameState.class); final var inputEngine = mock(TerminalInputEngine.class); final var renderingEngine = mock(TerminalRenderingEngine.class); when(gameState.isWin()).thenReturn(false, false, false); when(inputEngine.fetchAction()) .thenReturn(new InvalidInput(0, \"\"), new InvalidInput(0, \"\"), new Exit(0)); final var game = new TerminalSokobanGame(gameState, inputEngine, renderingEngine); game.run(); verify(renderingEngine, atLeastOnce()).message(any()); }",
        "C": "public InvalidInput(int initiator, @NotNull String message) { super(initiator); this.message = message; } public Exit(int initiator) { super(initiator); } public TerminalSokobanGame(GameState gameState, TerminalInputEngine inputEngine, TerminalRenderingEngine renderingEngine) { super(gameState); this.inputEngine = inputEngine; this.renderingEngine = renderingEngine; // TODO done if(state.getAllPlayerPositions().size() > 2) throw new IllegalArgumentException(\"TerminalSokobanGame only support at most two players.\"); } public void run() { // TODO done renderingEngine.message(GAME_READY_MESSAGE); while (!super.shouldStop()){ renderingEngine.render(state); renderingEngine.message(\"\"); if(state.getUndoQuota().isPresent()){ var undoMsg = String.format(UNDO_QUOTA_TEMPLATE, state.getUndoQuota().get()); renderingEngine.message(undoMsg); }else{ renderingEngine.message(UNDO_QUOTA_UNLIMITED); } var action = inputEngine.fetchAction(); var result = super.processAction(action); // Print if the action is failed if(result instanceof ActionResult.Failed failed) renderingEngine.message(failed.getReason()); // print the map } renderingEngine.render(state); renderingEngine.message(\"\"); renderingEngine.message(GAME_EXIT_MESSAGE); if(state.isWin()) renderingEngine.message(WIN_MESSAGE); // throw new NotImplementedException(); }",
        "label": "P"
    },
    "2105": {
        "dataset": "COMP 3021",
        "project": "ktckwan",
        "bug_id": "41",
        "T": "void testGameWin() { final var gameState = mock(GameState.class); final var inputEngine = mock(TerminalInputEngine.class); final var renderingEngine = mock(TerminalRenderingEngine.class); when(gameState.isWin()).thenReturn(false, false, false, true); when(inputEngine.fetchAction()) .thenReturn(new InvalidInput(0, \"\")); final var game = new TerminalSokobanGame(gameState, inputEngine, renderingEngine); game.run(); verify(gameState, atLeastOnce()).isWin(); verify(renderingEngine, atLeastOnce()).message(any()); }",
        "C": "public InvalidInput(int initiator, @NotNull String message) { super(initiator); this.message = message; } public TerminalSokobanGame(GameState gameState, TerminalInputEngine inputEngine, TerminalRenderingEngine renderingEngine) { super(gameState); this.inputEngine = inputEngine; this.renderingEngine = renderingEngine; // TODO done if(state.getAllPlayerPositions().size() > 2) throw new IllegalArgumentException(\"TerminalSokobanGame only support at most two players.\"); } public void run() { // TODO done renderingEngine.message(GAME_READY_MESSAGE); while (!super.shouldStop()){ renderingEngine.render(state); renderingEngine.message(\"\"); if(state.getUndoQuota().isPresent()){ var undoMsg = String.format(UNDO_QUOTA_TEMPLATE, state.getUndoQuota().get()); renderingEngine.message(undoMsg); }else{ renderingEngine.message(UNDO_QUOTA_UNLIMITED); } var action = inputEngine.fetchAction(); var result = super.processAction(action); // Print if the action is failed if(result instanceof ActionResult.Failed failed) renderingEngine.message(failed.getReason()); // print the map } renderingEngine.render(state); renderingEngine.message(\"\"); renderingEngine.message(GAME_EXIT_MESSAGE); if(state.isWin()) renderingEngine.message(WIN_MESSAGE); // throw new NotImplementedException(); }",
        "label": "P"
    },
    "2106": {
        "dataset": "COMP 3021",
        "project": "ktckwan",
        "bug_id": "42",
        "T": "void testMoreThanTwoPlayers() { final var gameState = mock(GameState.class); final var inputEngine = mock(TerminalInputEngine.class); final var renderingEngine = mock(TerminalRenderingEngine.class); when(gameState.getAllPlayerPositions()).thenReturn(new HashSet<>(Arrays.asList(Position.of(1, 1), Position.of(1, 2), Position.of(1, 3)))); }",
        "C": "public static @NotNull Position of(int x, int y) { return new Position(x, y); }",
        "label": "P"
    },
    "2107": {
        "dataset": "COMP 3021",
        "project": "ydengbd",
        "bug_id": "0",
        "T": "void moveUp() { Position.of(233, 232), new Move.Up(-1).nextPosition(pos) ); }",
        "C": "public static @NotNull Position of(int x, int y) { return new Position(x, y); } public Up(int initiator) { super(initiator); }",
        "label": "P"
    },
    "2108": {
        "dataset": "COMP 3021",
        "project": "ydengbd",
        "bug_id": "1",
        "T": "void moveDown() { Position.of(233, 234), new Move.Down(-1).nextPosition(pos) ); }",
        "C": "public static @NotNull Position of(int x, int y) { return new Position(x, y); } public Down(int initiator) { super(initiator); }",
        "label": "P"
    },
    "2109": {
        "dataset": "COMP 3021",
        "project": "ydengbd",
        "bug_id": "2",
        "T": "void moveRight() { Position.of(234, 233), new Move.Right(-1).nextPosition(pos) ); }",
        "C": "public static @NotNull Position of(int x, int y) { return new Position(x, y); } public Right(int initiator) { super(initiator); }",
        "label": "P"
    },
    "2110": {
        "dataset": "COMP 3021",
        "project": "ydengbd",
        "bug_id": "3",
        "T": "void testExceedingUndoQuota() { final var gameState = mock(GameState.class); when(gameState.getPlayerPositionById(anyInt())).thenReturn(Position.of(0, 0)); when(gameState.getUndoQuota()).thenReturn(Optional.of(0)); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Undo(0)); }",
        "C": "public Undo(int initiator) { super(initiator); }",
        "label": "P"
    },
    "2111": {
        "dataset": "COMP 3021",
        "project": "ydengbd",
        "bug_id": "4",
        "T": "void testExit() { final var gameState = mock(GameState.class); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Exit(0)); }",
        "C": "public Exit(int initiator) { super(initiator); }",
        "label": "P"
    },
    "2112": {
        "dataset": "COMP 3021",
        "project": "ydengbd",
        "bug_id": "5",
        "T": "void testUndoUnlimited() { final var gameState = mock(GameState.class); when(gameState.getPlayerPositionById(anyInt())).thenReturn(Position.of(0, 0)); when(gameState.getUndoQuota()).thenReturn(Optional.empty()); final var game = new SokobanGameForTesting(gameState); for (int i = 0; i < 10000; i++) { final var result = game.feedActionForProcessing(new Undo(0)); } verify(gameState, times(10000)).undo(); }",
        "C": "public TerminalRenderingEngine(PrintStream outputSteam) { this.outputSteam = outputSteam; } public Undo(int initiator) { super(initiator); }",
        "label": "P"
    },
    "2113": {
        "dataset": "COMP 3021",
        "project": "ydengbd",
        "bug_id": "6",
        "T": "void testPushOtherPlayerBox() { String mapText = \"\"\" 233 ###### #AB.@# #b.a.# #@...# ###### \"\"\"; final var testMap = TestHelper.parseGameMap(mapText); final var gameState = spy(new GameState(testMap)); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Move.Down(0)); verify(gameState, never()).move(any(), any()); }",
        "C": "public GameState(@NotNull GameMap map) { // TODO this.maxWidth = map.getMaxWidth(); this.maxHeight = map.getMaxHeight(); this.undoLimit = map.getUndoLimit(); this.destinations = map.getDestinations(); this.playerIds = map.getPlayerIds(); for (int i = 0; i < this.maxHeight; i++) { for (int j = 0; j < this.maxWidth; j++) { Entity e = map.getEntity(new Position(j, i)); this.allEntity.put(new Position(j, i), e); } } checkpoint(); // throw new NotImplementedException(); } public Down(int initiator) { super(initiator); }",
        "label": "P"
    },
    "2114": {
        "dataset": "COMP 3021",
        "project": "ydengbd",
        "bug_id": "7",
        "T": "void testMoveNonExistingPlayer() { String mapText = \"\"\" 233 ###### #A..@# #a...# ##...# ###### \"\"\"; final var testMap = TestHelper.parseGameMap(mapText); final var gameState = spy(new GameState(testMap)); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Move.Down(23)); }",
        "C": "public GameState(@NotNull GameMap map) { // TODO this.maxWidth = map.getMaxWidth(); this.maxHeight = map.getMaxHeight(); this.undoLimit = map.getUndoLimit(); this.destinations = map.getDestinations(); this.playerIds = map.getPlayerIds(); for (int i = 0; i < this.maxHeight; i++) { for (int j = 0; j < this.maxWidth; j++) { Entity e = map.getEntity(new Position(j, i)); this.allEntity.put(new Position(j, i), e); } } checkpoint(); // throw new NotImplementedException(); } public Down(int initiator) { super(initiator); }",
        "label": "F"
    },
    "2115": {
        "dataset": "COMP 3021",
        "project": "ydengbd",
        "bug_id": "8",
        "T": "void testCheckpointWhenNeed() { final var gameState = spy(new GameState(TestHelper.parseGameMap(\"\"\" 233 ###### #.Aa@# #..a@# ###### \"\"\" ))); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Move.Right(0)); verify(gameState, times(1)).checkpoint(); }",
        "C": "public GameState(@NotNull GameMap map) { // TODO this.maxWidth = map.getMaxWidth(); this.maxHeight = map.getMaxHeight(); this.undoLimit = map.getUndoLimit(); this.destinations = map.getDestinations(); this.playerIds = map.getPlayerIds(); for (int i = 0; i < this.maxHeight; i++) { for (int j = 0; j < this.maxWidth; j++) { Entity e = map.getEntity(new Position(j, i)); this.allEntity.put(new Position(j, i), e); } } checkpoint(); // throw new NotImplementedException(); } public Right(int initiator) { super(initiator); }",
        "label": "P"
    },
    "2116": {
        "dataset": "COMP 3021",
        "project": "ydengbd",
        "bug_id": "9",
        "T": "void testPushBoxAgainstWall() { String mapText = \"\"\" 233 ###### #A..@# #a...# ##...# ###### \"\"\"; final var testMap = TestHelper.parseGameMap(mapText); final var gameState = spy(new GameState(testMap)); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Move.Down(0)); verify(gameState, never()).move(any(), any()); }",
        "C": "public GameState(@NotNull GameMap map) { // TODO this.maxWidth = map.getMaxWidth(); this.maxHeight = map.getMaxHeight(); this.undoLimit = map.getUndoLimit(); this.destinations = map.getDestinations(); this.playerIds = map.getPlayerIds(); for (int i = 0; i < this.maxHeight; i++) { for (int j = 0; j < this.maxWidth; j++) { Entity e = map.getEntity(new Position(j, i)); this.allEntity.put(new Position(j, i), e); } } checkpoint(); // throw new NotImplementedException(); } public Down(int initiator) { super(initiator); }",
        "label": "P"
    },
    "2117": {
        "dataset": "COMP 3021",
        "project": "ydengbd",
        "bug_id": "10",
        "T": "void testCheckpointWhenNotNeed() { final var gameState = spy(new GameState(TestHelper.parseGameMap(\"\"\" 233 ###### #A.a@# #..a@# ###### \"\"\" ))); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Move.Right(0)); verify(gameState, never()).checkpoint(); } private static class SokobanGameForTesting extends AbstractSokobanGame { protected SokobanGameForTesting(GameState gameState) { super(gameState); } @Override public void run() { } public ActionResult feedActionForProcessing(Action action) { return processAction(action); } }",
        "C": "public GameState(@NotNull GameMap map) { // TODO this.maxWidth = map.getMaxWidth(); this.maxHeight = map.getMaxHeight(); this.undoLimit = map.getUndoLimit(); this.destinations = map.getDestinations(); this.playerIds = map.getPlayerIds(); for (int i = 0; i < this.maxHeight; i++) { for (int j = 0; j < this.maxWidth; j++) { Entity e = map.getEntity(new Position(j, i)); this.allEntity.put(new Position(j, i), e); } } checkpoint(); // throw new NotImplementedException(); } public Right(int initiator) { super(initiator); } public void run() { // TODO while (!super.shouldStop()) { this.renderingEngine.render(super.state); if (super.state.getUndoQuota().isPresent()) { this.renderingEngine.message(\"Undo Quota: \" + String.valueOf(this.state.getUndoQuota().get())); } else { this.renderingEngine.message(\"Unlimited\"); } this.renderingEngine.message(\">>>\"); var act = super.processAction(this.inputEngine.fetchAction()); if (act instanceof ActionResult.Failed a) { this.renderingEngine.message(a.getReason()); } } this.renderingEngine.render(super.state); this.renderingEngine.message(\"Game exits.\"); if (this.state.isWin()) { this.renderingEngine.message(\"You win.\"); } // throw new NotImplementedException(); } protected ActionResult processAction(@NotNull Action action) { // TODO return switch (action) { case Move act-> { var p = this.state.getPlayerPositionById(act.getInitiator()); var e = this.state.getEntity(act.nextPosition(p)); String error = \"\"; var result = switch (e) { case Wall ignored -> { error = \"You hit a wall.\"; yield false; } case Box b -> { if (b.getPlayerId() == act.getInitiator()) { if (this.state.getEntity(act.nextPosition(act.nextPosition(p))) instanceof Empty) { this.state.move(act.nextPosition(p), act.nextPosition(act.nextPosition(p))); this.state.move(p, act.nextPosition(p)); this.state.checkpoint(); yield true; } else { error = \"Failed to push the box.\"; yield false; } } else { error = \"You cannot move other players' boxes.\"; yield false; } } case Player ignored -> { error = \"You hit another player.\"; yield false; } case Empty ignored -> { this.state.move(p, act.nextPosition(p)); yield true; } default -> false; }; if (result) { yield new ActionResult.Success(act); } else { yield new ActionResult.Failed(act, error); } } case Undo act -> { var quota = this.state.getUndoQuota(); if (quota.isPresent()){ if (quota.get() != 0) { this.state.undo(); yield new ActionResult.Success(act); } else { yield new ActionResult.Failed(act, \"You have run out of your undo quota.\"); } } else { this.state.undo(); yield new ActionResult.Success(act); } } case InvalidInput act -> new ActionResult.Failed(act, \"Invalid Input\"); case Exit act -> { this.exit = true; yield new ActionResult.Success(act); } }; // throw new NotImplementedException(); }",
        "label": "P"
    },
    "2118": {
        "dataset": "COMP 3021",
        "project": "ydengbd",
        "bug_id": "11",
        "T": "void testHitAnotherPlayer() { String mapText = \"\"\" 233 ###### #A..@# #B...# #ab.@# ###### \"\"\"; final var testMap = TestHelper.parseGameMap(mapText); final var gameState = spy(new GameState(testMap)); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Move.Down(0)); verify(gameState, never()).move(any(), any()); }",
        "C": "public GameState(@NotNull GameMap map) { // TODO this.maxWidth = map.getMaxWidth(); this.maxHeight = map.getMaxHeight(); this.undoLimit = map.getUndoLimit(); this.destinations = map.getDestinations(); this.playerIds = map.getPlayerIds(); for (int i = 0; i < this.maxHeight; i++) { for (int j = 0; j < this.maxWidth; j++) { Entity e = map.getEntity(new Position(j, i)); this.allEntity.put(new Position(j, i), e); } } checkpoint(); // throw new NotImplementedException(); } public Down(int initiator) { super(initiator); }",
        "label": "P"
    },
    "2119": {
        "dataset": "COMP 3021",
        "project": "ydengbd",
        "bug_id": "12",
        "T": "void testUndoWithinQuota() { final var gameState = mock(GameState.class); when(gameState.getPlayerPositionById(anyInt())).thenReturn(Position.of(0, 0)); when(gameState.getUndoQuota()).thenReturn(Optional.of(1)); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Undo(0)); verify(gameState, times(1)).undo(); }",
        "C": "public Undo(int initiator) { super(initiator); }",
        "label": "P"
    },
    "2120": {
        "dataset": "COMP 3021",
        "project": "ydengbd",
        "bug_id": "13",
        "T": "void testInvalidInput() { final var game = new SokobanGameForTesting(mock(GameState.class)); final var message = String.valueOf(new Random().nextLong()); final var action = new InvalidInput(-1, message); final var result = game.feedActionForProcessing(action); }",
        "C": "public InvalidInput(int initiator, @NotNull String message) { super(initiator); this.message = message; }",
        "label": "P"
    },
    "2121": {
        "dataset": "COMP 3021",
        "project": "ydengbd",
        "bug_id": "14",
        "T": "void testUndoLimitParsing() { final var gameMap = TestHelper.parseGameMap(rectangularMap); }",
        "C": "",
        "label": "P"
    },
    "2122": {
        "dataset": "COMP 3021",
        "project": "ydengbd",
        "bug_id": "15",
        "T": "void testWidthForNonRectangularMap() { final var gameMap = TestHelper.parseGameMap(nonRectangularMap); }",
        "C": "",
        "label": "P"
    },
    "2123": {
        "dataset": "COMP 3021",
        "project": "ydengbd",
        "bug_id": "16",
        "T": "void testTwoPlayersMap() { final var twoPlayersMap = \"\"\" 233 ###### #A..@# #..B@# #....# #.a..# #..b.# ###### \"\"\"; final var gameMap = TestHelper.parseGameMap(twoPlayersMap); final var playerIds = gameMap.getPlayerIds(); final var expectedIds = new HashSet<Integer>(); expectedIds.add(0); expectedIds.add(1); }",
        "C": "public Set<Integer> getPlayerIds() { // TODO return this.playerIds; // throw new NotImplementedException(); }",
        "label": "P"
    },
    "2124": {
        "dataset": "COMP 3021",
        "project": "ydengbd",
        "bug_id": "17",
        "T": "void testMapWithoutPlayer() { final var invalidMap = \"\"\" 233 ### #.# ### \"\"\"; } // @Tag(TestKind.HIDDEN) // @Test // void testUnmatchedPlayersAndBoxes() { // final var invalidMap = \"\"\" // 233 // ###### // #A..@# // #...@# // #a.b@# // #.a.@# // #..a.# // ###### // \"\"\"; // assertThrowsExactly(IllegalArgumentException.class, () -> TestHelper.parseGameMap(invalidMap)); // }",
        "C": "public TerminalRenderingEngine(PrintStream outputSteam) { this.outputSteam = outputSteam; }",
        "label": "P"
    },
    "2125": {
        "dataset": "COMP 3021",
        "project": "ydengbd",
        "bug_id": "18",
        "T": "void testManyPlayersMap() { final var manyPlayersMap = \"\"\" 233 ###### #A.P@@# #vCB@@# #.cpD@# #Ga.d@# #g.bV@# ###### \"\"\"; final var gameMap = TestHelper.parseGameMap(manyPlayersMap); final var playerIds = gameMap.getPlayerIds(); final var expectedIds = new HashSet<>(Arrays.asList( 0, 'P' - 'A', 'C' - 'A', 'B' - 'A', 'D' - 'A', 'G' - 'A', 'V' - 'A' )); }",
        "C": "public Set<Integer> getPlayerIds() { // TODO return this.playerIds; // throw new NotImplementedException(); }",
        "label": "P"
    },
    "2126": {
        "dataset": "COMP 3021",
        "project": "ydengbd",
        "bug_id": "19",
        "T": "void testHeightForNonRectangularMap() { final var gameMap = TestHelper.parseGameMap(nonRectangularMap); }",
        "C": "",
        "label": "P"
    },
    "2127": {
        "dataset": "COMP 3021",
        "project": "ydengbd",
        "bug_id": "20",
        "T": "void testDuplicatedPlayers() { final var invalidMap = \"\"\" 233 ###### #A..@# #..A@# #....# #.a..# #..b.# ###### \"\"\"; }",
        "C": "",
        "label": "P"
    },
    "2128": {
        "dataset": "COMP 3021",
        "project": "ydengbd",
        "bug_id": "21",
        "T": "void testParseMapWithoutUndoLimit() { final var invalidMap = String.join(\"\\n\", rectangularMap.lines().skip(1).toList()); }",
        "C": "",
        "label": "P"
    },
    "2129": {
        "dataset": "COMP 3021",
        "project": "ydengbd",
        "bug_id": "22",
        "T": "void testInsufficientDestinations() { final var invalidMap = \"\"\" 233 ###### #A..@# #...@# #a...# #.a..# #..a.# ###### \"\"\"; }",
        "C": "",
        "label": "P"
    },
    "2130": {
        "dataset": "COMP 3021",
        "project": "ydengbd",
        "bug_id": "23",
        "T": "void testSuperLargeMap() { try { new GameMap(Integer.MAX_VALUE, Integer.MAX_VALUE, Collections.emptySet(), 0); } catch (OutOfMemoryError e) { throw new RuntimeException(e); } }); }",
        "C": "public GameMap(int maxWidth, int maxHeight, Set<Position> destinations, int undoLimit) { // TODO this.maxWidth = maxWidth; this.maxHeight = maxHeight; this.destinations = destinations; this.undoLimit = undoLimit; // throw new NotImplementedException(); } /** * Parses the map from a string representation. * The first line is undo limit. * Starting from the second line, the game map is represented as follows, * <li># represents a {@link Wall}</li> * <li>@ represents a box destination.</li> * <li>Any upper-case letter represents a {@link Player}.</li> * <li> * Any lower-case letter represents a {@link Box} that is only movable by the player with the corresponding upper-case letter. * For instance, box \"a\" can only be moved by player \"A\" and not movable by player \"B\". * </li> * <li>. represents an {@link Empty} position in the map, meaning there is no player or box currently at this position.</li> * <p> * Notes: * <li> * There can be at most 26 players. * All implementations of classes in the hk.ust.comp3021.game package should support up to 26 players. * </li> * <li> * For simplicity, we assume the given map is bounded with a closed boundary. * There is no need to check this point. * </li> * <li> * Example maps can be found in \"src/main/resources\". * </li> * * @param mapText The string representation. * @return The parsed GameMap object. * @throws IllegalArgumentException if undo limit is negative but not -1. * @throws IllegalArgumentException if there are multiple same upper-case letters, i.e., one player can only exist at one position. * @throws IllegalArgumentException if there are no players in the map. * @throws IllegalArgumentException if the number of boxes is not equal to the number of box destinations. * @throws IllegalArgumentException if there are boxes whose {@link Box#getPlayerId()} public TerminalRenderingEngine(PrintStream outputSteam) { this.outputSteam = outputSteam; }",
        "label": "P"
    },
    "2131": {
        "dataset": "COMP 3021",
        "project": "ydengbd",
        "bug_id": "24",
        "T": "void testInvalidUndoLimit() { final var invalidMap = \"\"\" -233 ###### #A..@# #...@# #a.b@# #.a.@# #..a.# ###### \"\"\"; }",
        "C": "",
        "label": "P"
    },
    "2132": {
        "dataset": "COMP 3021",
        "project": "ydengbd",
        "bug_id": "25",
        "T": "void testEmptyMap() { final var invalidMap = \"\"; }",
        "C": "",
        "label": "P"
    },
    "2133": {
        "dataset": "COMP 3021",
        "project": "ydengbd",
        "bug_id": "26",
        "T": "void testMove(String input, String name, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); } private InputStream fixValueStream(String content) { final var bytes = content.getBytes(StandardCharsets.UTF_8); return new ByteArrayInputStream(bytes); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine(); // TODO Action result = switch (inputLine) { case \"w\" -> new Move.Up(0); case \"s\" -> new Move.Down(0); case \"a\" -> new Move.Left(0); case \"d\" -> new Move.Right(0); case \"k\" -> new Move.Up(1); case \"j\" -> new Move.Down(1); case \"h\" -> new Move.Left(1); case \"l\" -> new Move.Right(1); case \"u\" -> new Undo(0); case \"exit\" -> new Exit(0); default -> new InvalidInput(0, \"Invalid Input.\"); }; return result; // throw new NotImplementedException(); }",
        "label": "P"
    },
    "2134": {
        "dataset": "COMP 3021",
        "project": "ydengbd",
        "bug_id": "27",
        "T": "void testMove(String input, String name, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); } private InputStream fixValueStream(String content) { final var bytes = content.getBytes(StandardCharsets.UTF_8); return new ByteArrayInputStream(bytes); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine(); // TODO Action result = switch (inputLine) { case \"w\" -> new Move.Up(0); case \"s\" -> new Move.Down(0); case \"a\" -> new Move.Left(0); case \"d\" -> new Move.Right(0); case \"k\" -> new Move.Up(1); case \"j\" -> new Move.Down(1); case \"h\" -> new Move.Left(1); case \"l\" -> new Move.Right(1); case \"u\" -> new Undo(0); case \"exit\" -> new Exit(0); default -> new InvalidInput(0, \"Invalid Input.\"); }; return result; // throw new NotImplementedException(); }",
        "label": "P"
    },
    "2135": {
        "dataset": "COMP 3021",
        "project": "ydengbd",
        "bug_id": "28",
        "T": "void testMove(String input, String name, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); } private InputStream fixValueStream(String content) { final var bytes = content.getBytes(StandardCharsets.UTF_8); return new ByteArrayInputStream(bytes); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine(); // TODO Action result = switch (inputLine) { case \"w\" -> new Move.Up(0); case \"s\" -> new Move.Down(0); case \"a\" -> new Move.Left(0); case \"d\" -> new Move.Right(0); case \"k\" -> new Move.Up(1); case \"j\" -> new Move.Down(1); case \"h\" -> new Move.Left(1); case \"l\" -> new Move.Right(1); case \"u\" -> new Undo(0); case \"exit\" -> new Exit(0); default -> new InvalidInput(0, \"Invalid Input.\"); }; return result; // throw new NotImplementedException(); }",
        "label": "P"
    },
    "2136": {
        "dataset": "COMP 3021",
        "project": "ydengbd",
        "bug_id": "29",
        "T": "void testMove(String input, String name, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); } private InputStream fixValueStream(String content) { final var bytes = content.getBytes(StandardCharsets.UTF_8); return new ByteArrayInputStream(bytes); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine(); // TODO Action result = switch (inputLine) { case \"w\" -> new Move.Up(0); case \"s\" -> new Move.Down(0); case \"a\" -> new Move.Left(0); case \"d\" -> new Move.Right(0); case \"k\" -> new Move.Up(1); case \"j\" -> new Move.Down(1); case \"h\" -> new Move.Left(1); case \"l\" -> new Move.Right(1); case \"u\" -> new Undo(0); case \"exit\" -> new Exit(0); default -> new InvalidInput(0, \"Invalid Input.\"); }; return result; // throw new NotImplementedException(); }",
        "label": "P"
    },
    "2137": {
        "dataset": "COMP 3021",
        "project": "ydengbd",
        "bug_id": "30",
        "T": "void testMove(String input, String name, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); } private InputStream fixValueStream(String content) { final var bytes = content.getBytes(StandardCharsets.UTF_8); return new ByteArrayInputStream(bytes); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine(); // TODO Action result = switch (inputLine) { case \"w\" -> new Move.Up(0); case \"s\" -> new Move.Down(0); case \"a\" -> new Move.Left(0); case \"d\" -> new Move.Right(0); case \"k\" -> new Move.Up(1); case \"j\" -> new Move.Down(1); case \"h\" -> new Move.Left(1); case \"l\" -> new Move.Right(1); case \"u\" -> new Undo(0); case \"exit\" -> new Exit(0); default -> new InvalidInput(0, \"Invalid Input.\"); }; return result; // throw new NotImplementedException(); }",
        "label": "P"
    },
    "2138": {
        "dataset": "COMP 3021",
        "project": "ydengbd",
        "bug_id": "31",
        "T": "void testMove(String input, String name, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); } private InputStream fixValueStream(String content) { final var bytes = content.getBytes(StandardCharsets.UTF_8); return new ByteArrayInputStream(bytes); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine(); // TODO Action result = switch (inputLine) { case \"w\" -> new Move.Up(0); case \"s\" -> new Move.Down(0); case \"a\" -> new Move.Left(0); case \"d\" -> new Move.Right(0); case \"k\" -> new Move.Up(1); case \"j\" -> new Move.Down(1); case \"h\" -> new Move.Left(1); case \"l\" -> new Move.Right(1); case \"u\" -> new Undo(0); case \"exit\" -> new Exit(0); default -> new InvalidInput(0, \"Invalid Input.\"); }; return result; // throw new NotImplementedException(); }",
        "label": "P"
    },
    "2139": {
        "dataset": "COMP 3021",
        "project": "ydengbd",
        "bug_id": "32",
        "T": "void testMove(String input, String name, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); } private InputStream fixValueStream(String content) { final var bytes = content.getBytes(StandardCharsets.UTF_8); return new ByteArrayInputStream(bytes); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine(); // TODO Action result = switch (inputLine) { case \"w\" -> new Move.Up(0); case \"s\" -> new Move.Down(0); case \"a\" -> new Move.Left(0); case \"d\" -> new Move.Right(0); case \"k\" -> new Move.Up(1); case \"j\" -> new Move.Down(1); case \"h\" -> new Move.Left(1); case \"l\" -> new Move.Right(1); case \"u\" -> new Undo(0); case \"exit\" -> new Exit(0); default -> new InvalidInput(0, \"Invalid Input.\"); }; return result; // throw new NotImplementedException(); }",
        "label": "P"
    },
    "2140": {
        "dataset": "COMP 3021",
        "project": "ydengbd",
        "bug_id": "33",
        "T": "void testMove(String input, String name, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); } private InputStream fixValueStream(String content) { final var bytes = content.getBytes(StandardCharsets.UTF_8); return new ByteArrayInputStream(bytes); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine(); // TODO Action result = switch (inputLine) { case \"w\" -> new Move.Up(0); case \"s\" -> new Move.Down(0); case \"a\" -> new Move.Left(0); case \"d\" -> new Move.Right(0); case \"k\" -> new Move.Up(1); case \"j\" -> new Move.Down(1); case \"h\" -> new Move.Left(1); case \"l\" -> new Move.Right(1); case \"u\" -> new Undo(0); case \"exit\" -> new Exit(0); default -> new InvalidInput(0, \"Invalid Input.\"); }; return result; // throw new NotImplementedException(); }",
        "label": "P"
    },
    "2141": {
        "dataset": "COMP 3021",
        "project": "ydengbd",
        "bug_id": "34",
        "T": "void testUndo(String input, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine(); // TODO Action result = switch (inputLine) { case \"w\" -> new Move.Up(0); case \"s\" -> new Move.Down(0); case \"a\" -> new Move.Left(0); case \"d\" -> new Move.Right(0); case \"k\" -> new Move.Up(1); case \"j\" -> new Move.Down(1); case \"h\" -> new Move.Left(1); case \"l\" -> new Move.Right(1); case \"u\" -> new Undo(0); case \"exit\" -> new Exit(0); default -> new InvalidInput(0, \"Invalid Input.\"); }; return result; // throw new NotImplementedException(); }",
        "label": "P"
    },
    "2142": {
        "dataset": "COMP 3021",
        "project": "ydengbd",
        "bug_id": "35",
        "T": "void testInvalidInput() { final var inputStream = fixValueStream(\"blah blah\"); final var inputEngine = new TerminalInputEngine(inputStream); final var action = inputEngine.fetchAction(); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine(); // TODO Action result = switch (inputLine) { case \"w\" -> new Move.Up(0); case \"s\" -> new Move.Down(0); case \"a\" -> new Move.Left(0); case \"d\" -> new Move.Right(0); case \"k\" -> new Move.Up(1); case \"j\" -> new Move.Down(1); case \"h\" -> new Move.Left(1); case \"l\" -> new Move.Right(1); case \"u\" -> new Undo(0); case \"exit\" -> new Exit(0); default -> new InvalidInput(0, \"Invalid Input.\"); }; return result; // throw new NotImplementedException(); }",
        "label": "P"
    },
    "2143": {
        "dataset": "COMP 3021",
        "project": "ydengbd",
        "bug_id": "36",
        "T": "void testUndoWhenThereIsNoMove() { final var gameState = new GameState(TestHelper.parseGameMap(\"\"\" 233 ###### #A.a@# #..a@# ###### \"\"\" )); gameState.undo(); } private Entity generateEntity(int key) { return switch (key % 4) { case 0 -> new Box(0); case 1 -> new Empty(); case 2 -> new Player(0); case 3 -> new Wall(); default -> throw new ShouldNotReachException(); }; }",
        "C": "public GameState(@NotNull GameMap map) { // TODO this.maxWidth = map.getMaxWidth(); this.maxHeight = map.getMaxHeight(); this.undoLimit = map.getUndoLimit(); this.destinations = map.getDestinations(); this.playerIds = map.getPlayerIds(); for (int i = 0; i < this.maxHeight; i++) { for (int j = 0; j < this.maxWidth; j++) { Entity e = map.getEntity(new Position(j, i)); this.allEntity.put(new Position(j, i), e); } } checkpoint(); // throw new NotImplementedException(); } public void undo() { // TODO int size = this.checkpoints.size(); if (size > 1) { this.allEntity = this.checkpoints.get(size - 2); this.checkpoints.remove(size - 1); this.checkpoints.remove(size - 2); checkpoint(); if (this.undoLimit.isPresent()) { this.undoLimit = Optional.of(this.undoLimit.get() - 1); } } else { this.allEntity = this.checkpoints.get(0); this.checkpoints.remove(0); checkpoint(); } // throw new NotImplementedException(); } /** * Get the maximum width of the game map. * This should be the same as that in {@link GameMap} public TerminalRenderingEngine(PrintStream outputSteam) { this.outputSteam = outputSteam; } public Box(int playerId) { this.playerId = playerId; } public Player(int id) { this.id = id; } public ShouldNotReachException() { super(\"This branch should not be reached.\"); }",
        "label": "P"
    },
    "2144": {
        "dataset": "COMP 3021",
        "project": "ydengbd",
        "bug_id": "37",
        "T": "void testGetUndoUnlimited() { final var gameState = new GameState(TestHelper.parseGameMap(\"\"\" -1 ###### #.Aa@# #..a@# ###### \"\"\" )); }",
        "C": "public GameState(@NotNull GameMap map) { // TODO this.maxWidth = map.getMaxWidth(); this.maxHeight = map.getMaxHeight(); this.undoLimit = map.getUndoLimit(); this.destinations = map.getDestinations(); this.playerIds = map.getPlayerIds(); for (int i = 0; i < this.maxHeight; i++) { for (int j = 0; j < this.maxWidth; j++) { Entity e = map.getEntity(new Position(j, i)); this.allEntity.put(new Position(j, i), e); } } checkpoint(); // throw new NotImplementedException(); }",
        "label": "P"
    },
    "2145": {
        "dataset": "COMP 3021",
        "project": "ydengbd",
        "bug_id": "38",
        "T": "void testMapCopying() { final var maxWidth = 2333; final var maxHeight = 2333; final var random = new Random(); final var randomEntities = Stream.generate(() -> Position.of(random.nextInt(maxWidth), random.nextInt(maxHeight))) .distinct() .limit(100) .collect(Collectors.toMap(Function.identity(), it -> generateEntity(it.x()))); final var firstPos = randomEntities.keySet().stream().findFirst(); final var gameMap = new GameMap(maxWidth, maxHeight, Collections.singleton(firstPos.get()), 233); randomEntities.forEach(gameMap::putEntity); final var gameState = new GameState(gameMap); final var randomPosition = randomEntities.keySet().stream().findAny(); gameMap.putEntity(randomPosition.get(), new Empty()); randomEntities.forEach((p, e) -> assertEquals(e, gameState.getEntity(p))); }",
        "C": "public static @NotNull Position of(int x, int y) { return new Position(x, y); } public GameMap(int maxWidth, int maxHeight, Set<Position> destinations, int undoLimit) { // TODO this.maxWidth = maxWidth; this.maxHeight = maxHeight; this.destinations = destinations; this.undoLimit = undoLimit; // throw new NotImplementedException(); } /** * Parses the map from a string representation. * The first line is undo limit. * Starting from the second line, the game map is represented as follows, * <li># represents a {@link Wall}</li> * <li>@ represents a box destination.</li> * <li>Any upper-case letter represents a {@link Player}.</li> * <li> * Any lower-case letter represents a {@link Box} that is only movable by the player with the corresponding upper-case letter. * For instance, box \"a\" can only be moved by player \"A\" and not movable by player \"B\". * </li> * <li>. represents an {@link Empty} position in the map, meaning there is no player or box currently at this position.</li> * <p> * Notes: * <li> * There can be at most 26 players. * All implementations of classes in the hk.ust.comp3021.game package should support up to 26 players. * </li> * <li> * For simplicity, we assume the given map is bounded with a closed boundary. * There is no need to check this point. * </li> * <li> * Example maps can be found in \"src/main/resources\". * </li> * * @param mapText The string representation. * @return The parsed GameMap object. * @throws IllegalArgumentException if undo limit is negative but not -1. * @throws IllegalArgumentException if there are multiple same upper-case letters, i.e., one player can only exist at one position. * @throws IllegalArgumentException if there are no players in the map. * @throws IllegalArgumentException if the number of boxes is not equal to the number of box destinations. * @throws IllegalArgumentException if there are boxes whose {@link Box#getPlayerId()} public GameState(@NotNull GameMap map) { // TODO this.maxWidth = map.getMaxWidth(); this.maxHeight = map.getMaxHeight(); this.undoLimit = map.getUndoLimit(); this.destinations = map.getDestinations(); this.playerIds = map.getPlayerIds(); for (int i = 0; i < this.maxHeight; i++) { for (int j = 0; j < this.maxWidth; j++) { Entity e = map.getEntity(new Position(j, i)); this.allEntity.put(new Position(j, i), e); } } checkpoint(); // throw new NotImplementedException(); } public void putEntity(Position position, Entity entity) { // TODO this.allEntity.put(position, entity); // throw new NotImplementedException(); } public @Nullable Entity getEntity(@NotNull Position position) { // TODO return this.allEntity.get(position); // throw new NotImplementedException(); } /** * Get all box destination positions as a set in the game map. * This should be the same as that in {@link GameMap}",
        "label": "F"
    },
    "2146": {
        "dataset": "COMP 3021",
        "project": "ydengbd",
        "bug_id": "39",
        "T": "void testUndoWhenThereIsMoveButNoCheckpoint() { final var gameState = new GameState(TestHelper.parseGameMap(\"\"\" 233 ###### #A.a@# #..a@# ###### \"\"\" )); gameState.move(Position.of(1, 1), Position.of(2, 1)); gameState.undo(); }",
        "C": "public GameState(@NotNull GameMap map) { // TODO this.maxWidth = map.getMaxWidth(); this.maxHeight = map.getMaxHeight(); this.undoLimit = map.getUndoLimit(); this.destinations = map.getDestinations(); this.playerIds = map.getPlayerIds(); for (int i = 0; i < this.maxHeight; i++) { for (int j = 0; j < this.maxWidth; j++) { Entity e = map.getEntity(new Position(j, i)); this.allEntity.put(new Position(j, i), e); } } checkpoint(); // throw new NotImplementedException(); } public void move(Position from, Position to) { // TODO this.allEntity.put(to, this.allEntity.get(from)); this.allEntity.put(from, new Empty()); // throw new NotImplementedException(); } /** * Record a checkpoint of the game state, including: * <li>All current positions of entities in the game map.</li> * <li>Current undo quota</li> * <p> * Checkpoint is used in {@link GameState#undo()} public static @NotNull Position of(int x, int y) { return new Position(x, y); } public void undo() { // TODO int size = this.checkpoints.size(); if (size > 1) { this.allEntity = this.checkpoints.get(size - 2); this.checkpoints.remove(size - 1); this.checkpoints.remove(size - 2); checkpoint(); if (this.undoLimit.isPresent()) { this.undoLimit = Optional.of(this.undoLimit.get() - 1); } } else { this.allEntity = this.checkpoints.get(0); this.checkpoints.remove(0); checkpoint(); } // throw new NotImplementedException(); } /** * Get the maximum width of the game map. * This should be the same as that in {@link GameMap}",
        "label": "P"
    },
    "2147": {
        "dataset": "COMP 3021",
        "project": "ydengbd",
        "bug_id": "40",
        "T": "void testGameExit() { final var gameState = mock(GameState.class); final var inputEngine = mock(TerminalInputEngine.class); final var renderingEngine = mock(TerminalRenderingEngine.class); when(gameState.isWin()).thenReturn(false, false, false); when(inputEngine.fetchAction()) .thenReturn(new InvalidInput(0, \"\"), new InvalidInput(0, \"\"), new Exit(0)); final var game = new TerminalSokobanGame(gameState, inputEngine, renderingEngine); game.run(); verify(renderingEngine, atLeastOnce()).message(any()); }",
        "C": "public InvalidInput(int initiator, @NotNull String message) { super(initiator); this.message = message; } public Exit(int initiator) { super(initiator); } public TerminalSokobanGame(GameState gameState, TerminalInputEngine inputEngine, TerminalRenderingEngine renderingEngine) { super(gameState); this.inputEngine = inputEngine; this.renderingEngine = renderingEngine; // TODO // Check the number of players if (super.state.getAllPlayerPositions().size() > 2) { throw new IllegalArgumentException(\"TerminalSokobanGame only support at most two players.\"); } this.renderingEngine.message(\"Sokoban game is ready\"); // throw new NotImplementedException(); } public void run() { // TODO while (!super.shouldStop()) { this.renderingEngine.render(super.state); if (super.state.getUndoQuota().isPresent()) { this.renderingEngine.message(\"Undo Quota: \" + String.valueOf(this.state.getUndoQuota().get())); } else { this.renderingEngine.message(\"Unlimited\"); } this.renderingEngine.message(\">>>\"); var act = super.processAction(this.inputEngine.fetchAction()); if (act instanceof ActionResult.Failed a) { this.renderingEngine.message(a.getReason()); } } this.renderingEngine.render(super.state); this.renderingEngine.message(\"Game exits.\"); if (this.state.isWin()) { this.renderingEngine.message(\"You win.\"); } // throw new NotImplementedException(); }",
        "label": "P"
    },
    "2148": {
        "dataset": "COMP 3021",
        "project": "ydengbd",
        "bug_id": "41",
        "T": "void testGameWin() { final var gameState = mock(GameState.class); final var inputEngine = mock(TerminalInputEngine.class); final var renderingEngine = mock(TerminalRenderingEngine.class); when(gameState.isWin()).thenReturn(false, false, false, true); when(inputEngine.fetchAction()) .thenReturn(new InvalidInput(0, \"\")); final var game = new TerminalSokobanGame(gameState, inputEngine, renderingEngine); game.run(); verify(gameState, atLeastOnce()).isWin(); verify(renderingEngine, atLeastOnce()).message(any()); }",
        "C": "public InvalidInput(int initiator, @NotNull String message) { super(initiator); this.message = message; } public TerminalSokobanGame(GameState gameState, TerminalInputEngine inputEngine, TerminalRenderingEngine renderingEngine) { super(gameState); this.inputEngine = inputEngine; this.renderingEngine = renderingEngine; // TODO // Check the number of players if (super.state.getAllPlayerPositions().size() > 2) { throw new IllegalArgumentException(\"TerminalSokobanGame only support at most two players.\"); } this.renderingEngine.message(\"Sokoban game is ready\"); // throw new NotImplementedException(); } public void run() { // TODO while (!super.shouldStop()) { this.renderingEngine.render(super.state); if (super.state.getUndoQuota().isPresent()) { this.renderingEngine.message(\"Undo Quota: \" + String.valueOf(this.state.getUndoQuota().get())); } else { this.renderingEngine.message(\"Unlimited\"); } this.renderingEngine.message(\">>>\"); var act = super.processAction(this.inputEngine.fetchAction()); if (act instanceof ActionResult.Failed a) { this.renderingEngine.message(a.getReason()); } } this.renderingEngine.render(super.state); this.renderingEngine.message(\"Game exits.\"); if (this.state.isWin()) { this.renderingEngine.message(\"You win.\"); } // throw new NotImplementedException(); }",
        "label": "P"
    },
    "2149": {
        "dataset": "COMP 3021",
        "project": "ydengbd",
        "bug_id": "42",
        "T": "void testMoreThanTwoPlayers() { final var gameState = mock(GameState.class); final var inputEngine = mock(TerminalInputEngine.class); final var renderingEngine = mock(TerminalRenderingEngine.class); when(gameState.getAllPlayerPositions()).thenReturn(new HashSet<>(Arrays.asList(Position.of(1, 1), Position.of(1, 2), Position.of(1, 3)))); }",
        "C": "public static @NotNull Position of(int x, int y) { return new Position(x, y); }",
        "label": "P"
    },
    "2150": {
        "dataset": "COMP 3021",
        "project": "hchoaf",
        "bug_id": "0",
        "T": "void moveUp() { Position.of(233, 232), new Move.Up(-1).nextPosition(pos) ); }",
        "C": "public static @NotNull Position of(int x, int y) { return new Position(x, y); } public Up(int initiator) { super(initiator); }",
        "label": "P"
    },
    "2151": {
        "dataset": "COMP 3021",
        "project": "hchoaf",
        "bug_id": "1",
        "T": "void moveDown() { Position.of(233, 234), new Move.Down(-1).nextPosition(pos) ); }",
        "C": "public static @NotNull Position of(int x, int y) { return new Position(x, y); } public Down(int initiator) { super(initiator); }",
        "label": "P"
    },
    "2152": {
        "dataset": "COMP 3021",
        "project": "hchoaf",
        "bug_id": "2",
        "T": "void moveRight() { Position.of(234, 233), new Move.Right(-1).nextPosition(pos) ); }",
        "C": "public static @NotNull Position of(int x, int y) { return new Position(x, y); } public Right(int initiator) { super(initiator); }",
        "label": "P"
    },
    "2153": {
        "dataset": "COMP 3021",
        "project": "hchoaf",
        "bug_id": "3",
        "T": "void testExceedingUndoQuota() { final var gameState = mock(GameState.class); when(gameState.getPlayerPositionById(anyInt())).thenReturn(Position.of(0, 0)); when(gameState.getUndoQuota()).thenReturn(Optional.of(0)); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Undo(0)); }",
        "C": "public Undo(int initiator) { super(initiator); }",
        "label": "P"
    },
    "2154": {
        "dataset": "COMP 3021",
        "project": "hchoaf",
        "bug_id": "4",
        "T": "void testExit() { final var gameState = mock(GameState.class); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Exit(0)); }",
        "C": "public Exit(int initiator) { super(initiator); }",
        "label": "F"
    },
    "2155": {
        "dataset": "COMP 3021",
        "project": "hchoaf",
        "bug_id": "5",
        "T": "void testUndoUnlimited() { final var gameState = mock(GameState.class); when(gameState.getPlayerPositionById(anyInt())).thenReturn(Position.of(0, 0)); when(gameState.getUndoQuota()).thenReturn(Optional.empty()); final var game = new SokobanGameForTesting(gameState); for (int i = 0; i < 10000; i++) { final var result = game.feedActionForProcessing(new Undo(0)); } verify(gameState, times(10000)).undo(); }",
        "C": "public TerminalRenderingEngine(PrintStream outputSteam) { this.outputSteam = outputSteam; } public Undo(int initiator) { super(initiator); }",
        "label": "P"
    },
    "2156": {
        "dataset": "COMP 3021",
        "project": "hchoaf",
        "bug_id": "6",
        "T": "void testPushOtherPlayerBox() { String mapText = \"\"\" 233 ###### #AB.@# #b.a.# #@...# ###### \"\"\"; final var testMap = TestHelper.parseGameMap(mapText); final var gameState = spy(new GameState(testMap)); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Move.Down(0)); verify(gameState, never()).move(any(), any()); }",
        "C": "public GameState(@NotNull GameMap map) { // TODO this.undoQuotaLeft = map.getUndoLimit(); this.maxHeight = map.getMaxHeight(); this.maxWidth = map.getMaxWidth(); this.destinations = new HashSet<>(map.getDestinations()); this.entityMap = new Entity[this.maxHeight][this.maxWidth]; this.initialEntityMap = new Entity[this.maxHeight][this.maxWidth]; for(int i = 0; i<this.maxHeight; i++) { for(int j = 0; j<this.maxWidth; j++) { Entity entity = map.getEntity(Position.of(j, i)); if (entity == null) { entityMap[i][j] = null; initialEntityMap[i][j] = null; }else if (entity instanceof Wall) { entityMap[i][j] = new Wall(); initialEntityMap[i][j] = new Wall(); } else if (entity instanceof Player) { entityMap[i][j] = new Player(((Player) entity).getId()); initialEntityMap[i][j] = new Player(((Player) entity).getId()); } else if (entity instanceof Box) { entityMap[i][j] = new Box(((Box) entity).getPlayerId()); initialEntityMap[i][j] = new Box(((Box) entity).getPlayerId()); } else if (entity instanceof Empty) { entityMap[i][j] = new Empty(); initialEntityMap[i][j] = new Empty(); } } } this.initialDestinations = new HashSet<>(this.destinations); // throw new NotImplementedException(); } public Down(int initiator) { super(initiator); }",
        "label": "P"
    },
    "2157": {
        "dataset": "COMP 3021",
        "project": "hchoaf",
        "bug_id": "7",
        "T": "void testMoveNonExistingPlayer() { String mapText = \"\"\" 233 ###### #A..@# #a...# ##...# ###### \"\"\"; final var testMap = TestHelper.parseGameMap(mapText); final var gameState = spy(new GameState(testMap)); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Move.Down(23)); }",
        "C": "public GameState(@NotNull GameMap map) { // TODO this.undoQuotaLeft = map.getUndoLimit(); this.maxHeight = map.getMaxHeight(); this.maxWidth = map.getMaxWidth(); this.destinations = new HashSet<>(map.getDestinations()); this.entityMap = new Entity[this.maxHeight][this.maxWidth]; this.initialEntityMap = new Entity[this.maxHeight][this.maxWidth]; for(int i = 0; i<this.maxHeight; i++) { for(int j = 0; j<this.maxWidth; j++) { Entity entity = map.getEntity(Position.of(j, i)); if (entity == null) { entityMap[i][j] = null; initialEntityMap[i][j] = null; }else if (entity instanceof Wall) { entityMap[i][j] = new Wall(); initialEntityMap[i][j] = new Wall(); } else if (entity instanceof Player) { entityMap[i][j] = new Player(((Player) entity).getId()); initialEntityMap[i][j] = new Player(((Player) entity).getId()); } else if (entity instanceof Box) { entityMap[i][j] = new Box(((Box) entity).getPlayerId()); initialEntityMap[i][j] = new Box(((Box) entity).getPlayerId()); } else if (entity instanceof Empty) { entityMap[i][j] = new Empty(); initialEntityMap[i][j] = new Empty(); } } } this.initialDestinations = new HashSet<>(this.destinations); // throw new NotImplementedException(); } public Down(int initiator) { super(initiator); }",
        "label": "F"
    },
    "2158": {
        "dataset": "COMP 3021",
        "project": "hchoaf",
        "bug_id": "8",
        "T": "void testCheckpointWhenNeed() { final var gameState = spy(new GameState(TestHelper.parseGameMap(\"\"\" 233 ###### #.Aa@# #..a@# ###### \"\"\" ))); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Move.Right(0)); verify(gameState, times(1)).checkpoint(); }",
        "C": "public GameState(@NotNull GameMap map) { // TODO this.undoQuotaLeft = map.getUndoLimit(); this.maxHeight = map.getMaxHeight(); this.maxWidth = map.getMaxWidth(); this.destinations = new HashSet<>(map.getDestinations()); this.entityMap = new Entity[this.maxHeight][this.maxWidth]; this.initialEntityMap = new Entity[this.maxHeight][this.maxWidth]; for(int i = 0; i<this.maxHeight; i++) { for(int j = 0; j<this.maxWidth; j++) { Entity entity = map.getEntity(Position.of(j, i)); if (entity == null) { entityMap[i][j] = null; initialEntityMap[i][j] = null; }else if (entity instanceof Wall) { entityMap[i][j] = new Wall(); initialEntityMap[i][j] = new Wall(); } else if (entity instanceof Player) { entityMap[i][j] = new Player(((Player) entity).getId()); initialEntityMap[i][j] = new Player(((Player) entity).getId()); } else if (entity instanceof Box) { entityMap[i][j] = new Box(((Box) entity).getPlayerId()); initialEntityMap[i][j] = new Box(((Box) entity).getPlayerId()); } else if (entity instanceof Empty) { entityMap[i][j] = new Empty(); initialEntityMap[i][j] = new Empty(); } } } this.initialDestinations = new HashSet<>(this.destinations); // throw new NotImplementedException(); } public Right(int initiator) { super(initiator); }",
        "label": "P"
    },
    "2159": {
        "dataset": "COMP 3021",
        "project": "hchoaf",
        "bug_id": "9",
        "T": "void testPushBoxAgainstWall() { String mapText = \"\"\" 233 ###### #A..@# #a...# ##...# ###### \"\"\"; final var testMap = TestHelper.parseGameMap(mapText); final var gameState = spy(new GameState(testMap)); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Move.Down(0)); verify(gameState, never()).move(any(), any()); }",
        "C": "public GameState(@NotNull GameMap map) { // TODO this.undoQuotaLeft = map.getUndoLimit(); this.maxHeight = map.getMaxHeight(); this.maxWidth = map.getMaxWidth(); this.destinations = new HashSet<>(map.getDestinations()); this.entityMap = new Entity[this.maxHeight][this.maxWidth]; this.initialEntityMap = new Entity[this.maxHeight][this.maxWidth]; for(int i = 0; i<this.maxHeight; i++) { for(int j = 0; j<this.maxWidth; j++) { Entity entity = map.getEntity(Position.of(j, i)); if (entity == null) { entityMap[i][j] = null; initialEntityMap[i][j] = null; }else if (entity instanceof Wall) { entityMap[i][j] = new Wall(); initialEntityMap[i][j] = new Wall(); } else if (entity instanceof Player) { entityMap[i][j] = new Player(((Player) entity).getId()); initialEntityMap[i][j] = new Player(((Player) entity).getId()); } else if (entity instanceof Box) { entityMap[i][j] = new Box(((Box) entity).getPlayerId()); initialEntityMap[i][j] = new Box(((Box) entity).getPlayerId()); } else if (entity instanceof Empty) { entityMap[i][j] = new Empty(); initialEntityMap[i][j] = new Empty(); } } } this.initialDestinations = new HashSet<>(this.destinations); // throw new NotImplementedException(); } public Down(int initiator) { super(initiator); }",
        "label": "P"
    },
    "2160": {
        "dataset": "COMP 3021",
        "project": "hchoaf",
        "bug_id": "10",
        "T": "void testCheckpointWhenNotNeed() { final var gameState = spy(new GameState(TestHelper.parseGameMap(\"\"\" 233 ###### #A.a@# #..a@# ###### \"\"\" ))); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Move.Right(0)); verify(gameState, never()).checkpoint(); } private static class SokobanGameForTesting extends AbstractSokobanGame { protected SokobanGameForTesting(GameState gameState) { super(gameState); } @Override public void run() { } public ActionResult feedActionForProcessing(Action action) { return processAction(action); } }",
        "C": "public GameState(@NotNull GameMap map) { // TODO this.undoQuotaLeft = map.getUndoLimit(); this.maxHeight = map.getMaxHeight(); this.maxWidth = map.getMaxWidth(); this.destinations = new HashSet<>(map.getDestinations()); this.entityMap = new Entity[this.maxHeight][this.maxWidth]; this.initialEntityMap = new Entity[this.maxHeight][this.maxWidth]; for(int i = 0; i<this.maxHeight; i++) { for(int j = 0; j<this.maxWidth; j++) { Entity entity = map.getEntity(Position.of(j, i)); if (entity == null) { entityMap[i][j] = null; initialEntityMap[i][j] = null; }else if (entity instanceof Wall) { entityMap[i][j] = new Wall(); initialEntityMap[i][j] = new Wall(); } else if (entity instanceof Player) { entityMap[i][j] = new Player(((Player) entity).getId()); initialEntityMap[i][j] = new Player(((Player) entity).getId()); } else if (entity instanceof Box) { entityMap[i][j] = new Box(((Box) entity).getPlayerId()); initialEntityMap[i][j] = new Box(((Box) entity).getPlayerId()); } else if (entity instanceof Empty) { entityMap[i][j] = new Empty(); initialEntityMap[i][j] = new Empty(); } } } this.initialDestinations = new HashSet<>(this.destinations); // throw new NotImplementedException(); } public Right(int initiator) { super(initiator); } public void run() { renderingEngine.message(GAME_READY_MESSAGE); // TODO // throw new NotImplementedException(); while (!super.shouldStop()) { // if (i > 5) throw new NotImplementedException(); renderingEngine.render(this.state); if (this.state.getUndoQuota().isEmpty()) { renderingEngine.message(UNDO_QUOTA_UNLIMITED); } else { renderingEngine.message(String.format(UNDO_QUOTA_TEMPLATE,this.state.getUndoQuota().get())); } renderingEngine.message(\">>> \"); // this.state.printEntityMap(); var action = inputEngine.fetchAction(); var actionResult = processAction(action); if (actionResult instanceof ActionResult.Failed) { renderingEngine.message(((ActionResult.Failed) actionResult).getReason()); } else if (actionResult instanceof ActionResult.Success) { if (action instanceof Exit) { break; } } // renderingEngine. } renderingEngine.render(state); renderingEngine.message(GAME_EXIT_MESSAGE); if (state.isWin()) { renderingEngine.message(WIN_MESSAGE); } } protected ActionResult processAction(@NotNull Action action) { if (action instanceof Exit) { return new ActionResult.Success(action); } else if (action instanceof Move) { var playerId = action.getInitiator(); var playerPosition = state.getPlayerPositionById(action.getInitiator()); var targetPosition = ((Move) action).nextPosition(playerPosition); var targetEntity = state.getEntity(targetPosition); if (! state.getAllPlayerIds().contains(playerId)) { return new ActionResult.Failed(action, PLAYER_NOT_FOUND); } if (targetEntity instanceof Empty) { state.move(playerPosition, targetPosition); return new ActionResult.Success(action); } else if (targetEntity instanceof Box) { if (playerId != ((Box) targetEntity).getPlayerId()) { // Can't move a box which does not belong to the player return new ActionResult.Failed(action, \"You cannot move other players' boxes.\"); } else { if (state.getEntity(((Move) action).nextPosition(targetPosition)) instanceof Empty) { // Move box then player state.move(targetPosition, ((Move) action).nextPosition(targetPosition)); state.move(playerPosition, targetPosition); state.checkpoint(); return new ActionResult.Success(action); } else { // Can't move the box return new ActionResult.Failed(action, \"Failed to push the box.\"); } } } else if (targetEntity instanceof Wall){ return new ActionResult.Failed(action, \"You hit a wall.\"); } else { return new ActionResult.Failed(action, \"You hit another player.\"); } } else if (action instanceof Undo) { if (state.getUndoQuota().isPresent() && state.getUndoQuota().get() <= 0) { return new ActionResult.Failed(action, UNDO_QUOTA_RUN_OUT); } state.undo(); return new ActionResult.Success(action); } else if (action instanceof InvalidInput) { return new ActionResult.Failed(action, INVALID_INPUT_MESSAGE); } return null; // TODO // throw new NotImplementedException(); }",
        "label": "P"
    },
    "2161": {
        "dataset": "COMP 3021",
        "project": "hchoaf",
        "bug_id": "11",
        "T": "void testHitAnotherPlayer() { String mapText = \"\"\" 233 ###### #A..@# #B...# #ab.@# ###### \"\"\"; final var testMap = TestHelper.parseGameMap(mapText); final var gameState = spy(new GameState(testMap)); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Move.Down(0)); verify(gameState, never()).move(any(), any()); }",
        "C": "public GameState(@NotNull GameMap map) { // TODO this.undoQuotaLeft = map.getUndoLimit(); this.maxHeight = map.getMaxHeight(); this.maxWidth = map.getMaxWidth(); this.destinations = new HashSet<>(map.getDestinations()); this.entityMap = new Entity[this.maxHeight][this.maxWidth]; this.initialEntityMap = new Entity[this.maxHeight][this.maxWidth]; for(int i = 0; i<this.maxHeight; i++) { for(int j = 0; j<this.maxWidth; j++) { Entity entity = map.getEntity(Position.of(j, i)); if (entity == null) { entityMap[i][j] = null; initialEntityMap[i][j] = null; }else if (entity instanceof Wall) { entityMap[i][j] = new Wall(); initialEntityMap[i][j] = new Wall(); } else if (entity instanceof Player) { entityMap[i][j] = new Player(((Player) entity).getId()); initialEntityMap[i][j] = new Player(((Player) entity).getId()); } else if (entity instanceof Box) { entityMap[i][j] = new Box(((Box) entity).getPlayerId()); initialEntityMap[i][j] = new Box(((Box) entity).getPlayerId()); } else if (entity instanceof Empty) { entityMap[i][j] = new Empty(); initialEntityMap[i][j] = new Empty(); } } } this.initialDestinations = new HashSet<>(this.destinations); // throw new NotImplementedException(); } public Down(int initiator) { super(initiator); }",
        "label": "P"
    },
    "2162": {
        "dataset": "COMP 3021",
        "project": "hchoaf",
        "bug_id": "12",
        "T": "void testUndoWithinQuota() { final var gameState = mock(GameState.class); when(gameState.getPlayerPositionById(anyInt())).thenReturn(Position.of(0, 0)); when(gameState.getUndoQuota()).thenReturn(Optional.of(1)); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Undo(0)); verify(gameState, times(1)).undo(); }",
        "C": "public Undo(int initiator) { super(initiator); }",
        "label": "P"
    },
    "2163": {
        "dataset": "COMP 3021",
        "project": "hchoaf",
        "bug_id": "13",
        "T": "void testInvalidInput() { final var game = new SokobanGameForTesting(mock(GameState.class)); final var message = String.valueOf(new Random().nextLong()); final var action = new InvalidInput(-1, message); final var result = game.feedActionForProcessing(action); }",
        "C": "public InvalidInput(int initiator, @NotNull String message) { super(initiator); this.message = message; }",
        "label": "P"
    },
    "2164": {
        "dataset": "COMP 3021",
        "project": "hchoaf",
        "bug_id": "14",
        "T": "void testUndoLimitParsing() { final var gameMap = TestHelper.parseGameMap(rectangularMap); }",
        "C": "",
        "label": "P"
    },
    "2165": {
        "dataset": "COMP 3021",
        "project": "hchoaf",
        "bug_id": "15",
        "T": "void testWidthForNonRectangularMap() { final var gameMap = TestHelper.parseGameMap(nonRectangularMap); }",
        "C": "",
        "label": "P"
    },
    "2166": {
        "dataset": "COMP 3021",
        "project": "hchoaf",
        "bug_id": "16",
        "T": "void testTwoPlayersMap() { final var twoPlayersMap = \"\"\" 233 ###### #A..@# #..B@# #....# #.a..# #..b.# ###### \"\"\"; final var gameMap = TestHelper.parseGameMap(twoPlayersMap); final var playerIds = gameMap.getPlayerIds(); final var expectedIds = new HashSet<Integer>(); expectedIds.add(0); expectedIds.add(1); }",
        "C": "public Set<Integer> getPlayerIds() { var playerIds = new ArrayList<Integer>(); for(Entity[] row : entityMap) { for(Entity entity : row) { if (entity instanceof Player) { playerIds.add(((Player) entity).getId()); } } } // TODO return new HashSet<Integer>(playerIds); // throw new NotImplementedException(); }",
        "label": "P"
    },
    "2167": {
        "dataset": "COMP 3021",
        "project": "hchoaf",
        "bug_id": "17",
        "T": "void testMapWithoutPlayer() { final var invalidMap = \"\"\" 233 ### #.# ### \"\"\"; } // @Tag(TestKind.HIDDEN) // @Test // void testUnmatchedPlayersAndBoxes() { // final var invalidMap = \"\"\" // 233 // ###### // #A..@# // #...@# // #a.b@# // #.a.@# // #..a.# // ###### // \"\"\"; // assertThrowsExactly(IllegalArgumentException.class, () -> TestHelper.parseGameMap(invalidMap)); // }",
        "C": "public TerminalRenderingEngine(PrintStream outputSteam) { this.outputSteam = outputSteam; }",
        "label": "P"
    },
    "2168": {
        "dataset": "COMP 3021",
        "project": "hchoaf",
        "bug_id": "18",
        "T": "void testManyPlayersMap() { final var manyPlayersMap = \"\"\" 233 ###### #A.P@@# #vCB@@# #.cpD@# #Ga.d@# #g.bV@# ###### \"\"\"; final var gameMap = TestHelper.parseGameMap(manyPlayersMap); final var playerIds = gameMap.getPlayerIds(); final var expectedIds = new HashSet<>(Arrays.asList( 0, 'P' - 'A', 'C' - 'A', 'B' - 'A', 'D' - 'A', 'G' - 'A', 'V' - 'A' )); }",
        "C": "public Set<Integer> getPlayerIds() { var playerIds = new ArrayList<Integer>(); for(Entity[] row : entityMap) { for(Entity entity : row) { if (entity instanceof Player) { playerIds.add(((Player) entity).getId()); } } } // TODO return new HashSet<Integer>(playerIds); // throw new NotImplementedException(); }",
        "label": "P"
    },
    "2169": {
        "dataset": "COMP 3021",
        "project": "hchoaf",
        "bug_id": "19",
        "T": "void testHeightForNonRectangularMap() { final var gameMap = TestHelper.parseGameMap(nonRectangularMap); }",
        "C": "",
        "label": "P"
    },
    "2170": {
        "dataset": "COMP 3021",
        "project": "hchoaf",
        "bug_id": "20",
        "T": "void testDuplicatedPlayers() { final var invalidMap = \"\"\" 233 ###### #A..@# #..A@# #....# #.a..# #..b.# ###### \"\"\"; }",
        "C": "",
        "label": "P"
    },
    "2171": {
        "dataset": "COMP 3021",
        "project": "hchoaf",
        "bug_id": "21",
        "T": "void testParseMapWithoutUndoLimit() { final var invalidMap = String.join(\"\\n\", rectangularMap.lines().skip(1).toList()); }",
        "C": "",
        "label": "P"
    },
    "2172": {
        "dataset": "COMP 3021",
        "project": "hchoaf",
        "bug_id": "22",
        "T": "void testInsufficientDestinations() { final var invalidMap = \"\"\" 233 ###### #A..@# #...@# #a...# #.a..# #..a.# ###### \"\"\"; }",
        "C": "",
        "label": "P"
    },
    "2173": {
        "dataset": "COMP 3021",
        "project": "hchoaf",
        "bug_id": "23",
        "T": "void testSuperLargeMap() { try { new GameMap(Integer.MAX_VALUE, Integer.MAX_VALUE, Collections.emptySet(), 0); } catch (OutOfMemoryError e) { throw new RuntimeException(e); } }); }",
        "C": "public GameMap(int maxWidth, int maxHeight, Set<Position> destinations, int undoLimit) { // TODO this.maxWidth = maxWidth; this.maxHeight = maxHeight; this.destinations = destinations; this.undoLimit = undoLimit; this.entityMap = new Entity[maxHeight][maxWidth]; // throw new NotImplementedException(); } /** * Parses the map from a string representation. * The first line is undo limit. * Starting from the second line, the game map is represented as follows, * <li># represents a {@link Wall}</li> * <li>@ represents a box destination.</li> * <li>Any upper-case letter represents a {@link Player}.</li> * <li> * Any lower-case letter represents a {@link Box} that is only movable by the player with the corresponding upper-case letter. * For instance, box \"a\" can only be moved by player \"A\" and not movable by player \"B\". * </li> * <li>. represents an {@link Empty} position in the map, meaning there is no player or box currently at this position.</li> * <p> * Notes: * <li> * There can be at most 26 players. * All implementations of classes in the hk.ust.comp3021.game package should support up to 26 players. * </li> * <li> * For simplicity, we assume the given map is bounded with a closed boundary. * There is no need to check this point. * </li> * <li> * Example maps can be found in \"src/main/resources\". * </li> * * @param mapText The string representation. * @return The parsed GameMap object. * @throws IllegalArgumentException if undo limit is negative but not -1. * @throws IllegalArgumentException if there are multiple same upper-case letters, i.e., one player can only exist at one position. * @throws IllegalArgumentException if there are no players in the map. * @throws IllegalArgumentException if the number of boxes is not equal to the number of box destinations. * @throws IllegalArgumentException if there are boxes whose {@link Box#getPlayerId()} public TerminalRenderingEngine(PrintStream outputSteam) { this.outputSteam = outputSteam; }",
        "label": "F"
    },
    "2174": {
        "dataset": "COMP 3021",
        "project": "hchoaf",
        "bug_id": "24",
        "T": "void testInvalidUndoLimit() { final var invalidMap = \"\"\" -233 ###### #A..@# #...@# #a.b@# #.a.@# #..a.# ###### \"\"\"; }",
        "C": "",
        "label": "P"
    },
    "2175": {
        "dataset": "COMP 3021",
        "project": "hchoaf",
        "bug_id": "25",
        "T": "void testEmptyMap() { final var invalidMap = \"\"; }",
        "C": "",
        "label": "P"
    },
    "2176": {
        "dataset": "COMP 3021",
        "project": "hchoaf",
        "bug_id": "26",
        "T": "void testMove(String input, String name, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); } private InputStream fixValueStream(String content) { final var bytes = content.getBytes(StandardCharsets.UTF_8); return new ByteArrayInputStream(bytes); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. if (terminalScanner.hasNextLine()) { final var inputLine = terminalScanner.nextLine(); switch (inputLine.toLowerCase()) { case \"exit\" -> { return new Exit(-1); } case \"a\" -> { return new Move.Left(0); } case \"s\" -> { return new Move.Down(0); } case \"d\" -> { return new Move.Right(0); } case \"w\" -> { return new Move.Up(0); } case \"h\" -> { return new Move.Left(1); } case \"j\" -> { return new Move.Down(1); } case \"k\" -> { return new Move.Up(1); } case \"l\" -> { return new Move.Right(1); } case \"u\" -> { return new Undo(-1); } default -> { return new InvalidInput(-1, INVALID_INPUT_MESSAGE); } } } else { throw new NoSuchElementException(\"Line not found\"); } // terminalScanner.close(); // return new InvalidInput(-1, INVALID_INPUT_MESSAGE); // TODO // throw new NotImplementedException(); }",
        "label": "P"
    },
    "2177": {
        "dataset": "COMP 3021",
        "project": "hchoaf",
        "bug_id": "27",
        "T": "void testMove(String input, String name, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); } private InputStream fixValueStream(String content) { final var bytes = content.getBytes(StandardCharsets.UTF_8); return new ByteArrayInputStream(bytes); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. if (terminalScanner.hasNextLine()) { final var inputLine = terminalScanner.nextLine(); switch (inputLine.toLowerCase()) { case \"exit\" -> { return new Exit(-1); } case \"a\" -> { return new Move.Left(0); } case \"s\" -> { return new Move.Down(0); } case \"d\" -> { return new Move.Right(0); } case \"w\" -> { return new Move.Up(0); } case \"h\" -> { return new Move.Left(1); } case \"j\" -> { return new Move.Down(1); } case \"k\" -> { return new Move.Up(1); } case \"l\" -> { return new Move.Right(1); } case \"u\" -> { return new Undo(-1); } default -> { return new InvalidInput(-1, INVALID_INPUT_MESSAGE); } } } else { throw new NoSuchElementException(\"Line not found\"); } // terminalScanner.close(); // return new InvalidInput(-1, INVALID_INPUT_MESSAGE); // TODO // throw new NotImplementedException(); }",
        "label": "P"
    },
    "2178": {
        "dataset": "COMP 3021",
        "project": "hchoaf",
        "bug_id": "28",
        "T": "void testMove(String input, String name, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); } private InputStream fixValueStream(String content) { final var bytes = content.getBytes(StandardCharsets.UTF_8); return new ByteArrayInputStream(bytes); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. if (terminalScanner.hasNextLine()) { final var inputLine = terminalScanner.nextLine(); switch (inputLine.toLowerCase()) { case \"exit\" -> { return new Exit(-1); } case \"a\" -> { return new Move.Left(0); } case \"s\" -> { return new Move.Down(0); } case \"d\" -> { return new Move.Right(0); } case \"w\" -> { return new Move.Up(0); } case \"h\" -> { return new Move.Left(1); } case \"j\" -> { return new Move.Down(1); } case \"k\" -> { return new Move.Up(1); } case \"l\" -> { return new Move.Right(1); } case \"u\" -> { return new Undo(-1); } default -> { return new InvalidInput(-1, INVALID_INPUT_MESSAGE); } } } else { throw new NoSuchElementException(\"Line not found\"); } // terminalScanner.close(); // return new InvalidInput(-1, INVALID_INPUT_MESSAGE); // TODO // throw new NotImplementedException(); }",
        "label": "P"
    },
    "2179": {
        "dataset": "COMP 3021",
        "project": "hchoaf",
        "bug_id": "29",
        "T": "void testMove(String input, String name, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); } private InputStream fixValueStream(String content) { final var bytes = content.getBytes(StandardCharsets.UTF_8); return new ByteArrayInputStream(bytes); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. if (terminalScanner.hasNextLine()) { final var inputLine = terminalScanner.nextLine(); switch (inputLine.toLowerCase()) { case \"exit\" -> { return new Exit(-1); } case \"a\" -> { return new Move.Left(0); } case \"s\" -> { return new Move.Down(0); } case \"d\" -> { return new Move.Right(0); } case \"w\" -> { return new Move.Up(0); } case \"h\" -> { return new Move.Left(1); } case \"j\" -> { return new Move.Down(1); } case \"k\" -> { return new Move.Up(1); } case \"l\" -> { return new Move.Right(1); } case \"u\" -> { return new Undo(-1); } default -> { return new InvalidInput(-1, INVALID_INPUT_MESSAGE); } } } else { throw new NoSuchElementException(\"Line not found\"); } // terminalScanner.close(); // return new InvalidInput(-1, INVALID_INPUT_MESSAGE); // TODO // throw new NotImplementedException(); }",
        "label": "P"
    },
    "2180": {
        "dataset": "COMP 3021",
        "project": "hchoaf",
        "bug_id": "30",
        "T": "void testMove(String input, String name, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); } private InputStream fixValueStream(String content) { final var bytes = content.getBytes(StandardCharsets.UTF_8); return new ByteArrayInputStream(bytes); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. if (terminalScanner.hasNextLine()) { final var inputLine = terminalScanner.nextLine(); switch (inputLine.toLowerCase()) { case \"exit\" -> { return new Exit(-1); } case \"a\" -> { return new Move.Left(0); } case \"s\" -> { return new Move.Down(0); } case \"d\" -> { return new Move.Right(0); } case \"w\" -> { return new Move.Up(0); } case \"h\" -> { return new Move.Left(1); } case \"j\" -> { return new Move.Down(1); } case \"k\" -> { return new Move.Up(1); } case \"l\" -> { return new Move.Right(1); } case \"u\" -> { return new Undo(-1); } default -> { return new InvalidInput(-1, INVALID_INPUT_MESSAGE); } } } else { throw new NoSuchElementException(\"Line not found\"); } // terminalScanner.close(); // return new InvalidInput(-1, INVALID_INPUT_MESSAGE); // TODO // throw new NotImplementedException(); }",
        "label": "P"
    },
    "2181": {
        "dataset": "COMP 3021",
        "project": "hchoaf",
        "bug_id": "31",
        "T": "void testMove(String input, String name, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); } private InputStream fixValueStream(String content) { final var bytes = content.getBytes(StandardCharsets.UTF_8); return new ByteArrayInputStream(bytes); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. if (terminalScanner.hasNextLine()) { final var inputLine = terminalScanner.nextLine(); switch (inputLine.toLowerCase()) { case \"exit\" -> { return new Exit(-1); } case \"a\" -> { return new Move.Left(0); } case \"s\" -> { return new Move.Down(0); } case \"d\" -> { return new Move.Right(0); } case \"w\" -> { return new Move.Up(0); } case \"h\" -> { return new Move.Left(1); } case \"j\" -> { return new Move.Down(1); } case \"k\" -> { return new Move.Up(1); } case \"l\" -> { return new Move.Right(1); } case \"u\" -> { return new Undo(-1); } default -> { return new InvalidInput(-1, INVALID_INPUT_MESSAGE); } } } else { throw new NoSuchElementException(\"Line not found\"); } // terminalScanner.close(); // return new InvalidInput(-1, INVALID_INPUT_MESSAGE); // TODO // throw new NotImplementedException(); }",
        "label": "P"
    },
    "2182": {
        "dataset": "COMP 3021",
        "project": "hchoaf",
        "bug_id": "32",
        "T": "void testMove(String input, String name, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); } private InputStream fixValueStream(String content) { final var bytes = content.getBytes(StandardCharsets.UTF_8); return new ByteArrayInputStream(bytes); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. if (terminalScanner.hasNextLine()) { final var inputLine = terminalScanner.nextLine(); switch (inputLine.toLowerCase()) { case \"exit\" -> { return new Exit(-1); } case \"a\" -> { return new Move.Left(0); } case \"s\" -> { return new Move.Down(0); } case \"d\" -> { return new Move.Right(0); } case \"w\" -> { return new Move.Up(0); } case \"h\" -> { return new Move.Left(1); } case \"j\" -> { return new Move.Down(1); } case \"k\" -> { return new Move.Up(1); } case \"l\" -> { return new Move.Right(1); } case \"u\" -> { return new Undo(-1); } default -> { return new InvalidInput(-1, INVALID_INPUT_MESSAGE); } } } else { throw new NoSuchElementException(\"Line not found\"); } // terminalScanner.close(); // return new InvalidInput(-1, INVALID_INPUT_MESSAGE); // TODO // throw new NotImplementedException(); }",
        "label": "P"
    },
    "2183": {
        "dataset": "COMP 3021",
        "project": "hchoaf",
        "bug_id": "33",
        "T": "void testMove(String input, String name, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); } private InputStream fixValueStream(String content) { final var bytes = content.getBytes(StandardCharsets.UTF_8); return new ByteArrayInputStream(bytes); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. if (terminalScanner.hasNextLine()) { final var inputLine = terminalScanner.nextLine(); switch (inputLine.toLowerCase()) { case \"exit\" -> { return new Exit(-1); } case \"a\" -> { return new Move.Left(0); } case \"s\" -> { return new Move.Down(0); } case \"d\" -> { return new Move.Right(0); } case \"w\" -> { return new Move.Up(0); } case \"h\" -> { return new Move.Left(1); } case \"j\" -> { return new Move.Down(1); } case \"k\" -> { return new Move.Up(1); } case \"l\" -> { return new Move.Right(1); } case \"u\" -> { return new Undo(-1); } default -> { return new InvalidInput(-1, INVALID_INPUT_MESSAGE); } } } else { throw new NoSuchElementException(\"Line not found\"); } // terminalScanner.close(); // return new InvalidInput(-1, INVALID_INPUT_MESSAGE); // TODO // throw new NotImplementedException(); }",
        "label": "P"
    },
    "2184": {
        "dataset": "COMP 3021",
        "project": "hchoaf",
        "bug_id": "34",
        "T": "void testUndo(String input, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. if (terminalScanner.hasNextLine()) { final var inputLine = terminalScanner.nextLine(); switch (inputLine.toLowerCase()) { case \"exit\" -> { return new Exit(-1); } case \"a\" -> { return new Move.Left(0); } case \"s\" -> { return new Move.Down(0); } case \"d\" -> { return new Move.Right(0); } case \"w\" -> { return new Move.Up(0); } case \"h\" -> { return new Move.Left(1); } case \"j\" -> { return new Move.Down(1); } case \"k\" -> { return new Move.Up(1); } case \"l\" -> { return new Move.Right(1); } case \"u\" -> { return new Undo(-1); } default -> { return new InvalidInput(-1, INVALID_INPUT_MESSAGE); } } } else { throw new NoSuchElementException(\"Line not found\"); } // terminalScanner.close(); // return new InvalidInput(-1, INVALID_INPUT_MESSAGE); // TODO // throw new NotImplementedException(); }",
        "label": "P"
    },
    "2185": {
        "dataset": "COMP 3021",
        "project": "hchoaf",
        "bug_id": "35",
        "T": "void testInvalidInput() { final var inputStream = fixValueStream(\"blah blah\"); final var inputEngine = new TerminalInputEngine(inputStream); final var action = inputEngine.fetchAction(); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. if (terminalScanner.hasNextLine()) { final var inputLine = terminalScanner.nextLine(); switch (inputLine.toLowerCase()) { case \"exit\" -> { return new Exit(-1); } case \"a\" -> { return new Move.Left(0); } case \"s\" -> { return new Move.Down(0); } case \"d\" -> { return new Move.Right(0); } case \"w\" -> { return new Move.Up(0); } case \"h\" -> { return new Move.Left(1); } case \"j\" -> { return new Move.Down(1); } case \"k\" -> { return new Move.Up(1); } case \"l\" -> { return new Move.Right(1); } case \"u\" -> { return new Undo(-1); } default -> { return new InvalidInput(-1, INVALID_INPUT_MESSAGE); } } } else { throw new NoSuchElementException(\"Line not found\"); } // terminalScanner.close(); // return new InvalidInput(-1, INVALID_INPUT_MESSAGE); // TODO // throw new NotImplementedException(); }",
        "label": "P"
    },
    "2186": {
        "dataset": "COMP 3021",
        "project": "hchoaf",
        "bug_id": "36",
        "T": "void testUndoWhenThereIsNoMove() { final var gameState = new GameState(TestHelper.parseGameMap(\"\"\" 233 ###### #A.a@# #..a@# ###### \"\"\" )); gameState.undo(); } private Entity generateEntity(int key) { return switch (key % 4) { case 0 -> new Box(0); case 1 -> new Empty(); case 2 -> new Player(0); case 3 -> new Wall(); default -> throw new ShouldNotReachException(); }; }",
        "C": "public GameState(@NotNull GameMap map) { // TODO this.undoQuotaLeft = map.getUndoLimit(); this.maxHeight = map.getMaxHeight(); this.maxWidth = map.getMaxWidth(); this.destinations = new HashSet<>(map.getDestinations()); this.entityMap = new Entity[this.maxHeight][this.maxWidth]; this.initialEntityMap = new Entity[this.maxHeight][this.maxWidth]; for(int i = 0; i<this.maxHeight; i++) { for(int j = 0; j<this.maxWidth; j++) { Entity entity = map.getEntity(Position.of(j, i)); if (entity == null) { entityMap[i][j] = null; initialEntityMap[i][j] = null; }else if (entity instanceof Wall) { entityMap[i][j] = new Wall(); initialEntityMap[i][j] = new Wall(); } else if (entity instanceof Player) { entityMap[i][j] = new Player(((Player) entity).getId()); initialEntityMap[i][j] = new Player(((Player) entity).getId()); } else if (entity instanceof Box) { entityMap[i][j] = new Box(((Box) entity).getPlayerId()); initialEntityMap[i][j] = new Box(((Box) entity).getPlayerId()); } else if (entity instanceof Empty) { entityMap[i][j] = new Empty(); initialEntityMap[i][j] = new Empty(); } } } this.initialDestinations = new HashSet<>(this.destinations); // throw new NotImplementedException(); } public void undo() { // TODO if (this.getUndoQuota().isEmpty() || this.undoQuotaLeft.get() > 0) { if (this.currentCheckPoint == 0) { // change everything to initial - no need to decrement undoquota for (int i = 0; i < this.maxHeight; i++) { for (int j = 0; j < this.maxWidth; j++) { var entity = this.initialEntityMap[i][j]; if (entity == null) { entityMap[i][j] = null; } else if (entity instanceof Wall) { entityMap[i][j] = new Wall(); } else if (entity instanceof Empty) { entityMap[i][j] = new Empty(); } else if (entity instanceof Player) { entityMap[i][j] = new Player(((Player) entity).getId()); } else if (entity instanceof Box) { entityMap[i][j] = new Box(((Box) entity).getPlayerId()); } } } // this.destinations = new HashSet<>(destinations); } else if (this.currentCheckPoint == 1) { // change everything to initial; undoquotaleft-- , empty checkpoints for (int i = 0; i < this.maxHeight; i++) { for (int j = 0; j < this.maxWidth; j++) { var entity = this.initialEntityMap[i][j]; if (entity == null) { entityMap[i][j] = null; } else if (entity instanceof Wall) { entityMap[i][j] = new Wall(); } else if (entity instanceof Empty) { entityMap[i][j] = new Empty(); } else if (entity instanceof Player) { entityMap[i][j] = new Player(((Player) entity).getId()); } else if (entity instanceof Box) { entityMap[i][j] = new Box(((Box) entity).getPlayerId()); } } } this.currentCheckPoint = 0; // this.destinations = new HashSet<>(destinations); this.checkPoints.clear(); if (this.getUndoQuota().isPresent()) { this.undoQuotaLeft = Optional.of(this.undoQuotaLeft.get() - 1); } } else { // Copy entrymap, destinations, checkpoints from checkpoint ; undoquotleft -- var checkPointMap = this.checkPoints.get(checkPoints.size() - 2); for (int i = 0; i < this.maxHeight; i++) { for (int j = 0; j < this.maxWidth; j++) { var entity = checkPointMap[i][j]; if (entity == null) { entityMap[i][j] = null; } else if (entity instanceof Wall) { entityMap[i][j] = new Wall(); } else if (entity instanceof Empty) { entityMap[i][j] = new Empty(); } else if (entity instanceof Player) { entityMap[i][j] = new Player(((Player) entity).getId()); } else if (entity instanceof Box) { entityMap[i][j] = new Box(((Box) entity).getPlayerId()); } } } this.currentCheckPoint -= 1; this.checkPoints.remove(checkPoints.size() - 1); if (this.getUndoQuota().isPresent()) { this.undoQuotaLeft = Optional.of(this.undoQuotaLeft.get() - 1); } } } } /** * Get the maximum width of the game map. * This should be the same as that in {@link GameMap} public TerminalRenderingEngine(PrintStream outputSteam) { this.outputSteam = outputSteam; } public Box(int playerId) { this.playerId = playerId; } public Player(int id) { this.id = id; } public ShouldNotReachException() { super(\"This branch should not be reached.\"); }",
        "label": "P"
    },
    "2187": {
        "dataset": "COMP 3021",
        "project": "hchoaf",
        "bug_id": "37",
        "T": "void testGetUndoUnlimited() { final var gameState = new GameState(TestHelper.parseGameMap(\"\"\" -1 ###### #.Aa@# #..a@# ###### \"\"\" )); }",
        "C": "public GameState(@NotNull GameMap map) { // TODO this.undoQuotaLeft = map.getUndoLimit(); this.maxHeight = map.getMaxHeight(); this.maxWidth = map.getMaxWidth(); this.destinations = new HashSet<>(map.getDestinations()); this.entityMap = new Entity[this.maxHeight][this.maxWidth]; this.initialEntityMap = new Entity[this.maxHeight][this.maxWidth]; for(int i = 0; i<this.maxHeight; i++) { for(int j = 0; j<this.maxWidth; j++) { Entity entity = map.getEntity(Position.of(j, i)); if (entity == null) { entityMap[i][j] = null; initialEntityMap[i][j] = null; }else if (entity instanceof Wall) { entityMap[i][j] = new Wall(); initialEntityMap[i][j] = new Wall(); } else if (entity instanceof Player) { entityMap[i][j] = new Player(((Player) entity).getId()); initialEntityMap[i][j] = new Player(((Player) entity).getId()); } else if (entity instanceof Box) { entityMap[i][j] = new Box(((Box) entity).getPlayerId()); initialEntityMap[i][j] = new Box(((Box) entity).getPlayerId()); } else if (entity instanceof Empty) { entityMap[i][j] = new Empty(); initialEntityMap[i][j] = new Empty(); } } } this.initialDestinations = new HashSet<>(this.destinations); // throw new NotImplementedException(); }",
        "label": "P"
    },
    "2188": {
        "dataset": "COMP 3021",
        "project": "hchoaf",
        "bug_id": "38",
        "T": "void testMapCopying() { final var maxWidth = 2333; final var maxHeight = 2333; final var random = new Random(); final var randomEntities = Stream.generate(() -> Position.of(random.nextInt(maxWidth), random.nextInt(maxHeight))) .distinct() .limit(100) .collect(Collectors.toMap(Function.identity(), it -> generateEntity(it.x()))); final var firstPos = randomEntities.keySet().stream().findFirst(); final var gameMap = new GameMap(maxWidth, maxHeight, Collections.singleton(firstPos.get()), 233); randomEntities.forEach(gameMap::putEntity); final var gameState = new GameState(gameMap); final var randomPosition = randomEntities.keySet().stream().findAny(); gameMap.putEntity(randomPosition.get(), new Empty()); randomEntities.forEach((p, e) -> assertEquals(e, gameState.getEntity(p))); }",
        "C": "public static @NotNull Position of(int x, int y) { return new Position(x, y); } public GameMap(int maxWidth, int maxHeight, Set<Position> destinations, int undoLimit) { // TODO this.maxWidth = maxWidth; this.maxHeight = maxHeight; this.destinations = destinations; this.undoLimit = undoLimit; this.entityMap = new Entity[maxHeight][maxWidth]; // throw new NotImplementedException(); } /** * Parses the map from a string representation. * The first line is undo limit. * Starting from the second line, the game map is represented as follows, * <li># represents a {@link Wall}</li> * <li>@ represents a box destination.</li> * <li>Any upper-case letter represents a {@link Player}.</li> * <li> * Any lower-case letter represents a {@link Box} that is only movable by the player with the corresponding upper-case letter. * For instance, box \"a\" can only be moved by player \"A\" and not movable by player \"B\". * </li> * <li>. represents an {@link Empty} position in the map, meaning there is no player or box currently at this position.</li> * <p> * Notes: * <li> * There can be at most 26 players. * All implementations of classes in the hk.ust.comp3021.game package should support up to 26 players. * </li> * <li> * For simplicity, we assume the given map is bounded with a closed boundary. * There is no need to check this point. * </li> * <li> * Example maps can be found in \"src/main/resources\". * </li> * * @param mapText The string representation. * @return The parsed GameMap object. * @throws IllegalArgumentException if undo limit is negative but not -1. * @throws IllegalArgumentException if there are multiple same upper-case letters, i.e., one player can only exist at one position. * @throws IllegalArgumentException if there are no players in the map. * @throws IllegalArgumentException if the number of boxes is not equal to the number of box destinations. * @throws IllegalArgumentException if there are boxes whose {@link Box#getPlayerId()} public GameState(@NotNull GameMap map) { // TODO this.undoQuotaLeft = map.getUndoLimit(); this.maxHeight = map.getMaxHeight(); this.maxWidth = map.getMaxWidth(); this.destinations = new HashSet<>(map.getDestinations()); this.entityMap = new Entity[this.maxHeight][this.maxWidth]; this.initialEntityMap = new Entity[this.maxHeight][this.maxWidth]; for(int i = 0; i<this.maxHeight; i++) { for(int j = 0; j<this.maxWidth; j++) { Entity entity = map.getEntity(Position.of(j, i)); if (entity == null) { entityMap[i][j] = null; initialEntityMap[i][j] = null; }else if (entity instanceof Wall) { entityMap[i][j] = new Wall(); initialEntityMap[i][j] = new Wall(); } else if (entity instanceof Player) { entityMap[i][j] = new Player(((Player) entity).getId()); initialEntityMap[i][j] = new Player(((Player) entity).getId()); } else if (entity instanceof Box) { entityMap[i][j] = new Box(((Box) entity).getPlayerId()); initialEntityMap[i][j] = new Box(((Box) entity).getPlayerId()); } else if (entity instanceof Empty) { entityMap[i][j] = new Empty(); initialEntityMap[i][j] = new Empty(); } } } this.initialDestinations = new HashSet<>(this.destinations); // throw new NotImplementedException(); } public void putEntity(Position position, Entity entity) { // TODO entityMap[position.y()][position.x()] = entity; // throw new NotImplementedException(); } public @Nullable Entity getEntity(@NotNull Position position) { // TODO // throw new NotImplementedException(); return entityMap[position.y()][position.x()]; } /** * Get all box destination positions as a set in the game map. * This should be the same as that in {@link GameMap}",
        "label": "F"
    },
    "2189": {
        "dataset": "COMP 3021",
        "project": "hchoaf",
        "bug_id": "39",
        "T": "void testUndoWhenThereIsMoveButNoCheckpoint() { final var gameState = new GameState(TestHelper.parseGameMap(\"\"\" 233 ###### #A.a@# #..a@# ###### \"\"\" )); gameState.move(Position.of(1, 1), Position.of(2, 1)); gameState.undo(); }",
        "C": "public GameState(@NotNull GameMap map) { // TODO this.undoQuotaLeft = map.getUndoLimit(); this.maxHeight = map.getMaxHeight(); this.maxWidth = map.getMaxWidth(); this.destinations = new HashSet<>(map.getDestinations()); this.entityMap = new Entity[this.maxHeight][this.maxWidth]; this.initialEntityMap = new Entity[this.maxHeight][this.maxWidth]; for(int i = 0; i<this.maxHeight; i++) { for(int j = 0; j<this.maxWidth; j++) { Entity entity = map.getEntity(Position.of(j, i)); if (entity == null) { entityMap[i][j] = null; initialEntityMap[i][j] = null; }else if (entity instanceof Wall) { entityMap[i][j] = new Wall(); initialEntityMap[i][j] = new Wall(); } else if (entity instanceof Player) { entityMap[i][j] = new Player(((Player) entity).getId()); initialEntityMap[i][j] = new Player(((Player) entity).getId()); } else if (entity instanceof Box) { entityMap[i][j] = new Box(((Box) entity).getPlayerId()); initialEntityMap[i][j] = new Box(((Box) entity).getPlayerId()); } else if (entity instanceof Empty) { entityMap[i][j] = new Empty(); initialEntityMap[i][j] = new Empty(); } } } this.initialDestinations = new HashSet<>(this.destinations); // throw new NotImplementedException(); } public void move(Position from, Position to) { // TODO this.entityMap[to.y()][to.x()] = this.entityMap[from.y()][from.x()]; this.entityMap[from.y()][from.x()] = new Empty(); // throw new NotImplementedException(); } /** * Record a checkpoint of the game state, including: * <li>All current positions of entities in the game map.</li> * <li>Current undo quota</li> * <p> * Checkpoint is used in {@link GameState#undo()} public static @NotNull Position of(int x, int y) { return new Position(x, y); } public void undo() { // TODO if (this.getUndoQuota().isEmpty() || this.undoQuotaLeft.get() > 0) { if (this.currentCheckPoint == 0) { // change everything to initial - no need to decrement undoquota for (int i = 0; i < this.maxHeight; i++) { for (int j = 0; j < this.maxWidth; j++) { var entity = this.initialEntityMap[i][j]; if (entity == null) { entityMap[i][j] = null; } else if (entity instanceof Wall) { entityMap[i][j] = new Wall(); } else if (entity instanceof Empty) { entityMap[i][j] = new Empty(); } else if (entity instanceof Player) { entityMap[i][j] = new Player(((Player) entity).getId()); } else if (entity instanceof Box) { entityMap[i][j] = new Box(((Box) entity).getPlayerId()); } } } // this.destinations = new HashSet<>(destinations); } else if (this.currentCheckPoint == 1) { // change everything to initial; undoquotaleft-- , empty checkpoints for (int i = 0; i < this.maxHeight; i++) { for (int j = 0; j < this.maxWidth; j++) { var entity = this.initialEntityMap[i][j]; if (entity == null) { entityMap[i][j] = null; } else if (entity instanceof Wall) { entityMap[i][j] = new Wall(); } else if (entity instanceof Empty) { entityMap[i][j] = new Empty(); } else if (entity instanceof Player) { entityMap[i][j] = new Player(((Player) entity).getId()); } else if (entity instanceof Box) { entityMap[i][j] = new Box(((Box) entity).getPlayerId()); } } } this.currentCheckPoint = 0; // this.destinations = new HashSet<>(destinations); this.checkPoints.clear(); if (this.getUndoQuota().isPresent()) { this.undoQuotaLeft = Optional.of(this.undoQuotaLeft.get() - 1); } } else { // Copy entrymap, destinations, checkpoints from checkpoint ; undoquotleft -- var checkPointMap = this.checkPoints.get(checkPoints.size() - 2); for (int i = 0; i < this.maxHeight; i++) { for (int j = 0; j < this.maxWidth; j++) { var entity = checkPointMap[i][j]; if (entity == null) { entityMap[i][j] = null; } else if (entity instanceof Wall) { entityMap[i][j] = new Wall(); } else if (entity instanceof Empty) { entityMap[i][j] = new Empty(); } else if (entity instanceof Player) { entityMap[i][j] = new Player(((Player) entity).getId()); } else if (entity instanceof Box) { entityMap[i][j] = new Box(((Box) entity).getPlayerId()); } } } this.currentCheckPoint -= 1; this.checkPoints.remove(checkPoints.size() - 1); if (this.getUndoQuota().isPresent()) { this.undoQuotaLeft = Optional.of(this.undoQuotaLeft.get() - 1); } } } } /** * Get the maximum width of the game map. * This should be the same as that in {@link GameMap}",
        "label": "P"
    },
    "2190": {
        "dataset": "COMP 3021",
        "project": "hchoaf",
        "bug_id": "40",
        "T": "void testGameExit() { final var gameState = mock(GameState.class); final var inputEngine = mock(TerminalInputEngine.class); final var renderingEngine = mock(TerminalRenderingEngine.class); when(gameState.isWin()).thenReturn(false, false, false); when(inputEngine.fetchAction()) .thenReturn(new InvalidInput(0, \"\"), new InvalidInput(0, \"\"), new Exit(0)); final var game = new TerminalSokobanGame(gameState, inputEngine, renderingEngine); game.run(); verify(renderingEngine, atLeastOnce()).message(any()); }",
        "C": "public InvalidInput(int initiator, @NotNull String message) { super(initiator); this.message = message; } public Exit(int initiator) { super(initiator); } public TerminalSokobanGame(GameState gameState, TerminalInputEngine inputEngine, TerminalRenderingEngine renderingEngine) { super(gameState); this.inputEngine = inputEngine; this.renderingEngine = renderingEngine; // TODO // Check the number of players // throw new NotImplementedException(); if (gameState.getAllPlayerIds().size() > 2) { throw new IllegalArgumentException(\"TerminalSokobanGame only support at most two players.\"); } } public void run() { renderingEngine.message(GAME_READY_MESSAGE); // TODO // throw new NotImplementedException(); while (!super.shouldStop()) { // if (i > 5) throw new NotImplementedException(); renderingEngine.render(this.state); if (this.state.getUndoQuota().isEmpty()) { renderingEngine.message(UNDO_QUOTA_UNLIMITED); } else { renderingEngine.message(String.format(UNDO_QUOTA_TEMPLATE,this.state.getUndoQuota().get())); } renderingEngine.message(\">>> \"); // this.state.printEntityMap(); var action = inputEngine.fetchAction(); var actionResult = processAction(action); if (actionResult instanceof ActionResult.Failed) { renderingEngine.message(((ActionResult.Failed) actionResult).getReason()); } else if (actionResult instanceof ActionResult.Success) { if (action instanceof Exit) { break; } } // renderingEngine. } renderingEngine.render(state); renderingEngine.message(GAME_EXIT_MESSAGE); if (state.isWin()) { renderingEngine.message(WIN_MESSAGE); } }",
        "label": "P"
    },
    "2191": {
        "dataset": "COMP 3021",
        "project": "hchoaf",
        "bug_id": "41",
        "T": "void testGameWin() { final var gameState = mock(GameState.class); final var inputEngine = mock(TerminalInputEngine.class); final var renderingEngine = mock(TerminalRenderingEngine.class); when(gameState.isWin()).thenReturn(false, false, false, true); when(inputEngine.fetchAction()) .thenReturn(new InvalidInput(0, \"\")); final var game = new TerminalSokobanGame(gameState, inputEngine, renderingEngine); game.run(); verify(gameState, atLeastOnce()).isWin(); verify(renderingEngine, atLeastOnce()).message(any()); }",
        "C": "public InvalidInput(int initiator, @NotNull String message) { super(initiator); this.message = message; } public TerminalSokobanGame(GameState gameState, TerminalInputEngine inputEngine, TerminalRenderingEngine renderingEngine) { super(gameState); this.inputEngine = inputEngine; this.renderingEngine = renderingEngine; // TODO // Check the number of players // throw new NotImplementedException(); if (gameState.getAllPlayerIds().size() > 2) { throw new IllegalArgumentException(\"TerminalSokobanGame only support at most two players.\"); } } public void run() { renderingEngine.message(GAME_READY_MESSAGE); // TODO // throw new NotImplementedException(); while (!super.shouldStop()) { // if (i > 5) throw new NotImplementedException(); renderingEngine.render(this.state); if (this.state.getUndoQuota().isEmpty()) { renderingEngine.message(UNDO_QUOTA_UNLIMITED); } else { renderingEngine.message(String.format(UNDO_QUOTA_TEMPLATE,this.state.getUndoQuota().get())); } renderingEngine.message(\">>> \"); // this.state.printEntityMap(); var action = inputEngine.fetchAction(); var actionResult = processAction(action); if (actionResult instanceof ActionResult.Failed) { renderingEngine.message(((ActionResult.Failed) actionResult).getReason()); } else if (actionResult instanceof ActionResult.Success) { if (action instanceof Exit) { break; } } // renderingEngine. } renderingEngine.render(state); renderingEngine.message(GAME_EXIT_MESSAGE); if (state.isWin()) { renderingEngine.message(WIN_MESSAGE); } }",
        "label": "P"
    },
    "2192": {
        "dataset": "COMP 3021",
        "project": "hchoaf",
        "bug_id": "42",
        "T": "void testMoreThanTwoPlayers() { final var gameState = mock(GameState.class); final var inputEngine = mock(TerminalInputEngine.class); final var renderingEngine = mock(TerminalRenderingEngine.class); when(gameState.getAllPlayerPositions()).thenReturn(new HashSet<>(Arrays.asList(Position.of(1, 1), Position.of(1, 2), Position.of(1, 3)))); }",
        "C": "public static @NotNull Position of(int x, int y) { return new Position(x, y); }",
        "label": "F"
    },
    "2193": {
        "dataset": "COMP 3021",
        "project": "bkwak",
        "bug_id": "0",
        "T": "void moveUp() { Position.of(233, 232), new Move.Up(-1).nextPosition(pos) ); }",
        "C": "public static @NotNull Position of(int x, int y) { return new Position(x, y); } public Up(int initiator) { super(initiator); }",
        "label": "P"
    },
    "2194": {
        "dataset": "COMP 3021",
        "project": "bkwak",
        "bug_id": "1",
        "T": "void moveDown() { Position.of(233, 234), new Move.Down(-1).nextPosition(pos) ); }",
        "C": "public static @NotNull Position of(int x, int y) { return new Position(x, y); } public Down(int initiator) { super(initiator); }",
        "label": "P"
    },
    "2195": {
        "dataset": "COMP 3021",
        "project": "bkwak",
        "bug_id": "2",
        "T": "void moveRight() { Position.of(234, 233), new Move.Right(-1).nextPosition(pos) ); }",
        "C": "public static @NotNull Position of(int x, int y) { return new Position(x, y); } public Right(int initiator) { super(initiator); }",
        "label": "P"
    },
    "2196": {
        "dataset": "COMP 3021",
        "project": "bkwak",
        "bug_id": "3",
        "T": "void testExceedingUndoQuota() { final var gameState = mock(GameState.class); when(gameState.getPlayerPositionById(anyInt())).thenReturn(Position.of(0, 0)); when(gameState.getUndoQuota()).thenReturn(Optional.of(0)); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Undo(0)); }",
        "C": "public Undo(int initiator) { super(initiator); }",
        "label": "P"
    },
    "2197": {
        "dataset": "COMP 3021",
        "project": "bkwak",
        "bug_id": "4",
        "T": "void testExit() { final var gameState = mock(GameState.class); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Exit(0)); }",
        "C": "public Exit(int initiator) { super(initiator); }",
        "label": "P"
    },
    "2198": {
        "dataset": "COMP 3021",
        "project": "bkwak",
        "bug_id": "5",
        "T": "void testUndoUnlimited() { final var gameState = mock(GameState.class); when(gameState.getPlayerPositionById(anyInt())).thenReturn(Position.of(0, 0)); when(gameState.getUndoQuota()).thenReturn(Optional.empty()); final var game = new SokobanGameForTesting(gameState); for (int i = 0; i < 10000; i++) { final var result = game.feedActionForProcessing(new Undo(0)); } verify(gameState, times(10000)).undo(); }",
        "C": "public TerminalRenderingEngine(PrintStream outputSteam) { this.outputSteam = outputSteam; } public Undo(int initiator) { super(initiator); }",
        "label": "P"
    },
    "2199": {
        "dataset": "COMP 3021",
        "project": "bkwak",
        "bug_id": "6",
        "T": "void testPushOtherPlayerBox() { String mapText = \"\"\" 233 ###### #AB.@# #b.a.# #@...# ###### \"\"\"; final var testMap = TestHelper.parseGameMap(mapText); final var gameState = spy(new GameState(testMap)); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Move.Down(0)); verify(gameState, never()).move(any(), any()); }",
        "C": "public GameState(@NotNull GameMap map) { // FIXME this.gameMap = map; this.undoLimit = map.getUndoLimit(); this.checkpointStack = new ArrayDeque<>(); this.entityArray = new Entity[map.getMaxWidth()][map.getMaxHeight()]; this.playerPositions = new HashMap<>(); for (int x = 0; x < map.getMaxWidth(); ++x) for (int y = 0; y < map.getMaxHeight(); ++y){ this.entityArray[x][y] = map.getEntity(Position.of(x, y)); if (this.entityArray[x][y] instanceof Player p) this.playerPositions.put(p.getId(), Position.of(x, y)); } } public Down(int initiator) { super(initiator); }",
        "label": "P"
    },
    "2200": {
        "dataset": "COMP 3021",
        "project": "bkwak",
        "bug_id": "7",
        "T": "void testMoveNonExistingPlayer() { String mapText = \"\"\" 233 ###### #A..@# #a...# ##...# ###### \"\"\"; final var testMap = TestHelper.parseGameMap(mapText); final var gameState = spy(new GameState(testMap)); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Move.Down(23)); }",
        "C": "public GameState(@NotNull GameMap map) { // FIXME this.gameMap = map; this.undoLimit = map.getUndoLimit(); this.checkpointStack = new ArrayDeque<>(); this.entityArray = new Entity[map.getMaxWidth()][map.getMaxHeight()]; this.playerPositions = new HashMap<>(); for (int x = 0; x < map.getMaxWidth(); ++x) for (int y = 0; y < map.getMaxHeight(); ++y){ this.entityArray[x][y] = map.getEntity(Position.of(x, y)); if (this.entityArray[x][y] instanceof Player p) this.playerPositions.put(p.getId(), Position.of(x, y)); } } public Down(int initiator) { super(initiator); }",
        "label": "P"
    },
    "2201": {
        "dataset": "COMP 3021",
        "project": "bkwak",
        "bug_id": "8",
        "T": "void testCheckpointWhenNeed() { final var gameState = spy(new GameState(TestHelper.parseGameMap(\"\"\" 233 ###### #.Aa@# #..a@# ###### \"\"\" ))); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Move.Right(0)); verify(gameState, times(1)).checkpoint(); }",
        "C": "public GameState(@NotNull GameMap map) { // FIXME this.gameMap = map; this.undoLimit = map.getUndoLimit(); this.checkpointStack = new ArrayDeque<>(); this.entityArray = new Entity[map.getMaxWidth()][map.getMaxHeight()]; this.playerPositions = new HashMap<>(); for (int x = 0; x < map.getMaxWidth(); ++x) for (int y = 0; y < map.getMaxHeight(); ++y){ this.entityArray[x][y] = map.getEntity(Position.of(x, y)); if (this.entityArray[x][y] instanceof Player p) this.playerPositions.put(p.getId(), Position.of(x, y)); } } public Right(int initiator) { super(initiator); }",
        "label": "P"
    },
    "2202": {
        "dataset": "COMP 3021",
        "project": "bkwak",
        "bug_id": "9",
        "T": "void testPushBoxAgainstWall() { String mapText = \"\"\" 233 ###### #A..@# #a...# ##...# ###### \"\"\"; final var testMap = TestHelper.parseGameMap(mapText); final var gameState = spy(new GameState(testMap)); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Move.Down(0)); verify(gameState, never()).move(any(), any()); }",
        "C": "public GameState(@NotNull GameMap map) { // FIXME this.gameMap = map; this.undoLimit = map.getUndoLimit(); this.checkpointStack = new ArrayDeque<>(); this.entityArray = new Entity[map.getMaxWidth()][map.getMaxHeight()]; this.playerPositions = new HashMap<>(); for (int x = 0; x < map.getMaxWidth(); ++x) for (int y = 0; y < map.getMaxHeight(); ++y){ this.entityArray[x][y] = map.getEntity(Position.of(x, y)); if (this.entityArray[x][y] instanceof Player p) this.playerPositions.put(p.getId(), Position.of(x, y)); } } public Down(int initiator) { super(initiator); }",
        "label": "P"
    },
    "2203": {
        "dataset": "COMP 3021",
        "project": "bkwak",
        "bug_id": "10",
        "T": "void testCheckpointWhenNotNeed() { final var gameState = spy(new GameState(TestHelper.parseGameMap(\"\"\" 233 ###### #A.a@# #..a@# ###### \"\"\" ))); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Move.Right(0)); verify(gameState, never()).checkpoint(); } private static class SokobanGameForTesting extends AbstractSokobanGame { protected SokobanGameForTesting(GameState gameState) { super(gameState); } @Override public void run() { } public ActionResult feedActionForProcessing(Action action) { return processAction(action); } }",
        "C": "public GameState(@NotNull GameMap map) { // FIXME this.gameMap = map; this.undoLimit = map.getUndoLimit(); this.checkpointStack = new ArrayDeque<>(); this.entityArray = new Entity[map.getMaxWidth()][map.getMaxHeight()]; this.playerPositions = new HashMap<>(); for (int x = 0; x < map.getMaxWidth(); ++x) for (int y = 0; y < map.getMaxHeight(); ++y){ this.entityArray[x][y] = map.getEntity(Position.of(x, y)); if (this.entityArray[x][y] instanceof Player p) this.playerPositions.put(p.getId(), Position.of(x, y)); } } public Right(int initiator) { super(initiator); } public void run() { // FIXME renderingEngine.message(StringResources.GAME_READY_MESSAGE); while (!shouldStop()) { renderingEngine.render(state); if (state.getUndoQuota().isPresent()) renderingEngine .message(StringResources.UNDO_QUOTA_TEMPLATE.formatted(state.getUndoQuota().get().toString())); else renderingEngine.message(StringResources.UNDO_QUOTA_UNLIMITED); renderingEngine.message(\">>>\"); final var action = inputEngine.fetchAction(); final var result = processAction(action); if (result instanceof ActionResult.Failed f) renderingEngine.message(f.getReason()); } renderingEngine.render(state); renderingEngine.message(StringResources.GAME_EXIT_MESSAGE); if (state.isWin()) renderingEngine.message(StringResources.WIN_MESSAGE); } protected ActionResult processAction(@NotNull Action action) { // FIXME return switch (action) { case Exit e -> { willExit = true; yield new ActionResult.Success(e); } case InvalidInput i -> new ActionResult.Failed(i, StringResources.INVALID_INPUT_MESSAGE); case Move m -> { final var playerPos = state.getPlayerPositionById(m.getInitiator()); if (playerPos == null) yield new ActionResult.Failed(m, StringResources.PLAYER_NOT_FOUND); final var nextPlayerPos = m.nextPosition(playerPos); final var targetEntity = state.getEntity(nextPlayerPos); yield switch (targetEntity) { case Box b -> { if (b.getPlayerId() != m.getInitiator()) yield new ActionResult.Failed(m, \"You cannot move other players' boxes.\"); final var nextBoxPos = m.nextPosition(nextPlayerPos); final var farEntity = state.getEntity(nextBoxPos); if (!(farEntity instanceof Empty)) yield new ActionResult.Failed(m, \"Failed to push the box.\"); state.move(nextPlayerPos, nextBoxPos); state.move(playerPos, nextPlayerPos); state.checkpoint(); yield new ActionResult.Success(m); } case Empty e -> { state.move(playerPos, nextPlayerPos); yield new ActionResult.Success(m); } case Player p -> new ActionResult.Failed(m, \"You hit another player.\"); case Wall w -> new ActionResult.Failed(m, \"You hit a wall.\"); default -> new ActionResult.Failed(m, StringResources.INVALID_INPUT_MESSAGE); }; } case Undo u -> { if (state.getUndoQuota().orElse(1).equals(0)) yield new ActionResult.Failed(u, StringResources.UNDO_QUOTA_RUN_OUT); state.undo(); yield new ActionResult.Success(u); } default -> new ActionResult.Failed(action, StringResources.INVALID_INPUT_MESSAGE); }; }",
        "label": "P"
    },
    "2204": {
        "dataset": "COMP 3021",
        "project": "bkwak",
        "bug_id": "11",
        "T": "void testHitAnotherPlayer() { String mapText = \"\"\" 233 ###### #A..@# #B...# #ab.@# ###### \"\"\"; final var testMap = TestHelper.parseGameMap(mapText); final var gameState = spy(new GameState(testMap)); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Move.Down(0)); verify(gameState, never()).move(any(), any()); }",
        "C": "public GameState(@NotNull GameMap map) { // FIXME this.gameMap = map; this.undoLimit = map.getUndoLimit(); this.checkpointStack = new ArrayDeque<>(); this.entityArray = new Entity[map.getMaxWidth()][map.getMaxHeight()]; this.playerPositions = new HashMap<>(); for (int x = 0; x < map.getMaxWidth(); ++x) for (int y = 0; y < map.getMaxHeight(); ++y){ this.entityArray[x][y] = map.getEntity(Position.of(x, y)); if (this.entityArray[x][y] instanceof Player p) this.playerPositions.put(p.getId(), Position.of(x, y)); } } public Down(int initiator) { super(initiator); }",
        "label": "P"
    },
    "2205": {
        "dataset": "COMP 3021",
        "project": "bkwak",
        "bug_id": "12",
        "T": "void testUndoWithinQuota() { final var gameState = mock(GameState.class); when(gameState.getPlayerPositionById(anyInt())).thenReturn(Position.of(0, 0)); when(gameState.getUndoQuota()).thenReturn(Optional.of(1)); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Undo(0)); verify(gameState, times(1)).undo(); }",
        "C": "public Undo(int initiator) { super(initiator); }",
        "label": "P"
    },
    "2206": {
        "dataset": "COMP 3021",
        "project": "bkwak",
        "bug_id": "13",
        "T": "void testInvalidInput() { final var game = new SokobanGameForTesting(mock(GameState.class)); final var message = String.valueOf(new Random().nextLong()); final var action = new InvalidInput(-1, message); final var result = game.feedActionForProcessing(action); }",
        "C": "public InvalidInput(int initiator, @NotNull String message) { super(initiator); this.message = message; }",
        "label": "P"
    },
    "2207": {
        "dataset": "COMP 3021",
        "project": "bkwak",
        "bug_id": "14",
        "T": "void testUndoLimitParsing() { final var gameMap = TestHelper.parseGameMap(rectangularMap); }",
        "C": "",
        "label": "P"
    },
    "2208": {
        "dataset": "COMP 3021",
        "project": "bkwak",
        "bug_id": "15",
        "T": "void testWidthForNonRectangularMap() { final var gameMap = TestHelper.parseGameMap(nonRectangularMap); }",
        "C": "",
        "label": "P"
    },
    "2209": {
        "dataset": "COMP 3021",
        "project": "bkwak",
        "bug_id": "16",
        "T": "void testTwoPlayersMap() { final var twoPlayersMap = \"\"\" 233 ###### #A..@# #..B@# #....# #.a..# #..b.# ###### \"\"\"; final var gameMap = TestHelper.parseGameMap(twoPlayersMap); final var playerIds = gameMap.getPlayerIds(); final var expectedIds = new HashSet<Integer>(); expectedIds.add(0); expectedIds.add(1); }",
        "C": "public Set<Integer> getPlayerIds() { // FIXME return playerIds; }",
        "label": "P"
    },
    "2210": {
        "dataset": "COMP 3021",
        "project": "bkwak",
        "bug_id": "17",
        "T": "void testMapWithoutPlayer() { final var invalidMap = \"\"\" 233 ### #.# ### \"\"\"; } // @Tag(TestKind.HIDDEN) // @Test // void testUnmatchedPlayersAndBoxes() { // final var invalidMap = \"\"\" // 233 // ###### // #A..@# // #...@# // #a.b@# // #.a.@# // #..a.# // ###### // \"\"\"; // assertThrowsExactly(IllegalArgumentException.class, () -> TestHelper.parseGameMap(invalidMap)); // }",
        "C": "public TerminalRenderingEngine(PrintStream outputSteam) { this.outputSteam = outputSteam; }",
        "label": "P"
    },
    "2211": {
        "dataset": "COMP 3021",
        "project": "bkwak",
        "bug_id": "18",
        "T": "void testManyPlayersMap() { final var manyPlayersMap = \"\"\" 233 ###### #A.P@@# #vCB@@# #.cpD@# #Ga.d@# #g.bV@# ###### \"\"\"; final var gameMap = TestHelper.parseGameMap(manyPlayersMap); final var playerIds = gameMap.getPlayerIds(); final var expectedIds = new HashSet<>(Arrays.asList( 0, 'P' - 'A', 'C' - 'A', 'B' - 'A', 'D' - 'A', 'G' - 'A', 'V' - 'A' )); }",
        "C": "public Set<Integer> getPlayerIds() { // FIXME return playerIds; }",
        "label": "P"
    },
    "2212": {
        "dataset": "COMP 3021",
        "project": "bkwak",
        "bug_id": "19",
        "T": "void testHeightForNonRectangularMap() { final var gameMap = TestHelper.parseGameMap(nonRectangularMap); }",
        "C": "",
        "label": "P"
    },
    "2213": {
        "dataset": "COMP 3021",
        "project": "bkwak",
        "bug_id": "20",
        "T": "void testDuplicatedPlayers() { final var invalidMap = \"\"\" 233 ###### #A..@# #..A@# #....# #.a..# #..b.# ###### \"\"\"; }",
        "C": "",
        "label": "P"
    },
    "2214": {
        "dataset": "COMP 3021",
        "project": "bkwak",
        "bug_id": "21",
        "T": "void testParseMapWithoutUndoLimit() { final var invalidMap = String.join(\"\\n\", rectangularMap.lines().skip(1).toList()); }",
        "C": "",
        "label": "P"
    },
    "2215": {
        "dataset": "COMP 3021",
        "project": "bkwak",
        "bug_id": "22",
        "T": "void testInsufficientDestinations() { final var invalidMap = \"\"\" 233 ###### #A..@# #...@# #a...# #.a..# #..a.# ###### \"\"\"; }",
        "C": "",
        "label": "P"
    },
    "2216": {
        "dataset": "COMP 3021",
        "project": "bkwak",
        "bug_id": "23",
        "T": "void testSuperLargeMap() { try { new GameMap(Integer.MAX_VALUE, Integer.MAX_VALUE, Collections.emptySet(), 0); } catch (OutOfMemoryError e) { throw new RuntimeException(e); } }); }",
        "C": "public GameMap(int maxWidth, int maxHeight, Set<Position> destinations, int undoLimit) { // FIXME this.maxWidth = maxWidth; this.maxHeight = maxHeight; this.undoLimit = (undoLimit < 0) ? Optional.empty() : Optional.of(undoLimit); this.entityArray = new Entity[maxWidth][maxHeight]; this.destinations = destinations; this.playerIds = new HashSet<>(); } /** * Parses the map from a string representation. * The first line is undo limit. * Starting from the second line, the game map is represented as follows, * <li># represents a {@link Wall}</li> * <li>@ represents a box destination.</li> * <li>Any upper-case letter represents a {@link Player}.</li> * <li> * Any lower-case letter represents a {@link Box} that is only movable by the player with the corresponding upper-case letter. * For instance, box \"a\" can only be moved by player \"A\" and not movable by player \"B\". * </li> * <li>. represents an {@link Empty} position in the map, meaning there is no player or box currently at this position.</li> * <p> * Notes: * <li> * There can be at most 26 players. * All implementations of classes in the hk.ust.comp3021.game package should support up to 26 players. * </li> * <li> * For simplicity, we assume the given map is bounded with a closed boundary. * There is no need to check this point. * </li> * <li> * Example maps can be found in \"src/main/resources\". * </li> * * @param mapText The string representation. * @return The parsed GameMap object. * @throws IllegalArgumentException if undo limit is negative but not -1. * @throws IllegalArgumentException if there are multiple same upper-case letters, i.e., one player can only exist at one position. * @throws IllegalArgumentException if there are no players in the map. * @throws IllegalArgumentException if the number of boxes is not equal to the number of box destinations. * @throws IllegalArgumentException if there are boxes whose {@link Box#getPlayerId()} public TerminalRenderingEngine(PrintStream outputSteam) { this.outputSteam = outputSteam; }",
        "label": "F"
    },
    "2217": {
        "dataset": "COMP 3021",
        "project": "bkwak",
        "bug_id": "24",
        "T": "void testInvalidUndoLimit() { final var invalidMap = \"\"\" -233 ###### #A..@# #...@# #a.b@# #.a.@# #..a.# ###### \"\"\"; }",
        "C": "",
        "label": "P"
    },
    "2218": {
        "dataset": "COMP 3021",
        "project": "bkwak",
        "bug_id": "25",
        "T": "void testEmptyMap() { final var invalidMap = \"\"; }",
        "C": "",
        "label": "P"
    },
    "2219": {
        "dataset": "COMP 3021",
        "project": "bkwak",
        "bug_id": "26",
        "T": "void testMove(String input, String name, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); } private InputStream fixValueStream(String content) { final var bytes = content.getBytes(StandardCharsets.UTF_8); return new ByteArrayInputStream(bytes); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // FIXME final var inputLine = terminalScanner.nextLine(); final var inputWords = inputLine.split(\"\\\\s+\"); if (inputWords.length == 0) return new InvalidInput(0, StringResources.INVALID_INPUT_MESSAGE); return switch (inputWords[0].toLowerCase()) { case \"a\" -> new Move.Left(0); case \"s\" -> new Move.Down(0); case \"w\" -> new Move.Up(0); case \"d\" -> new Move.Right(0); case \"h\" -> new Move.Left(1); case \"j\" -> new Move.Down(1); case \"k\" -> new Move.Up(1); case \"l\" -> new Move.Right(1); case \"u\" -> new Undo(-1); case StringResources.EXIT_COMMAND_TEXT -> new Exit(-1); default -> new InvalidInput(-1, StringResources.INVALID_INPUT_MESSAGE); }; }",
        "label": "P"
    },
    "2220": {
        "dataset": "COMP 3021",
        "project": "bkwak",
        "bug_id": "27",
        "T": "void testMove(String input, String name, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); } private InputStream fixValueStream(String content) { final var bytes = content.getBytes(StandardCharsets.UTF_8); return new ByteArrayInputStream(bytes); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // FIXME final var inputLine = terminalScanner.nextLine(); final var inputWords = inputLine.split(\"\\\\s+\"); if (inputWords.length == 0) return new InvalidInput(0, StringResources.INVALID_INPUT_MESSAGE); return switch (inputWords[0].toLowerCase()) { case \"a\" -> new Move.Left(0); case \"s\" -> new Move.Down(0); case \"w\" -> new Move.Up(0); case \"d\" -> new Move.Right(0); case \"h\" -> new Move.Left(1); case \"j\" -> new Move.Down(1); case \"k\" -> new Move.Up(1); case \"l\" -> new Move.Right(1); case \"u\" -> new Undo(-1); case StringResources.EXIT_COMMAND_TEXT -> new Exit(-1); default -> new InvalidInput(-1, StringResources.INVALID_INPUT_MESSAGE); }; }",
        "label": "P"
    },
    "2221": {
        "dataset": "COMP 3021",
        "project": "bkwak",
        "bug_id": "28",
        "T": "void testMove(String input, String name, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); } private InputStream fixValueStream(String content) { final var bytes = content.getBytes(StandardCharsets.UTF_8); return new ByteArrayInputStream(bytes); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // FIXME final var inputLine = terminalScanner.nextLine(); final var inputWords = inputLine.split(\"\\\\s+\"); if (inputWords.length == 0) return new InvalidInput(0, StringResources.INVALID_INPUT_MESSAGE); return switch (inputWords[0].toLowerCase()) { case \"a\" -> new Move.Left(0); case \"s\" -> new Move.Down(0); case \"w\" -> new Move.Up(0); case \"d\" -> new Move.Right(0); case \"h\" -> new Move.Left(1); case \"j\" -> new Move.Down(1); case \"k\" -> new Move.Up(1); case \"l\" -> new Move.Right(1); case \"u\" -> new Undo(-1); case StringResources.EXIT_COMMAND_TEXT -> new Exit(-1); default -> new InvalidInput(-1, StringResources.INVALID_INPUT_MESSAGE); }; }",
        "label": "P"
    },
    "2222": {
        "dataset": "COMP 3021",
        "project": "bkwak",
        "bug_id": "29",
        "T": "void testMove(String input, String name, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); } private InputStream fixValueStream(String content) { final var bytes = content.getBytes(StandardCharsets.UTF_8); return new ByteArrayInputStream(bytes); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // FIXME final var inputLine = terminalScanner.nextLine(); final var inputWords = inputLine.split(\"\\\\s+\"); if (inputWords.length == 0) return new InvalidInput(0, StringResources.INVALID_INPUT_MESSAGE); return switch (inputWords[0].toLowerCase()) { case \"a\" -> new Move.Left(0); case \"s\" -> new Move.Down(0); case \"w\" -> new Move.Up(0); case \"d\" -> new Move.Right(0); case \"h\" -> new Move.Left(1); case \"j\" -> new Move.Down(1); case \"k\" -> new Move.Up(1); case \"l\" -> new Move.Right(1); case \"u\" -> new Undo(-1); case StringResources.EXIT_COMMAND_TEXT -> new Exit(-1); default -> new InvalidInput(-1, StringResources.INVALID_INPUT_MESSAGE); }; }",
        "label": "P"
    },
    "2223": {
        "dataset": "COMP 3021",
        "project": "bkwak",
        "bug_id": "30",
        "T": "void testMove(String input, String name, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); } private InputStream fixValueStream(String content) { final var bytes = content.getBytes(StandardCharsets.UTF_8); return new ByteArrayInputStream(bytes); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // FIXME final var inputLine = terminalScanner.nextLine(); final var inputWords = inputLine.split(\"\\\\s+\"); if (inputWords.length == 0) return new InvalidInput(0, StringResources.INVALID_INPUT_MESSAGE); return switch (inputWords[0].toLowerCase()) { case \"a\" -> new Move.Left(0); case \"s\" -> new Move.Down(0); case \"w\" -> new Move.Up(0); case \"d\" -> new Move.Right(0); case \"h\" -> new Move.Left(1); case \"j\" -> new Move.Down(1); case \"k\" -> new Move.Up(1); case \"l\" -> new Move.Right(1); case \"u\" -> new Undo(-1); case StringResources.EXIT_COMMAND_TEXT -> new Exit(-1); default -> new InvalidInput(-1, StringResources.INVALID_INPUT_MESSAGE); }; }",
        "label": "P"
    },
    "2224": {
        "dataset": "COMP 3021",
        "project": "bkwak",
        "bug_id": "31",
        "T": "void testMove(String input, String name, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); } private InputStream fixValueStream(String content) { final var bytes = content.getBytes(StandardCharsets.UTF_8); return new ByteArrayInputStream(bytes); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // FIXME final var inputLine = terminalScanner.nextLine(); final var inputWords = inputLine.split(\"\\\\s+\"); if (inputWords.length == 0) return new InvalidInput(0, StringResources.INVALID_INPUT_MESSAGE); return switch (inputWords[0].toLowerCase()) { case \"a\" -> new Move.Left(0); case \"s\" -> new Move.Down(0); case \"w\" -> new Move.Up(0); case \"d\" -> new Move.Right(0); case \"h\" -> new Move.Left(1); case \"j\" -> new Move.Down(1); case \"k\" -> new Move.Up(1); case \"l\" -> new Move.Right(1); case \"u\" -> new Undo(-1); case StringResources.EXIT_COMMAND_TEXT -> new Exit(-1); default -> new InvalidInput(-1, StringResources.INVALID_INPUT_MESSAGE); }; }",
        "label": "P"
    },
    "2225": {
        "dataset": "COMP 3021",
        "project": "bkwak",
        "bug_id": "32",
        "T": "void testMove(String input, String name, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); } private InputStream fixValueStream(String content) { final var bytes = content.getBytes(StandardCharsets.UTF_8); return new ByteArrayInputStream(bytes); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // FIXME final var inputLine = terminalScanner.nextLine(); final var inputWords = inputLine.split(\"\\\\s+\"); if (inputWords.length == 0) return new InvalidInput(0, StringResources.INVALID_INPUT_MESSAGE); return switch (inputWords[0].toLowerCase()) { case \"a\" -> new Move.Left(0); case \"s\" -> new Move.Down(0); case \"w\" -> new Move.Up(0); case \"d\" -> new Move.Right(0); case \"h\" -> new Move.Left(1); case \"j\" -> new Move.Down(1); case \"k\" -> new Move.Up(1); case \"l\" -> new Move.Right(1); case \"u\" -> new Undo(-1); case StringResources.EXIT_COMMAND_TEXT -> new Exit(-1); default -> new InvalidInput(-1, StringResources.INVALID_INPUT_MESSAGE); }; }",
        "label": "P"
    },
    "2226": {
        "dataset": "COMP 3021",
        "project": "bkwak",
        "bug_id": "33",
        "T": "void testMove(String input, String name, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); } private InputStream fixValueStream(String content) { final var bytes = content.getBytes(StandardCharsets.UTF_8); return new ByteArrayInputStream(bytes); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // FIXME final var inputLine = terminalScanner.nextLine(); final var inputWords = inputLine.split(\"\\\\s+\"); if (inputWords.length == 0) return new InvalidInput(0, StringResources.INVALID_INPUT_MESSAGE); return switch (inputWords[0].toLowerCase()) { case \"a\" -> new Move.Left(0); case \"s\" -> new Move.Down(0); case \"w\" -> new Move.Up(0); case \"d\" -> new Move.Right(0); case \"h\" -> new Move.Left(1); case \"j\" -> new Move.Down(1); case \"k\" -> new Move.Up(1); case \"l\" -> new Move.Right(1); case \"u\" -> new Undo(-1); case StringResources.EXIT_COMMAND_TEXT -> new Exit(-1); default -> new InvalidInput(-1, StringResources.INVALID_INPUT_MESSAGE); }; }",
        "label": "P"
    },
    "2227": {
        "dataset": "COMP 3021",
        "project": "bkwak",
        "bug_id": "34",
        "T": "void testUndo(String input, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // FIXME final var inputLine = terminalScanner.nextLine(); final var inputWords = inputLine.split(\"\\\\s+\"); if (inputWords.length == 0) return new InvalidInput(0, StringResources.INVALID_INPUT_MESSAGE); return switch (inputWords[0].toLowerCase()) { case \"a\" -> new Move.Left(0); case \"s\" -> new Move.Down(0); case \"w\" -> new Move.Up(0); case \"d\" -> new Move.Right(0); case \"h\" -> new Move.Left(1); case \"j\" -> new Move.Down(1); case \"k\" -> new Move.Up(1); case \"l\" -> new Move.Right(1); case \"u\" -> new Undo(-1); case StringResources.EXIT_COMMAND_TEXT -> new Exit(-1); default -> new InvalidInput(-1, StringResources.INVALID_INPUT_MESSAGE); }; }",
        "label": "P"
    },
    "2228": {
        "dataset": "COMP 3021",
        "project": "bkwak",
        "bug_id": "35",
        "T": "void testInvalidInput() { final var inputStream = fixValueStream(\"blah blah\"); final var inputEngine = new TerminalInputEngine(inputStream); final var action = inputEngine.fetchAction(); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // FIXME final var inputLine = terminalScanner.nextLine(); final var inputWords = inputLine.split(\"\\\\s+\"); if (inputWords.length == 0) return new InvalidInput(0, StringResources.INVALID_INPUT_MESSAGE); return switch (inputWords[0].toLowerCase()) { case \"a\" -> new Move.Left(0); case \"s\" -> new Move.Down(0); case \"w\" -> new Move.Up(0); case \"d\" -> new Move.Right(0); case \"h\" -> new Move.Left(1); case \"j\" -> new Move.Down(1); case \"k\" -> new Move.Up(1); case \"l\" -> new Move.Right(1); case \"u\" -> new Undo(-1); case StringResources.EXIT_COMMAND_TEXT -> new Exit(-1); default -> new InvalidInput(-1, StringResources.INVALID_INPUT_MESSAGE); }; }",
        "label": "P"
    },
    "2229": {
        "dataset": "COMP 3021",
        "project": "bkwak",
        "bug_id": "36",
        "T": "void testUndoWhenThereIsNoMove() { final var gameState = new GameState(TestHelper.parseGameMap(\"\"\" 233 ###### #A.a@# #..a@# ###### \"\"\" )); gameState.undo(); } private Entity generateEntity(int key) { return switch (key % 4) { case 0 -> new Box(0); case 1 -> new Empty(); case 2 -> new Player(0); case 3 -> new Wall(); default -> throw new ShouldNotReachException(); }; }",
        "C": "public GameState(@NotNull GameMap map) { // FIXME this.gameMap = map; this.undoLimit = map.getUndoLimit(); this.checkpointStack = new ArrayDeque<>(); this.entityArray = new Entity[map.getMaxWidth()][map.getMaxHeight()]; this.playerPositions = new HashMap<>(); for (int x = 0; x < map.getMaxWidth(); ++x) for (int y = 0; y < map.getMaxHeight(); ++y){ this.entityArray[x][y] = map.getEntity(Position.of(x, y)); if (this.entityArray[x][y] instanceof Player p) this.playerPositions.put(p.getId(), Position.of(x, y)); } } public void undo() { // FIXME if (undoLimit.isPresent() && !checkpointStack.isEmpty()) undoLimit = Optional.of(undoLimit.get() - 1); playerPositions.clear(); if (!checkpointStack.isEmpty()) checkpointStack.pop(); final Function<Position, Entity> getSaved = checkpointStack.isEmpty() ? (Position p) -> gameMap.getEntity(p) : (Position p) -> checkpointStack.peek()[p.x()][p.y()]; for (int x = 0; x < gameMap.getMaxWidth(); ++x) for (int y = 0; y < gameMap.getMaxHeight(); ++y) { entityArray[x][y] = getSaved.apply(Position.of(x, y)); if (entityArray[x][y] instanceof Player p) playerPositions.put(p.getId(), Position.of(x, y)); } } /** * Get the maximum width of the game map. * This should be the same as that in {@link GameMap} public TerminalRenderingEngine(PrintStream outputSteam) { this.outputSteam = outputSteam; } public Box(int playerId) { this.playerId = playerId; } public Player(int id) { this.id = id; } public ShouldNotReachException() { super(\"This branch should not be reached.\"); }",
        "label": "P"
    },
    "2230": {
        "dataset": "COMP 3021",
        "project": "bkwak",
        "bug_id": "37",
        "T": "void testGetUndoUnlimited() { final var gameState = new GameState(TestHelper.parseGameMap(\"\"\" -1 ###### #.Aa@# #..a@# ###### \"\"\" )); }",
        "C": "public GameState(@NotNull GameMap map) { // FIXME this.gameMap = map; this.undoLimit = map.getUndoLimit(); this.checkpointStack = new ArrayDeque<>(); this.entityArray = new Entity[map.getMaxWidth()][map.getMaxHeight()]; this.playerPositions = new HashMap<>(); for (int x = 0; x < map.getMaxWidth(); ++x) for (int y = 0; y < map.getMaxHeight(); ++y){ this.entityArray[x][y] = map.getEntity(Position.of(x, y)); if (this.entityArray[x][y] instanceof Player p) this.playerPositions.put(p.getId(), Position.of(x, y)); } }",
        "label": "P"
    },
    "2231": {
        "dataset": "COMP 3021",
        "project": "bkwak",
        "bug_id": "38",
        "T": "void testMapCopying() { final var maxWidth = 2333; final var maxHeight = 2333; final var random = new Random(); final var randomEntities = Stream.generate(() -> Position.of(random.nextInt(maxWidth), random.nextInt(maxHeight))) .distinct() .limit(100) .collect(Collectors.toMap(Function.identity(), it -> generateEntity(it.x()))); final var firstPos = randomEntities.keySet().stream().findFirst(); final var gameMap = new GameMap(maxWidth, maxHeight, Collections.singleton(firstPos.get()), 233); randomEntities.forEach(gameMap::putEntity); final var gameState = new GameState(gameMap); final var randomPosition = randomEntities.keySet().stream().findAny(); gameMap.putEntity(randomPosition.get(), new Empty()); randomEntities.forEach((p, e) -> assertEquals(e, gameState.getEntity(p))); }",
        "C": "public static @NotNull Position of(int x, int y) { return new Position(x, y); } public GameMap(int maxWidth, int maxHeight, Set<Position> destinations, int undoLimit) { // FIXME this.maxWidth = maxWidth; this.maxHeight = maxHeight; this.undoLimit = (undoLimit < 0) ? Optional.empty() : Optional.of(undoLimit); this.entityArray = new Entity[maxWidth][maxHeight]; this.destinations = destinations; this.playerIds = new HashSet<>(); } /** * Parses the map from a string representation. * The first line is undo limit. * Starting from the second line, the game map is represented as follows, * <li># represents a {@link Wall}</li> * <li>@ represents a box destination.</li> * <li>Any upper-case letter represents a {@link Player}.</li> * <li> * Any lower-case letter represents a {@link Box} that is only movable by the player with the corresponding upper-case letter. * For instance, box \"a\" can only be moved by player \"A\" and not movable by player \"B\". * </li> * <li>. represents an {@link Empty} position in the map, meaning there is no player or box currently at this position.</li> * <p> * Notes: * <li> * There can be at most 26 players. * All implementations of classes in the hk.ust.comp3021.game package should support up to 26 players. * </li> * <li> * For simplicity, we assume the given map is bounded with a closed boundary. * There is no need to check this point. * </li> * <li> * Example maps can be found in \"src/main/resources\". * </li> * * @param mapText The string representation. * @return The parsed GameMap object. * @throws IllegalArgumentException if undo limit is negative but not -1. * @throws IllegalArgumentException if there are multiple same upper-case letters, i.e., one player can only exist at one position. * @throws IllegalArgumentException if there are no players in the map. * @throws IllegalArgumentException if the number of boxes is not equal to the number of box destinations. * @throws IllegalArgumentException if there are boxes whose {@link Box#getPlayerId()} public GameState(@NotNull GameMap map) { // FIXME this.gameMap = map; this.undoLimit = map.getUndoLimit(); this.checkpointStack = new ArrayDeque<>(); this.entityArray = new Entity[map.getMaxWidth()][map.getMaxHeight()]; this.playerPositions = new HashMap<>(); for (int x = 0; x < map.getMaxWidth(); ++x) for (int y = 0; y < map.getMaxHeight(); ++y){ this.entityArray[x][y] = map.getEntity(Position.of(x, y)); if (this.entityArray[x][y] instanceof Player p) this.playerPositions.put(p.getId(), Position.of(x, y)); } } public void putEntity(Position position, Entity entity) { // FIXME if (0 <= position.x() && position.x() < maxWidth && 0 <= position.y() && position.y() < maxHeight) { entityArray[position.x()][position.y()] = entity; if (entity instanceof Player player) playerIds.add(player.getId()); } } public @Nullable Entity getEntity(@NotNull Position position) { // FIXME if (0 <= position.x() && position.x() < gameMap.getMaxWidth() && 0 <= position.y() && position.y() < gameMap.getMaxHeight()) return entityArray[position.x()][position.y()]; return null; } /** * Get all box destination positions as a set in the game map. * This should be the same as that in {@link GameMap}",
        "label": "P"
    },
    "2232": {
        "dataset": "COMP 3021",
        "project": "bkwak",
        "bug_id": "39",
        "T": "void testUndoWhenThereIsMoveButNoCheckpoint() { final var gameState = new GameState(TestHelper.parseGameMap(\"\"\" 233 ###### #A.a@# #..a@# ###### \"\"\" )); gameState.move(Position.of(1, 1), Position.of(2, 1)); gameState.undo(); }",
        "C": "public GameState(@NotNull GameMap map) { // FIXME this.gameMap = map; this.undoLimit = map.getUndoLimit(); this.checkpointStack = new ArrayDeque<>(); this.entityArray = new Entity[map.getMaxWidth()][map.getMaxHeight()]; this.playerPositions = new HashMap<>(); for (int x = 0; x < map.getMaxWidth(); ++x) for (int y = 0; y < map.getMaxHeight(); ++y){ this.entityArray[x][y] = map.getEntity(Position.of(x, y)); if (this.entityArray[x][y] instanceof Player p) this.playerPositions.put(p.getId(), Position.of(x, y)); } } public void move(Position from, Position to) { // FIXME entityArray[to.x()][to.y()] = entityArray[from.x()][from.y()]; entityArray[from.x()][from.y()] = new Empty(); if (entityArray[to.x()][to.y()] instanceof Player p) playerPositions.put(p.getId(), to); } /** * Record a checkpoint of the game state, including: * <li>All current positions of entities in the game map.</li> * <li>Current undo quota</li> * <p> * Checkpoint is used in {@link GameState#undo()} public static @NotNull Position of(int x, int y) { return new Position(x, y); } public void undo() { // FIXME if (undoLimit.isPresent() && !checkpointStack.isEmpty()) undoLimit = Optional.of(undoLimit.get() - 1); playerPositions.clear(); if (!checkpointStack.isEmpty()) checkpointStack.pop(); final Function<Position, Entity> getSaved = checkpointStack.isEmpty() ? (Position p) -> gameMap.getEntity(p) : (Position p) -> checkpointStack.peek()[p.x()][p.y()]; for (int x = 0; x < gameMap.getMaxWidth(); ++x) for (int y = 0; y < gameMap.getMaxHeight(); ++y) { entityArray[x][y] = getSaved.apply(Position.of(x, y)); if (entityArray[x][y] instanceof Player p) playerPositions.put(p.getId(), Position.of(x, y)); } } /** * Get the maximum width of the game map. * This should be the same as that in {@link GameMap}",
        "label": "P"
    },
    "2233": {
        "dataset": "COMP 3021",
        "project": "bkwak",
        "bug_id": "40",
        "T": "void testGameExit() { final var gameState = mock(GameState.class); final var inputEngine = mock(TerminalInputEngine.class); final var renderingEngine = mock(TerminalRenderingEngine.class); when(gameState.isWin()).thenReturn(false, false, false); when(inputEngine.fetchAction()) .thenReturn(new InvalidInput(0, \"\"), new InvalidInput(0, \"\"), new Exit(0)); final var game = new TerminalSokobanGame(gameState, inputEngine, renderingEngine); game.run(); verify(renderingEngine, atLeastOnce()).message(any()); }",
        "C": "public InvalidInput(int initiator, @NotNull String message) { super(initiator); this.message = message; } public Exit(int initiator) { super(initiator); } public void run() { // FIXME renderingEngine.message(StringResources.GAME_READY_MESSAGE); while (!shouldStop()) { renderingEngine.render(state); if (state.getUndoQuota().isPresent()) renderingEngine .message(StringResources.UNDO_QUOTA_TEMPLATE.formatted(state.getUndoQuota().get().toString())); else renderingEngine.message(StringResources.UNDO_QUOTA_UNLIMITED); renderingEngine.message(\">>>\"); final var action = inputEngine.fetchAction(); final var result = processAction(action); if (result instanceof ActionResult.Failed f) renderingEngine.message(f.getReason()); } renderingEngine.render(state); renderingEngine.message(StringResources.GAME_EXIT_MESSAGE); if (state.isWin()) renderingEngine.message(StringResources.WIN_MESSAGE); }",
        "label": "P"
    },
    "2234": {
        "dataset": "COMP 3021",
        "project": "bkwak",
        "bug_id": "41",
        "T": "void testGameWin() { final var gameState = mock(GameState.class); final var inputEngine = mock(TerminalInputEngine.class); final var renderingEngine = mock(TerminalRenderingEngine.class); when(gameState.isWin()).thenReturn(false, false, false, true); when(inputEngine.fetchAction()) .thenReturn(new InvalidInput(0, \"\")); final var game = new TerminalSokobanGame(gameState, inputEngine, renderingEngine); game.run(); verify(gameState, atLeastOnce()).isWin(); verify(renderingEngine, atLeastOnce()).message(any()); }",
        "C": "public InvalidInput(int initiator, @NotNull String message) { super(initiator); this.message = message; } public void run() { // FIXME renderingEngine.message(StringResources.GAME_READY_MESSAGE); while (!shouldStop()) { renderingEngine.render(state); if (state.getUndoQuota().isPresent()) renderingEngine .message(StringResources.UNDO_QUOTA_TEMPLATE.formatted(state.getUndoQuota().get().toString())); else renderingEngine.message(StringResources.UNDO_QUOTA_UNLIMITED); renderingEngine.message(\">>>\"); final var action = inputEngine.fetchAction(); final var result = processAction(action); if (result instanceof ActionResult.Failed f) renderingEngine.message(f.getReason()); } renderingEngine.render(state); renderingEngine.message(StringResources.GAME_EXIT_MESSAGE); if (state.isWin()) renderingEngine.message(StringResources.WIN_MESSAGE); }",
        "label": "P"
    },
    "2235": {
        "dataset": "COMP 3021",
        "project": "bkwak",
        "bug_id": "42",
        "T": "void testMoreThanTwoPlayers() { final var gameState = mock(GameState.class); final var inputEngine = mock(TerminalInputEngine.class); final var renderingEngine = mock(TerminalRenderingEngine.class); when(gameState.getAllPlayerPositions()).thenReturn(new HashSet<>(Arrays.asList(Position.of(1, 1), Position.of(1, 2), Position.of(1, 3)))); }",
        "C": "public static @NotNull Position of(int x, int y) { return new Position(x, y); }",
        "label": "P"
    },
    "2236": {
        "dataset": "COMP 3021",
        "project": "pfyan",
        "bug_id": "0",
        "T": "void moveUp() { Position.of(233, 232), new Move.Up(-1).nextPosition(pos) ); }",
        "C": "public static @NotNull Position of(int x, int y) { return new Position(x, y); } public Up(int initiator) { super(initiator); }",
        "label": "P"
    },
    "2237": {
        "dataset": "COMP 3021",
        "project": "pfyan",
        "bug_id": "1",
        "T": "void moveDown() { Position.of(233, 234), new Move.Down(-1).nextPosition(pos) ); }",
        "C": "public static @NotNull Position of(int x, int y) { return new Position(x, y); } public Down(int initiator) { super(initiator); }",
        "label": "P"
    },
    "2238": {
        "dataset": "COMP 3021",
        "project": "pfyan",
        "bug_id": "2",
        "T": "void moveRight() { Position.of(234, 233), new Move.Right(-1).nextPosition(pos) ); }",
        "C": "public static @NotNull Position of(int x, int y) { return new Position(x, y); } public Right(int initiator) { super(initiator); }",
        "label": "P"
    },
    "2239": {
        "dataset": "COMP 3021",
        "project": "pfyan",
        "bug_id": "3",
        "T": "void testExceedingUndoQuota() { final var gameState = mock(GameState.class); when(gameState.getPlayerPositionById(anyInt())).thenReturn(Position.of(0, 0)); when(gameState.getUndoQuota()).thenReturn(Optional.of(0)); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Undo(0)); }",
        "C": "public Undo(int initiator) { super(initiator); }",
        "label": "P"
    },
    "2240": {
        "dataset": "COMP 3021",
        "project": "pfyan",
        "bug_id": "4",
        "T": "void testExit() { final var gameState = mock(GameState.class); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Exit(0)); }",
        "C": "public Exit(int initiator) { super(initiator); }",
        "label": "P"
    },
    "2241": {
        "dataset": "COMP 3021",
        "project": "pfyan",
        "bug_id": "5",
        "T": "void testUndoUnlimited() { final var gameState = mock(GameState.class); when(gameState.getPlayerPositionById(anyInt())).thenReturn(Position.of(0, 0)); when(gameState.getUndoQuota()).thenReturn(Optional.empty()); final var game = new SokobanGameForTesting(gameState); for (int i = 0; i < 10000; i++) { final var result = game.feedActionForProcessing(new Undo(0)); } verify(gameState, times(10000)).undo(); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public Undo(int initiator) { super(initiator); }",
        "label": "P"
    },
    "2242": {
        "dataset": "COMP 3021",
        "project": "pfyan",
        "bug_id": "6",
        "T": "void testPushOtherPlayerBox() { String mapText = \"\"\" 233 ###### #AB.@# #b.a.# #@...# ###### \"\"\"; final var testMap = TestHelper.parseGameMap(mapText); final var gameState = spy(new GameState(testMap)); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Move.Down(0)); verify(gameState, never()).move(any(), any()); }",
        "C": "public GameState(@NotNull GameMap map) { // this.gameMap = map; // this.originalMap = copyMap(); this.originalMap = map; this.gameMap = copyMap(map); this.undoQuotaLeft = map.getUndoLimit().get(); this.undoStack = new Stack<>(); } public Down(int initiator) { super(initiator); }",
        "label": "P"
    },
    "2243": {
        "dataset": "COMP 3021",
        "project": "pfyan",
        "bug_id": "7",
        "T": "void testMoveNonExistingPlayer() { String mapText = \"\"\" 233 ###### #A..@# #a...# ##...# ###### \"\"\"; final var testMap = TestHelper.parseGameMap(mapText); final var gameState = spy(new GameState(testMap)); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Move.Down(23)); }",
        "C": "public GameState(@NotNull GameMap map) { // this.gameMap = map; // this.originalMap = copyMap(); this.originalMap = map; this.gameMap = copyMap(map); this.undoQuotaLeft = map.getUndoLimit().get(); this.undoStack = new Stack<>(); } public Down(int initiator) { super(initiator); }",
        "label": "P"
    },
    "2244": {
        "dataset": "COMP 3021",
        "project": "pfyan",
        "bug_id": "8",
        "T": "void testCheckpointWhenNeed() { final var gameState = spy(new GameState(TestHelper.parseGameMap(\"\"\" 233 ###### #.Aa@# #..a@# ###### \"\"\" ))); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Move.Right(0)); verify(gameState, times(1)).checkpoint(); }",
        "C": "public GameState(@NotNull GameMap map) { // this.gameMap = map; // this.originalMap = copyMap(); this.originalMap = map; this.gameMap = copyMap(map); this.undoQuotaLeft = map.getUndoLimit().get(); this.undoStack = new Stack<>(); } public Right(int initiator) { super(initiator); }",
        "label": "P"
    },
    "2245": {
        "dataset": "COMP 3021",
        "project": "pfyan",
        "bug_id": "9",
        "T": "void testPushBoxAgainstWall() { String mapText = \"\"\" 233 ###### #A..@# #a...# ##...# ###### \"\"\"; final var testMap = TestHelper.parseGameMap(mapText); final var gameState = spy(new GameState(testMap)); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Move.Down(0)); verify(gameState, never()).move(any(), any()); }",
        "C": "public GameState(@NotNull GameMap map) { // this.gameMap = map; // this.originalMap = copyMap(); this.originalMap = map; this.gameMap = copyMap(map); this.undoQuotaLeft = map.getUndoLimit().get(); this.undoStack = new Stack<>(); } public Down(int initiator) { super(initiator); }",
        "label": "P"
    },
    "2246": {
        "dataset": "COMP 3021",
        "project": "pfyan",
        "bug_id": "10",
        "T": "void testCheckpointWhenNotNeed() { final var gameState = spy(new GameState(TestHelper.parseGameMap(\"\"\" 233 ###### #A.a@# #..a@# ###### \"\"\" ))); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Move.Right(0)); verify(gameState, never()).checkpoint(); } private static class SokobanGameForTesting extends AbstractSokobanGame { protected SokobanGameForTesting(GameState gameState) { super(gameState); } @Override public void run() { } public ActionResult feedActionForProcessing(Action action) { return processAction(action); } }",
        "C": "public GameState(@NotNull GameMap map) { // this.gameMap = map; // this.originalMap = copyMap(); this.originalMap = map; this.gameMap = copyMap(map); this.undoQuotaLeft = map.getUndoLimit().get(); this.undoStack = new Stack<>(); } public Right(int initiator) { super(initiator); } public void run() { // TODO // throw new NotImplementedException(); renderingEngine.message(GAME_READY_MESSAGE); renderingEngine.render(state); while (true) { var undoQuota = state.getUndoQuota(); if (!undoQuota.isPresent()) { renderingEngine.message(UNDO_QUOTA_TEMPLATE.formatted(UNDO_QUOTA_UNLIMITED)); } else { renderingEngine.message(UNDO_QUOTA_TEMPLATE.formatted(undoQuota.get())); } var action = inputEngine.fetchAction(); var result = processAction(action); renderingEngine.render(state); if (result instanceof ActionResult.Failed) { renderingEngine.message(((ActionResult.Failed) result).getReason()); } if (shouldStop()) { break; } } if (state.isWin()) { renderingEngine.message(WIN_MESSAGE); } else { renderingEngine.message(GAME_EXIT_MESSAGE); } } protected ActionResult processAction(@NotNull Action action) { switch (action) { case Exit exit -> { shouldStop = true; return new ActionResult.Success(action); } case Undo undo -> { if (state.getUndoQuota().isPresent() && state.getUndoQuota().get() == 0) { return new ActionResult.Failed(action, UNDO_QUOTA_RUN_OUT); } state.undo(); return new ActionResult.Success(action); } case InvalidInput invalidInput -> { return new ActionResult.Failed(action, INVALID_INPUT_MESSAGE); } case Move move -> { var playerPositon = state.getPlayerPositionById(move.getInitiator()); if (playerPositon == null) { return new ActionResult.Failed(action, PLAYER_NOT_FOUND); } var nextPosition = move.nextPosition(playerPositon); var nextEntity = state.getEntity(nextPosition); switch (nextEntity) { case Empty empty -> { state.move(playerPositon, nextPosition); return new ActionResult.Success(action); } case Box box -> { if (move.getInitiator() != box.getPlayerId()) { return new ActionResult.Failed(action, \"You cannot move other players' boxes.\"); } var nextNextPosition = move.nextPosition(nextPosition); var nextNextEntity = state.getEntity(nextNextPosition); if (!(nextNextEntity instanceof Empty)) return new ActionResult.Failed(action, \"Cannot move box\"); state.move(nextPosition, nextNextPosition); state.move(playerPositon, nextPosition); state.checkpoint(); return new ActionResult.Success(action); } default -> { return new ActionResult.Failed(action, \"Invalid move\"); } } } default -> throw new IllegalStateException(\"Unexpected value: \" + action); } }",
        "label": "P"
    },
    "2247": {
        "dataset": "COMP 3021",
        "project": "pfyan",
        "bug_id": "11",
        "T": "void testHitAnotherPlayer() { String mapText = \"\"\" 233 ###### #A..@# #B...# #ab.@# ###### \"\"\"; final var testMap = TestHelper.parseGameMap(mapText); final var gameState = spy(new GameState(testMap)); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Move.Down(0)); verify(gameState, never()).move(any(), any()); }",
        "C": "public GameState(@NotNull GameMap map) { // this.gameMap = map; // this.originalMap = copyMap(); this.originalMap = map; this.gameMap = copyMap(map); this.undoQuotaLeft = map.getUndoLimit().get(); this.undoStack = new Stack<>(); } public Down(int initiator) { super(initiator); }",
        "label": "P"
    },
    "2248": {
        "dataset": "COMP 3021",
        "project": "pfyan",
        "bug_id": "12",
        "T": "void testUndoWithinQuota() { final var gameState = mock(GameState.class); when(gameState.getPlayerPositionById(anyInt())).thenReturn(Position.of(0, 0)); when(gameState.getUndoQuota()).thenReturn(Optional.of(1)); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Undo(0)); verify(gameState, times(1)).undo(); }",
        "C": "public Undo(int initiator) { super(initiator); }",
        "label": "P"
    },
    "2249": {
        "dataset": "COMP 3021",
        "project": "pfyan",
        "bug_id": "13",
        "T": "void testInvalidInput() { final var game = new SokobanGameForTesting(mock(GameState.class)); final var message = String.valueOf(new Random().nextLong()); final var action = new InvalidInput(-1, message); final var result = game.feedActionForProcessing(action); }",
        "C": "public InvalidInput(int initiator, @NotNull String message) { super(initiator); this.message = message; }",
        "label": "P"
    },
    "2250": {
        "dataset": "COMP 3021",
        "project": "pfyan",
        "bug_id": "14",
        "T": "void testUndoLimitParsing() { final var gameMap = TestHelper.parseGameMap(rectangularMap); }",
        "C": "",
        "label": "P"
    },
    "2251": {
        "dataset": "COMP 3021",
        "project": "pfyan",
        "bug_id": "15",
        "T": "void testWidthForNonRectangularMap() { final var gameMap = TestHelper.parseGameMap(nonRectangularMap); }",
        "C": "",
        "label": "P"
    },
    "2252": {
        "dataset": "COMP 3021",
        "project": "pfyan",
        "bug_id": "16",
        "T": "void testTwoPlayersMap() { final var twoPlayersMap = \"\"\" 233 ###### #A..@# #..B@# #....# #.a..# #..b.# ###### \"\"\"; final var gameMap = TestHelper.parseGameMap(twoPlayersMap); final var playerIds = gameMap.getPlayerIds(); final var expectedIds = new HashSet<Integer>(); expectedIds.add(0); expectedIds.add(1); }",
        "C": "public Set<Integer> getPlayerIds() { Set<Integer> playerIds = new HashSet<>(); for (int y = 0; y < this.height; y++) { for (int x = 0; x < this.width; x++) { if (this.gameMap.get(y).get(x) instanceof Player) playerIds.add(((Player) this.gameMap.get(y).get(x)).getId()); } } return playerIds; }",
        "label": "P"
    },
    "2253": {
        "dataset": "COMP 3021",
        "project": "pfyan",
        "bug_id": "17",
        "T": "void testMapWithoutPlayer() { final var invalidMap = \"\"\" 233 ### #.# ### \"\"\"; } // @Tag(TestKind.HIDDEN) // @Test // void testUnmatchedPlayersAndBoxes() { // final var invalidMap = \"\"\" // 233 // ###### // #A..@# // #...@# // #a.b@# // #.a.@# // #..a.# // ###### // \"\"\"; // assertThrowsExactly(IllegalArgumentException.class, () -> TestHelper.parseGameMap(invalidMap)); // }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); }",
        "label": "P"
    },
    "2254": {
        "dataset": "COMP 3021",
        "project": "pfyan",
        "bug_id": "18",
        "T": "void testManyPlayersMap() { final var manyPlayersMap = \"\"\" 233 ###### #A.P@@# #vCB@@# #.cpD@# #Ga.d@# #g.bV@# ###### \"\"\"; final var gameMap = TestHelper.parseGameMap(manyPlayersMap); final var playerIds = gameMap.getPlayerIds(); final var expectedIds = new HashSet<>(Arrays.asList( 0, 'P' - 'A', 'C' - 'A', 'B' - 'A', 'D' - 'A', 'G' - 'A', 'V' - 'A' )); }",
        "C": "public Set<Integer> getPlayerIds() { Set<Integer> playerIds = new HashSet<>(); for (int y = 0; y < this.height; y++) { for (int x = 0; x < this.width; x++) { if (this.gameMap.get(y).get(x) instanceof Player) playerIds.add(((Player) this.gameMap.get(y).get(x)).getId()); } } return playerIds; }",
        "label": "P"
    },
    "2255": {
        "dataset": "COMP 3021",
        "project": "pfyan",
        "bug_id": "19",
        "T": "void testHeightForNonRectangularMap() { final var gameMap = TestHelper.parseGameMap(nonRectangularMap); }",
        "C": "",
        "label": "P"
    },
    "2256": {
        "dataset": "COMP 3021",
        "project": "pfyan",
        "bug_id": "20",
        "T": "void testDuplicatedPlayers() { final var invalidMap = \"\"\" 233 ###### #A..@# #..A@# #....# #.a..# #..b.# ###### \"\"\"; }",
        "C": "",
        "label": "P"
    },
    "2257": {
        "dataset": "COMP 3021",
        "project": "pfyan",
        "bug_id": "21",
        "T": "void testParseMapWithoutUndoLimit() { final var invalidMap = String.join(\"\\n\", rectangularMap.lines().skip(1).toList()); }",
        "C": "",
        "label": "P"
    },
    "2258": {
        "dataset": "COMP 3021",
        "project": "pfyan",
        "bug_id": "22",
        "T": "void testInsufficientDestinations() { final var invalidMap = \"\"\" 233 ###### #A..@# #...@# #a...# #.a..# #..a.# ###### \"\"\"; }",
        "C": "",
        "label": "P"
    },
    "2259": {
        "dataset": "COMP 3021",
        "project": "pfyan",
        "bug_id": "23",
        "T": "void testSuperLargeMap() { try { new GameMap(Integer.MAX_VALUE, Integer.MAX_VALUE, Collections.emptySet(), 0); } catch (OutOfMemoryError e) { throw new RuntimeException(e); } }); }",
        "C": "public GameMap(int maxWidth, int maxHeight, Set<Position> destinations, int undoLimit) { this.undoLimit = undoLimit; this.width = maxWidth; this.height = maxHeight; this.destinations = destinations; this.gameMap = new ArrayList<>(); for (int y = 0; y < this.height; y++) { this.gameMap.add(new ArrayList<>()); for (int x = 0; x < this.width; x++) { this.gameMap.get(y).add(null); } } } /** * Parses the map from a string representation. * The first line is undo limit. * Starting from the second line, the game map is represented as follows, * <li># represents a {@link Wall}</li> * <li>@ represents a box destination.</li> * <li>Any upper-case letter represents a {@link Player}.</li> * <li> * Any lower-case letter represents a {@link Box} that is only movable by the player with the corresponding upper-case letter. * For instance, box \"a\" can only be moved by player \"A\" and not movable by player \"B\". * </li> * <li>. represents an {@link Empty} position in the map, meaning there is no player or box currently at this position.</li> * <p> * Notes: * <li> * There can be at most 26 players. * All implementations of classes in the hk.ust.comp3021.game package should support up to 26 players. * </li> * <li> * For simplicity, we assume the given map is bounded with a closed boundary. * There is no need to check this point. * </li> * <li> * Example maps can be found in \"src/main/resources\". * </li> * * @param mapText The string representation. * @return The parsed GameMap object. * @throws IllegalArgumentException if undo limit is negative but not -1. * @throws IllegalArgumentException if there are multiple same upper-case letters, i.e., one player can only exist at one position. * @throws IllegalArgumentException if there are no players in the map. * @throws IllegalArgumentException if the number of boxes is not equal to the number of box destinations. * @throws IllegalArgumentException if there are boxes whose {@link Box#getPlayerId()} public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); }",
        "label": "F"
    },
    "2260": {
        "dataset": "COMP 3021",
        "project": "pfyan",
        "bug_id": "24",
        "T": "void testInvalidUndoLimit() { final var invalidMap = \"\"\" -233 ###### #A..@# #...@# #a.b@# #.a.@# #..a.# ###### \"\"\"; }",
        "C": "",
        "label": "P"
    },
    "2261": {
        "dataset": "COMP 3021",
        "project": "pfyan",
        "bug_id": "25",
        "T": "void testEmptyMap() { final var invalidMap = \"\"; }",
        "C": "",
        "label": "P"
    },
    "2262": {
        "dataset": "COMP 3021",
        "project": "pfyan",
        "bug_id": "26",
        "T": "void testMove(String input, String name, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); } private InputStream fixValueStream(String content) { final var bytes = content.getBytes(StandardCharsets.UTF_8); return new ByteArrayInputStream(bytes); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); }",
        "label": "P"
    },
    "2263": {
        "dataset": "COMP 3021",
        "project": "pfyan",
        "bug_id": "27",
        "T": "void testMove(String input, String name, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); } private InputStream fixValueStream(String content) { final var bytes = content.getBytes(StandardCharsets.UTF_8); return new ByteArrayInputStream(bytes); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); }",
        "label": "P"
    },
    "2264": {
        "dataset": "COMP 3021",
        "project": "pfyan",
        "bug_id": "28",
        "T": "void testMove(String input, String name, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); } private InputStream fixValueStream(String content) { final var bytes = content.getBytes(StandardCharsets.UTF_8); return new ByteArrayInputStream(bytes); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); }",
        "label": "P"
    },
    "2265": {
        "dataset": "COMP 3021",
        "project": "pfyan",
        "bug_id": "29",
        "T": "void testMove(String input, String name, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); } private InputStream fixValueStream(String content) { final var bytes = content.getBytes(StandardCharsets.UTF_8); return new ByteArrayInputStream(bytes); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); }",
        "label": "P"
    },
    "2266": {
        "dataset": "COMP 3021",
        "project": "pfyan",
        "bug_id": "30",
        "T": "void testMove(String input, String name, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); } private InputStream fixValueStream(String content) { final var bytes = content.getBytes(StandardCharsets.UTF_8); return new ByteArrayInputStream(bytes); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); }",
        "label": "P"
    },
    "2267": {
        "dataset": "COMP 3021",
        "project": "pfyan",
        "bug_id": "31",
        "T": "void testMove(String input, String name, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); } private InputStream fixValueStream(String content) { final var bytes = content.getBytes(StandardCharsets.UTF_8); return new ByteArrayInputStream(bytes); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); }",
        "label": "P"
    },
    "2268": {
        "dataset": "COMP 3021",
        "project": "pfyan",
        "bug_id": "32",
        "T": "void testMove(String input, String name, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); } private InputStream fixValueStream(String content) { final var bytes = content.getBytes(StandardCharsets.UTF_8); return new ByteArrayInputStream(bytes); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); }",
        "label": "P"
    },
    "2269": {
        "dataset": "COMP 3021",
        "project": "pfyan",
        "bug_id": "33",
        "T": "void testMove(String input, String name, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); } private InputStream fixValueStream(String content) { final var bytes = content.getBytes(StandardCharsets.UTF_8); return new ByteArrayInputStream(bytes); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); }",
        "label": "P"
    },
    "2270": {
        "dataset": "COMP 3021",
        "project": "pfyan",
        "bug_id": "34",
        "T": "void testUndo(String input, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); }",
        "label": "P"
    },
    "2271": {
        "dataset": "COMP 3021",
        "project": "pfyan",
        "bug_id": "35",
        "T": "void testInvalidInput() { final var inputStream = fixValueStream(\"blah blah\"); final var inputEngine = new TerminalInputEngine(inputStream); final var action = inputEngine.fetchAction(); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); }",
        "label": "P"
    },
    "2272": {
        "dataset": "COMP 3021",
        "project": "pfyan",
        "bug_id": "36",
        "T": "void testUndoWhenThereIsNoMove() { final var gameState = new GameState(TestHelper.parseGameMap(\"\"\" 233 ###### #A.a@# #..a@# ###### \"\"\" )); gameState.undo(); } private Entity generateEntity(int key) { return switch (key % 4) { case 0 -> new Box(0); case 1 -> new Empty(); case 2 -> new Player(0); case 3 -> new Wall(); default -> throw new ShouldNotReachException(); }; }",
        "C": "public GameState(@NotNull GameMap map) { // this.gameMap = map; // this.originalMap = copyMap(); this.originalMap = map; this.gameMap = copyMap(map); this.undoQuotaLeft = map.getUndoLimit().get(); this.undoStack = new Stack<>(); } public void undo() { if (undoStack.empty()) { pasteMap(copyMap(originalMap)); } else { undoStack.pop(); pasteMap(undoStack.empty() ? copyMap(originalMap) : undoStack.peek()); undoQuotaLeft--; } } /** * Get the maximum width of the game map. * This should be the same as that in {@link GameMap} public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public Box(int playerId) { this.playerId = playerId; } public Player(int id) { this.id = id; } public ShouldNotReachException() { super(\"This branch should not be reached.\"); }",
        "label": "P"
    },
    "2273": {
        "dataset": "COMP 3021",
        "project": "pfyan",
        "bug_id": "37",
        "T": "void testGetUndoUnlimited() { final var gameState = new GameState(TestHelper.parseGameMap(\"\"\" -1 ###### #.Aa@# #..a@# ###### \"\"\" )); }",
        "C": "public GameState(@NotNull GameMap map) { // this.gameMap = map; // this.originalMap = copyMap(); this.originalMap = map; this.gameMap = copyMap(map); this.undoQuotaLeft = map.getUndoLimit().get(); this.undoStack = new Stack<>(); }",
        "label": "F"
    },
    "2274": {
        "dataset": "COMP 3021",
        "project": "pfyan",
        "bug_id": "38",
        "T": "void testMapCopying() { final var maxWidth = 2333; final var maxHeight = 2333; final var random = new Random(); final var randomEntities = Stream.generate(() -> Position.of(random.nextInt(maxWidth), random.nextInt(maxHeight))) .distinct() .limit(100) .collect(Collectors.toMap(Function.identity(), it -> generateEntity(it.x()))); final var firstPos = randomEntities.keySet().stream().findFirst(); final var gameMap = new GameMap(maxWidth, maxHeight, Collections.singleton(firstPos.get()), 233); randomEntities.forEach(gameMap::putEntity); final var gameState = new GameState(gameMap); final var randomPosition = randomEntities.keySet().stream().findAny(); gameMap.putEntity(randomPosition.get(), new Empty()); randomEntities.forEach((p, e) -> assertEquals(e, gameState.getEntity(p))); }",
        "C": "public static @NotNull Position of(int x, int y) { return new Position(x, y); } public GameMap(int maxWidth, int maxHeight, Set<Position> destinations, int undoLimit) { this.undoLimit = undoLimit; this.width = maxWidth; this.height = maxHeight; this.destinations = destinations; this.gameMap = new ArrayList<>(); for (int y = 0; y < this.height; y++) { this.gameMap.add(new ArrayList<>()); for (int x = 0; x < this.width; x++) { this.gameMap.get(y).add(null); } } } /** * Parses the map from a string representation. * The first line is undo limit. * Starting from the second line, the game map is represented as follows, * <li># represents a {@link Wall}</li> * <li>@ represents a box destination.</li> * <li>Any upper-case letter represents a {@link Player}.</li> * <li> * Any lower-case letter represents a {@link Box} that is only movable by the player with the corresponding upper-case letter. * For instance, box \"a\" can only be moved by player \"A\" and not movable by player \"B\". * </li> * <li>. represents an {@link Empty} position in the map, meaning there is no player or box currently at this position.</li> * <p> * Notes: * <li> * There can be at most 26 players. * All implementations of classes in the hk.ust.comp3021.game package should support up to 26 players. * </li> * <li> * For simplicity, we assume the given map is bounded with a closed boundary. * There is no need to check this point. * </li> * <li> * Example maps can be found in \"src/main/resources\". * </li> * * @param mapText The string representation. * @return The parsed GameMap object. * @throws IllegalArgumentException if undo limit is negative but not -1. * @throws IllegalArgumentException if there are multiple same upper-case letters, i.e., one player can only exist at one position. * @throws IllegalArgumentException if there are no players in the map. * @throws IllegalArgumentException if the number of boxes is not equal to the number of box destinations. * @throws IllegalArgumentException if there are boxes whose {@link Box#getPlayerId()} public GameState(@NotNull GameMap map) { // this.gameMap = map; // this.originalMap = copyMap(); this.originalMap = map; this.gameMap = copyMap(map); this.undoQuotaLeft = map.getUndoLimit().get(); this.undoStack = new Stack<>(); } public void putEntity(Position position, Entity entity) { this.gameMap.get(position.y()).set(position.x(), entity); } public @Nullable Entity getEntity(@NotNull Position position) { return gameMap.get(position.y()).get(position.x()); } /** * Get all box destination positions as a set in the game map. * This should be the same as that in {@link GameMap}",
        "label": "P"
    },
    "2275": {
        "dataset": "COMP 3021",
        "project": "pfyan",
        "bug_id": "39",
        "T": "void testUndoWhenThereIsMoveButNoCheckpoint() { final var gameState = new GameState(TestHelper.parseGameMap(\"\"\" 233 ###### #A.a@# #..a@# ###### \"\"\" )); gameState.move(Position.of(1, 1), Position.of(2, 1)); gameState.undo(); }",
        "C": "public GameState(@NotNull GameMap map) { // this.gameMap = map; // this.originalMap = copyMap(); this.originalMap = map; this.gameMap = copyMap(map); this.undoQuotaLeft = map.getUndoLimit().get(); this.undoStack = new Stack<>(); } public void move(Position from, Position to) { var fromEntity = getEntity(from); var toEntity = getEntity(to); gameMap.get(from.y()).set(from.x(), toEntity); gameMap.get(to.y()).set(to.x(), fromEntity); } /** * Record a checkpoint of the game state, including: * <li>All current positions of entities in the game map.</li> * <li>Current undo quota</li> * <p> * Checkpoint is used in {@link GameState#undo()} public static @NotNull Position of(int x, int y) { return new Position(x, y); } public void undo() { if (undoStack.empty()) { pasteMap(copyMap(originalMap)); } else { undoStack.pop(); pasteMap(undoStack.empty() ? copyMap(originalMap) : undoStack.peek()); undoQuotaLeft--; } } /** * Get the maximum width of the game map. * This should be the same as that in {@link GameMap}",
        "label": "P"
    },
    "2276": {
        "dataset": "COMP 3021",
        "project": "pfyan",
        "bug_id": "40",
        "T": "void testGameExit() { final var gameState = mock(GameState.class); final var inputEngine = mock(TerminalInputEngine.class); final var renderingEngine = mock(TerminalRenderingEngine.class); when(gameState.isWin()).thenReturn(false, false, false); when(inputEngine.fetchAction()) .thenReturn(new InvalidInput(0, \"\"), new InvalidInput(0, \"\"), new Exit(0)); final var game = new TerminalSokobanGame(gameState, inputEngine, renderingEngine); game.run(); verify(renderingEngine, atLeastOnce()).message(any()); }",
        "C": "public InvalidInput(int initiator, @NotNull String message) { super(initiator); this.message = message; } public Exit(int initiator) { super(initiator); } public TerminalSokobanGame(GameState gameState, TerminalInputEngine inputEngine, TerminalRenderingEngine renderingEngine) { super(gameState); this.inputEngine = inputEngine; this.renderingEngine = renderingEngine; // Check the number of players if (gameState.getAllPlayerPositions().size() > 2) { throw new IllegalArgumentException(\"TerminalSokobanGame only support at most two players.\"); } } public void run() { // TODO // throw new NotImplementedException(); renderingEngine.message(GAME_READY_MESSAGE); renderingEngine.render(state); while (true) { var undoQuota = state.getUndoQuota(); if (!undoQuota.isPresent()) { renderingEngine.message(UNDO_QUOTA_TEMPLATE.formatted(UNDO_QUOTA_UNLIMITED)); } else { renderingEngine.message(UNDO_QUOTA_TEMPLATE.formatted(undoQuota.get())); } var action = inputEngine.fetchAction(); var result = processAction(action); renderingEngine.render(state); if (result instanceof ActionResult.Failed) { renderingEngine.message(((ActionResult.Failed) result).getReason()); } if (shouldStop()) { break; } } if (state.isWin()) { renderingEngine.message(WIN_MESSAGE); } else { renderingEngine.message(GAME_EXIT_MESSAGE); } }",
        "label": "P"
    },
    "2277": {
        "dataset": "COMP 3021",
        "project": "pfyan",
        "bug_id": "41",
        "T": "void testGameWin() { final var gameState = mock(GameState.class); final var inputEngine = mock(TerminalInputEngine.class); final var renderingEngine = mock(TerminalRenderingEngine.class); when(gameState.isWin()).thenReturn(false, false, false, true); when(inputEngine.fetchAction()) .thenReturn(new InvalidInput(0, \"\")); final var game = new TerminalSokobanGame(gameState, inputEngine, renderingEngine); game.run(); verify(gameState, atLeastOnce()).isWin(); verify(renderingEngine, atLeastOnce()).message(any()); }",
        "C": "public InvalidInput(int initiator, @NotNull String message) { super(initiator); this.message = message; } public TerminalSokobanGame(GameState gameState, TerminalInputEngine inputEngine, TerminalRenderingEngine renderingEngine) { super(gameState); this.inputEngine = inputEngine; this.renderingEngine = renderingEngine; // Check the number of players if (gameState.getAllPlayerPositions().size() > 2) { throw new IllegalArgumentException(\"TerminalSokobanGame only support at most two players.\"); } } public void run() { // TODO // throw new NotImplementedException(); renderingEngine.message(GAME_READY_MESSAGE); renderingEngine.render(state); while (true) { var undoQuota = state.getUndoQuota(); if (!undoQuota.isPresent()) { renderingEngine.message(UNDO_QUOTA_TEMPLATE.formatted(UNDO_QUOTA_UNLIMITED)); } else { renderingEngine.message(UNDO_QUOTA_TEMPLATE.formatted(undoQuota.get())); } var action = inputEngine.fetchAction(); var result = processAction(action); renderingEngine.render(state); if (result instanceof ActionResult.Failed) { renderingEngine.message(((ActionResult.Failed) result).getReason()); } if (shouldStop()) { break; } } if (state.isWin()) { renderingEngine.message(WIN_MESSAGE); } else { renderingEngine.message(GAME_EXIT_MESSAGE); } }",
        "label": "P"
    },
    "2278": {
        "dataset": "COMP 3021",
        "project": "pfyan",
        "bug_id": "42",
        "T": "void testMoreThanTwoPlayers() { final var gameState = mock(GameState.class); final var inputEngine = mock(TerminalInputEngine.class); final var renderingEngine = mock(TerminalRenderingEngine.class); when(gameState.getAllPlayerPositions()).thenReturn(new HashSet<>(Arrays.asList(Position.of(1, 1), Position.of(1, 2), Position.of(1, 3)))); }",
        "C": "public static @NotNull Position of(int x, int y) { return new Position(x, y); }",
        "label": "P"
    },
    "2279": {
        "dataset": "COMP 3021",
        "project": "jloac",
        "bug_id": "0",
        "T": "void moveUp() { Position.of(233, 232), new Move.Up(-1).nextPosition(pos) ); }",
        "C": "public static @NotNull Position of(int x, int y) { return new Position(x, y); } public Up(int initiator) { super(initiator); }",
        "label": "P"
    },
    "2280": {
        "dataset": "COMP 3021",
        "project": "jloac",
        "bug_id": "1",
        "T": "void moveDown() { Position.of(233, 234), new Move.Down(-1).nextPosition(pos) ); }",
        "C": "public static @NotNull Position of(int x, int y) { return new Position(x, y); } public Down(int initiator) { super(initiator); }",
        "label": "P"
    },
    "2281": {
        "dataset": "COMP 3021",
        "project": "jloac",
        "bug_id": "2",
        "T": "void moveRight() { Position.of(234, 233), new Move.Right(-1).nextPosition(pos) ); }",
        "C": "public static @NotNull Position of(int x, int y) { return new Position(x, y); } public Right(int initiator) { super(initiator); }",
        "label": "P"
    },
    "2282": {
        "dataset": "COMP 3021",
        "project": "jloac",
        "bug_id": "3",
        "T": "void testExceedingUndoQuota() { final var gameState = mock(GameState.class); when(gameState.getPlayerPositionById(anyInt())).thenReturn(Position.of(0, 0)); when(gameState.getUndoQuota()).thenReturn(Optional.of(0)); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Undo(0)); }",
        "C": "public Undo(int initiator) { super(initiator); }",
        "label": "P"
    },
    "2283": {
        "dataset": "COMP 3021",
        "project": "jloac",
        "bug_id": "4",
        "T": "void testExit() { final var gameState = mock(GameState.class); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Exit(0)); }",
        "C": "public Exit(int initiator) { super(initiator); }",
        "label": "P"
    },
    "2284": {
        "dataset": "COMP 3021",
        "project": "jloac",
        "bug_id": "5",
        "T": "void testUndoUnlimited() { final var gameState = mock(GameState.class); when(gameState.getPlayerPositionById(anyInt())).thenReturn(Position.of(0, 0)); when(gameState.getUndoQuota()).thenReturn(Optional.empty()); final var game = new SokobanGameForTesting(gameState); for (int i = 0; i < 10000; i++) { final var result = game.feedActionForProcessing(new Undo(0)); } verify(gameState, times(10000)).undo(); }",
        "C": "public TerminalRenderingEngine(PrintStream outputSteam) { this.outputSteam = outputSteam; } public Undo(int initiator) { super(initiator); }",
        "label": "P"
    },
    "2285": {
        "dataset": "COMP 3021",
        "project": "jloac",
        "bug_id": "6",
        "T": "void testPushOtherPlayerBox() { String mapText = \"\"\" 233 ###### #AB.@# #b.a.# #@...# ###### \"\"\"; final var testMap = TestHelper.parseGameMap(mapText); final var gameState = spy(new GameState(testMap)); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Move.Down(0)); verify(gameState, never()).move(any(), any()); }",
        "C": "public GameState(@NotNull GameMap map) { // TODO ok but is the undonumber ok? this.gameHistory = new ArrayDeque<Map<Position, Entity>>(); if(map.getUndoLimit().isEmpty()){ this.undoNumber = -1; }else{ this.undoNumber = map.getUndoLimit().get(); } this.destinations = map.getDestinations(); this.maxHeight = map.getMaxHeight(); this.maxWidth = map.getMaxWidth(); //throw new RuntimeException(String.valueOf(map.getMapLocation().size())); this.gameHistory.add(map.getMapLocation()); this.tempMove = new HashMap<Position, Entity>(gameHistory.peek()); //throw new NotImplementedException(); } public Down(int initiator) { super(initiator); }",
        "label": "P"
    },
    "2286": {
        "dataset": "COMP 3021",
        "project": "jloac",
        "bug_id": "7",
        "T": "void testMoveNonExistingPlayer() { String mapText = \"\"\" 233 ###### #A..@# #a...# ##...# ###### \"\"\"; final var testMap = TestHelper.parseGameMap(mapText); final var gameState = spy(new GameState(testMap)); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Move.Down(23)); }",
        "C": "public GameState(@NotNull GameMap map) { // TODO ok but is the undonumber ok? this.gameHistory = new ArrayDeque<Map<Position, Entity>>(); if(map.getUndoLimit().isEmpty()){ this.undoNumber = -1; }else{ this.undoNumber = map.getUndoLimit().get(); } this.destinations = map.getDestinations(); this.maxHeight = map.getMaxHeight(); this.maxWidth = map.getMaxWidth(); //throw new RuntimeException(String.valueOf(map.getMapLocation().size())); this.gameHistory.add(map.getMapLocation()); this.tempMove = new HashMap<Position, Entity>(gameHistory.peek()); //throw new NotImplementedException(); } public Down(int initiator) { super(initiator); }",
        "label": "P"
    },
    "2287": {
        "dataset": "COMP 3021",
        "project": "jloac",
        "bug_id": "8",
        "T": "void testCheckpointWhenNeed() { final var gameState = spy(new GameState(TestHelper.parseGameMap(\"\"\" 233 ###### #.Aa@# #..a@# ###### \"\"\" ))); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Move.Right(0)); verify(gameState, times(1)).checkpoint(); }",
        "C": "public GameState(@NotNull GameMap map) { // TODO ok but is the undonumber ok? this.gameHistory = new ArrayDeque<Map<Position, Entity>>(); if(map.getUndoLimit().isEmpty()){ this.undoNumber = -1; }else{ this.undoNumber = map.getUndoLimit().get(); } this.destinations = map.getDestinations(); this.maxHeight = map.getMaxHeight(); this.maxWidth = map.getMaxWidth(); //throw new RuntimeException(String.valueOf(map.getMapLocation().size())); this.gameHistory.add(map.getMapLocation()); this.tempMove = new HashMap<Position, Entity>(gameHistory.peek()); //throw new NotImplementedException(); } public Right(int initiator) { super(initiator); }",
        "label": "P"
    },
    "2288": {
        "dataset": "COMP 3021",
        "project": "jloac",
        "bug_id": "9",
        "T": "void testPushBoxAgainstWall() { String mapText = \"\"\" 233 ###### #A..@# #a...# ##...# ###### \"\"\"; final var testMap = TestHelper.parseGameMap(mapText); final var gameState = spy(new GameState(testMap)); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Move.Down(0)); verify(gameState, never()).move(any(), any()); }",
        "C": "public GameState(@NotNull GameMap map) { // TODO ok but is the undonumber ok? this.gameHistory = new ArrayDeque<Map<Position, Entity>>(); if(map.getUndoLimit().isEmpty()){ this.undoNumber = -1; }else{ this.undoNumber = map.getUndoLimit().get(); } this.destinations = map.getDestinations(); this.maxHeight = map.getMaxHeight(); this.maxWidth = map.getMaxWidth(); //throw new RuntimeException(String.valueOf(map.getMapLocation().size())); this.gameHistory.add(map.getMapLocation()); this.tempMove = new HashMap<Position, Entity>(gameHistory.peek()); //throw new NotImplementedException(); } public Down(int initiator) { super(initiator); }",
        "label": "P"
    },
    "2289": {
        "dataset": "COMP 3021",
        "project": "jloac",
        "bug_id": "10",
        "T": "void testCheckpointWhenNotNeed() { final var gameState = spy(new GameState(TestHelper.parseGameMap(\"\"\" 233 ###### #A.a@# #..a@# ###### \"\"\" ))); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Move.Right(0)); verify(gameState, never()).checkpoint(); } private static class SokobanGameForTesting extends AbstractSokobanGame { protected SokobanGameForTesting(GameState gameState) { super(gameState); } @Override public void run() { } public ActionResult feedActionForProcessing(Action action) { return processAction(action); } }",
        "C": "public GameState(@NotNull GameMap map) { // TODO ok but is the undonumber ok? this.gameHistory = new ArrayDeque<Map<Position, Entity>>(); if(map.getUndoLimit().isEmpty()){ this.undoNumber = -1; }else{ this.undoNumber = map.getUndoLimit().get(); } this.destinations = map.getDestinations(); this.maxHeight = map.getMaxHeight(); this.maxWidth = map.getMaxWidth(); //throw new RuntimeException(String.valueOf(map.getMapLocation().size())); this.gameHistory.add(map.getMapLocation()); this.tempMove = new HashMap<Position, Entity>(gameHistory.peek()); //throw new NotImplementedException(); } public Right(int initiator) { super(initiator); } public void run() { // TODO renderingEngine.message(\"Sokoban game is ready.\"); renderingEngine.render(this.state); if(this.state.getUndoQuota().equals(Optional.empty())){ renderingEngine.message(\"Unlimited\"); }else{ renderingEngine.message(\"Undo Quota: \" + this.state.getUndoQuota().get()); } while(!this.shouldStop()) { Action userInput = inputEngine.fetchAction(); ActionResult result = this.processAction(userInput); if(result instanceof ActionResult.Failed){ renderingEngine.message(((ActionResult.Failed) result).getReason()); } if(this.state.isWin()){ break; } renderingEngine.render(this.state); if(this.state.getUndoQuota().equals(Optional.empty())){ renderingEngine.message(\"Unlimited\"); }else{ renderingEngine.message(\"Undo Quota: \" + this.state.getUndoQuota().get()); } } renderingEngine.message(\"Game exits.\"); if(this.state.isWin()){ renderingEngine.message(\"You win.\"); } //1. render map //2. get user input (fetch action) //3. check if valid //4. render map // // //throw new NotImplementedException(); } protected ActionResult processAction(@NotNull Action action) { // TODO ok ActionResult toBeReturned = switch(action){ case Move m ->{ // if(state.getPlayerPositionById(m.getInitiator()) == null){ yield new ActionResult.Failed(m, \"Player not found.\"); } Position currPosition = state.getPlayerPositionById(m.getInitiator());//position of current player Entity pushing = state.getEntity(m.nextPosition(currPosition)); //object player is pushing // System.out.println(currPosition.x()); // System.out.println(currPosition.y()); // System.out.println(m.nextPosition(currPosition).x()); // System.out.println(m.nextPosition(currPosition).y()); switch(pushing){ case Wall w ->{ yield new ActionResult.Failed(m, \"You hit a wall.\"); } case Player p ->{ yield new ActionResult.Failed(m, \"You hit another player.\"); } case Box b ->{ if(b.getPlayerId() == m.getInitiator()){ Entity resultingDestination = state.getEntity(m.nextPosition(m.nextPosition(currPosition))); //final location of object if(resultingDestination instanceof Empty){ state.move(m.nextPosition(currPosition), m.nextPosition(m.nextPosition(currPosition)));//furthest object state.move(currPosition, m.nextPosition(currPosition)); //move player forward state.checkpoint(); //save moved box yield new ActionResult.Success(m); }else{ yield new ActionResult.Failed(m, \"Failed to push the box\"); } }else{ yield new ActionResult.Failed(m, \"You cannot move other players' boxes.\"); } } case Empty e ->{ state.move(currPosition, m.nextPosition(currPosition)); //move player forward yield new ActionResult.Success(m); } default -> new ActionResult.Failed(m, \"SHOULD NOT REACH HERE, ERROR WITH ABSTRACTSOKOBANGAME.JAVA\"); } yield new ActionResult.Failed(m, \"SHOULD NOT REACH HERE, ERROR WITH OUTER SWITCH ABSTRACTSOKOBANGAME.JAVA\"); } case Exit e -> { this.stop = true; yield new ActionResult.Success(e); } case InvalidInput i ->{ yield new ActionResult.Failed(i, \"Invalid Input.\"); } case Undo u ->{ if(!state.getUndoQuota().isPresent() || state.getUndoQuota().get() > 0){ state.undo(); yield new ActionResult.Success(u); }else{ yield new ActionResult.Failed(u, \"You have run out of your undo quota.\"); } } }; return toBeReturned; //throw new NotImplementedException(); }",
        "label": "P"
    },
    "2290": {
        "dataset": "COMP 3021",
        "project": "jloac",
        "bug_id": "11",
        "T": "void testHitAnotherPlayer() { String mapText = \"\"\" 233 ###### #A..@# #B...# #ab.@# ###### \"\"\"; final var testMap = TestHelper.parseGameMap(mapText); final var gameState = spy(new GameState(testMap)); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Move.Down(0)); verify(gameState, never()).move(any(), any()); }",
        "C": "public GameState(@NotNull GameMap map) { // TODO ok but is the undonumber ok? this.gameHistory = new ArrayDeque<Map<Position, Entity>>(); if(map.getUndoLimit().isEmpty()){ this.undoNumber = -1; }else{ this.undoNumber = map.getUndoLimit().get(); } this.destinations = map.getDestinations(); this.maxHeight = map.getMaxHeight(); this.maxWidth = map.getMaxWidth(); //throw new RuntimeException(String.valueOf(map.getMapLocation().size())); this.gameHistory.add(map.getMapLocation()); this.tempMove = new HashMap<Position, Entity>(gameHistory.peek()); //throw new NotImplementedException(); } public Down(int initiator) { super(initiator); }",
        "label": "P"
    },
    "2291": {
        "dataset": "COMP 3021",
        "project": "jloac",
        "bug_id": "12",
        "T": "void testUndoWithinQuota() { final var gameState = mock(GameState.class); when(gameState.getPlayerPositionById(anyInt())).thenReturn(Position.of(0, 0)); when(gameState.getUndoQuota()).thenReturn(Optional.of(1)); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Undo(0)); verify(gameState, times(1)).undo(); }",
        "C": "public Undo(int initiator) { super(initiator); }",
        "label": "P"
    },
    "2292": {
        "dataset": "COMP 3021",
        "project": "jloac",
        "bug_id": "13",
        "T": "void testInvalidInput() { final var game = new SokobanGameForTesting(mock(GameState.class)); final var message = String.valueOf(new Random().nextLong()); final var action = new InvalidInput(-1, message); final var result = game.feedActionForProcessing(action); }",
        "C": "public InvalidInput(int initiator, @NotNull String message) { super(initiator); this.message = message; }",
        "label": "P"
    },
    "2293": {
        "dataset": "COMP 3021",
        "project": "jloac",
        "bug_id": "14",
        "T": "void testUndoLimitParsing() { final var gameMap = TestHelper.parseGameMap(rectangularMap); }",
        "C": "",
        "label": "P"
    },
    "2294": {
        "dataset": "COMP 3021",
        "project": "jloac",
        "bug_id": "15",
        "T": "void testWidthForNonRectangularMap() { final var gameMap = TestHelper.parseGameMap(nonRectangularMap); }",
        "C": "",
        "label": "P"
    },
    "2295": {
        "dataset": "COMP 3021",
        "project": "jloac",
        "bug_id": "16",
        "T": "void testTwoPlayersMap() { final var twoPlayersMap = \"\"\" 233 ###### #A..@# #..B@# #....# #.a..# #..b.# ###### \"\"\"; final var gameMap = TestHelper.parseGameMap(twoPlayersMap); final var playerIds = gameMap.getPlayerIds(); final var expectedIds = new HashSet<Integer>(); expectedIds.add(0); expectedIds.add(1); }",
        "C": "public Set<Integer> getPlayerIds() { // TODO ok return this.playerIds; //throw new NotImplementedException(); }",
        "label": "P"
    },
    "2296": {
        "dataset": "COMP 3021",
        "project": "jloac",
        "bug_id": "17",
        "T": "void testMapWithoutPlayer() { final var invalidMap = \"\"\" 233 ### #.# ### \"\"\"; } // @Tag(TestKind.HIDDEN) // @Test // void testUnmatchedPlayersAndBoxes() { // final var invalidMap = \"\"\" // 233 // ###### // #A..@# // #...@# // #a.b@# // #.a.@# // #..a.# // ###### // \"\"\"; // assertThrowsExactly(IllegalArgumentException.class, () -> TestHelper.parseGameMap(invalidMap)); // }",
        "C": "public TerminalRenderingEngine(PrintStream outputSteam) { this.outputSteam = outputSteam; }",
        "label": "P"
    },
    "2297": {
        "dataset": "COMP 3021",
        "project": "jloac",
        "bug_id": "18",
        "T": "void testManyPlayersMap() { final var manyPlayersMap = \"\"\" 233 ###### #A.P@@# #vCB@@# #.cpD@# #Ga.d@# #g.bV@# ###### \"\"\"; final var gameMap = TestHelper.parseGameMap(manyPlayersMap); final var playerIds = gameMap.getPlayerIds(); final var expectedIds = new HashSet<>(Arrays.asList( 0, 'P' - 'A', 'C' - 'A', 'B' - 'A', 'D' - 'A', 'G' - 'A', 'V' - 'A' )); }",
        "C": "public Set<Integer> getPlayerIds() { // TODO ok return this.playerIds; //throw new NotImplementedException(); }",
        "label": "P"
    },
    "2298": {
        "dataset": "COMP 3021",
        "project": "jloac",
        "bug_id": "19",
        "T": "void testHeightForNonRectangularMap() { final var gameMap = TestHelper.parseGameMap(nonRectangularMap); }",
        "C": "",
        "label": "P"
    },
    "2299": {
        "dataset": "COMP 3021",
        "project": "jloac",
        "bug_id": "20",
        "T": "void testDuplicatedPlayers() { final var invalidMap = \"\"\" 233 ###### #A..@# #..A@# #....# #.a..# #..b.# ###### \"\"\"; }",
        "C": "",
        "label": "P"
    },
    "2300": {
        "dataset": "COMP 3021",
        "project": "jloac",
        "bug_id": "21",
        "T": "void testParseMapWithoutUndoLimit() { final var invalidMap = String.join(\"\\n\", rectangularMap.lines().skip(1).toList()); }",
        "C": "",
        "label": "P"
    },
    "2301": {
        "dataset": "COMP 3021",
        "project": "jloac",
        "bug_id": "22",
        "T": "void testInsufficientDestinations() { final var invalidMap = \"\"\" 233 ###### #A..@# #...@# #a...# #.a..# #..a.# ###### \"\"\"; }",
        "C": "",
        "label": "P"
    },
    "2302": {
        "dataset": "COMP 3021",
        "project": "jloac",
        "bug_id": "23",
        "T": "void testSuperLargeMap() { try { new GameMap(Integer.MAX_VALUE, Integer.MAX_VALUE, Collections.emptySet(), 0); } catch (OutOfMemoryError e) { throw new RuntimeException(e); } }); }",
        "C": "public GameMap(int maxWidth, int maxHeight, Set<Position> destinations, int undoLimit) { // TODO ok this.maxWidth = maxWidth; this.maxHeight = maxHeight; this.destinations = destinations; this.undoLimit = undoLimit; this.playerIds = new HashSet<Integer>(); this.mapLocation = new HashMap<Position, Entity>(); this.boxCount = 0; this.accountedBoxes = new HashMap<Integer, Integer>(); //throw new NotImplementedException(); } /** * Parses the map from a string representation. * The first line is undo limit. * Starting from the second line, the game map is represented as follows, * <li># represents a {@link Wall}</li> * <li>@ represents a box destination.</li> * <li>Any upper-case letter represents a {@link Player}.</li> * <li> * Any lower-case letter represents a {@link Box} that is only movable by the player with the corresponding upper-case letter. * For instance, box \"a\" can only be moved by player \"A\" and not movable by player \"B\". * </li>\u00b7 * <li>. represents an {@link Empty} position in the map, meaning there is no player or box currently at this position.</li> * <p> * Notes: * <li> * There can be at most 26 players. * All implementations of classes in the hk.ust.comp3021.game package should support up to 26 players. * </li> * <li> * For simplicity, we assume the given map is bounded with a closed boundary. * There is no need to check this point. * </li> * <li> * Example maps can be found in \"src/main/resources\". * </li> * * @param mapText The string representation. * @return The parsed GameMap object. * @throws IllegalArgumentException if undo limit is negative but not -1. * @throws IllegalArgumentException if there are multiple same upper-case letters, i.e., one player can only exist at one position. * @throws IllegalArgumentException if there are no players in the map. * @throws IllegalArgumentException if the number of boxes is not equal to the number of box destinations. * @throws IllegalArgumentException if there are boxes whose {@link Box#getPlayerId()} public TerminalRenderingEngine(PrintStream outputSteam) { this.outputSteam = outputSteam; }",
        "label": "P"
    },
    "2303": {
        "dataset": "COMP 3021",
        "project": "jloac",
        "bug_id": "24",
        "T": "void testInvalidUndoLimit() { final var invalidMap = \"\"\" -233 ###### #A..@# #...@# #a.b@# #.a.@# #..a.# ###### \"\"\"; }",
        "C": "",
        "label": "P"
    },
    "2304": {
        "dataset": "COMP 3021",
        "project": "jloac",
        "bug_id": "25",
        "T": "void testEmptyMap() { final var invalidMap = \"\"; }",
        "C": "",
        "label": "P"
    },
    "2305": {
        "dataset": "COMP 3021",
        "project": "jloac",
        "bug_id": "26",
        "T": "void testMove(String input, String name, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); } private InputStream fixValueStream(String content) { final var bytes = content.getBytes(StandardCharsets.UTF_8); return new ByteArrayInputStream(bytes); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. String inputLine = terminalScanner.nextLine(); // TODO switch(inputLine.toUpperCase()){ case \"EXIT\" -> { return new Exit(0);} case \"U\" ->{ return new Undo(0);} case \"W\" -> { return new Move.Up(0);} case \"A\" -> { return new Move.Left(0);} case \"S\" -> { return new Move.Down(0);} case \"D\" -> { return new Move.Right(0);} case \"H\" -> { return new Move.Left(1);} case \"J\" -> { return new Move.Down(1);} case \"K\" -> { return new Move.Up(1);} case \"L\" -> { return new Move.Right(1);} default -> new InvalidInput(0,\"Invalid Input.\");} /* * WASD for player 1 and HJKL for player 2. * player ID to be deterimned by (int) casting * if invalid then throw error * */ return new InvalidInput(0,\"Should not reach here\"); //throw new NotImplementedException(); }",
        "label": "P"
    },
    "2306": {
        "dataset": "COMP 3021",
        "project": "jloac",
        "bug_id": "27",
        "T": "void testMove(String input, String name, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); } private InputStream fixValueStream(String content) { final var bytes = content.getBytes(StandardCharsets.UTF_8); return new ByteArrayInputStream(bytes); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. String inputLine = terminalScanner.nextLine(); // TODO switch(inputLine.toUpperCase()){ case \"EXIT\" -> { return new Exit(0);} case \"U\" ->{ return new Undo(0);} case \"W\" -> { return new Move.Up(0);} case \"A\" -> { return new Move.Left(0);} case \"S\" -> { return new Move.Down(0);} case \"D\" -> { return new Move.Right(0);} case \"H\" -> { return new Move.Left(1);} case \"J\" -> { return new Move.Down(1);} case \"K\" -> { return new Move.Up(1);} case \"L\" -> { return new Move.Right(1);} default -> new InvalidInput(0,\"Invalid Input.\");} /* * WASD for player 1 and HJKL for player 2. * player ID to be deterimned by (int) casting * if invalid then throw error * */ return new InvalidInput(0,\"Should not reach here\"); //throw new NotImplementedException(); }",
        "label": "P"
    },
    "2307": {
        "dataset": "COMP 3021",
        "project": "jloac",
        "bug_id": "28",
        "T": "void testMove(String input, String name, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); } private InputStream fixValueStream(String content) { final var bytes = content.getBytes(StandardCharsets.UTF_8); return new ByteArrayInputStream(bytes); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. String inputLine = terminalScanner.nextLine(); // TODO switch(inputLine.toUpperCase()){ case \"EXIT\" -> { return new Exit(0);} case \"U\" ->{ return new Undo(0);} case \"W\" -> { return new Move.Up(0);} case \"A\" -> { return new Move.Left(0);} case \"S\" -> { return new Move.Down(0);} case \"D\" -> { return new Move.Right(0);} case \"H\" -> { return new Move.Left(1);} case \"J\" -> { return new Move.Down(1);} case \"K\" -> { return new Move.Up(1);} case \"L\" -> { return new Move.Right(1);} default -> new InvalidInput(0,\"Invalid Input.\");} /* * WASD for player 1 and HJKL for player 2. * player ID to be deterimned by (int) casting * if invalid then throw error * */ return new InvalidInput(0,\"Should not reach here\"); //throw new NotImplementedException(); }",
        "label": "P"
    },
    "2308": {
        "dataset": "COMP 3021",
        "project": "jloac",
        "bug_id": "29",
        "T": "void testMove(String input, String name, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); } private InputStream fixValueStream(String content) { final var bytes = content.getBytes(StandardCharsets.UTF_8); return new ByteArrayInputStream(bytes); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. String inputLine = terminalScanner.nextLine(); // TODO switch(inputLine.toUpperCase()){ case \"EXIT\" -> { return new Exit(0);} case \"U\" ->{ return new Undo(0);} case \"W\" -> { return new Move.Up(0);} case \"A\" -> { return new Move.Left(0);} case \"S\" -> { return new Move.Down(0);} case \"D\" -> { return new Move.Right(0);} case \"H\" -> { return new Move.Left(1);} case \"J\" -> { return new Move.Down(1);} case \"K\" -> { return new Move.Up(1);} case \"L\" -> { return new Move.Right(1);} default -> new InvalidInput(0,\"Invalid Input.\");} /* * WASD for player 1 and HJKL for player 2. * player ID to be deterimned by (int) casting * if invalid then throw error * */ return new InvalidInput(0,\"Should not reach here\"); //throw new NotImplementedException(); }",
        "label": "P"
    },
    "2309": {
        "dataset": "COMP 3021",
        "project": "jloac",
        "bug_id": "30",
        "T": "void testMove(String input, String name, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); } private InputStream fixValueStream(String content) { final var bytes = content.getBytes(StandardCharsets.UTF_8); return new ByteArrayInputStream(bytes); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. String inputLine = terminalScanner.nextLine(); // TODO switch(inputLine.toUpperCase()){ case \"EXIT\" -> { return new Exit(0);} case \"U\" ->{ return new Undo(0);} case \"W\" -> { return new Move.Up(0);} case \"A\" -> { return new Move.Left(0);} case \"S\" -> { return new Move.Down(0);} case \"D\" -> { return new Move.Right(0);} case \"H\" -> { return new Move.Left(1);} case \"J\" -> { return new Move.Down(1);} case \"K\" -> { return new Move.Up(1);} case \"L\" -> { return new Move.Right(1);} default -> new InvalidInput(0,\"Invalid Input.\");} /* * WASD for player 1 and HJKL for player 2. * player ID to be deterimned by (int) casting * if invalid then throw error * */ return new InvalidInput(0,\"Should not reach here\"); //throw new NotImplementedException(); }",
        "label": "P"
    },
    "2310": {
        "dataset": "COMP 3021",
        "project": "jloac",
        "bug_id": "31",
        "T": "void testMove(String input, String name, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); } private InputStream fixValueStream(String content) { final var bytes = content.getBytes(StandardCharsets.UTF_8); return new ByteArrayInputStream(bytes); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. String inputLine = terminalScanner.nextLine(); // TODO switch(inputLine.toUpperCase()){ case \"EXIT\" -> { return new Exit(0);} case \"U\" ->{ return new Undo(0);} case \"W\" -> { return new Move.Up(0);} case \"A\" -> { return new Move.Left(0);} case \"S\" -> { return new Move.Down(0);} case \"D\" -> { return new Move.Right(0);} case \"H\" -> { return new Move.Left(1);} case \"J\" -> { return new Move.Down(1);} case \"K\" -> { return new Move.Up(1);} case \"L\" -> { return new Move.Right(1);} default -> new InvalidInput(0,\"Invalid Input.\");} /* * WASD for player 1 and HJKL for player 2. * player ID to be deterimned by (int) casting * if invalid then throw error * */ return new InvalidInput(0,\"Should not reach here\"); //throw new NotImplementedException(); }",
        "label": "P"
    },
    "2311": {
        "dataset": "COMP 3021",
        "project": "jloac",
        "bug_id": "32",
        "T": "void testMove(String input, String name, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); } private InputStream fixValueStream(String content) { final var bytes = content.getBytes(StandardCharsets.UTF_8); return new ByteArrayInputStream(bytes); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. String inputLine = terminalScanner.nextLine(); // TODO switch(inputLine.toUpperCase()){ case \"EXIT\" -> { return new Exit(0);} case \"U\" ->{ return new Undo(0);} case \"W\" -> { return new Move.Up(0);} case \"A\" -> { return new Move.Left(0);} case \"S\" -> { return new Move.Down(0);} case \"D\" -> { return new Move.Right(0);} case \"H\" -> { return new Move.Left(1);} case \"J\" -> { return new Move.Down(1);} case \"K\" -> { return new Move.Up(1);} case \"L\" -> { return new Move.Right(1);} default -> new InvalidInput(0,\"Invalid Input.\");} /* * WASD for player 1 and HJKL for player 2. * player ID to be deterimned by (int) casting * if invalid then throw error * */ return new InvalidInput(0,\"Should not reach here\"); //throw new NotImplementedException(); }",
        "label": "P"
    },
    "2312": {
        "dataset": "COMP 3021",
        "project": "jloac",
        "bug_id": "33",
        "T": "void testMove(String input, String name, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); } private InputStream fixValueStream(String content) { final var bytes = content.getBytes(StandardCharsets.UTF_8); return new ByteArrayInputStream(bytes); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. String inputLine = terminalScanner.nextLine(); // TODO switch(inputLine.toUpperCase()){ case \"EXIT\" -> { return new Exit(0);} case \"U\" ->{ return new Undo(0);} case \"W\" -> { return new Move.Up(0);} case \"A\" -> { return new Move.Left(0);} case \"S\" -> { return new Move.Down(0);} case \"D\" -> { return new Move.Right(0);} case \"H\" -> { return new Move.Left(1);} case \"J\" -> { return new Move.Down(1);} case \"K\" -> { return new Move.Up(1);} case \"L\" -> { return new Move.Right(1);} default -> new InvalidInput(0,\"Invalid Input.\");} /* * WASD for player 1 and HJKL for player 2. * player ID to be deterimned by (int) casting * if invalid then throw error * */ return new InvalidInput(0,\"Should not reach here\"); //throw new NotImplementedException(); }",
        "label": "P"
    },
    "2313": {
        "dataset": "COMP 3021",
        "project": "jloac",
        "bug_id": "34",
        "T": "void testUndo(String input, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. String inputLine = terminalScanner.nextLine(); // TODO switch(inputLine.toUpperCase()){ case \"EXIT\" -> { return new Exit(0);} case \"U\" ->{ return new Undo(0);} case \"W\" -> { return new Move.Up(0);} case \"A\" -> { return new Move.Left(0);} case \"S\" -> { return new Move.Down(0);} case \"D\" -> { return new Move.Right(0);} case \"H\" -> { return new Move.Left(1);} case \"J\" -> { return new Move.Down(1);} case \"K\" -> { return new Move.Up(1);} case \"L\" -> { return new Move.Right(1);} default -> new InvalidInput(0,\"Invalid Input.\");} /* * WASD for player 1 and HJKL for player 2. * player ID to be deterimned by (int) casting * if invalid then throw error * */ return new InvalidInput(0,\"Should not reach here\"); //throw new NotImplementedException(); }",
        "label": "P"
    },
    "2314": {
        "dataset": "COMP 3021",
        "project": "jloac",
        "bug_id": "35",
        "T": "void testInvalidInput() { final var inputStream = fixValueStream(\"blah blah\"); final var inputEngine = new TerminalInputEngine(inputStream); final var action = inputEngine.fetchAction(); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. String inputLine = terminalScanner.nextLine(); // TODO switch(inputLine.toUpperCase()){ case \"EXIT\" -> { return new Exit(0);} case \"U\" ->{ return new Undo(0);} case \"W\" -> { return new Move.Up(0);} case \"A\" -> { return new Move.Left(0);} case \"S\" -> { return new Move.Down(0);} case \"D\" -> { return new Move.Right(0);} case \"H\" -> { return new Move.Left(1);} case \"J\" -> { return new Move.Down(1);} case \"K\" -> { return new Move.Up(1);} case \"L\" -> { return new Move.Right(1);} default -> new InvalidInput(0,\"Invalid Input.\");} /* * WASD for player 1 and HJKL for player 2. * player ID to be deterimned by (int) casting * if invalid then throw error * */ return new InvalidInput(0,\"Should not reach here\"); //throw new NotImplementedException(); }",
        "label": "P"
    },
    "2315": {
        "dataset": "COMP 3021",
        "project": "jloac",
        "bug_id": "36",
        "T": "void testUndoWhenThereIsNoMove() { final var gameState = new GameState(TestHelper.parseGameMap(\"\"\" 233 ###### #A.a@# #..a@# ###### \"\"\" )); gameState.undo(); } private Entity generateEntity(int key) { return switch (key % 4) { case 0 -> new Box(0); case 1 -> new Empty(); case 2 -> new Player(0); case 3 -> new Wall(); default -> throw new ShouldNotReachException(); }; }",
        "C": "public GameState(@NotNull GameMap map) { // TODO ok but is the undonumber ok? this.gameHistory = new ArrayDeque<Map<Position, Entity>>(); if(map.getUndoLimit().isEmpty()){ this.undoNumber = -1; }else{ this.undoNumber = map.getUndoLimit().get(); } this.destinations = map.getDestinations(); this.maxHeight = map.getMaxHeight(); this.maxWidth = map.getMaxWidth(); //throw new RuntimeException(String.valueOf(map.getMapLocation().size())); this.gameHistory.add(map.getMapLocation()); this.tempMove = new HashMap<Position, Entity>(gameHistory.peek()); //throw new NotImplementedException(); } public void undo(){ // TODO.... IF OPEN GAME THEN UNDO WHAT HAPPEN? if(!changed){ if(gameHistory.size() == 1){ //popping actual checkpoints tempMove = new HashMap<Position, Entity>(gameHistory.peekLast()); changed = true; }else { this.gameHistory.removeLast(); tempMove = new HashMap<Position, Entity>(gameHistory.peekLast()); if(gameHistory.size() == 1){ //popping actual checkpoints changed = true; } } if(undoNumber != -1){ undoNumber -= 1; } }else{ //revert to checkpoint tempMove = new HashMap<Position, Entity>(gameHistory.peekLast()); } //throw new NotImplementedException(); } /** * Get the maximum width of the game map. * This should be the same as that in {@link GameMap} public TerminalRenderingEngine(PrintStream outputSteam) { this.outputSteam = outputSteam; } public Box(int playerId) { this.playerId = playerId; } public Player(int id) { this.id = id; } public ShouldNotReachException() { super(\"This branch should not be reached.\"); }",
        "label": "P"
    },
    "2316": {
        "dataset": "COMP 3021",
        "project": "jloac",
        "bug_id": "37",
        "T": "void testGetUndoUnlimited() { final var gameState = new GameState(TestHelper.parseGameMap(\"\"\" -1 ###### #.Aa@# #..a@# ###### \"\"\" )); }",
        "C": "public GameState(@NotNull GameMap map) { // TODO ok but is the undonumber ok? this.gameHistory = new ArrayDeque<Map<Position, Entity>>(); if(map.getUndoLimit().isEmpty()){ this.undoNumber = -1; }else{ this.undoNumber = map.getUndoLimit().get(); } this.destinations = map.getDestinations(); this.maxHeight = map.getMaxHeight(); this.maxWidth = map.getMaxWidth(); //throw new RuntimeException(String.valueOf(map.getMapLocation().size())); this.gameHistory.add(map.getMapLocation()); this.tempMove = new HashMap<Position, Entity>(gameHistory.peek()); //throw new NotImplementedException(); }",
        "label": "P"
    },
    "2317": {
        "dataset": "COMP 3021",
        "project": "jloac",
        "bug_id": "38",
        "T": "void testMapCopying() { final var maxWidth = 2333; final var maxHeight = 2333; final var random = new Random(); final var randomEntities = Stream.generate(() -> Position.of(random.nextInt(maxWidth), random.nextInt(maxHeight))) .distinct() .limit(100) .collect(Collectors.toMap(Function.identity(), it -> generateEntity(it.x()))); final var firstPos = randomEntities.keySet().stream().findFirst(); final var gameMap = new GameMap(maxWidth, maxHeight, Collections.singleton(firstPos.get()), 233); randomEntities.forEach(gameMap::putEntity); final var gameState = new GameState(gameMap); final var randomPosition = randomEntities.keySet().stream().findAny(); gameMap.putEntity(randomPosition.get(), new Empty()); randomEntities.forEach((p, e) -> assertEquals(e, gameState.getEntity(p))); }",
        "C": "public static @NotNull Position of(int x, int y) { return new Position(x, y); } public GameMap(int maxWidth, int maxHeight, Set<Position> destinations, int undoLimit) { // TODO ok this.maxWidth = maxWidth; this.maxHeight = maxHeight; this.destinations = destinations; this.undoLimit = undoLimit; this.playerIds = new HashSet<Integer>(); this.mapLocation = new HashMap<Position, Entity>(); this.boxCount = 0; this.accountedBoxes = new HashMap<Integer, Integer>(); //throw new NotImplementedException(); } /** * Parses the map from a string representation. * The first line is undo limit. * Starting from the second line, the game map is represented as follows, * <li># represents a {@link Wall}</li> * <li>@ represents a box destination.</li> * <li>Any upper-case letter represents a {@link Player}.</li> * <li> * Any lower-case letter represents a {@link Box} that is only movable by the player with the corresponding upper-case letter. * For instance, box \"a\" can only be moved by player \"A\" and not movable by player \"B\". * </li>\u00b7 * <li>. represents an {@link Empty} position in the map, meaning there is no player or box currently at this position.</li> * <p> * Notes: * <li> * There can be at most 26 players. * All implementations of classes in the hk.ust.comp3021.game package should support up to 26 players. * </li> * <li> * For simplicity, we assume the given map is bounded with a closed boundary. * There is no need to check this point. * </li> * <li> * Example maps can be found in \"src/main/resources\". * </li> * * @param mapText The string representation. * @return The parsed GameMap object. * @throws IllegalArgumentException if undo limit is negative but not -1. * @throws IllegalArgumentException if there are multiple same upper-case letters, i.e., one player can only exist at one position. * @throws IllegalArgumentException if there are no players in the map. * @throws IllegalArgumentException if the number of boxes is not equal to the number of box destinations. * @throws IllegalArgumentException if there are boxes whose {@link Box#getPlayerId()} public GameState(@NotNull GameMap map) { // TODO ok but is the undonumber ok? this.gameHistory = new ArrayDeque<Map<Position, Entity>>(); if(map.getUndoLimit().isEmpty()){ this.undoNumber = -1; }else{ this.undoNumber = map.getUndoLimit().get(); } this.destinations = map.getDestinations(); this.maxHeight = map.getMaxHeight(); this.maxWidth = map.getMaxWidth(); //throw new RuntimeException(String.valueOf(map.getMapLocation().size())); this.gameHistory.add(map.getMapLocation()); this.tempMove = new HashMap<Position, Entity>(gameHistory.peek()); //throw new NotImplementedException(); } public void putEntity(Position position, Entity entity) { // TODO ok mapLocation.put(position, entity); //throw new NotImplementedException(); } public @Nullable Entity getEntity(@NotNull Position position) { // TODO ok return this.tempMove.get(position); //throw new NotImplementedException(); } /** * Get all box destination positions as a set in the game map. * This should be the same as that in {@link GameMap}",
        "label": "P"
    },
    "2318": {
        "dataset": "COMP 3021",
        "project": "jloac",
        "bug_id": "39",
        "T": "void testUndoWhenThereIsMoveButNoCheckpoint() { final var gameState = new GameState(TestHelper.parseGameMap(\"\"\" 233 ###### #A.a@# #..a@# ###### \"\"\" )); gameState.move(Position.of(1, 1), Position.of(2, 1)); gameState.undo(); }",
        "C": "public GameState(@NotNull GameMap map) { // TODO ok but is the undonumber ok? this.gameHistory = new ArrayDeque<Map<Position, Entity>>(); if(map.getUndoLimit().isEmpty()){ this.undoNumber = -1; }else{ this.undoNumber = map.getUndoLimit().get(); } this.destinations = map.getDestinations(); this.maxHeight = map.getMaxHeight(); this.maxWidth = map.getMaxWidth(); //throw new RuntimeException(String.valueOf(map.getMapLocation().size())); this.gameHistory.add(map.getMapLocation()); this.tempMove = new HashMap<Position, Entity>(gameHistory.peek()); //throw new NotImplementedException(); } public void move(Position from, Position to) { // TODO ok //use putentity from gamemap this.tempMove.replace(to, getEntity(from)); this.tempMove.replace(from, new Empty()); changed = true; //throw new NotImplementedException(); } /** * Record a checkpoint of the game state, including: * <li>All current positions of entities in the game map.</li> * <li>Current undo quota</li> * <p> * Checkpoint is used in {@link GameState#undo()} public static @NotNull Position of(int x, int y) { return new Position(x, y); } public void undo(){ // TODO.... IF OPEN GAME THEN UNDO WHAT HAPPEN? if(!changed){ if(gameHistory.size() == 1){ //popping actual checkpoints tempMove = new HashMap<Position, Entity>(gameHistory.peekLast()); changed = true; }else { this.gameHistory.removeLast(); tempMove = new HashMap<Position, Entity>(gameHistory.peekLast()); if(gameHistory.size() == 1){ //popping actual checkpoints changed = true; } } if(undoNumber != -1){ undoNumber -= 1; } }else{ //revert to checkpoint tempMove = new HashMap<Position, Entity>(gameHistory.peekLast()); } //throw new NotImplementedException(); } /** * Get the maximum width of the game map. * This should be the same as that in {@link GameMap}",
        "label": "P"
    },
    "2319": {
        "dataset": "COMP 3021",
        "project": "jloac",
        "bug_id": "40",
        "T": "void testGameExit() { final var gameState = mock(GameState.class); final var inputEngine = mock(TerminalInputEngine.class); final var renderingEngine = mock(TerminalRenderingEngine.class); when(gameState.isWin()).thenReturn(false, false, false); when(inputEngine.fetchAction()) .thenReturn(new InvalidInput(0, \"\"), new InvalidInput(0, \"\"), new Exit(0)); final var game = new TerminalSokobanGame(gameState, inputEngine, renderingEngine); game.run(); verify(renderingEngine, atLeastOnce()).message(any()); }",
        "C": "public InvalidInput(int initiator, @NotNull String message) { super(initiator); this.message = message; } public Exit(int initiator) { super(initiator); } public TerminalSokobanGame(GameState gameState, TerminalInputEngine inputEngine, TerminalRenderingEngine renderingEngine) { super(gameState); this.inputEngine = inputEngine; this.renderingEngine = renderingEngine; // TODO ok if(gameState.getAllPlayerPositions().size()>2){ throw new IllegalArgumentException(\"TerminalSokobanGame only support at most two players.\"); } // Check the number of players //throw new NotImplementedException(); } public void run() { // TODO renderingEngine.message(\"Sokoban game is ready.\"); renderingEngine.render(this.state); if(this.state.getUndoQuota().equals(Optional.empty())){ renderingEngine.message(\"Unlimited\"); }else{ renderingEngine.message(\"Undo Quota: \" + this.state.getUndoQuota().get()); } while(!this.shouldStop()) { Action userInput = inputEngine.fetchAction(); ActionResult result = this.processAction(userInput); if(result instanceof ActionResult.Failed){ renderingEngine.message(((ActionResult.Failed) result).getReason()); } if(this.state.isWin()){ break; } renderingEngine.render(this.state); if(this.state.getUndoQuota().equals(Optional.empty())){ renderingEngine.message(\"Unlimited\"); }else{ renderingEngine.message(\"Undo Quota: \" + this.state.getUndoQuota().get()); } } renderingEngine.message(\"Game exits.\"); if(this.state.isWin()){ renderingEngine.message(\"You win.\"); } //1. render map //2. get user input (fetch action) //3. check if valid //4. render map // // //throw new NotImplementedException(); }",
        "label": "P"
    },
    "2320": {
        "dataset": "COMP 3021",
        "project": "jloac",
        "bug_id": "41",
        "T": "void testGameWin() { final var gameState = mock(GameState.class); final var inputEngine = mock(TerminalInputEngine.class); final var renderingEngine = mock(TerminalRenderingEngine.class); when(gameState.isWin()).thenReturn(false, false, false, true); when(inputEngine.fetchAction()) .thenReturn(new InvalidInput(0, \"\")); final var game = new TerminalSokobanGame(gameState, inputEngine, renderingEngine); game.run(); verify(gameState, atLeastOnce()).isWin(); verify(renderingEngine, atLeastOnce()).message(any()); }",
        "C": "public InvalidInput(int initiator, @NotNull String message) { super(initiator); this.message = message; } public TerminalSokobanGame(GameState gameState, TerminalInputEngine inputEngine, TerminalRenderingEngine renderingEngine) { super(gameState); this.inputEngine = inputEngine; this.renderingEngine = renderingEngine; // TODO ok if(gameState.getAllPlayerPositions().size()>2){ throw new IllegalArgumentException(\"TerminalSokobanGame only support at most two players.\"); } // Check the number of players //throw new NotImplementedException(); } public void run() { // TODO renderingEngine.message(\"Sokoban game is ready.\"); renderingEngine.render(this.state); if(this.state.getUndoQuota().equals(Optional.empty())){ renderingEngine.message(\"Unlimited\"); }else{ renderingEngine.message(\"Undo Quota: \" + this.state.getUndoQuota().get()); } while(!this.shouldStop()) { Action userInput = inputEngine.fetchAction(); ActionResult result = this.processAction(userInput); if(result instanceof ActionResult.Failed){ renderingEngine.message(((ActionResult.Failed) result).getReason()); } if(this.state.isWin()){ break; } renderingEngine.render(this.state); if(this.state.getUndoQuota().equals(Optional.empty())){ renderingEngine.message(\"Unlimited\"); }else{ renderingEngine.message(\"Undo Quota: \" + this.state.getUndoQuota().get()); } } renderingEngine.message(\"Game exits.\"); if(this.state.isWin()){ renderingEngine.message(\"You win.\"); } //1. render map //2. get user input (fetch action) //3. check if valid //4. render map // // //throw new NotImplementedException(); }",
        "label": "P"
    },
    "2321": {
        "dataset": "COMP 3021",
        "project": "jloac",
        "bug_id": "42",
        "T": "void testMoreThanTwoPlayers() { final var gameState = mock(GameState.class); final var inputEngine = mock(TerminalInputEngine.class); final var renderingEngine = mock(TerminalRenderingEngine.class); when(gameState.getAllPlayerPositions()).thenReturn(new HashSet<>(Arrays.asList(Position.of(1, 1), Position.of(1, 2), Position.of(1, 3)))); }",
        "C": "public static @NotNull Position of(int x, int y) { return new Position(x, y); }",
        "label": "P"
    },
    "2322": {
        "dataset": "COMP 3021",
        "project": "ttmiao",
        "bug_id": "0",
        "T": "void moveUp() { Position.of(233, 232), new Move.Up(-1).nextPosition(pos) ); }",
        "C": "public static @NotNull Position of(int x, int y) { return new Position(x, y); } public Up(int initiator) { super(initiator); }",
        "label": "P"
    },
    "2323": {
        "dataset": "COMP 3021",
        "project": "ttmiao",
        "bug_id": "1",
        "T": "void moveDown() { Position.of(233, 234), new Move.Down(-1).nextPosition(pos) ); }",
        "C": "public static @NotNull Position of(int x, int y) { return new Position(x, y); } public Down(int initiator) { super(initiator); }",
        "label": "P"
    },
    "2324": {
        "dataset": "COMP 3021",
        "project": "ttmiao",
        "bug_id": "2",
        "T": "void moveRight() { Position.of(234, 233), new Move.Right(-1).nextPosition(pos) ); }",
        "C": "public static @NotNull Position of(int x, int y) { return new Position(x, y); } public Right(int initiator) { super(initiator); }",
        "label": "P"
    },
    "2325": {
        "dataset": "COMP 3021",
        "project": "ttmiao",
        "bug_id": "3",
        "T": "void testExceedingUndoQuota() { final var gameState = mock(GameState.class); when(gameState.getPlayerPositionById(anyInt())).thenReturn(Position.of(0, 0)); when(gameState.getUndoQuota()).thenReturn(Optional.of(0)); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Undo(0)); }",
        "C": "public Undo(int initiator) { super(initiator); }",
        "label": "P"
    },
    "2326": {
        "dataset": "COMP 3021",
        "project": "ttmiao",
        "bug_id": "4",
        "T": "void testExit() { final var gameState = mock(GameState.class); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Exit(0)); }",
        "C": "public Exit(int initiator) { super(initiator); }",
        "label": "P"
    },
    "2327": {
        "dataset": "COMP 3021",
        "project": "ttmiao",
        "bug_id": "5",
        "T": "void testUndoUnlimited() { final var gameState = mock(GameState.class); when(gameState.getPlayerPositionById(anyInt())).thenReturn(Position.of(0, 0)); when(gameState.getUndoQuota()).thenReturn(Optional.empty()); final var game = new SokobanGameForTesting(gameState); for (int i = 0; i < 10000; i++) { final var result = game.feedActionForProcessing(new Undo(0)); } verify(gameState, times(10000)).undo(); }",
        "C": "public TerminalRenderingEngine(PrintStream outputSteam) { this.outputSteam = outputSteam; } public Undo(int initiator) { super(initiator); }",
        "label": "P"
    },
    "2328": {
        "dataset": "COMP 3021",
        "project": "ttmiao",
        "bug_id": "6",
        "T": "void testPushOtherPlayerBox() { String mapText = \"\"\" 233 ###### #AB.@# #b.a.# #@...# ###### \"\"\"; final var testMap = TestHelper.parseGameMap(mapText); final var gameState = spy(new GameState(testMap)); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Move.Down(0)); verify(gameState, never()).move(any(), any()); }",
        "C": "public GameState(@NotNull GameMap map) { // TODO // this.map = map; this.maxHeight = map.getMaxHeight(); this.maxWidth = map.getMaxWidth(); this.entities = new Entity[maxHeight][maxWidth]; for (int y = 0; y < this.maxHeight; y++) { for (int x = 0; x < this.maxWidth; x++) { final var entity = map.getEntity(Position.of(x, y)); this.entities[y][x] = entity; } } this.playerIds = map.getPlayerIds(); this.undoLimit = map.getUndoLimit(); this.destinations = map.getDestinations(); this.checkpoint(); } public Down(int initiator) { super(initiator); }",
        "label": "P"
    },
    "2329": {
        "dataset": "COMP 3021",
        "project": "ttmiao",
        "bug_id": "7",
        "T": "void testMoveNonExistingPlayer() { String mapText = \"\"\" 233 ###### #A..@# #a...# ##...# ###### \"\"\"; final var testMap = TestHelper.parseGameMap(mapText); final var gameState = spy(new GameState(testMap)); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Move.Down(23)); }",
        "C": "public GameState(@NotNull GameMap map) { // TODO // this.map = map; this.maxHeight = map.getMaxHeight(); this.maxWidth = map.getMaxWidth(); this.entities = new Entity[maxHeight][maxWidth]; for (int y = 0; y < this.maxHeight; y++) { for (int x = 0; x < this.maxWidth; x++) { final var entity = map.getEntity(Position.of(x, y)); this.entities[y][x] = entity; } } this.playerIds = map.getPlayerIds(); this.undoLimit = map.getUndoLimit(); this.destinations = map.getDestinations(); this.checkpoint(); } public Down(int initiator) { super(initiator); }",
        "label": "P"
    },
    "2330": {
        "dataset": "COMP 3021",
        "project": "ttmiao",
        "bug_id": "8",
        "T": "void testCheckpointWhenNeed() { final var gameState = spy(new GameState(TestHelper.parseGameMap(\"\"\" 233 ###### #.Aa@# #..a@# ###### \"\"\" ))); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Move.Right(0)); verify(gameState, times(1)).checkpoint(); }",
        "C": "public GameState(@NotNull GameMap map) { // TODO // this.map = map; this.maxHeight = map.getMaxHeight(); this.maxWidth = map.getMaxWidth(); this.entities = new Entity[maxHeight][maxWidth]; for (int y = 0; y < this.maxHeight; y++) { for (int x = 0; x < this.maxWidth; x++) { final var entity = map.getEntity(Position.of(x, y)); this.entities[y][x] = entity; } } this.playerIds = map.getPlayerIds(); this.undoLimit = map.getUndoLimit(); this.destinations = map.getDestinations(); this.checkpoint(); } public Right(int initiator) { super(initiator); }",
        "label": "P"
    },
    "2331": {
        "dataset": "COMP 3021",
        "project": "ttmiao",
        "bug_id": "9",
        "T": "void testPushBoxAgainstWall() { String mapText = \"\"\" 233 ###### #A..@# #a...# ##...# ###### \"\"\"; final var testMap = TestHelper.parseGameMap(mapText); final var gameState = spy(new GameState(testMap)); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Move.Down(0)); verify(gameState, never()).move(any(), any()); }",
        "C": "public GameState(@NotNull GameMap map) { // TODO // this.map = map; this.maxHeight = map.getMaxHeight(); this.maxWidth = map.getMaxWidth(); this.entities = new Entity[maxHeight][maxWidth]; for (int y = 0; y < this.maxHeight; y++) { for (int x = 0; x < this.maxWidth; x++) { final var entity = map.getEntity(Position.of(x, y)); this.entities[y][x] = entity; } } this.playerIds = map.getPlayerIds(); this.undoLimit = map.getUndoLimit(); this.destinations = map.getDestinations(); this.checkpoint(); } public Down(int initiator) { super(initiator); }",
        "label": "P"
    },
    "2332": {
        "dataset": "COMP 3021",
        "project": "ttmiao",
        "bug_id": "10",
        "T": "void testCheckpointWhenNotNeed() { final var gameState = spy(new GameState(TestHelper.parseGameMap(\"\"\" 233 ###### #A.a@# #..a@# ###### \"\"\" ))); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Move.Right(0)); verify(gameState, never()).checkpoint(); } private static class SokobanGameForTesting extends AbstractSokobanGame { protected SokobanGameForTesting(GameState gameState) { super(gameState); } @Override public void run() { } public ActionResult feedActionForProcessing(Action action) { return processAction(action); } }",
        "C": "public GameState(@NotNull GameMap map) { // TODO // this.map = map; this.maxHeight = map.getMaxHeight(); this.maxWidth = map.getMaxWidth(); this.entities = new Entity[maxHeight][maxWidth]; for (int y = 0; y < this.maxHeight; y++) { for (int x = 0; x < this.maxWidth; x++) { final var entity = map.getEntity(Position.of(x, y)); this.entities[y][x] = entity; } } this.playerIds = map.getPlayerIds(); this.undoLimit = map.getUndoLimit(); this.destinations = map.getDestinations(); this.checkpoint(); } public Right(int initiator) { super(initiator); } public void run() { // TODO while(true){ var actionResult = this.processAction(inputEngine.fetchAction()); if(this.shouldStop()){ this.renderingEngine.render(this.state); this.renderingEngine.message(\"Game exits.\"); if(this.state.isWin()){ this.renderingEngine.message(\"You Win.\"); } return; } var undoQuota = state.getUndoQuota(); if(actionResult instanceof ActionResult.Failed f){ this.renderingEngine.message(f.getReason()); this.renderingEngine.render(this.state); this.renderingEngine.message(\"Undo Quota: \" + (undoQuota.isPresent() ? undoQuota.get() : \"Unlimited\")); continue; }else { this.renderingEngine.render(this.state); this.renderingEngine.message(\"Undo Quota: \" + (undoQuota.isPresent() ? undoQuota.get() : \"Unlimited\")); } } } protected ActionResult processAction(@NotNull Action action) { // TODO switch (action){ case Move move: { var playerId = action.getInitiator(); var playerPosition = state.getPlayerPositionById(playerId); if(playerPosition == null) return new ActionResult.Failed(action, \"Player not found.\"); var playerTo = move.nextPosition(playerPosition); var toEntity = this.state.getEntity(playerTo); var boxTo = move.nextPosition(playerTo); if(toEntity instanceof Wall) { return new ActionResult.Failed(action, \"You hit a wall.\"); }else if(toEntity instanceof Box box && box.getPlayerId() != playerId){ return new ActionResult.Failed(action, \"You cannot move other players' boxes.\"); }else if(toEntity instanceof Box && (this.state.getEntity(boxTo) instanceof Wall || this.state.getEntity(boxTo) instanceof Box)){ return new ActionResult.Failed(action, \"Failed to push the box.\"); }else if(toEntity instanceof Box box && box.getPlayerId() == playerId){ this.state.move(playerTo, boxTo); this.state.move(playerPosition, playerTo); this.state.checkpoint(); }else{ this.state.move(playerPosition, playerTo); } break; } case Undo u: { var crrentUndoQuota = this.state.getUndoQuota(); if(crrentUndoQuota.isEmpty() || crrentUndoQuota.get() > 0){ this.state.undo(); }else{ return new ActionResult.Failed(action,\"You have run out of your undo quota.\"); } break; } case Exit e: { gameStop = true; break; } case InvalidInput i: { return new ActionResult.Failed(action, \"Invalid Input\"); } case default: { return new ActionResult.Failed(action, \"Invalid Input\"); } } return new ActionResult.Success(action); }",
        "label": "P"
    },
    "2333": {
        "dataset": "COMP 3021",
        "project": "ttmiao",
        "bug_id": "11",
        "T": "void testHitAnotherPlayer() { String mapText = \"\"\" 233 ###### #A..@# #B...# #ab.@# ###### \"\"\"; final var testMap = TestHelper.parseGameMap(mapText); final var gameState = spy(new GameState(testMap)); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Move.Down(0)); verify(gameState, never()).move(any(), any()); }",
        "C": "public GameState(@NotNull GameMap map) { // TODO // this.map = map; this.maxHeight = map.getMaxHeight(); this.maxWidth = map.getMaxWidth(); this.entities = new Entity[maxHeight][maxWidth]; for (int y = 0; y < this.maxHeight; y++) { for (int x = 0; x < this.maxWidth; x++) { final var entity = map.getEntity(Position.of(x, y)); this.entities[y][x] = entity; } } this.playerIds = map.getPlayerIds(); this.undoLimit = map.getUndoLimit(); this.destinations = map.getDestinations(); this.checkpoint(); } public Down(int initiator) { super(initiator); }",
        "label": "F"
    },
    "2334": {
        "dataset": "COMP 3021",
        "project": "ttmiao",
        "bug_id": "12",
        "T": "void testUndoWithinQuota() { final var gameState = mock(GameState.class); when(gameState.getPlayerPositionById(anyInt())).thenReturn(Position.of(0, 0)); when(gameState.getUndoQuota()).thenReturn(Optional.of(1)); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Undo(0)); verify(gameState, times(1)).undo(); }",
        "C": "public Undo(int initiator) { super(initiator); }",
        "label": "P"
    },
    "2335": {
        "dataset": "COMP 3021",
        "project": "ttmiao",
        "bug_id": "13",
        "T": "void testInvalidInput() { final var game = new SokobanGameForTesting(mock(GameState.class)); final var message = String.valueOf(new Random().nextLong()); final var action = new InvalidInput(-1, message); final var result = game.feedActionForProcessing(action); }",
        "C": "public InvalidInput(int initiator, @NotNull String message) { super(initiator); this.message = message; }",
        "label": "P"
    },
    "2336": {
        "dataset": "COMP 3021",
        "project": "ttmiao",
        "bug_id": "14",
        "T": "void testUndoLimitParsing() { final var gameMap = TestHelper.parseGameMap(rectangularMap); }",
        "C": "",
        "label": "P"
    },
    "2337": {
        "dataset": "COMP 3021",
        "project": "ttmiao",
        "bug_id": "15",
        "T": "void testWidthForNonRectangularMap() { final var gameMap = TestHelper.parseGameMap(nonRectangularMap); }",
        "C": "",
        "label": "P"
    },
    "2338": {
        "dataset": "COMP 3021",
        "project": "ttmiao",
        "bug_id": "16",
        "T": "void testTwoPlayersMap() { final var twoPlayersMap = \"\"\" 233 ###### #A..@# #..B@# #....# #.a..# #..b.# ###### \"\"\"; final var gameMap = TestHelper.parseGameMap(twoPlayersMap); final var playerIds = gameMap.getPlayerIds(); final var expectedIds = new HashSet<Integer>(); expectedIds.add(0); expectedIds.add(1); }",
        "C": "public Set<Integer> getPlayerIds() { // TODO Set<Integer> playerIDS = new HashSet<>(); for(var rows: this.entities){ for(var entry: rows){ if(entry instanceof Player player){ playerIDS.add(player.getId()); } } } return playerIDS; }",
        "label": "P"
    },
    "2339": {
        "dataset": "COMP 3021",
        "project": "ttmiao",
        "bug_id": "17",
        "T": "void testMapWithoutPlayer() { final var invalidMap = \"\"\" 233 ### #.# ### \"\"\"; } // @Tag(TestKind.HIDDEN) // @Test // void testUnmatchedPlayersAndBoxes() { // final var invalidMap = \"\"\" // 233 // ###### // #A..@# // #...@# // #a.b@# // #.a.@# // #..a.# // ###### // \"\"\"; // assertThrowsExactly(IllegalArgumentException.class, () -> TestHelper.parseGameMap(invalidMap)); // }",
        "C": "public TerminalRenderingEngine(PrintStream outputSteam) { this.outputSteam = outputSteam; }",
        "label": "P"
    },
    "2340": {
        "dataset": "COMP 3021",
        "project": "ttmiao",
        "bug_id": "18",
        "T": "void testManyPlayersMap() { final var manyPlayersMap = \"\"\" 233 ###### #A.P@@# #vCB@@# #.cpD@# #Ga.d@# #g.bV@# ###### \"\"\"; final var gameMap = TestHelper.parseGameMap(manyPlayersMap); final var playerIds = gameMap.getPlayerIds(); final var expectedIds = new HashSet<>(Arrays.asList( 0, 'P' - 'A', 'C' - 'A', 'B' - 'A', 'D' - 'A', 'G' - 'A', 'V' - 'A' )); }",
        "C": "public Set<Integer> getPlayerIds() { // TODO Set<Integer> playerIDS = new HashSet<>(); for(var rows: this.entities){ for(var entry: rows){ if(entry instanceof Player player){ playerIDS.add(player.getId()); } } } return playerIDS; }",
        "label": "P"
    },
    "2341": {
        "dataset": "COMP 3021",
        "project": "ttmiao",
        "bug_id": "19",
        "T": "void testHeightForNonRectangularMap() { final var gameMap = TestHelper.parseGameMap(nonRectangularMap); }",
        "C": "",
        "label": "P"
    },
    "2342": {
        "dataset": "COMP 3021",
        "project": "ttmiao",
        "bug_id": "20",
        "T": "void testDuplicatedPlayers() { final var invalidMap = \"\"\" 233 ###### #A..@# #..A@# #....# #.a..# #..b.# ###### \"\"\"; }",
        "C": "",
        "label": "P"
    },
    "2343": {
        "dataset": "COMP 3021",
        "project": "ttmiao",
        "bug_id": "21",
        "T": "void testParseMapWithoutUndoLimit() { final var invalidMap = String.join(\"\\n\", rectangularMap.lines().skip(1).toList()); }",
        "C": "",
        "label": "P"
    },
    "2344": {
        "dataset": "COMP 3021",
        "project": "ttmiao",
        "bug_id": "22",
        "T": "void testInsufficientDestinations() { final var invalidMap = \"\"\" 233 ###### #A..@# #...@# #a...# #.a..# #..a.# ###### \"\"\"; }",
        "C": "",
        "label": "P"
    },
    "2345": {
        "dataset": "COMP 3021",
        "project": "ttmiao",
        "bug_id": "23",
        "T": "void testSuperLargeMap() { try { new GameMap(Integer.MAX_VALUE, Integer.MAX_VALUE, Collections.emptySet(), 0); } catch (OutOfMemoryError e) { throw new RuntimeException(e); } }); }",
        "C": "public GameMap(int maxWidth, int maxHeight, Set<Position> destinations, int undoLimit) { // TODO this.maxWidth = maxWidth; this.maxHeight = maxHeight; this.destinations = destinations; this.undoLimit = undoLimit; this.entities = new Entity[maxHeight][maxWidth]; } /** * Parses the map from a string representation. * The first line is undo limit. * Starting from the second line, the game map is represented as follows, * <li># represents a {@link Wall}</li> * <li>@ represents a box destination.</li> * <li>Any upper-case letter represents a {@link Player}.</li> * <li> * Any lower-case letter represents a {@link Box} that is only movable by the player with the corresponding upper-case letter. * For instance, box \"a\" can only be moved by player \"A\" and not movable by player \"B\". * </li> * <li>. represents an {@link Empty} position in the map, meaning there is no player or box currently at this position.</li> * <p> * Notes: * <li> * There can be at most 26 players. * All implementations of classes in the hk.ust.comp3021.game package should support up to 26 players. * </li> * <li> * For simplicity, we assume the given map is bounded with a closed boundary. * There is no need to check this point. * </li> * <li> * Example maps can be found in \"src/main/resources\". * </li> * * @param mapText The string representation. * @return The parsed GameMap object. * @throws IllegalArgumentException if undo limit is negative but not -1. * @throws IllegalArgumentException if there are multiple same upper-case letters, i.e., one player can only exist at one position. * @throws IllegalArgumentException if there are no players in the map. * @throws IllegalArgumentException if the number of boxes is not equal to the number of box destinations. * @throws IllegalArgumentException if there are boxes whose {@link Box#getPlayerId()} public TerminalRenderingEngine(PrintStream outputSteam) { this.outputSteam = outputSteam; }",
        "label": "F"
    },
    "2346": {
        "dataset": "COMP 3021",
        "project": "ttmiao",
        "bug_id": "24",
        "T": "void testInvalidUndoLimit() { final var invalidMap = \"\"\" -233 ###### #A..@# #...@# #a.b@# #.a.@# #..a.# ###### \"\"\"; }",
        "C": "",
        "label": "P"
    },
    "2347": {
        "dataset": "COMP 3021",
        "project": "ttmiao",
        "bug_id": "25",
        "T": "void testEmptyMap() { final var invalidMap = \"\"; }",
        "C": "",
        "label": "P"
    },
    "2348": {
        "dataset": "COMP 3021",
        "project": "ttmiao",
        "bug_id": "26",
        "T": "void testMove(String input, String name, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); } private InputStream fixValueStream(String content) { final var bytes = content.getBytes(StandardCharsets.UTF_8); return new ByteArrayInputStream(bytes); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine(); Action action = switch (inputLine.toLowerCase()){ case \"w\" -> new Move.Up(0); case \"a\" -> new Move.Left(0); case \"s\" -> new Move.Down(0); case \"d\" -> new Move.Right(0); case \"k\" -> new Move.Up(1); case \"h\" -> new Move.Left(1); case \"j\" -> new Move.Down(1); case \"l\" -> new Move.Right(1); case \"u\" -> new Undo(0); case \"exit\" -> new Exit(0); case default -> new InvalidInput(0, \"error\"); }; // TODO return action; }",
        "label": "P"
    },
    "2349": {
        "dataset": "COMP 3021",
        "project": "ttmiao",
        "bug_id": "27",
        "T": "void testMove(String input, String name, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); } private InputStream fixValueStream(String content) { final var bytes = content.getBytes(StandardCharsets.UTF_8); return new ByteArrayInputStream(bytes); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine(); Action action = switch (inputLine.toLowerCase()){ case \"w\" -> new Move.Up(0); case \"a\" -> new Move.Left(0); case \"s\" -> new Move.Down(0); case \"d\" -> new Move.Right(0); case \"k\" -> new Move.Up(1); case \"h\" -> new Move.Left(1); case \"j\" -> new Move.Down(1); case \"l\" -> new Move.Right(1); case \"u\" -> new Undo(0); case \"exit\" -> new Exit(0); case default -> new InvalidInput(0, \"error\"); }; // TODO return action; }",
        "label": "P"
    },
    "2350": {
        "dataset": "COMP 3021",
        "project": "ttmiao",
        "bug_id": "28",
        "T": "void testMove(String input, String name, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); } private InputStream fixValueStream(String content) { final var bytes = content.getBytes(StandardCharsets.UTF_8); return new ByteArrayInputStream(bytes); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine(); Action action = switch (inputLine.toLowerCase()){ case \"w\" -> new Move.Up(0); case \"a\" -> new Move.Left(0); case \"s\" -> new Move.Down(0); case \"d\" -> new Move.Right(0); case \"k\" -> new Move.Up(1); case \"h\" -> new Move.Left(1); case \"j\" -> new Move.Down(1); case \"l\" -> new Move.Right(1); case \"u\" -> new Undo(0); case \"exit\" -> new Exit(0); case default -> new InvalidInput(0, \"error\"); }; // TODO return action; }",
        "label": "P"
    },
    "2351": {
        "dataset": "COMP 3021",
        "project": "ttmiao",
        "bug_id": "29",
        "T": "void testMove(String input, String name, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); } private InputStream fixValueStream(String content) { final var bytes = content.getBytes(StandardCharsets.UTF_8); return new ByteArrayInputStream(bytes); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine(); Action action = switch (inputLine.toLowerCase()){ case \"w\" -> new Move.Up(0); case \"a\" -> new Move.Left(0); case \"s\" -> new Move.Down(0); case \"d\" -> new Move.Right(0); case \"k\" -> new Move.Up(1); case \"h\" -> new Move.Left(1); case \"j\" -> new Move.Down(1); case \"l\" -> new Move.Right(1); case \"u\" -> new Undo(0); case \"exit\" -> new Exit(0); case default -> new InvalidInput(0, \"error\"); }; // TODO return action; }",
        "label": "P"
    },
    "2352": {
        "dataset": "COMP 3021",
        "project": "ttmiao",
        "bug_id": "30",
        "T": "void testMove(String input, String name, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); } private InputStream fixValueStream(String content) { final var bytes = content.getBytes(StandardCharsets.UTF_8); return new ByteArrayInputStream(bytes); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine(); Action action = switch (inputLine.toLowerCase()){ case \"w\" -> new Move.Up(0); case \"a\" -> new Move.Left(0); case \"s\" -> new Move.Down(0); case \"d\" -> new Move.Right(0); case \"k\" -> new Move.Up(1); case \"h\" -> new Move.Left(1); case \"j\" -> new Move.Down(1); case \"l\" -> new Move.Right(1); case \"u\" -> new Undo(0); case \"exit\" -> new Exit(0); case default -> new InvalidInput(0, \"error\"); }; // TODO return action; }",
        "label": "P"
    },
    "2353": {
        "dataset": "COMP 3021",
        "project": "ttmiao",
        "bug_id": "31",
        "T": "void testMove(String input, String name, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); } private InputStream fixValueStream(String content) { final var bytes = content.getBytes(StandardCharsets.UTF_8); return new ByteArrayInputStream(bytes); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine(); Action action = switch (inputLine.toLowerCase()){ case \"w\" -> new Move.Up(0); case \"a\" -> new Move.Left(0); case \"s\" -> new Move.Down(0); case \"d\" -> new Move.Right(0); case \"k\" -> new Move.Up(1); case \"h\" -> new Move.Left(1); case \"j\" -> new Move.Down(1); case \"l\" -> new Move.Right(1); case \"u\" -> new Undo(0); case \"exit\" -> new Exit(0); case default -> new InvalidInput(0, \"error\"); }; // TODO return action; }",
        "label": "P"
    },
    "2354": {
        "dataset": "COMP 3021",
        "project": "ttmiao",
        "bug_id": "32",
        "T": "void testMove(String input, String name, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); } private InputStream fixValueStream(String content) { final var bytes = content.getBytes(StandardCharsets.UTF_8); return new ByteArrayInputStream(bytes); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine(); Action action = switch (inputLine.toLowerCase()){ case \"w\" -> new Move.Up(0); case \"a\" -> new Move.Left(0); case \"s\" -> new Move.Down(0); case \"d\" -> new Move.Right(0); case \"k\" -> new Move.Up(1); case \"h\" -> new Move.Left(1); case \"j\" -> new Move.Down(1); case \"l\" -> new Move.Right(1); case \"u\" -> new Undo(0); case \"exit\" -> new Exit(0); case default -> new InvalidInput(0, \"error\"); }; // TODO return action; }",
        "label": "P"
    },
    "2355": {
        "dataset": "COMP 3021",
        "project": "ttmiao",
        "bug_id": "33",
        "T": "void testMove(String input, String name, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); } private InputStream fixValueStream(String content) { final var bytes = content.getBytes(StandardCharsets.UTF_8); return new ByteArrayInputStream(bytes); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine(); Action action = switch (inputLine.toLowerCase()){ case \"w\" -> new Move.Up(0); case \"a\" -> new Move.Left(0); case \"s\" -> new Move.Down(0); case \"d\" -> new Move.Right(0); case \"k\" -> new Move.Up(1); case \"h\" -> new Move.Left(1); case \"j\" -> new Move.Down(1); case \"l\" -> new Move.Right(1); case \"u\" -> new Undo(0); case \"exit\" -> new Exit(0); case default -> new InvalidInput(0, \"error\"); }; // TODO return action; }",
        "label": "P"
    },
    "2356": {
        "dataset": "COMP 3021",
        "project": "ttmiao",
        "bug_id": "34",
        "T": "void testUndo(String input, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine(); Action action = switch (inputLine.toLowerCase()){ case \"w\" -> new Move.Up(0); case \"a\" -> new Move.Left(0); case \"s\" -> new Move.Down(0); case \"d\" -> new Move.Right(0); case \"k\" -> new Move.Up(1); case \"h\" -> new Move.Left(1); case \"j\" -> new Move.Down(1); case \"l\" -> new Move.Right(1); case \"u\" -> new Undo(0); case \"exit\" -> new Exit(0); case default -> new InvalidInput(0, \"error\"); }; // TODO return action; }",
        "label": "P"
    },
    "2357": {
        "dataset": "COMP 3021",
        "project": "ttmiao",
        "bug_id": "35",
        "T": "void testInvalidInput() { final var inputStream = fixValueStream(\"blah blah\"); final var inputEngine = new TerminalInputEngine(inputStream); final var action = inputEngine.fetchAction(); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine(); Action action = switch (inputLine.toLowerCase()){ case \"w\" -> new Move.Up(0); case \"a\" -> new Move.Left(0); case \"s\" -> new Move.Down(0); case \"d\" -> new Move.Right(0); case \"k\" -> new Move.Up(1); case \"h\" -> new Move.Left(1); case \"j\" -> new Move.Down(1); case \"l\" -> new Move.Right(1); case \"u\" -> new Undo(0); case \"exit\" -> new Exit(0); case default -> new InvalidInput(0, \"error\"); }; // TODO return action; }",
        "label": "P"
    },
    "2358": {
        "dataset": "COMP 3021",
        "project": "ttmiao",
        "bug_id": "36",
        "T": "void testUndoWhenThereIsNoMove() { final var gameState = new GameState(TestHelper.parseGameMap(\"\"\" 233 ###### #A.a@# #..a@# ###### \"\"\" )); gameState.undo(); } private Entity generateEntity(int key) { return switch (key % 4) { case 0 -> new Box(0); case 1 -> new Empty(); case 2 -> new Player(0); case 3 -> new Wall(); default -> throw new ShouldNotReachException(); }; }",
        "C": "public GameState(@NotNull GameMap map) { // TODO // this.map = map; this.maxHeight = map.getMaxHeight(); this.maxWidth = map.getMaxWidth(); this.entities = new Entity[maxHeight][maxWidth]; for (int y = 0; y < this.maxHeight; y++) { for (int x = 0; x < this.maxWidth; x++) { final var entity = map.getEntity(Position.of(x, y)); this.entities[y][x] = entity; } } this.playerIds = map.getPlayerIds(); this.undoLimit = map.getUndoLimit(); this.destinations = map.getDestinations(); this.checkpoint(); } public void undo() { // TODO if(this.checkpointEntities.size() <= 1){ this.entities = this.checkpointEntities.pop(); this.checkpoint(); }else{ if(this.undoLimit.get() > 0) this.undoLimit = Optional.of(this.undoLimit.get() - 1); this.checkpointEntities.pop(); this.entities = this.checkpointEntities.pop(); this.checkpoint(); } } /** * Get the maximum width of the game map. * This should be the same as that in {@link GameMap} public TerminalRenderingEngine(PrintStream outputSteam) { this.outputSteam = outputSteam; } public Box(int playerId) { this.playerId = playerId; } public Player(int id) { this.id = id; } public ShouldNotReachException() { super(\"This branch should not be reached.\"); }",
        "label": "P"
    },
    "2359": {
        "dataset": "COMP 3021",
        "project": "ttmiao",
        "bug_id": "37",
        "T": "void testGetUndoUnlimited() { final var gameState = new GameState(TestHelper.parseGameMap(\"\"\" -1 ###### #.Aa@# #..a@# ###### \"\"\" )); }",
        "C": "public GameState(@NotNull GameMap map) { // TODO // this.map = map; this.maxHeight = map.getMaxHeight(); this.maxWidth = map.getMaxWidth(); this.entities = new Entity[maxHeight][maxWidth]; for (int y = 0; y < this.maxHeight; y++) { for (int x = 0; x < this.maxWidth; x++) { final var entity = map.getEntity(Position.of(x, y)); this.entities[y][x] = entity; } } this.playerIds = map.getPlayerIds(); this.undoLimit = map.getUndoLimit(); this.destinations = map.getDestinations(); this.checkpoint(); }",
        "label": "P"
    },
    "2360": {
        "dataset": "COMP 3021",
        "project": "ttmiao",
        "bug_id": "38",
        "T": "void testMapCopying() { final var maxWidth = 2333; final var maxHeight = 2333; final var random = new Random(); final var randomEntities = Stream.generate(() -> Position.of(random.nextInt(maxWidth), random.nextInt(maxHeight))) .distinct() .limit(100) .collect(Collectors.toMap(Function.identity(), it -> generateEntity(it.x()))); final var firstPos = randomEntities.keySet().stream().findFirst(); final var gameMap = new GameMap(maxWidth, maxHeight, Collections.singleton(firstPos.get()), 233); randomEntities.forEach(gameMap::putEntity); final var gameState = new GameState(gameMap); final var randomPosition = randomEntities.keySet().stream().findAny(); gameMap.putEntity(randomPosition.get(), new Empty()); randomEntities.forEach((p, e) -> assertEquals(e, gameState.getEntity(p))); }",
        "C": "public static @NotNull Position of(int x, int y) { return new Position(x, y); } public GameMap(int maxWidth, int maxHeight, Set<Position> destinations, int undoLimit) { // TODO this.maxWidth = maxWidth; this.maxHeight = maxHeight; this.destinations = destinations; this.undoLimit = undoLimit; this.entities = new Entity[maxHeight][maxWidth]; } /** * Parses the map from a string representation. * The first line is undo limit. * Starting from the second line, the game map is represented as follows, * <li># represents a {@link Wall}</li> * <li>@ represents a box destination.</li> * <li>Any upper-case letter represents a {@link Player}.</li> * <li> * Any lower-case letter represents a {@link Box} that is only movable by the player with the corresponding upper-case letter. * For instance, box \"a\" can only be moved by player \"A\" and not movable by player \"B\". * </li> * <li>. represents an {@link Empty} position in the map, meaning there is no player or box currently at this position.</li> * <p> * Notes: * <li> * There can be at most 26 players. * All implementations of classes in the hk.ust.comp3021.game package should support up to 26 players. * </li> * <li> * For simplicity, we assume the given map is bounded with a closed boundary. * There is no need to check this point. * </li> * <li> * Example maps can be found in \"src/main/resources\". * </li> * * @param mapText The string representation. * @return The parsed GameMap object. * @throws IllegalArgumentException if undo limit is negative but not -1. * @throws IllegalArgumentException if there are multiple same upper-case letters, i.e., one player can only exist at one position. * @throws IllegalArgumentException if there are no players in the map. * @throws IllegalArgumentException if the number of boxes is not equal to the number of box destinations. * @throws IllegalArgumentException if there are boxes whose {@link Box#getPlayerId()} public GameState(@NotNull GameMap map) { // TODO // this.map = map; this.maxHeight = map.getMaxHeight(); this.maxWidth = map.getMaxWidth(); this.entities = new Entity[maxHeight][maxWidth]; for (int y = 0; y < this.maxHeight; y++) { for (int x = 0; x < this.maxWidth; x++) { final var entity = map.getEntity(Position.of(x, y)); this.entities[y][x] = entity; } } this.playerIds = map.getPlayerIds(); this.undoLimit = map.getUndoLimit(); this.destinations = map.getDestinations(); this.checkpoint(); } public void putEntity(Position position, Entity entity) { // TODO // entities.put(position, entity); this.entities[position.y()][position.x()] = entity; // throw new NotImplementedException(); } public @Nullable Entity getEntity(@NotNull Position position) { // TODO if(position.x() >= maxWidth || position.y() >= maxHeight){ return null; }else{ return entities[position.y()][position.x()]; } } /** * Get all box destination positions as a set in the game map. * This should be the same as that in {@link GameMap}",
        "label": "P"
    },
    "2361": {
        "dataset": "COMP 3021",
        "project": "ttmiao",
        "bug_id": "39",
        "T": "void testUndoWhenThereIsMoveButNoCheckpoint() { final var gameState = new GameState(TestHelper.parseGameMap(\"\"\" 233 ###### #A.a@# #..a@# ###### \"\"\" )); gameState.move(Position.of(1, 1), Position.of(2, 1)); gameState.undo(); }",
        "C": "public GameState(@NotNull GameMap map) { // TODO // this.map = map; this.maxHeight = map.getMaxHeight(); this.maxWidth = map.getMaxWidth(); this.entities = new Entity[maxHeight][maxWidth]; for (int y = 0; y < this.maxHeight; y++) { for (int x = 0; x < this.maxWidth; x++) { final var entity = map.getEntity(Position.of(x, y)); this.entities[y][x] = entity; } } this.playerIds = map.getPlayerIds(); this.undoLimit = map.getUndoLimit(); this.destinations = map.getDestinations(); this.checkpoint(); } public void move(Position from, Position to) { // TODO var temp = this.entities[from.y()][from.x()]; this.entities[from.y()][from.x()] = this.entities[to.y()][to.x()]; this.entities[to.y()][to.x()] = temp; } /** * Record a checkpoint of the game state, including: * <li>All current positions of entities in the game map.</li> * <li>Current undo quota</li> * <p> * Checkpoint is used in {@link GameState#undo()} public static @NotNull Position of(int x, int y) { return new Position(x, y); } public void undo() { // TODO if(this.checkpointEntities.size() <= 1){ this.entities = this.checkpointEntities.pop(); this.checkpoint(); }else{ if(this.undoLimit.get() > 0) this.undoLimit = Optional.of(this.undoLimit.get() - 1); this.checkpointEntities.pop(); this.entities = this.checkpointEntities.pop(); this.checkpoint(); } } /** * Get the maximum width of the game map. * This should be the same as that in {@link GameMap}",
        "label": "P"
    },
    "2362": {
        "dataset": "COMP 3021",
        "project": "ttmiao",
        "bug_id": "40",
        "T": "void testGameExit() { final var gameState = mock(GameState.class); final var inputEngine = mock(TerminalInputEngine.class); final var renderingEngine = mock(TerminalRenderingEngine.class); when(gameState.isWin()).thenReturn(false, false, false); when(inputEngine.fetchAction()) .thenReturn(new InvalidInput(0, \"\"), new InvalidInput(0, \"\"), new Exit(0)); final var game = new TerminalSokobanGame(gameState, inputEngine, renderingEngine); game.run(); verify(renderingEngine, atLeastOnce()).message(any()); }",
        "C": "public InvalidInput(int initiator, @NotNull String message) { super(initiator); this.message = message; } public Exit(int initiator) { super(initiator); } public TerminalSokobanGame(GameState gameState, TerminalInputEngine inputEngine, TerminalRenderingEngine renderingEngine) { super(gameState); this.inputEngine = inputEngine; this.renderingEngine = renderingEngine; // TODO // Check the number of players var playersCount = gameState.getAllPlayerPositions().size(); if(playersCount > 2) throw new IllegalArgumentException(\"TerminalSokobanGame only support at most two players.\"); this.renderingEngine.message(\"Sokoban game is ready.\"); this.renderingEngine.render(this.state); var undoQuota = state.getUndoQuota(); this.renderingEngine.message(\"Undo Quota: \" + (undoQuota.isPresent() ? undoQuota.get() : \"Unlimited\")); } public void run() { // TODO while(true){ var actionResult = this.processAction(inputEngine.fetchAction()); if(this.shouldStop()){ this.renderingEngine.render(this.state); this.renderingEngine.message(\"Game exits.\"); if(this.state.isWin()){ this.renderingEngine.message(\"You Win.\"); } return; } var undoQuota = state.getUndoQuota(); if(actionResult instanceof ActionResult.Failed f){ this.renderingEngine.message(f.getReason()); this.renderingEngine.render(this.state); this.renderingEngine.message(\"Undo Quota: \" + (undoQuota.isPresent() ? undoQuota.get() : \"Unlimited\")); continue; }else { this.renderingEngine.render(this.state); this.renderingEngine.message(\"Undo Quota: \" + (undoQuota.isPresent() ? undoQuota.get() : \"Unlimited\")); } } }",
        "label": "P"
    },
    "2363": {
        "dataset": "COMP 3021",
        "project": "ttmiao",
        "bug_id": "41",
        "T": "void testGameWin() { final var gameState = mock(GameState.class); final var inputEngine = mock(TerminalInputEngine.class); final var renderingEngine = mock(TerminalRenderingEngine.class); when(gameState.isWin()).thenReturn(false, false, false, true); when(inputEngine.fetchAction()) .thenReturn(new InvalidInput(0, \"\")); final var game = new TerminalSokobanGame(gameState, inputEngine, renderingEngine); game.run(); verify(gameState, atLeastOnce()).isWin(); verify(renderingEngine, atLeastOnce()).message(any()); }",
        "C": "public InvalidInput(int initiator, @NotNull String message) { super(initiator); this.message = message; } public TerminalSokobanGame(GameState gameState, TerminalInputEngine inputEngine, TerminalRenderingEngine renderingEngine) { super(gameState); this.inputEngine = inputEngine; this.renderingEngine = renderingEngine; // TODO // Check the number of players var playersCount = gameState.getAllPlayerPositions().size(); if(playersCount > 2) throw new IllegalArgumentException(\"TerminalSokobanGame only support at most two players.\"); this.renderingEngine.message(\"Sokoban game is ready.\"); this.renderingEngine.render(this.state); var undoQuota = state.getUndoQuota(); this.renderingEngine.message(\"Undo Quota: \" + (undoQuota.isPresent() ? undoQuota.get() : \"Unlimited\")); } public void run() { // TODO while(true){ var actionResult = this.processAction(inputEngine.fetchAction()); if(this.shouldStop()){ this.renderingEngine.render(this.state); this.renderingEngine.message(\"Game exits.\"); if(this.state.isWin()){ this.renderingEngine.message(\"You Win.\"); } return; } var undoQuota = state.getUndoQuota(); if(actionResult instanceof ActionResult.Failed f){ this.renderingEngine.message(f.getReason()); this.renderingEngine.render(this.state); this.renderingEngine.message(\"Undo Quota: \" + (undoQuota.isPresent() ? undoQuota.get() : \"Unlimited\")); continue; }else { this.renderingEngine.render(this.state); this.renderingEngine.message(\"Undo Quota: \" + (undoQuota.isPresent() ? undoQuota.get() : \"Unlimited\")); } } }",
        "label": "P"
    },
    "2364": {
        "dataset": "COMP 3021",
        "project": "ttmiao",
        "bug_id": "42",
        "T": "void testMoreThanTwoPlayers() { final var gameState = mock(GameState.class); final var inputEngine = mock(TerminalInputEngine.class); final var renderingEngine = mock(TerminalRenderingEngine.class); when(gameState.getAllPlayerPositions()).thenReturn(new HashSet<>(Arrays.asList(Position.of(1, 1), Position.of(1, 2), Position.of(1, 3)))); }",
        "C": "public static @NotNull Position of(int x, int y) { return new Position(x, y); }",
        "label": "P"
    },
    "2365": {
        "dataset": "COMP 3021",
        "project": "slmaaa",
        "bug_id": "0",
        "T": "void moveUp() { Position.of(233, 232), new Move.Up(-1).nextPosition(pos) ); }",
        "C": "public static @NotNull Position of(int x, int y) { return new Position(x, y); } public Up(int initiator) { super(initiator); }",
        "label": "P"
    },
    "2366": {
        "dataset": "COMP 3021",
        "project": "slmaaa",
        "bug_id": "1",
        "T": "void moveDown() { Position.of(233, 234), new Move.Down(-1).nextPosition(pos) ); }",
        "C": "public static @NotNull Position of(int x, int y) { return new Position(x, y); } public Down(int initiator) { super(initiator); }",
        "label": "P"
    },
    "2367": {
        "dataset": "COMP 3021",
        "project": "slmaaa",
        "bug_id": "2",
        "T": "void moveRight() { Position.of(234, 233), new Move.Right(-1).nextPosition(pos) ); }",
        "C": "public static @NotNull Position of(int x, int y) { return new Position(x, y); } public Right(int initiator) { super(initiator); }",
        "label": "P"
    },
    "2368": {
        "dataset": "COMP 3021",
        "project": "slmaaa",
        "bug_id": "3",
        "T": "void testExceedingUndoQuota() { final var gameState = mock(GameState.class); when(gameState.getPlayerPositionById(anyInt())).thenReturn(Position.of(0, 0)); when(gameState.getUndoQuota()).thenReturn(Optional.of(0)); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Undo(0)); }",
        "C": "public Undo(int initiator) { super(initiator); }",
        "label": "P"
    },
    "2369": {
        "dataset": "COMP 3021",
        "project": "slmaaa",
        "bug_id": "4",
        "T": "void testExit() { final var gameState = mock(GameState.class); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Exit(0)); }",
        "C": "public Exit(int initiator) { super(initiator); }",
        "label": "P"
    },
    "2370": {
        "dataset": "COMP 3021",
        "project": "slmaaa",
        "bug_id": "5",
        "T": "void testUndoUnlimited() { final var gameState = mock(GameState.class); when(gameState.getPlayerPositionById(anyInt())).thenReturn(Position.of(0, 0)); when(gameState.getUndoQuota()).thenReturn(Optional.empty()); final var game = new SokobanGameForTesting(gameState); for (int i = 0; i < 10000; i++) { final var result = game.feedActionForProcessing(new Undo(0)); } verify(gameState, times(10000)).undo(); }",
        "C": "public TerminalRenderingEngine(PrintStream outputSteam) { this.outputSteam = outputSteam; } public Undo(int initiator) { super(initiator); }",
        "label": "F"
    },
    "2371": {
        "dataset": "COMP 3021",
        "project": "slmaaa",
        "bug_id": "6",
        "T": "void testPushOtherPlayerBox() { String mapText = \"\"\" 233 ###### #AB.@# #b.a.# #@...# ###### \"\"\"; final var testMap = TestHelper.parseGameMap(mapText); final var gameState = spy(new GameState(testMap)); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Move.Down(0)); verify(gameState, never()).move(any(), any()); }",
        "C": "public GameState(@NotNull GameMap map) { this.gameMap = map; this.undoQuota = map.getUndoLimit(); this.checkpointStates = new ArrayList<GameMap>(map.getUndoLimit().get()); this.currentState = new GameMap(map); } public Down(int initiator) { super(initiator); }",
        "label": "P"
    },
    "2372": {
        "dataset": "COMP 3021",
        "project": "slmaaa",
        "bug_id": "7",
        "T": "void testMoveNonExistingPlayer() { String mapText = \"\"\" 233 ###### #A..@# #a...# ##...# ###### \"\"\"; final var testMap = TestHelper.parseGameMap(mapText); final var gameState = spy(new GameState(testMap)); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Move.Down(23)); }",
        "C": "public GameState(@NotNull GameMap map) { this.gameMap = map; this.undoQuota = map.getUndoLimit(); this.checkpointStates = new ArrayList<GameMap>(map.getUndoLimit().get()); this.currentState = new GameMap(map); } public Down(int initiator) { super(initiator); }",
        "label": "F"
    },
    "2373": {
        "dataset": "COMP 3021",
        "project": "slmaaa",
        "bug_id": "8",
        "T": "void testCheckpointWhenNeed() { final var gameState = spy(new GameState(TestHelper.parseGameMap(\"\"\" 233 ###### #.Aa@# #..a@# ###### \"\"\" ))); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Move.Right(0)); verify(gameState, times(1)).checkpoint(); }",
        "C": "public GameState(@NotNull GameMap map) { this.gameMap = map; this.undoQuota = map.getUndoLimit(); this.checkpointStates = new ArrayList<GameMap>(map.getUndoLimit().get()); this.currentState = new GameMap(map); } public Right(int initiator) { super(initiator); }",
        "label": "P"
    },
    "2374": {
        "dataset": "COMP 3021",
        "project": "slmaaa",
        "bug_id": "9",
        "T": "void testPushBoxAgainstWall() { String mapText = \"\"\" 233 ###### #A..@# #a...# ##...# ###### \"\"\"; final var testMap = TestHelper.parseGameMap(mapText); final var gameState = spy(new GameState(testMap)); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Move.Down(0)); verify(gameState, never()).move(any(), any()); }",
        "C": "public GameState(@NotNull GameMap map) { this.gameMap = map; this.undoQuota = map.getUndoLimit(); this.checkpointStates = new ArrayList<GameMap>(map.getUndoLimit().get()); this.currentState = new GameMap(map); } public Down(int initiator) { super(initiator); }",
        "label": "P"
    },
    "2375": {
        "dataset": "COMP 3021",
        "project": "slmaaa",
        "bug_id": "10",
        "T": "void testCheckpointWhenNotNeed() { final var gameState = spy(new GameState(TestHelper.parseGameMap(\"\"\" 233 ###### #A.a@# #..a@# ###### \"\"\" ))); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Move.Right(0)); verify(gameState, never()).checkpoint(); } private static class SokobanGameForTesting extends AbstractSokobanGame { protected SokobanGameForTesting(GameState gameState) { super(gameState); } @Override public void run() { } public ActionResult feedActionForProcessing(Action action) { return processAction(action); } }",
        "C": "public GameState(@NotNull GameMap map) { this.gameMap = map; this.undoQuota = map.getUndoLimit(); this.checkpointStates = new ArrayList<GameMap>(map.getUndoLimit().get()); this.currentState = new GameMap(map); } public Right(int initiator) { super(initiator); } public void run() { // TODO renderingEngine.message(StringResources.GAME_READY_MESSAGE); renderingEngine.render(state); while (!super.shouldStop()) { Action action = inputEngine.fetchAction(); String undoQuota; if (state.getUndoQuota().isEmpty()) { undoQuota = StringResources.UNDO_QUOTA_UNLIMITED; } else { undoQuota = Integer.toString(state.getUndoQuota().get()); } renderingEngine.message(String.format(StringResources.UNDO_QUOTA_TEMPLATE, undoQuota)); ActionResult actionResult = super.processAction(action); if (actionResult instanceof ActionResult.Failed) { renderingEngine.message(((ActionResult.Failed) actionResult).getReason()); } else { if (state.isWin()) { renderingEngine.message(StringResources.WIN_MESSAGE); } } renderingEngine.render(state); } renderingEngine.message(StringResources.GAME_EXIT_MESSAGE); } protected ActionResult processAction(@NotNull Action action) { if (action instanceof InvalidInput) { return new ActionResult.Failed(action, \"Invalid Input\"); } if (action instanceof Exit) { isExit = true; return new ActionResult.Success(action); } if (action instanceof Undo) { int undoQuota = state.getUndoQuota().get(); if (undoQuota == 0) { return new ActionResult.Failed(action, \"Undo quota is zero\"); } else { this.state.undo(); return new ActionResult.Success(action); } } if (action instanceof Move) { var currentPosition = state.getPlayerPositionById(action.getInitiator()); var nextPosition = ((Move) action).nextPosition(currentPosition); var nextPositionEntity = state.getEntity(nextPosition); var currentPlayer = (Player) state.getEntity(currentPosition); if (nextPositionEntity instanceof Wall) { return new ActionResult.Failed(action, \"You hit a wall.\"); } if (nextPositionEntity instanceof Empty) { state.move(currentPosition, nextPosition); return new ActionResult.Success(action); } if (nextPositionEntity instanceof Player) { return new ActionResult.Failed(action, \"You hit a player.\"); } if (nextPositionEntity instanceof Box) { if (((Box) nextPositionEntity).getPlayerId() != currentPlayer.getId()) { return new ActionResult.Failed(action, \"Player ID does not match box player ID.\"); } var nextBoxPosition = ((Move) action).nextPosition(nextPosition); var nextBoxPositionEntity = state.getEntity(nextBoxPosition); if (nextBoxPositionEntity instanceof Wall) { return new ActionResult.Failed(action, \"Failed to push the box.\"); } if (nextBoxPositionEntity instanceof Player) { return new ActionResult.Failed(action, \"Failed to push the box.\"); } if (nextBoxPositionEntity instanceof Box) { return new ActionResult.Failed(action, \"Failed to push the box.\"); } if (nextBoxPositionEntity instanceof Empty) { state.checkpoint(); state.move(nextPosition, nextBoxPosition); state.move(currentPosition, nextPosition); return new ActionResult.Success(action); } else { return new ActionResult.Failed(action, \"Unknown entity on next Box position\"); } } else { return new ActionResult.Failed(action, \"Unknwon entity on next position \"); } } else { return new ActionResult.Failed(action, \"Unknown action\"); } }",
        "label": "P"
    },
    "2376": {
        "dataset": "COMP 3021",
        "project": "slmaaa",
        "bug_id": "11",
        "T": "void testHitAnotherPlayer() { String mapText = \"\"\" 233 ###### #A..@# #B...# #ab.@# ###### \"\"\"; final var testMap = TestHelper.parseGameMap(mapText); final var gameState = spy(new GameState(testMap)); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Move.Down(0)); verify(gameState, never()).move(any(), any()); }",
        "C": "public GameState(@NotNull GameMap map) { this.gameMap = map; this.undoQuota = map.getUndoLimit(); this.checkpointStates = new ArrayList<GameMap>(map.getUndoLimit().get()); this.currentState = new GameMap(map); } public Down(int initiator) { super(initiator); }",
        "label": "P"
    },
    "2377": {
        "dataset": "COMP 3021",
        "project": "slmaaa",
        "bug_id": "12",
        "T": "void testUndoWithinQuota() { final var gameState = mock(GameState.class); when(gameState.getPlayerPositionById(anyInt())).thenReturn(Position.of(0, 0)); when(gameState.getUndoQuota()).thenReturn(Optional.of(1)); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Undo(0)); verify(gameState, times(1)).undo(); }",
        "C": "public Undo(int initiator) { super(initiator); }",
        "label": "P"
    },
    "2378": {
        "dataset": "COMP 3021",
        "project": "slmaaa",
        "bug_id": "13",
        "T": "void testInvalidInput() { final var game = new SokobanGameForTesting(mock(GameState.class)); final var message = String.valueOf(new Random().nextLong()); final var action = new InvalidInput(-1, message); final var result = game.feedActionForProcessing(action); }",
        "C": "public InvalidInput(int initiator, @NotNull String message) { super(initiator); this.message = message; }",
        "label": "P"
    },
    "2379": {
        "dataset": "COMP 3021",
        "project": "slmaaa",
        "bug_id": "14",
        "T": "void testUndoLimitParsing() { final var gameMap = TestHelper.parseGameMap(rectangularMap); }",
        "C": "",
        "label": "P"
    },
    "2380": {
        "dataset": "COMP 3021",
        "project": "slmaaa",
        "bug_id": "15",
        "T": "void testWidthForNonRectangularMap() { final var gameMap = TestHelper.parseGameMap(nonRectangularMap); }",
        "C": "",
        "label": "P"
    },
    "2381": {
        "dataset": "COMP 3021",
        "project": "slmaaa",
        "bug_id": "16",
        "T": "void testTwoPlayersMap() { final var twoPlayersMap = \"\"\" 233 ###### #A..@# #..B@# #....# #.a..# #..b.# ###### \"\"\"; final var gameMap = TestHelper.parseGameMap(twoPlayersMap); final var playerIds = gameMap.getPlayerIds(); final var expectedIds = new HashSet<Integer>(); expectedIds.add(0); expectedIds.add(1); }",
        "C": "public Set<Integer> getPlayerIds() { return this.playerPositions.keySet(); }",
        "label": "P"
    },
    "2382": {
        "dataset": "COMP 3021",
        "project": "slmaaa",
        "bug_id": "17",
        "T": "void testMapWithoutPlayer() { final var invalidMap = \"\"\" 233 ### #.# ### \"\"\"; } // @Tag(TestKind.HIDDEN) // @Test // void testUnmatchedPlayersAndBoxes() { // final var invalidMap = \"\"\" // 233 // ###### // #A..@# // #...@# // #a.b@# // #.a.@# // #..a.# // ###### // \"\"\"; // assertThrowsExactly(IllegalArgumentException.class, () -> TestHelper.parseGameMap(invalidMap)); // }",
        "C": "public TerminalRenderingEngine(PrintStream outputSteam) { this.outputSteam = outputSteam; }",
        "label": "P"
    },
    "2383": {
        "dataset": "COMP 3021",
        "project": "slmaaa",
        "bug_id": "18",
        "T": "void testManyPlayersMap() { final var manyPlayersMap = \"\"\" 233 ###### #A.P@@# #vCB@@# #.cpD@# #Ga.d@# #g.bV@# ###### \"\"\"; final var gameMap = TestHelper.parseGameMap(manyPlayersMap); final var playerIds = gameMap.getPlayerIds(); final var expectedIds = new HashSet<>(Arrays.asList( 0, 'P' - 'A', 'C' - 'A', 'B' - 'A', 'D' - 'A', 'G' - 'A', 'V' - 'A' )); }",
        "C": "public Set<Integer> getPlayerIds() { return this.playerPositions.keySet(); }",
        "label": "P"
    },
    "2384": {
        "dataset": "COMP 3021",
        "project": "slmaaa",
        "bug_id": "19",
        "T": "void testHeightForNonRectangularMap() { final var gameMap = TestHelper.parseGameMap(nonRectangularMap); }",
        "C": "",
        "label": "P"
    },
    "2385": {
        "dataset": "COMP 3021",
        "project": "slmaaa",
        "bug_id": "20",
        "T": "void testDuplicatedPlayers() { final var invalidMap = \"\"\" 233 ###### #A..@# #..A@# #....# #.a..# #..b.# ###### \"\"\"; }",
        "C": "",
        "label": "P"
    },
    "2386": {
        "dataset": "COMP 3021",
        "project": "slmaaa",
        "bug_id": "21",
        "T": "void testParseMapWithoutUndoLimit() { final var invalidMap = String.join(\"\\n\", rectangularMap.lines().skip(1).toList()); }",
        "C": "",
        "label": "P"
    },
    "2387": {
        "dataset": "COMP 3021",
        "project": "slmaaa",
        "bug_id": "22",
        "T": "void testInsufficientDestinations() { final var invalidMap = \"\"\" 233 ###### #A..@# #...@# #a...# #.a..# #..a.# ###### \"\"\"; }",
        "C": "",
        "label": "P"
    },
    "2388": {
        "dataset": "COMP 3021",
        "project": "slmaaa",
        "bug_id": "23",
        "T": "void testSuperLargeMap() { try { new GameMap(Integer.MAX_VALUE, Integer.MAX_VALUE, Collections.emptySet(), 0); } catch (OutOfMemoryError e) { throw new RuntimeException(e); } }); }",
        "C": "public GameMap(int maxWidth, int maxHeight, Set<Position> destinations, int undoLimit) { this.maxWidth = maxWidth; this.maxHeight = maxHeight; this.boxDestinations = destinations; this.undoLimit = undoLimit == -1 ? Optional.empty() : Optional.of(undoLimit); } public TerminalRenderingEngine(PrintStream outputSteam) { this.outputSteam = outputSteam; }",
        "label": "P"
    },
    "2389": {
        "dataset": "COMP 3021",
        "project": "slmaaa",
        "bug_id": "24",
        "T": "void testInvalidUndoLimit() { final var invalidMap = \"\"\" -233 ###### #A..@# #...@# #a.b@# #.a.@# #..a.# ###### \"\"\"; }",
        "C": "",
        "label": "P"
    },
    "2390": {
        "dataset": "COMP 3021",
        "project": "slmaaa",
        "bug_id": "25",
        "T": "void testEmptyMap() { final var invalidMap = \"\"; }",
        "C": "",
        "label": "P"
    },
    "2391": {
        "dataset": "COMP 3021",
        "project": "slmaaa",
        "bug_id": "26",
        "T": "void testMove(String input, String name, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); } private InputStream fixValueStream(String content) { final var bytes = content.getBytes(StandardCharsets.UTF_8); return new ByteArrayInputStream(bytes); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine().toUpperCase(); switch (inputLine) { case \"A\": return new Move.Left(0); case \"D\": return new Move.Right(0); case \"W\": return new Move.Up(0); case \"S\": return new Move.Down(0); case \"H\": return new Move.Left(0); case \"L\": return new Move.Right(0); case \"K\": return new Move.Up(0); case \"J\": return new Move.Down(0); case \"U\": return new Undo(-1); case \"EXIT\": return new Exit(-1); default: return new InvalidInput(-1, \"\"); } }",
        "label": "P"
    },
    "2392": {
        "dataset": "COMP 3021",
        "project": "slmaaa",
        "bug_id": "27",
        "T": "void testMove(String input, String name, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); } private InputStream fixValueStream(String content) { final var bytes = content.getBytes(StandardCharsets.UTF_8); return new ByteArrayInputStream(bytes); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine().toUpperCase(); switch (inputLine) { case \"A\": return new Move.Left(0); case \"D\": return new Move.Right(0); case \"W\": return new Move.Up(0); case \"S\": return new Move.Down(0); case \"H\": return new Move.Left(0); case \"L\": return new Move.Right(0); case \"K\": return new Move.Up(0); case \"J\": return new Move.Down(0); case \"U\": return new Undo(-1); case \"EXIT\": return new Exit(-1); default: return new InvalidInput(-1, \"\"); } }",
        "label": "P"
    },
    "2393": {
        "dataset": "COMP 3021",
        "project": "slmaaa",
        "bug_id": "28",
        "T": "void testMove(String input, String name, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); } private InputStream fixValueStream(String content) { final var bytes = content.getBytes(StandardCharsets.UTF_8); return new ByteArrayInputStream(bytes); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine().toUpperCase(); switch (inputLine) { case \"A\": return new Move.Left(0); case \"D\": return new Move.Right(0); case \"W\": return new Move.Up(0); case \"S\": return new Move.Down(0); case \"H\": return new Move.Left(0); case \"L\": return new Move.Right(0); case \"K\": return new Move.Up(0); case \"J\": return new Move.Down(0); case \"U\": return new Undo(-1); case \"EXIT\": return new Exit(-1); default: return new InvalidInput(-1, \"\"); } }",
        "label": "P"
    },
    "2394": {
        "dataset": "COMP 3021",
        "project": "slmaaa",
        "bug_id": "29",
        "T": "void testMove(String input, String name, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); } private InputStream fixValueStream(String content) { final var bytes = content.getBytes(StandardCharsets.UTF_8); return new ByteArrayInputStream(bytes); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine().toUpperCase(); switch (inputLine) { case \"A\": return new Move.Left(0); case \"D\": return new Move.Right(0); case \"W\": return new Move.Up(0); case \"S\": return new Move.Down(0); case \"H\": return new Move.Left(0); case \"L\": return new Move.Right(0); case \"K\": return new Move.Up(0); case \"J\": return new Move.Down(0); case \"U\": return new Undo(-1); case \"EXIT\": return new Exit(-1); default: return new InvalidInput(-1, \"\"); } }",
        "label": "P"
    },
    "2395": {
        "dataset": "COMP 3021",
        "project": "slmaaa",
        "bug_id": "30",
        "T": "void testMove(String input, String name, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); } private InputStream fixValueStream(String content) { final var bytes = content.getBytes(StandardCharsets.UTF_8); return new ByteArrayInputStream(bytes); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine().toUpperCase(); switch (inputLine) { case \"A\": return new Move.Left(0); case \"D\": return new Move.Right(0); case \"W\": return new Move.Up(0); case \"S\": return new Move.Down(0); case \"H\": return new Move.Left(0); case \"L\": return new Move.Right(0); case \"K\": return new Move.Up(0); case \"J\": return new Move.Down(0); case \"U\": return new Undo(-1); case \"EXIT\": return new Exit(-1); default: return new InvalidInput(-1, \"\"); } }",
        "label": "F"
    },
    "2396": {
        "dataset": "COMP 3021",
        "project": "slmaaa",
        "bug_id": "31",
        "T": "void testMove(String input, String name, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); } private InputStream fixValueStream(String content) { final var bytes = content.getBytes(StandardCharsets.UTF_8); return new ByteArrayInputStream(bytes); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine().toUpperCase(); switch (inputLine) { case \"A\": return new Move.Left(0); case \"D\": return new Move.Right(0); case \"W\": return new Move.Up(0); case \"S\": return new Move.Down(0); case \"H\": return new Move.Left(0); case \"L\": return new Move.Right(0); case \"K\": return new Move.Up(0); case \"J\": return new Move.Down(0); case \"U\": return new Undo(-1); case \"EXIT\": return new Exit(-1); default: return new InvalidInput(-1, \"\"); } }",
        "label": "F"
    },
    "2397": {
        "dataset": "COMP 3021",
        "project": "slmaaa",
        "bug_id": "32",
        "T": "void testMove(String input, String name, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); } private InputStream fixValueStream(String content) { final var bytes = content.getBytes(StandardCharsets.UTF_8); return new ByteArrayInputStream(bytes); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine().toUpperCase(); switch (inputLine) { case \"A\": return new Move.Left(0); case \"D\": return new Move.Right(0); case \"W\": return new Move.Up(0); case \"S\": return new Move.Down(0); case \"H\": return new Move.Left(0); case \"L\": return new Move.Right(0); case \"K\": return new Move.Up(0); case \"J\": return new Move.Down(0); case \"U\": return new Undo(-1); case \"EXIT\": return new Exit(-1); default: return new InvalidInput(-1, \"\"); } }",
        "label": "F"
    },
    "2398": {
        "dataset": "COMP 3021",
        "project": "slmaaa",
        "bug_id": "33",
        "T": "void testMove(String input, String name, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); } private InputStream fixValueStream(String content) { final var bytes = content.getBytes(StandardCharsets.UTF_8); return new ByteArrayInputStream(bytes); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine().toUpperCase(); switch (inputLine) { case \"A\": return new Move.Left(0); case \"D\": return new Move.Right(0); case \"W\": return new Move.Up(0); case \"S\": return new Move.Down(0); case \"H\": return new Move.Left(0); case \"L\": return new Move.Right(0); case \"K\": return new Move.Up(0); case \"J\": return new Move.Down(0); case \"U\": return new Undo(-1); case \"EXIT\": return new Exit(-1); default: return new InvalidInput(-1, \"\"); } }",
        "label": "F"
    },
    "2399": {
        "dataset": "COMP 3021",
        "project": "slmaaa",
        "bug_id": "34",
        "T": "void testUndo(String input, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine().toUpperCase(); switch (inputLine) { case \"A\": return new Move.Left(0); case \"D\": return new Move.Right(0); case \"W\": return new Move.Up(0); case \"S\": return new Move.Down(0); case \"H\": return new Move.Left(0); case \"L\": return new Move.Right(0); case \"K\": return new Move.Up(0); case \"J\": return new Move.Down(0); case \"U\": return new Undo(-1); case \"EXIT\": return new Exit(-1); default: return new InvalidInput(-1, \"\"); } }",
        "label": "P"
    },
    "2400": {
        "dataset": "COMP 3021",
        "project": "slmaaa",
        "bug_id": "35",
        "T": "void testInvalidInput() { final var inputStream = fixValueStream(\"blah blah\"); final var inputEngine = new TerminalInputEngine(inputStream); final var action = inputEngine.fetchAction(); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine().toUpperCase(); switch (inputLine) { case \"A\": return new Move.Left(0); case \"D\": return new Move.Right(0); case \"W\": return new Move.Up(0); case \"S\": return new Move.Down(0); case \"H\": return new Move.Left(0); case \"L\": return new Move.Right(0); case \"K\": return new Move.Up(0); case \"J\": return new Move.Down(0); case \"U\": return new Undo(-1); case \"EXIT\": return new Exit(-1); default: return new InvalidInput(-1, \"\"); } }",
        "label": "P"
    },
    "2401": {
        "dataset": "COMP 3021",
        "project": "slmaaa",
        "bug_id": "36",
        "T": "void testUndoWhenThereIsNoMove() { final var gameState = new GameState(TestHelper.parseGameMap(\"\"\" 233 ###### #A.a@# #..a@# ###### \"\"\" )); gameState.undo(); } private Entity generateEntity(int key) { return switch (key % 4) { case 0 -> new Box(0); case 1 -> new Empty(); case 2 -> new Player(0); case 3 -> new Wall(); default -> throw new ShouldNotReachException(); }; }",
        "C": "public GameState(@NotNull GameMap map) { this.gameMap = map; this.undoQuota = map.getUndoLimit(); this.checkpointStates = new ArrayList<GameMap>(map.getUndoLimit().get()); this.currentState = new GameMap(map); } public void undo() { if (checkpointStates.isEmpty()) { currentState = new GameMap(gameMap); } else { checkpointStates.remove(0); if (checkpointStates.isEmpty()) { currentState = new GameMap(gameMap); } else { currentState = checkpointStates.remove(0); } } undoQuota = Optional.of(undoQuota.get() - 1); } /** * Get the maximum width of the game map. * This should be the same as that in {@link GameMap} public TerminalRenderingEngine(PrintStream outputSteam) { this.outputSteam = outputSteam; } public Box(int playerId) { this.playerId = playerId; } public Player(int id) { this.id = id; } public ShouldNotReachException() { super(\"This branch should not be reached.\"); }",
        "label": "F"
    },
    "2402": {
        "dataset": "COMP 3021",
        "project": "slmaaa",
        "bug_id": "37",
        "T": "void testGetUndoUnlimited() { final var gameState = new GameState(TestHelper.parseGameMap(\"\"\" -1 ###### #.Aa@# #..a@# ###### \"\"\" )); }",
        "C": "public GameState(@NotNull GameMap map) { this.gameMap = map; this.undoQuota = map.getUndoLimit(); this.checkpointStates = new ArrayList<GameMap>(map.getUndoLimit().get()); this.currentState = new GameMap(map); }",
        "label": "F"
    },
    "2403": {
        "dataset": "COMP 3021",
        "project": "slmaaa",
        "bug_id": "38",
        "T": "void testMapCopying() { final var maxWidth = 2333; final var maxHeight = 2333; final var random = new Random(); final var randomEntities = Stream.generate(() -> Position.of(random.nextInt(maxWidth), random.nextInt(maxHeight))) .distinct() .limit(100) .collect(Collectors.toMap(Function.identity(), it -> generateEntity(it.x()))); final var firstPos = randomEntities.keySet().stream().findFirst(); final var gameMap = new GameMap(maxWidth, maxHeight, Collections.singleton(firstPos.get()), 233); randomEntities.forEach(gameMap::putEntity); final var gameState = new GameState(gameMap); final var randomPosition = randomEntities.keySet().stream().findAny(); gameMap.putEntity(randomPosition.get(), new Empty()); randomEntities.forEach((p, e) -> assertEquals(e, gameState.getEntity(p))); }",
        "C": "public static @NotNull Position of(int x, int y) { return new Position(x, y); } public GameMap(int maxWidth, int maxHeight, Set<Position> destinations, int undoLimit) { this.maxWidth = maxWidth; this.maxHeight = maxHeight; this.boxDestinations = destinations; this.undoLimit = undoLimit == -1 ? Optional.empty() : Optional.of(undoLimit); } public GameState(@NotNull GameMap map) { this.gameMap = map; this.undoQuota = map.getUndoLimit(); this.checkpointStates = new ArrayList<GameMap>(map.getUndoLimit().get()); this.currentState = new GameMap(map); } public void putEntity(Position position, Entity entity) { this.map.get(position.y()).set(position.x(), entity); } public @Nullable Entity getEntity(@NotNull Position position) { return currentState.getEntity(position); } /** * Get all box destination positions as a set in the game map. * This should be the same as that in {@link GameMap}",
        "label": "F"
    },
    "2404": {
        "dataset": "COMP 3021",
        "project": "slmaaa",
        "bug_id": "39",
        "T": "void testUndoWhenThereIsMoveButNoCheckpoint() { final var gameState = new GameState(TestHelper.parseGameMap(\"\"\" 233 ###### #A.a@# #..a@# ###### \"\"\" )); gameState.move(Position.of(1, 1), Position.of(2, 1)); gameState.undo(); }",
        "C": "public GameState(@NotNull GameMap map) { this.gameMap = map; this.undoQuota = map.getUndoLimit(); this.checkpointStates = new ArrayList<GameMap>(map.getUndoLimit().get()); this.currentState = new GameMap(map); } public void move(Position from, Position to) { Entity fromEntity = currentState.getEntity(from); if (fromEntity instanceof Box) { currentState.changeBoxPosition(from, to, ((Box) fromEntity).getPlayerId()); } else if (fromEntity instanceof Player) { currentState.setPlayerPositionById(((Player) fromEntity).getId(), to); } currentState.putEntity(to, fromEntity); currentState.putEntity(from, currentState.getEntity(to)); } /** * Record a checkpoint of the game state, including: * <li>All current positions of entities in the game map.</li> * <li>Current undo quota</li> * <p> * Checkpoint is used in {@link GameState#undo()} public static @NotNull Position of(int x, int y) { return new Position(x, y); } public void undo() { if (checkpointStates.isEmpty()) { currentState = new GameMap(gameMap); } else { checkpointStates.remove(0); if (checkpointStates.isEmpty()) { currentState = new GameMap(gameMap); } else { currentState = checkpointStates.remove(0); } } undoQuota = Optional.of(undoQuota.get() - 1); } /** * Get the maximum width of the game map. * This should be the same as that in {@link GameMap}",
        "label": "F"
    },
    "2405": {
        "dataset": "COMP 3021",
        "project": "slmaaa",
        "bug_id": "40",
        "T": "void testGameExit() { final var gameState = mock(GameState.class); final var inputEngine = mock(TerminalInputEngine.class); final var renderingEngine = mock(TerminalRenderingEngine.class); when(gameState.isWin()).thenReturn(false, false, false); when(inputEngine.fetchAction()) .thenReturn(new InvalidInput(0, \"\"), new InvalidInput(0, \"\"), new Exit(0)); final var game = new TerminalSokobanGame(gameState, inputEngine, renderingEngine); game.run(); verify(renderingEngine, atLeastOnce()).message(any()); }",
        "C": "public InvalidInput(int initiator, @NotNull String message) { super(initiator); this.message = message; } public Exit(int initiator) { super(initiator); } public TerminalSokobanGame(GameState gameState, TerminalInputEngine inputEngine, TerminalRenderingEngine renderingEngine) { super(gameState); if (gameState.getAllPlayerPositions().size() > 2) { throw new IllegalArgumentException(\"There are more than two players in the map\"); } this.inputEngine = inputEngine; this.renderingEngine = renderingEngine; } public void run() { // TODO renderingEngine.message(StringResources.GAME_READY_MESSAGE); renderingEngine.render(state); while (!super.shouldStop()) { Action action = inputEngine.fetchAction(); String undoQuota; if (state.getUndoQuota().isEmpty()) { undoQuota = StringResources.UNDO_QUOTA_UNLIMITED; } else { undoQuota = Integer.toString(state.getUndoQuota().get()); } renderingEngine.message(String.format(StringResources.UNDO_QUOTA_TEMPLATE, undoQuota)); ActionResult actionResult = super.processAction(action); if (actionResult instanceof ActionResult.Failed) { renderingEngine.message(((ActionResult.Failed) actionResult).getReason()); } else { if (state.isWin()) { renderingEngine.message(StringResources.WIN_MESSAGE); } } renderingEngine.render(state); } renderingEngine.message(StringResources.GAME_EXIT_MESSAGE); }",
        "label": "P"
    },
    "2406": {
        "dataset": "COMP 3021",
        "project": "slmaaa",
        "bug_id": "41",
        "T": "void testGameWin() { final var gameState = mock(GameState.class); final var inputEngine = mock(TerminalInputEngine.class); final var renderingEngine = mock(TerminalRenderingEngine.class); when(gameState.isWin()).thenReturn(false, false, false, true); when(inputEngine.fetchAction()) .thenReturn(new InvalidInput(0, \"\")); final var game = new TerminalSokobanGame(gameState, inputEngine, renderingEngine); game.run(); verify(gameState, atLeastOnce()).isWin(); verify(renderingEngine, atLeastOnce()).message(any()); }",
        "C": "public InvalidInput(int initiator, @NotNull String message) { super(initiator); this.message = message; } public TerminalSokobanGame(GameState gameState, TerminalInputEngine inputEngine, TerminalRenderingEngine renderingEngine) { super(gameState); if (gameState.getAllPlayerPositions().size() > 2) { throw new IllegalArgumentException(\"There are more than two players in the map\"); } this.inputEngine = inputEngine; this.renderingEngine = renderingEngine; } public void run() { // TODO renderingEngine.message(StringResources.GAME_READY_MESSAGE); renderingEngine.render(state); while (!super.shouldStop()) { Action action = inputEngine.fetchAction(); String undoQuota; if (state.getUndoQuota().isEmpty()) { undoQuota = StringResources.UNDO_QUOTA_UNLIMITED; } else { undoQuota = Integer.toString(state.getUndoQuota().get()); } renderingEngine.message(String.format(StringResources.UNDO_QUOTA_TEMPLATE, undoQuota)); ActionResult actionResult = super.processAction(action); if (actionResult instanceof ActionResult.Failed) { renderingEngine.message(((ActionResult.Failed) actionResult).getReason()); } else { if (state.isWin()) { renderingEngine.message(StringResources.WIN_MESSAGE); } } renderingEngine.render(state); } renderingEngine.message(StringResources.GAME_EXIT_MESSAGE); }",
        "label": "P"
    },
    "2407": {
        "dataset": "COMP 3021",
        "project": "slmaaa",
        "bug_id": "42",
        "T": "void testMoreThanTwoPlayers() { final var gameState = mock(GameState.class); final var inputEngine = mock(TerminalInputEngine.class); final var renderingEngine = mock(TerminalRenderingEngine.class); when(gameState.getAllPlayerPositions()).thenReturn(new HashSet<>(Arrays.asList(Position.of(1, 1), Position.of(1, 2), Position.of(1, 3)))); }",
        "C": "public static @NotNull Position of(int x, int y) { return new Position(x, y); }",
        "label": "P"
    },
    "2408": {
        "dataset": "COMP 3021",
        "project": "cywongci",
        "bug_id": "0",
        "T": "void moveUp() { Position.of(233, 232), new Move.Up(-1).nextPosition(pos) ); }",
        "C": "public static @NotNull Position of(int x, int y) { return new Position(x, y); } public Up(int initiator) { super(initiator); }",
        "label": "P"
    },
    "2409": {
        "dataset": "COMP 3021",
        "project": "cywongci",
        "bug_id": "1",
        "T": "void moveDown() { Position.of(233, 234), new Move.Down(-1).nextPosition(pos) ); }",
        "C": "public static @NotNull Position of(int x, int y) { return new Position(x, y); } public Down(int initiator) { super(initiator); }",
        "label": "P"
    },
    "2410": {
        "dataset": "COMP 3021",
        "project": "cywongci",
        "bug_id": "2",
        "T": "void moveRight() { Position.of(234, 233), new Move.Right(-1).nextPosition(pos) ); }",
        "C": "public static @NotNull Position of(int x, int y) { return new Position(x, y); } public Right(int initiator) { super(initiator); }",
        "label": "P"
    },
    "2411": {
        "dataset": "COMP 3021",
        "project": "cywongci",
        "bug_id": "3",
        "T": "void testExceedingUndoQuota() { final var gameState = mock(GameState.class); when(gameState.getPlayerPositionById(anyInt())).thenReturn(Position.of(0, 0)); when(gameState.getUndoQuota()).thenReturn(Optional.of(0)); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Undo(0)); }",
        "C": "public Undo(int initiator) { super(initiator); }",
        "label": "P"
    },
    "2412": {
        "dataset": "COMP 3021",
        "project": "cywongci",
        "bug_id": "4",
        "T": "void testExit() { final var gameState = mock(GameState.class); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Exit(0)); }",
        "C": "public Exit(int initiator) { super(initiator); }",
        "label": "P"
    },
    "2413": {
        "dataset": "COMP 3021",
        "project": "cywongci",
        "bug_id": "5",
        "T": "void testUndoUnlimited() { final var gameState = mock(GameState.class); when(gameState.getPlayerPositionById(anyInt())).thenReturn(Position.of(0, 0)); when(gameState.getUndoQuota()).thenReturn(Optional.empty()); final var game = new SokobanGameForTesting(gameState); for (int i = 0; i < 10000; i++) { final var result = game.feedActionForProcessing(new Undo(0)); } verify(gameState, times(10000)).undo(); }",
        "C": "public TerminalRenderingEngine(PrintStream outputSteam) { this.outputSteam = outputSteam; } public Undo(int initiator) { super(initiator); }",
        "label": "F"
    },
    "2414": {
        "dataset": "COMP 3021",
        "project": "cywongci",
        "bug_id": "6",
        "T": "void testPushOtherPlayerBox() { String mapText = \"\"\" 233 ###### #AB.@# #b.a.# #@...# ###### \"\"\"; final var testMap = TestHelper.parseGameMap(mapText); final var gameState = spy(new GameState(testMap)); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Move.Down(0)); verify(gameState, never()).move(any(), any()); }",
        "C": "public GameState(@NotNull GameMap map) { // TODO this.maxWidth = map.maxWidth; this.maxHeight = map.maxHeight; this.destinations = map.destinations; this.undoLimit = map.undoLimit; this.mapInfo = map.mapInfo; this.initMapInfo = map.mapInfo; } public Down(int initiator) { super(initiator); }",
        "label": "P"
    },
    "2415": {
        "dataset": "COMP 3021",
        "project": "cywongci",
        "bug_id": "7",
        "T": "void testMoveNonExistingPlayer() { String mapText = \"\"\" 233 ###### #A..@# #a...# ##...# ###### \"\"\"; final var testMap = TestHelper.parseGameMap(mapText); final var gameState = spy(new GameState(testMap)); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Move.Down(23)); }",
        "C": "public GameState(@NotNull GameMap map) { // TODO this.maxWidth = map.maxWidth; this.maxHeight = map.maxHeight; this.destinations = map.destinations; this.undoLimit = map.undoLimit; this.mapInfo = map.mapInfo; this.initMapInfo = map.mapInfo; } public Down(int initiator) { super(initiator); }",
        "label": "P"
    },
    "2416": {
        "dataset": "COMP 3021",
        "project": "cywongci",
        "bug_id": "8",
        "T": "void testCheckpointWhenNeed() { final var gameState = spy(new GameState(TestHelper.parseGameMap(\"\"\" 233 ###### #.Aa@# #..a@# ###### \"\"\" ))); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Move.Right(0)); verify(gameState, times(1)).checkpoint(); }",
        "C": "public GameState(@NotNull GameMap map) { // TODO this.maxWidth = map.maxWidth; this.maxHeight = map.maxHeight; this.destinations = map.destinations; this.undoLimit = map.undoLimit; this.mapInfo = map.mapInfo; this.initMapInfo = map.mapInfo; } public Right(int initiator) { super(initiator); }",
        "label": "P"
    },
    "2417": {
        "dataset": "COMP 3021",
        "project": "cywongci",
        "bug_id": "9",
        "T": "void testPushBoxAgainstWall() { String mapText = \"\"\" 233 ###### #A..@# #a...# ##...# ###### \"\"\"; final var testMap = TestHelper.parseGameMap(mapText); final var gameState = spy(new GameState(testMap)); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Move.Down(0)); verify(gameState, never()).move(any(), any()); }",
        "C": "public GameState(@NotNull GameMap map) { // TODO this.maxWidth = map.maxWidth; this.maxHeight = map.maxHeight; this.destinations = map.destinations; this.undoLimit = map.undoLimit; this.mapInfo = map.mapInfo; this.initMapInfo = map.mapInfo; } public Down(int initiator) { super(initiator); }",
        "label": "P"
    },
    "2418": {
        "dataset": "COMP 3021",
        "project": "cywongci",
        "bug_id": "10",
        "T": "void testCheckpointWhenNotNeed() { final var gameState = spy(new GameState(TestHelper.parseGameMap(\"\"\" 233 ###### #A.a@# #..a@# ###### \"\"\" ))); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Move.Right(0)); verify(gameState, never()).checkpoint(); } private static class SokobanGameForTesting extends AbstractSokobanGame { protected SokobanGameForTesting(GameState gameState) { super(gameState); } @Override public void run() { } public ActionResult feedActionForProcessing(Action action) { return processAction(action); } }",
        "C": "public GameState(@NotNull GameMap map) { // TODO this.maxWidth = map.maxWidth; this.maxHeight = map.maxHeight; this.destinations = map.destinations; this.undoLimit = map.undoLimit; this.mapInfo = map.mapInfo; this.initMapInfo = map.mapInfo; } public Right(int initiator) { super(initiator); } public void run() { // TODO this.renderingEngine.message(StringResources.GAME_READY_MESSAGE); System.out.println(StringResources.GAME_READY_MESSAGE); this.renderingEngine.render(this.state1); System.out.println(this.state1.mapInfo); var quota = this.state1.getUndoQuota(); if (quota.isPresent()) { if (quota.get() == -1) { this.renderingEngine.message(UNDO_QUOTA_UNLIMITED); System.out.println(UNDO_QUOTA_UNLIMITED); } else { this.renderingEngine.message(String.format(UNDO_QUOTA_TEMPLATE, quota.get())); System.out.println(String.format(UNDO_QUOTA_TEMPLATE, quota.get())); } } this.renderingEngine.message(\">>>\"); System.out.println(\">>>\"); while (true) { var action = this.inputEngine.fetchAction(); var actionresult = this.processAction(action); if (actionresult instanceof ActionResult.Failed) { this.renderingEngine.message(((ActionResult.Failed) actionresult).getReason()); System.out.println(((ActionResult.Failed) actionresult).getReason()); } this.renderingEngine.render(this.state1); System.out.println(this.state1.mapInfo); quota = this.state1.getUndoQuota(); if (quota.isPresent()) { if (quota.get() == -1) { this.renderingEngine.message(UNDO_QUOTA_UNLIMITED); System.out.println(UNDO_QUOTA_UNLIMITED); } else { this.renderingEngine.message(String.format(UNDO_QUOTA_TEMPLATE, quota.get())); System.out.println(String.format(UNDO_QUOTA_TEMPLATE, quota.get())); } } this.renderingEngine.message(\">>>\"); System.out.println(\">>>\"); if (this.shouldStop()) { this.renderingEngine.message(StringResources.GAME_EXIT_MESSAGE); System.out.println(StringResources.GAME_EXIT_MESSAGE); if (this.state1.isWin()) { this.renderingEngine.message(StringResources.WIN_MESSAGE); System.out.println(StringResources.WIN_MESSAGE); } return; } } } protected ActionResult processAction(@NotNull Action action) { // TODO if (action instanceof Move ) { Position playerposition = state.getPlayerPositionById(action.getInitiator()); Position newplayerPosition = new Position(0,0); if (!this.getPlayerIds().contains(action.getInitiator())) { return new ActionResult.Failed(action, StringResources.PLAYER_NOT_FOUND); } // get new object position if (action instanceof Move.Down) newplayerPosition = new Position(playerposition.x(),playerposition.y() + 1); else if (action instanceof Move.Up) newplayerPosition = new Position(playerposition.x(),playerposition.y() - 1); else if (action instanceof Move.Left) newplayerPosition = new Position(playerposition.x() - 1,playerposition.y()); else if (action instanceof Move.Right) newplayerPosition = new Position(playerposition.x() + 1,playerposition.y()); // check if the new position is wall or player or others' box if (state.getEntity(newplayerPosition) instanceof Wall || state.getEntity(newplayerPosition) instanceof Player || (state.getEntity(newplayerPosition) instanceof Box && ((Box) state.getEntity(newplayerPosition)).getPlayerId() != action.getInitiator())) { return new ActionResult.Failed(action, \"You hit a wall.\"); // check if the new position has the player's box } else if (state.getEntity(newplayerPosition) instanceof Box && ((Box) state.getEntity(newplayerPosition)).getPlayerId() == action.getInitiator()) { Position newBoxPosition = new Position(0,0); // get new object position if (action instanceof Move.Down) newBoxPosition = new Position(newplayerPosition.x(),newplayerPosition.y() + 1); else if (action instanceof Move.Up) newBoxPosition = new Position(newplayerPosition.x(),newplayerPosition.y() - 1); else if (action instanceof Move.Left) newBoxPosition = new Position(newplayerPosition.x() - 1,newplayerPosition.y()); else if (action instanceof Move.Right) newBoxPosition = new Position(newplayerPosition.x() + 1,newplayerPosition.y()); if (state.getEntity(newBoxPosition) instanceof Wall || state.getEntity(newBoxPosition) instanceof Player || state.getEntity(newBoxPosition) instanceof Box ) { return new ActionResult.Failed(action, \"You hit a wall.\"); } else { state.move(newplayerPosition, newBoxPosition); state.move(playerposition, newplayerPosition); state.checkpoint(); return new ActionResult.Success(new Move.Down(action.getInitiator())); } // nothing at the new position } else { state.move(playerposition, newplayerPosition); return new ActionResult.Success(new Move.Down(action.getInitiator())); } } else if ( action instanceof Undo ) { if (this.state.getUndoQuota().get() > 0 || this.state.getUndoQuota().get() == -1){ this.state.undo(); return new ActionResult.Success(new Undo(action.getInitiator())); } else { return new ActionResult.Failed(new Undo(action.getInitiator()), StringResources.UNDO_QUOTA_RUN_OUT); } } else if ( action instanceof Exit ) { this.state.shouldExit = true; return new ActionResult.Success(new Exit(action.getInitiator())); } return new ActionResult.Failed(action, StringResources.INVALID_INPUT_MESSAGE); }",
        "label": "P"
    },
    "2419": {
        "dataset": "COMP 3021",
        "project": "cywongci",
        "bug_id": "11",
        "T": "void testHitAnotherPlayer() { String mapText = \"\"\" 233 ###### #A..@# #B...# #ab.@# ###### \"\"\"; final var testMap = TestHelper.parseGameMap(mapText); final var gameState = spy(new GameState(testMap)); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Move.Down(0)); verify(gameState, never()).move(any(), any()); }",
        "C": "public GameState(@NotNull GameMap map) { // TODO this.maxWidth = map.maxWidth; this.maxHeight = map.maxHeight; this.destinations = map.destinations; this.undoLimit = map.undoLimit; this.mapInfo = map.mapInfo; this.initMapInfo = map.mapInfo; } public Down(int initiator) { super(initiator); }",
        "label": "P"
    },
    "2420": {
        "dataset": "COMP 3021",
        "project": "cywongci",
        "bug_id": "12",
        "T": "void testUndoWithinQuota() { final var gameState = mock(GameState.class); when(gameState.getPlayerPositionById(anyInt())).thenReturn(Position.of(0, 0)); when(gameState.getUndoQuota()).thenReturn(Optional.of(1)); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Undo(0)); verify(gameState, times(1)).undo(); }",
        "C": "public Undo(int initiator) { super(initiator); }",
        "label": "P"
    },
    "2421": {
        "dataset": "COMP 3021",
        "project": "cywongci",
        "bug_id": "13",
        "T": "void testInvalidInput() { final var game = new SokobanGameForTesting(mock(GameState.class)); final var message = String.valueOf(new Random().nextLong()); final var action = new InvalidInput(-1, message); final var result = game.feedActionForProcessing(action); }",
        "C": "public InvalidInput(int initiator, @NotNull String message) { super(initiator); this.message = message; }",
        "label": "P"
    },
    "2422": {
        "dataset": "COMP 3021",
        "project": "cywongci",
        "bug_id": "14",
        "T": "void testUndoLimitParsing() { final var gameMap = TestHelper.parseGameMap(rectangularMap); }",
        "C": "",
        "label": "P"
    },
    "2423": {
        "dataset": "COMP 3021",
        "project": "cywongci",
        "bug_id": "15",
        "T": "void testWidthForNonRectangularMap() { final var gameMap = TestHelper.parseGameMap(nonRectangularMap); }",
        "C": "",
        "label": "P"
    },
    "2424": {
        "dataset": "COMP 3021",
        "project": "cywongci",
        "bug_id": "16",
        "T": "void testTwoPlayersMap() { final var twoPlayersMap = \"\"\" 233 ###### #A..@# #..B@# #....# #.a..# #..b.# ###### \"\"\"; final var gameMap = TestHelper.parseGameMap(twoPlayersMap); final var playerIds = gameMap.getPlayerIds(); final var expectedIds = new HashSet<Integer>(); expectedIds.add(0); expectedIds.add(1); }",
        "C": "public Set<Integer> getPlayerIds() { String[] parsedString = state.mapInfo.split(\"\\n\"); Set<Integer> playerIds = new HashSet<Integer>(); for (int i=0; i<parsedString.length; i++) { for (int j=0; j<parsedString[i].length(); j++){ if (parsedString[i].charAt(j) >= 'A' && parsedString[i].charAt(j) <= 'Z'){ if (playerIds.contains(parsedString[i].charAt(j))) { throw new IllegalArgumentException(); } else { playerIds.add((int)(parsedString[i].charAt(j) - 'A')); } } } } return playerIds; }",
        "label": "P"
    },
    "2425": {
        "dataset": "COMP 3021",
        "project": "cywongci",
        "bug_id": "17",
        "T": "void testMapWithoutPlayer() { final var invalidMap = \"\"\" 233 ### #.# ### \"\"\"; } // @Tag(TestKind.HIDDEN) // @Test // void testUnmatchedPlayersAndBoxes() { // final var invalidMap = \"\"\" // 233 // ###### // #A..@# // #...@# // #a.b@# // #.a.@# // #..a.# // ###### // \"\"\"; // assertThrowsExactly(IllegalArgumentException.class, () -> TestHelper.parseGameMap(invalidMap)); // }",
        "C": "public TerminalRenderingEngine(PrintStream outputSteam) { this.outputSteam = outputSteam; }",
        "label": "P"
    },
    "2426": {
        "dataset": "COMP 3021",
        "project": "cywongci",
        "bug_id": "18",
        "T": "void testManyPlayersMap() { final var manyPlayersMap = \"\"\" 233 ###### #A.P@@# #vCB@@# #.cpD@# #Ga.d@# #g.bV@# ###### \"\"\"; final var gameMap = TestHelper.parseGameMap(manyPlayersMap); final var playerIds = gameMap.getPlayerIds(); final var expectedIds = new HashSet<>(Arrays.asList( 0, 'P' - 'A', 'C' - 'A', 'B' - 'A', 'D' - 'A', 'G' - 'A', 'V' - 'A' )); }",
        "C": "public Set<Integer> getPlayerIds() { String[] parsedString = state.mapInfo.split(\"\\n\"); Set<Integer> playerIds = new HashSet<Integer>(); for (int i=0; i<parsedString.length; i++) { for (int j=0; j<parsedString[i].length(); j++){ if (parsedString[i].charAt(j) >= 'A' && parsedString[i].charAt(j) <= 'Z'){ if (playerIds.contains(parsedString[i].charAt(j))) { throw new IllegalArgumentException(); } else { playerIds.add((int)(parsedString[i].charAt(j) - 'A')); } } } } return playerIds; }",
        "label": "P"
    },
    "2427": {
        "dataset": "COMP 3021",
        "project": "cywongci",
        "bug_id": "19",
        "T": "void testHeightForNonRectangularMap() { final var gameMap = TestHelper.parseGameMap(nonRectangularMap); }",
        "C": "",
        "label": "P"
    },
    "2428": {
        "dataset": "COMP 3021",
        "project": "cywongci",
        "bug_id": "20",
        "T": "void testDuplicatedPlayers() { final var invalidMap = \"\"\" 233 ###### #A..@# #..A@# #....# #.a..# #..b.# ###### \"\"\"; }",
        "C": "",
        "label": "P"
    },
    "2429": {
        "dataset": "COMP 3021",
        "project": "cywongci",
        "bug_id": "21",
        "T": "void testParseMapWithoutUndoLimit() { final var invalidMap = String.join(\"\\n\", rectangularMap.lines().skip(1).toList()); }",
        "C": "",
        "label": "P"
    },
    "2430": {
        "dataset": "COMP 3021",
        "project": "cywongci",
        "bug_id": "22",
        "T": "void testInsufficientDestinations() { final var invalidMap = \"\"\" 233 ###### #A..@# #...@# #a...# #.a..# #..a.# ###### \"\"\"; }",
        "C": "",
        "label": "P"
    },
    "2431": {
        "dataset": "COMP 3021",
        "project": "cywongci",
        "bug_id": "23",
        "T": "void testSuperLargeMap() { try { new GameMap(Integer.MAX_VALUE, Integer.MAX_VALUE, Collections.emptySet(), 0); } catch (OutOfMemoryError e) { throw new RuntimeException(e); } }); }",
        "C": "public GameMap(int maxWidth, int maxHeight, Set<Position> destinations, int undoLimit) { // TODO this.maxWidth = maxWidth; this.maxHeight = maxHeight; this.destinations = destinations; this.undoLimit = undoLimit; } /** * Parses the map from a string representation. * The first line is undo limit. * Starting from the second line, the game map is represented as follows, * <li># represents a {@link Wall}</li> * <li>@ represents a box destination.</li> * <li>Any upper-case letter represents a {@link Player}.</li> * <li> * Any lower-case letter represents a {@link Box} that is only movable by the player with the corresponding upper-case letter. * For instance, box \"a\" can only be moved by player \"A\" and not movable by player \"B\". * </li> * <li>. represents an {@link Empty} position in the map, meaning there is no player or box currently at this position.</li> * <p> * Notes: * <li> * There can be at most 26 players. * All implementations of classes in the hk.ust.comp3021.game package should support up to 26 players. * </li> * <li> * For simplicity, we assume the given map is bounded with a closed boundary. * There is no need to check this point. * </li> * <li> * Example maps can be found in \"src/main/resources\". * </li> * * @param mapText The string representation. * @return The parsed GameMap object. * @throws IllegalArgumentException if undo limit is negative but not -1. * @throws IllegalArgumentException if there are multiple same upper-case letters, i.e., one player can only exist at one position. * @throws IllegalArgumentException if there are no players in the map. * @throws IllegalArgumentException if the number of boxes is not equal to the number of box destinations. * @throws IllegalArgumentException if there are boxes whose {@link Box#getPlayerId()} public TerminalRenderingEngine(PrintStream outputSteam) { this.outputSteam = outputSteam; }",
        "label": "P"
    },
    "2432": {
        "dataset": "COMP 3021",
        "project": "cywongci",
        "bug_id": "24",
        "T": "void testInvalidUndoLimit() { final var invalidMap = \"\"\" -233 ###### #A..@# #...@# #a.b@# #.a.@# #..a.# ###### \"\"\"; }",
        "C": "",
        "label": "P"
    },
    "2433": {
        "dataset": "COMP 3021",
        "project": "cywongci",
        "bug_id": "25",
        "T": "void testEmptyMap() { final var invalidMap = \"\"; }",
        "C": "",
        "label": "P"
    },
    "2434": {
        "dataset": "COMP 3021",
        "project": "cywongci",
        "bug_id": "26",
        "T": "void testMove(String input, String name, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); } private InputStream fixValueStream(String content) { final var bytes = content.getBytes(StandardCharsets.UTF_8); return new ByteArrayInputStream(bytes); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine(); // TODO if (inputLine.equals(\"exit\")) { return new Exit(0); } else if (inputLine.equals(\"u\") || inputLine.equals(\"U\")) { return new Undo(0); } else if (inputLine.equals(\"a\") || inputLine.equals(\"A\")) { return new Move.Left(0); } else if ( inputLine.equals(\"h\") || inputLine.equals(\"H\")) { return new Move.Left(1); } else if (inputLine.equals(\"d\") || inputLine.equals(\"D\")) { return new Move.Right(0); } else if(inputLine.equals(\"l\") || inputLine.equals(\"L\")) { return new Move.Right(1); } else if (inputLine.equals(\"w\") || inputLine.equals(\"W\")) { return new Move.Up(0); } else if (inputLine.equals(\"k\") || inputLine.equals(\"K\")) { return new Move.Up(1); } else if (inputLine.equals(\"s\") || inputLine.equals(\"S\")) { return new Move.Down(0); } else if (inputLine.equals(\"j\") || inputLine.equals(\"J\")) { return new Move.Down(1); } else { return new InvalidInput(0, StringResources.INVALID_INPUT_MESSAGE); } }",
        "label": "P"
    },
    "2435": {
        "dataset": "COMP 3021",
        "project": "cywongci",
        "bug_id": "27",
        "T": "void testMove(String input, String name, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); } private InputStream fixValueStream(String content) { final var bytes = content.getBytes(StandardCharsets.UTF_8); return new ByteArrayInputStream(bytes); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine(); // TODO if (inputLine.equals(\"exit\")) { return new Exit(0); } else if (inputLine.equals(\"u\") || inputLine.equals(\"U\")) { return new Undo(0); } else if (inputLine.equals(\"a\") || inputLine.equals(\"A\")) { return new Move.Left(0); } else if ( inputLine.equals(\"h\") || inputLine.equals(\"H\")) { return new Move.Left(1); } else if (inputLine.equals(\"d\") || inputLine.equals(\"D\")) { return new Move.Right(0); } else if(inputLine.equals(\"l\") || inputLine.equals(\"L\")) { return new Move.Right(1); } else if (inputLine.equals(\"w\") || inputLine.equals(\"W\")) { return new Move.Up(0); } else if (inputLine.equals(\"k\") || inputLine.equals(\"K\")) { return new Move.Up(1); } else if (inputLine.equals(\"s\") || inputLine.equals(\"S\")) { return new Move.Down(0); } else if (inputLine.equals(\"j\") || inputLine.equals(\"J\")) { return new Move.Down(1); } else { return new InvalidInput(0, StringResources.INVALID_INPUT_MESSAGE); } }",
        "label": "P"
    },
    "2436": {
        "dataset": "COMP 3021",
        "project": "cywongci",
        "bug_id": "28",
        "T": "void testMove(String input, String name, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); } private InputStream fixValueStream(String content) { final var bytes = content.getBytes(StandardCharsets.UTF_8); return new ByteArrayInputStream(bytes); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine(); // TODO if (inputLine.equals(\"exit\")) { return new Exit(0); } else if (inputLine.equals(\"u\") || inputLine.equals(\"U\")) { return new Undo(0); } else if (inputLine.equals(\"a\") || inputLine.equals(\"A\")) { return new Move.Left(0); } else if ( inputLine.equals(\"h\") || inputLine.equals(\"H\")) { return new Move.Left(1); } else if (inputLine.equals(\"d\") || inputLine.equals(\"D\")) { return new Move.Right(0); } else if(inputLine.equals(\"l\") || inputLine.equals(\"L\")) { return new Move.Right(1); } else if (inputLine.equals(\"w\") || inputLine.equals(\"W\")) { return new Move.Up(0); } else if (inputLine.equals(\"k\") || inputLine.equals(\"K\")) { return new Move.Up(1); } else if (inputLine.equals(\"s\") || inputLine.equals(\"S\")) { return new Move.Down(0); } else if (inputLine.equals(\"j\") || inputLine.equals(\"J\")) { return new Move.Down(1); } else { return new InvalidInput(0, StringResources.INVALID_INPUT_MESSAGE); } }",
        "label": "P"
    },
    "2437": {
        "dataset": "COMP 3021",
        "project": "cywongci",
        "bug_id": "29",
        "T": "void testMove(String input, String name, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); } private InputStream fixValueStream(String content) { final var bytes = content.getBytes(StandardCharsets.UTF_8); return new ByteArrayInputStream(bytes); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine(); // TODO if (inputLine.equals(\"exit\")) { return new Exit(0); } else if (inputLine.equals(\"u\") || inputLine.equals(\"U\")) { return new Undo(0); } else if (inputLine.equals(\"a\") || inputLine.equals(\"A\")) { return new Move.Left(0); } else if ( inputLine.equals(\"h\") || inputLine.equals(\"H\")) { return new Move.Left(1); } else if (inputLine.equals(\"d\") || inputLine.equals(\"D\")) { return new Move.Right(0); } else if(inputLine.equals(\"l\") || inputLine.equals(\"L\")) { return new Move.Right(1); } else if (inputLine.equals(\"w\") || inputLine.equals(\"W\")) { return new Move.Up(0); } else if (inputLine.equals(\"k\") || inputLine.equals(\"K\")) { return new Move.Up(1); } else if (inputLine.equals(\"s\") || inputLine.equals(\"S\")) { return new Move.Down(0); } else if (inputLine.equals(\"j\") || inputLine.equals(\"J\")) { return new Move.Down(1); } else { return new InvalidInput(0, StringResources.INVALID_INPUT_MESSAGE); } }",
        "label": "P"
    },
    "2438": {
        "dataset": "COMP 3021",
        "project": "cywongci",
        "bug_id": "30",
        "T": "void testMove(String input, String name, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); } private InputStream fixValueStream(String content) { final var bytes = content.getBytes(StandardCharsets.UTF_8); return new ByteArrayInputStream(bytes); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine(); // TODO if (inputLine.equals(\"exit\")) { return new Exit(0); } else if (inputLine.equals(\"u\") || inputLine.equals(\"U\")) { return new Undo(0); } else if (inputLine.equals(\"a\") || inputLine.equals(\"A\")) { return new Move.Left(0); } else if ( inputLine.equals(\"h\") || inputLine.equals(\"H\")) { return new Move.Left(1); } else if (inputLine.equals(\"d\") || inputLine.equals(\"D\")) { return new Move.Right(0); } else if(inputLine.equals(\"l\") || inputLine.equals(\"L\")) { return new Move.Right(1); } else if (inputLine.equals(\"w\") || inputLine.equals(\"W\")) { return new Move.Up(0); } else if (inputLine.equals(\"k\") || inputLine.equals(\"K\")) { return new Move.Up(1); } else if (inputLine.equals(\"s\") || inputLine.equals(\"S\")) { return new Move.Down(0); } else if (inputLine.equals(\"j\") || inputLine.equals(\"J\")) { return new Move.Down(1); } else { return new InvalidInput(0, StringResources.INVALID_INPUT_MESSAGE); } }",
        "label": "P"
    },
    "2439": {
        "dataset": "COMP 3021",
        "project": "cywongci",
        "bug_id": "31",
        "T": "void testMove(String input, String name, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); } private InputStream fixValueStream(String content) { final var bytes = content.getBytes(StandardCharsets.UTF_8); return new ByteArrayInputStream(bytes); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine(); // TODO if (inputLine.equals(\"exit\")) { return new Exit(0); } else if (inputLine.equals(\"u\") || inputLine.equals(\"U\")) { return new Undo(0); } else if (inputLine.equals(\"a\") || inputLine.equals(\"A\")) { return new Move.Left(0); } else if ( inputLine.equals(\"h\") || inputLine.equals(\"H\")) { return new Move.Left(1); } else if (inputLine.equals(\"d\") || inputLine.equals(\"D\")) { return new Move.Right(0); } else if(inputLine.equals(\"l\") || inputLine.equals(\"L\")) { return new Move.Right(1); } else if (inputLine.equals(\"w\") || inputLine.equals(\"W\")) { return new Move.Up(0); } else if (inputLine.equals(\"k\") || inputLine.equals(\"K\")) { return new Move.Up(1); } else if (inputLine.equals(\"s\") || inputLine.equals(\"S\")) { return new Move.Down(0); } else if (inputLine.equals(\"j\") || inputLine.equals(\"J\")) { return new Move.Down(1); } else { return new InvalidInput(0, StringResources.INVALID_INPUT_MESSAGE); } }",
        "label": "P"
    },
    "2440": {
        "dataset": "COMP 3021",
        "project": "cywongci",
        "bug_id": "32",
        "T": "void testMove(String input, String name, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); } private InputStream fixValueStream(String content) { final var bytes = content.getBytes(StandardCharsets.UTF_8); return new ByteArrayInputStream(bytes); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine(); // TODO if (inputLine.equals(\"exit\")) { return new Exit(0); } else if (inputLine.equals(\"u\") || inputLine.equals(\"U\")) { return new Undo(0); } else if (inputLine.equals(\"a\") || inputLine.equals(\"A\")) { return new Move.Left(0); } else if ( inputLine.equals(\"h\") || inputLine.equals(\"H\")) { return new Move.Left(1); } else if (inputLine.equals(\"d\") || inputLine.equals(\"D\")) { return new Move.Right(0); } else if(inputLine.equals(\"l\") || inputLine.equals(\"L\")) { return new Move.Right(1); } else if (inputLine.equals(\"w\") || inputLine.equals(\"W\")) { return new Move.Up(0); } else if (inputLine.equals(\"k\") || inputLine.equals(\"K\")) { return new Move.Up(1); } else if (inputLine.equals(\"s\") || inputLine.equals(\"S\")) { return new Move.Down(0); } else if (inputLine.equals(\"j\") || inputLine.equals(\"J\")) { return new Move.Down(1); } else { return new InvalidInput(0, StringResources.INVALID_INPUT_MESSAGE); } }",
        "label": "P"
    },
    "2441": {
        "dataset": "COMP 3021",
        "project": "cywongci",
        "bug_id": "33",
        "T": "void testMove(String input, String name, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); } private InputStream fixValueStream(String content) { final var bytes = content.getBytes(StandardCharsets.UTF_8); return new ByteArrayInputStream(bytes); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine(); // TODO if (inputLine.equals(\"exit\")) { return new Exit(0); } else if (inputLine.equals(\"u\") || inputLine.equals(\"U\")) { return new Undo(0); } else if (inputLine.equals(\"a\") || inputLine.equals(\"A\")) { return new Move.Left(0); } else if ( inputLine.equals(\"h\") || inputLine.equals(\"H\")) { return new Move.Left(1); } else if (inputLine.equals(\"d\") || inputLine.equals(\"D\")) { return new Move.Right(0); } else if(inputLine.equals(\"l\") || inputLine.equals(\"L\")) { return new Move.Right(1); } else if (inputLine.equals(\"w\") || inputLine.equals(\"W\")) { return new Move.Up(0); } else if (inputLine.equals(\"k\") || inputLine.equals(\"K\")) { return new Move.Up(1); } else if (inputLine.equals(\"s\") || inputLine.equals(\"S\")) { return new Move.Down(0); } else if (inputLine.equals(\"j\") || inputLine.equals(\"J\")) { return new Move.Down(1); } else { return new InvalidInput(0, StringResources.INVALID_INPUT_MESSAGE); } }",
        "label": "P"
    },
    "2442": {
        "dataset": "COMP 3021",
        "project": "cywongci",
        "bug_id": "34",
        "T": "void testUndo(String input, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine(); // TODO if (inputLine.equals(\"exit\")) { return new Exit(0); } else if (inputLine.equals(\"u\") || inputLine.equals(\"U\")) { return new Undo(0); } else if (inputLine.equals(\"a\") || inputLine.equals(\"A\")) { return new Move.Left(0); } else if ( inputLine.equals(\"h\") || inputLine.equals(\"H\")) { return new Move.Left(1); } else if (inputLine.equals(\"d\") || inputLine.equals(\"D\")) { return new Move.Right(0); } else if(inputLine.equals(\"l\") || inputLine.equals(\"L\")) { return new Move.Right(1); } else if (inputLine.equals(\"w\") || inputLine.equals(\"W\")) { return new Move.Up(0); } else if (inputLine.equals(\"k\") || inputLine.equals(\"K\")) { return new Move.Up(1); } else if (inputLine.equals(\"s\") || inputLine.equals(\"S\")) { return new Move.Down(0); } else if (inputLine.equals(\"j\") || inputLine.equals(\"J\")) { return new Move.Down(1); } else { return new InvalidInput(0, StringResources.INVALID_INPUT_MESSAGE); } }",
        "label": "P"
    },
    "2443": {
        "dataset": "COMP 3021",
        "project": "cywongci",
        "bug_id": "35",
        "T": "void testInvalidInput() { final var inputStream = fixValueStream(\"blah blah\"); final var inputEngine = new TerminalInputEngine(inputStream); final var action = inputEngine.fetchAction(); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine(); // TODO if (inputLine.equals(\"exit\")) { return new Exit(0); } else if (inputLine.equals(\"u\") || inputLine.equals(\"U\")) { return new Undo(0); } else if (inputLine.equals(\"a\") || inputLine.equals(\"A\")) { return new Move.Left(0); } else if ( inputLine.equals(\"h\") || inputLine.equals(\"H\")) { return new Move.Left(1); } else if (inputLine.equals(\"d\") || inputLine.equals(\"D\")) { return new Move.Right(0); } else if(inputLine.equals(\"l\") || inputLine.equals(\"L\")) { return new Move.Right(1); } else if (inputLine.equals(\"w\") || inputLine.equals(\"W\")) { return new Move.Up(0); } else if (inputLine.equals(\"k\") || inputLine.equals(\"K\")) { return new Move.Up(1); } else if (inputLine.equals(\"s\") || inputLine.equals(\"S\")) { return new Move.Down(0); } else if (inputLine.equals(\"j\") || inputLine.equals(\"J\")) { return new Move.Down(1); } else { return new InvalidInput(0, StringResources.INVALID_INPUT_MESSAGE); } }",
        "label": "P"
    },
    "2444": {
        "dataset": "COMP 3021",
        "project": "cywongci",
        "bug_id": "36",
        "T": "void testUndoWhenThereIsNoMove() { final var gameState = new GameState(TestHelper.parseGameMap(\"\"\" 233 ###### #A.a@# #..a@# ###### \"\"\" )); gameState.undo(); } private Entity generateEntity(int key) { return switch (key % 4) { case 0 -> new Box(0); case 1 -> new Empty(); case 2 -> new Player(0); case 3 -> new Wall(); default -> throw new ShouldNotReachException(); }; }",
        "C": "public GameState(@NotNull GameMap map) { // TODO this.maxWidth = map.maxWidth; this.maxHeight = map.maxHeight; this.destinations = map.destinations; this.undoLimit = map.undoLimit; this.mapInfo = map.mapInfo; this.initMapInfo = map.mapInfo; } public void undo() { // TODO if (this.undoLimit > 0 || this.undoLimit == -1) { if (this.mapInfoSave.isEmpty()) { this.mapInfo = this.initMapInfo; } else if (this.mapInfoSave.size() == 1) { this.mapInfo = this.initMapInfo; this.mapInfoSave.remove(this.mapInfoSave.size()-1); if (this.undoLimit > 0 ) this.undoLimit--; } else { this.mapInfo = this.mapInfoSave.get(this.mapInfoSave.size() - 2); this.mapInfoSave.remove(this.mapInfoSave.size()-1); if (this.undoLimit > 0 ) this.undoLimit--; } } } /** * Get the maximum width of the game map. * This should be the same as that in {@link GameMap} public TerminalRenderingEngine(PrintStream outputSteam) { this.outputSteam = outputSteam; } public Box(int playerId) { this.playerId = playerId; } public Player(int id) { this.id = id; } public ShouldNotReachException() { super(\"This branch should not be reached.\"); }",
        "label": "P"
    },
    "2445": {
        "dataset": "COMP 3021",
        "project": "cywongci",
        "bug_id": "37",
        "T": "void testGetUndoUnlimited() { final var gameState = new GameState(TestHelper.parseGameMap(\"\"\" -1 ###### #.Aa@# #..a@# ###### \"\"\" )); }",
        "C": "public GameState(@NotNull GameMap map) { // TODO this.maxWidth = map.maxWidth; this.maxHeight = map.maxHeight; this.destinations = map.destinations; this.undoLimit = map.undoLimit; this.mapInfo = map.mapInfo; this.initMapInfo = map.mapInfo; }",
        "label": "F"
    },
    "2446": {
        "dataset": "COMP 3021",
        "project": "cywongci",
        "bug_id": "38",
        "T": "void testMapCopying() { final var maxWidth = 2333; final var maxHeight = 2333; final var random = new Random(); final var randomEntities = Stream.generate(() -> Position.of(random.nextInt(maxWidth), random.nextInt(maxHeight))) .distinct() .limit(100) .collect(Collectors.toMap(Function.identity(), it -> generateEntity(it.x()))); final var firstPos = randomEntities.keySet().stream().findFirst(); final var gameMap = new GameMap(maxWidth, maxHeight, Collections.singleton(firstPos.get()), 233); randomEntities.forEach(gameMap::putEntity); final var gameState = new GameState(gameMap); final var randomPosition = randomEntities.keySet().stream().findAny(); gameMap.putEntity(randomPosition.get(), new Empty()); randomEntities.forEach((p, e) -> assertEquals(e, gameState.getEntity(p))); }",
        "C": "public static @NotNull Position of(int x, int y) { return new Position(x, y); } public GameMap(int maxWidth, int maxHeight, Set<Position> destinations, int undoLimit) { // TODO this.maxWidth = maxWidth; this.maxHeight = maxHeight; this.destinations = destinations; this.undoLimit = undoLimit; } /** * Parses the map from a string representation. * The first line is undo limit. * Starting from the second line, the game map is represented as follows, * <li># represents a {@link Wall}</li> * <li>@ represents a box destination.</li> * <li>Any upper-case letter represents a {@link Player}.</li> * <li> * Any lower-case letter represents a {@link Box} that is only movable by the player with the corresponding upper-case letter. * For instance, box \"a\" can only be moved by player \"A\" and not movable by player \"B\". * </li> * <li>. represents an {@link Empty} position in the map, meaning there is no player or box currently at this position.</li> * <p> * Notes: * <li> * There can be at most 26 players. * All implementations of classes in the hk.ust.comp3021.game package should support up to 26 players. * </li> * <li> * For simplicity, we assume the given map is bounded with a closed boundary. * There is no need to check this point. * </li> * <li> * Example maps can be found in \"src/main/resources\". * </li> * * @param mapText The string representation. * @return The parsed GameMap object. * @throws IllegalArgumentException if undo limit is negative but not -1. * @throws IllegalArgumentException if there are multiple same upper-case letters, i.e., one player can only exist at one position. * @throws IllegalArgumentException if there are no players in the map. * @throws IllegalArgumentException if the number of boxes is not equal to the number of box destinations. * @throws IllegalArgumentException if there are boxes whose {@link Box#getPlayerId()} public GameState(@NotNull GameMap map) { // TODO this.maxWidth = map.maxWidth; this.maxHeight = map.maxHeight; this.destinations = map.destinations; this.undoLimit = map.undoLimit; this.mapInfo = map.mapInfo; this.initMapInfo = map.mapInfo; } public void putEntity(Position position, Entity entity) { // TODO String[] parsedString = mapInfo.split(\"\\n\"); char objectToBePlaced = '.'; if (entity instanceof Box) { int playerId = ((Box) entity).getPlayerId(); objectToBePlaced = (char)('a' + playerId); } else if (entity instanceof Player) { int playerId = ((Player) entity).getId(); objectToBePlaced = (char)('A' + playerId); } else if (entity instanceof Wall){ objectToBePlaced = '#'; } else if (entity instanceof Empty) { objectToBePlaced = '.'; } parsedString[position.y()] = parsedString[position.y()].substring(0, position.x()) + objectToBePlaced + parsedString[position.y()].substring(position.x() + 1); String newMapInfo = null; for (int i=0; i<parsedString.length; i++) { if (newMapInfo == null) newMapInfo = parsedString[i]; else newMapInfo = newMapInfo + '\\n' + parsedString[i]; } this.mapInfo = newMapInfo; } public @Nullable Entity getEntity(@NotNull Position position) { // TODO String[] parsedString = mapInfo.split(\"\\n\"); char target = parsedString[position.y()].charAt(position.x()); if (target == '#') return new Wall(); else if (target == '.' || target == '@') return new Empty(); else if (target >= 'a' && target <= 'z') return new Box((int)(target - 'a')); else if (target >= 'A' && target <= 'Z') return new Player((int)(target - 'A')); else return null; } /** * Get all box destination positions as a set in the game map. * This should be the same as that in {@link GameMap}",
        "label": "F"
    },
    "2447": {
        "dataset": "COMP 3021",
        "project": "cywongci",
        "bug_id": "39",
        "T": "void testUndoWhenThereIsMoveButNoCheckpoint() { final var gameState = new GameState(TestHelper.parseGameMap(\"\"\" 233 ###### #A.a@# #..a@# ###### \"\"\" )); gameState.move(Position.of(1, 1), Position.of(2, 1)); gameState.undo(); }",
        "C": "public GameState(@NotNull GameMap map) { // TODO this.maxWidth = map.maxWidth; this.maxHeight = map.maxHeight; this.destinations = map.destinations; this.undoLimit = map.undoLimit; this.mapInfo = map.mapInfo; this.initMapInfo = map.mapInfo; } public void move(Position from, Position to) { // TODO String[] parsedString = mapInfo.split(\"\\n\"); char objectToBeMoved = parsedString[from.y()].charAt(from.x()); String newfromchar = \".\"; if (this.destinations.contains(from)) { newfromchar = \"@\"; } else { newfromchar = \".\"; } parsedString[from.y()] = parsedString[from.y()].substring(0, from.x()) + newfromchar + parsedString[from.y()].substring(from.x() + 1); parsedString[to.y()] = parsedString[to.y()].substring(0, to.x()) + objectToBeMoved + parsedString[to.y()].substring(to.x() + 1); String newMapInfo = null; for (int i=0; i<parsedString.length; i++) { if (newMapInfo == null) newMapInfo = parsedString[i]; else newMapInfo = newMapInfo + '\\n' + parsedString[i]; } this.mapInfo = newMapInfo; } /** * Record a checkpoint of the game state, including: * <li>All current positions of entities in the game map.</li> * <li>Current undo quota</li> * <p> * Checkpoint is used in {@link GameState#undo()} public static @NotNull Position of(int x, int y) { return new Position(x, y); } public void undo() { // TODO if (this.undoLimit > 0 || this.undoLimit == -1) { if (this.mapInfoSave.isEmpty()) { this.mapInfo = this.initMapInfo; } else if (this.mapInfoSave.size() == 1) { this.mapInfo = this.initMapInfo; this.mapInfoSave.remove(this.mapInfoSave.size()-1); if (this.undoLimit > 0 ) this.undoLimit--; } else { this.mapInfo = this.mapInfoSave.get(this.mapInfoSave.size() - 2); this.mapInfoSave.remove(this.mapInfoSave.size()-1); if (this.undoLimit > 0 ) this.undoLimit--; } } } /** * Get the maximum width of the game map. * This should be the same as that in {@link GameMap}",
        "label": "P"
    },
    "2448": {
        "dataset": "COMP 3021",
        "project": "cywongci",
        "bug_id": "40",
        "T": "void testGameExit() { final var gameState = mock(GameState.class); final var inputEngine = mock(TerminalInputEngine.class); final var renderingEngine = mock(TerminalRenderingEngine.class); when(gameState.isWin()).thenReturn(false, false, false); when(inputEngine.fetchAction()) .thenReturn(new InvalidInput(0, \"\"), new InvalidInput(0, \"\"), new Exit(0)); final var game = new TerminalSokobanGame(gameState, inputEngine, renderingEngine); game.run(); verify(renderingEngine, atLeastOnce()).message(any()); }",
        "C": "public InvalidInput(int initiator, @NotNull String message) { super(initiator); this.message = message; } public Exit(int initiator) { super(initiator); } public TerminalSokobanGame(GameState gameState, TerminalInputEngine inputEngine, TerminalRenderingEngine renderingEngine) { super(gameState); this.inputEngine = inputEngine; this.renderingEngine = renderingEngine; // TODO // Check the number of players this.state1 = gameState; numberOfPlayers = gameState.getAllPlayerPositions().size(); if (numberOfPlayers > 2) { throw new IllegalArgumentException(); } } public void run() { // TODO this.renderingEngine.message(StringResources.GAME_READY_MESSAGE); System.out.println(StringResources.GAME_READY_MESSAGE); this.renderingEngine.render(this.state1); System.out.println(this.state1.mapInfo); var quota = this.state1.getUndoQuota(); if (quota.isPresent()) { if (quota.get() == -1) { this.renderingEngine.message(UNDO_QUOTA_UNLIMITED); System.out.println(UNDO_QUOTA_UNLIMITED); } else { this.renderingEngine.message(String.format(UNDO_QUOTA_TEMPLATE, quota.get())); System.out.println(String.format(UNDO_QUOTA_TEMPLATE, quota.get())); } } this.renderingEngine.message(\">>>\"); System.out.println(\">>>\"); while (true) { var action = this.inputEngine.fetchAction(); var actionresult = this.processAction(action); if (actionresult instanceof ActionResult.Failed) { this.renderingEngine.message(((ActionResult.Failed) actionresult).getReason()); System.out.println(((ActionResult.Failed) actionresult).getReason()); } this.renderingEngine.render(this.state1); System.out.println(this.state1.mapInfo); quota = this.state1.getUndoQuota(); if (quota.isPresent()) { if (quota.get() == -1) { this.renderingEngine.message(UNDO_QUOTA_UNLIMITED); System.out.println(UNDO_QUOTA_UNLIMITED); } else { this.renderingEngine.message(String.format(UNDO_QUOTA_TEMPLATE, quota.get())); System.out.println(String.format(UNDO_QUOTA_TEMPLATE, quota.get())); } } this.renderingEngine.message(\">>>\"); System.out.println(\">>>\"); if (this.shouldStop()) { this.renderingEngine.message(StringResources.GAME_EXIT_MESSAGE); System.out.println(StringResources.GAME_EXIT_MESSAGE); if (this.state1.isWin()) { this.renderingEngine.message(StringResources.WIN_MESSAGE); System.out.println(StringResources.WIN_MESSAGE); } return; } } }",
        "label": "P"
    },
    "2449": {
        "dataset": "COMP 3021",
        "project": "cywongci",
        "bug_id": "41",
        "T": "void testGameWin() { final var gameState = mock(GameState.class); final var inputEngine = mock(TerminalInputEngine.class); final var renderingEngine = mock(TerminalRenderingEngine.class); when(gameState.isWin()).thenReturn(false, false, false, true); when(inputEngine.fetchAction()) .thenReturn(new InvalidInput(0, \"\")); final var game = new TerminalSokobanGame(gameState, inputEngine, renderingEngine); game.run(); verify(gameState, atLeastOnce()).isWin(); verify(renderingEngine, atLeastOnce()).message(any()); }",
        "C": "public InvalidInput(int initiator, @NotNull String message) { super(initiator); this.message = message; } public TerminalSokobanGame(GameState gameState, TerminalInputEngine inputEngine, TerminalRenderingEngine renderingEngine) { super(gameState); this.inputEngine = inputEngine; this.renderingEngine = renderingEngine; // TODO // Check the number of players this.state1 = gameState; numberOfPlayers = gameState.getAllPlayerPositions().size(); if (numberOfPlayers > 2) { throw new IllegalArgumentException(); } } public void run() { // TODO this.renderingEngine.message(StringResources.GAME_READY_MESSAGE); System.out.println(StringResources.GAME_READY_MESSAGE); this.renderingEngine.render(this.state1); System.out.println(this.state1.mapInfo); var quota = this.state1.getUndoQuota(); if (quota.isPresent()) { if (quota.get() == -1) { this.renderingEngine.message(UNDO_QUOTA_UNLIMITED); System.out.println(UNDO_QUOTA_UNLIMITED); } else { this.renderingEngine.message(String.format(UNDO_QUOTA_TEMPLATE, quota.get())); System.out.println(String.format(UNDO_QUOTA_TEMPLATE, quota.get())); } } this.renderingEngine.message(\">>>\"); System.out.println(\">>>\"); while (true) { var action = this.inputEngine.fetchAction(); var actionresult = this.processAction(action); if (actionresult instanceof ActionResult.Failed) { this.renderingEngine.message(((ActionResult.Failed) actionresult).getReason()); System.out.println(((ActionResult.Failed) actionresult).getReason()); } this.renderingEngine.render(this.state1); System.out.println(this.state1.mapInfo); quota = this.state1.getUndoQuota(); if (quota.isPresent()) { if (quota.get() == -1) { this.renderingEngine.message(UNDO_QUOTA_UNLIMITED); System.out.println(UNDO_QUOTA_UNLIMITED); } else { this.renderingEngine.message(String.format(UNDO_QUOTA_TEMPLATE, quota.get())); System.out.println(String.format(UNDO_QUOTA_TEMPLATE, quota.get())); } } this.renderingEngine.message(\">>>\"); System.out.println(\">>>\"); if (this.shouldStop()) { this.renderingEngine.message(StringResources.GAME_EXIT_MESSAGE); System.out.println(StringResources.GAME_EXIT_MESSAGE); if (this.state1.isWin()) { this.renderingEngine.message(StringResources.WIN_MESSAGE); System.out.println(StringResources.WIN_MESSAGE); } return; } } }",
        "label": "P"
    },
    "2450": {
        "dataset": "COMP 3021",
        "project": "cywongci",
        "bug_id": "42",
        "T": "void testMoreThanTwoPlayers() { final var gameState = mock(GameState.class); final var inputEngine = mock(TerminalInputEngine.class); final var renderingEngine = mock(TerminalRenderingEngine.class); when(gameState.getAllPlayerPositions()).thenReturn(new HashSet<>(Arrays.asList(Position.of(1, 1), Position.of(1, 2), Position.of(1, 3)))); }",
        "C": "public static @NotNull Position of(int x, int y) { return new Position(x, y); }",
        "label": "P"
    },
    "2451": {
        "dataset": "COMP 3021",
        "project": "akuantay",
        "bug_id": "0",
        "T": "void moveUp() { Position.of(233, 232), new Move.Up(-1).nextPosition(pos) ); }",
        "C": "public static @NotNull Position of(int x, int y) { return new Position(x, y); } public Up(int initiator) { super(initiator); }",
        "label": "P"
    },
    "2452": {
        "dataset": "COMP 3021",
        "project": "akuantay",
        "bug_id": "1",
        "T": "void moveDown() { Position.of(233, 234), new Move.Down(-1).nextPosition(pos) ); }",
        "C": "public static @NotNull Position of(int x, int y) { return new Position(x, y); } public Down(int initiator) { super(initiator); }",
        "label": "P"
    },
    "2453": {
        "dataset": "COMP 3021",
        "project": "akuantay",
        "bug_id": "2",
        "T": "void moveRight() { Position.of(234, 233), new Move.Right(-1).nextPosition(pos) ); }",
        "C": "public static @NotNull Position of(int x, int y) { return new Position(x, y); } public Right(int initiator) { super(initiator); }",
        "label": "P"
    },
    "2454": {
        "dataset": "COMP 3021",
        "project": "akuantay",
        "bug_id": "3",
        "T": "void testExceedingUndoQuota() { final var gameState = mock(GameState.class); when(gameState.getPlayerPositionById(anyInt())).thenReturn(Position.of(0, 0)); when(gameState.getUndoQuota()).thenReturn(Optional.of(0)); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Undo(0)); }",
        "C": "public Undo(int initiator) { super(initiator); }",
        "label": "P"
    },
    "2455": {
        "dataset": "COMP 3021",
        "project": "akuantay",
        "bug_id": "4",
        "T": "void testExit() { final var gameState = mock(GameState.class); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Exit(0)); }",
        "C": "public Exit(int initiator) { super(initiator); }",
        "label": "P"
    },
    "2456": {
        "dataset": "COMP 3021",
        "project": "akuantay",
        "bug_id": "5",
        "T": "void testUndoUnlimited() { final var gameState = mock(GameState.class); when(gameState.getPlayerPositionById(anyInt())).thenReturn(Position.of(0, 0)); when(gameState.getUndoQuota()).thenReturn(Optional.empty()); final var game = new SokobanGameForTesting(gameState); for (int i = 0; i < 10000; i++) { final var result = game.feedActionForProcessing(new Undo(0)); } verify(gameState, times(10000)).undo(); }",
        "C": "public TerminalRenderingEngine(PrintStream outputStream) { this.outputStream = outputStream; } public Undo(int initiator) { super(initiator); }",
        "label": "F"
    },
    "2457": {
        "dataset": "COMP 3021",
        "project": "akuantay",
        "bug_id": "6",
        "T": "void testPushOtherPlayerBox() { String mapText = \"\"\" 233 ###### #AB.@# #b.a.# #@...# ###### \"\"\"; final var testMap = TestHelper.parseGameMap(mapText); final var gameState = spy(new GameState(testMap)); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Move.Down(0)); verify(gameState, never()).move(any(), any()); }",
        "C": "public GameState(@NotNull GameMap map) { this.currentGameMap = new GameMap(map); this.checkpoints.push(new GameMap(map)); this.undoQuota = map.getUndoLimit(); } public Down(int initiator) { super(initiator); }",
        "label": "P"
    },
    "2458": {
        "dataset": "COMP 3021",
        "project": "akuantay",
        "bug_id": "7",
        "T": "void testMoveNonExistingPlayer() { String mapText = \"\"\" 233 ###### #A..@# #a...# ##...# ###### \"\"\"; final var testMap = TestHelper.parseGameMap(mapText); final var gameState = spy(new GameState(testMap)); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Move.Down(23)); }",
        "C": "public GameState(@NotNull GameMap map) { this.currentGameMap = new GameMap(map); this.checkpoints.push(new GameMap(map)); this.undoQuota = map.getUndoLimit(); } public Down(int initiator) { super(initiator); }",
        "label": "P"
    },
    "2459": {
        "dataset": "COMP 3021",
        "project": "akuantay",
        "bug_id": "8",
        "T": "void testCheckpointWhenNeed() { final var gameState = spy(new GameState(TestHelper.parseGameMap(\"\"\" 233 ###### #.Aa@# #..a@# ###### \"\"\" ))); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Move.Right(0)); verify(gameState, times(1)).checkpoint(); }",
        "C": "public GameState(@NotNull GameMap map) { this.currentGameMap = new GameMap(map); this.checkpoints.push(new GameMap(map)); this.undoQuota = map.getUndoLimit(); } public Right(int initiator) { super(initiator); }",
        "label": "P"
    },
    "2460": {
        "dataset": "COMP 3021",
        "project": "akuantay",
        "bug_id": "9",
        "T": "void testPushBoxAgainstWall() { String mapText = \"\"\" 233 ###### #A..@# #a...# ##...# ###### \"\"\"; final var testMap = TestHelper.parseGameMap(mapText); final var gameState = spy(new GameState(testMap)); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Move.Down(0)); verify(gameState, never()).move(any(), any()); }",
        "C": "public GameState(@NotNull GameMap map) { this.currentGameMap = new GameMap(map); this.checkpoints.push(new GameMap(map)); this.undoQuota = map.getUndoLimit(); } public Down(int initiator) { super(initiator); }",
        "label": "P"
    },
    "2461": {
        "dataset": "COMP 3021",
        "project": "akuantay",
        "bug_id": "10",
        "T": "void testCheckpointWhenNotNeed() { final var gameState = spy(new GameState(TestHelper.parseGameMap(\"\"\" 233 ###### #A.a@# #..a@# ###### \"\"\" ))); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Move.Right(0)); verify(gameState, never()).checkpoint(); } private static class SokobanGameForTesting extends AbstractSokobanGame { protected SokobanGameForTesting(GameState gameState) { super(gameState); } @Override public void run() { } public ActionResult feedActionForProcessing(Action action) { return processAction(action); } }",
        "C": "public GameState(@NotNull GameMap map) { this.currentGameMap = new GameMap(map); this.checkpoints.push(new GameMap(map)); this.undoQuota = map.getUndoLimit(); } public Right(int initiator) { super(initiator); } public void run() { this.renderingEngine.message(StringResources.GAME_READY_MESSAGE); this.renderingEngine.render(this.state); this.renderingEngine.message(\"\"); while (!this.shouldStop()){ // 1. print remaining quota and input arrows String quotaString; if (this.state.getUndoQuota().isPresent() && this.state.getUndoQuota().get() != -1){ quotaString = String.format(StringResources.UNDO_QUOTA_TEMPLATE,this.state.getUndoQuota().get()); } else{ quotaString = StringResources.UNDO_QUOTA_UNLIMITED; } this.renderingEngine.message(quotaString); this.renderingEngine.message(StringResources.GET_INPUT_ARROWS); // 2. get action and process it Action action = this.inputEngine.fetchAction(); ActionResult actionResult = this.processAction(action); if (actionResult instanceof ActionResult.Failed actionFailed){ this.renderingEngine.message(actionFailed.getReason()); } // 3. print state this.renderingEngine.render(this.state); this.renderingEngine.message(\"\"); } this.renderingEngine.message(StringResources.GAME_EXIT_MESSAGE); if (this.state.isWin()) { this.renderingEngine.message(StringResources.WIN_MESSAGE); } } protected ActionResult processAction(@NotNull Action action) { return switch(action){ case Move move -> this.processMove(move); case InvalidInput invalidInput -> this.processInvalidInput(invalidInput); case Undo undo -> this.processUndo(undo); case Exit exit -> this.processExit(exit); }; }",
        "label": "P"
    },
    "2462": {
        "dataset": "COMP 3021",
        "project": "akuantay",
        "bug_id": "11",
        "T": "void testHitAnotherPlayer() { String mapText = \"\"\" 233 ###### #A..@# #B...# #ab.@# ###### \"\"\"; final var testMap = TestHelper.parseGameMap(mapText); final var gameState = spy(new GameState(testMap)); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Move.Down(0)); verify(gameState, never()).move(any(), any()); }",
        "C": "public GameState(@NotNull GameMap map) { this.currentGameMap = new GameMap(map); this.checkpoints.push(new GameMap(map)); this.undoQuota = map.getUndoLimit(); } public Down(int initiator) { super(initiator); }",
        "label": "P"
    },
    "2463": {
        "dataset": "COMP 3021",
        "project": "akuantay",
        "bug_id": "12",
        "T": "void testUndoWithinQuota() { final var gameState = mock(GameState.class); when(gameState.getPlayerPositionById(anyInt())).thenReturn(Position.of(0, 0)); when(gameState.getUndoQuota()).thenReturn(Optional.of(1)); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Undo(0)); verify(gameState, times(1)).undo(); }",
        "C": "public Undo(int initiator) { super(initiator); }",
        "label": "F"
    },
    "2464": {
        "dataset": "COMP 3021",
        "project": "akuantay",
        "bug_id": "13",
        "T": "void testInvalidInput() { final var game = new SokobanGameForTesting(mock(GameState.class)); final var message = String.valueOf(new Random().nextLong()); final var action = new InvalidInput(-1, message); final var result = game.feedActionForProcessing(action); }",
        "C": "public InvalidInput(int initiator, @NotNull String message) { super(initiator); this.message = message; }",
        "label": "P"
    },
    "2465": {
        "dataset": "COMP 3021",
        "project": "akuantay",
        "bug_id": "14",
        "T": "void testUndoLimitParsing() { final var gameMap = TestHelper.parseGameMap(rectangularMap); }",
        "C": "",
        "label": "P"
    },
    "2466": {
        "dataset": "COMP 3021",
        "project": "akuantay",
        "bug_id": "15",
        "T": "void testWidthForNonRectangularMap() { final var gameMap = TestHelper.parseGameMap(nonRectangularMap); }",
        "C": "",
        "label": "P"
    },
    "2467": {
        "dataset": "COMP 3021",
        "project": "akuantay",
        "bug_id": "16",
        "T": "void testTwoPlayersMap() { final var twoPlayersMap = \"\"\" 233 ###### #A..@# #..B@# #....# #.a..# #..b.# ###### \"\"\"; final var gameMap = TestHelper.parseGameMap(twoPlayersMap); final var playerIds = gameMap.getPlayerIds(); final var expectedIds = new HashSet<Integer>(); expectedIds.add(0); expectedIds.add(1); }",
        "C": "public Set<Integer> getPlayerIds() { return this.playerIds; }",
        "label": "P"
    },
    "2468": {
        "dataset": "COMP 3021",
        "project": "akuantay",
        "bug_id": "17",
        "T": "void testMapWithoutPlayer() { final var invalidMap = \"\"\" 233 ### #.# ### \"\"\"; } // @Tag(TestKind.HIDDEN) // @Test // void testUnmatchedPlayersAndBoxes() { // final var invalidMap = \"\"\" // 233 // ###### // #A..@# // #...@# // #a.b@# // #.a.@# // #..a.# // ###### // \"\"\"; // assertThrowsExactly(IllegalArgumentException.class, () -> TestHelper.parseGameMap(invalidMap)); // }",
        "C": "public TerminalRenderingEngine(PrintStream outputStream) { this.outputStream = outputStream; }",
        "label": "P"
    },
    "2469": {
        "dataset": "COMP 3021",
        "project": "akuantay",
        "bug_id": "18",
        "T": "void testManyPlayersMap() { final var manyPlayersMap = \"\"\" 233 ###### #A.P@@# #vCB@@# #.cpD@# #Ga.d@# #g.bV@# ###### \"\"\"; final var gameMap = TestHelper.parseGameMap(manyPlayersMap); final var playerIds = gameMap.getPlayerIds(); final var expectedIds = new HashSet<>(Arrays.asList( 0, 'P' - 'A', 'C' - 'A', 'B' - 'A', 'D' - 'A', 'G' - 'A', 'V' - 'A' )); }",
        "C": "public Set<Integer> getPlayerIds() { return this.playerIds; }",
        "label": "P"
    },
    "2470": {
        "dataset": "COMP 3021",
        "project": "akuantay",
        "bug_id": "19",
        "T": "void testHeightForNonRectangularMap() { final var gameMap = TestHelper.parseGameMap(nonRectangularMap); }",
        "C": "",
        "label": "P"
    },
    "2471": {
        "dataset": "COMP 3021",
        "project": "akuantay",
        "bug_id": "20",
        "T": "void testDuplicatedPlayers() { final var invalidMap = \"\"\" 233 ###### #A..@# #..A@# #....# #.a..# #..b.# ###### \"\"\"; }",
        "C": "",
        "label": "P"
    },
    "2472": {
        "dataset": "COMP 3021",
        "project": "akuantay",
        "bug_id": "21",
        "T": "void testParseMapWithoutUndoLimit() { final var invalidMap = String.join(\"\\n\", rectangularMap.lines().skip(1).toList()); }",
        "C": "",
        "label": "P"
    },
    "2473": {
        "dataset": "COMP 3021",
        "project": "akuantay",
        "bug_id": "22",
        "T": "void testInsufficientDestinations() { final var invalidMap = \"\"\" 233 ###### #A..@# #...@# #a...# #.a..# #..a.# ###### \"\"\"; }",
        "C": "",
        "label": "P"
    },
    "2474": {
        "dataset": "COMP 3021",
        "project": "akuantay",
        "bug_id": "23",
        "T": "void testSuperLargeMap() { try { new GameMap(Integer.MAX_VALUE, Integer.MAX_VALUE, Collections.emptySet(), 0); } catch (OutOfMemoryError e) { throw new RuntimeException(e); } }); }",
        "C": "public GameMap(int maxWidth, int maxHeight, Set<Position> destinations, int undoLimit) { this.maxWidth = maxWidth; this.maxHeight = maxHeight; this.destinations = destinations; this.undoLimit = Optional.ofNullable(undoLimit == -1 ? null : undoLimit); this.positionMap = new HashMap<>(); this.playerIds = new HashSet<>(); } public TerminalRenderingEngine(PrintStream outputStream) { this.outputStream = outputStream; }",
        "label": "P"
    },
    "2475": {
        "dataset": "COMP 3021",
        "project": "akuantay",
        "bug_id": "24",
        "T": "void testInvalidUndoLimit() { final var invalidMap = \"\"\" -233 ###### #A..@# #...@# #a.b@# #.a.@# #..a.# ###### \"\"\"; }",
        "C": "",
        "label": "P"
    },
    "2476": {
        "dataset": "COMP 3021",
        "project": "akuantay",
        "bug_id": "25",
        "T": "void testEmptyMap() { final var invalidMap = \"\"; }",
        "C": "",
        "label": "P"
    },
    "2477": {
        "dataset": "COMP 3021",
        "project": "akuantay",
        "bug_id": "26",
        "T": "void testMove(String input, String name, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); } private InputStream fixValueStream(String content) { final var bytes = content.getBytes(StandardCharsets.UTF_8); return new ByteArrayInputStream(bytes); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { Pattern movesPattern = Pattern.compile(\"^(?<action>[ASWDaswdHJKLhjkl])$\"); String moveChars = \"ASWDaswdHJKLhjkl\"; Integer initiator = -1; final String inputLine = this.terminalScanner.nextLine(); if (inputLine.length() == StringResources.EXIT_COMMAND_TEXT.length() && inputLine.toLowerCase().contains(StringResources.EXIT_COMMAND_TEXT)){ return new Exit(initiator); } else if (inputLine.length() == 1 && Character.toLowerCase(inputLine.charAt(0)) == 'u'){ return new Undo(initiator); } else if (Pattern.matches(movesPattern.pattern(), inputLine)){ char c = inputLine.charAt(0); for (int i = 0; i < moveChars.length();++i){ initiator = i < moveChars.length()/2? 0: 1; if (moveChars.charAt(i) == c){ switch (i % 4) { case 0 -> { return new Move.Left(initiator); } case 1 -> { return new Move.Down(initiator); } case 2 -> { return new Move.Up(initiator); } case 3 -> { return new Move.Right(initiator); } default -> throw new ShouldNotReachException(); } } } } return new InvalidInput(initiator, INVALID_INPUT_MESSAGE); }",
        "label": "P"
    },
    "2478": {
        "dataset": "COMP 3021",
        "project": "akuantay",
        "bug_id": "27",
        "T": "void testMove(String input, String name, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); } private InputStream fixValueStream(String content) { final var bytes = content.getBytes(StandardCharsets.UTF_8); return new ByteArrayInputStream(bytes); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { Pattern movesPattern = Pattern.compile(\"^(?<action>[ASWDaswdHJKLhjkl])$\"); String moveChars = \"ASWDaswdHJKLhjkl\"; Integer initiator = -1; final String inputLine = this.terminalScanner.nextLine(); if (inputLine.length() == StringResources.EXIT_COMMAND_TEXT.length() && inputLine.toLowerCase().contains(StringResources.EXIT_COMMAND_TEXT)){ return new Exit(initiator); } else if (inputLine.length() == 1 && Character.toLowerCase(inputLine.charAt(0)) == 'u'){ return new Undo(initiator); } else if (Pattern.matches(movesPattern.pattern(), inputLine)){ char c = inputLine.charAt(0); for (int i = 0; i < moveChars.length();++i){ initiator = i < moveChars.length()/2? 0: 1; if (moveChars.charAt(i) == c){ switch (i % 4) { case 0 -> { return new Move.Left(initiator); } case 1 -> { return new Move.Down(initiator); } case 2 -> { return new Move.Up(initiator); } case 3 -> { return new Move.Right(initiator); } default -> throw new ShouldNotReachException(); } } } } return new InvalidInput(initiator, INVALID_INPUT_MESSAGE); }",
        "label": "P"
    },
    "2479": {
        "dataset": "COMP 3021",
        "project": "akuantay",
        "bug_id": "28",
        "T": "void testMove(String input, String name, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); } private InputStream fixValueStream(String content) { final var bytes = content.getBytes(StandardCharsets.UTF_8); return new ByteArrayInputStream(bytes); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { Pattern movesPattern = Pattern.compile(\"^(?<action>[ASWDaswdHJKLhjkl])$\"); String moveChars = \"ASWDaswdHJKLhjkl\"; Integer initiator = -1; final String inputLine = this.terminalScanner.nextLine(); if (inputLine.length() == StringResources.EXIT_COMMAND_TEXT.length() && inputLine.toLowerCase().contains(StringResources.EXIT_COMMAND_TEXT)){ return new Exit(initiator); } else if (inputLine.length() == 1 && Character.toLowerCase(inputLine.charAt(0)) == 'u'){ return new Undo(initiator); } else if (Pattern.matches(movesPattern.pattern(), inputLine)){ char c = inputLine.charAt(0); for (int i = 0; i < moveChars.length();++i){ initiator = i < moveChars.length()/2? 0: 1; if (moveChars.charAt(i) == c){ switch (i % 4) { case 0 -> { return new Move.Left(initiator); } case 1 -> { return new Move.Down(initiator); } case 2 -> { return new Move.Up(initiator); } case 3 -> { return new Move.Right(initiator); } default -> throw new ShouldNotReachException(); } } } } return new InvalidInput(initiator, INVALID_INPUT_MESSAGE); }",
        "label": "P"
    },
    "2480": {
        "dataset": "COMP 3021",
        "project": "akuantay",
        "bug_id": "29",
        "T": "void testMove(String input, String name, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); } private InputStream fixValueStream(String content) { final var bytes = content.getBytes(StandardCharsets.UTF_8); return new ByteArrayInputStream(bytes); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { Pattern movesPattern = Pattern.compile(\"^(?<action>[ASWDaswdHJKLhjkl])$\"); String moveChars = \"ASWDaswdHJKLhjkl\"; Integer initiator = -1; final String inputLine = this.terminalScanner.nextLine(); if (inputLine.length() == StringResources.EXIT_COMMAND_TEXT.length() && inputLine.toLowerCase().contains(StringResources.EXIT_COMMAND_TEXT)){ return new Exit(initiator); } else if (inputLine.length() == 1 && Character.toLowerCase(inputLine.charAt(0)) == 'u'){ return new Undo(initiator); } else if (Pattern.matches(movesPattern.pattern(), inputLine)){ char c = inputLine.charAt(0); for (int i = 0; i < moveChars.length();++i){ initiator = i < moveChars.length()/2? 0: 1; if (moveChars.charAt(i) == c){ switch (i % 4) { case 0 -> { return new Move.Left(initiator); } case 1 -> { return new Move.Down(initiator); } case 2 -> { return new Move.Up(initiator); } case 3 -> { return new Move.Right(initiator); } default -> throw new ShouldNotReachException(); } } } } return new InvalidInput(initiator, INVALID_INPUT_MESSAGE); }",
        "label": "P"
    },
    "2481": {
        "dataset": "COMP 3021",
        "project": "akuantay",
        "bug_id": "30",
        "T": "void testMove(String input, String name, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); } private InputStream fixValueStream(String content) { final var bytes = content.getBytes(StandardCharsets.UTF_8); return new ByteArrayInputStream(bytes); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { Pattern movesPattern = Pattern.compile(\"^(?<action>[ASWDaswdHJKLhjkl])$\"); String moveChars = \"ASWDaswdHJKLhjkl\"; Integer initiator = -1; final String inputLine = this.terminalScanner.nextLine(); if (inputLine.length() == StringResources.EXIT_COMMAND_TEXT.length() && inputLine.toLowerCase().contains(StringResources.EXIT_COMMAND_TEXT)){ return new Exit(initiator); } else if (inputLine.length() == 1 && Character.toLowerCase(inputLine.charAt(0)) == 'u'){ return new Undo(initiator); } else if (Pattern.matches(movesPattern.pattern(), inputLine)){ char c = inputLine.charAt(0); for (int i = 0; i < moveChars.length();++i){ initiator = i < moveChars.length()/2? 0: 1; if (moveChars.charAt(i) == c){ switch (i % 4) { case 0 -> { return new Move.Left(initiator); } case 1 -> { return new Move.Down(initiator); } case 2 -> { return new Move.Up(initiator); } case 3 -> { return new Move.Right(initiator); } default -> throw new ShouldNotReachException(); } } } } return new InvalidInput(initiator, INVALID_INPUT_MESSAGE); }",
        "label": "P"
    },
    "2482": {
        "dataset": "COMP 3021",
        "project": "akuantay",
        "bug_id": "31",
        "T": "void testMove(String input, String name, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); } private InputStream fixValueStream(String content) { final var bytes = content.getBytes(StandardCharsets.UTF_8); return new ByteArrayInputStream(bytes); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { Pattern movesPattern = Pattern.compile(\"^(?<action>[ASWDaswdHJKLhjkl])$\"); String moveChars = \"ASWDaswdHJKLhjkl\"; Integer initiator = -1; final String inputLine = this.terminalScanner.nextLine(); if (inputLine.length() == StringResources.EXIT_COMMAND_TEXT.length() && inputLine.toLowerCase().contains(StringResources.EXIT_COMMAND_TEXT)){ return new Exit(initiator); } else if (inputLine.length() == 1 && Character.toLowerCase(inputLine.charAt(0)) == 'u'){ return new Undo(initiator); } else if (Pattern.matches(movesPattern.pattern(), inputLine)){ char c = inputLine.charAt(0); for (int i = 0; i < moveChars.length();++i){ initiator = i < moveChars.length()/2? 0: 1; if (moveChars.charAt(i) == c){ switch (i % 4) { case 0 -> { return new Move.Left(initiator); } case 1 -> { return new Move.Down(initiator); } case 2 -> { return new Move.Up(initiator); } case 3 -> { return new Move.Right(initiator); } default -> throw new ShouldNotReachException(); } } } } return new InvalidInput(initiator, INVALID_INPUT_MESSAGE); }",
        "label": "P"
    },
    "2483": {
        "dataset": "COMP 3021",
        "project": "akuantay",
        "bug_id": "32",
        "T": "void testMove(String input, String name, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); } private InputStream fixValueStream(String content) { final var bytes = content.getBytes(StandardCharsets.UTF_8); return new ByteArrayInputStream(bytes); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { Pattern movesPattern = Pattern.compile(\"^(?<action>[ASWDaswdHJKLhjkl])$\"); String moveChars = \"ASWDaswdHJKLhjkl\"; Integer initiator = -1; final String inputLine = this.terminalScanner.nextLine(); if (inputLine.length() == StringResources.EXIT_COMMAND_TEXT.length() && inputLine.toLowerCase().contains(StringResources.EXIT_COMMAND_TEXT)){ return new Exit(initiator); } else if (inputLine.length() == 1 && Character.toLowerCase(inputLine.charAt(0)) == 'u'){ return new Undo(initiator); } else if (Pattern.matches(movesPattern.pattern(), inputLine)){ char c = inputLine.charAt(0); for (int i = 0; i < moveChars.length();++i){ initiator = i < moveChars.length()/2? 0: 1; if (moveChars.charAt(i) == c){ switch (i % 4) { case 0 -> { return new Move.Left(initiator); } case 1 -> { return new Move.Down(initiator); } case 2 -> { return new Move.Up(initiator); } case 3 -> { return new Move.Right(initiator); } default -> throw new ShouldNotReachException(); } } } } return new InvalidInput(initiator, INVALID_INPUT_MESSAGE); }",
        "label": "P"
    },
    "2484": {
        "dataset": "COMP 3021",
        "project": "akuantay",
        "bug_id": "33",
        "T": "void testMove(String input, String name, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); } private InputStream fixValueStream(String content) { final var bytes = content.getBytes(StandardCharsets.UTF_8); return new ByteArrayInputStream(bytes); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { Pattern movesPattern = Pattern.compile(\"^(?<action>[ASWDaswdHJKLhjkl])$\"); String moveChars = \"ASWDaswdHJKLhjkl\"; Integer initiator = -1; final String inputLine = this.terminalScanner.nextLine(); if (inputLine.length() == StringResources.EXIT_COMMAND_TEXT.length() && inputLine.toLowerCase().contains(StringResources.EXIT_COMMAND_TEXT)){ return new Exit(initiator); } else if (inputLine.length() == 1 && Character.toLowerCase(inputLine.charAt(0)) == 'u'){ return new Undo(initiator); } else if (Pattern.matches(movesPattern.pattern(), inputLine)){ char c = inputLine.charAt(0); for (int i = 0; i < moveChars.length();++i){ initiator = i < moveChars.length()/2? 0: 1; if (moveChars.charAt(i) == c){ switch (i % 4) { case 0 -> { return new Move.Left(initiator); } case 1 -> { return new Move.Down(initiator); } case 2 -> { return new Move.Up(initiator); } case 3 -> { return new Move.Right(initiator); } default -> throw new ShouldNotReachException(); } } } } return new InvalidInput(initiator, INVALID_INPUT_MESSAGE); }",
        "label": "P"
    },
    "2485": {
        "dataset": "COMP 3021",
        "project": "akuantay",
        "bug_id": "34",
        "T": "void testUndo(String input, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { Pattern movesPattern = Pattern.compile(\"^(?<action>[ASWDaswdHJKLhjkl])$\"); String moveChars = \"ASWDaswdHJKLhjkl\"; Integer initiator = -1; final String inputLine = this.terminalScanner.nextLine(); if (inputLine.length() == StringResources.EXIT_COMMAND_TEXT.length() && inputLine.toLowerCase().contains(StringResources.EXIT_COMMAND_TEXT)){ return new Exit(initiator); } else if (inputLine.length() == 1 && Character.toLowerCase(inputLine.charAt(0)) == 'u'){ return new Undo(initiator); } else if (Pattern.matches(movesPattern.pattern(), inputLine)){ char c = inputLine.charAt(0); for (int i = 0; i < moveChars.length();++i){ initiator = i < moveChars.length()/2? 0: 1; if (moveChars.charAt(i) == c){ switch (i % 4) { case 0 -> { return new Move.Left(initiator); } case 1 -> { return new Move.Down(initiator); } case 2 -> { return new Move.Up(initiator); } case 3 -> { return new Move.Right(initiator); } default -> throw new ShouldNotReachException(); } } } } return new InvalidInput(initiator, INVALID_INPUT_MESSAGE); }",
        "label": "P"
    },
    "2486": {
        "dataset": "COMP 3021",
        "project": "akuantay",
        "bug_id": "35",
        "T": "void testInvalidInput() { final var inputStream = fixValueStream(\"blah blah\"); final var inputEngine = new TerminalInputEngine(inputStream); final var action = inputEngine.fetchAction(); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { Pattern movesPattern = Pattern.compile(\"^(?<action>[ASWDaswdHJKLhjkl])$\"); String moveChars = \"ASWDaswdHJKLhjkl\"; Integer initiator = -1; final String inputLine = this.terminalScanner.nextLine(); if (inputLine.length() == StringResources.EXIT_COMMAND_TEXT.length() && inputLine.toLowerCase().contains(StringResources.EXIT_COMMAND_TEXT)){ return new Exit(initiator); } else if (inputLine.length() == 1 && Character.toLowerCase(inputLine.charAt(0)) == 'u'){ return new Undo(initiator); } else if (Pattern.matches(movesPattern.pattern(), inputLine)){ char c = inputLine.charAt(0); for (int i = 0; i < moveChars.length();++i){ initiator = i < moveChars.length()/2? 0: 1; if (moveChars.charAt(i) == c){ switch (i % 4) { case 0 -> { return new Move.Left(initiator); } case 1 -> { return new Move.Down(initiator); } case 2 -> { return new Move.Up(initiator); } case 3 -> { return new Move.Right(initiator); } default -> throw new ShouldNotReachException(); } } } } return new InvalidInput(initiator, INVALID_INPUT_MESSAGE); }",
        "label": "P"
    },
    "2487": {
        "dataset": "COMP 3021",
        "project": "akuantay",
        "bug_id": "36",
        "T": "void testUndoWhenThereIsNoMove() { final var gameState = new GameState(TestHelper.parseGameMap(\"\"\" 233 ###### #A.a@# #..a@# ###### \"\"\" )); gameState.undo(); } private Entity generateEntity(int key) { return switch (key % 4) { case 0 -> new Box(0); case 1 -> new Empty(); case 2 -> new Player(0); case 3 -> new Wall(); default -> throw new ShouldNotReachException(); }; }",
        "C": "public GameState(@NotNull GameMap map) { this.currentGameMap = new GameMap(map); this.checkpoints.push(new GameMap(map)); this.undoQuota = map.getUndoLimit(); } public void undo() { if (this.isUndoQuota() && checkpoints.size() == 1){ this.currentGameMap = new GameMap(this.checkpoints.peek()); return; } else if (this.decrementUndoQuota()){ this.popCheckPoints(); this.currentGameMap = new GameMap(this.checkpoints.peek()); return; } throw new ShouldNotReachException(); } /** * Get the maximum width of the game map. * This should be the same as that in {@link GameMap} public TerminalRenderingEngine(PrintStream outputStream) { this.outputStream = outputStream; } public Box(int playerId) { this.playerId = playerId; } public Player(int id) { this.id = id; } public ShouldNotReachException() { super(\"This branch should not be reached.\"); }",
        "label": "P"
    },
    "2488": {
        "dataset": "COMP 3021",
        "project": "akuantay",
        "bug_id": "37",
        "T": "void testGetUndoUnlimited() { final var gameState = new GameState(TestHelper.parseGameMap(\"\"\" -1 ###### #.Aa@# #..a@# ###### \"\"\" )); }",
        "C": "public GameState(@NotNull GameMap map) { this.currentGameMap = new GameMap(map); this.checkpoints.push(new GameMap(map)); this.undoQuota = map.getUndoLimit(); }",
        "label": "P"
    },
    "2489": {
        "dataset": "COMP 3021",
        "project": "akuantay",
        "bug_id": "38",
        "T": "void testMapCopying() { final var maxWidth = 2333; final var maxHeight = 2333; final var random = new Random(); final var randomEntities = Stream.generate(() -> Position.of(random.nextInt(maxWidth), random.nextInt(maxHeight))) .distinct() .limit(100) .collect(Collectors.toMap(Function.identity(), it -> generateEntity(it.x()))); final var firstPos = randomEntities.keySet().stream().findFirst(); final var gameMap = new GameMap(maxWidth, maxHeight, Collections.singleton(firstPos.get()), 233); randomEntities.forEach(gameMap::putEntity); final var gameState = new GameState(gameMap); final var randomPosition = randomEntities.keySet().stream().findAny(); gameMap.putEntity(randomPosition.get(), new Empty()); randomEntities.forEach((p, e) -> assertEquals(e, gameState.getEntity(p))); }",
        "C": "public static @NotNull Position of(int x, int y) { return new Position(x, y); } public GameMap(int maxWidth, int maxHeight, Set<Position> destinations, int undoLimit) { this.maxWidth = maxWidth; this.maxHeight = maxHeight; this.destinations = destinations; this.undoLimit = Optional.ofNullable(undoLimit == -1 ? null : undoLimit); this.positionMap = new HashMap<>(); this.playerIds = new HashSet<>(); } public GameState(@NotNull GameMap map) { this.currentGameMap = new GameMap(map); this.checkpoints.push(new GameMap(map)); this.undoQuota = map.getUndoLimit(); } public void putEntity(Position position, Entity entity) { this.positionMap.put(position, entity); } public @Nullable Entity getEntity(@NotNull Position position) { return this.currentGameMap.getEntity(position); } /** * Get all box destination positions as a set in the game map. * This should be the same as that in {@link GameMap}",
        "label": "P"
    },
    "2490": {
        "dataset": "COMP 3021",
        "project": "akuantay",
        "bug_id": "39",
        "T": "void testUndoWhenThereIsMoveButNoCheckpoint() { final var gameState = new GameState(TestHelper.parseGameMap(\"\"\" 233 ###### #A.a@# #..a@# ###### \"\"\" )); gameState.move(Position.of(1, 1), Position.of(2, 1)); gameState.undo(); }",
        "C": "public GameState(@NotNull GameMap map) { this.currentGameMap = new GameMap(map); this.checkpoints.push(new GameMap(map)); this.undoQuota = map.getUndoLimit(); } public void move(Position from, Position to) { this.currentGameMap.move(from, to); } /** * Record a checkpoint of the game state, including: * <li>All current positions of entities in the game map.</li> * <li>Current undo quota</li> * <p> * Checkpoint is used in {@link GameState#undo()} public static @NotNull Position of(int x, int y) { return new Position(x, y); } public void undo() { if (this.isUndoQuota() && checkpoints.size() == 1){ this.currentGameMap = new GameMap(this.checkpoints.peek()); return; } else if (this.decrementUndoQuota()){ this.popCheckPoints(); this.currentGameMap = new GameMap(this.checkpoints.peek()); return; } throw new ShouldNotReachException(); } /** * Get the maximum width of the game map. * This should be the same as that in {@link GameMap}",
        "label": "P"
    },
    "2491": {
        "dataset": "COMP 3021",
        "project": "akuantay",
        "bug_id": "40",
        "T": "void testGameExit() { final var gameState = mock(GameState.class); final var inputEngine = mock(TerminalInputEngine.class); final var renderingEngine = mock(TerminalRenderingEngine.class); when(gameState.isWin()).thenReturn(false, false, false); when(inputEngine.fetchAction()) .thenReturn(new InvalidInput(0, \"\"), new InvalidInput(0, \"\"), new Exit(0)); final var game = new TerminalSokobanGame(gameState, inputEngine, renderingEngine); game.run(); verify(renderingEngine, atLeastOnce()).message(any()); }",
        "C": "public InvalidInput(int initiator, @NotNull String message) { super(initiator); this.message = message; } public Exit(int initiator) { super(initiator); } public TerminalSokobanGame(GameState gameState, TerminalInputEngine inputEngine, TerminalRenderingEngine renderingEngine) { super(gameState); if (gameState.getAllPlayerPositions().size() > 2){ throw new IllegalArgumentException(StringResources.MORE_THAN_2_PLAYERS); } this.inputEngine = inputEngine; this.renderingEngine = renderingEngine; } public void run() { this.renderingEngine.message(StringResources.GAME_READY_MESSAGE); this.renderingEngine.render(this.state); this.renderingEngine.message(\"\"); while (!this.shouldStop()){ // 1. print remaining quota and input arrows String quotaString; if (this.state.getUndoQuota().isPresent() && this.state.getUndoQuota().get() != -1){ quotaString = String.format(StringResources.UNDO_QUOTA_TEMPLATE,this.state.getUndoQuota().get()); } else{ quotaString = StringResources.UNDO_QUOTA_UNLIMITED; } this.renderingEngine.message(quotaString); this.renderingEngine.message(StringResources.GET_INPUT_ARROWS); // 2. get action and process it Action action = this.inputEngine.fetchAction(); ActionResult actionResult = this.processAction(action); if (actionResult instanceof ActionResult.Failed actionFailed){ this.renderingEngine.message(actionFailed.getReason()); } // 3. print state this.renderingEngine.render(this.state); this.renderingEngine.message(\"\"); } this.renderingEngine.message(StringResources.GAME_EXIT_MESSAGE); if (this.state.isWin()) { this.renderingEngine.message(StringResources.WIN_MESSAGE); } }",
        "label": "P"
    },
    "2492": {
        "dataset": "COMP 3021",
        "project": "akuantay",
        "bug_id": "41",
        "T": "void testGameWin() { final var gameState = mock(GameState.class); final var inputEngine = mock(TerminalInputEngine.class); final var renderingEngine = mock(TerminalRenderingEngine.class); when(gameState.isWin()).thenReturn(false, false, false, true); when(inputEngine.fetchAction()) .thenReturn(new InvalidInput(0, \"\")); final var game = new TerminalSokobanGame(gameState, inputEngine, renderingEngine); game.run(); verify(gameState, atLeastOnce()).isWin(); verify(renderingEngine, atLeastOnce()).message(any()); }",
        "C": "public InvalidInput(int initiator, @NotNull String message) { super(initiator); this.message = message; } public TerminalSokobanGame(GameState gameState, TerminalInputEngine inputEngine, TerminalRenderingEngine renderingEngine) { super(gameState); if (gameState.getAllPlayerPositions().size() > 2){ throw new IllegalArgumentException(StringResources.MORE_THAN_2_PLAYERS); } this.inputEngine = inputEngine; this.renderingEngine = renderingEngine; } public void run() { this.renderingEngine.message(StringResources.GAME_READY_MESSAGE); this.renderingEngine.render(this.state); this.renderingEngine.message(\"\"); while (!this.shouldStop()){ // 1. print remaining quota and input arrows String quotaString; if (this.state.getUndoQuota().isPresent() && this.state.getUndoQuota().get() != -1){ quotaString = String.format(StringResources.UNDO_QUOTA_TEMPLATE,this.state.getUndoQuota().get()); } else{ quotaString = StringResources.UNDO_QUOTA_UNLIMITED; } this.renderingEngine.message(quotaString); this.renderingEngine.message(StringResources.GET_INPUT_ARROWS); // 2. get action and process it Action action = this.inputEngine.fetchAction(); ActionResult actionResult = this.processAction(action); if (actionResult instanceof ActionResult.Failed actionFailed){ this.renderingEngine.message(actionFailed.getReason()); } // 3. print state this.renderingEngine.render(this.state); this.renderingEngine.message(\"\"); } this.renderingEngine.message(StringResources.GAME_EXIT_MESSAGE); if (this.state.isWin()) { this.renderingEngine.message(StringResources.WIN_MESSAGE); } }",
        "label": "P"
    },
    "2493": {
        "dataset": "COMP 3021",
        "project": "akuantay",
        "bug_id": "42",
        "T": "void testMoreThanTwoPlayers() { final var gameState = mock(GameState.class); final var inputEngine = mock(TerminalInputEngine.class); final var renderingEngine = mock(TerminalRenderingEngine.class); when(gameState.getAllPlayerPositions()).thenReturn(new HashSet<>(Arrays.asList(Position.of(1, 1), Position.of(1, 2), Position.of(1, 3)))); }",
        "C": "public static @NotNull Position of(int x, int y) { return new Position(x, y); }",
        "label": "P"
    },
    "2494": {
        "dataset": "COMP 3021",
        "project": "nctse",
        "bug_id": "0",
        "T": "void moveUp() { Position.of(233, 232), new Move.Up(-1).nextPosition(pos) ); }",
        "C": "public static @NotNull Position of(int x, int y) { return new Position(x, y); } public Up(int initiator) { super(initiator); }",
        "label": "P"
    },
    "2495": {
        "dataset": "COMP 3021",
        "project": "nctse",
        "bug_id": "1",
        "T": "void moveDown() { Position.of(233, 234), new Move.Down(-1).nextPosition(pos) ); }",
        "C": "public static @NotNull Position of(int x, int y) { return new Position(x, y); } public Down(int initiator) { super(initiator); }",
        "label": "P"
    },
    "2496": {
        "dataset": "COMP 3021",
        "project": "nctse",
        "bug_id": "2",
        "T": "void moveRight() { Position.of(234, 233), new Move.Right(-1).nextPosition(pos) ); }",
        "C": "public static @NotNull Position of(int x, int y) { return new Position(x, y); } public Right(int initiator) { super(initiator); }",
        "label": "P"
    },
    "2497": {
        "dataset": "COMP 3021",
        "project": "nctse",
        "bug_id": "3",
        "T": "void testExceedingUndoQuota() { final var gameState = mock(GameState.class); when(gameState.getPlayerPositionById(anyInt())).thenReturn(Position.of(0, 0)); when(gameState.getUndoQuota()).thenReturn(Optional.of(0)); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Undo(0)); }",
        "C": "public Undo(int initiator) { super(initiator); }",
        "label": "P"
    },
    "2498": {
        "dataset": "COMP 3021",
        "project": "nctse",
        "bug_id": "4",
        "T": "void testExit() { final var gameState = mock(GameState.class); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Exit(0)); }",
        "C": "public Exit(int initiator) { super(initiator); }",
        "label": "F"
    },
    "2499": {
        "dataset": "COMP 3021",
        "project": "nctse",
        "bug_id": "5",
        "T": "void testUndoUnlimited() { final var gameState = mock(GameState.class); when(gameState.getPlayerPositionById(anyInt())).thenReturn(Position.of(0, 0)); when(gameState.getUndoQuota()).thenReturn(Optional.empty()); final var game = new SokobanGameForTesting(gameState); for (int i = 0; i < 10000; i++) { final var result = game.feedActionForProcessing(new Undo(0)); } verify(gameState, times(10000)).undo(); }",
        "C": "public TerminalRenderingEngine(PrintStream outputSteam) { this.outputSteam = outputSteam; } public Undo(int initiator) { super(initiator); }",
        "label": "P"
    },
    "2500": {
        "dataset": "COMP 3021",
        "project": "nctse",
        "bug_id": "6",
        "T": "void testPushOtherPlayerBox() { String mapText = \"\"\" 233 ###### #AB.@# #b.a.# #@...# ###### \"\"\"; final var testMap = TestHelper.parseGameMap(mapText); final var gameState = spy(new GameState(testMap)); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Move.Down(0)); verify(gameState, never()).move(any(), any()); }",
        "C": "public GameState(@NotNull GameMap map) { this.originalMap = map; if (map.getUndoLimit().isPresent()) { this.undoQuota = Optional.of(map.getUndoLimit().get()); } else { this.undoQuota = Optional.empty(); } curMap = new HashMap<>(); curMap.putAll(map.getMap()); } public Down(int initiator) { super(initiator); }",
        "label": "P"
    },
    "2501": {
        "dataset": "COMP 3021",
        "project": "nctse",
        "bug_id": "7",
        "T": "void testMoveNonExistingPlayer() { String mapText = \"\"\" 233 ###### #A..@# #a...# ##...# ###### \"\"\"; final var testMap = TestHelper.parseGameMap(mapText); final var gameState = spy(new GameState(testMap)); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Move.Down(23)); }",
        "C": "public GameState(@NotNull GameMap map) { this.originalMap = map; if (map.getUndoLimit().isPresent()) { this.undoQuota = Optional.of(map.getUndoLimit().get()); } else { this.undoQuota = Optional.empty(); } curMap = new HashMap<>(); curMap.putAll(map.getMap()); } public Down(int initiator) { super(initiator); }",
        "label": "P"
    },
    "2502": {
        "dataset": "COMP 3021",
        "project": "nctse",
        "bug_id": "8",
        "T": "void testCheckpointWhenNeed() { final var gameState = spy(new GameState(TestHelper.parseGameMap(\"\"\" 233 ###### #.Aa@# #..a@# ###### \"\"\" ))); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Move.Right(0)); verify(gameState, times(1)).checkpoint(); }",
        "C": "public GameState(@NotNull GameMap map) { this.originalMap = map; if (map.getUndoLimit().isPresent()) { this.undoQuota = Optional.of(map.getUndoLimit().get()); } else { this.undoQuota = Optional.empty(); } curMap = new HashMap<>(); curMap.putAll(map.getMap()); } public Right(int initiator) { super(initiator); }",
        "label": "P"
    },
    "2503": {
        "dataset": "COMP 3021",
        "project": "nctse",
        "bug_id": "9",
        "T": "void testPushBoxAgainstWall() { String mapText = \"\"\" 233 ###### #A..@# #a...# ##...# ###### \"\"\"; final var testMap = TestHelper.parseGameMap(mapText); final var gameState = spy(new GameState(testMap)); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Move.Down(0)); verify(gameState, never()).move(any(), any()); }",
        "C": "public GameState(@NotNull GameMap map) { this.originalMap = map; if (map.getUndoLimit().isPresent()) { this.undoQuota = Optional.of(map.getUndoLimit().get()); } else { this.undoQuota = Optional.empty(); } curMap = new HashMap<>(); curMap.putAll(map.getMap()); } public Down(int initiator) { super(initiator); }",
        "label": "P"
    },
    "2504": {
        "dataset": "COMP 3021",
        "project": "nctse",
        "bug_id": "10",
        "T": "void testCheckpointWhenNotNeed() { final var gameState = spy(new GameState(TestHelper.parseGameMap(\"\"\" 233 ###### #A.a@# #..a@# ###### \"\"\" ))); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Move.Right(0)); verify(gameState, never()).checkpoint(); } private static class SokobanGameForTesting extends AbstractSokobanGame { protected SokobanGameForTesting(GameState gameState) { super(gameState); } @Override public void run() { } public ActionResult feedActionForProcessing(Action action) { return processAction(action); } }",
        "C": "public GameState(@NotNull GameMap map) { this.originalMap = map; if (map.getUndoLimit().isPresent()) { this.undoQuota = Optional.of(map.getUndoLimit().get()); } else { this.undoQuota = Optional.empty(); } curMap = new HashMap<>(); curMap.putAll(map.getMap()); } public Right(int initiator) { super(initiator); } public void run() { renderingEngine.message(StringResources.GAME_READY_MESSAGE); renderingEngine.render(state); while (!shouldStop()) { renderingEngine.message(StringResources.UNDO_QUOTA_TEMPLATE); if (state.getUndoQuota().isPresent()) { renderingEngine.message(state.getUndoQuota().get().toString()); } else { renderingEngine.message(StringResources.UNDO_QUOTA_UNLIMITED); } renderingEngine.message(\">>> \"); Action action = inputEngine.fetchAction(); curAction = action; ActionResult result = processAction(action); if (result instanceof ActionResult.Failed) { renderingEngine.message(((ActionResult.Failed) result).getReason()); } renderingEngine.render(state); } renderingEngine.message(StringResources.GAME_EXIT_MESSAGE); if (state.isWin()) { renderingEngine.message(StringResources.WIN_MESSAGE); } } protected ActionResult processAction(@NotNull Action action) { var result = switch (action) { case InvalidInput input -> new ActionResult.Failed(action, input.getMessage()); case Exit ignore -> new ActionResult.Success(action); case Undo d -> { if (state.getUndoQuota().isEmpty() || (state.getUndoQuota().isPresent() && state.getUndoQuota().get() > 0)) { state.undo(); yield new ActionResult.Success(action); } yield new ActionResult.Failed(d, StringResources.UNDO_QUOTA_RUN_OUT); } case Move m -> { if (state.getPlayerPositionById(m.getInitiator()) == null) { yield new ActionResult.Failed(action, StringResources.PLAYER_NOT_FOUND); } var playerId = m.getInitiator(); var playerPos = state.getPlayerPositionById(playerId); Entity nextPosEntity = state.getEntity(m.nextPosition(state.getPlayerPositionById(playerId))); if (nextPosEntity instanceof Wall || nextPosEntity instanceof Player) { yield new ActionResult.Failed(action, \"You hit a Wall or a Player!\"); } else if (nextPosEntity instanceof Empty) { state.move(playerPos, m.nextPosition(playerPos)); yield new ActionResult.Success(action); } else { Box box = (Box) nextPosEntity; //The box is NOT the player if (box.getPlayerId() != m.getInitiator()) { yield new ActionResult.Failed(action, \"This is NOT your box!\"); } var boxNextPos = m.nextPosition(m.nextPosition(playerPos)); if (!(state.getEntity(boxNextPos) instanceof Empty)) { yield new ActionResult.Failed(action, \"The box hit something else!\"); } state.checkpoint(); state.move(m.nextPosition(playerPos), m.nextPosition(m.nextPosition(playerPos))); state.move(playerPos, m.nextPosition(playerPos)); yield new ActionResult.Success(action); } } }; return result; }",
        "label": "P"
    },
    "2505": {
        "dataset": "COMP 3021",
        "project": "nctse",
        "bug_id": "11",
        "T": "void testHitAnotherPlayer() { String mapText = \"\"\" 233 ###### #A..@# #B...# #ab.@# ###### \"\"\"; final var testMap = TestHelper.parseGameMap(mapText); final var gameState = spy(new GameState(testMap)); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Move.Down(0)); verify(gameState, never()).move(any(), any()); }",
        "C": "public GameState(@NotNull GameMap map) { this.originalMap = map; if (map.getUndoLimit().isPresent()) { this.undoQuota = Optional.of(map.getUndoLimit().get()); } else { this.undoQuota = Optional.empty(); } curMap = new HashMap<>(); curMap.putAll(map.getMap()); } public Down(int initiator) { super(initiator); }",
        "label": "P"
    },
    "2506": {
        "dataset": "COMP 3021",
        "project": "nctse",
        "bug_id": "12",
        "T": "void testUndoWithinQuota() { final var gameState = mock(GameState.class); when(gameState.getPlayerPositionById(anyInt())).thenReturn(Position.of(0, 0)); when(gameState.getUndoQuota()).thenReturn(Optional.of(1)); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Undo(0)); verify(gameState, times(1)).undo(); }",
        "C": "public Undo(int initiator) { super(initiator); }",
        "label": "P"
    },
    "2507": {
        "dataset": "COMP 3021",
        "project": "nctse",
        "bug_id": "13",
        "T": "void testInvalidInput() { final var game = new SokobanGameForTesting(mock(GameState.class)); final var message = String.valueOf(new Random().nextLong()); final var action = new InvalidInput(-1, message); final var result = game.feedActionForProcessing(action); }",
        "C": "public InvalidInput(int initiator, @NotNull String message) { super(initiator); this.message = message; }",
        "label": "P"
    },
    "2508": {
        "dataset": "COMP 3021",
        "project": "nctse",
        "bug_id": "14",
        "T": "void testUndoLimitParsing() { final var gameMap = TestHelper.parseGameMap(rectangularMap); }",
        "C": "",
        "label": "P"
    },
    "2509": {
        "dataset": "COMP 3021",
        "project": "nctse",
        "bug_id": "15",
        "T": "void testWidthForNonRectangularMap() { final var gameMap = TestHelper.parseGameMap(nonRectangularMap); }",
        "C": "",
        "label": "P"
    },
    "2510": {
        "dataset": "COMP 3021",
        "project": "nctse",
        "bug_id": "16",
        "T": "void testTwoPlayersMap() { final var twoPlayersMap = \"\"\" 233 ###### #A..@# #..B@# #....# #.a..# #..b.# ###### \"\"\"; final var gameMap = TestHelper.parseGameMap(twoPlayersMap); final var playerIds = gameMap.getPlayerIds(); final var expectedIds = new HashSet<Integer>(); expectedIds.add(0); expectedIds.add(1); }",
        "C": "public Set<Integer> getPlayerIds() { Set<Integer> result = new HashSet<Integer>(); for (Entity entity : map.values()) { if (entity instanceof Player) { Player player = (Player) entity; result.add(player.getId()); } } return result; }",
        "label": "P"
    },
    "2511": {
        "dataset": "COMP 3021",
        "project": "nctse",
        "bug_id": "17",
        "T": "void testMapWithoutPlayer() { final var invalidMap = \"\"\" 233 ### #.# ### \"\"\"; } // @Tag(TestKind.HIDDEN) // @Test // void testUnmatchedPlayersAndBoxes() { // final var invalidMap = \"\"\" // 233 // ###### // #A..@# // #...@# // #a.b@# // #.a.@# // #..a.# // ###### // \"\"\"; // assertThrowsExactly(IllegalArgumentException.class, () -> TestHelper.parseGameMap(invalidMap)); // }",
        "C": "public TerminalRenderingEngine(PrintStream outputSteam) { this.outputSteam = outputSteam; }",
        "label": "P"
    },
    "2512": {
        "dataset": "COMP 3021",
        "project": "nctse",
        "bug_id": "18",
        "T": "void testManyPlayersMap() { final var manyPlayersMap = \"\"\" 233 ###### #A.P@@# #vCB@@# #.cpD@# #Ga.d@# #g.bV@# ###### \"\"\"; final var gameMap = TestHelper.parseGameMap(manyPlayersMap); final var playerIds = gameMap.getPlayerIds(); final var expectedIds = new HashSet<>(Arrays.asList( 0, 'P' - 'A', 'C' - 'A', 'B' - 'A', 'D' - 'A', 'G' - 'A', 'V' - 'A' )); }",
        "C": "public Set<Integer> getPlayerIds() { Set<Integer> result = new HashSet<Integer>(); for (Entity entity : map.values()) { if (entity instanceof Player) { Player player = (Player) entity; result.add(player.getId()); } } return result; }",
        "label": "P"
    },
    "2513": {
        "dataset": "COMP 3021",
        "project": "nctse",
        "bug_id": "19",
        "T": "void testHeightForNonRectangularMap() { final var gameMap = TestHelper.parseGameMap(nonRectangularMap); }",
        "C": "",
        "label": "P"
    },
    "2514": {
        "dataset": "COMP 3021",
        "project": "nctse",
        "bug_id": "20",
        "T": "void testDuplicatedPlayers() { final var invalidMap = \"\"\" 233 ###### #A..@# #..A@# #....# #.a..# #..b.# ###### \"\"\"; }",
        "C": "",
        "label": "P"
    },
    "2515": {
        "dataset": "COMP 3021",
        "project": "nctse",
        "bug_id": "21",
        "T": "void testParseMapWithoutUndoLimit() { final var invalidMap = String.join(\"\\n\", rectangularMap.lines().skip(1).toList()); }",
        "C": "",
        "label": "P"
    },
    "2516": {
        "dataset": "COMP 3021",
        "project": "nctse",
        "bug_id": "22",
        "T": "void testInsufficientDestinations() { final var invalidMap = \"\"\" 233 ###### #A..@# #...@# #a...# #.a..# #..a.# ###### \"\"\"; }",
        "C": "",
        "label": "P"
    },
    "2517": {
        "dataset": "COMP 3021",
        "project": "nctse",
        "bug_id": "23",
        "T": "void testSuperLargeMap() { try { new GameMap(Integer.MAX_VALUE, Integer.MAX_VALUE, Collections.emptySet(), 0); } catch (OutOfMemoryError e) { throw new RuntimeException(e); } }); }",
        "C": "public GameMap(int maxWidth, int maxHeight, Set<Position> destinations, int undoLimit) { this.destinations = destinations; this.maxWidth = maxWidth; this.maxHeight = maxHeight; this.undoLimit = undoLimit; } /** * Parses the map from a string representation. * The first line is undo limit. * Starting from the second line, the game map is represented as follows, * <li># represents a {@link Wall}</li> * <li>@ represents a box destination.</li> * <li>Any upper-case letter represents a {@link Player}.</li> * <li> * Any lower-case letter represents a {@link Box} that is only movable by the player with the corresponding upper-case letter. * For instance, box \"a\" can only be moved by player \"A\" and not movable by player \"B\". * </li> * <li>. represents an {@link Empty} position in the map, meaning there is no player or box currently at this position.</li> * <p> * Notes: * <li> * There can be at most 26 players. * All implementations of classes in the hk.ust.comp3021.game package should support up to 26 players. * </li> * <li> * For simplicity, we assume the given map is bounded with a closed boundary. * There is no need to check this point. * </li> * <li> * Example maps can be found in \"src/main/resources\". * </li> * * @param mapText The string representation. * @return The parsed GameMap object. * @throws IllegalArgumentException if undo limit is negative but not -1. * @throws IllegalArgumentException if there are multiple same upper-case letters, i.e., one player can only exist at one position. * @throws IllegalArgumentException if there are no players in the map. * @throws IllegalArgumentException if the number of boxes is not equal to the number of box destinations. * @throws IllegalArgumentException if there are boxes whose {@link Box#getPlayerId()} public TerminalRenderingEngine(PrintStream outputSteam) { this.outputSteam = outputSteam; }",
        "label": "P"
    },
    "2518": {
        "dataset": "COMP 3021",
        "project": "nctse",
        "bug_id": "24",
        "T": "void testInvalidUndoLimit() { final var invalidMap = \"\"\" -233 ###### #A..@# #...@# #a.b@# #.a.@# #..a.# ###### \"\"\"; }",
        "C": "",
        "label": "P"
    },
    "2519": {
        "dataset": "COMP 3021",
        "project": "nctse",
        "bug_id": "25",
        "T": "void testEmptyMap() { final var invalidMap = \"\"; }",
        "C": "",
        "label": "P"
    },
    "2520": {
        "dataset": "COMP 3021",
        "project": "nctse",
        "bug_id": "26",
        "T": "void testMove(String input, String name, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); } private InputStream fixValueStream(String content) { final var bytes = content.getBytes(StandardCharsets.UTF_8); return new ByteArrayInputStream(bytes); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine().toLowerCase(); return switch (inputLine) { case \"u\", \"U\" -> new Undo(0); case \"w\", \"W\" -> new Move.Up(0); case \"a\", \"A\" -> new Move.Left(0); case \"s\", \"S\" -> new Move.Down(0); case \"d\", \"D\" -> new Move.Right(0); case \"h\", \"H\" -> new Move.Left(1); case \"j\", \"J\" -> new Move.Down(1); case \"k\", \"K\" -> new Move.Up(1); case \"l\", \"L\" -> new Move.Right(1); case StringResources.EXIT_COMMAND_TEXT -> new Exit(0); default -> new InvalidInput(0, \"Invalid input!\"); }; }",
        "label": "P"
    },
    "2521": {
        "dataset": "COMP 3021",
        "project": "nctse",
        "bug_id": "27",
        "T": "void testMove(String input, String name, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); } private InputStream fixValueStream(String content) { final var bytes = content.getBytes(StandardCharsets.UTF_8); return new ByteArrayInputStream(bytes); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine().toLowerCase(); return switch (inputLine) { case \"u\", \"U\" -> new Undo(0); case \"w\", \"W\" -> new Move.Up(0); case \"a\", \"A\" -> new Move.Left(0); case \"s\", \"S\" -> new Move.Down(0); case \"d\", \"D\" -> new Move.Right(0); case \"h\", \"H\" -> new Move.Left(1); case \"j\", \"J\" -> new Move.Down(1); case \"k\", \"K\" -> new Move.Up(1); case \"l\", \"L\" -> new Move.Right(1); case StringResources.EXIT_COMMAND_TEXT -> new Exit(0); default -> new InvalidInput(0, \"Invalid input!\"); }; }",
        "label": "P"
    },
    "2522": {
        "dataset": "COMP 3021",
        "project": "nctse",
        "bug_id": "28",
        "T": "void testMove(String input, String name, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); } private InputStream fixValueStream(String content) { final var bytes = content.getBytes(StandardCharsets.UTF_8); return new ByteArrayInputStream(bytes); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine().toLowerCase(); return switch (inputLine) { case \"u\", \"U\" -> new Undo(0); case \"w\", \"W\" -> new Move.Up(0); case \"a\", \"A\" -> new Move.Left(0); case \"s\", \"S\" -> new Move.Down(0); case \"d\", \"D\" -> new Move.Right(0); case \"h\", \"H\" -> new Move.Left(1); case \"j\", \"J\" -> new Move.Down(1); case \"k\", \"K\" -> new Move.Up(1); case \"l\", \"L\" -> new Move.Right(1); case StringResources.EXIT_COMMAND_TEXT -> new Exit(0); default -> new InvalidInput(0, \"Invalid input!\"); }; }",
        "label": "P"
    },
    "2523": {
        "dataset": "COMP 3021",
        "project": "nctse",
        "bug_id": "29",
        "T": "void testMove(String input, String name, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); } private InputStream fixValueStream(String content) { final var bytes = content.getBytes(StandardCharsets.UTF_8); return new ByteArrayInputStream(bytes); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine().toLowerCase(); return switch (inputLine) { case \"u\", \"U\" -> new Undo(0); case \"w\", \"W\" -> new Move.Up(0); case \"a\", \"A\" -> new Move.Left(0); case \"s\", \"S\" -> new Move.Down(0); case \"d\", \"D\" -> new Move.Right(0); case \"h\", \"H\" -> new Move.Left(1); case \"j\", \"J\" -> new Move.Down(1); case \"k\", \"K\" -> new Move.Up(1); case \"l\", \"L\" -> new Move.Right(1); case StringResources.EXIT_COMMAND_TEXT -> new Exit(0); default -> new InvalidInput(0, \"Invalid input!\"); }; }",
        "label": "P"
    },
    "2524": {
        "dataset": "COMP 3021",
        "project": "nctse",
        "bug_id": "30",
        "T": "void testMove(String input, String name, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); } private InputStream fixValueStream(String content) { final var bytes = content.getBytes(StandardCharsets.UTF_8); return new ByteArrayInputStream(bytes); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine().toLowerCase(); return switch (inputLine) { case \"u\", \"U\" -> new Undo(0); case \"w\", \"W\" -> new Move.Up(0); case \"a\", \"A\" -> new Move.Left(0); case \"s\", \"S\" -> new Move.Down(0); case \"d\", \"D\" -> new Move.Right(0); case \"h\", \"H\" -> new Move.Left(1); case \"j\", \"J\" -> new Move.Down(1); case \"k\", \"K\" -> new Move.Up(1); case \"l\", \"L\" -> new Move.Right(1); case StringResources.EXIT_COMMAND_TEXT -> new Exit(0); default -> new InvalidInput(0, \"Invalid input!\"); }; }",
        "label": "P"
    },
    "2525": {
        "dataset": "COMP 3021",
        "project": "nctse",
        "bug_id": "31",
        "T": "void testMove(String input, String name, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); } private InputStream fixValueStream(String content) { final var bytes = content.getBytes(StandardCharsets.UTF_8); return new ByteArrayInputStream(bytes); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine().toLowerCase(); return switch (inputLine) { case \"u\", \"U\" -> new Undo(0); case \"w\", \"W\" -> new Move.Up(0); case \"a\", \"A\" -> new Move.Left(0); case \"s\", \"S\" -> new Move.Down(0); case \"d\", \"D\" -> new Move.Right(0); case \"h\", \"H\" -> new Move.Left(1); case \"j\", \"J\" -> new Move.Down(1); case \"k\", \"K\" -> new Move.Up(1); case \"l\", \"L\" -> new Move.Right(1); case StringResources.EXIT_COMMAND_TEXT -> new Exit(0); default -> new InvalidInput(0, \"Invalid input!\"); }; }",
        "label": "P"
    },
    "2526": {
        "dataset": "COMP 3021",
        "project": "nctse",
        "bug_id": "32",
        "T": "void testMove(String input, String name, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); } private InputStream fixValueStream(String content) { final var bytes = content.getBytes(StandardCharsets.UTF_8); return new ByteArrayInputStream(bytes); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine().toLowerCase(); return switch (inputLine) { case \"u\", \"U\" -> new Undo(0); case \"w\", \"W\" -> new Move.Up(0); case \"a\", \"A\" -> new Move.Left(0); case \"s\", \"S\" -> new Move.Down(0); case \"d\", \"D\" -> new Move.Right(0); case \"h\", \"H\" -> new Move.Left(1); case \"j\", \"J\" -> new Move.Down(1); case \"k\", \"K\" -> new Move.Up(1); case \"l\", \"L\" -> new Move.Right(1); case StringResources.EXIT_COMMAND_TEXT -> new Exit(0); default -> new InvalidInput(0, \"Invalid input!\"); }; }",
        "label": "P"
    },
    "2527": {
        "dataset": "COMP 3021",
        "project": "nctse",
        "bug_id": "33",
        "T": "void testMove(String input, String name, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); } private InputStream fixValueStream(String content) { final var bytes = content.getBytes(StandardCharsets.UTF_8); return new ByteArrayInputStream(bytes); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine().toLowerCase(); return switch (inputLine) { case \"u\", \"U\" -> new Undo(0); case \"w\", \"W\" -> new Move.Up(0); case \"a\", \"A\" -> new Move.Left(0); case \"s\", \"S\" -> new Move.Down(0); case \"d\", \"D\" -> new Move.Right(0); case \"h\", \"H\" -> new Move.Left(1); case \"j\", \"J\" -> new Move.Down(1); case \"k\", \"K\" -> new Move.Up(1); case \"l\", \"L\" -> new Move.Right(1); case StringResources.EXIT_COMMAND_TEXT -> new Exit(0); default -> new InvalidInput(0, \"Invalid input!\"); }; }",
        "label": "P"
    },
    "2528": {
        "dataset": "COMP 3021",
        "project": "nctse",
        "bug_id": "34",
        "T": "void testUndo(String input, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine().toLowerCase(); return switch (inputLine) { case \"u\", \"U\" -> new Undo(0); case \"w\", \"W\" -> new Move.Up(0); case \"a\", \"A\" -> new Move.Left(0); case \"s\", \"S\" -> new Move.Down(0); case \"d\", \"D\" -> new Move.Right(0); case \"h\", \"H\" -> new Move.Left(1); case \"j\", \"J\" -> new Move.Down(1); case \"k\", \"K\" -> new Move.Up(1); case \"l\", \"L\" -> new Move.Right(1); case StringResources.EXIT_COMMAND_TEXT -> new Exit(0); default -> new InvalidInput(0, \"Invalid input!\"); }; }",
        "label": "P"
    },
    "2529": {
        "dataset": "COMP 3021",
        "project": "nctse",
        "bug_id": "35",
        "T": "void testInvalidInput() { final var inputStream = fixValueStream(\"blah blah\"); final var inputEngine = new TerminalInputEngine(inputStream); final var action = inputEngine.fetchAction(); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine().toLowerCase(); return switch (inputLine) { case \"u\", \"U\" -> new Undo(0); case \"w\", \"W\" -> new Move.Up(0); case \"a\", \"A\" -> new Move.Left(0); case \"s\", \"S\" -> new Move.Down(0); case \"d\", \"D\" -> new Move.Right(0); case \"h\", \"H\" -> new Move.Left(1); case \"j\", \"J\" -> new Move.Down(1); case \"k\", \"K\" -> new Move.Up(1); case \"l\", \"L\" -> new Move.Right(1); case StringResources.EXIT_COMMAND_TEXT -> new Exit(0); default -> new InvalidInput(0, \"Invalid input!\"); }; }",
        "label": "P"
    },
    "2530": {
        "dataset": "COMP 3021",
        "project": "nctse",
        "bug_id": "36",
        "T": "void testUndoWhenThereIsNoMove() { final var gameState = new GameState(TestHelper.parseGameMap(\"\"\" 233 ###### #A.a@# #..a@# ###### \"\"\" )); gameState.undo(); } private Entity generateEntity(int key) { return switch (key % 4) { case 0 -> new Box(0); case 1 -> new Empty(); case 2 -> new Player(0); case 3 -> new Wall(); default -> throw new ShouldNotReachException(); }; }",
        "C": "public GameState(@NotNull GameMap map) { this.originalMap = map; if (map.getUndoLimit().isPresent()) { this.undoQuota = Optional.of(map.getUndoLimit().get()); } else { this.undoQuota = Optional.empty(); } curMap = new HashMap<>(); curMap.putAll(map.getMap()); } public void undo() { if (prevMaps.empty()) { if (isUndoThisRound && !isFirstTimeHitEmpty) { if (undoQuota.isPresent()) { undoQuota = Optional.of(undoQuota.get()-1); } isFirstTimeHitEmpty = true; } curMap = new HashMap<>(); curMap.putAll(originalMap.getMap()); return; } if (!isUndoThisRound) { prevMaps.pop(); isUndoThisRound = true; } if (undoQuota.isPresent()) { undoQuota = Optional.of(undoQuota.get() - 1); } if (prevMaps.empty()) { curMap = new HashMap<>(); curMap.putAll(originalMap.getMap()); return; } curMap = new HashMap<Position, Entity>(); curMap.putAll(prevMaps.pop()); } /** * Get the maximum width of the game map. * This should be the same as that in {@link GameMap} public TerminalRenderingEngine(PrintStream outputSteam) { this.outputSteam = outputSteam; } public Box(int playerId) { this.playerId = playerId; } public Player(int id) { this.id = id; } public ShouldNotReachException() { super(\"This branch should not be reached.\"); }",
        "label": "P"
    },
    "2531": {
        "dataset": "COMP 3021",
        "project": "nctse",
        "bug_id": "37",
        "T": "void testGetUndoUnlimited() { final var gameState = new GameState(TestHelper.parseGameMap(\"\"\" -1 ###### #.Aa@# #..a@# ###### \"\"\" )); }",
        "C": "public GameState(@NotNull GameMap map) { this.originalMap = map; if (map.getUndoLimit().isPresent()) { this.undoQuota = Optional.of(map.getUndoLimit().get()); } else { this.undoQuota = Optional.empty(); } curMap = new HashMap<>(); curMap.putAll(map.getMap()); }",
        "label": "P"
    },
    "2532": {
        "dataset": "COMP 3021",
        "project": "nctse",
        "bug_id": "38",
        "T": "void testMapCopying() { final var maxWidth = 2333; final var maxHeight = 2333; final var random = new Random(); final var randomEntities = Stream.generate(() -> Position.of(random.nextInt(maxWidth), random.nextInt(maxHeight))) .distinct() .limit(100) .collect(Collectors.toMap(Function.identity(), it -> generateEntity(it.x()))); final var firstPos = randomEntities.keySet().stream().findFirst(); final var gameMap = new GameMap(maxWidth, maxHeight, Collections.singleton(firstPos.get()), 233); randomEntities.forEach(gameMap::putEntity); final var gameState = new GameState(gameMap); final var randomPosition = randomEntities.keySet().stream().findAny(); gameMap.putEntity(randomPosition.get(), new Empty()); randomEntities.forEach((p, e) -> assertEquals(e, gameState.getEntity(p))); }",
        "C": "public static @NotNull Position of(int x, int y) { return new Position(x, y); } public GameMap(int maxWidth, int maxHeight, Set<Position> destinations, int undoLimit) { this.destinations = destinations; this.maxWidth = maxWidth; this.maxHeight = maxHeight; this.undoLimit = undoLimit; } /** * Parses the map from a string representation. * The first line is undo limit. * Starting from the second line, the game map is represented as follows, * <li># represents a {@link Wall}</li> * <li>@ represents a box destination.</li> * <li>Any upper-case letter represents a {@link Player}.</li> * <li> * Any lower-case letter represents a {@link Box} that is only movable by the player with the corresponding upper-case letter. * For instance, box \"a\" can only be moved by player \"A\" and not movable by player \"B\". * </li> * <li>. represents an {@link Empty} position in the map, meaning there is no player or box currently at this position.</li> * <p> * Notes: * <li> * There can be at most 26 players. * All implementations of classes in the hk.ust.comp3021.game package should support up to 26 players. * </li> * <li> * For simplicity, we assume the given map is bounded with a closed boundary. * There is no need to check this point. * </li> * <li> * Example maps can be found in \"src/main/resources\". * </li> * * @param mapText The string representation. * @return The parsed GameMap object. * @throws IllegalArgumentException if undo limit is negative but not -1. * @throws IllegalArgumentException if there are multiple same upper-case letters, i.e., one player can only exist at one position. * @throws IllegalArgumentException if there are no players in the map. * @throws IllegalArgumentException if the number of boxes is not equal to the number of box destinations. * @throws IllegalArgumentException if there are boxes whose {@link Box#getPlayerId()} public GameState(@NotNull GameMap map) { this.originalMap = map; if (map.getUndoLimit().isPresent()) { this.undoQuota = Optional.of(map.getUndoLimit().get()); } else { this.undoQuota = Optional.empty(); } curMap = new HashMap<>(); curMap.putAll(map.getMap()); } public void putEntity(Position position, Entity entity) { map.put(position, entity); } public @Nullable Entity getEntity(@NotNull Position position) { return curMap.get(position); } /** * Get all box destination positions as a set in the game map. * This should be the same as that in {@link GameMap}",
        "label": "P"
    },
    "2533": {
        "dataset": "COMP 3021",
        "project": "nctse",
        "bug_id": "39",
        "T": "void testUndoWhenThereIsMoveButNoCheckpoint() { final var gameState = new GameState(TestHelper.parseGameMap(\"\"\" 233 ###### #A.a@# #..a@# ###### \"\"\" )); gameState.move(Position.of(1, 1), Position.of(2, 1)); gameState.undo(); }",
        "C": "public GameState(@NotNull GameMap map) { this.originalMap = map; if (map.getUndoLimit().isPresent()) { this.undoQuota = Optional.of(map.getUndoLimit().get()); } else { this.undoQuota = Optional.empty(); } curMap = new HashMap<>(); curMap.putAll(map.getMap()); } public void move(Position from, Position to) { isUndoThisRound = false; isFirstTimeHitEmpty = false; prevMapBeforeOneMove = new HashMap<>(); prevMapBeforeOneMove.putAll(curMap); var temp = curMap.get(to); curMap.put(to, curMap.get(from)); curMap.put(from, temp); } /** * Record a checkpoint of the game state, including: * <li>All current positions of entities in the game map.</li> * <li>Current undo quota</li> * <p> * Checkpoint is used in {@link GameState#undo()} public static @NotNull Position of(int x, int y) { return new Position(x, y); } public void undo() { if (prevMaps.empty()) { if (isUndoThisRound && !isFirstTimeHitEmpty) { if (undoQuota.isPresent()) { undoQuota = Optional.of(undoQuota.get()-1); } isFirstTimeHitEmpty = true; } curMap = new HashMap<>(); curMap.putAll(originalMap.getMap()); return; } if (!isUndoThisRound) { prevMaps.pop(); isUndoThisRound = true; } if (undoQuota.isPresent()) { undoQuota = Optional.of(undoQuota.get() - 1); } if (prevMaps.empty()) { curMap = new HashMap<>(); curMap.putAll(originalMap.getMap()); return; } curMap = new HashMap<Position, Entity>(); curMap.putAll(prevMaps.pop()); } /** * Get the maximum width of the game map. * This should be the same as that in {@link GameMap}",
        "label": "P"
    },
    "2534": {
        "dataset": "COMP 3021",
        "project": "nctse",
        "bug_id": "40",
        "T": "void testGameExit() { final var gameState = mock(GameState.class); final var inputEngine = mock(TerminalInputEngine.class); final var renderingEngine = mock(TerminalRenderingEngine.class); when(gameState.isWin()).thenReturn(false, false, false); when(inputEngine.fetchAction()) .thenReturn(new InvalidInput(0, \"\"), new InvalidInput(0, \"\"), new Exit(0)); final var game = new TerminalSokobanGame(gameState, inputEngine, renderingEngine); game.run(); verify(renderingEngine, atLeastOnce()).message(any()); }",
        "C": "public InvalidInput(int initiator, @NotNull String message) { super(initiator); this.message = message; } public Exit(int initiator) { super(initiator); } public TerminalSokobanGame(GameState gameState, TerminalInputEngine inputEngine, TerminalRenderingEngine renderingEngine) { super(gameState); this.inputEngine = inputEngine; this.renderingEngine = renderingEngine; if (gameState.getAllPlayerPositions().size() > 2) { throw new IllegalArgumentException(\"There are more than two players in the map!\"); } } public void run() { renderingEngine.message(StringResources.GAME_READY_MESSAGE); renderingEngine.render(state); while (!shouldStop()) { renderingEngine.message(StringResources.UNDO_QUOTA_TEMPLATE); if (state.getUndoQuota().isPresent()) { renderingEngine.message(state.getUndoQuota().get().toString()); } else { renderingEngine.message(StringResources.UNDO_QUOTA_UNLIMITED); } renderingEngine.message(\">>> \"); Action action = inputEngine.fetchAction(); curAction = action; ActionResult result = processAction(action); if (result instanceof ActionResult.Failed) { renderingEngine.message(((ActionResult.Failed) result).getReason()); } renderingEngine.render(state); } renderingEngine.message(StringResources.GAME_EXIT_MESSAGE); if (state.isWin()) { renderingEngine.message(StringResources.WIN_MESSAGE); } }",
        "label": "P"
    },
    "2535": {
        "dataset": "COMP 3021",
        "project": "nctse",
        "bug_id": "41",
        "T": "void testGameWin() { final var gameState = mock(GameState.class); final var inputEngine = mock(TerminalInputEngine.class); final var renderingEngine = mock(TerminalRenderingEngine.class); when(gameState.isWin()).thenReturn(false, false, false, true); when(inputEngine.fetchAction()) .thenReturn(new InvalidInput(0, \"\")); final var game = new TerminalSokobanGame(gameState, inputEngine, renderingEngine); game.run(); verify(gameState, atLeastOnce()).isWin(); verify(renderingEngine, atLeastOnce()).message(any()); }",
        "C": "public InvalidInput(int initiator, @NotNull String message) { super(initiator); this.message = message; } public TerminalSokobanGame(GameState gameState, TerminalInputEngine inputEngine, TerminalRenderingEngine renderingEngine) { super(gameState); this.inputEngine = inputEngine; this.renderingEngine = renderingEngine; if (gameState.getAllPlayerPositions().size() > 2) { throw new IllegalArgumentException(\"There are more than two players in the map!\"); } } public void run() { renderingEngine.message(StringResources.GAME_READY_MESSAGE); renderingEngine.render(state); while (!shouldStop()) { renderingEngine.message(StringResources.UNDO_QUOTA_TEMPLATE); if (state.getUndoQuota().isPresent()) { renderingEngine.message(state.getUndoQuota().get().toString()); } else { renderingEngine.message(StringResources.UNDO_QUOTA_UNLIMITED); } renderingEngine.message(\">>> \"); Action action = inputEngine.fetchAction(); curAction = action; ActionResult result = processAction(action); if (result instanceof ActionResult.Failed) { renderingEngine.message(((ActionResult.Failed) result).getReason()); } renderingEngine.render(state); } renderingEngine.message(StringResources.GAME_EXIT_MESSAGE); if (state.isWin()) { renderingEngine.message(StringResources.WIN_MESSAGE); } }",
        "label": "P"
    },
    "2536": {
        "dataset": "COMP 3021",
        "project": "nctse",
        "bug_id": "42",
        "T": "void testMoreThanTwoPlayers() { final var gameState = mock(GameState.class); final var inputEngine = mock(TerminalInputEngine.class); final var renderingEngine = mock(TerminalRenderingEngine.class); when(gameState.getAllPlayerPositions()).thenReturn(new HashSet<>(Arrays.asList(Position.of(1, 1), Position.of(1, 2), Position.of(1, 3)))); }",
        "C": "public static @NotNull Position of(int x, int y) { return new Position(x, y); }",
        "label": "P"
    },
    "2537": {
        "dataset": "COMP 3021",
        "project": "olchui",
        "bug_id": "0",
        "T": "void moveUp() { Position.of(233, 232), new Move.Up(-1).nextPosition(pos) ); }",
        "C": "public static @NotNull Position of(int x, int y) { return new Position(x, y); } public Up(int initiator) { super(initiator); }",
        "label": "P"
    },
    "2538": {
        "dataset": "COMP 3021",
        "project": "olchui",
        "bug_id": "1",
        "T": "void moveDown() { Position.of(233, 234), new Move.Down(-1).nextPosition(pos) ); }",
        "C": "public static @NotNull Position of(int x, int y) { return new Position(x, y); } public Down(int initiator) { super(initiator); }",
        "label": "P"
    },
    "2539": {
        "dataset": "COMP 3021",
        "project": "olchui",
        "bug_id": "2",
        "T": "void moveRight() { Position.of(234, 233), new Move.Right(-1).nextPosition(pos) ); }",
        "C": "public static @NotNull Position of(int x, int y) { return new Position(x, y); } public Right(int initiator) { super(initiator); }",
        "label": "P"
    },
    "2540": {
        "dataset": "COMP 3021",
        "project": "olchui",
        "bug_id": "3",
        "T": "void testExceedingUndoQuota() { final var gameState = mock(GameState.class); when(gameState.getPlayerPositionById(anyInt())).thenReturn(Position.of(0, 0)); when(gameState.getUndoQuota()).thenReturn(Optional.of(0)); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Undo(0)); }",
        "C": "public Undo(int initiator) { super(initiator); }",
        "label": "P"
    },
    "2541": {
        "dataset": "COMP 3021",
        "project": "olchui",
        "bug_id": "4",
        "T": "void testExit() { final var gameState = mock(GameState.class); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Exit(0)); }",
        "C": "public Exit(int initiator) { super(initiator); }",
        "label": "P"
    },
    "2542": {
        "dataset": "COMP 3021",
        "project": "olchui",
        "bug_id": "5",
        "T": "void testUndoUnlimited() { final var gameState = mock(GameState.class); when(gameState.getPlayerPositionById(anyInt())).thenReturn(Position.of(0, 0)); when(gameState.getUndoQuota()).thenReturn(Optional.empty()); final var game = new SokobanGameForTesting(gameState); for (int i = 0; i < 10000; i++) { final var result = game.feedActionForProcessing(new Undo(0)); } verify(gameState, times(10000)).undo(); }",
        "C": "public TerminalRenderingEngine(PrintStream outputSteam) { this.outputSteam = outputSteam; } public Undo(int initiator) { super(initiator); }",
        "label": "P"
    },
    "2543": {
        "dataset": "COMP 3021",
        "project": "olchui",
        "bug_id": "6",
        "T": "void testPushOtherPlayerBox() { String mapText = \"\"\" 233 ###### #AB.@# #b.a.# #@...# ###### \"\"\"; final var testMap = TestHelper.parseGameMap(mapText); final var gameState = spy(new GameState(testMap)); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Move.Down(0)); verify(gameState, never()).move(any(), any()); }",
        "C": "public GameState(@NotNull GameMap map) { // TODO undoQuotaLeft = map.getUndoLimit(); gameMap = map; int width = map.getMaxWidth(); int height = map.getMaxHeight(); playersPositions = new HashMap<>(); boxesPositions = new HashSet<>(); checkPoints = new Stack<>(); for (int y = 0; y < height; y++) { for (int x = 0; x < width; x++) { Position position = new Position(x, y); Entity entity = map.getEntity(position); if (entity instanceof Player) { // is Player int playerId = ((Player) entity).getId(); playersPositions.put(playerId, position); } else if (entity instanceof Box) { // is Box boxesPositions.add(position); } } } checkpoint(); } public Down(int initiator) { super(initiator); }",
        "label": "P"
    },
    "2544": {
        "dataset": "COMP 3021",
        "project": "olchui",
        "bug_id": "7",
        "T": "void testMoveNonExistingPlayer() { String mapText = \"\"\" 233 ###### #A..@# #a...# ##...# ###### \"\"\"; final var testMap = TestHelper.parseGameMap(mapText); final var gameState = spy(new GameState(testMap)); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Move.Down(23)); }",
        "C": "public GameState(@NotNull GameMap map) { // TODO undoQuotaLeft = map.getUndoLimit(); gameMap = map; int width = map.getMaxWidth(); int height = map.getMaxHeight(); playersPositions = new HashMap<>(); boxesPositions = new HashSet<>(); checkPoints = new Stack<>(); for (int y = 0; y < height; y++) { for (int x = 0; x < width; x++) { Position position = new Position(x, y); Entity entity = map.getEntity(position); if (entity instanceof Player) { // is Player int playerId = ((Player) entity).getId(); playersPositions.put(playerId, position); } else if (entity instanceof Box) { // is Box boxesPositions.add(position); } } } checkpoint(); } public Down(int initiator) { super(initiator); }",
        "label": "P"
    },
    "2545": {
        "dataset": "COMP 3021",
        "project": "olchui",
        "bug_id": "8",
        "T": "void testCheckpointWhenNeed() { final var gameState = spy(new GameState(TestHelper.parseGameMap(\"\"\" 233 ###### #.Aa@# #..a@# ###### \"\"\" ))); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Move.Right(0)); verify(gameState, times(1)).checkpoint(); }",
        "C": "public GameState(@NotNull GameMap map) { // TODO undoQuotaLeft = map.getUndoLimit(); gameMap = map; int width = map.getMaxWidth(); int height = map.getMaxHeight(); playersPositions = new HashMap<>(); boxesPositions = new HashSet<>(); checkPoints = new Stack<>(); for (int y = 0; y < height; y++) { for (int x = 0; x < width; x++) { Position position = new Position(x, y); Entity entity = map.getEntity(position); if (entity instanceof Player) { // is Player int playerId = ((Player) entity).getId(); playersPositions.put(playerId, position); } else if (entity instanceof Box) { // is Box boxesPositions.add(position); } } } checkpoint(); } public Right(int initiator) { super(initiator); }",
        "label": "P"
    },
    "2546": {
        "dataset": "COMP 3021",
        "project": "olchui",
        "bug_id": "9",
        "T": "void testPushBoxAgainstWall() { String mapText = \"\"\" 233 ###### #A..@# #a...# ##...# ###### \"\"\"; final var testMap = TestHelper.parseGameMap(mapText); final var gameState = spy(new GameState(testMap)); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Move.Down(0)); verify(gameState, never()).move(any(), any()); }",
        "C": "public GameState(@NotNull GameMap map) { // TODO undoQuotaLeft = map.getUndoLimit(); gameMap = map; int width = map.getMaxWidth(); int height = map.getMaxHeight(); playersPositions = new HashMap<>(); boxesPositions = new HashSet<>(); checkPoints = new Stack<>(); for (int y = 0; y < height; y++) { for (int x = 0; x < width; x++) { Position position = new Position(x, y); Entity entity = map.getEntity(position); if (entity instanceof Player) { // is Player int playerId = ((Player) entity).getId(); playersPositions.put(playerId, position); } else if (entity instanceof Box) { // is Box boxesPositions.add(position); } } } checkpoint(); } public Down(int initiator) { super(initiator); }",
        "label": "P"
    },
    "2547": {
        "dataset": "COMP 3021",
        "project": "olchui",
        "bug_id": "10",
        "T": "void testCheckpointWhenNotNeed() { final var gameState = spy(new GameState(TestHelper.parseGameMap(\"\"\" 233 ###### #A.a@# #..a@# ###### \"\"\" ))); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Move.Right(0)); verify(gameState, never()).checkpoint(); } private static class SokobanGameForTesting extends AbstractSokobanGame { protected SokobanGameForTesting(GameState gameState) { super(gameState); } @Override public void run() { } public ActionResult feedActionForProcessing(Action action) { return processAction(action); } }",
        "C": "public GameState(@NotNull GameMap map) { // TODO undoQuotaLeft = map.getUndoLimit(); gameMap = map; int width = map.getMaxWidth(); int height = map.getMaxHeight(); playersPositions = new HashMap<>(); boxesPositions = new HashSet<>(); checkPoints = new Stack<>(); for (int y = 0; y < height; y++) { for (int x = 0; x < width; x++) { Position position = new Position(x, y); Entity entity = map.getEntity(position); if (entity instanceof Player) { // is Player int playerId = ((Player) entity).getId(); playersPositions.put(playerId, position); } else if (entity instanceof Box) { // is Box boxesPositions.add(position); } } } checkpoint(); } public Right(int initiator) { super(initiator); } public void run() { // TODO renderingEngine.message(StringResources.GAME_READY_MESSAGE); renderingEngine.render(state); String displayUndoQuota; if (state.getUndoQuota().isEmpty()) { // Unlimited displayUndoQuota = StringResources.UNDO_QUOTA_UNLIMITED; } else { // Limited String undoQuotaLeft = Integer.toString(state.getUndoQuota().get()); displayUndoQuota = String.format(StringResources.UNDO_QUOTA_TEMPLATE, undoQuotaLeft); } renderingEngine.message(displayUndoQuota); String displayUndoQuota2 = \"\"; while (!shouldStop()) { Action action = inputEngine.fetchAction(); ActionResult result = processAction(action); if (action instanceof Exit) { renderingEngine.render(state); break; } renderingEngine.render(state); if (state.getUndoQuota().isEmpty()) { // Unlimited displayUndoQuota2 = StringResources.UNDO_QUOTA_UNLIMITED; } else { // Limited String undoQuotaLeft2 = Integer.toString(state.getUndoQuota().get()); displayUndoQuota2 = String.format(StringResources.UNDO_QUOTA_TEMPLATE, undoQuotaLeft2); } renderingEngine.message(displayUndoQuota2); } renderingEngine.message(StringResources.GAME_EXIT_MESSAGE); if (state.isWin()) { renderingEngine.message(StringResources.WIN_MESSAGE); } } protected ActionResult processAction(@NotNull Action action) { // TODO int playerId = action.getInitiator(); Position playerCurPosition = state.getPlayerPositionById(playerId); // Invalid input: Invalid Input. if (action instanceof InvalidInput) { String message = ((InvalidInput) action).getMessage(); return new ActionResult.Failed(action, message); } else if (action instanceof Undo) { if (!state.getUndoQuota().isEmpty() && state.getUndoQuota().get() == 0) { // Undolimit = 0: You have run out of your undo quota. return new ActionResult.Failed(action, StringResources.UNDO_QUOTA_RUN_OUT); } else { state.undo(); } } else if (action instanceof Move) { Move move = (Move) action; // No corresponding player who's moving: Player not found if (state.getPlayerPositionById(playerId).equals(new Position(-1, -1))) { return new ActionResult.Failed(action, StringResources.PLAYER_NOT_FOUND); } Position nextPosition = move.nextPosition(playerCurPosition); Entity nextPositionEntity = state.getEntity(nextPosition); // Hit walls: You hit a wall. if (nextPositionEntity instanceof Wall) { return new ActionResult.Failed(action, StringResources.HIT_WALL); } // Pushing box if (nextPositionEntity instanceof Box) { Box box = (Box) nextPositionEntity; // Player move wrong box: You cannot move other players' boxes. if (playerId != box.getPlayerId()) { return new ActionResult.Failed(action, StringResources.MOVE_WRONG_BOX); } // Player pushing more than 1 boxes: Failed to push the box. Position targetBoxPos; if (move instanceof Move.Left) { targetBoxPos = new Position(nextPosition.x() - 1, nextPosition.y()); } else if (move instanceof Move.Down) { targetBoxPos = new Position(nextPosition.x(), nextPosition.y() + 1); } else if (move instanceof Move.Up) { targetBoxPos = new Position(nextPosition.x(), nextPosition.y() - 1); } else if (move instanceof Move.Right) { targetBoxPos = new Position(nextPosition.x() + 1, nextPosition.y()); } else { targetBoxPos = new Position(99, 99); } if (state.getEntity(targetBoxPos) instanceof Empty == false) { return new ActionResult.Failed(action, StringResources.MOVE_BOX_FAIL); } // OK! // Move Box state.move(nextPosition, targetBoxPos); // Move Player state.move(playerCurPosition, nextPosition); // Checkpoint state.checkpoint(); } // Player move to other Player: You hit another player. if (nextPositionEntity instanceof Player) { return new ActionResult.Failed(action, StringResources.HIT_PLAYER); } // OK! Player move to Empty if (nextPositionEntity instanceof Empty) { state.move(playerCurPosition, nextPosition); } } // Exit game: Game exits. // TODO: is exit failed? else if (action instanceof Exit) { exit = true; return new ActionResult.Success(action); } return new ActionResult.Success(action); }",
        "label": "P"
    },
    "2548": {
        "dataset": "COMP 3021",
        "project": "olchui",
        "bug_id": "11",
        "T": "void testHitAnotherPlayer() { String mapText = \"\"\" 233 ###### #A..@# #B...# #ab.@# ###### \"\"\"; final var testMap = TestHelper.parseGameMap(mapText); final var gameState = spy(new GameState(testMap)); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Move.Down(0)); verify(gameState, never()).move(any(), any()); }",
        "C": "public GameState(@NotNull GameMap map) { // TODO undoQuotaLeft = map.getUndoLimit(); gameMap = map; int width = map.getMaxWidth(); int height = map.getMaxHeight(); playersPositions = new HashMap<>(); boxesPositions = new HashSet<>(); checkPoints = new Stack<>(); for (int y = 0; y < height; y++) { for (int x = 0; x < width; x++) { Position position = new Position(x, y); Entity entity = map.getEntity(position); if (entity instanceof Player) { // is Player int playerId = ((Player) entity).getId(); playersPositions.put(playerId, position); } else if (entity instanceof Box) { // is Box boxesPositions.add(position); } } } checkpoint(); } public Down(int initiator) { super(initiator); }",
        "label": "P"
    },
    "2549": {
        "dataset": "COMP 3021",
        "project": "olchui",
        "bug_id": "12",
        "T": "void testUndoWithinQuota() { final var gameState = mock(GameState.class); when(gameState.getPlayerPositionById(anyInt())).thenReturn(Position.of(0, 0)); when(gameState.getUndoQuota()).thenReturn(Optional.of(1)); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Undo(0)); verify(gameState, times(1)).undo(); }",
        "C": "public Undo(int initiator) { super(initiator); }",
        "label": "P"
    },
    "2550": {
        "dataset": "COMP 3021",
        "project": "olchui",
        "bug_id": "13",
        "T": "void testInvalidInput() { final var game = new SokobanGameForTesting(mock(GameState.class)); final var message = String.valueOf(new Random().nextLong()); final var action = new InvalidInput(-1, message); final var result = game.feedActionForProcessing(action); }",
        "C": "public InvalidInput(int initiator, @NotNull String message) { super(initiator); this.message = message; }",
        "label": "P"
    },
    "2551": {
        "dataset": "COMP 3021",
        "project": "olchui",
        "bug_id": "14",
        "T": "void testUndoLimitParsing() { final var gameMap = TestHelper.parseGameMap(rectangularMap); }",
        "C": "",
        "label": "P"
    },
    "2552": {
        "dataset": "COMP 3021",
        "project": "olchui",
        "bug_id": "15",
        "T": "void testWidthForNonRectangularMap() { final var gameMap = TestHelper.parseGameMap(nonRectangularMap); }",
        "C": "",
        "label": "P"
    },
    "2553": {
        "dataset": "COMP 3021",
        "project": "olchui",
        "bug_id": "16",
        "T": "void testTwoPlayersMap() { final var twoPlayersMap = \"\"\" 233 ###### #A..@# #..B@# #....# #.a..# #..b.# ###### \"\"\"; final var gameMap = TestHelper.parseGameMap(twoPlayersMap); final var playerIds = gameMap.getPlayerIds(); final var expectedIds = new HashSet<Integer>(); expectedIds.add(0); expectedIds.add(1); }",
        "C": "public Set<Integer> getPlayerIds() { // TODO return playerIds; }",
        "label": "P"
    },
    "2554": {
        "dataset": "COMP 3021",
        "project": "olchui",
        "bug_id": "17",
        "T": "void testMapWithoutPlayer() { final var invalidMap = \"\"\" 233 ### #.# ### \"\"\"; } // @Tag(TestKind.HIDDEN) // @Test // void testUnmatchedPlayersAndBoxes() { // final var invalidMap = \"\"\" // 233 // ###### // #A..@# // #...@# // #a.b@# // #.a.@# // #..a.# // ###### // \"\"\"; // assertThrowsExactly(IllegalArgumentException.class, () -> TestHelper.parseGameMap(invalidMap)); // }",
        "C": "public TerminalRenderingEngine(PrintStream outputSteam) { this.outputSteam = outputSteam; }",
        "label": "P"
    },
    "2555": {
        "dataset": "COMP 3021",
        "project": "olchui",
        "bug_id": "18",
        "T": "void testManyPlayersMap() { final var manyPlayersMap = \"\"\" 233 ###### #A.P@@# #vCB@@# #.cpD@# #Ga.d@# #g.bV@# ###### \"\"\"; final var gameMap = TestHelper.parseGameMap(manyPlayersMap); final var playerIds = gameMap.getPlayerIds(); final var expectedIds = new HashSet<>(Arrays.asList( 0, 'P' - 'A', 'C' - 'A', 'B' - 'A', 'D' - 'A', 'G' - 'A', 'V' - 'A' )); }",
        "C": "public Set<Integer> getPlayerIds() { // TODO return playerIds; }",
        "label": "P"
    },
    "2556": {
        "dataset": "COMP 3021",
        "project": "olchui",
        "bug_id": "19",
        "T": "void testHeightForNonRectangularMap() { final var gameMap = TestHelper.parseGameMap(nonRectangularMap); }",
        "C": "",
        "label": "P"
    },
    "2557": {
        "dataset": "COMP 3021",
        "project": "olchui",
        "bug_id": "20",
        "T": "void testDuplicatedPlayers() { final var invalidMap = \"\"\" 233 ###### #A..@# #..A@# #....# #.a..# #..b.# ###### \"\"\"; }",
        "C": "",
        "label": "P"
    },
    "2558": {
        "dataset": "COMP 3021",
        "project": "olchui",
        "bug_id": "21",
        "T": "void testParseMapWithoutUndoLimit() { final var invalidMap = String.join(\"\\n\", rectangularMap.lines().skip(1).toList()); }",
        "C": "",
        "label": "P"
    },
    "2559": {
        "dataset": "COMP 3021",
        "project": "olchui",
        "bug_id": "22",
        "T": "void testInsufficientDestinations() { final var invalidMap = \"\"\" 233 ###### #A..@# #...@# #a...# #.a..# #..a.# ###### \"\"\"; }",
        "C": "",
        "label": "P"
    },
    "2560": {
        "dataset": "COMP 3021",
        "project": "olchui",
        "bug_id": "23",
        "T": "void testSuperLargeMap() { try { new GameMap(Integer.MAX_VALUE, Integer.MAX_VALUE, Collections.emptySet(), 0); } catch (OutOfMemoryError e) { throw new RuntimeException(e); } }); }",
        "C": "public GameMap(int maxWidth, int maxHeight, Set<Position> destinations, int undoLimit) { // TODO this.destinations = destinations; this.undoLimit = undoLimit == -1 ? Optional.empty() : Optional.of(undoLimit); } /** * Parses the map from a string representation. * The first line is undo limit. * Starting from the second line, the game map is represented as follows, * <li># represents a {@link Wall}</li> * <li>@ represents a box destination.</li> * <li>Any upper-case letter represents a {@link Player}.</li> * <li> * Any lower-case letter represents a {@link Box} that is only movable by the player with the corresponding upper-case letter. * For instance, box \"a\" can only be moved by player \"A\" and not movable by player \"B\". * </li> * <li>. represents an {@link Empty} position in the map, meaning there is no player or box currently at this position.</li> * <p> * Notes: * <li> * There can be at most 26 players. * All implementations of classes in the hk.ust.comp3021.game package should support up to 26 players. * </li> * <li> * For simplicity, we assume the given map is bounded with a closed boundary. * There is no need to check this point. * </li> * <li> * Example maps can be found in \"src/main/resources\". * </li> * * @param mapText The string representation. * @return The parsed GameMap object. * @throws IllegalArgumentException if undo limit is negative but not -1. * @throws IllegalArgumentException if there are multiple same upper-case letters, i.e., one player can only exist at one position. * @throws IllegalArgumentException if there are no players in the map. * @throws IllegalArgumentException if the number of boxes is not equal to the number of box destinations. * @throws IllegalArgumentException if there are boxes whose {@link Box#getPlayerId()} public TerminalRenderingEngine(PrintStream outputSteam) { this.outputSteam = outputSteam; }",
        "label": "P"
    },
    "2561": {
        "dataset": "COMP 3021",
        "project": "olchui",
        "bug_id": "24",
        "T": "void testInvalidUndoLimit() { final var invalidMap = \"\"\" -233 ###### #A..@# #...@# #a.b@# #.a.@# #..a.# ###### \"\"\"; }",
        "C": "",
        "label": "P"
    },
    "2562": {
        "dataset": "COMP 3021",
        "project": "olchui",
        "bug_id": "25",
        "T": "void testEmptyMap() { final var invalidMap = \"\"; }",
        "C": "",
        "label": "P"
    },
    "2563": {
        "dataset": "COMP 3021",
        "project": "olchui",
        "bug_id": "26",
        "T": "void testMove(String input, String name, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); } private InputStream fixValueStream(String content) { final var bytes = content.getBytes(StandardCharsets.UTF_8); return new ByteArrayInputStream(bytes); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine().toLowerCase(); // TODO switch (inputLine) { case \"exit\": return new Exit(-1); case \"u\": return new Undo(-1); case \"a\": return new Move.Left(0); case \"w\": return new Move.Up(0); case \"s\": return new Move.Down(0); case \"d\": return new Move.Right(0); case \"h\": return new Move.Left(1); case \"j\": return new Move.Down(1); case \"k\": return new Move.Up(1); case \"l\": return new Move.Right(1); default: return new InvalidInput(-1, INVALID_INPUT_MESSAGE); } }",
        "label": "P"
    },
    "2564": {
        "dataset": "COMP 3021",
        "project": "olchui",
        "bug_id": "27",
        "T": "void testMove(String input, String name, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); } private InputStream fixValueStream(String content) { final var bytes = content.getBytes(StandardCharsets.UTF_8); return new ByteArrayInputStream(bytes); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine().toLowerCase(); // TODO switch (inputLine) { case \"exit\": return new Exit(-1); case \"u\": return new Undo(-1); case \"a\": return new Move.Left(0); case \"w\": return new Move.Up(0); case \"s\": return new Move.Down(0); case \"d\": return new Move.Right(0); case \"h\": return new Move.Left(1); case \"j\": return new Move.Down(1); case \"k\": return new Move.Up(1); case \"l\": return new Move.Right(1); default: return new InvalidInput(-1, INVALID_INPUT_MESSAGE); } }",
        "label": "P"
    },
    "2565": {
        "dataset": "COMP 3021",
        "project": "olchui",
        "bug_id": "28",
        "T": "void testMove(String input, String name, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); } private InputStream fixValueStream(String content) { final var bytes = content.getBytes(StandardCharsets.UTF_8); return new ByteArrayInputStream(bytes); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine().toLowerCase(); // TODO switch (inputLine) { case \"exit\": return new Exit(-1); case \"u\": return new Undo(-1); case \"a\": return new Move.Left(0); case \"w\": return new Move.Up(0); case \"s\": return new Move.Down(0); case \"d\": return new Move.Right(0); case \"h\": return new Move.Left(1); case \"j\": return new Move.Down(1); case \"k\": return new Move.Up(1); case \"l\": return new Move.Right(1); default: return new InvalidInput(-1, INVALID_INPUT_MESSAGE); } }",
        "label": "P"
    },
    "2566": {
        "dataset": "COMP 3021",
        "project": "olchui",
        "bug_id": "29",
        "T": "void testMove(String input, String name, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); } private InputStream fixValueStream(String content) { final var bytes = content.getBytes(StandardCharsets.UTF_8); return new ByteArrayInputStream(bytes); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine().toLowerCase(); // TODO switch (inputLine) { case \"exit\": return new Exit(-1); case \"u\": return new Undo(-1); case \"a\": return new Move.Left(0); case \"w\": return new Move.Up(0); case \"s\": return new Move.Down(0); case \"d\": return new Move.Right(0); case \"h\": return new Move.Left(1); case \"j\": return new Move.Down(1); case \"k\": return new Move.Up(1); case \"l\": return new Move.Right(1); default: return new InvalidInput(-1, INVALID_INPUT_MESSAGE); } }",
        "label": "P"
    },
    "2567": {
        "dataset": "COMP 3021",
        "project": "olchui",
        "bug_id": "30",
        "T": "void testMove(String input, String name, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); } private InputStream fixValueStream(String content) { final var bytes = content.getBytes(StandardCharsets.UTF_8); return new ByteArrayInputStream(bytes); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine().toLowerCase(); // TODO switch (inputLine) { case \"exit\": return new Exit(-1); case \"u\": return new Undo(-1); case \"a\": return new Move.Left(0); case \"w\": return new Move.Up(0); case \"s\": return new Move.Down(0); case \"d\": return new Move.Right(0); case \"h\": return new Move.Left(1); case \"j\": return new Move.Down(1); case \"k\": return new Move.Up(1); case \"l\": return new Move.Right(1); default: return new InvalidInput(-1, INVALID_INPUT_MESSAGE); } }",
        "label": "P"
    },
    "2568": {
        "dataset": "COMP 3021",
        "project": "olchui",
        "bug_id": "31",
        "T": "void testMove(String input, String name, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); } private InputStream fixValueStream(String content) { final var bytes = content.getBytes(StandardCharsets.UTF_8); return new ByteArrayInputStream(bytes); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine().toLowerCase(); // TODO switch (inputLine) { case \"exit\": return new Exit(-1); case \"u\": return new Undo(-1); case \"a\": return new Move.Left(0); case \"w\": return new Move.Up(0); case \"s\": return new Move.Down(0); case \"d\": return new Move.Right(0); case \"h\": return new Move.Left(1); case \"j\": return new Move.Down(1); case \"k\": return new Move.Up(1); case \"l\": return new Move.Right(1); default: return new InvalidInput(-1, INVALID_INPUT_MESSAGE); } }",
        "label": "P"
    },
    "2569": {
        "dataset": "COMP 3021",
        "project": "olchui",
        "bug_id": "32",
        "T": "void testMove(String input, String name, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); } private InputStream fixValueStream(String content) { final var bytes = content.getBytes(StandardCharsets.UTF_8); return new ByteArrayInputStream(bytes); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine().toLowerCase(); // TODO switch (inputLine) { case \"exit\": return new Exit(-1); case \"u\": return new Undo(-1); case \"a\": return new Move.Left(0); case \"w\": return new Move.Up(0); case \"s\": return new Move.Down(0); case \"d\": return new Move.Right(0); case \"h\": return new Move.Left(1); case \"j\": return new Move.Down(1); case \"k\": return new Move.Up(1); case \"l\": return new Move.Right(1); default: return new InvalidInput(-1, INVALID_INPUT_MESSAGE); } }",
        "label": "P"
    },
    "2570": {
        "dataset": "COMP 3021",
        "project": "olchui",
        "bug_id": "33",
        "T": "void testMove(String input, String name, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); } private InputStream fixValueStream(String content) { final var bytes = content.getBytes(StandardCharsets.UTF_8); return new ByteArrayInputStream(bytes); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine().toLowerCase(); // TODO switch (inputLine) { case \"exit\": return new Exit(-1); case \"u\": return new Undo(-1); case \"a\": return new Move.Left(0); case \"w\": return new Move.Up(0); case \"s\": return new Move.Down(0); case \"d\": return new Move.Right(0); case \"h\": return new Move.Left(1); case \"j\": return new Move.Down(1); case \"k\": return new Move.Up(1); case \"l\": return new Move.Right(1); default: return new InvalidInput(-1, INVALID_INPUT_MESSAGE); } }",
        "label": "P"
    },
    "2571": {
        "dataset": "COMP 3021",
        "project": "olchui",
        "bug_id": "34",
        "T": "void testUndo(String input, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine().toLowerCase(); // TODO switch (inputLine) { case \"exit\": return new Exit(-1); case \"u\": return new Undo(-1); case \"a\": return new Move.Left(0); case \"w\": return new Move.Up(0); case \"s\": return new Move.Down(0); case \"d\": return new Move.Right(0); case \"h\": return new Move.Left(1); case \"j\": return new Move.Down(1); case \"k\": return new Move.Up(1); case \"l\": return new Move.Right(1); default: return new InvalidInput(-1, INVALID_INPUT_MESSAGE); } }",
        "label": "P"
    },
    "2572": {
        "dataset": "COMP 3021",
        "project": "olchui",
        "bug_id": "35",
        "T": "void testInvalidInput() { final var inputStream = fixValueStream(\"blah blah\"); final var inputEngine = new TerminalInputEngine(inputStream); final var action = inputEngine.fetchAction(); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine().toLowerCase(); // TODO switch (inputLine) { case \"exit\": return new Exit(-1); case \"u\": return new Undo(-1); case \"a\": return new Move.Left(0); case \"w\": return new Move.Up(0); case \"s\": return new Move.Down(0); case \"d\": return new Move.Right(0); case \"h\": return new Move.Left(1); case \"j\": return new Move.Down(1); case \"k\": return new Move.Up(1); case \"l\": return new Move.Right(1); default: return new InvalidInput(-1, INVALID_INPUT_MESSAGE); } }",
        "label": "P"
    },
    "2573": {
        "dataset": "COMP 3021",
        "project": "olchui",
        "bug_id": "36",
        "T": "void testUndoWhenThereIsNoMove() { final var gameState = new GameState(TestHelper.parseGameMap(\"\"\" 233 ###### #A.a@# #..a@# ###### \"\"\" )); gameState.undo(); } private Entity generateEntity(int key) { return switch (key % 4) { case 0 -> new Box(0); case 1 -> new Empty(); case 2 -> new Player(0); case 3 -> new Wall(); default -> throw new ShouldNotReachException(); }; }",
        "C": "public GameState(@NotNull GameMap map) { // TODO undoQuotaLeft = map.getUndoLimit(); gameMap = map; int width = map.getMaxWidth(); int height = map.getMaxHeight(); playersPositions = new HashMap<>(); boxesPositions = new HashSet<>(); checkPoints = new Stack<>(); for (int y = 0; y < height; y++) { for (int x = 0; x < width; x++) { Position position = new Position(x, y); Entity entity = map.getEntity(position); if (entity instanceof Player) { // is Player int playerId = ((Player) entity).getId(); playersPositions.put(playerId, position); } else if (entity instanceof Box) { // is Box boxesPositions.add(position); } } } checkpoint(); } public void undo() { // TODO // Check if gameMap now is the original setup boolean same = true; for (int y = 0; y < gameMap.getMaxHeight(); y++) { for (int x = 0; x < gameMap.getMaxWidth(); x++) { if (gameMap.gameMap[y][x] != checkPoints.firstElement().gameMap[y][x]) { same = false; break; } } } if (!same && undoQuotaLeft.isPresent()) { undoQuotaLeft = Optional.of(undoQuotaLeft.get() - 1); } // pop the move just now if (checkPoints.size() > 0) { gameMap = checkPoints.pop(); } // pop the move from previous step if (checkPoints.size() > 0) { gameMap = checkPoints.pop(); } int width = gameMap.getMaxWidth(); int height = gameMap.getMaxHeight(); for (int y = 0; y < height; y++) { for (int x = 0; x < width; x++) { Position position = new Position(x, y); Entity entity = gameMap.getEntity(position); if (entity instanceof Player) { // is Player int playerId = ((Player) entity).getId(); playersPositions.put(playerId, position); } else if (entity instanceof Box) { // is Box boxesPositions.add(position); } } } if (checkPoints.size() == 0) { GameMap clonedGameMap = gameMap.clone(gameMap); checkPoints.push(clonedGameMap); } } /** * Get the maximum width of the game map. * This should be the same as that in {@link GameMap} public TerminalRenderingEngine(PrintStream outputSteam) { this.outputSteam = outputSteam; } public Box(int playerId) { this.playerId = playerId; } public Player(int id) { this.id = id; } public ShouldNotReachException() { super(\"This branch should not be reached.\"); }",
        "label": "P"
    },
    "2574": {
        "dataset": "COMP 3021",
        "project": "olchui",
        "bug_id": "37",
        "T": "void testGetUndoUnlimited() { final var gameState = new GameState(TestHelper.parseGameMap(\"\"\" -1 ###### #.Aa@# #..a@# ###### \"\"\" )); }",
        "C": "public GameState(@NotNull GameMap map) { // TODO undoQuotaLeft = map.getUndoLimit(); gameMap = map; int width = map.getMaxWidth(); int height = map.getMaxHeight(); playersPositions = new HashMap<>(); boxesPositions = new HashSet<>(); checkPoints = new Stack<>(); for (int y = 0; y < height; y++) { for (int x = 0; x < width; x++) { Position position = new Position(x, y); Entity entity = map.getEntity(position); if (entity instanceof Player) { // is Player int playerId = ((Player) entity).getId(); playersPositions.put(playerId, position); } else if (entity instanceof Box) { // is Box boxesPositions.add(position); } } } checkpoint(); }",
        "label": "P"
    },
    "2575": {
        "dataset": "COMP 3021",
        "project": "olchui",
        "bug_id": "38",
        "T": "void testMapCopying() { final var maxWidth = 2333; final var maxHeight = 2333; final var random = new Random(); final var randomEntities = Stream.generate(() -> Position.of(random.nextInt(maxWidth), random.nextInt(maxHeight))) .distinct() .limit(100) .collect(Collectors.toMap(Function.identity(), it -> generateEntity(it.x()))); final var firstPos = randomEntities.keySet().stream().findFirst(); final var gameMap = new GameMap(maxWidth, maxHeight, Collections.singleton(firstPos.get()), 233); randomEntities.forEach(gameMap::putEntity); final var gameState = new GameState(gameMap); final var randomPosition = randomEntities.keySet().stream().findAny(); gameMap.putEntity(randomPosition.get(), new Empty()); randomEntities.forEach((p, e) -> assertEquals(e, gameState.getEntity(p))); }",
        "C": "public static @NotNull Position of(int x, int y) { return new Position(x, y); } public GameMap(int maxWidth, int maxHeight, Set<Position> destinations, int undoLimit) { // TODO this.destinations = destinations; this.undoLimit = undoLimit == -1 ? Optional.empty() : Optional.of(undoLimit); } /** * Parses the map from a string representation. * The first line is undo limit. * Starting from the second line, the game map is represented as follows, * <li># represents a {@link Wall}</li> * <li>@ represents a box destination.</li> * <li>Any upper-case letter represents a {@link Player}.</li> * <li> * Any lower-case letter represents a {@link Box} that is only movable by the player with the corresponding upper-case letter. * For instance, box \"a\" can only be moved by player \"A\" and not movable by player \"B\". * </li> * <li>. represents an {@link Empty} position in the map, meaning there is no player or box currently at this position.</li> * <p> * Notes: * <li> * There can be at most 26 players. * All implementations of classes in the hk.ust.comp3021.game package should support up to 26 players. * </li> * <li> * For simplicity, we assume the given map is bounded with a closed boundary. * There is no need to check this point. * </li> * <li> * Example maps can be found in \"src/main/resources\". * </li> * * @param mapText The string representation. * @return The parsed GameMap object. * @throws IllegalArgumentException if undo limit is negative but not -1. * @throws IllegalArgumentException if there are multiple same upper-case letters, i.e., one player can only exist at one position. * @throws IllegalArgumentException if there are no players in the map. * @throws IllegalArgumentException if the number of boxes is not equal to the number of box destinations. * @throws IllegalArgumentException if there are boxes whose {@link Box#getPlayerId()} public GameState(@NotNull GameMap map) { // TODO undoQuotaLeft = map.getUndoLimit(); gameMap = map; int width = map.getMaxWidth(); int height = map.getMaxHeight(); playersPositions = new HashMap<>(); boxesPositions = new HashSet<>(); checkPoints = new Stack<>(); for (int y = 0; y < height; y++) { for (int x = 0; x < width; x++) { Position position = new Position(x, y); Entity entity = map.getEntity(position); if (entity instanceof Player) { // is Player int playerId = ((Player) entity).getId(); playersPositions.put(playerId, position); } else if (entity instanceof Box) { // is Box boxesPositions.add(position); } } } checkpoint(); } public void putEntity(Position position, Entity entity) { // TODO gameMap[position.y()][position.x()] = entity; } public @Nullable Entity getEntity(@NotNull Position position) { // TODO return gameMap.getEntity(position); } /** * Get all box destination positions as a set in the game map. * This should be the same as that in {@link GameMap}",
        "label": "F"
    },
    "2576": {
        "dataset": "COMP 3021",
        "project": "olchui",
        "bug_id": "39",
        "T": "void testUndoWhenThereIsMoveButNoCheckpoint() { final var gameState = new GameState(TestHelper.parseGameMap(\"\"\" 233 ###### #A.a@# #..a@# ###### \"\"\" )); gameState.move(Position.of(1, 1), Position.of(2, 1)); gameState.undo(); }",
        "C": "public GameState(@NotNull GameMap map) { // TODO undoQuotaLeft = map.getUndoLimit(); gameMap = map; int width = map.getMaxWidth(); int height = map.getMaxHeight(); playersPositions = new HashMap<>(); boxesPositions = new HashSet<>(); checkPoints = new Stack<>(); for (int y = 0; y < height; y++) { for (int x = 0; x < width; x++) { Position position = new Position(x, y); Entity entity = map.getEntity(position); if (entity instanceof Player) { // is Player int playerId = ((Player) entity).getId(); playersPositions.put(playerId, position); } else if (entity instanceof Box) { // is Box boxesPositions.add(position); } } } checkpoint(); } public void move(Position from, Position to) { // TODO Entity currEntity = gameMap.getEntity(from); Entity targetEntity = gameMap.getEntity(to); gameMap.putEntity(from, targetEntity); gameMap.putEntity(to, currEntity); if (currEntity instanceof Player) { playersPositions.replace(((Player) currEntity).getId(), to); } else if (currEntity instanceof Box) { boxesPositions.remove(from); boxesPositions.add(to); } } /** * Record a checkpoint of the game state, including: * <li>All current positions of entities in the game map.</li> * <li>Current undo quota</li> * <p> * Checkpoint is used in {@link GameState#undo()} public static @NotNull Position of(int x, int y) { return new Position(x, y); } public void undo() { // TODO // Check if gameMap now is the original setup boolean same = true; for (int y = 0; y < gameMap.getMaxHeight(); y++) { for (int x = 0; x < gameMap.getMaxWidth(); x++) { if (gameMap.gameMap[y][x] != checkPoints.firstElement().gameMap[y][x]) { same = false; break; } } } if (!same && undoQuotaLeft.isPresent()) { undoQuotaLeft = Optional.of(undoQuotaLeft.get() - 1); } // pop the move just now if (checkPoints.size() > 0) { gameMap = checkPoints.pop(); } // pop the move from previous step if (checkPoints.size() > 0) { gameMap = checkPoints.pop(); } int width = gameMap.getMaxWidth(); int height = gameMap.getMaxHeight(); for (int y = 0; y < height; y++) { for (int x = 0; x < width; x++) { Position position = new Position(x, y); Entity entity = gameMap.getEntity(position); if (entity instanceof Player) { // is Player int playerId = ((Player) entity).getId(); playersPositions.put(playerId, position); } else if (entity instanceof Box) { // is Box boxesPositions.add(position); } } } if (checkPoints.size() == 0) { GameMap clonedGameMap = gameMap.clone(gameMap); checkPoints.push(clonedGameMap); } } /** * Get the maximum width of the game map. * This should be the same as that in {@link GameMap}",
        "label": "F"
    },
    "2577": {
        "dataset": "COMP 3021",
        "project": "olchui",
        "bug_id": "40",
        "T": "void testGameExit() { final var gameState = mock(GameState.class); final var inputEngine = mock(TerminalInputEngine.class); final var renderingEngine = mock(TerminalRenderingEngine.class); when(gameState.isWin()).thenReturn(false, false, false); when(inputEngine.fetchAction()) .thenReturn(new InvalidInput(0, \"\"), new InvalidInput(0, \"\"), new Exit(0)); final var game = new TerminalSokobanGame(gameState, inputEngine, renderingEngine); game.run(); verify(renderingEngine, atLeastOnce()).message(any()); }",
        "C": "public InvalidInput(int initiator, @NotNull String message) { super(initiator); this.message = message; } public Exit(int initiator) { super(initiator); } public TerminalSokobanGame(GameState gameState, TerminalInputEngine inputEngine, TerminalRenderingEngine renderingEngine) { super(gameState); this.inputEngine = inputEngine; this.renderingEngine = renderingEngine; // TODO // Check the number of players if (gameState.getAllPlayerPositions().size() > 2) { throw new IllegalArgumentException(\"Too many players\"); } } public void run() { // TODO renderingEngine.message(StringResources.GAME_READY_MESSAGE); renderingEngine.render(state); String displayUndoQuota; if (state.getUndoQuota().isEmpty()) { // Unlimited displayUndoQuota = StringResources.UNDO_QUOTA_UNLIMITED; } else { // Limited String undoQuotaLeft = Integer.toString(state.getUndoQuota().get()); displayUndoQuota = String.format(StringResources.UNDO_QUOTA_TEMPLATE, undoQuotaLeft); } renderingEngine.message(displayUndoQuota); String displayUndoQuota2 = \"\"; while (!shouldStop()) { Action action = inputEngine.fetchAction(); ActionResult result = processAction(action); if (action instanceof Exit) { renderingEngine.render(state); break; } renderingEngine.render(state); if (state.getUndoQuota().isEmpty()) { // Unlimited displayUndoQuota2 = StringResources.UNDO_QUOTA_UNLIMITED; } else { // Limited String undoQuotaLeft2 = Integer.toString(state.getUndoQuota().get()); displayUndoQuota2 = String.format(StringResources.UNDO_QUOTA_TEMPLATE, undoQuotaLeft2); } renderingEngine.message(displayUndoQuota2); } renderingEngine.message(StringResources.GAME_EXIT_MESSAGE); if (state.isWin()) { renderingEngine.message(StringResources.WIN_MESSAGE); } }",
        "label": "P"
    },
    "2578": {
        "dataset": "COMP 3021",
        "project": "olchui",
        "bug_id": "41",
        "T": "void testGameWin() { final var gameState = mock(GameState.class); final var inputEngine = mock(TerminalInputEngine.class); final var renderingEngine = mock(TerminalRenderingEngine.class); when(gameState.isWin()).thenReturn(false, false, false, true); when(inputEngine.fetchAction()) .thenReturn(new InvalidInput(0, \"\")); final var game = new TerminalSokobanGame(gameState, inputEngine, renderingEngine); game.run(); verify(gameState, atLeastOnce()).isWin(); verify(renderingEngine, atLeastOnce()).message(any()); }",
        "C": "public InvalidInput(int initiator, @NotNull String message) { super(initiator); this.message = message; } public TerminalSokobanGame(GameState gameState, TerminalInputEngine inputEngine, TerminalRenderingEngine renderingEngine) { super(gameState); this.inputEngine = inputEngine; this.renderingEngine = renderingEngine; // TODO // Check the number of players if (gameState.getAllPlayerPositions().size() > 2) { throw new IllegalArgumentException(\"Too many players\"); } } public void run() { // TODO renderingEngine.message(StringResources.GAME_READY_MESSAGE); renderingEngine.render(state); String displayUndoQuota; if (state.getUndoQuota().isEmpty()) { // Unlimited displayUndoQuota = StringResources.UNDO_QUOTA_UNLIMITED; } else { // Limited String undoQuotaLeft = Integer.toString(state.getUndoQuota().get()); displayUndoQuota = String.format(StringResources.UNDO_QUOTA_TEMPLATE, undoQuotaLeft); } renderingEngine.message(displayUndoQuota); String displayUndoQuota2 = \"\"; while (!shouldStop()) { Action action = inputEngine.fetchAction(); ActionResult result = processAction(action); if (action instanceof Exit) { renderingEngine.render(state); break; } renderingEngine.render(state); if (state.getUndoQuota().isEmpty()) { // Unlimited displayUndoQuota2 = StringResources.UNDO_QUOTA_UNLIMITED; } else { // Limited String undoQuotaLeft2 = Integer.toString(state.getUndoQuota().get()); displayUndoQuota2 = String.format(StringResources.UNDO_QUOTA_TEMPLATE, undoQuotaLeft2); } renderingEngine.message(displayUndoQuota2); } renderingEngine.message(StringResources.GAME_EXIT_MESSAGE); if (state.isWin()) { renderingEngine.message(StringResources.WIN_MESSAGE); } }",
        "label": "P"
    },
    "2579": {
        "dataset": "COMP 3021",
        "project": "olchui",
        "bug_id": "42",
        "T": "void testMoreThanTwoPlayers() { final var gameState = mock(GameState.class); final var inputEngine = mock(TerminalInputEngine.class); final var renderingEngine = mock(TerminalRenderingEngine.class); when(gameState.getAllPlayerPositions()).thenReturn(new HashSet<>(Arrays.asList(Position.of(1, 1), Position.of(1, 2), Position.of(1, 3)))); }",
        "C": "public static @NotNull Position of(int x, int y) { return new Position(x, y); }",
        "label": "P"
    },
    "2580": {
        "dataset": "COMP 3021",
        "project": "hcloaf",
        "bug_id": "0",
        "T": "void moveUp() { Position.of(233, 232), new Move.Up(-1).nextPosition(pos) ); }",
        "C": "public static @NotNull Position of(int x, int y) { return new Position(x, y); } public Up(int initiator) { super(initiator); }",
        "label": "P"
    },
    "2581": {
        "dataset": "COMP 3021",
        "project": "hcloaf",
        "bug_id": "1",
        "T": "void moveDown() { Position.of(233, 234), new Move.Down(-1).nextPosition(pos) ); }",
        "C": "public static @NotNull Position of(int x, int y) { return new Position(x, y); } public Down(int initiator) { super(initiator); }",
        "label": "P"
    },
    "2582": {
        "dataset": "COMP 3021",
        "project": "hcloaf",
        "bug_id": "2",
        "T": "void moveRight() { Position.of(234, 233), new Move.Right(-1).nextPosition(pos) ); }",
        "C": "public static @NotNull Position of(int x, int y) { return new Position(x, y); } public Right(int initiator) { super(initiator); }",
        "label": "P"
    },
    "2583": {
        "dataset": "COMP 3021",
        "project": "hcloaf",
        "bug_id": "3",
        "T": "void testExceedingUndoQuota() { final var gameState = mock(GameState.class); when(gameState.getPlayerPositionById(anyInt())).thenReturn(Position.of(0, 0)); when(gameState.getUndoQuota()).thenReturn(Optional.of(0)); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Undo(0)); }",
        "C": "public Undo(int initiator) { super(initiator); }",
        "label": "P"
    },
    "2584": {
        "dataset": "COMP 3021",
        "project": "hcloaf",
        "bug_id": "4",
        "T": "void testExit() { final var gameState = mock(GameState.class); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Exit(0)); }",
        "C": "public Exit(int initiator) { super(initiator); }",
        "label": "P"
    },
    "2585": {
        "dataset": "COMP 3021",
        "project": "hcloaf",
        "bug_id": "5",
        "T": "void testUndoUnlimited() { final var gameState = mock(GameState.class); when(gameState.getPlayerPositionById(anyInt())).thenReturn(Position.of(0, 0)); when(gameState.getUndoQuota()).thenReturn(Optional.empty()); final var game = new SokobanGameForTesting(gameState); for (int i = 0; i < 10000; i++) { final var result = game.feedActionForProcessing(new Undo(0)); } verify(gameState, times(10000)).undo(); }",
        "C": "public TerminalRenderingEngine(PrintStream outputSteam) { this.outputSteam = outputSteam; } public Undo(int initiator) { super(initiator); }",
        "label": "P"
    },
    "2586": {
        "dataset": "COMP 3021",
        "project": "hcloaf",
        "bug_id": "6",
        "T": "void testPushOtherPlayerBox() { String mapText = \"\"\" 233 ###### #AB.@# #b.a.# #@...# ###### \"\"\"; final var testMap = TestHelper.parseGameMap(mapText); final var gameState = spy(new GameState(testMap)); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Move.Down(0)); verify(gameState, never()).move(any(), any()); }",
        "C": "public GameState(@NotNull GameMap map) { // when GameState is first created // TODO: done currentMap = new GameMap(map); // create an instance of GameMap undoQuotaLeft = currentMap.getUndoLimit(); initialMap = map; nextMaptoSave = initialMap; // ref link } public Down(int initiator) { super(initiator); }",
        "label": "P"
    },
    "2587": {
        "dataset": "COMP 3021",
        "project": "hcloaf",
        "bug_id": "7",
        "T": "void testMoveNonExistingPlayer() { String mapText = \"\"\" 233 ###### #A..@# #a...# ##...# ###### \"\"\"; final var testMap = TestHelper.parseGameMap(mapText); final var gameState = spy(new GameState(testMap)); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Move.Down(23)); }",
        "C": "public GameState(@NotNull GameMap map) { // when GameState is first created // TODO: done currentMap = new GameMap(map); // create an instance of GameMap undoQuotaLeft = currentMap.getUndoLimit(); initialMap = map; nextMaptoSave = initialMap; // ref link } public Down(int initiator) { super(initiator); }",
        "label": "P"
    },
    "2588": {
        "dataset": "COMP 3021",
        "project": "hcloaf",
        "bug_id": "8",
        "T": "void testCheckpointWhenNeed() { final var gameState = spy(new GameState(TestHelper.parseGameMap(\"\"\" 233 ###### #.Aa@# #..a@# ###### \"\"\" ))); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Move.Right(0)); verify(gameState, times(1)).checkpoint(); }",
        "C": "public GameState(@NotNull GameMap map) { // when GameState is first created // TODO: done currentMap = new GameMap(map); // create an instance of GameMap undoQuotaLeft = currentMap.getUndoLimit(); initialMap = map; nextMaptoSave = initialMap; // ref link } public Right(int initiator) { super(initiator); }",
        "label": "P"
    },
    "2589": {
        "dataset": "COMP 3021",
        "project": "hcloaf",
        "bug_id": "9",
        "T": "void testPushBoxAgainstWall() { String mapText = \"\"\" 233 ###### #A..@# #a...# ##...# ###### \"\"\"; final var testMap = TestHelper.parseGameMap(mapText); final var gameState = spy(new GameState(testMap)); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Move.Down(0)); verify(gameState, never()).move(any(), any()); }",
        "C": "public GameState(@NotNull GameMap map) { // when GameState is first created // TODO: done currentMap = new GameMap(map); // create an instance of GameMap undoQuotaLeft = currentMap.getUndoLimit(); initialMap = map; nextMaptoSave = initialMap; // ref link } public Down(int initiator) { super(initiator); }",
        "label": "P"
    },
    "2590": {
        "dataset": "COMP 3021",
        "project": "hcloaf",
        "bug_id": "10",
        "T": "void testCheckpointWhenNotNeed() { final var gameState = spy(new GameState(TestHelper.parseGameMap(\"\"\" 233 ###### #A.a@# #..a@# ###### \"\"\" ))); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Move.Right(0)); verify(gameState, never()).checkpoint(); } private static class SokobanGameForTesting extends AbstractSokobanGame { protected SokobanGameForTesting(GameState gameState) { super(gameState); } @Override public void run() { } public ActionResult feedActionForProcessing(Action action) { return processAction(action); } }",
        "C": "public GameState(@NotNull GameMap map) { // when GameState is first created // TODO: done currentMap = new GameMap(map); // create an instance of GameMap undoQuotaLeft = currentMap.getUndoLimit(); initialMap = map; nextMaptoSave = initialMap; // ref link } public Right(int initiator) { super(initiator); } public void run() { //System.out.println(\"Running\"); } protected ActionResult processAction(@NotNull Action action) { // TODO: done if (action instanceof InvalidInput){ return new ActionResult.Failed(action, StringResources.INVALID_INPUT_MESSAGE); } else if (action instanceof Move m) { // get initiator position int initiatorID = m.getInitiator(); if (state.getPlayersIds().contains(initiatorID)) { // if initiator exists on the map Position initiatorPos = state.getPlayerPositionById(initiatorID); // get next position after Move Position nextPos = m.nextPosition(initiatorPos); // get next position entity Entity nextPosEntity = state.getEntity(nextPos); if (nextPosEntity.isWalkable()) { // check if entity is '.' state.move(initiatorPos, nextPos); return new ActionResult.Success(action); } if (nextPosEntity instanceof Box b) { // check if there's wall behind the box // 1. check PlayerID & BoxID if (initiatorID != b.getPlayerId()){ return new ActionResult.Failed(action, \"Player \" + Character.toString((char) (initiatorID + 'A')) + \" can't move Box \" + Character.toString((char) (b.getPlayerId() + 'a'))); } else { // 2. if ID match, check if there's space behind the box to move int offsetX = 0; int offsetY = 0; if (m instanceof Move.Down) { offsetX = 0; offsetY = 1; } else if (m instanceof Move.Left) { offsetX = -1; offsetY = 0; } else if (m instanceof Move.Right) { offsetX = 1; offsetY = 0; } else { // m instanceof Move.Left offsetX = 0; offsetY = -1; } // get the entity behind the box from the direction Player try to move Position behindBoxPos = Position.of(nextPos.x() + offsetX, nextPos.y() + offsetY); Entity behindBox = state.getEntity(behindBoxPos); if (behindBox.isWalkable()) { // successfully move box state.move(nextPos, behindBoxPos); // shift box to new position state.move(initiatorPos, nextPos); // shift Player to box position, original Player pos will be empty state.checkpoint(); // save the checkpoint return new ActionResult.Success(action); } else { return new ActionResult.Failed(action, \"The box Player \" + Character.toString((char) (initiatorID + 'A')) + \" want to move is not possible.\"); } } } return new ActionResult.Failed(action, \"The place Player \" + Character.toString((char) (initiatorID + 'A')) + \" want to move is not empty / Box can't be pushed.\"); } else{ return new ActionResult.Failed(action, \"There's no such Player with ID \" + initiatorID + \" to move.\"); } } else if (action instanceof Undo) { if (state.getUndoQuota().isPresent()){ // if quota is limited if (state.getUndoQuota().get() == 0){ // if ran out quota return new ActionResult.Failed(action, StringResources.UNDO_QUOTA_RUN_OUT); } else { // there's quota left state.undo(); return new ActionResult.Success(action); } } else { // if quota is unlimited state.undo(); return new ActionResult.Success(action); } } else if (action instanceof Exit){ isExit = true; // trigger flag in this class return new ActionResult.Success(action); } return new ActionResult.Failed(action, \"No such action.\"); }",
        "label": "P"
    },
    "2591": {
        "dataset": "COMP 3021",
        "project": "hcloaf",
        "bug_id": "11",
        "T": "void testHitAnotherPlayer() { String mapText = \"\"\" 233 ###### #A..@# #B...# #ab.@# ###### \"\"\"; final var testMap = TestHelper.parseGameMap(mapText); final var gameState = spy(new GameState(testMap)); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Move.Down(0)); verify(gameState, never()).move(any(), any()); }",
        "C": "public GameState(@NotNull GameMap map) { // when GameState is first created // TODO: done currentMap = new GameMap(map); // create an instance of GameMap undoQuotaLeft = currentMap.getUndoLimit(); initialMap = map; nextMaptoSave = initialMap; // ref link } public Down(int initiator) { super(initiator); }",
        "label": "P"
    },
    "2592": {
        "dataset": "COMP 3021",
        "project": "hcloaf",
        "bug_id": "12",
        "T": "void testUndoWithinQuota() { final var gameState = mock(GameState.class); when(gameState.getPlayerPositionById(anyInt())).thenReturn(Position.of(0, 0)); when(gameState.getUndoQuota()).thenReturn(Optional.of(1)); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Undo(0)); verify(gameState, times(1)).undo(); }",
        "C": "public Undo(int initiator) { super(initiator); }",
        "label": "P"
    },
    "2593": {
        "dataset": "COMP 3021",
        "project": "hcloaf",
        "bug_id": "13",
        "T": "void testInvalidInput() { final var game = new SokobanGameForTesting(mock(GameState.class)); final var message = String.valueOf(new Random().nextLong()); final var action = new InvalidInput(-1, message); final var result = game.feedActionForProcessing(action); }",
        "C": "public InvalidInput(int initiator, @NotNull String message) { super(initiator); this.message = message; }",
        "label": "P"
    },
    "2594": {
        "dataset": "COMP 3021",
        "project": "hcloaf",
        "bug_id": "14",
        "T": "void testUndoLimitParsing() { final var gameMap = TestHelper.parseGameMap(rectangularMap); }",
        "C": "",
        "label": "P"
    },
    "2595": {
        "dataset": "COMP 3021",
        "project": "hcloaf",
        "bug_id": "15",
        "T": "void testWidthForNonRectangularMap() { final var gameMap = TestHelper.parseGameMap(nonRectangularMap); }",
        "C": "",
        "label": "P"
    },
    "2596": {
        "dataset": "COMP 3021",
        "project": "hcloaf",
        "bug_id": "16",
        "T": "void testTwoPlayersMap() { final var twoPlayersMap = \"\"\" 233 ###### #A..@# #..B@# #....# #.a..# #..b.# ###### \"\"\"; final var gameMap = TestHelper.parseGameMap(twoPlayersMap); final var playerIds = gameMap.getPlayerIds(); final var expectedIds = new HashSet<Integer>(); expectedIds.add(0); expectedIds.add(1); }",
        "C": "public Set<Integer> getPlayerIds() { // TODO: done return playerID; // already unmodifiable }",
        "label": "P"
    },
    "2597": {
        "dataset": "COMP 3021",
        "project": "hcloaf",
        "bug_id": "17",
        "T": "void testMapWithoutPlayer() { final var invalidMap = \"\"\" 233 ### #.# ### \"\"\"; } // @Tag(TestKind.HIDDEN) // @Test // void testUnmatchedPlayersAndBoxes() { // final var invalidMap = \"\"\" // 233 // ###### // #A..@# // #...@# // #a.b@# // #.a.@# // #..a.# // ###### // \"\"\"; // assertThrowsExactly(IllegalArgumentException.class, () -> TestHelper.parseGameMap(invalidMap)); // }",
        "C": "public TerminalRenderingEngine(PrintStream outputSteam) { this.outputSteam = outputSteam; }",
        "label": "P"
    },
    "2598": {
        "dataset": "COMP 3021",
        "project": "hcloaf",
        "bug_id": "18",
        "T": "void testManyPlayersMap() { final var manyPlayersMap = \"\"\" 233 ###### #A.P@@# #vCB@@# #.cpD@# #Ga.d@# #g.bV@# ###### \"\"\"; final var gameMap = TestHelper.parseGameMap(manyPlayersMap); final var playerIds = gameMap.getPlayerIds(); final var expectedIds = new HashSet<>(Arrays.asList( 0, 'P' - 'A', 'C' - 'A', 'B' - 'A', 'D' - 'A', 'G' - 'A', 'V' - 'A' )); }",
        "C": "public Set<Integer> getPlayerIds() { // TODO: done return playerID; // already unmodifiable }",
        "label": "P"
    },
    "2599": {
        "dataset": "COMP 3021",
        "project": "hcloaf",
        "bug_id": "19",
        "T": "void testHeightForNonRectangularMap() { final var gameMap = TestHelper.parseGameMap(nonRectangularMap); }",
        "C": "",
        "label": "P"
    },
    "2600": {
        "dataset": "COMP 3021",
        "project": "hcloaf",
        "bug_id": "20",
        "T": "void testDuplicatedPlayers() { final var invalidMap = \"\"\" 233 ###### #A..@# #..A@# #....# #.a..# #..b.# ###### \"\"\"; }",
        "C": "",
        "label": "P"
    },
    "2601": {
        "dataset": "COMP 3021",
        "project": "hcloaf",
        "bug_id": "21",
        "T": "void testParseMapWithoutUndoLimit() { final var invalidMap = String.join(\"\\n\", rectangularMap.lines().skip(1).toList()); }",
        "C": "",
        "label": "P"
    },
    "2602": {
        "dataset": "COMP 3021",
        "project": "hcloaf",
        "bug_id": "22",
        "T": "void testInsufficientDestinations() { final var invalidMap = \"\"\" 233 ###### #A..@# #...@# #a...# #.a..# #..a.# ###### \"\"\"; }",
        "C": "",
        "label": "P"
    },
    "2603": {
        "dataset": "COMP 3021",
        "project": "hcloaf",
        "bug_id": "23",
        "T": "void testSuperLargeMap() { try { new GameMap(Integer.MAX_VALUE, Integer.MAX_VALUE, Collections.emptySet(), 0); } catch (OutOfMemoryError e) { throw new RuntimeException(e); } }); }",
        "C": "public GameMap(int maxWidth, int maxHeight, Set<Position> destinations, int undoLimit) { // TODO: done this.maxWidth = maxWidth; this.maxHeight = maxHeight; this.destinations = Collections.unmodifiableSet(destinations) ; // finalize the destinations set this.undoLimit = undoLimit; } public TerminalRenderingEngine(PrintStream outputSteam) { this.outputSteam = outputSteam; }",
        "label": "P"
    },
    "2604": {
        "dataset": "COMP 3021",
        "project": "hcloaf",
        "bug_id": "24",
        "T": "void testInvalidUndoLimit() { final var invalidMap = \"\"\" -233 ###### #A..@# #...@# #a.b@# #.a.@# #..a.# ###### \"\"\"; }",
        "C": "",
        "label": "P"
    },
    "2605": {
        "dataset": "COMP 3021",
        "project": "hcloaf",
        "bug_id": "25",
        "T": "void testEmptyMap() { final var invalidMap = \"\"; }",
        "C": "",
        "label": "P"
    },
    "2606": {
        "dataset": "COMP 3021",
        "project": "hcloaf",
        "bug_id": "26",
        "T": "void testMove(String input, String name, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); } private InputStream fixValueStream(String content) { final var bytes = content.getBytes(StandardCharsets.UTF_8); return new ByteArrayInputStream(bytes); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine(); // TODO: done //Action returnAction = null; if (inputLine.equalsIgnoreCase(\"A\")){ return new Move.Left(0); } if (inputLine.equalsIgnoreCase(\"S\")){ return new Move.Down(0); } if (inputLine.equalsIgnoreCase(\"W\")){ return new Move.Up(0); } if (inputLine.equalsIgnoreCase(\"D\")){ return new Move.Right(0); } if (inputLine.equalsIgnoreCase(\"H\")){ return new Move.Left(1); } if (inputLine.equalsIgnoreCase(\"J\")){ return new Move.Down(1); } if (inputLine.equalsIgnoreCase(\"K\")){ return new Move.Up(1); } if (inputLine.equalsIgnoreCase(\"L\")){ return new Move.Right(1); } if (inputLine.equalsIgnoreCase(\"U\")){ return new Undo(-1); } if (inputLine.equalsIgnoreCase(StringResources.EXIT_COMMAND_TEXT)){ return new Exit(-1); } else{ return new InvalidInput(-1, StringResources.INVALID_INPUT_MESSAGE); } }",
        "label": "P"
    },
    "2607": {
        "dataset": "COMP 3021",
        "project": "hcloaf",
        "bug_id": "27",
        "T": "void testMove(String input, String name, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); } private InputStream fixValueStream(String content) { final var bytes = content.getBytes(StandardCharsets.UTF_8); return new ByteArrayInputStream(bytes); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine(); // TODO: done //Action returnAction = null; if (inputLine.equalsIgnoreCase(\"A\")){ return new Move.Left(0); } if (inputLine.equalsIgnoreCase(\"S\")){ return new Move.Down(0); } if (inputLine.equalsIgnoreCase(\"W\")){ return new Move.Up(0); } if (inputLine.equalsIgnoreCase(\"D\")){ return new Move.Right(0); } if (inputLine.equalsIgnoreCase(\"H\")){ return new Move.Left(1); } if (inputLine.equalsIgnoreCase(\"J\")){ return new Move.Down(1); } if (inputLine.equalsIgnoreCase(\"K\")){ return new Move.Up(1); } if (inputLine.equalsIgnoreCase(\"L\")){ return new Move.Right(1); } if (inputLine.equalsIgnoreCase(\"U\")){ return new Undo(-1); } if (inputLine.equalsIgnoreCase(StringResources.EXIT_COMMAND_TEXT)){ return new Exit(-1); } else{ return new InvalidInput(-1, StringResources.INVALID_INPUT_MESSAGE); } }",
        "label": "P"
    },
    "2608": {
        "dataset": "COMP 3021",
        "project": "hcloaf",
        "bug_id": "28",
        "T": "void testMove(String input, String name, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); } private InputStream fixValueStream(String content) { final var bytes = content.getBytes(StandardCharsets.UTF_8); return new ByteArrayInputStream(bytes); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine(); // TODO: done //Action returnAction = null; if (inputLine.equalsIgnoreCase(\"A\")){ return new Move.Left(0); } if (inputLine.equalsIgnoreCase(\"S\")){ return new Move.Down(0); } if (inputLine.equalsIgnoreCase(\"W\")){ return new Move.Up(0); } if (inputLine.equalsIgnoreCase(\"D\")){ return new Move.Right(0); } if (inputLine.equalsIgnoreCase(\"H\")){ return new Move.Left(1); } if (inputLine.equalsIgnoreCase(\"J\")){ return new Move.Down(1); } if (inputLine.equalsIgnoreCase(\"K\")){ return new Move.Up(1); } if (inputLine.equalsIgnoreCase(\"L\")){ return new Move.Right(1); } if (inputLine.equalsIgnoreCase(\"U\")){ return new Undo(-1); } if (inputLine.equalsIgnoreCase(StringResources.EXIT_COMMAND_TEXT)){ return new Exit(-1); } else{ return new InvalidInput(-1, StringResources.INVALID_INPUT_MESSAGE); } }",
        "label": "P"
    },
    "2609": {
        "dataset": "COMP 3021",
        "project": "hcloaf",
        "bug_id": "29",
        "T": "void testMove(String input, String name, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); } private InputStream fixValueStream(String content) { final var bytes = content.getBytes(StandardCharsets.UTF_8); return new ByteArrayInputStream(bytes); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine(); // TODO: done //Action returnAction = null; if (inputLine.equalsIgnoreCase(\"A\")){ return new Move.Left(0); } if (inputLine.equalsIgnoreCase(\"S\")){ return new Move.Down(0); } if (inputLine.equalsIgnoreCase(\"W\")){ return new Move.Up(0); } if (inputLine.equalsIgnoreCase(\"D\")){ return new Move.Right(0); } if (inputLine.equalsIgnoreCase(\"H\")){ return new Move.Left(1); } if (inputLine.equalsIgnoreCase(\"J\")){ return new Move.Down(1); } if (inputLine.equalsIgnoreCase(\"K\")){ return new Move.Up(1); } if (inputLine.equalsIgnoreCase(\"L\")){ return new Move.Right(1); } if (inputLine.equalsIgnoreCase(\"U\")){ return new Undo(-1); } if (inputLine.equalsIgnoreCase(StringResources.EXIT_COMMAND_TEXT)){ return new Exit(-1); } else{ return new InvalidInput(-1, StringResources.INVALID_INPUT_MESSAGE); } }",
        "label": "P"
    },
    "2610": {
        "dataset": "COMP 3021",
        "project": "hcloaf",
        "bug_id": "30",
        "T": "void testMove(String input, String name, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); } private InputStream fixValueStream(String content) { final var bytes = content.getBytes(StandardCharsets.UTF_8); return new ByteArrayInputStream(bytes); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine(); // TODO: done //Action returnAction = null; if (inputLine.equalsIgnoreCase(\"A\")){ return new Move.Left(0); } if (inputLine.equalsIgnoreCase(\"S\")){ return new Move.Down(0); } if (inputLine.equalsIgnoreCase(\"W\")){ return new Move.Up(0); } if (inputLine.equalsIgnoreCase(\"D\")){ return new Move.Right(0); } if (inputLine.equalsIgnoreCase(\"H\")){ return new Move.Left(1); } if (inputLine.equalsIgnoreCase(\"J\")){ return new Move.Down(1); } if (inputLine.equalsIgnoreCase(\"K\")){ return new Move.Up(1); } if (inputLine.equalsIgnoreCase(\"L\")){ return new Move.Right(1); } if (inputLine.equalsIgnoreCase(\"U\")){ return new Undo(-1); } if (inputLine.equalsIgnoreCase(StringResources.EXIT_COMMAND_TEXT)){ return new Exit(-1); } else{ return new InvalidInput(-1, StringResources.INVALID_INPUT_MESSAGE); } }",
        "label": "P"
    },
    "2611": {
        "dataset": "COMP 3021",
        "project": "hcloaf",
        "bug_id": "31",
        "T": "void testMove(String input, String name, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); } private InputStream fixValueStream(String content) { final var bytes = content.getBytes(StandardCharsets.UTF_8); return new ByteArrayInputStream(bytes); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine(); // TODO: done //Action returnAction = null; if (inputLine.equalsIgnoreCase(\"A\")){ return new Move.Left(0); } if (inputLine.equalsIgnoreCase(\"S\")){ return new Move.Down(0); } if (inputLine.equalsIgnoreCase(\"W\")){ return new Move.Up(0); } if (inputLine.equalsIgnoreCase(\"D\")){ return new Move.Right(0); } if (inputLine.equalsIgnoreCase(\"H\")){ return new Move.Left(1); } if (inputLine.equalsIgnoreCase(\"J\")){ return new Move.Down(1); } if (inputLine.equalsIgnoreCase(\"K\")){ return new Move.Up(1); } if (inputLine.equalsIgnoreCase(\"L\")){ return new Move.Right(1); } if (inputLine.equalsIgnoreCase(\"U\")){ return new Undo(-1); } if (inputLine.equalsIgnoreCase(StringResources.EXIT_COMMAND_TEXT)){ return new Exit(-1); } else{ return new InvalidInput(-1, StringResources.INVALID_INPUT_MESSAGE); } }",
        "label": "P"
    },
    "2612": {
        "dataset": "COMP 3021",
        "project": "hcloaf",
        "bug_id": "32",
        "T": "void testMove(String input, String name, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); } private InputStream fixValueStream(String content) { final var bytes = content.getBytes(StandardCharsets.UTF_8); return new ByteArrayInputStream(bytes); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine(); // TODO: done //Action returnAction = null; if (inputLine.equalsIgnoreCase(\"A\")){ return new Move.Left(0); } if (inputLine.equalsIgnoreCase(\"S\")){ return new Move.Down(0); } if (inputLine.equalsIgnoreCase(\"W\")){ return new Move.Up(0); } if (inputLine.equalsIgnoreCase(\"D\")){ return new Move.Right(0); } if (inputLine.equalsIgnoreCase(\"H\")){ return new Move.Left(1); } if (inputLine.equalsIgnoreCase(\"J\")){ return new Move.Down(1); } if (inputLine.equalsIgnoreCase(\"K\")){ return new Move.Up(1); } if (inputLine.equalsIgnoreCase(\"L\")){ return new Move.Right(1); } if (inputLine.equalsIgnoreCase(\"U\")){ return new Undo(-1); } if (inputLine.equalsIgnoreCase(StringResources.EXIT_COMMAND_TEXT)){ return new Exit(-1); } else{ return new InvalidInput(-1, StringResources.INVALID_INPUT_MESSAGE); } }",
        "label": "P"
    },
    "2613": {
        "dataset": "COMP 3021",
        "project": "hcloaf",
        "bug_id": "33",
        "T": "void testMove(String input, String name, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); } private InputStream fixValueStream(String content) { final var bytes = content.getBytes(StandardCharsets.UTF_8); return new ByteArrayInputStream(bytes); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine(); // TODO: done //Action returnAction = null; if (inputLine.equalsIgnoreCase(\"A\")){ return new Move.Left(0); } if (inputLine.equalsIgnoreCase(\"S\")){ return new Move.Down(0); } if (inputLine.equalsIgnoreCase(\"W\")){ return new Move.Up(0); } if (inputLine.equalsIgnoreCase(\"D\")){ return new Move.Right(0); } if (inputLine.equalsIgnoreCase(\"H\")){ return new Move.Left(1); } if (inputLine.equalsIgnoreCase(\"J\")){ return new Move.Down(1); } if (inputLine.equalsIgnoreCase(\"K\")){ return new Move.Up(1); } if (inputLine.equalsIgnoreCase(\"L\")){ return new Move.Right(1); } if (inputLine.equalsIgnoreCase(\"U\")){ return new Undo(-1); } if (inputLine.equalsIgnoreCase(StringResources.EXIT_COMMAND_TEXT)){ return new Exit(-1); } else{ return new InvalidInput(-1, StringResources.INVALID_INPUT_MESSAGE); } }",
        "label": "P"
    },
    "2614": {
        "dataset": "COMP 3021",
        "project": "hcloaf",
        "bug_id": "34",
        "T": "void testUndo(String input, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine(); // TODO: done //Action returnAction = null; if (inputLine.equalsIgnoreCase(\"A\")){ return new Move.Left(0); } if (inputLine.equalsIgnoreCase(\"S\")){ return new Move.Down(0); } if (inputLine.equalsIgnoreCase(\"W\")){ return new Move.Up(0); } if (inputLine.equalsIgnoreCase(\"D\")){ return new Move.Right(0); } if (inputLine.equalsIgnoreCase(\"H\")){ return new Move.Left(1); } if (inputLine.equalsIgnoreCase(\"J\")){ return new Move.Down(1); } if (inputLine.equalsIgnoreCase(\"K\")){ return new Move.Up(1); } if (inputLine.equalsIgnoreCase(\"L\")){ return new Move.Right(1); } if (inputLine.equalsIgnoreCase(\"U\")){ return new Undo(-1); } if (inputLine.equalsIgnoreCase(StringResources.EXIT_COMMAND_TEXT)){ return new Exit(-1); } else{ return new InvalidInput(-1, StringResources.INVALID_INPUT_MESSAGE); } }",
        "label": "P"
    },
    "2615": {
        "dataset": "COMP 3021",
        "project": "hcloaf",
        "bug_id": "35",
        "T": "void testInvalidInput() { final var inputStream = fixValueStream(\"blah blah\"); final var inputEngine = new TerminalInputEngine(inputStream); final var action = inputEngine.fetchAction(); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine(); // TODO: done //Action returnAction = null; if (inputLine.equalsIgnoreCase(\"A\")){ return new Move.Left(0); } if (inputLine.equalsIgnoreCase(\"S\")){ return new Move.Down(0); } if (inputLine.equalsIgnoreCase(\"W\")){ return new Move.Up(0); } if (inputLine.equalsIgnoreCase(\"D\")){ return new Move.Right(0); } if (inputLine.equalsIgnoreCase(\"H\")){ return new Move.Left(1); } if (inputLine.equalsIgnoreCase(\"J\")){ return new Move.Down(1); } if (inputLine.equalsIgnoreCase(\"K\")){ return new Move.Up(1); } if (inputLine.equalsIgnoreCase(\"L\")){ return new Move.Right(1); } if (inputLine.equalsIgnoreCase(\"U\")){ return new Undo(-1); } if (inputLine.equalsIgnoreCase(StringResources.EXIT_COMMAND_TEXT)){ return new Exit(-1); } else{ return new InvalidInput(-1, StringResources.INVALID_INPUT_MESSAGE); } }",
        "label": "P"
    },
    "2616": {
        "dataset": "COMP 3021",
        "project": "hcloaf",
        "bug_id": "36",
        "T": "void testUndoWhenThereIsNoMove() { final var gameState = new GameState(TestHelper.parseGameMap(\"\"\" 233 ###### #A.a@# #..a@# ###### \"\"\" )); gameState.undo(); } private Entity generateEntity(int key) { return switch (key % 4) { case 0 -> new Box(0); case 1 -> new Empty(); case 2 -> new Player(0); case 3 -> new Wall(); default -> throw new ShouldNotReachException(); }; }",
        "C": "public GameState(@NotNull GameMap map) { // when GameState is first created // TODO: done currentMap = new GameMap(map); // create an instance of GameMap undoQuotaLeft = currentMap.getUndoLimit(); initialMap = map; nextMaptoSave = initialMap; // ref link } public void undo() { // TODO: done if (checkpoints.empty()){ // If there is no checkpoint recorded System.out.println(\"There's no checkpoint recorded, revert to initial game state.\"); currentMap = new GameMap(initialMap); // update current map back to initial map nextMaptoSave = initialMap; // link last box map back to initial map } else{ //int lastIndex = checkpoints.size()-1; //currentMap = new GameMap(checkpoints.get(lastIndex)); //checkpoints.remove(lastIndex); currentMap = checkpoints.pop(); // update current map back to checkpoint nextMaptoSave = new GameMap(currentMap); // update nextMaptoSave if (undoQuotaLeft.isPresent()){ // if quota is limited, decrease by 1 int updatedQuota = undoQuotaLeft.get() - 1; undoQuotaLeft = Optional.of(updatedQuota); } } } /** * Get the maximum width of the game map. * This should be the same as that in {@link GameMap} public TerminalRenderingEngine(PrintStream outputSteam) { this.outputSteam = outputSteam; } public Box(int playerId) { this.playerId = playerId; } public Empty() { this.id = 0; } public Player(int id) { this.id = id; } public ShouldNotReachException() { super(\"This branch should not be reached.\"); }",
        "label": "P"
    },
    "2617": {
        "dataset": "COMP 3021",
        "project": "hcloaf",
        "bug_id": "37",
        "T": "void testGetUndoUnlimited() { final var gameState = new GameState(TestHelper.parseGameMap(\"\"\" -1 ###### #.Aa@# #..a@# ###### \"\"\" )); }",
        "C": "public GameState(@NotNull GameMap map) { // when GameState is first created // TODO: done currentMap = new GameMap(map); // create an instance of GameMap undoQuotaLeft = currentMap.getUndoLimit(); initialMap = map; nextMaptoSave = initialMap; // ref link }",
        "label": "P"
    },
    "2618": {
        "dataset": "COMP 3021",
        "project": "hcloaf",
        "bug_id": "38",
        "T": "void testMapCopying() { final var maxWidth = 2333; final var maxHeight = 2333; final var random = new Random(); final var randomEntities = Stream.generate(() -> Position.of(random.nextInt(maxWidth), random.nextInt(maxHeight))) .distinct() .limit(100) .collect(Collectors.toMap(Function.identity(), it -> generateEntity(it.x()))); final var firstPos = randomEntities.keySet().stream().findFirst(); final var gameMap = new GameMap(maxWidth, maxHeight, Collections.singleton(firstPos.get()), 233); randomEntities.forEach(gameMap::putEntity); final var gameState = new GameState(gameMap); final var randomPosition = randomEntities.keySet().stream().findAny(); gameMap.putEntity(randomPosition.get(), new Empty()); randomEntities.forEach((p, e) -> assertEquals(e, gameState.getEntity(p))); }",
        "C": "public static @NotNull Position of(int x, int y) { return new Position(x, y); } public GameMap(int maxWidth, int maxHeight, Set<Position> destinations, int undoLimit) { // TODO: done this.maxWidth = maxWidth; this.maxHeight = maxHeight; this.destinations = Collections.unmodifiableSet(destinations) ; // finalize the destinations set this.undoLimit = undoLimit; } public GameState(@NotNull GameMap map) { // when GameState is first created // TODO: done currentMap = new GameMap(map); // create an instance of GameMap undoQuotaLeft = currentMap.getUndoLimit(); initialMap = map; nextMaptoSave = initialMap; // ref link } public void putEntity(Position position, Entity entity) { // TODO: done map[position.y()][position.x()] = entity; } public Empty() { this.id = 0; } public @Nullable Entity getEntity(@NotNull Position position) { // TODO: done return currentMap.getEntity(position); } /** * Get all box destination positions as a set in the game map. * This should be the same as that in {@link GameMap}",
        "label": "F"
    },
    "2619": {
        "dataset": "COMP 3021",
        "project": "hcloaf",
        "bug_id": "39",
        "T": "void testUndoWhenThereIsMoveButNoCheckpoint() { final var gameState = new GameState(TestHelper.parseGameMap(\"\"\" 233 ###### #A.a@# #..a@# ###### \"\"\" )); gameState.move(Position.of(1, 1), Position.of(2, 1)); gameState.undo(); }",
        "C": "public GameState(@NotNull GameMap map) { // when GameState is first created // TODO: done currentMap = new GameMap(map); // create an instance of GameMap undoQuotaLeft = currentMap.getUndoLimit(); initialMap = map; nextMaptoSave = initialMap; // ref link } public void move(Position from, Position to) { // TODO: done Entity origE = getEntity(from); // get the Entity in those positions // get a copy of Entity in new position, // so that it won't be affected by the coming changing reference Entity newE = getEntity(to).copy(); // switch Entity in those positions currentMap.putEntity(to, origE); // overwrite origE to new postion currentMap.putEntity(from, newE); // overwrite newE to old postion } /** * Record a checkpoint of the game state, including: * <li>All current positions of entities in the game map.</li> * <li>Current undo quota</li> * <p> * Checkpoint is used in {@link GameState#undo()} public static @NotNull Position of(int x, int y) { return new Position(x, y); } public void undo() { // TODO: done if (checkpoints.empty()){ // If there is no checkpoint recorded System.out.println(\"There's no checkpoint recorded, revert to initial game state.\"); currentMap = new GameMap(initialMap); // update current map back to initial map nextMaptoSave = initialMap; // link last box map back to initial map } else{ //int lastIndex = checkpoints.size()-1; //currentMap = new GameMap(checkpoints.get(lastIndex)); //checkpoints.remove(lastIndex); currentMap = checkpoints.pop(); // update current map back to checkpoint nextMaptoSave = new GameMap(currentMap); // update nextMaptoSave if (undoQuotaLeft.isPresent()){ // if quota is limited, decrease by 1 int updatedQuota = undoQuotaLeft.get() - 1; undoQuotaLeft = Optional.of(updatedQuota); } } } /** * Get the maximum width of the game map. * This should be the same as that in {@link GameMap}",
        "label": "P"
    },
    "2620": {
        "dataset": "COMP 3021",
        "project": "hcloaf",
        "bug_id": "40",
        "T": "void testGameExit() { final var gameState = mock(GameState.class); final var inputEngine = mock(TerminalInputEngine.class); final var renderingEngine = mock(TerminalRenderingEngine.class); when(gameState.isWin()).thenReturn(false, false, false); when(inputEngine.fetchAction()) .thenReturn(new InvalidInput(0, \"\"), new InvalidInput(0, \"\"), new Exit(0)); final var game = new TerminalSokobanGame(gameState, inputEngine, renderingEngine); game.run(); verify(renderingEngine, atLeastOnce()).message(any()); }",
        "C": "public InvalidInput(int initiator, @NotNull String message) { super(initiator); this.message = message; } public Exit(int initiator) { super(initiator); } public TerminalSokobanGame(GameState gameState, TerminalInputEngine inputEngine, TerminalRenderingEngine renderingEngine) { super(gameState); this.inputEngine = inputEngine; this.renderingEngine = renderingEngine; // TODO: done // Check the number of players if (this.state.getAllPlayerPositions().size() > 2){ throw new IllegalArgumentException(\"There're more than 2 players in the map\"); } } public void run() { //System.out.println(\"Running\"); }",
        "label": "P"
    },
    "2621": {
        "dataset": "COMP 3021",
        "project": "hcloaf",
        "bug_id": "41",
        "T": "void testGameWin() { final var gameState = mock(GameState.class); final var inputEngine = mock(TerminalInputEngine.class); final var renderingEngine = mock(TerminalRenderingEngine.class); when(gameState.isWin()).thenReturn(false, false, false, true); when(inputEngine.fetchAction()) .thenReturn(new InvalidInput(0, \"\")); final var game = new TerminalSokobanGame(gameState, inputEngine, renderingEngine); game.run(); verify(gameState, atLeastOnce()).isWin(); verify(renderingEngine, atLeastOnce()).message(any()); }",
        "C": "public InvalidInput(int initiator, @NotNull String message) { super(initiator); this.message = message; } public TerminalSokobanGame(GameState gameState, TerminalInputEngine inputEngine, TerminalRenderingEngine renderingEngine) { super(gameState); this.inputEngine = inputEngine; this.renderingEngine = renderingEngine; // TODO: done // Check the number of players if (this.state.getAllPlayerPositions().size() > 2){ throw new IllegalArgumentException(\"There're more than 2 players in the map\"); } } public void run() { //System.out.println(\"Running\"); }",
        "label": "P"
    },
    "2622": {
        "dataset": "COMP 3021",
        "project": "hcloaf",
        "bug_id": "42",
        "T": "void testMoreThanTwoPlayers() { final var gameState = mock(GameState.class); final var inputEngine = mock(TerminalInputEngine.class); final var renderingEngine = mock(TerminalRenderingEngine.class); when(gameState.getAllPlayerPositions()).thenReturn(new HashSet<>(Arrays.asList(Position.of(1, 1), Position.of(1, 2), Position.of(1, 3)))); }",
        "C": "public static @NotNull Position of(int x, int y) { return new Position(x, y); }",
        "label": "P"
    },
    "2623": {
        "dataset": "COMP 3021",
        "project": "kyuanab",
        "bug_id": "0",
        "T": "void moveUp() { Position.of(233, 232), new Move.Up(-1).nextPosition(pos) ); }",
        "C": "public static Move.Up moveUp(int id){ if (Objects.isNull(MOVE_UP_OBJS[id])) MOVE_UP_OBJS[id] = new Move.Up(id); return MOVE_UP_OBJS[id]; } public static @NotNull Position of(int x, int y) { return new Position(x, y); } public static Move.Up moveUp(int id){ if (Objects.isNull(MOVE_UP_OBJS[id])) MOVE_UP_OBJS[id] = new Move.Up(id); return MOVE_UP_OBJS[id]; }",
        "label": "P"
    },
    "2624": {
        "dataset": "COMP 3021",
        "project": "kyuanab",
        "bug_id": "1",
        "T": "void moveDown() { Position.of(233, 234), new Move.Down(-1).nextPosition(pos) ); }",
        "C": "public static Move.Down moveDown(int id){ if (Objects.isNull(MOVE_DOWN_OBJS[id])) MOVE_DOWN_OBJS[id] = new Move.Down(id); return MOVE_DOWN_OBJS[id]; } public static @NotNull Position of(int x, int y) { return new Position(x, y); } public static Move.Down moveDown(int id){ if (Objects.isNull(MOVE_DOWN_OBJS[id])) MOVE_DOWN_OBJS[id] = new Move.Down(id); return MOVE_DOWN_OBJS[id]; }",
        "label": "P"
    },
    "2625": {
        "dataset": "COMP 3021",
        "project": "kyuanab",
        "bug_id": "2",
        "T": "void moveRight() { Position.of(234, 233), new Move.Right(-1).nextPosition(pos) ); }",
        "C": "public static Move.Right moveRight(int id){ if (Objects.isNull(MOVE_RIGHT_OBJS[id])) MOVE_RIGHT_OBJS[id] = new Move.Right(id); return MOVE_RIGHT_OBJS[id]; } public static @NotNull Position of(int x, int y) { return new Position(x, y); } public static Move.Right moveRight(int id){ if (Objects.isNull(MOVE_RIGHT_OBJS[id])) MOVE_RIGHT_OBJS[id] = new Move.Right(id); return MOVE_RIGHT_OBJS[id]; }",
        "label": "P"
    },
    "2626": {
        "dataset": "COMP 3021",
        "project": "kyuanab",
        "bug_id": "3",
        "T": "void testExceedingUndoQuota() { final var gameState = mock(GameState.class); when(gameState.getPlayerPositionById(anyInt())).thenReturn(Position.of(0, 0)); when(gameState.getUndoQuota()).thenReturn(Optional.of(0)); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Undo(0)); }",
        "C": "public Undo(int initiator) { super(initiator); }",
        "label": "F"
    },
    "2627": {
        "dataset": "COMP 3021",
        "project": "kyuanab",
        "bug_id": "4",
        "T": "void testExit() { final var gameState = mock(GameState.class); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Exit(0)); }",
        "C": "public Exit(int initiator) { super(initiator); }",
        "label": "P"
    },
    "2628": {
        "dataset": "COMP 3021",
        "project": "kyuanab",
        "bug_id": "5",
        "T": "void testUndoUnlimited() { final var gameState = mock(GameState.class); when(gameState.getPlayerPositionById(anyInt())).thenReturn(Position.of(0, 0)); when(gameState.getUndoQuota()).thenReturn(Optional.empty()); final var game = new SokobanGameForTesting(gameState); for (int i = 0; i < 10000; i++) { final var result = game.feedActionForProcessing(new Undo(0)); } verify(gameState, times(10000)).undo(); }",
        "C": "public TerminalRenderingEngine(PrintStream outputSteam) { this.outputSteam = outputSteam; } public Undo(int initiator) { super(initiator); }",
        "label": "F"
    },
    "2629": {
        "dataset": "COMP 3021",
        "project": "kyuanab",
        "bug_id": "6",
        "T": "void testPushOtherPlayerBox() { String mapText = \"\"\" 233 ###### #AB.@# #b.a.# #@...# ###### \"\"\"; final var testMap = TestHelper.parseGameMap(mapText); final var gameState = spy(new GameState(testMap)); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Move.Down(0)); verify(gameState, never()).move(any(), any()); }",
        "C": "public GameState(@NotNull GameMap map) { gmMp = map; checkpoint(); } public static Move.Down moveDown(int id){ if (Objects.isNull(MOVE_DOWN_OBJS[id])) MOVE_DOWN_OBJS[id] = new Move.Down(id); return MOVE_DOWN_OBJS[id]; }",
        "label": "P"
    },
    "2630": {
        "dataset": "COMP 3021",
        "project": "kyuanab",
        "bug_id": "7",
        "T": "void testMoveNonExistingPlayer() { String mapText = \"\"\" 233 ###### #A..@# #a...# ##...# ###### \"\"\"; final var testMap = TestHelper.parseGameMap(mapText); final var gameState = spy(new GameState(testMap)); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Move.Down(23)); }",
        "C": "public GameState(@NotNull GameMap map) { gmMp = map; checkpoint(); } public static Move.Down moveDown(int id){ if (Objects.isNull(MOVE_DOWN_OBJS[id])) MOVE_DOWN_OBJS[id] = new Move.Down(id); return MOVE_DOWN_OBJS[id]; }",
        "label": "P"
    },
    "2631": {
        "dataset": "COMP 3021",
        "project": "kyuanab",
        "bug_id": "8",
        "T": "void testCheckpointWhenNeed() { final var gameState = spy(new GameState(TestHelper.parseGameMap(\"\"\" 233 ###### #.Aa@# #..a@# ###### \"\"\" ))); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Move.Right(0)); verify(gameState, times(1)).checkpoint(); }",
        "C": "public GameState(@NotNull GameMap map) { gmMp = map; checkpoint(); } public static Move.Right moveRight(int id){ if (Objects.isNull(MOVE_RIGHT_OBJS[id])) MOVE_RIGHT_OBJS[id] = new Move.Right(id); return MOVE_RIGHT_OBJS[id]; }",
        "label": "P"
    },
    "2632": {
        "dataset": "COMP 3021",
        "project": "kyuanab",
        "bug_id": "9",
        "T": "void testPushBoxAgainstWall() { String mapText = \"\"\" 233 ###### #A..@# #a...# ##...# ###### \"\"\"; final var testMap = TestHelper.parseGameMap(mapText); final var gameState = spy(new GameState(testMap)); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Move.Down(0)); verify(gameState, never()).move(any(), any()); }",
        "C": "public GameState(@NotNull GameMap map) { gmMp = map; checkpoint(); } public static Move.Down moveDown(int id){ if (Objects.isNull(MOVE_DOWN_OBJS[id])) MOVE_DOWN_OBJS[id] = new Move.Down(id); return MOVE_DOWN_OBJS[id]; }",
        "label": "P"
    },
    "2633": {
        "dataset": "COMP 3021",
        "project": "kyuanab",
        "bug_id": "10",
        "T": "void testCheckpointWhenNotNeed() { final var gameState = spy(new GameState(TestHelper.parseGameMap(\"\"\" 233 ###### #A.a@# #..a@# ###### \"\"\" ))); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Move.Right(0)); verify(gameState, never()).checkpoint(); } private static class SokobanGameForTesting extends AbstractSokobanGame { protected SokobanGameForTesting(GameState gameState) { super(gameState); } @Override public void run() { } public ActionResult feedActionForProcessing(Action action) { return processAction(action); } }",
        "C": "public GameState(@NotNull GameMap map) { gmMp = map; checkpoint(); } public static Move.Right moveRight(int id){ if (Objects.isNull(MOVE_RIGHT_OBJS[id])) MOVE_RIGHT_OBJS[id] = new Move.Right(id); return MOVE_RIGHT_OBJS[id]; } public void run() { renderingEngine.message(StringResources.GAME_READY_MESSAGE); // System.out.println(\"initial check point saved\"); for (; ; ) { // System.out.println(\"running\"); renderingEngine.render(state); if (state.isWin()) { renderingEngine.message(StringResources.GAME_EXIT_MESSAGE); renderingEngine.message(StringResources.WIN_MESSAGE); break; } if (lastAction instanceof Exit) { renderingEngine.message(StringResources.GAME_EXIT_MESSAGE); break; } renderingEngine.message( state.getUndoQuota().map( (Function<Integer, String>) i -> String.format(StringResources.UNDO_QUOTA_TEMPLATE, i) ).orElse(StringResources.UNDO_QUOTA_UNLIMITED) ); renderingEngine.message(StringResources.RENDER_DELIMINATER); if (processAction(inputEngine.fetchAction()) instanceof ActionResult.Failed f) renderingEngine.message(f.getReason()); } } protected ActionResult processAction(@NotNull Action action) { lastAction = action; return switch (action){ case Move m -> state.movePlayer(m); case Undo u -> state.performUndo(u); case InvalidInput i -> new ActionResult.Failed(i, i.getMessage()); case Exit e -> new ActionResult.Success(e); }; }",
        "label": "P"
    },
    "2634": {
        "dataset": "COMP 3021",
        "project": "kyuanab",
        "bug_id": "11",
        "T": "void testHitAnotherPlayer() { String mapText = \"\"\" 233 ###### #A..@# #B...# #ab.@# ###### \"\"\"; final var testMap = TestHelper.parseGameMap(mapText); final var gameState = spy(new GameState(testMap)); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Move.Down(0)); verify(gameState, never()).move(any(), any()); }",
        "C": "public GameState(@NotNull GameMap map) { gmMp = map; checkpoint(); } public static Move.Down moveDown(int id){ if (Objects.isNull(MOVE_DOWN_OBJS[id])) MOVE_DOWN_OBJS[id] = new Move.Down(id); return MOVE_DOWN_OBJS[id]; }",
        "label": "P"
    },
    "2635": {
        "dataset": "COMP 3021",
        "project": "kyuanab",
        "bug_id": "12",
        "T": "void testUndoWithinQuota() { final var gameState = mock(GameState.class); when(gameState.getPlayerPositionById(anyInt())).thenReturn(Position.of(0, 0)); when(gameState.getUndoQuota()).thenReturn(Optional.of(1)); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Undo(0)); verify(gameState, times(1)).undo(); }",
        "C": "public Undo(int initiator) { super(initiator); }",
        "label": "F"
    },
    "2636": {
        "dataset": "COMP 3021",
        "project": "kyuanab",
        "bug_id": "13",
        "T": "void testInvalidInput() { final var game = new SokobanGameForTesting(mock(GameState.class)); final var message = String.valueOf(new Random().nextLong()); final var action = new InvalidInput(-1, message); final var result = game.feedActionForProcessing(action); }",
        "C": "public InvalidInput(int initiator, @NotNull String message) { super(initiator); this.message = message; }",
        "label": "P"
    },
    "2637": {
        "dataset": "COMP 3021",
        "project": "kyuanab",
        "bug_id": "14",
        "T": "void testUndoLimitParsing() { final var gameMap = TestHelper.parseGameMap(rectangularMap); }",
        "C": "",
        "label": "P"
    },
    "2638": {
        "dataset": "COMP 3021",
        "project": "kyuanab",
        "bug_id": "15",
        "T": "void testWidthForNonRectangularMap() { final var gameMap = TestHelper.parseGameMap(nonRectangularMap); }",
        "C": "",
        "label": "P"
    },
    "2639": {
        "dataset": "COMP 3021",
        "project": "kyuanab",
        "bug_id": "16",
        "T": "void testTwoPlayersMap() { final var twoPlayersMap = \"\"\" 233 ###### #A..@# #..B@# #....# #.a..# #..b.# ###### \"\"\"; final var gameMap = TestHelper.parseGameMap(twoPlayersMap); final var playerIds = gameMap.getPlayerIds(); final var expectedIds = new HashSet<Integer>(); expectedIds.add(0); expectedIds.add(1); }",
        "C": "public Set<Integer> getPlayerIds() { return playerPos.keySet(); }",
        "label": "P"
    },
    "2640": {
        "dataset": "COMP 3021",
        "project": "kyuanab",
        "bug_id": "17",
        "T": "void testMapWithoutPlayer() { final var invalidMap = \"\"\" 233 ### #.# ### \"\"\"; } // @Tag(TestKind.HIDDEN) // @Test // void testUnmatchedPlayersAndBoxes() { // final var invalidMap = \"\"\" // 233 // ###### // #A..@# // #...@# // #a.b@# // #.a.@# // #..a.# // ###### // \"\"\"; // assertThrowsExactly(IllegalArgumentException.class, () -> TestHelper.parseGameMap(invalidMap)); // }",
        "C": "public TerminalRenderingEngine(PrintStream outputSteam) { this.outputSteam = outputSteam; }",
        "label": "P"
    },
    "2641": {
        "dataset": "COMP 3021",
        "project": "kyuanab",
        "bug_id": "18",
        "T": "void testManyPlayersMap() { final var manyPlayersMap = \"\"\" 233 ###### #A.P@@# #vCB@@# #.cpD@# #Ga.d@# #g.bV@# ###### \"\"\"; final var gameMap = TestHelper.parseGameMap(manyPlayersMap); final var playerIds = gameMap.getPlayerIds(); final var expectedIds = new HashSet<>(Arrays.asList( 0, 'P' - 'A', 'C' - 'A', 'B' - 'A', 'D' - 'A', 'G' - 'A', 'V' - 'A' )); }",
        "C": "public Set<Integer> getPlayerIds() { return playerPos.keySet(); }",
        "label": "P"
    },
    "2642": {
        "dataset": "COMP 3021",
        "project": "kyuanab",
        "bug_id": "19",
        "T": "void testHeightForNonRectangularMap() { final var gameMap = TestHelper.parseGameMap(nonRectangularMap); }",
        "C": "",
        "label": "P"
    },
    "2643": {
        "dataset": "COMP 3021",
        "project": "kyuanab",
        "bug_id": "20",
        "T": "void testDuplicatedPlayers() { final var invalidMap = \"\"\" 233 ###### #A..@# #..A@# #....# #.a..# #..b.# ###### \"\"\"; }",
        "C": "",
        "label": "P"
    },
    "2644": {
        "dataset": "COMP 3021",
        "project": "kyuanab",
        "bug_id": "21",
        "T": "void testParseMapWithoutUndoLimit() { final var invalidMap = String.join(\"\\n\", rectangularMap.lines().skip(1).toList()); }",
        "C": "",
        "label": "P"
    },
    "2645": {
        "dataset": "COMP 3021",
        "project": "kyuanab",
        "bug_id": "22",
        "T": "void testInsufficientDestinations() { final var invalidMap = \"\"\" 233 ###### #A..@# #...@# #a...# #.a..# #..a.# ###### \"\"\"; }",
        "C": "",
        "label": "P"
    },
    "2646": {
        "dataset": "COMP 3021",
        "project": "kyuanab",
        "bug_id": "23",
        "T": "void testSuperLargeMap() { try { new GameMap(Integer.MAX_VALUE, Integer.MAX_VALUE, Collections.emptySet(), 0); } catch (OutOfMemoryError e) { throw new RuntimeException(e); } }); }",
        "C": "public GameMap(int maxWidth, int maxHeight, Set<Position> destinations, int undoLimit) { this(maxWidth, maxHeight); dests = destinations; undoLim = undoLimit; } public TerminalRenderingEngine(PrintStream outputSteam) { this.outputSteam = outputSteam; }",
        "label": "F"
    },
    "2647": {
        "dataset": "COMP 3021",
        "project": "kyuanab",
        "bug_id": "24",
        "T": "void testInvalidUndoLimit() { final var invalidMap = \"\"\" -233 ###### #A..@# #...@# #a.b@# #.a.@# #..a.# ###### \"\"\"; }",
        "C": "",
        "label": "P"
    },
    "2648": {
        "dataset": "COMP 3021",
        "project": "kyuanab",
        "bug_id": "25",
        "T": "void testEmptyMap() { final var invalidMap = \"\"; }",
        "C": "",
        "label": "P"
    },
    "2649": {
        "dataset": "COMP 3021",
        "project": "kyuanab",
        "bug_id": "26",
        "T": "void testMove(String input, String name, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); } private InputStream fixValueStream(String content) { final var bytes = content.getBytes(StandardCharsets.UTF_8); return new ByteArrayInputStream(bytes); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { return switch(terminalScanner.nextLine().toLowerCase()) { case \"a\" -> Move.moveLeft(0); case \"s\" -> Move.moveDown(0); case \"w\" -> Move.moveUp(0); case \"d\" -> Move.moveRight(0); case \"h\" -> Move.moveLeft(1); case \"j\" -> Move.moveDown(1); case \"k\" -> Move.moveUp(1); case \"l\" -> Move.moveRight(1); case \"u\" -> Undo.get(0); case String s && s.equals(StringResources.EXIT_COMMAND_TEXT) -> new Exit(0); default -> new InvalidInput(0, StringResources.INVALID_INPUT_MESSAGE); }; }",
        "label": "P"
    },
    "2650": {
        "dataset": "COMP 3021",
        "project": "kyuanab",
        "bug_id": "27",
        "T": "void testMove(String input, String name, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); } private InputStream fixValueStream(String content) { final var bytes = content.getBytes(StandardCharsets.UTF_8); return new ByteArrayInputStream(bytes); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { return switch(terminalScanner.nextLine().toLowerCase()) { case \"a\" -> Move.moveLeft(0); case \"s\" -> Move.moveDown(0); case \"w\" -> Move.moveUp(0); case \"d\" -> Move.moveRight(0); case \"h\" -> Move.moveLeft(1); case \"j\" -> Move.moveDown(1); case \"k\" -> Move.moveUp(1); case \"l\" -> Move.moveRight(1); case \"u\" -> Undo.get(0); case String s && s.equals(StringResources.EXIT_COMMAND_TEXT) -> new Exit(0); default -> new InvalidInput(0, StringResources.INVALID_INPUT_MESSAGE); }; }",
        "label": "P"
    },
    "2651": {
        "dataset": "COMP 3021",
        "project": "kyuanab",
        "bug_id": "28",
        "T": "void testMove(String input, String name, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); } private InputStream fixValueStream(String content) { final var bytes = content.getBytes(StandardCharsets.UTF_8); return new ByteArrayInputStream(bytes); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { return switch(terminalScanner.nextLine().toLowerCase()) { case \"a\" -> Move.moveLeft(0); case \"s\" -> Move.moveDown(0); case \"w\" -> Move.moveUp(0); case \"d\" -> Move.moveRight(0); case \"h\" -> Move.moveLeft(1); case \"j\" -> Move.moveDown(1); case \"k\" -> Move.moveUp(1); case \"l\" -> Move.moveRight(1); case \"u\" -> Undo.get(0); case String s && s.equals(StringResources.EXIT_COMMAND_TEXT) -> new Exit(0); default -> new InvalidInput(0, StringResources.INVALID_INPUT_MESSAGE); }; }",
        "label": "P"
    },
    "2652": {
        "dataset": "COMP 3021",
        "project": "kyuanab",
        "bug_id": "29",
        "T": "void testMove(String input, String name, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); } private InputStream fixValueStream(String content) { final var bytes = content.getBytes(StandardCharsets.UTF_8); return new ByteArrayInputStream(bytes); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { return switch(terminalScanner.nextLine().toLowerCase()) { case \"a\" -> Move.moveLeft(0); case \"s\" -> Move.moveDown(0); case \"w\" -> Move.moveUp(0); case \"d\" -> Move.moveRight(0); case \"h\" -> Move.moveLeft(1); case \"j\" -> Move.moveDown(1); case \"k\" -> Move.moveUp(1); case \"l\" -> Move.moveRight(1); case \"u\" -> Undo.get(0); case String s && s.equals(StringResources.EXIT_COMMAND_TEXT) -> new Exit(0); default -> new InvalidInput(0, StringResources.INVALID_INPUT_MESSAGE); }; }",
        "label": "P"
    },
    "2653": {
        "dataset": "COMP 3021",
        "project": "kyuanab",
        "bug_id": "30",
        "T": "void testMove(String input, String name, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); } private InputStream fixValueStream(String content) { final var bytes = content.getBytes(StandardCharsets.UTF_8); return new ByteArrayInputStream(bytes); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { return switch(terminalScanner.nextLine().toLowerCase()) { case \"a\" -> Move.moveLeft(0); case \"s\" -> Move.moveDown(0); case \"w\" -> Move.moveUp(0); case \"d\" -> Move.moveRight(0); case \"h\" -> Move.moveLeft(1); case \"j\" -> Move.moveDown(1); case \"k\" -> Move.moveUp(1); case \"l\" -> Move.moveRight(1); case \"u\" -> Undo.get(0); case String s && s.equals(StringResources.EXIT_COMMAND_TEXT) -> new Exit(0); default -> new InvalidInput(0, StringResources.INVALID_INPUT_MESSAGE); }; }",
        "label": "P"
    },
    "2654": {
        "dataset": "COMP 3021",
        "project": "kyuanab",
        "bug_id": "31",
        "T": "void testMove(String input, String name, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); } private InputStream fixValueStream(String content) { final var bytes = content.getBytes(StandardCharsets.UTF_8); return new ByteArrayInputStream(bytes); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { return switch(terminalScanner.nextLine().toLowerCase()) { case \"a\" -> Move.moveLeft(0); case \"s\" -> Move.moveDown(0); case \"w\" -> Move.moveUp(0); case \"d\" -> Move.moveRight(0); case \"h\" -> Move.moveLeft(1); case \"j\" -> Move.moveDown(1); case \"k\" -> Move.moveUp(1); case \"l\" -> Move.moveRight(1); case \"u\" -> Undo.get(0); case String s && s.equals(StringResources.EXIT_COMMAND_TEXT) -> new Exit(0); default -> new InvalidInput(0, StringResources.INVALID_INPUT_MESSAGE); }; }",
        "label": "P"
    },
    "2655": {
        "dataset": "COMP 3021",
        "project": "kyuanab",
        "bug_id": "32",
        "T": "void testMove(String input, String name, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); } private InputStream fixValueStream(String content) { final var bytes = content.getBytes(StandardCharsets.UTF_8); return new ByteArrayInputStream(bytes); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { return switch(terminalScanner.nextLine().toLowerCase()) { case \"a\" -> Move.moveLeft(0); case \"s\" -> Move.moveDown(0); case \"w\" -> Move.moveUp(0); case \"d\" -> Move.moveRight(0); case \"h\" -> Move.moveLeft(1); case \"j\" -> Move.moveDown(1); case \"k\" -> Move.moveUp(1); case \"l\" -> Move.moveRight(1); case \"u\" -> Undo.get(0); case String s && s.equals(StringResources.EXIT_COMMAND_TEXT) -> new Exit(0); default -> new InvalidInput(0, StringResources.INVALID_INPUT_MESSAGE); }; }",
        "label": "P"
    },
    "2656": {
        "dataset": "COMP 3021",
        "project": "kyuanab",
        "bug_id": "33",
        "T": "void testMove(String input, String name, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); } private InputStream fixValueStream(String content) { final var bytes = content.getBytes(StandardCharsets.UTF_8); return new ByteArrayInputStream(bytes); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { return switch(terminalScanner.nextLine().toLowerCase()) { case \"a\" -> Move.moveLeft(0); case \"s\" -> Move.moveDown(0); case \"w\" -> Move.moveUp(0); case \"d\" -> Move.moveRight(0); case \"h\" -> Move.moveLeft(1); case \"j\" -> Move.moveDown(1); case \"k\" -> Move.moveUp(1); case \"l\" -> Move.moveRight(1); case \"u\" -> Undo.get(0); case String s && s.equals(StringResources.EXIT_COMMAND_TEXT) -> new Exit(0); default -> new InvalidInput(0, StringResources.INVALID_INPUT_MESSAGE); }; }",
        "label": "P"
    },
    "2657": {
        "dataset": "COMP 3021",
        "project": "kyuanab",
        "bug_id": "34",
        "T": "void testUndo(String input, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { return switch(terminalScanner.nextLine().toLowerCase()) { case \"a\" -> Move.moveLeft(0); case \"s\" -> Move.moveDown(0); case \"w\" -> Move.moveUp(0); case \"d\" -> Move.moveRight(0); case \"h\" -> Move.moveLeft(1); case \"j\" -> Move.moveDown(1); case \"k\" -> Move.moveUp(1); case \"l\" -> Move.moveRight(1); case \"u\" -> Undo.get(0); case String s && s.equals(StringResources.EXIT_COMMAND_TEXT) -> new Exit(0); default -> new InvalidInput(0, StringResources.INVALID_INPUT_MESSAGE); }; }",
        "label": "P"
    },
    "2658": {
        "dataset": "COMP 3021",
        "project": "kyuanab",
        "bug_id": "35",
        "T": "void testInvalidInput() { final var inputStream = fixValueStream(\"blah blah\"); final var inputEngine = new TerminalInputEngine(inputStream); final var action = inputEngine.fetchAction(); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { return switch(terminalScanner.nextLine().toLowerCase()) { case \"a\" -> Move.moveLeft(0); case \"s\" -> Move.moveDown(0); case \"w\" -> Move.moveUp(0); case \"d\" -> Move.moveRight(0); case \"h\" -> Move.moveLeft(1); case \"j\" -> Move.moveDown(1); case \"k\" -> Move.moveUp(1); case \"l\" -> Move.moveRight(1); case \"u\" -> Undo.get(0); case String s && s.equals(StringResources.EXIT_COMMAND_TEXT) -> new Exit(0); default -> new InvalidInput(0, StringResources.INVALID_INPUT_MESSAGE); }; }",
        "label": "P"
    },
    "2659": {
        "dataset": "COMP 3021",
        "project": "kyuanab",
        "bug_id": "36",
        "T": "void testUndoWhenThereIsNoMove() { final var gameState = new GameState(TestHelper.parseGameMap(\"\"\" 233 ###### #A.a@# #..a@# ###### \"\"\" )); gameState.undo(); } private Entity generateEntity(int key) { return switch (key % 4) { case 0 -> new Box(0); case 1 -> new Empty(); case 2 -> new Player(0); case 3 -> new Wall(); default -> throw new ShouldNotReachException(); }; }",
        "C": "public GameState(@NotNull GameMap map) { gmMp = map; checkpoint(); } public void undo() { // System.out.println(\"stored checkpoints: \"); // checkPoints.forEach(cp -> System.out.printf(\"%h@%s\\n\", cp.hashCode(), cp.toString())); if (checkPoints.size() == 1) { gmMp.revert(checkPoints.peek()); } else { checkPoints.pop(); gmMp.revert(checkPoints.peek()); gmMp.decreUndoLim(); } // System.out.println(\"rest checkpoints: \"); // checkPoints.forEach(cp -> System.out.printf(\"%h@%s\\n\", cp.hashCode(), cp.toString())); } ActionResult performUndo(Undo u) { if (gmMp.getUndoLimit().orElse(1) > 0) { undo(); return new ActionResult.Success(u); } else return new ActionResult.Failed(u, StringResources.UNDO_QUOTA_RUN_OUT); } /** * Get the maximum width of the game map. * This should be the same as that in {@link GameMap} public TerminalRenderingEngine(PrintStream outputSteam) { this.outputSteam = outputSteam; } public Box(int playerId) { this.playerId = playerId; } public Player(int id) { this.id = id; } public ShouldNotReachException() { super(\"This branch should not be reached.\"); }",
        "label": "P"
    },
    "2660": {
        "dataset": "COMP 3021",
        "project": "kyuanab",
        "bug_id": "37",
        "T": "void testGetUndoUnlimited() { final var gameState = new GameState(TestHelper.parseGameMap(\"\"\" -1 ###### #.Aa@# #..a@# ###### \"\"\" )); }",
        "C": "public GameState(@NotNull GameMap map) { gmMp = map; checkpoint(); }",
        "label": "P"
    },
    "2661": {
        "dataset": "COMP 3021",
        "project": "kyuanab",
        "bug_id": "38",
        "T": "void testMapCopying() { final var maxWidth = 2333; final var maxHeight = 2333; final var random = new Random(); final var randomEntities = Stream.generate(() -> Position.of(random.nextInt(maxWidth), random.nextInt(maxHeight))) .distinct() .limit(100) .collect(Collectors.toMap(Function.identity(), it -> generateEntity(it.x()))); final var firstPos = randomEntities.keySet().stream().findFirst(); final var gameMap = new GameMap(maxWidth, maxHeight, Collections.singleton(firstPos.get()), 233); randomEntities.forEach(gameMap::putEntity); final var gameState = new GameState(gameMap); final var randomPosition = randomEntities.keySet().stream().findAny(); gameMap.putEntity(randomPosition.get(), new Empty()); randomEntities.forEach((p, e) -> assertEquals(e, gameState.getEntity(p))); }",
        "C": "public static @NotNull Position of(int x, int y) { return new Position(x, y); } public GameMap(int maxWidth, int maxHeight, Set<Position> destinations, int undoLimit) { this(maxWidth, maxHeight); dests = destinations; undoLim = undoLimit; } public GameState(@NotNull GameMap map) { gmMp = map; checkpoint(); } public void putEntity(Position position, Entity entity){ board[position.y()][position.x()] = entity; recomputeSets(); } void recomputeSets(){ playerPos.clear(); boxPos.clear(); for (int i = 0; i < board.length; i++) { for (int j = 0; j < board[i].length; j++) { var pos = Position.of(j, i); switch (board[i][j]){ case null -> {} case Player p -> playerPos.put(p.getId(), pos); case Box b -> boxPos.put(b, pos); default -> {} } } } } public @Nullable Entity getEntity(@NotNull Position position) { return gmMp.getEntity(position); } /** * Get all box destination positions as a set in the game map. * This should be the same as that in {@link GameMap}",
        "label": "F"
    },
    "2662": {
        "dataset": "COMP 3021",
        "project": "kyuanab",
        "bug_id": "39",
        "T": "void testUndoWhenThereIsMoveButNoCheckpoint() { final var gameState = new GameState(TestHelper.parseGameMap(\"\"\" 233 ###### #A.a@# #..a@# ###### \"\"\" )); gameState.move(Position.of(1, 1), Position.of(2, 1)); gameState.undo(); }",
        "C": "public GameState(@NotNull GameMap map) { gmMp = map; checkpoint(); } public void move(Position from, Position to) { gmMp.performMove(from, to); } ActionResult movePlayer(Move playerMove) { var playerCrtPos = getPlayerPositionById(playerMove.getInitiator()); if (Objects.isNull(playerCrtPos)) return new ActionResult.Failed(playerMove, StringResources.PLAYER_NOT_FOUND); var targetPos = playerMove.nextPosition(playerCrtPos); assert (gmMp.isInBound(targetPos)); switch (getEntity(targetPos)) { case Empty __ -> { move(playerCrtPos, targetPos); return new ActionResult.Success(playerMove); } case Wall __ -> { return new ActionResult.Failed(playerMove, StringResources.MOVE_HIT_WALL); } case Player __ -> { return new ActionResult.Failed(playerMove, StringResources.MOVE_HIT_PLAYER); } case Box b -> { if (b.getPlayerId() != playerMove.getInitiator()) return new ActionResult.Failed(playerMove, StringResources.MOVE_HIT_OTHER_BOX); var boxTarget = playerMove.nextPosition(targetPos); // System.out.println(\"target pos: \" + boxTarget); if (!gmMp.isInBound(boxTarget) || !(getEntity(boxTarget) instanceof Empty)) { return new ActionResult.Failed(playerMove, StringResources.MOVE_BOX_FAILED); } move(targetPos, boxTarget); move(playerCrtPos, targetPos); checkpoint(); return new ActionResult.Success(playerMove); } } throw new ShouldNotReachException(); } /** * Record a checkpoint of the game state, including: * <li>All current positions of entities in the game map.</li> * <li>Current undo quota</li> * <p> * Checkpoint is used in {@link GameState#undo()} public static @NotNull Position of(int x, int y) { return new Position(x, y); } public void undo() { // System.out.println(\"stored checkpoints: \"); // checkPoints.forEach(cp -> System.out.printf(\"%h@%s\\n\", cp.hashCode(), cp.toString())); if (checkPoints.size() == 1) { gmMp.revert(checkPoints.peek()); } else { checkPoints.pop(); gmMp.revert(checkPoints.peek()); gmMp.decreUndoLim(); } // System.out.println(\"rest checkpoints: \"); // checkPoints.forEach(cp -> System.out.printf(\"%h@%s\\n\", cp.hashCode(), cp.toString())); } ActionResult performUndo(Undo u) { if (gmMp.getUndoLimit().orElse(1) > 0) { undo(); return new ActionResult.Success(u); } else return new ActionResult.Failed(u, StringResources.UNDO_QUOTA_RUN_OUT); } /** * Get the maximum width of the game map. * This should be the same as that in {@link GameMap}",
        "label": "P"
    },
    "2663": {
        "dataset": "COMP 3021",
        "project": "kyuanab",
        "bug_id": "40",
        "T": "void testGameExit() { final var gameState = mock(GameState.class); final var inputEngine = mock(TerminalInputEngine.class); final var renderingEngine = mock(TerminalRenderingEngine.class); when(gameState.isWin()).thenReturn(false, false, false); when(inputEngine.fetchAction()) .thenReturn(new InvalidInput(0, \"\"), new InvalidInput(0, \"\"), new Exit(0)); final var game = new TerminalSokobanGame(gameState, inputEngine, renderingEngine); game.run(); verify(renderingEngine, atLeastOnce()).message(any()); }",
        "C": "public InvalidInput(int initiator, @NotNull String message) { super(initiator); this.message = message; } public Exit(int initiator) { super(initiator); } public TerminalSokobanGame(GameState gameState, TerminalInputEngine inputEngine, TerminalRenderingEngine renderingEngine) { super(gameState); this.inputEngine = inputEngine; this.renderingEngine = renderingEngine; if (gameState.getAllPlayerPositions().size() > 2) throw new IllegalArgumentException(StringResources.PLAYER_EXCEED_LIMIT); } public void run() { renderingEngine.message(StringResources.GAME_READY_MESSAGE); // System.out.println(\"initial check point saved\"); for (; ; ) { // System.out.println(\"running\"); renderingEngine.render(state); if (state.isWin()) { renderingEngine.message(StringResources.GAME_EXIT_MESSAGE); renderingEngine.message(StringResources.WIN_MESSAGE); break; } if (lastAction instanceof Exit) { renderingEngine.message(StringResources.GAME_EXIT_MESSAGE); break; } renderingEngine.message( state.getUndoQuota().map( (Function<Integer, String>) i -> String.format(StringResources.UNDO_QUOTA_TEMPLATE, i) ).orElse(StringResources.UNDO_QUOTA_UNLIMITED) ); renderingEngine.message(StringResources.RENDER_DELIMINATER); if (processAction(inputEngine.fetchAction()) instanceof ActionResult.Failed f) renderingEngine.message(f.getReason()); } }",
        "label": "P"
    },
    "2664": {
        "dataset": "COMP 3021",
        "project": "kyuanab",
        "bug_id": "41",
        "T": "void testGameWin() { final var gameState = mock(GameState.class); final var inputEngine = mock(TerminalInputEngine.class); final var renderingEngine = mock(TerminalRenderingEngine.class); when(gameState.isWin()).thenReturn(false, false, false, true); when(inputEngine.fetchAction()) .thenReturn(new InvalidInput(0, \"\")); final var game = new TerminalSokobanGame(gameState, inputEngine, renderingEngine); game.run(); verify(gameState, atLeastOnce()).isWin(); verify(renderingEngine, atLeastOnce()).message(any()); }",
        "C": "public InvalidInput(int initiator, @NotNull String message) { super(initiator); this.message = message; } public TerminalSokobanGame(GameState gameState, TerminalInputEngine inputEngine, TerminalRenderingEngine renderingEngine) { super(gameState); this.inputEngine = inputEngine; this.renderingEngine = renderingEngine; if (gameState.getAllPlayerPositions().size() > 2) throw new IllegalArgumentException(StringResources.PLAYER_EXCEED_LIMIT); } public void run() { renderingEngine.message(StringResources.GAME_READY_MESSAGE); // System.out.println(\"initial check point saved\"); for (; ; ) { // System.out.println(\"running\"); renderingEngine.render(state); if (state.isWin()) { renderingEngine.message(StringResources.GAME_EXIT_MESSAGE); renderingEngine.message(StringResources.WIN_MESSAGE); break; } if (lastAction instanceof Exit) { renderingEngine.message(StringResources.GAME_EXIT_MESSAGE); break; } renderingEngine.message( state.getUndoQuota().map( (Function<Integer, String>) i -> String.format(StringResources.UNDO_QUOTA_TEMPLATE, i) ).orElse(StringResources.UNDO_QUOTA_UNLIMITED) ); renderingEngine.message(StringResources.RENDER_DELIMINATER); if (processAction(inputEngine.fetchAction()) instanceof ActionResult.Failed f) renderingEngine.message(f.getReason()); } }",
        "label": "P"
    },
    "2665": {
        "dataset": "COMP 3021",
        "project": "kyuanab",
        "bug_id": "42",
        "T": "void testMoreThanTwoPlayers() { final var gameState = mock(GameState.class); final var inputEngine = mock(TerminalInputEngine.class); final var renderingEngine = mock(TerminalRenderingEngine.class); when(gameState.getAllPlayerPositions()).thenReturn(new HashSet<>(Arrays.asList(Position.of(1, 1), Position.of(1, 2), Position.of(1, 3)))); }",
        "C": "public static @NotNull Position of(int x, int y) { return new Position(x, y); }",
        "label": "P"
    },
    "2666": {
        "dataset": "COMP 3021",
        "project": "jlawrance",
        "bug_id": "0",
        "T": "void moveUp() { Position.of(233, 232), new Move.Up(-1).nextPosition(pos) ); }",
        "C": "public static @NotNull Position of(int x, int y) { return new Position(x, y); } public Up(int initiator) { super(initiator); }",
        "label": "P"
    },
    "2667": {
        "dataset": "COMP 3021",
        "project": "jlawrance",
        "bug_id": "1",
        "T": "void moveDown() { Position.of(233, 234), new Move.Down(-1).nextPosition(pos) ); }",
        "C": "public static @NotNull Position of(int x, int y) { return new Position(x, y); } public Down(int initiator) { super(initiator); }",
        "label": "P"
    },
    "2668": {
        "dataset": "COMP 3021",
        "project": "jlawrance",
        "bug_id": "2",
        "T": "void moveRight() { Position.of(234, 233), new Move.Right(-1).nextPosition(pos) ); }",
        "C": "public static @NotNull Position of(int x, int y) { return new Position(x, y); } public Right(int initiator) { super(initiator); }",
        "label": "P"
    },
    "2669": {
        "dataset": "COMP 3021",
        "project": "jlawrance",
        "bug_id": "3",
        "T": "void testExceedingUndoQuota() { final var gameState = mock(GameState.class); when(gameState.getPlayerPositionById(anyInt())).thenReturn(Position.of(0, 0)); when(gameState.getUndoQuota()).thenReturn(Optional.of(0)); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Undo(0)); }",
        "C": "public Undo(int initiator) { super(initiator); }",
        "label": "F"
    },
    "2670": {
        "dataset": "COMP 3021",
        "project": "jlawrance",
        "bug_id": "4",
        "T": "void testExit() { final var gameState = mock(GameState.class); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Exit(0)); }",
        "C": "public Exit(int initiator) { super(initiator); }",
        "label": "F"
    },
    "2671": {
        "dataset": "COMP 3021",
        "project": "jlawrance",
        "bug_id": "5",
        "T": "void testUndoUnlimited() { final var gameState = mock(GameState.class); when(gameState.getPlayerPositionById(anyInt())).thenReturn(Position.of(0, 0)); when(gameState.getUndoQuota()).thenReturn(Optional.empty()); final var game = new SokobanGameForTesting(gameState); for (int i = 0; i < 10000; i++) { final var result = game.feedActionForProcessing(new Undo(0)); } verify(gameState, times(10000)).undo(); }",
        "C": "public MapLevel(int width) { mapLine = new ArrayList<Character>(); entityMap = new ArrayList<Entity>(); for (int i = 0; i < width; i++) { mapLine.add(' '); entityMap.add(new Empty()); } } public Undo(int initiator) { super(initiator); }",
        "label": "F"
    },
    "2672": {
        "dataset": "COMP 3021",
        "project": "jlawrance",
        "bug_id": "6",
        "T": "void testPushOtherPlayerBox() { String mapText = \"\"\" 233 ###### #AB.@# #b.a.# #@...# ###### \"\"\"; final var testMap = TestHelper.parseGameMap(mapText); final var gameState = spy(new GameState(testMap)); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Move.Down(0)); verify(gameState, never()).move(any(), any()); }",
        "C": "public GameState(@NotNull GameMap map) { // TODO stateMap = GameMap.parse(map.generateMapString()); playerPositions = new HashSet<>(); for(Position pos : stateMap.playerLocs){ playerPositions.add(pos); } allMapStates.add(map); allMapStr.add(stateMap.generateMapString()); undoQuota = stateMap.undoLimit; //TestUndo = getUndoQuota(); } public Down(int initiator) { super(initiator); }",
        "label": "P"
    },
    "2673": {
        "dataset": "COMP 3021",
        "project": "jlawrance",
        "bug_id": "7",
        "T": "void testMoveNonExistingPlayer() { String mapText = \"\"\" 233 ###### #A..@# #a...# ##...# ###### \"\"\"; final var testMap = TestHelper.parseGameMap(mapText); final var gameState = spy(new GameState(testMap)); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Move.Down(23)); }",
        "C": "public GameState(@NotNull GameMap map) { // TODO stateMap = GameMap.parse(map.generateMapString()); playerPositions = new HashSet<>(); for(Position pos : stateMap.playerLocs){ playerPositions.add(pos); } allMapStates.add(map); allMapStr.add(stateMap.generateMapString()); undoQuota = stateMap.undoLimit; //TestUndo = getUndoQuota(); } public Down(int initiator) { super(initiator); }",
        "label": "F"
    },
    "2674": {
        "dataset": "COMP 3021",
        "project": "jlawrance",
        "bug_id": "8",
        "T": "void testCheckpointWhenNeed() { final var gameState = spy(new GameState(TestHelper.parseGameMap(\"\"\" 233 ###### #.Aa@# #..a@# ###### \"\"\" ))); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Move.Right(0)); verify(gameState, times(1)).checkpoint(); }",
        "C": "public GameState(@NotNull GameMap map) { // TODO stateMap = GameMap.parse(map.generateMapString()); playerPositions = new HashSet<>(); for(Position pos : stateMap.playerLocs){ playerPositions.add(pos); } allMapStates.add(map); allMapStr.add(stateMap.generateMapString()); undoQuota = stateMap.undoLimit; //TestUndo = getUndoQuota(); } public Right(int initiator) { super(initiator); }",
        "label": "P"
    },
    "2675": {
        "dataset": "COMP 3021",
        "project": "jlawrance",
        "bug_id": "9",
        "T": "void testPushBoxAgainstWall() { String mapText = \"\"\" 233 ###### #A..@# #a...# ##...# ###### \"\"\"; final var testMap = TestHelper.parseGameMap(mapText); final var gameState = spy(new GameState(testMap)); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Move.Down(0)); verify(gameState, never()).move(any(), any()); }",
        "C": "public GameState(@NotNull GameMap map) { // TODO stateMap = GameMap.parse(map.generateMapString()); playerPositions = new HashSet<>(); for(Position pos : stateMap.playerLocs){ playerPositions.add(pos); } allMapStates.add(map); allMapStr.add(stateMap.generateMapString()); undoQuota = stateMap.undoLimit; //TestUndo = getUndoQuota(); } public Down(int initiator) { super(initiator); }",
        "label": "P"
    },
    "2676": {
        "dataset": "COMP 3021",
        "project": "jlawrance",
        "bug_id": "10",
        "T": "void testCheckpointWhenNotNeed() { final var gameState = spy(new GameState(TestHelper.parseGameMap(\"\"\" 233 ###### #A.a@# #..a@# ###### \"\"\" ))); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Move.Right(0)); verify(gameState, never()).checkpoint(); } private static class SokobanGameForTesting extends AbstractSokobanGame { protected SokobanGameForTesting(GameState gameState) { super(gameState); } @Override public void run() { } public ActionResult feedActionForProcessing(Action action) { return processAction(action); } }",
        "C": "public GameState(@NotNull GameMap map) { // TODO stateMap = GameMap.parse(map.generateMapString()); playerPositions = new HashSet<>(); for(Position pos : stateMap.playerLocs){ playerPositions.add(pos); } allMapStates.add(map); allMapStr.add(stateMap.generateMapString()); undoQuota = stateMap.undoLimit; //TestUndo = getUndoQuota(); } public Right(int initiator) { super(initiator); } public void run() { // TODO Action currAction = null; /* renderingEngine.render(super.state); Action currAction = inputEngine.fetchAction(); renderingEngine.render(super.state); if(!super.shouldStop() && !(currAction instanceof Exit)) { while(!super.shouldStop() && !(currAction instanceof Exit)){ super.processAction(currAction); currAction = inputEngine.fetchAction(); renderingEngine.render(super.state); } } */ renderingEngine.message(StringResources.GAME_READY_MESSAGE); renderingEngine.render(state); renderingEngine.message(\"\"); if(!state.getUndoQuota().isEmpty()){ StringBuilder out = new StringBuilder(); out.append(\"Undo Quota : \"); out.append(state.getUndoQuota().get().toString()); renderingEngine.message(out.toString()); }else{ renderingEngine.message(\"Unlimited Undos\"); } while(!super.shouldStop() && !(currAction instanceof Exit)){ currAction = inputEngine.fetchAction(); ActionResult result = super.processAction(currAction); renderingEngine.render(state); if(result instanceof ActionResult.Failed){ renderingEngine.message(((ActionResult.Failed) result).getReason()); } else{ renderingEngine.message(\"\"); } if(!state.getUndoQuota().isEmpty()){ StringBuilder out = new StringBuilder(); out.append(\"Undo Quota : \"); out.append(state.getUndoQuota().get().toString()); renderingEngine.message(out.toString()); }else{ renderingEngine.message(\"Unlimited Undos\"); } if(shouldStop()) { renderingEngine.message(StringResources.WIN_MESSAGE); } if(currAction instanceof Exit) { renderingEngine.message(StringResources.GAME_EXIT_MESSAGE); } } } protected ActionResult processAction(@NotNull Action action) { // TODO ActionResult result = null; int playerID = action.getInitiator(); if (action instanceof Move) { Move moving = null; if (action instanceof Move.Up) { moving = new Move.Up(playerID); } else if (action instanceof Move.Down) { moving = new Move.Down(playerID); } else if (action instanceof Move.Right) { moving = new Move.Right(playerID); } else if (action instanceof Move.Left) { moving = new Move.Left(playerID); } Character nLett = state.stateMap.getChar(moving.nextPosition(state.getPlayerPositionById(playerID))); Position nextPos = moving.nextPosition(state.getPlayerPositionById(playerID)); //There's a box in the next position if (Character.isAlphabetic(nLett) && Character.isLowerCase(nLett)) { boolean notYourBox = GameMap.idToLetter(playerID, false) != nLett; if(notYourBox) { result = new ActionResult.Failed(action, \"Not Your box\"); return result; } Position nextToBoxPosi = moving.nextPosition(nextPos); Character nextToBox = state.stateMap.getChar(nextToBoxPosi); if (nextToBox != '.' && nextToBox != '@') { result = new ActionResult.Failed(action, \"Something is blocking the box\"); } else { state.move(nextPos, nextToBoxPosi); state.move(state.getPlayerPositionById(playerID), nextPos); state.stateMap.setChar(nLett, nextToBoxPosi); state.checkpoint(); result = new ActionResult.Success(action); } } else if (nLett == '#' || (Character.isAlphabetic(nLett) && Character.isUpperCase(nLett))) { //If Player is going to a wall result = new ActionResult.Failed(action, \"Running into a wall/player!\"); } else { //Nothing Blocking state.move(state.getPlayerPositionById(playerID), nextPos); result = new ActionResult.Success(action); } } else if (action instanceof Exit) { result = new ActionResult.Success(action); } else if (action instanceof Undo) { //System.out.print(\"UNDOING\"); if (state.undoQuota != 0) { state.undo(); } result = new ActionResult.Success(action); } else if (action instanceof InvalidInput) { result = new ActionResult.Failed(action, \"Your input is invalid\"); } return result; }",
        "label": "P"
    },
    "2677": {
        "dataset": "COMP 3021",
        "project": "jlawrance",
        "bug_id": "11",
        "T": "void testHitAnotherPlayer() { String mapText = \"\"\" 233 ###### #A..@# #B...# #ab.@# ###### \"\"\"; final var testMap = TestHelper.parseGameMap(mapText); final var gameState = spy(new GameState(testMap)); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Move.Down(0)); verify(gameState, never()).move(any(), any()); }",
        "C": "public GameState(@NotNull GameMap map) { // TODO stateMap = GameMap.parse(map.generateMapString()); playerPositions = new HashSet<>(); for(Position pos : stateMap.playerLocs){ playerPositions.add(pos); } allMapStates.add(map); allMapStr.add(stateMap.generateMapString()); undoQuota = stateMap.undoLimit; //TestUndo = getUndoQuota(); } public Down(int initiator) { super(initiator); }",
        "label": "P"
    },
    "2678": {
        "dataset": "COMP 3021",
        "project": "jlawrance",
        "bug_id": "12",
        "T": "void testUndoWithinQuota() { final var gameState = mock(GameState.class); when(gameState.getPlayerPositionById(anyInt())).thenReturn(Position.of(0, 0)); when(gameState.getUndoQuota()).thenReturn(Optional.of(1)); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Undo(0)); verify(gameState, times(1)).undo(); }",
        "C": "public Undo(int initiator) { super(initiator); }",
        "label": "F"
    },
    "2679": {
        "dataset": "COMP 3021",
        "project": "jlawrance",
        "bug_id": "13",
        "T": "void testInvalidInput() { final var game = new SokobanGameForTesting(mock(GameState.class)); final var message = String.valueOf(new Random().nextLong()); final var action = new InvalidInput(-1, message); final var result = game.feedActionForProcessing(action); }",
        "C": "public InvalidInput(int initiator, @NotNull String message) { super(initiator); this.message = message; }",
        "label": "P"
    },
    "2680": {
        "dataset": "COMP 3021",
        "project": "jlawrance",
        "bug_id": "14",
        "T": "void testUndoLimitParsing() { final var gameMap = TestHelper.parseGameMap(rectangularMap); }",
        "C": "",
        "label": "P"
    },
    "2681": {
        "dataset": "COMP 3021",
        "project": "jlawrance",
        "bug_id": "15",
        "T": "void testWidthForNonRectangularMap() { final var gameMap = TestHelper.parseGameMap(nonRectangularMap); }",
        "C": "",
        "label": "P"
    },
    "2682": {
        "dataset": "COMP 3021",
        "project": "jlawrance",
        "bug_id": "16",
        "T": "void testTwoPlayersMap() { final var twoPlayersMap = \"\"\" 233 ###### #A..@# #..B@# #....# #.a..# #..b.# ###### \"\"\"; final var gameMap = TestHelper.parseGameMap(twoPlayersMap); final var playerIds = gameMap.getPlayerIds(); final var expectedIds = new HashSet<Integer>(); expectedIds.add(0); expectedIds.add(1); }",
        "C": "public Set<Integer> getPlayerIds() { // TODO return playerIDs; }",
        "label": "P"
    },
    "2683": {
        "dataset": "COMP 3021",
        "project": "jlawrance",
        "bug_id": "17",
        "T": "void testMapWithoutPlayer() { final var invalidMap = \"\"\" 233 ### #.# ### \"\"\"; } // @Tag(TestKind.HIDDEN) // @Test // void testUnmatchedPlayersAndBoxes() { // final var invalidMap = \"\"\" // 233 // ###### // #A..@# // #...@# // #a.b@# // #.a.@# // #..a.# // ###### // \"\"\"; // assertThrowsExactly(IllegalArgumentException.class, () -> TestHelper.parseGameMap(invalidMap)); // }",
        "C": "public MapLevel(int width) { mapLine = new ArrayList<Character>(); entityMap = new ArrayList<Entity>(); for (int i = 0; i < width; i++) { mapLine.add(' '); entityMap.add(new Empty()); } }",
        "label": "P"
    },
    "2684": {
        "dataset": "COMP 3021",
        "project": "jlawrance",
        "bug_id": "18",
        "T": "void testManyPlayersMap() { final var manyPlayersMap = \"\"\" 233 ###### #A.P@@# #vCB@@# #.cpD@# #Ga.d@# #g.bV@# ###### \"\"\"; final var gameMap = TestHelper.parseGameMap(manyPlayersMap); final var playerIds = gameMap.getPlayerIds(); final var expectedIds = new HashSet<>(Arrays.asList( 0, 'P' - 'A', 'C' - 'A', 'B' - 'A', 'D' - 'A', 'G' - 'A', 'V' - 'A' )); }",
        "C": "public Set<Integer> getPlayerIds() { // TODO return playerIDs; }",
        "label": "P"
    },
    "2685": {
        "dataset": "COMP 3021",
        "project": "jlawrance",
        "bug_id": "19",
        "T": "void testHeightForNonRectangularMap() { final var gameMap = TestHelper.parseGameMap(nonRectangularMap); }",
        "C": "",
        "label": "P"
    },
    "2686": {
        "dataset": "COMP 3021",
        "project": "jlawrance",
        "bug_id": "20",
        "T": "void testDuplicatedPlayers() { final var invalidMap = \"\"\" 233 ###### #A..@# #..A@# #....# #.a..# #..b.# ###### \"\"\"; }",
        "C": "",
        "label": "P"
    },
    "2687": {
        "dataset": "COMP 3021",
        "project": "jlawrance",
        "bug_id": "21",
        "T": "void testParseMapWithoutUndoLimit() { final var invalidMap = String.join(\"\\n\", rectangularMap.lines().skip(1).toList()); }",
        "C": "",
        "label": "P"
    },
    "2688": {
        "dataset": "COMP 3021",
        "project": "jlawrance",
        "bug_id": "22",
        "T": "void testInsufficientDestinations() { final var invalidMap = \"\"\" 233 ###### #A..@# #...@# #a...# #.a..# #..a.# ###### \"\"\"; }",
        "C": "",
        "label": "P"
    },
    "2689": {
        "dataset": "COMP 3021",
        "project": "jlawrance",
        "bug_id": "23",
        "T": "void testSuperLargeMap() { try { new GameMap(Integer.MAX_VALUE, Integer.MAX_VALUE, Collections.emptySet(), 0); } catch (OutOfMemoryError e) { throw new RuntimeException(e); } }); }",
        "C": "public GameMap(int maxWidth, int maxHeight, Set<Position> destinations, int undoLimit) { // TODO map = new ArrayList<>(); this.undoLimit = undoLimit; destPosi = new HashSet<>(); playerIDs = new HashSet<>(); width = maxWidth; height = maxHeight; playerLocs = new HashSet<>(); for (int i = 0; i < maxHeight; i++) { MapLevel newLevel = new MapLevel(maxWidth); map.add(newLevel); } for (Position currDest : destinations) { map.get(currDest.y()).setValue('@', currDest.x()); destPosi.add(currDest); //GameMap.get(currDest.x()).setEntity(new Box(), currDest.y()); } } /** * Parses the map from a string representation. * The first line is undo limit. * Starting from the second line, the game map is represented as follows, * <li># represents a {@link Wall}</li> * <li>@ represents a box destination.</li> * <li>Any upper-case letter represents a {@link Player}.</li> * <li> * Any lower-case letter represents a {@link Box} that is only movable by the player with the corresponding upper-case letter. * For instance, box \"a\" can only be moved by player \"A\" and not movable by player \"B\". * </li> * <li>. represents an {@link Empty} position in the map, meaning there is no player or box currently at this position.</li> * <p> * Notes: * <li> * There can be at most 26 players. * All implementations of classes in the hk.ust.comp3021.game package should support up to 26 players. * </li> * <li> * For simplicity, we assume the given map is bounded with a closed boundary. * There is no need to check this point. * </li> * <li> * Example maps can be found in \"src/main/resources\". * </li> * * @param mapText The string representation. * @return The parsed GameMap object. * @throws IllegalArgumentException if undo limit is negative but not -1. * @throws IllegalArgumentException if there are multiple same upper-case letters, i.e., one player can only exist at one position. * @throws IllegalArgumentException if there are no players in the map. * @throws IllegalArgumentException if the number of boxes is not equal to the number of box destinations. * @throws IllegalArgumentException if there are boxes whose {@link Box#getPlayerId()} public MapLevel(int width) { mapLine = new ArrayList<Character>(); entityMap = new ArrayList<Entity>(); for (int i = 0; i < width; i++) { mapLine.add(' '); entityMap.add(new Empty()); } }",
        "label": "F"
    },
    "2690": {
        "dataset": "COMP 3021",
        "project": "jlawrance",
        "bug_id": "24",
        "T": "void testInvalidUndoLimit() { final var invalidMap = \"\"\" -233 ###### #A..@# #...@# #a.b@# #.a.@# #..a.# ###### \"\"\"; }",
        "C": "",
        "label": "P"
    },
    "2691": {
        "dataset": "COMP 3021",
        "project": "jlawrance",
        "bug_id": "25",
        "T": "void testEmptyMap() { final var invalidMap = \"\"; }",
        "C": "",
        "label": "P"
    },
    "2692": {
        "dataset": "COMP 3021",
        "project": "jlawrance",
        "bug_id": "26",
        "T": "void testMove(String input, String name, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); } private InputStream fixValueStream(String content) { final var bytes = content.getBytes(StandardCharsets.UTF_8); return new ByteArrayInputStream(bytes); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine(); Action currAction = null; // TODO if(inputLine.toUpperCase().contentEquals(\"A\")) { currAction = new Move.Left(0); } else if(inputLine.toUpperCase().contentEquals(\"D\")) { currAction = new Move.Right(0); } else if(inputLine.toUpperCase().contentEquals(\"W\")) { currAction = new Move.Up(0); } else if(inputLine.toUpperCase().contentEquals(\"S\")) { currAction = new Move.Down(0); } else if (inputLine.toUpperCase().contentEquals(\"U\")) { currAction = new Undo(0); } else if (inputLine.contentEquals(StringResources.EXIT_COMMAND_TEXT)) { currAction = new Exit(0); } else if(TerminalSokobanGame.numOfPlayers == 2) { if(inputLine.toUpperCase().contentEquals(\"H\")) { currAction = new Move.Left(1); } else if(inputLine.toUpperCase().contentEquals(\"L\")) { currAction = new Move.Right(1); } else if(inputLine.toUpperCase().contentEquals(\"K\")) { currAction = new Move.Up(1); } else if(inputLine.toUpperCase().contentEquals(\"J\")) { currAction = new Move.Down(1); } else { currAction = new InvalidInput(0, \"Invalid Input\"); } } else { currAction = new InvalidInput(0, \"Invalid Input\"); } return currAction; }",
        "label": "P"
    },
    "2693": {
        "dataset": "COMP 3021",
        "project": "jlawrance",
        "bug_id": "27",
        "T": "void testMove(String input, String name, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); } private InputStream fixValueStream(String content) { final var bytes = content.getBytes(StandardCharsets.UTF_8); return new ByteArrayInputStream(bytes); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine(); Action currAction = null; // TODO if(inputLine.toUpperCase().contentEquals(\"A\")) { currAction = new Move.Left(0); } else if(inputLine.toUpperCase().contentEquals(\"D\")) { currAction = new Move.Right(0); } else if(inputLine.toUpperCase().contentEquals(\"W\")) { currAction = new Move.Up(0); } else if(inputLine.toUpperCase().contentEquals(\"S\")) { currAction = new Move.Down(0); } else if (inputLine.toUpperCase().contentEquals(\"U\")) { currAction = new Undo(0); } else if (inputLine.contentEquals(StringResources.EXIT_COMMAND_TEXT)) { currAction = new Exit(0); } else if(TerminalSokobanGame.numOfPlayers == 2) { if(inputLine.toUpperCase().contentEquals(\"H\")) { currAction = new Move.Left(1); } else if(inputLine.toUpperCase().contentEquals(\"L\")) { currAction = new Move.Right(1); } else if(inputLine.toUpperCase().contentEquals(\"K\")) { currAction = new Move.Up(1); } else if(inputLine.toUpperCase().contentEquals(\"J\")) { currAction = new Move.Down(1); } else { currAction = new InvalidInput(0, \"Invalid Input\"); } } else { currAction = new InvalidInput(0, \"Invalid Input\"); } return currAction; }",
        "label": "P"
    },
    "2694": {
        "dataset": "COMP 3021",
        "project": "jlawrance",
        "bug_id": "28",
        "T": "void testMove(String input, String name, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); } private InputStream fixValueStream(String content) { final var bytes = content.getBytes(StandardCharsets.UTF_8); return new ByteArrayInputStream(bytes); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine(); Action currAction = null; // TODO if(inputLine.toUpperCase().contentEquals(\"A\")) { currAction = new Move.Left(0); } else if(inputLine.toUpperCase().contentEquals(\"D\")) { currAction = new Move.Right(0); } else if(inputLine.toUpperCase().contentEquals(\"W\")) { currAction = new Move.Up(0); } else if(inputLine.toUpperCase().contentEquals(\"S\")) { currAction = new Move.Down(0); } else if (inputLine.toUpperCase().contentEquals(\"U\")) { currAction = new Undo(0); } else if (inputLine.contentEquals(StringResources.EXIT_COMMAND_TEXT)) { currAction = new Exit(0); } else if(TerminalSokobanGame.numOfPlayers == 2) { if(inputLine.toUpperCase().contentEquals(\"H\")) { currAction = new Move.Left(1); } else if(inputLine.toUpperCase().contentEquals(\"L\")) { currAction = new Move.Right(1); } else if(inputLine.toUpperCase().contentEquals(\"K\")) { currAction = new Move.Up(1); } else if(inputLine.toUpperCase().contentEquals(\"J\")) { currAction = new Move.Down(1); } else { currAction = new InvalidInput(0, \"Invalid Input\"); } } else { currAction = new InvalidInput(0, \"Invalid Input\"); } return currAction; }",
        "label": "P"
    },
    "2695": {
        "dataset": "COMP 3021",
        "project": "jlawrance",
        "bug_id": "29",
        "T": "void testMove(String input, String name, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); } private InputStream fixValueStream(String content) { final var bytes = content.getBytes(StandardCharsets.UTF_8); return new ByteArrayInputStream(bytes); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine(); Action currAction = null; // TODO if(inputLine.toUpperCase().contentEquals(\"A\")) { currAction = new Move.Left(0); } else if(inputLine.toUpperCase().contentEquals(\"D\")) { currAction = new Move.Right(0); } else if(inputLine.toUpperCase().contentEquals(\"W\")) { currAction = new Move.Up(0); } else if(inputLine.toUpperCase().contentEquals(\"S\")) { currAction = new Move.Down(0); } else if (inputLine.toUpperCase().contentEquals(\"U\")) { currAction = new Undo(0); } else if (inputLine.contentEquals(StringResources.EXIT_COMMAND_TEXT)) { currAction = new Exit(0); } else if(TerminalSokobanGame.numOfPlayers == 2) { if(inputLine.toUpperCase().contentEquals(\"H\")) { currAction = new Move.Left(1); } else if(inputLine.toUpperCase().contentEquals(\"L\")) { currAction = new Move.Right(1); } else if(inputLine.toUpperCase().contentEquals(\"K\")) { currAction = new Move.Up(1); } else if(inputLine.toUpperCase().contentEquals(\"J\")) { currAction = new Move.Down(1); } else { currAction = new InvalidInput(0, \"Invalid Input\"); } } else { currAction = new InvalidInput(0, \"Invalid Input\"); } return currAction; }",
        "label": "P"
    },
    "2696": {
        "dataset": "COMP 3021",
        "project": "jlawrance",
        "bug_id": "30",
        "T": "void testMove(String input, String name, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); } private InputStream fixValueStream(String content) { final var bytes = content.getBytes(StandardCharsets.UTF_8); return new ByteArrayInputStream(bytes); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine(); Action currAction = null; // TODO if(inputLine.toUpperCase().contentEquals(\"A\")) { currAction = new Move.Left(0); } else if(inputLine.toUpperCase().contentEquals(\"D\")) { currAction = new Move.Right(0); } else if(inputLine.toUpperCase().contentEquals(\"W\")) { currAction = new Move.Up(0); } else if(inputLine.toUpperCase().contentEquals(\"S\")) { currAction = new Move.Down(0); } else if (inputLine.toUpperCase().contentEquals(\"U\")) { currAction = new Undo(0); } else if (inputLine.contentEquals(StringResources.EXIT_COMMAND_TEXT)) { currAction = new Exit(0); } else if(TerminalSokobanGame.numOfPlayers == 2) { if(inputLine.toUpperCase().contentEquals(\"H\")) { currAction = new Move.Left(1); } else if(inputLine.toUpperCase().contentEquals(\"L\")) { currAction = new Move.Right(1); } else if(inputLine.toUpperCase().contentEquals(\"K\")) { currAction = new Move.Up(1); } else if(inputLine.toUpperCase().contentEquals(\"J\")) { currAction = new Move.Down(1); } else { currAction = new InvalidInput(0, \"Invalid Input\"); } } else { currAction = new InvalidInput(0, \"Invalid Input\"); } return currAction; }",
        "label": "P"
    },
    "2697": {
        "dataset": "COMP 3021",
        "project": "jlawrance",
        "bug_id": "31",
        "T": "void testMove(String input, String name, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); } private InputStream fixValueStream(String content) { final var bytes = content.getBytes(StandardCharsets.UTF_8); return new ByteArrayInputStream(bytes); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine(); Action currAction = null; // TODO if(inputLine.toUpperCase().contentEquals(\"A\")) { currAction = new Move.Left(0); } else if(inputLine.toUpperCase().contentEquals(\"D\")) { currAction = new Move.Right(0); } else if(inputLine.toUpperCase().contentEquals(\"W\")) { currAction = new Move.Up(0); } else if(inputLine.toUpperCase().contentEquals(\"S\")) { currAction = new Move.Down(0); } else if (inputLine.toUpperCase().contentEquals(\"U\")) { currAction = new Undo(0); } else if (inputLine.contentEquals(StringResources.EXIT_COMMAND_TEXT)) { currAction = new Exit(0); } else if(TerminalSokobanGame.numOfPlayers == 2) { if(inputLine.toUpperCase().contentEquals(\"H\")) { currAction = new Move.Left(1); } else if(inputLine.toUpperCase().contentEquals(\"L\")) { currAction = new Move.Right(1); } else if(inputLine.toUpperCase().contentEquals(\"K\")) { currAction = new Move.Up(1); } else if(inputLine.toUpperCase().contentEquals(\"J\")) { currAction = new Move.Down(1); } else { currAction = new InvalidInput(0, \"Invalid Input\"); } } else { currAction = new InvalidInput(0, \"Invalid Input\"); } return currAction; }",
        "label": "P"
    },
    "2698": {
        "dataset": "COMP 3021",
        "project": "jlawrance",
        "bug_id": "32",
        "T": "void testMove(String input, String name, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); } private InputStream fixValueStream(String content) { final var bytes = content.getBytes(StandardCharsets.UTF_8); return new ByteArrayInputStream(bytes); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine(); Action currAction = null; // TODO if(inputLine.toUpperCase().contentEquals(\"A\")) { currAction = new Move.Left(0); } else if(inputLine.toUpperCase().contentEquals(\"D\")) { currAction = new Move.Right(0); } else if(inputLine.toUpperCase().contentEquals(\"W\")) { currAction = new Move.Up(0); } else if(inputLine.toUpperCase().contentEquals(\"S\")) { currAction = new Move.Down(0); } else if (inputLine.toUpperCase().contentEquals(\"U\")) { currAction = new Undo(0); } else if (inputLine.contentEquals(StringResources.EXIT_COMMAND_TEXT)) { currAction = new Exit(0); } else if(TerminalSokobanGame.numOfPlayers == 2) { if(inputLine.toUpperCase().contentEquals(\"H\")) { currAction = new Move.Left(1); } else if(inputLine.toUpperCase().contentEquals(\"L\")) { currAction = new Move.Right(1); } else if(inputLine.toUpperCase().contentEquals(\"K\")) { currAction = new Move.Up(1); } else if(inputLine.toUpperCase().contentEquals(\"J\")) { currAction = new Move.Down(1); } else { currAction = new InvalidInput(0, \"Invalid Input\"); } } else { currAction = new InvalidInput(0, \"Invalid Input\"); } return currAction; }",
        "label": "P"
    },
    "2699": {
        "dataset": "COMP 3021",
        "project": "jlawrance",
        "bug_id": "33",
        "T": "void testMove(String input, String name, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); } private InputStream fixValueStream(String content) { final var bytes = content.getBytes(StandardCharsets.UTF_8); return new ByteArrayInputStream(bytes); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine(); Action currAction = null; // TODO if(inputLine.toUpperCase().contentEquals(\"A\")) { currAction = new Move.Left(0); } else if(inputLine.toUpperCase().contentEquals(\"D\")) { currAction = new Move.Right(0); } else if(inputLine.toUpperCase().contentEquals(\"W\")) { currAction = new Move.Up(0); } else if(inputLine.toUpperCase().contentEquals(\"S\")) { currAction = new Move.Down(0); } else if (inputLine.toUpperCase().contentEquals(\"U\")) { currAction = new Undo(0); } else if (inputLine.contentEquals(StringResources.EXIT_COMMAND_TEXT)) { currAction = new Exit(0); } else if(TerminalSokobanGame.numOfPlayers == 2) { if(inputLine.toUpperCase().contentEquals(\"H\")) { currAction = new Move.Left(1); } else if(inputLine.toUpperCase().contentEquals(\"L\")) { currAction = new Move.Right(1); } else if(inputLine.toUpperCase().contentEquals(\"K\")) { currAction = new Move.Up(1); } else if(inputLine.toUpperCase().contentEquals(\"J\")) { currAction = new Move.Down(1); } else { currAction = new InvalidInput(0, \"Invalid Input\"); } } else { currAction = new InvalidInput(0, \"Invalid Input\"); } return currAction; }",
        "label": "P"
    },
    "2700": {
        "dataset": "COMP 3021",
        "project": "jlawrance",
        "bug_id": "34",
        "T": "void testUndo(String input, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine(); Action currAction = null; // TODO if(inputLine.toUpperCase().contentEquals(\"A\")) { currAction = new Move.Left(0); } else if(inputLine.toUpperCase().contentEquals(\"D\")) { currAction = new Move.Right(0); } else if(inputLine.toUpperCase().contentEquals(\"W\")) { currAction = new Move.Up(0); } else if(inputLine.toUpperCase().contentEquals(\"S\")) { currAction = new Move.Down(0); } else if (inputLine.toUpperCase().contentEquals(\"U\")) { currAction = new Undo(0); } else if (inputLine.contentEquals(StringResources.EXIT_COMMAND_TEXT)) { currAction = new Exit(0); } else if(TerminalSokobanGame.numOfPlayers == 2) { if(inputLine.toUpperCase().contentEquals(\"H\")) { currAction = new Move.Left(1); } else if(inputLine.toUpperCase().contentEquals(\"L\")) { currAction = new Move.Right(1); } else if(inputLine.toUpperCase().contentEquals(\"K\")) { currAction = new Move.Up(1); } else if(inputLine.toUpperCase().contentEquals(\"J\")) { currAction = new Move.Down(1); } else { currAction = new InvalidInput(0, \"Invalid Input\"); } } else { currAction = new InvalidInput(0, \"Invalid Input\"); } return currAction; }",
        "label": "P"
    },
    "2701": {
        "dataset": "COMP 3021",
        "project": "jlawrance",
        "bug_id": "35",
        "T": "void testInvalidInput() { final var inputStream = fixValueStream(\"blah blah\"); final var inputEngine = new TerminalInputEngine(inputStream); final var action = inputEngine.fetchAction(); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine(); Action currAction = null; // TODO if(inputLine.toUpperCase().contentEquals(\"A\")) { currAction = new Move.Left(0); } else if(inputLine.toUpperCase().contentEquals(\"D\")) { currAction = new Move.Right(0); } else if(inputLine.toUpperCase().contentEquals(\"W\")) { currAction = new Move.Up(0); } else if(inputLine.toUpperCase().contentEquals(\"S\")) { currAction = new Move.Down(0); } else if (inputLine.toUpperCase().contentEquals(\"U\")) { currAction = new Undo(0); } else if (inputLine.contentEquals(StringResources.EXIT_COMMAND_TEXT)) { currAction = new Exit(0); } else if(TerminalSokobanGame.numOfPlayers == 2) { if(inputLine.toUpperCase().contentEquals(\"H\")) { currAction = new Move.Left(1); } else if(inputLine.toUpperCase().contentEquals(\"L\")) { currAction = new Move.Right(1); } else if(inputLine.toUpperCase().contentEquals(\"K\")) { currAction = new Move.Up(1); } else if(inputLine.toUpperCase().contentEquals(\"J\")) { currAction = new Move.Down(1); } else { currAction = new InvalidInput(0, \"Invalid Input\"); } } else { currAction = new InvalidInput(0, \"Invalid Input\"); } return currAction; }",
        "label": "P"
    },
    "2702": {
        "dataset": "COMP 3021",
        "project": "jlawrance",
        "bug_id": "36",
        "T": "void testUndoWhenThereIsNoMove() { final var gameState = new GameState(TestHelper.parseGameMap(\"\"\" 233 ###### #A.a@# #..a@# ###### \"\"\" )); gameState.undo(); } private Entity generateEntity(int key) { return switch (key % 4) { case 0 -> new Box(0); case 1 -> new Empty(); case 2 -> new Player(0); case 3 -> new Wall(); default -> throw new ShouldNotReachException(); }; }",
        "C": "public GameState(@NotNull GameMap map) { // TODO stateMap = GameMap.parse(map.generateMapString()); playerPositions = new HashSet<>(); for(Position pos : stateMap.playerLocs){ playerPositions.add(pos); } allMapStates.add(map); allMapStr.add(stateMap.generateMapString()); undoQuota = stateMap.undoLimit; //TestUndo = getUndoQuota(); } public void undo() { // TODO if(allMapStr.size() == 1){ stateMap = GameMap.parseState(allMapStr.get(0)); } else{ stateMap = GameMap.parseState(allMapStr.get(stateIndex)); allMapStr.remove(allMapStr.size() - 1); //allMapStates.remove(stateIndex); stateIndex--; undoQuota--; } stateMap.undoLimit = undoQuota; } /** * Get the maximum width of the game map. * This should be the same as that in {@link GameMap} public MapLevel(int width) { mapLine = new ArrayList<Character>(); entityMap = new ArrayList<Entity>(); for (int i = 0; i < width; i++) { mapLine.add(' '); entityMap.add(new Empty()); } } public Box(int playerId) { this.playerId = playerId; } public Player(int id) { this.id = id; } public ShouldNotReachException() { super(\"This branch should not be reached.\"); }",
        "label": "F"
    },
    "2703": {
        "dataset": "COMP 3021",
        "project": "jlawrance",
        "bug_id": "37",
        "T": "void testGetUndoUnlimited() { final var gameState = new GameState(TestHelper.parseGameMap(\"\"\" -1 ###### #.Aa@# #..a@# ###### \"\"\" )); }",
        "C": "public GameState(@NotNull GameMap map) { // TODO stateMap = GameMap.parse(map.generateMapString()); playerPositions = new HashSet<>(); for(Position pos : stateMap.playerLocs){ playerPositions.add(pos); } allMapStates.add(map); allMapStr.add(stateMap.generateMapString()); undoQuota = stateMap.undoLimit; //TestUndo = getUndoQuota(); }",
        "label": "P"
    },
    "2704": {
        "dataset": "COMP 3021",
        "project": "jlawrance",
        "bug_id": "38",
        "T": "void testMapCopying() { final var maxWidth = 2333; final var maxHeight = 2333; final var random = new Random(); final var randomEntities = Stream.generate(() -> Position.of(random.nextInt(maxWidth), random.nextInt(maxHeight))) .distinct() .limit(100) .collect(Collectors.toMap(Function.identity(), it -> generateEntity(it.x()))); final var firstPos = randomEntities.keySet().stream().findFirst(); final var gameMap = new GameMap(maxWidth, maxHeight, Collections.singleton(firstPos.get()), 233); randomEntities.forEach(gameMap::putEntity); final var gameState = new GameState(gameMap); final var randomPosition = randomEntities.keySet().stream().findAny(); gameMap.putEntity(randomPosition.get(), new Empty()); randomEntities.forEach((p, e) -> assertEquals(e, gameState.getEntity(p))); }",
        "C": "public static @NotNull Position of(int x, int y) { return new Position(x, y); } public GameMap(int maxWidth, int maxHeight, Set<Position> destinations, int undoLimit) { // TODO map = new ArrayList<>(); this.undoLimit = undoLimit; destPosi = new HashSet<>(); playerIDs = new HashSet<>(); width = maxWidth; height = maxHeight; playerLocs = new HashSet<>(); for (int i = 0; i < maxHeight; i++) { MapLevel newLevel = new MapLevel(maxWidth); map.add(newLevel); } for (Position currDest : destinations) { map.get(currDest.y()).setValue('@', currDest.x()); destPosi.add(currDest); //GameMap.get(currDest.x()).setEntity(new Box(), currDest.y()); } } /** * Parses the map from a string representation. * The first line is undo limit. * Starting from the second line, the game map is represented as follows, * <li># represents a {@link Wall}</li> * <li>@ represents a box destination.</li> * <li>Any upper-case letter represents a {@link Player}.</li> * <li> * Any lower-case letter represents a {@link Box} that is only movable by the player with the corresponding upper-case letter. * For instance, box \"a\" can only be moved by player \"A\" and not movable by player \"B\". * </li> * <li>. represents an {@link Empty} position in the map, meaning there is no player or box currently at this position.</li> * <p> * Notes: * <li> * There can be at most 26 players. * All implementations of classes in the hk.ust.comp3021.game package should support up to 26 players. * </li> * <li> * For simplicity, we assume the given map is bounded with a closed boundary. * There is no need to check this point. * </li> * <li> * Example maps can be found in \"src/main/resources\". * </li> * * @param mapText The string representation. * @return The parsed GameMap object. * @throws IllegalArgumentException if undo limit is negative but not -1. * @throws IllegalArgumentException if there are multiple same upper-case letters, i.e., one player can only exist at one position. * @throws IllegalArgumentException if there are no players in the map. * @throws IllegalArgumentException if the number of boxes is not equal to the number of box destinations. * @throws IllegalArgumentException if there are boxes whose {@link Box#getPlayerId()} public GameState(@NotNull GameMap map) { // TODO stateMap = GameMap.parse(map.generateMapString()); playerPositions = new HashSet<>(); for(Position pos : stateMap.playerLocs){ playerPositions.add(pos); } allMapStates.add(map); allMapStr.add(stateMap.generateMapString()); undoQuota = stateMap.undoLimit; //TestUndo = getUndoQuota(); } public @Nullable Entity getEntity(@NotNull Position position) { // TODO return stateMap.getEntity(position); } /** * Get all box destination positions as a set in the game map. * This should be the same as that in {@link GameMap}",
        "label": "F"
    },
    "2705": {
        "dataset": "COMP 3021",
        "project": "jlawrance",
        "bug_id": "39",
        "T": "void testUndoWhenThereIsMoveButNoCheckpoint() { final var gameState = new GameState(TestHelper.parseGameMap(\"\"\" 233 ###### #A.a@# #..a@# ###### \"\"\" )); gameState.move(Position.of(1, 1), Position.of(2, 1)); gameState.undo(); }",
        "C": "public GameState(@NotNull GameMap map) { // TODO stateMap = GameMap.parse(map.generateMapString()); playerPositions = new HashSet<>(); for(Position pos : stateMap.playerLocs){ playerPositions.add(pos); } allMapStates.add(map); allMapStr.add(stateMap.generateMapString()); undoQuota = stateMap.undoLimit; //TestUndo = getUndoQuota(); } public void move(Position from, Position to) { // TODO stateMap.putEntity(to, getEntity(from)); char c = stateMap.map.get(from.y()).mapLine.get(from.x()); stateMap.map.get(to.y()).setValue(c, to.x()); if(GameMap.parseState(allMapStr.get(0)).getChar(from) == '@'){ stateMap.map.get(from.y()).setValue('@', from.x()); } else{ stateMap.putEntity(from, new Empty()); stateMap.map.get(from.y()).setValue('.', from.x()); } } /** * Record a checkpoint of the game state, including: * <li>All current positions of entities in the game map.</li> * <li>Current undo quota</li> * <p> * Checkpoint is used in {@link GameState#undo()} public static @NotNull Position of(int x, int y) { return new Position(x, y); } public void undo() { // TODO if(allMapStr.size() == 1){ stateMap = GameMap.parseState(allMapStr.get(0)); } else{ stateMap = GameMap.parseState(allMapStr.get(stateIndex)); allMapStr.remove(allMapStr.size() - 1); //allMapStates.remove(stateIndex); stateIndex--; undoQuota--; } stateMap.undoLimit = undoQuota; } /** * Get the maximum width of the game map. * This should be the same as that in {@link GameMap}",
        "label": "F"
    },
    "2706": {
        "dataset": "COMP 3021",
        "project": "jlawrance",
        "bug_id": "40",
        "T": "void testGameExit() { final var gameState = mock(GameState.class); final var inputEngine = mock(TerminalInputEngine.class); final var renderingEngine = mock(TerminalRenderingEngine.class); when(gameState.isWin()).thenReturn(false, false, false); when(inputEngine.fetchAction()) .thenReturn(new InvalidInput(0, \"\"), new InvalidInput(0, \"\"), new Exit(0)); final var game = new TerminalSokobanGame(gameState, inputEngine, renderingEngine); game.run(); verify(renderingEngine, atLeastOnce()).message(any()); }",
        "C": "public InvalidInput(int initiator, @NotNull String message) { super(initiator); this.message = message; } public Exit(int initiator) { super(initiator); } public TerminalSokobanGame(GameState gameState, TerminalInputEngine inputEngine, TerminalRenderingEngine renderingEngine) { super(gameState); this.inputEngine = inputEngine; this.renderingEngine = renderingEngine; // TODO // Check the number of players numOfPlayers = gameState.getAllPlayerPositions().size(); if(numOfPlayers > 2){ throw new IllegalArgumentException(); } } public void run() { // TODO Action currAction = null; /* renderingEngine.render(super.state); Action currAction = inputEngine.fetchAction(); renderingEngine.render(super.state); if(!super.shouldStop() && !(currAction instanceof Exit)) { while(!super.shouldStop() && !(currAction instanceof Exit)){ super.processAction(currAction); currAction = inputEngine.fetchAction(); renderingEngine.render(super.state); } } */ renderingEngine.message(StringResources.GAME_READY_MESSAGE); renderingEngine.render(state); renderingEngine.message(\"\"); if(!state.getUndoQuota().isEmpty()){ StringBuilder out = new StringBuilder(); out.append(\"Undo Quota : \"); out.append(state.getUndoQuota().get().toString()); renderingEngine.message(out.toString()); }else{ renderingEngine.message(\"Unlimited Undos\"); } while(!super.shouldStop() && !(currAction instanceof Exit)){ currAction = inputEngine.fetchAction(); ActionResult result = super.processAction(currAction); renderingEngine.render(state); if(result instanceof ActionResult.Failed){ renderingEngine.message(((ActionResult.Failed) result).getReason()); } else{ renderingEngine.message(\"\"); } if(!state.getUndoQuota().isEmpty()){ StringBuilder out = new StringBuilder(); out.append(\"Undo Quota : \"); out.append(state.getUndoQuota().get().toString()); renderingEngine.message(out.toString()); }else{ renderingEngine.message(\"Unlimited Undos\"); } if(shouldStop()) { renderingEngine.message(StringResources.WIN_MESSAGE); } if(currAction instanceof Exit) { renderingEngine.message(StringResources.GAME_EXIT_MESSAGE); } } }",
        "label": "P"
    },
    "2707": {
        "dataset": "COMP 3021",
        "project": "jlawrance",
        "bug_id": "41",
        "T": "void testGameWin() { final var gameState = mock(GameState.class); final var inputEngine = mock(TerminalInputEngine.class); final var renderingEngine = mock(TerminalRenderingEngine.class); when(gameState.isWin()).thenReturn(false, false, false, true); when(inputEngine.fetchAction()) .thenReturn(new InvalidInput(0, \"\")); final var game = new TerminalSokobanGame(gameState, inputEngine, renderingEngine); game.run(); verify(gameState, atLeastOnce()).isWin(); verify(renderingEngine, atLeastOnce()).message(any()); }",
        "C": "public InvalidInput(int initiator, @NotNull String message) { super(initiator); this.message = message; } public TerminalSokobanGame(GameState gameState, TerminalInputEngine inputEngine, TerminalRenderingEngine renderingEngine) { super(gameState); this.inputEngine = inputEngine; this.renderingEngine = renderingEngine; // TODO // Check the number of players numOfPlayers = gameState.getAllPlayerPositions().size(); if(numOfPlayers > 2){ throw new IllegalArgumentException(); } } public void run() { // TODO Action currAction = null; /* renderingEngine.render(super.state); Action currAction = inputEngine.fetchAction(); renderingEngine.render(super.state); if(!super.shouldStop() && !(currAction instanceof Exit)) { while(!super.shouldStop() && !(currAction instanceof Exit)){ super.processAction(currAction); currAction = inputEngine.fetchAction(); renderingEngine.render(super.state); } } */ renderingEngine.message(StringResources.GAME_READY_MESSAGE); renderingEngine.render(state); renderingEngine.message(\"\"); if(!state.getUndoQuota().isEmpty()){ StringBuilder out = new StringBuilder(); out.append(\"Undo Quota : \"); out.append(state.getUndoQuota().get().toString()); renderingEngine.message(out.toString()); }else{ renderingEngine.message(\"Unlimited Undos\"); } while(!super.shouldStop() && !(currAction instanceof Exit)){ currAction = inputEngine.fetchAction(); ActionResult result = super.processAction(currAction); renderingEngine.render(state); if(result instanceof ActionResult.Failed){ renderingEngine.message(((ActionResult.Failed) result).getReason()); } else{ renderingEngine.message(\"\"); } if(!state.getUndoQuota().isEmpty()){ StringBuilder out = new StringBuilder(); out.append(\"Undo Quota : \"); out.append(state.getUndoQuota().get().toString()); renderingEngine.message(out.toString()); }else{ renderingEngine.message(\"Unlimited Undos\"); } if(shouldStop()) { renderingEngine.message(StringResources.WIN_MESSAGE); } if(currAction instanceof Exit) { renderingEngine.message(StringResources.GAME_EXIT_MESSAGE); } } }",
        "label": "P"
    },
    "2708": {
        "dataset": "COMP 3021",
        "project": "jlawrance",
        "bug_id": "42",
        "T": "void testMoreThanTwoPlayers() { final var gameState = mock(GameState.class); final var inputEngine = mock(TerminalInputEngine.class); final var renderingEngine = mock(TerminalRenderingEngine.class); when(gameState.getAllPlayerPositions()).thenReturn(new HashSet<>(Arrays.asList(Position.of(1, 1), Position.of(1, 2), Position.of(1, 3)))); }",
        "C": "public static @NotNull Position of(int x, int y) { return new Position(x, y); }",
        "label": "P"
    },
    "2709": {
        "dataset": "COMP 3021",
        "project": "kfchanay",
        "bug_id": "0",
        "T": "void moveUp() { Position.of(233, 232), new Move.Up(-1).nextPosition(pos) ); }",
        "C": "public static @NotNull Position of(int x, int y) { return new Position(x, y); } public Up(int initiator) { super(initiator); }",
        "label": "P"
    },
    "2710": {
        "dataset": "COMP 3021",
        "project": "kfchanay",
        "bug_id": "1",
        "T": "void moveDown() { Position.of(233, 234), new Move.Down(-1).nextPosition(pos) ); }",
        "C": "public static @NotNull Position of(int x, int y) { return new Position(x, y); } public Down(int initiator) { super(initiator); }",
        "label": "P"
    },
    "2711": {
        "dataset": "COMP 3021",
        "project": "kfchanay",
        "bug_id": "2",
        "T": "void moveRight() { Position.of(234, 233), new Move.Right(-1).nextPosition(pos) ); }",
        "C": "public static @NotNull Position of(int x, int y) { return new Position(x, y); } public Right(int initiator) { super(initiator); }",
        "label": "P"
    },
    "2712": {
        "dataset": "COMP 3021",
        "project": "kfchanay",
        "bug_id": "3",
        "T": "void testExceedingUndoQuota() { final var gameState = mock(GameState.class); when(gameState.getPlayerPositionById(anyInt())).thenReturn(Position.of(0, 0)); when(gameState.getUndoQuota()).thenReturn(Optional.of(0)); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Undo(0)); }",
        "C": "public Undo(int initiator) { super(initiator); }",
        "label": "P"
    },
    "2713": {
        "dataset": "COMP 3021",
        "project": "kfchanay",
        "bug_id": "4",
        "T": "void testExit() { final var gameState = mock(GameState.class); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Exit(0)); }",
        "C": "public Exit(int initiator) { super(initiator); }",
        "label": "F"
    },
    "2714": {
        "dataset": "COMP 3021",
        "project": "kfchanay",
        "bug_id": "5",
        "T": "void testUndoUnlimited() { final var gameState = mock(GameState.class); when(gameState.getPlayerPositionById(anyInt())).thenReturn(Position.of(0, 0)); when(gameState.getUndoQuota()).thenReturn(Optional.empty()); final var game = new SokobanGameForTesting(gameState); for (int i = 0; i < 10000; i++) { final var result = game.feedActionForProcessing(new Undo(0)); } verify(gameState, times(10000)).undo(); }",
        "C": "public TerminalRenderingEngine(PrintStream outputSteam) { this.outputSteam = outputSteam; } public Undo(int initiator) { super(initiator); }",
        "label": "F"
    },
    "2715": {
        "dataset": "COMP 3021",
        "project": "kfchanay",
        "bug_id": "6",
        "T": "void testPushOtherPlayerBox() { String mapText = \"\"\" 233 ###### #AB.@# #b.a.# #@...# ###### \"\"\"; final var testMap = TestHelper.parseGameMap(mapText); final var gameState = spy(new GameState(testMap)); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Move.Down(0)); verify(gameState, never()).move(any(), any()); }",
        "C": "public GameState(@NotNull GameMap map) { // TODO this.undoquota = map.undoLimit; this.maxHeight = map.maxHeight; this.maxWidth = map.maxWidth; this.destinations = map.destinations; this.map = map.map; this.id = map.id; checkpoint(); /* for(int i = 0; i< this.map.length; i++){ for (int j = 0; j < this.map[i].length; j++){ if(this.map[i][j] instanceof Wall) System.out.print(\"#\"); if(this.map[i][j] instanceof Player) System.out.print(\"A\"); if(this.map[i][j] instanceof Empty) System.out.print(\".\"); if(this.map[i][j] instanceof Box) System.out.print(\"a\"); } System.out.print(\"\\n\"); } System.out.print(\"\\n\"); */ //throw new NotImplementedException(); } public Down(int initiator) { super(initiator); }",
        "label": "P"
    },
    "2716": {
        "dataset": "COMP 3021",
        "project": "kfchanay",
        "bug_id": "7",
        "T": "void testMoveNonExistingPlayer() { String mapText = \"\"\" 233 ###### #A..@# #a...# ##...# ###### \"\"\"; final var testMap = TestHelper.parseGameMap(mapText); final var gameState = spy(new GameState(testMap)); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Move.Down(23)); }",
        "C": "public GameState(@NotNull GameMap map) { // TODO this.undoquota = map.undoLimit; this.maxHeight = map.maxHeight; this.maxWidth = map.maxWidth; this.destinations = map.destinations; this.map = map.map; this.id = map.id; checkpoint(); /* for(int i = 0; i< this.map.length; i++){ for (int j = 0; j < this.map[i].length; j++){ if(this.map[i][j] instanceof Wall) System.out.print(\"#\"); if(this.map[i][j] instanceof Player) System.out.print(\"A\"); if(this.map[i][j] instanceof Empty) System.out.print(\".\"); if(this.map[i][j] instanceof Box) System.out.print(\"a\"); } System.out.print(\"\\n\"); } System.out.print(\"\\n\"); */ //throw new NotImplementedException(); } public Down(int initiator) { super(initiator); }",
        "label": "P"
    },
    "2717": {
        "dataset": "COMP 3021",
        "project": "kfchanay",
        "bug_id": "8",
        "T": "void testCheckpointWhenNeed() { final var gameState = spy(new GameState(TestHelper.parseGameMap(\"\"\" 233 ###### #.Aa@# #..a@# ###### \"\"\" ))); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Move.Right(0)); verify(gameState, times(1)).checkpoint(); }",
        "C": "public GameState(@NotNull GameMap map) { // TODO this.undoquota = map.undoLimit; this.maxHeight = map.maxHeight; this.maxWidth = map.maxWidth; this.destinations = map.destinations; this.map = map.map; this.id = map.id; checkpoint(); /* for(int i = 0; i< this.map.length; i++){ for (int j = 0; j < this.map[i].length; j++){ if(this.map[i][j] instanceof Wall) System.out.print(\"#\"); if(this.map[i][j] instanceof Player) System.out.print(\"A\"); if(this.map[i][j] instanceof Empty) System.out.print(\".\"); if(this.map[i][j] instanceof Box) System.out.print(\"a\"); } System.out.print(\"\\n\"); } System.out.print(\"\\n\"); */ //throw new NotImplementedException(); } public Right(int initiator) { super(initiator); }",
        "label": "P"
    },
    "2718": {
        "dataset": "COMP 3021",
        "project": "kfchanay",
        "bug_id": "9",
        "T": "void testPushBoxAgainstWall() { String mapText = \"\"\" 233 ###### #A..@# #a...# ##...# ###### \"\"\"; final var testMap = TestHelper.parseGameMap(mapText); final var gameState = spy(new GameState(testMap)); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Move.Down(0)); verify(gameState, never()).move(any(), any()); }",
        "C": "public GameState(@NotNull GameMap map) { // TODO this.undoquota = map.undoLimit; this.maxHeight = map.maxHeight; this.maxWidth = map.maxWidth; this.destinations = map.destinations; this.map = map.map; this.id = map.id; checkpoint(); /* for(int i = 0; i< this.map.length; i++){ for (int j = 0; j < this.map[i].length; j++){ if(this.map[i][j] instanceof Wall) System.out.print(\"#\"); if(this.map[i][j] instanceof Player) System.out.print(\"A\"); if(this.map[i][j] instanceof Empty) System.out.print(\".\"); if(this.map[i][j] instanceof Box) System.out.print(\"a\"); } System.out.print(\"\\n\"); } System.out.print(\"\\n\"); */ //throw new NotImplementedException(); } public Down(int initiator) { super(initiator); }",
        "label": "P"
    },
    "2719": {
        "dataset": "COMP 3021",
        "project": "kfchanay",
        "bug_id": "10",
        "T": "void testCheckpointWhenNotNeed() { final var gameState = spy(new GameState(TestHelper.parseGameMap(\"\"\" 233 ###### #A.a@# #..a@# ###### \"\"\" ))); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Move.Right(0)); verify(gameState, never()).checkpoint(); } private static class SokobanGameForTesting extends AbstractSokobanGame { protected SokobanGameForTesting(GameState gameState) { super(gameState); } @Override public void run() { } public ActionResult feedActionForProcessing(Action action) { return processAction(action); } }",
        "C": "public GameState(@NotNull GameMap map) { // TODO this.undoquota = map.undoLimit; this.maxHeight = map.maxHeight; this.maxWidth = map.maxWidth; this.destinations = map.destinations; this.map = map.map; this.id = map.id; checkpoint(); /* for(int i = 0; i< this.map.length; i++){ for (int j = 0; j < this.map[i].length; j++){ if(this.map[i][j] instanceof Wall) System.out.print(\"#\"); if(this.map[i][j] instanceof Player) System.out.print(\"A\"); if(this.map[i][j] instanceof Empty) System.out.print(\".\"); if(this.map[i][j] instanceof Box) System.out.print(\"a\"); } System.out.print(\"\\n\"); } System.out.print(\"\\n\"); */ //throw new NotImplementedException(); } public Right(int initiator) { super(initiator); } public void run() { // TODO renderingEngine.message(StringResources.GAME_READY_MESSAGE); // int countloop = 0; boolean youwin = true; boolean gameexit = true; while(true){ renderingEngine.render(super.state); if(!gameexit){ renderingEngine.message(StringResources.GAME_EXIT_MESSAGE); if(!youwin) renderingEngine.message(StringResources.WIN_MESSAGE); break; } if(super.state.getUndoQuota().isPresent()) renderingEngine.message(String.format(StringResources.UNDO_QUOTA_TEMPLATE,String.valueOf(state.getUndoQuota().get()))); // System.out.printf(StringResources.UNDO_QUOTA_TEMPLATE,StringResources.UNDO_QUOTA_UNLIMITED); else if(super.state.getUndoQuota().isPresent() && super.state.getUndoQuota().get() == -1) renderingEngine.message(String.format(StringResources.UNDO_QUOTA_TEMPLATE,StringResources.UNDO_QUOTA_UNLIMITED)); Action action = inputEngine.fetchAction(); //System.out.print(countloop + \"\\n\"); if(action instanceof InvalidInput){ // System.out.print(countloop + \"invalidinput\\n\"); renderingEngine.message(StringResources.INVALID_INPUT_MESSAGE); }else if(action instanceof Exit){ // System.out.print(countloop + \"exit\\n\"); gameexit = false; } else{ // System.out.print(countloop + \"move or undo\\n\"); ActionResult result = super.processAction(action); if(result instanceof ActionResult.Success){ if(super.shouldStop()){ renderingEngine.message(StringResources.WIN_MESSAGE); youwin = false; gameexit = false; } }else if (result instanceof ActionResult.Failed){ renderingEngine.message(((ActionResult.Failed) result).getReason()); } } //countloop++; } //throw new NotImplementedException(); } protected ActionResult processAction(@NotNull Action action) { // TODO if(action instanceof Exit){ return new ActionResult.Success(action); } else if(action instanceof Move){ if( !state.isplayerexist(action.getInitiator())) return new ActionResult.Failed(action, StringResources.PLAYER_NOT_FOUND); int x = state.getPlayerPositionById(action.getInitiator()).x(); int y = state.getPlayerPositionById(action.getInitiator()).y(); Player player = (Player)state.getEntity(Position.of(x, y)); if (action instanceof Move.Left) { if (state.getEntity(Position.of(x - 1, y)) instanceof Wall) { return new ActionResult.Failed(action, \"You hit a wall\"); } else if(state.getEntity(Position.of(x - 1, y)) instanceof Player){ return new ActionResult.Failed(action, \"You hit another player\"); } else if (state.getEntity(Position.of(x - 1, y)) instanceof Box) { if(((Box) state.getEntity(Position.of(x - 1, y))).getPlayerId() != player.getId()) return new ActionResult.Failed(action, \"You cannot move other players' boxes\"); else if (state.getEntity(Position.of(x - 2, y)) instanceof Wall || state.getEntity(Position.of(x - 2, y)) instanceof Box) { return new ActionResult.Failed(action, \"Failed to push the box\"); } else { state.move(Position.of(x - 1, y), Position.of(x - 2, y)); state.move(Position.of(x, y), Position.of(x - 1, y)); state.checkpoint(); return new ActionResult.Success(action); } } else { state.move(Position.of(x, y), Position.of(x - 1, y)); return new ActionResult.Success(action); } } else if (action instanceof Move.Up) { if (state.getEntity(Position.of(x , y-1)) instanceof Wall) { return new ActionResult.Failed(action, \"You hit a wall\"); } else if(state.getEntity(Position.of(x , y-1)) instanceof Player){ return new ActionResult.Failed(action, \"You hit another player\"); } else if (state.getEntity(Position.of(x , y-1)) instanceof Box) { if(((Box) state.getEntity(Position.of(x , y-1))).getPlayerId() != player.getId()) return new ActionResult.Failed(action, \"You cannot move other players' boxes\"); else if (state.getEntity(Position.of(x , y- 2)) instanceof Wall || state.getEntity(Position.of(x, y- 2)) instanceof Box) { return new ActionResult.Failed(action, \"Failed to push the box\"); } else { state.move(Position.of(x , y-1), Position.of(x , y-2)); state.move(Position.of(x, y), Position.of(x , y-1)); state.checkpoint(); return new ActionResult.Success(action); } } else { state.move(Position.of(x, y), Position.of(x , y-1)); return new ActionResult.Success(action); } } else if (action instanceof Move.Down) { if (state.getEntity(Position.of(x , y+1)) instanceof Wall) { return new ActionResult.Failed(action, \"You hit a wall\"); } else if(state.getEntity(Position.of(x , y+1)) instanceof Player){ return new ActionResult.Failed(action, \"You hit another player\"); } else if (state.getEntity(Position.of(x , y+1)) instanceof Box) { if(((Box) state.getEntity(Position.of(x , y+1))).getPlayerId() != player.getId()) return new ActionResult.Failed(action, \"You cannot move other players' boxes\"); else if (state.getEntity(Position.of(x , y+2)) instanceof Wall || state.getEntity(Position.of(x , y+2)) instanceof Box) { return new ActionResult.Failed(action, \"Failed to push the box\"); } else { state.move(Position.of(x , y+1), Position.of(x , y+2)); state.move(Position.of(x, y), Position.of(x, y+1)); state.checkpoint(); return new ActionResult.Success(action); } } else { state.move(Position.of(x, y), Position.of(x , y+1)); return new ActionResult.Success(action); } } else if (action instanceof Move.Right) { if (state.getEntity(Position.of(x + 1, y)) instanceof Wall) { return new ActionResult.Failed(action, \"You hit a wall\"); } else if(state.getEntity(Position.of(x + 1, y)) instanceof Player){ return new ActionResult.Failed(action, \"You hit another player\"); } else if (state.getEntity(Position.of(x + 1, y)) instanceof Box) { if(((Box) state.getEntity(Position.of(x + 1, y))).getPlayerId() != player.getId()) return new ActionResult.Failed(action, \"You cannot move other players' boxes\"); else if (state.getEntity(Position.of(x + 2, y)) instanceof Wall || state.getEntity(Position.of(x + 2, y)) instanceof Box) { return new ActionResult.Failed(action, \"Failed to push the box\"); } else { state.move(Position.of(x + 1, y), Position.of(x + 2, y)); state.move(Position.of(x, y), Position.of(x + 1, y)); state.checkpoint(); return new ActionResult.Success(action); } } else { state.move(Position.of(x, y), Position.of(x + 1, y)); return new ActionResult.Success(action); } } } else if(action instanceof Undo){ if(!(state.getUndoQuota().isPresent())){ return new ActionResult.Failed(action,StringResources.INVALID_INPUT_MESSAGE); } else if(state.getUndoQuota().get() == 0) return new ActionResult.Failed(action,StringResources.UNDO_QUOTA_RUN_OUT); else { state.undo(); return new ActionResult.Success(action); } } ActionResult actionResult = new ActionResult.Failed(action, StringResources.INVALID_INPUT_MESSAGE); return actionResult; //throw new NotImplementedException(); }",
        "label": "P"
    },
    "2720": {
        "dataset": "COMP 3021",
        "project": "kfchanay",
        "bug_id": "11",
        "T": "void testHitAnotherPlayer() { String mapText = \"\"\" 233 ###### #A..@# #B...# #ab.@# ###### \"\"\"; final var testMap = TestHelper.parseGameMap(mapText); final var gameState = spy(new GameState(testMap)); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Move.Down(0)); verify(gameState, never()).move(any(), any()); }",
        "C": "public GameState(@NotNull GameMap map) { // TODO this.undoquota = map.undoLimit; this.maxHeight = map.maxHeight; this.maxWidth = map.maxWidth; this.destinations = map.destinations; this.map = map.map; this.id = map.id; checkpoint(); /* for(int i = 0; i< this.map.length; i++){ for (int j = 0; j < this.map[i].length; j++){ if(this.map[i][j] instanceof Wall) System.out.print(\"#\"); if(this.map[i][j] instanceof Player) System.out.print(\"A\"); if(this.map[i][j] instanceof Empty) System.out.print(\".\"); if(this.map[i][j] instanceof Box) System.out.print(\"a\"); } System.out.print(\"\\n\"); } System.out.print(\"\\n\"); */ //throw new NotImplementedException(); } public Down(int initiator) { super(initiator); }",
        "label": "P"
    },
    "2721": {
        "dataset": "COMP 3021",
        "project": "kfchanay",
        "bug_id": "12",
        "T": "void testUndoWithinQuota() { final var gameState = mock(GameState.class); when(gameState.getPlayerPositionById(anyInt())).thenReturn(Position.of(0, 0)); when(gameState.getUndoQuota()).thenReturn(Optional.of(1)); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Undo(0)); verify(gameState, times(1)).undo(); }",
        "C": "public Undo(int initiator) { super(initiator); }",
        "label": "P"
    },
    "2722": {
        "dataset": "COMP 3021",
        "project": "kfchanay",
        "bug_id": "13",
        "T": "void testInvalidInput() { final var game = new SokobanGameForTesting(mock(GameState.class)); final var message = String.valueOf(new Random().nextLong()); final var action = new InvalidInput(-1, message); final var result = game.feedActionForProcessing(action); }",
        "C": "public InvalidInput(int initiator, @NotNull String message) { super(initiator); this.message = message; }",
        "label": "P"
    },
    "2723": {
        "dataset": "COMP 3021",
        "project": "kfchanay",
        "bug_id": "14",
        "T": "void testUndoLimitParsing() { final var gameMap = TestHelper.parseGameMap(rectangularMap); }",
        "C": "",
        "label": "P"
    },
    "2724": {
        "dataset": "COMP 3021",
        "project": "kfchanay",
        "bug_id": "15",
        "T": "void testWidthForNonRectangularMap() { final var gameMap = TestHelper.parseGameMap(nonRectangularMap); }",
        "C": "",
        "label": "P"
    },
    "2725": {
        "dataset": "COMP 3021",
        "project": "kfchanay",
        "bug_id": "16",
        "T": "void testTwoPlayersMap() { final var twoPlayersMap = \"\"\" 233 ###### #A..@# #..B@# #....# #.a..# #..b.# ###### \"\"\"; final var gameMap = TestHelper.parseGameMap(twoPlayersMap); final var playerIds = gameMap.getPlayerIds(); final var expectedIds = new HashSet<Integer>(); expectedIds.add(0); expectedIds.add(1); }",
        "C": "public Set<Integer> getPlayerIds() { // TODO return id; // throw new NotImplementedException(); }",
        "label": "P"
    },
    "2726": {
        "dataset": "COMP 3021",
        "project": "kfchanay",
        "bug_id": "17",
        "T": "void testMapWithoutPlayer() { final var invalidMap = \"\"\" 233 ### #.# ### \"\"\"; } // @Tag(TestKind.HIDDEN) // @Test // void testUnmatchedPlayersAndBoxes() { // final var invalidMap = \"\"\" // 233 // ###### // #A..@# // #...@# // #a.b@# // #.a.@# // #..a.# // ###### // \"\"\"; // assertThrowsExactly(IllegalArgumentException.class, () -> TestHelper.parseGameMap(invalidMap)); // }",
        "C": "public TerminalRenderingEngine(PrintStream outputSteam) { this.outputSteam = outputSteam; }",
        "label": "P"
    },
    "2727": {
        "dataset": "COMP 3021",
        "project": "kfchanay",
        "bug_id": "18",
        "T": "void testManyPlayersMap() { final var manyPlayersMap = \"\"\" 233 ###### #A.P@@# #vCB@@# #.cpD@# #Ga.d@# #g.bV@# ###### \"\"\"; final var gameMap = TestHelper.parseGameMap(manyPlayersMap); final var playerIds = gameMap.getPlayerIds(); final var expectedIds = new HashSet<>(Arrays.asList( 0, 'P' - 'A', 'C' - 'A', 'B' - 'A', 'D' - 'A', 'G' - 'A', 'V' - 'A' )); }",
        "C": "public Set<Integer> getPlayerIds() { // TODO return id; // throw new NotImplementedException(); }",
        "label": "P"
    },
    "2728": {
        "dataset": "COMP 3021",
        "project": "kfchanay",
        "bug_id": "19",
        "T": "void testHeightForNonRectangularMap() { final var gameMap = TestHelper.parseGameMap(nonRectangularMap); }",
        "C": "",
        "label": "P"
    },
    "2729": {
        "dataset": "COMP 3021",
        "project": "kfchanay",
        "bug_id": "20",
        "T": "void testDuplicatedPlayers() { final var invalidMap = \"\"\" 233 ###### #A..@# #..A@# #....# #.a..# #..b.# ###### \"\"\"; }",
        "C": "",
        "label": "P"
    },
    "2730": {
        "dataset": "COMP 3021",
        "project": "kfchanay",
        "bug_id": "21",
        "T": "void testParseMapWithoutUndoLimit() { final var invalidMap = String.join(\"\\n\", rectangularMap.lines().skip(1).toList()); }",
        "C": "",
        "label": "P"
    },
    "2731": {
        "dataset": "COMP 3021",
        "project": "kfchanay",
        "bug_id": "22",
        "T": "void testInsufficientDestinations() { final var invalidMap = \"\"\" 233 ###### #A..@# #...@# #a...# #.a..# #..a.# ###### \"\"\"; }",
        "C": "",
        "label": "P"
    },
    "2732": {
        "dataset": "COMP 3021",
        "project": "kfchanay",
        "bug_id": "23",
        "T": "void testSuperLargeMap() { try { new GameMap(Integer.MAX_VALUE, Integer.MAX_VALUE, Collections.emptySet(), 0); } catch (OutOfMemoryError e) { throw new RuntimeException(e); } }); }",
        "C": "public GameMap(int maxWidth, int maxHeight, Set<Position> destinations, int undoLimit) { // TODO this.maxWidth = maxWidth; this.maxHeight = maxHeight; this.destinations = destinations; this.undoLimit = undoLimit; //throw new NotImplementedException(); } public TerminalRenderingEngine(PrintStream outputSteam) { this.outputSteam = outputSteam; }",
        "label": "P"
    },
    "2733": {
        "dataset": "COMP 3021",
        "project": "kfchanay",
        "bug_id": "24",
        "T": "void testInvalidUndoLimit() { final var invalidMap = \"\"\" -233 ###### #A..@# #...@# #a.b@# #.a.@# #..a.# ###### \"\"\"; }",
        "C": "",
        "label": "P"
    },
    "2734": {
        "dataset": "COMP 3021",
        "project": "kfchanay",
        "bug_id": "25",
        "T": "void testEmptyMap() { final var invalidMap = \"\"; }",
        "C": "",
        "label": "P"
    },
    "2735": {
        "dataset": "COMP 3021",
        "project": "kfchanay",
        "bug_id": "26",
        "T": "void testMove(String input, String name, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); } private InputStream fixValueStream(String content) { final var bytes = content.getBytes(StandardCharsets.UTF_8); return new ByteArrayInputStream(bytes); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. var inputLine = terminalScanner.nextLine(); inputLine = inputLine.toUpperCase(); int initiator = 0; switch(inputLine){ case \"W\": return new Move.Up(initiator); case \"A\": return new Move.Left(initiator); case \"S\": return new Move.Down(initiator); case \"D\": return new Move.Right(initiator); case \"H\": initiator = 1; return new Move.Left(initiator); case \"J\": initiator = 1; return new Move.Down(initiator); case \"K\": initiator = 1; return new Move.Up(initiator); case \"L\": initiator = 1; return new Move.Right(initiator); case \"U\": return new Undo(initiator); case \"EXIT\": return new Exit(initiator); default: } // TODO return new InvalidInput(initiator, StringResources.INVALID_INPUT_MESSAGE); // throw new NotImplementedException(); }",
        "label": "P"
    },
    "2736": {
        "dataset": "COMP 3021",
        "project": "kfchanay",
        "bug_id": "27",
        "T": "void testMove(String input, String name, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); } private InputStream fixValueStream(String content) { final var bytes = content.getBytes(StandardCharsets.UTF_8); return new ByteArrayInputStream(bytes); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. var inputLine = terminalScanner.nextLine(); inputLine = inputLine.toUpperCase(); int initiator = 0; switch(inputLine){ case \"W\": return new Move.Up(initiator); case \"A\": return new Move.Left(initiator); case \"S\": return new Move.Down(initiator); case \"D\": return new Move.Right(initiator); case \"H\": initiator = 1; return new Move.Left(initiator); case \"J\": initiator = 1; return new Move.Down(initiator); case \"K\": initiator = 1; return new Move.Up(initiator); case \"L\": initiator = 1; return new Move.Right(initiator); case \"U\": return new Undo(initiator); case \"EXIT\": return new Exit(initiator); default: } // TODO return new InvalidInput(initiator, StringResources.INVALID_INPUT_MESSAGE); // throw new NotImplementedException(); }",
        "label": "P"
    },
    "2737": {
        "dataset": "COMP 3021",
        "project": "kfchanay",
        "bug_id": "28",
        "T": "void testMove(String input, String name, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); } private InputStream fixValueStream(String content) { final var bytes = content.getBytes(StandardCharsets.UTF_8); return new ByteArrayInputStream(bytes); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. var inputLine = terminalScanner.nextLine(); inputLine = inputLine.toUpperCase(); int initiator = 0; switch(inputLine){ case \"W\": return new Move.Up(initiator); case \"A\": return new Move.Left(initiator); case \"S\": return new Move.Down(initiator); case \"D\": return new Move.Right(initiator); case \"H\": initiator = 1; return new Move.Left(initiator); case \"J\": initiator = 1; return new Move.Down(initiator); case \"K\": initiator = 1; return new Move.Up(initiator); case \"L\": initiator = 1; return new Move.Right(initiator); case \"U\": return new Undo(initiator); case \"EXIT\": return new Exit(initiator); default: } // TODO return new InvalidInput(initiator, StringResources.INVALID_INPUT_MESSAGE); // throw new NotImplementedException(); }",
        "label": "P"
    },
    "2738": {
        "dataset": "COMP 3021",
        "project": "kfchanay",
        "bug_id": "29",
        "T": "void testMove(String input, String name, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); } private InputStream fixValueStream(String content) { final var bytes = content.getBytes(StandardCharsets.UTF_8); return new ByteArrayInputStream(bytes); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. var inputLine = terminalScanner.nextLine(); inputLine = inputLine.toUpperCase(); int initiator = 0; switch(inputLine){ case \"W\": return new Move.Up(initiator); case \"A\": return new Move.Left(initiator); case \"S\": return new Move.Down(initiator); case \"D\": return new Move.Right(initiator); case \"H\": initiator = 1; return new Move.Left(initiator); case \"J\": initiator = 1; return new Move.Down(initiator); case \"K\": initiator = 1; return new Move.Up(initiator); case \"L\": initiator = 1; return new Move.Right(initiator); case \"U\": return new Undo(initiator); case \"EXIT\": return new Exit(initiator); default: } // TODO return new InvalidInput(initiator, StringResources.INVALID_INPUT_MESSAGE); // throw new NotImplementedException(); }",
        "label": "P"
    },
    "2739": {
        "dataset": "COMP 3021",
        "project": "kfchanay",
        "bug_id": "30",
        "T": "void testMove(String input, String name, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); } private InputStream fixValueStream(String content) { final var bytes = content.getBytes(StandardCharsets.UTF_8); return new ByteArrayInputStream(bytes); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. var inputLine = terminalScanner.nextLine(); inputLine = inputLine.toUpperCase(); int initiator = 0; switch(inputLine){ case \"W\": return new Move.Up(initiator); case \"A\": return new Move.Left(initiator); case \"S\": return new Move.Down(initiator); case \"D\": return new Move.Right(initiator); case \"H\": initiator = 1; return new Move.Left(initiator); case \"J\": initiator = 1; return new Move.Down(initiator); case \"K\": initiator = 1; return new Move.Up(initiator); case \"L\": initiator = 1; return new Move.Right(initiator); case \"U\": return new Undo(initiator); case \"EXIT\": return new Exit(initiator); default: } // TODO return new InvalidInput(initiator, StringResources.INVALID_INPUT_MESSAGE); // throw new NotImplementedException(); }",
        "label": "P"
    },
    "2740": {
        "dataset": "COMP 3021",
        "project": "kfchanay",
        "bug_id": "31",
        "T": "void testMove(String input, String name, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); } private InputStream fixValueStream(String content) { final var bytes = content.getBytes(StandardCharsets.UTF_8); return new ByteArrayInputStream(bytes); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. var inputLine = terminalScanner.nextLine(); inputLine = inputLine.toUpperCase(); int initiator = 0; switch(inputLine){ case \"W\": return new Move.Up(initiator); case \"A\": return new Move.Left(initiator); case \"S\": return new Move.Down(initiator); case \"D\": return new Move.Right(initiator); case \"H\": initiator = 1; return new Move.Left(initiator); case \"J\": initiator = 1; return new Move.Down(initiator); case \"K\": initiator = 1; return new Move.Up(initiator); case \"L\": initiator = 1; return new Move.Right(initiator); case \"U\": return new Undo(initiator); case \"EXIT\": return new Exit(initiator); default: } // TODO return new InvalidInput(initiator, StringResources.INVALID_INPUT_MESSAGE); // throw new NotImplementedException(); }",
        "label": "P"
    },
    "2741": {
        "dataset": "COMP 3021",
        "project": "kfchanay",
        "bug_id": "32",
        "T": "void testMove(String input, String name, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); } private InputStream fixValueStream(String content) { final var bytes = content.getBytes(StandardCharsets.UTF_8); return new ByteArrayInputStream(bytes); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. var inputLine = terminalScanner.nextLine(); inputLine = inputLine.toUpperCase(); int initiator = 0; switch(inputLine){ case \"W\": return new Move.Up(initiator); case \"A\": return new Move.Left(initiator); case \"S\": return new Move.Down(initiator); case \"D\": return new Move.Right(initiator); case \"H\": initiator = 1; return new Move.Left(initiator); case \"J\": initiator = 1; return new Move.Down(initiator); case \"K\": initiator = 1; return new Move.Up(initiator); case \"L\": initiator = 1; return new Move.Right(initiator); case \"U\": return new Undo(initiator); case \"EXIT\": return new Exit(initiator); default: } // TODO return new InvalidInput(initiator, StringResources.INVALID_INPUT_MESSAGE); // throw new NotImplementedException(); }",
        "label": "P"
    },
    "2742": {
        "dataset": "COMP 3021",
        "project": "kfchanay",
        "bug_id": "33",
        "T": "void testMove(String input, String name, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); } private InputStream fixValueStream(String content) { final var bytes = content.getBytes(StandardCharsets.UTF_8); return new ByteArrayInputStream(bytes); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. var inputLine = terminalScanner.nextLine(); inputLine = inputLine.toUpperCase(); int initiator = 0; switch(inputLine){ case \"W\": return new Move.Up(initiator); case \"A\": return new Move.Left(initiator); case \"S\": return new Move.Down(initiator); case \"D\": return new Move.Right(initiator); case \"H\": initiator = 1; return new Move.Left(initiator); case \"J\": initiator = 1; return new Move.Down(initiator); case \"K\": initiator = 1; return new Move.Up(initiator); case \"L\": initiator = 1; return new Move.Right(initiator); case \"U\": return new Undo(initiator); case \"EXIT\": return new Exit(initiator); default: } // TODO return new InvalidInput(initiator, StringResources.INVALID_INPUT_MESSAGE); // throw new NotImplementedException(); }",
        "label": "P"
    },
    "2743": {
        "dataset": "COMP 3021",
        "project": "kfchanay",
        "bug_id": "34",
        "T": "void testUndo(String input, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. var inputLine = terminalScanner.nextLine(); inputLine = inputLine.toUpperCase(); int initiator = 0; switch(inputLine){ case \"W\": return new Move.Up(initiator); case \"A\": return new Move.Left(initiator); case \"S\": return new Move.Down(initiator); case \"D\": return new Move.Right(initiator); case \"H\": initiator = 1; return new Move.Left(initiator); case \"J\": initiator = 1; return new Move.Down(initiator); case \"K\": initiator = 1; return new Move.Up(initiator); case \"L\": initiator = 1; return new Move.Right(initiator); case \"U\": return new Undo(initiator); case \"EXIT\": return new Exit(initiator); default: } // TODO return new InvalidInput(initiator, StringResources.INVALID_INPUT_MESSAGE); // throw new NotImplementedException(); }",
        "label": "P"
    },
    "2744": {
        "dataset": "COMP 3021",
        "project": "kfchanay",
        "bug_id": "35",
        "T": "void testInvalidInput() { final var inputStream = fixValueStream(\"blah blah\"); final var inputEngine = new TerminalInputEngine(inputStream); final var action = inputEngine.fetchAction(); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. var inputLine = terminalScanner.nextLine(); inputLine = inputLine.toUpperCase(); int initiator = 0; switch(inputLine){ case \"W\": return new Move.Up(initiator); case \"A\": return new Move.Left(initiator); case \"S\": return new Move.Down(initiator); case \"D\": return new Move.Right(initiator); case \"H\": initiator = 1; return new Move.Left(initiator); case \"J\": initiator = 1; return new Move.Down(initiator); case \"K\": initiator = 1; return new Move.Up(initiator); case \"L\": initiator = 1; return new Move.Right(initiator); case \"U\": return new Undo(initiator); case \"EXIT\": return new Exit(initiator); default: } // TODO return new InvalidInput(initiator, StringResources.INVALID_INPUT_MESSAGE); // throw new NotImplementedException(); }",
        "label": "P"
    },
    "2745": {
        "dataset": "COMP 3021",
        "project": "kfchanay",
        "bug_id": "36",
        "T": "void testUndoWhenThereIsNoMove() { final var gameState = new GameState(TestHelper.parseGameMap(\"\"\" 233 ###### #A.a@# #..a@# ###### \"\"\" )); gameState.undo(); } private Entity generateEntity(int key) { return switch (key % 4) { case 0 -> new Box(0); case 1 -> new Empty(); case 2 -> new Player(0); case 3 -> new Wall(); default -> throw new ShouldNotReachException(); }; }",
        "C": "public GameState(@NotNull GameMap map) { // TODO this.undoquota = map.undoLimit; this.maxHeight = map.maxHeight; this.maxWidth = map.maxWidth; this.destinations = map.destinations; this.map = map.map; this.id = map.id; checkpoint(); /* for(int i = 0; i< this.map.length; i++){ for (int j = 0; j < this.map[i].length; j++){ if(this.map[i][j] instanceof Wall) System.out.print(\"#\"); if(this.map[i][j] instanceof Player) System.out.print(\"A\"); if(this.map[i][j] instanceof Empty) System.out.print(\".\"); if(this.map[i][j] instanceof Box) System.out.print(\"a\"); } System.out.print(\"\\n\"); } System.out.print(\"\\n\"); */ //throw new NotImplementedException(); } public void undo() { // TODO int checkpointnumber = record.size(); if(checkpointnumber > 1){ if(undoquota > 0){ record.remove(checkpointnumber-1); this.map = getnewmap(record.get(checkpointnumber-2)); undoquota--; } if(undoquota == -1){ record.remove(checkpointnumber-1); this.map = getnewmap(record.get(checkpointnumber-2)); } } else return; } /** * Get the maximum width of the game map. * This should be the same as that in {@link GameMap} public TerminalRenderingEngine(PrintStream outputSteam) { this.outputSteam = outputSteam; } public Box(int playerId) { this.playerId = playerId; } public Player(int id) { this.id = id; } public ShouldNotReachException() { super(\"This branch should not be reached.\"); }",
        "label": "F"
    },
    "2746": {
        "dataset": "COMP 3021",
        "project": "kfchanay",
        "bug_id": "37",
        "T": "void testGetUndoUnlimited() { final var gameState = new GameState(TestHelper.parseGameMap(\"\"\" -1 ###### #.Aa@# #..a@# ###### \"\"\" )); }",
        "C": "public GameState(@NotNull GameMap map) { // TODO this.undoquota = map.undoLimit; this.maxHeight = map.maxHeight; this.maxWidth = map.maxWidth; this.destinations = map.destinations; this.map = map.map; this.id = map.id; checkpoint(); /* for(int i = 0; i< this.map.length; i++){ for (int j = 0; j < this.map[i].length; j++){ if(this.map[i][j] instanceof Wall) System.out.print(\"#\"); if(this.map[i][j] instanceof Player) System.out.print(\"A\"); if(this.map[i][j] instanceof Empty) System.out.print(\".\"); if(this.map[i][j] instanceof Box) System.out.print(\"a\"); } System.out.print(\"\\n\"); } System.out.print(\"\\n\"); */ //throw new NotImplementedException(); }",
        "label": "F"
    },
    "2747": {
        "dataset": "COMP 3021",
        "project": "kfchanay",
        "bug_id": "38",
        "T": "void testMapCopying() { final var maxWidth = 2333; final var maxHeight = 2333; final var random = new Random(); final var randomEntities = Stream.generate(() -> Position.of(random.nextInt(maxWidth), random.nextInt(maxHeight))) .distinct() .limit(100) .collect(Collectors.toMap(Function.identity(), it -> generateEntity(it.x()))); final var firstPos = randomEntities.keySet().stream().findFirst(); final var gameMap = new GameMap(maxWidth, maxHeight, Collections.singleton(firstPos.get()), 233); randomEntities.forEach(gameMap::putEntity); final var gameState = new GameState(gameMap); final var randomPosition = randomEntities.keySet().stream().findAny(); gameMap.putEntity(randomPosition.get(), new Empty()); randomEntities.forEach((p, e) -> assertEquals(e, gameState.getEntity(p))); }",
        "C": "public static @NotNull Position of(int x, int y) { return new Position(x, y); } public GameMap(int maxWidth, int maxHeight, Set<Position> destinations, int undoLimit) { // TODO this.maxWidth = maxWidth; this.maxHeight = maxHeight; this.destinations = destinations; this.undoLimit = undoLimit; //throw new NotImplementedException(); } public GameState(@NotNull GameMap map) { // TODO this.undoquota = map.undoLimit; this.maxHeight = map.maxHeight; this.maxWidth = map.maxWidth; this.destinations = map.destinations; this.map = map.map; this.id = map.id; checkpoint(); /* for(int i = 0; i< this.map.length; i++){ for (int j = 0; j < this.map[i].length; j++){ if(this.map[i][j] instanceof Wall) System.out.print(\"#\"); if(this.map[i][j] instanceof Player) System.out.print(\"A\"); if(this.map[i][j] instanceof Empty) System.out.print(\".\"); if(this.map[i][j] instanceof Box) System.out.print(\"a\"); } System.out.print(\"\\n\"); } System.out.print(\"\\n\"); */ //throw new NotImplementedException(); } public void putEntity(Position position, Entity entity) { // TODO map[position.y()][position.x()] = entity; //throw new NotImplementedException(); } public @Nullable Entity getEntity(@NotNull Position position) { // TODO return map[position.y()][position.x()]; //throw new NotImplementedException(); } /** * Get all box destination positions as a set in the game map. * This should be the same as that in {@link GameMap}",
        "label": "F"
    },
    "2748": {
        "dataset": "COMP 3021",
        "project": "kfchanay",
        "bug_id": "39",
        "T": "void testUndoWhenThereIsMoveButNoCheckpoint() { final var gameState = new GameState(TestHelper.parseGameMap(\"\"\" 233 ###### #A.a@# #..a@# ###### \"\"\" )); gameState.move(Position.of(1, 1), Position.of(2, 1)); gameState.undo(); }",
        "C": "public GameState(@NotNull GameMap map) { // TODO this.undoquota = map.undoLimit; this.maxHeight = map.maxHeight; this.maxWidth = map.maxWidth; this.destinations = map.destinations; this.map = map.map; this.id = map.id; checkpoint(); /* for(int i = 0; i< this.map.length; i++){ for (int j = 0; j < this.map[i].length; j++){ if(this.map[i][j] instanceof Wall) System.out.print(\"#\"); if(this.map[i][j] instanceof Player) System.out.print(\"A\"); if(this.map[i][j] instanceof Empty) System.out.print(\".\"); if(this.map[i][j] instanceof Box) System.out.print(\"a\"); } System.out.print(\"\\n\"); } System.out.print(\"\\n\"); */ //throw new NotImplementedException(); } public void move(Position from, Position to) { // TODO int tempid; if(map[from.y()][from.x()] instanceof Player){ tempid = ((Player) map[from.y()][from.x()]).getId(); map[from.y()][from.x()] = new Empty(); map[to.y()][to.x()] = new Player(tempid); } else if(map[from.y()][from.x()] instanceof Box){ tempid = ((Box) map[from.y()][from.x()]).getPlayerId(); map[from.y()][from.x()] = new Empty(); map[to.y()][to.x()] = new Box(tempid); } /* for(int i = 0; i< map.length; i++){ for (int j = 0; j < map[i].length; j++){ if(map[i][j] instanceof Wall) System.out.print(\"#\"); if(map[i][j] instanceof Player) System.out.print(\"A\"); if(map[i][j] instanceof Empty) System.out.print(\".\"); if(map[i][j] instanceof Box) System.out.print(\"a\"); } System.out.print(\"\\n\"); } System.out.print(\"\\n\"); */ //throw new NotImplementedException(); } /** * Record a checkpoint of the game state, including: * <li>All current positions of entities in the game map.</li> * <li>Current undo quota</li> * <p> * Checkpoint is used in {@link GameState#undo()} public static @NotNull Position of(int x, int y) { return new Position(x, y); } public void undo() { // TODO int checkpointnumber = record.size(); if(checkpointnumber > 1){ if(undoquota > 0){ record.remove(checkpointnumber-1); this.map = getnewmap(record.get(checkpointnumber-2)); undoquota--; } if(undoquota == -1){ record.remove(checkpointnumber-1); this.map = getnewmap(record.get(checkpointnumber-2)); } } else return; } /** * Get the maximum width of the game map. * This should be the same as that in {@link GameMap}",
        "label": "F"
    },
    "2749": {
        "dataset": "COMP 3021",
        "project": "kfchanay",
        "bug_id": "40",
        "T": "void testGameExit() { final var gameState = mock(GameState.class); final var inputEngine = mock(TerminalInputEngine.class); final var renderingEngine = mock(TerminalRenderingEngine.class); when(gameState.isWin()).thenReturn(false, false, false); when(inputEngine.fetchAction()) .thenReturn(new InvalidInput(0, \"\"), new InvalidInput(0, \"\"), new Exit(0)); final var game = new TerminalSokobanGame(gameState, inputEngine, renderingEngine); game.run(); verify(renderingEngine, atLeastOnce()).message(any()); }",
        "C": "public InvalidInput(int initiator, @NotNull String message) { super(initiator); this.message = message; } public Exit(int initiator) { super(initiator); } public TerminalSokobanGame(GameState gameState, TerminalInputEngine inputEngine, TerminalRenderingEngine renderingEngine) { super(gameState); this.inputEngine = inputEngine; this.renderingEngine = renderingEngine; // TODO // Check the number of players if(gameState.getAllPlayerPositions().size() > 2) throw new IllegalArgumentException(); //throw new NotImplementedException(); } public void run() { // TODO renderingEngine.message(StringResources.GAME_READY_MESSAGE); // int countloop = 0; boolean youwin = true; boolean gameexit = true; while(true){ renderingEngine.render(super.state); if(!gameexit){ renderingEngine.message(StringResources.GAME_EXIT_MESSAGE); if(!youwin) renderingEngine.message(StringResources.WIN_MESSAGE); break; } if(super.state.getUndoQuota().isPresent()) renderingEngine.message(String.format(StringResources.UNDO_QUOTA_TEMPLATE,String.valueOf(state.getUndoQuota().get()))); // System.out.printf(StringResources.UNDO_QUOTA_TEMPLATE,StringResources.UNDO_QUOTA_UNLIMITED); else if(super.state.getUndoQuota().isPresent() && super.state.getUndoQuota().get() == -1) renderingEngine.message(String.format(StringResources.UNDO_QUOTA_TEMPLATE,StringResources.UNDO_QUOTA_UNLIMITED)); Action action = inputEngine.fetchAction(); //System.out.print(countloop + \"\\n\"); if(action instanceof InvalidInput){ // System.out.print(countloop + \"invalidinput\\n\"); renderingEngine.message(StringResources.INVALID_INPUT_MESSAGE); }else if(action instanceof Exit){ // System.out.print(countloop + \"exit\\n\"); gameexit = false; } else{ // System.out.print(countloop + \"move or undo\\n\"); ActionResult result = super.processAction(action); if(result instanceof ActionResult.Success){ if(super.shouldStop()){ renderingEngine.message(StringResources.WIN_MESSAGE); youwin = false; gameexit = false; } }else if (result instanceof ActionResult.Failed){ renderingEngine.message(((ActionResult.Failed) result).getReason()); } } //countloop++; } //throw new NotImplementedException(); }",
        "label": "P"
    },
    "2750": {
        "dataset": "COMP 3021",
        "project": "kfchanay",
        "bug_id": "41",
        "T": "void testGameWin() { final var gameState = mock(GameState.class); final var inputEngine = mock(TerminalInputEngine.class); final var renderingEngine = mock(TerminalRenderingEngine.class); when(gameState.isWin()).thenReturn(false, false, false, true); when(inputEngine.fetchAction()) .thenReturn(new InvalidInput(0, \"\")); final var game = new TerminalSokobanGame(gameState, inputEngine, renderingEngine); game.run(); verify(gameState, atLeastOnce()).isWin(); verify(renderingEngine, atLeastOnce()).message(any()); }",
        "C": "public InvalidInput(int initiator, @NotNull String message) { super(initiator); this.message = message; } public TerminalSokobanGame(GameState gameState, TerminalInputEngine inputEngine, TerminalRenderingEngine renderingEngine) { super(gameState); this.inputEngine = inputEngine; this.renderingEngine = renderingEngine; // TODO // Check the number of players if(gameState.getAllPlayerPositions().size() > 2) throw new IllegalArgumentException(); //throw new NotImplementedException(); } public void run() { // TODO renderingEngine.message(StringResources.GAME_READY_MESSAGE); // int countloop = 0; boolean youwin = true; boolean gameexit = true; while(true){ renderingEngine.render(super.state); if(!gameexit){ renderingEngine.message(StringResources.GAME_EXIT_MESSAGE); if(!youwin) renderingEngine.message(StringResources.WIN_MESSAGE); break; } if(super.state.getUndoQuota().isPresent()) renderingEngine.message(String.format(StringResources.UNDO_QUOTA_TEMPLATE,String.valueOf(state.getUndoQuota().get()))); // System.out.printf(StringResources.UNDO_QUOTA_TEMPLATE,StringResources.UNDO_QUOTA_UNLIMITED); else if(super.state.getUndoQuota().isPresent() && super.state.getUndoQuota().get() == -1) renderingEngine.message(String.format(StringResources.UNDO_QUOTA_TEMPLATE,StringResources.UNDO_QUOTA_UNLIMITED)); Action action = inputEngine.fetchAction(); //System.out.print(countloop + \"\\n\"); if(action instanceof InvalidInput){ // System.out.print(countloop + \"invalidinput\\n\"); renderingEngine.message(StringResources.INVALID_INPUT_MESSAGE); }else if(action instanceof Exit){ // System.out.print(countloop + \"exit\\n\"); gameexit = false; } else{ // System.out.print(countloop + \"move or undo\\n\"); ActionResult result = super.processAction(action); if(result instanceof ActionResult.Success){ if(super.shouldStop()){ renderingEngine.message(StringResources.WIN_MESSAGE); youwin = false; gameexit = false; } }else if (result instanceof ActionResult.Failed){ renderingEngine.message(((ActionResult.Failed) result).getReason()); } } //countloop++; } //throw new NotImplementedException(); }",
        "label": "F"
    },
    "2751": {
        "dataset": "COMP 3021",
        "project": "kfchanay",
        "bug_id": "42",
        "T": "void testMoreThanTwoPlayers() { final var gameState = mock(GameState.class); final var inputEngine = mock(TerminalInputEngine.class); final var renderingEngine = mock(TerminalRenderingEngine.class); when(gameState.getAllPlayerPositions()).thenReturn(new HashSet<>(Arrays.asList(Position.of(1, 1), Position.of(1, 2), Position.of(1, 3)))); }",
        "C": "public static @NotNull Position of(int x, int y) { return new Position(x, y); }",
        "label": "P"
    },
    "2752": {
        "dataset": "COMP 3021",
        "project": "kyloao",
        "bug_id": "0",
        "T": "void moveUp() { Position.of(233, 232), new Move.Up(-1).nextPosition(pos) ); }",
        "C": "public static @NotNull Position of(int x, int y) { return new Position(x, y); } public Up(int initiator) { super(initiator); }",
        "label": "P"
    },
    "2753": {
        "dataset": "COMP 3021",
        "project": "kyloao",
        "bug_id": "1",
        "T": "void moveDown() { Position.of(233, 234), new Move.Down(-1).nextPosition(pos) ); }",
        "C": "public static @NotNull Position of(int x, int y) { return new Position(x, y); } public Down(int initiator) { super(initiator); }",
        "label": "P"
    },
    "2754": {
        "dataset": "COMP 3021",
        "project": "kyloao",
        "bug_id": "2",
        "T": "void moveRight() { Position.of(234, 233), new Move.Right(-1).nextPosition(pos) ); }",
        "C": "public static @NotNull Position of(int x, int y) { return new Position(x, y); } public Right(int initiator) { super(initiator); }",
        "label": "P"
    },
    "2755": {
        "dataset": "COMP 3021",
        "project": "kyloao",
        "bug_id": "3",
        "T": "void testExceedingUndoQuota() { final var gameState = mock(GameState.class); when(gameState.getPlayerPositionById(anyInt())).thenReturn(Position.of(0, 0)); when(gameState.getUndoQuota()).thenReturn(Optional.of(0)); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Undo(0)); }",
        "C": "public Undo(int initiator) { super(initiator); }",
        "label": "P"
    },
    "2756": {
        "dataset": "COMP 3021",
        "project": "kyloao",
        "bug_id": "4",
        "T": "void testExit() { final var gameState = mock(GameState.class); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Exit(0)); }",
        "C": "public Exit(int initiator) { super(initiator); }",
        "label": "P"
    },
    "2757": {
        "dataset": "COMP 3021",
        "project": "kyloao",
        "bug_id": "5",
        "T": "void testUndoUnlimited() { final var gameState = mock(GameState.class); when(gameState.getPlayerPositionById(anyInt())).thenReturn(Position.of(0, 0)); when(gameState.getUndoQuota()).thenReturn(Optional.empty()); final var game = new SokobanGameForTesting(gameState); for (int i = 0; i < 10000; i++) { final var result = game.feedActionForProcessing(new Undo(0)); } verify(gameState, times(10000)).undo(); }",
        "C": "public TerminalRenderingEngine(PrintStream outputSteam) { this.outputSteam = outputSteam; } public Undo(int initiator) { super(initiator); }",
        "label": "F"
    },
    "2758": {
        "dataset": "COMP 3021",
        "project": "kyloao",
        "bug_id": "6",
        "T": "void testPushOtherPlayerBox() { String mapText = \"\"\" 233 ###### #AB.@# #b.a.# #@...# ###### \"\"\"; final var testMap = TestHelper.parseGameMap(mapText); final var gameState = spy(new GameState(testMap)); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Move.Down(0)); verify(gameState, never()).move(any(), any()); }",
        "C": "public GameState(@NotNull GameMap map) { // TODO this.map = map; this.undoLimit = map.getUndoLimit(); final Entity[][] entities = new Entity[map.getMaxHeight()][map.getMaxWidth()]; for (int i = 0; i < map.getMaxHeight(); i++) { for (int c = 0; c < map.getMaxWidth(); c++) { entities[i][c] = map.getEntity(Position.of(c,i)); } } this.snapshots = new ArrayList<>(); this.snapshots.add(new GameSnapshot(map.getMaxHeight(), map.getMaxWidth(), entities)); this.snapshots.add(new GameSnapshot(map.getMaxHeight(), map.getMaxWidth(), entities)); } public Down(int initiator) { super(initiator); }",
        "label": "F"
    },
    "2759": {
        "dataset": "COMP 3021",
        "project": "kyloao",
        "bug_id": "7",
        "T": "void testMoveNonExistingPlayer() { String mapText = \"\"\" 233 ###### #A..@# #a...# ##...# ###### \"\"\"; final var testMap = TestHelper.parseGameMap(mapText); final var gameState = spy(new GameState(testMap)); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Move.Down(23)); }",
        "C": "public GameState(@NotNull GameMap map) { // TODO this.map = map; this.undoLimit = map.getUndoLimit(); final Entity[][] entities = new Entity[map.getMaxHeight()][map.getMaxWidth()]; for (int i = 0; i < map.getMaxHeight(); i++) { for (int c = 0; c < map.getMaxWidth(); c++) { entities[i][c] = map.getEntity(Position.of(c,i)); } } this.snapshots = new ArrayList<>(); this.snapshots.add(new GameSnapshot(map.getMaxHeight(), map.getMaxWidth(), entities)); this.snapshots.add(new GameSnapshot(map.getMaxHeight(), map.getMaxWidth(), entities)); } public Down(int initiator) { super(initiator); }",
        "label": "P"
    },
    "2760": {
        "dataset": "COMP 3021",
        "project": "kyloao",
        "bug_id": "8",
        "T": "void testCheckpointWhenNeed() { final var gameState = spy(new GameState(TestHelper.parseGameMap(\"\"\" 233 ###### #.Aa@# #..a@# ###### \"\"\" ))); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Move.Right(0)); verify(gameState, times(1)).checkpoint(); }",
        "C": "public GameState(@NotNull GameMap map) { // TODO this.map = map; this.undoLimit = map.getUndoLimit(); final Entity[][] entities = new Entity[map.getMaxHeight()][map.getMaxWidth()]; for (int i = 0; i < map.getMaxHeight(); i++) { for (int c = 0; c < map.getMaxWidth(); c++) { entities[i][c] = map.getEntity(Position.of(c,i)); } } this.snapshots = new ArrayList<>(); this.snapshots.add(new GameSnapshot(map.getMaxHeight(), map.getMaxWidth(), entities)); this.snapshots.add(new GameSnapshot(map.getMaxHeight(), map.getMaxWidth(), entities)); } public Right(int initiator) { super(initiator); }",
        "label": "P"
    },
    "2761": {
        "dataset": "COMP 3021",
        "project": "kyloao",
        "bug_id": "9",
        "T": "void testPushBoxAgainstWall() { String mapText = \"\"\" 233 ###### #A..@# #a...# ##...# ###### \"\"\"; final var testMap = TestHelper.parseGameMap(mapText); final var gameState = spy(new GameState(testMap)); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Move.Down(0)); verify(gameState, never()).move(any(), any()); }",
        "C": "public GameState(@NotNull GameMap map) { // TODO this.map = map; this.undoLimit = map.getUndoLimit(); final Entity[][] entities = new Entity[map.getMaxHeight()][map.getMaxWidth()]; for (int i = 0; i < map.getMaxHeight(); i++) { for (int c = 0; c < map.getMaxWidth(); c++) { entities[i][c] = map.getEntity(Position.of(c,i)); } } this.snapshots = new ArrayList<>(); this.snapshots.add(new GameSnapshot(map.getMaxHeight(), map.getMaxWidth(), entities)); this.snapshots.add(new GameSnapshot(map.getMaxHeight(), map.getMaxWidth(), entities)); } public Down(int initiator) { super(initiator); }",
        "label": "P"
    },
    "2762": {
        "dataset": "COMP 3021",
        "project": "kyloao",
        "bug_id": "10",
        "T": "void testCheckpointWhenNotNeed() { final var gameState = spy(new GameState(TestHelper.parseGameMap(\"\"\" 233 ###### #A.a@# #..a@# ###### \"\"\" ))); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Move.Right(0)); verify(gameState, never()).checkpoint(); } private static class SokobanGameForTesting extends AbstractSokobanGame { protected SokobanGameForTesting(GameState gameState) { super(gameState); } @Override public void run() { } public ActionResult feedActionForProcessing(Action action) { return processAction(action); } }",
        "C": "public GameState(@NotNull GameMap map) { // TODO this.map = map; this.undoLimit = map.getUndoLimit(); final Entity[][] entities = new Entity[map.getMaxHeight()][map.getMaxWidth()]; for (int i = 0; i < map.getMaxHeight(); i++) { for (int c = 0; c < map.getMaxWidth(); c++) { entities[i][c] = map.getEntity(Position.of(c,i)); } } this.snapshots = new ArrayList<>(); this.snapshots.add(new GameSnapshot(map.getMaxHeight(), map.getMaxWidth(), entities)); this.snapshots.add(new GameSnapshot(map.getMaxHeight(), map.getMaxWidth(), entities)); } public Right(int initiator) { super(initiator); } public void run() { // TODO renderingEngine.message(StringResources.GAME_READY_MESSAGE); while (true) { renderingEngine.render(state); if (shouldStop()) break; /** Print undoLimit */ String undoLimit; if (state.getUndoQuota().isPresent()) { undoLimit = String.format(StringResources.UNDO_QUOTA_TEMPLATE, state.getUndoQuota()); } else { undoLimit = StringResources.UNDO_QUOTA_UNLIMITED; } renderingEngine.message(undoLimit + \">>>\"); /** Process Action */ var action = inputEngine.fetchAction(); var actionResult = processAction(action); if (actionResult instanceof ActionResult.Failed) { renderingEngine.message(((ActionResult.Failed) actionResult).getReason()); } } /** Exit game */ renderingEngine.message(StringResources.GAME_EXIT_MESSAGE); if (state.isWin()) { renderingEngine.message(StringResources.WIN_MESSAGE); } } protected ActionResult processAction(@NotNull Action action) { // TODO /** Move Action */ if (action instanceof Move) { Move move = (Move) action; int playerID = move.getInitiator(); // Check if the player is valid if (state.getPlayerPositionById(playerID) == null) return new ActionResult.Failed(action, StringResources.PLAYER_NOT_FOUND); Position currPos = state.getPlayerPositionById(playerID); Position nextPos = move.nextPosition(currPos); Entity entity = state.getEntity(nextPos); // Depends on the entity, different actions will be taken if (entity instanceof Empty) { state.move(currPos, nextPos); return new ActionResult.Success(action); } else if (entity instanceof Wall) return new ActionResult.Failed(action, StringResources.INVALID_INPUT_MESSAGE); else if (entity instanceof Box) { Position nextNextPos = move.nextPosition(nextPos); if (state.getEntity(nextNextPos) instanceof Empty) { state.move(nextPos, move.nextPosition(nextPos)); state.move(currPos, nextPos); state.checkpoint(); return new ActionResult.Success(action); } else return new ActionResult.Failed(action, StringResources.INVALID_INPUT_MESSAGE); } else if (entity instanceof Player) return new ActionResult.Failed(action, StringResources.INVALID_INPUT_MESSAGE); else return new ActionResult.Failed(action, StringResources.INVALID_INPUT_MESSAGE); /** Undo Action */ } else if (action instanceof Undo) if (state.getUndoLimit().orElse(-1) > 0) { state.undo(); return new ActionResult.Success(action); } else return new ActionResult.Failed(action, StringResources.UNDO_QUOTA_RUN_OUT); /** InvalidInput Action */ else if (action instanceof InvalidInput) return new ActionResult.Failed(action, ((InvalidInput) action).getMessage()); /** Exit Action */ else if (action instanceof Exit) { exitGame = true; return new ActionResult.Success(action); /** Error if Action is not the above */ } else return new ActionResult.Failed(action, StringResources.INVALID_INPUT_MESSAGE); }",
        "label": "P"
    },
    "2763": {
        "dataset": "COMP 3021",
        "project": "kyloao",
        "bug_id": "11",
        "T": "void testHitAnotherPlayer() { String mapText = \"\"\" 233 ###### #A..@# #B...# #ab.@# ###### \"\"\"; final var testMap = TestHelper.parseGameMap(mapText); final var gameState = spy(new GameState(testMap)); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Move.Down(0)); verify(gameState, never()).move(any(), any()); }",
        "C": "public GameState(@NotNull GameMap map) { // TODO this.map = map; this.undoLimit = map.getUndoLimit(); final Entity[][] entities = new Entity[map.getMaxHeight()][map.getMaxWidth()]; for (int i = 0; i < map.getMaxHeight(); i++) { for (int c = 0; c < map.getMaxWidth(); c++) { entities[i][c] = map.getEntity(Position.of(c,i)); } } this.snapshots = new ArrayList<>(); this.snapshots.add(new GameSnapshot(map.getMaxHeight(), map.getMaxWidth(), entities)); this.snapshots.add(new GameSnapshot(map.getMaxHeight(), map.getMaxWidth(), entities)); } public Down(int initiator) { super(initiator); }",
        "label": "P"
    },
    "2764": {
        "dataset": "COMP 3021",
        "project": "kyloao",
        "bug_id": "12",
        "T": "void testUndoWithinQuota() { final var gameState = mock(GameState.class); when(gameState.getPlayerPositionById(anyInt())).thenReturn(Position.of(0, 0)); when(gameState.getUndoQuota()).thenReturn(Optional.of(1)); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Undo(0)); verify(gameState, times(1)).undo(); }",
        "C": "public Undo(int initiator) { super(initiator); }",
        "label": "F"
    },
    "2765": {
        "dataset": "COMP 3021",
        "project": "kyloao",
        "bug_id": "13",
        "T": "void testInvalidInput() { final var game = new SokobanGameForTesting(mock(GameState.class)); final var message = String.valueOf(new Random().nextLong()); final var action = new InvalidInput(-1, message); final var result = game.feedActionForProcessing(action); }",
        "C": "public InvalidInput(int initiator, @NotNull String message) { super(initiator); this.message = message; }",
        "label": "P"
    },
    "2766": {
        "dataset": "COMP 3021",
        "project": "kyloao",
        "bug_id": "14",
        "T": "void testUndoLimitParsing() { final var gameMap = TestHelper.parseGameMap(rectangularMap); }",
        "C": "",
        "label": "P"
    },
    "2767": {
        "dataset": "COMP 3021",
        "project": "kyloao",
        "bug_id": "15",
        "T": "void testWidthForNonRectangularMap() { final var gameMap = TestHelper.parseGameMap(nonRectangularMap); }",
        "C": "",
        "label": "P"
    },
    "2768": {
        "dataset": "COMP 3021",
        "project": "kyloao",
        "bug_id": "16",
        "T": "void testTwoPlayersMap() { final var twoPlayersMap = \"\"\" 233 ###### #A..@# #..B@# #....# #.a..# #..b.# ###### \"\"\"; final var gameMap = TestHelper.parseGameMap(twoPlayersMap); final var playerIds = gameMap.getPlayerIds(); final var expectedIds = new HashSet<Integer>(); expectedIds.add(0); expectedIds.add(1); }",
        "C": "public Set<Integer> getPlayerIds() { // TODO return playerIds; }",
        "label": "P"
    },
    "2769": {
        "dataset": "COMP 3021",
        "project": "kyloao",
        "bug_id": "17",
        "T": "void testMapWithoutPlayer() { final var invalidMap = \"\"\" 233 ### #.# ### \"\"\"; } // @Tag(TestKind.HIDDEN) // @Test // void testUnmatchedPlayersAndBoxes() { // final var invalidMap = \"\"\" // 233 // ###### // #A..@# // #...@# // #a.b@# // #.a.@# // #..a.# // ###### // \"\"\"; // assertThrowsExactly(IllegalArgumentException.class, () -> TestHelper.parseGameMap(invalidMap)); // }",
        "C": "public TerminalRenderingEngine(PrintStream outputSteam) { this.outputSteam = outputSteam; }",
        "label": "P"
    },
    "2770": {
        "dataset": "COMP 3021",
        "project": "kyloao",
        "bug_id": "18",
        "T": "void testManyPlayersMap() { final var manyPlayersMap = \"\"\" 233 ###### #A.P@@# #vCB@@# #.cpD@# #Ga.d@# #g.bV@# ###### \"\"\"; final var gameMap = TestHelper.parseGameMap(manyPlayersMap); final var playerIds = gameMap.getPlayerIds(); final var expectedIds = new HashSet<>(Arrays.asList( 0, 'P' - 'A', 'C' - 'A', 'B' - 'A', 'D' - 'A', 'G' - 'A', 'V' - 'A' )); }",
        "C": "public Set<Integer> getPlayerIds() { // TODO return playerIds; }",
        "label": "P"
    },
    "2771": {
        "dataset": "COMP 3021",
        "project": "kyloao",
        "bug_id": "19",
        "T": "void testHeightForNonRectangularMap() { final var gameMap = TestHelper.parseGameMap(nonRectangularMap); }",
        "C": "",
        "label": "P"
    },
    "2772": {
        "dataset": "COMP 3021",
        "project": "kyloao",
        "bug_id": "20",
        "T": "void testDuplicatedPlayers() { final var invalidMap = \"\"\" 233 ###### #A..@# #..A@# #....# #.a..# #..b.# ###### \"\"\"; }",
        "C": "",
        "label": "P"
    },
    "2773": {
        "dataset": "COMP 3021",
        "project": "kyloao",
        "bug_id": "21",
        "T": "void testParseMapWithoutUndoLimit() { final var invalidMap = String.join(\"\\n\", rectangularMap.lines().skip(1).toList()); }",
        "C": "",
        "label": "P"
    },
    "2774": {
        "dataset": "COMP 3021",
        "project": "kyloao",
        "bug_id": "22",
        "T": "void testInsufficientDestinations() { final var invalidMap = \"\"\" 233 ###### #A..@# #...@# #a...# #.a..# #..a.# ###### \"\"\"; }",
        "C": "",
        "label": "P"
    },
    "2775": {
        "dataset": "COMP 3021",
        "project": "kyloao",
        "bug_id": "23",
        "T": "void testSuperLargeMap() { try { new GameMap(Integer.MAX_VALUE, Integer.MAX_VALUE, Collections.emptySet(), 0); } catch (OutOfMemoryError e) { throw new RuntimeException(e); } }); }",
        "C": "public GameMap(int maxWidth, int maxHeight, Set<Position> destinations, int undoLimit) { // TODO this.maxHeight = maxHeight; this.maxWidth = maxWidth; this.destinations = destinations; this.undoLimit = undoLimit; } /** * Parses the map from a string representation. * * The first line is undo limit. * Starting from the second line, the game map is represented as follows, * <li># represents a {@link Wall}</li> * <li>@ represents a box destination.</li> * <li>Any upper-case letter represents a {@link Player}.</li> * <li> * Any lower-caseb letter represents a {@link Box} that is only movable by the player with the corresponding upper-case letter. * * For instance, ox \"a\" can only be moved by player \"A\" and not movable by player \"B\". * </li> * <li>. represents an {@link Empty} position in the map, meaning there is no player or box currently at this position.</li> * <p> * Notes: * <li> * There can be at most 26 players. * All implementations of classes in the hk.ust.comp3021.game package should support up to 26 players. * </li> * <li> * For simplicity, we assume the given map is bounded with a closed boundary. * There is no need to check this point. * </li> * <li> * Example maps can be found in \"src/main/resources\". * </li> * * @param mapText The string representation. * @return The parsed GameMap object. * @throws IllegalArgumentException if undo limit is negative but not -1. * @throws IllegalArgumentException if there are multiple same upper-case letters, i.e., one player can only exist at one position. * @throws IllegalArgumentException if there are no players in the map. * @throws IllegalArgumentException if the number of boxes is not equal to the number of box destinations. * @throws IllegalArgumentException if there are boxes whose {@link Box#getPlayerId()} public TerminalRenderingEngine(PrintStream outputSteam) { this.outputSteam = outputSteam; }",
        "label": "P"
    },
    "2776": {
        "dataset": "COMP 3021",
        "project": "kyloao",
        "bug_id": "24",
        "T": "void testInvalidUndoLimit() { final var invalidMap = \"\"\" -233 ###### #A..@# #...@# #a.b@# #.a.@# #..a.# ###### \"\"\"; }",
        "C": "",
        "label": "P"
    },
    "2777": {
        "dataset": "COMP 3021",
        "project": "kyloao",
        "bug_id": "25",
        "T": "void testEmptyMap() { final var invalidMap = \"\"; }",
        "C": "",
        "label": "P"
    },
    "2778": {
        "dataset": "COMP 3021",
        "project": "kyloao",
        "bug_id": "26",
        "T": "void testMove(String input, String name, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); } private InputStream fixValueStream(String content) { final var bytes = content.getBytes(StandardCharsets.UTF_8); return new ByteArrayInputStream(bytes); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine().toLowerCase(); // TODO if (inputLine.equals(\"w\")) return new Move.Up(0); else if (inputLine.equals(\"a\")) return new Move.Left(0); else if (inputLine.equals(\"s\")) return new Move.Down(0); else if (inputLine.equals(\"d\")) return new Move.Right(0); else if (inputLine.equals(\"k\")) return new Move.Up(1); else if (inputLine.equals(\"h\")) return new Move.Left(1); else if (inputLine.equals(\"j\")) return new Move.Down(1); else if (inputLine.equals(\"l\")) return new Move.Right(1); else if (inputLine.equals(\"u\")) return new Undo(-1); else if (inputLine.equals(StringResources.EXIT_COMMAND_TEXT)) return new Exit(-1); else return new InvalidInput(-1, StringResources.INVALID_INPUT_MESSAGE); }",
        "label": "P"
    },
    "2779": {
        "dataset": "COMP 3021",
        "project": "kyloao",
        "bug_id": "27",
        "T": "void testMove(String input, String name, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); } private InputStream fixValueStream(String content) { final var bytes = content.getBytes(StandardCharsets.UTF_8); return new ByteArrayInputStream(bytes); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine().toLowerCase(); // TODO if (inputLine.equals(\"w\")) return new Move.Up(0); else if (inputLine.equals(\"a\")) return new Move.Left(0); else if (inputLine.equals(\"s\")) return new Move.Down(0); else if (inputLine.equals(\"d\")) return new Move.Right(0); else if (inputLine.equals(\"k\")) return new Move.Up(1); else if (inputLine.equals(\"h\")) return new Move.Left(1); else if (inputLine.equals(\"j\")) return new Move.Down(1); else if (inputLine.equals(\"l\")) return new Move.Right(1); else if (inputLine.equals(\"u\")) return new Undo(-1); else if (inputLine.equals(StringResources.EXIT_COMMAND_TEXT)) return new Exit(-1); else return new InvalidInput(-1, StringResources.INVALID_INPUT_MESSAGE); }",
        "label": "P"
    },
    "2780": {
        "dataset": "COMP 3021",
        "project": "kyloao",
        "bug_id": "28",
        "T": "void testMove(String input, String name, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); } private InputStream fixValueStream(String content) { final var bytes = content.getBytes(StandardCharsets.UTF_8); return new ByteArrayInputStream(bytes); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine().toLowerCase(); // TODO if (inputLine.equals(\"w\")) return new Move.Up(0); else if (inputLine.equals(\"a\")) return new Move.Left(0); else if (inputLine.equals(\"s\")) return new Move.Down(0); else if (inputLine.equals(\"d\")) return new Move.Right(0); else if (inputLine.equals(\"k\")) return new Move.Up(1); else if (inputLine.equals(\"h\")) return new Move.Left(1); else if (inputLine.equals(\"j\")) return new Move.Down(1); else if (inputLine.equals(\"l\")) return new Move.Right(1); else if (inputLine.equals(\"u\")) return new Undo(-1); else if (inputLine.equals(StringResources.EXIT_COMMAND_TEXT)) return new Exit(-1); else return new InvalidInput(-1, StringResources.INVALID_INPUT_MESSAGE); }",
        "label": "P"
    },
    "2781": {
        "dataset": "COMP 3021",
        "project": "kyloao",
        "bug_id": "29",
        "T": "void testMove(String input, String name, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); } private InputStream fixValueStream(String content) { final var bytes = content.getBytes(StandardCharsets.UTF_8); return new ByteArrayInputStream(bytes); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine().toLowerCase(); // TODO if (inputLine.equals(\"w\")) return new Move.Up(0); else if (inputLine.equals(\"a\")) return new Move.Left(0); else if (inputLine.equals(\"s\")) return new Move.Down(0); else if (inputLine.equals(\"d\")) return new Move.Right(0); else if (inputLine.equals(\"k\")) return new Move.Up(1); else if (inputLine.equals(\"h\")) return new Move.Left(1); else if (inputLine.equals(\"j\")) return new Move.Down(1); else if (inputLine.equals(\"l\")) return new Move.Right(1); else if (inputLine.equals(\"u\")) return new Undo(-1); else if (inputLine.equals(StringResources.EXIT_COMMAND_TEXT)) return new Exit(-1); else return new InvalidInput(-1, StringResources.INVALID_INPUT_MESSAGE); }",
        "label": "P"
    },
    "2782": {
        "dataset": "COMP 3021",
        "project": "kyloao",
        "bug_id": "30",
        "T": "void testMove(String input, String name, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); } private InputStream fixValueStream(String content) { final var bytes = content.getBytes(StandardCharsets.UTF_8); return new ByteArrayInputStream(bytes); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine().toLowerCase(); // TODO if (inputLine.equals(\"w\")) return new Move.Up(0); else if (inputLine.equals(\"a\")) return new Move.Left(0); else if (inputLine.equals(\"s\")) return new Move.Down(0); else if (inputLine.equals(\"d\")) return new Move.Right(0); else if (inputLine.equals(\"k\")) return new Move.Up(1); else if (inputLine.equals(\"h\")) return new Move.Left(1); else if (inputLine.equals(\"j\")) return new Move.Down(1); else if (inputLine.equals(\"l\")) return new Move.Right(1); else if (inputLine.equals(\"u\")) return new Undo(-1); else if (inputLine.equals(StringResources.EXIT_COMMAND_TEXT)) return new Exit(-1); else return new InvalidInput(-1, StringResources.INVALID_INPUT_MESSAGE); }",
        "label": "P"
    },
    "2783": {
        "dataset": "COMP 3021",
        "project": "kyloao",
        "bug_id": "31",
        "T": "void testMove(String input, String name, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); } private InputStream fixValueStream(String content) { final var bytes = content.getBytes(StandardCharsets.UTF_8); return new ByteArrayInputStream(bytes); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine().toLowerCase(); // TODO if (inputLine.equals(\"w\")) return new Move.Up(0); else if (inputLine.equals(\"a\")) return new Move.Left(0); else if (inputLine.equals(\"s\")) return new Move.Down(0); else if (inputLine.equals(\"d\")) return new Move.Right(0); else if (inputLine.equals(\"k\")) return new Move.Up(1); else if (inputLine.equals(\"h\")) return new Move.Left(1); else if (inputLine.equals(\"j\")) return new Move.Down(1); else if (inputLine.equals(\"l\")) return new Move.Right(1); else if (inputLine.equals(\"u\")) return new Undo(-1); else if (inputLine.equals(StringResources.EXIT_COMMAND_TEXT)) return new Exit(-1); else return new InvalidInput(-1, StringResources.INVALID_INPUT_MESSAGE); }",
        "label": "P"
    },
    "2784": {
        "dataset": "COMP 3021",
        "project": "kyloao",
        "bug_id": "32",
        "T": "void testMove(String input, String name, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); } private InputStream fixValueStream(String content) { final var bytes = content.getBytes(StandardCharsets.UTF_8); return new ByteArrayInputStream(bytes); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine().toLowerCase(); // TODO if (inputLine.equals(\"w\")) return new Move.Up(0); else if (inputLine.equals(\"a\")) return new Move.Left(0); else if (inputLine.equals(\"s\")) return new Move.Down(0); else if (inputLine.equals(\"d\")) return new Move.Right(0); else if (inputLine.equals(\"k\")) return new Move.Up(1); else if (inputLine.equals(\"h\")) return new Move.Left(1); else if (inputLine.equals(\"j\")) return new Move.Down(1); else if (inputLine.equals(\"l\")) return new Move.Right(1); else if (inputLine.equals(\"u\")) return new Undo(-1); else if (inputLine.equals(StringResources.EXIT_COMMAND_TEXT)) return new Exit(-1); else return new InvalidInput(-1, StringResources.INVALID_INPUT_MESSAGE); }",
        "label": "P"
    },
    "2785": {
        "dataset": "COMP 3021",
        "project": "kyloao",
        "bug_id": "33",
        "T": "void testMove(String input, String name, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); } private InputStream fixValueStream(String content) { final var bytes = content.getBytes(StandardCharsets.UTF_8); return new ByteArrayInputStream(bytes); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine().toLowerCase(); // TODO if (inputLine.equals(\"w\")) return new Move.Up(0); else if (inputLine.equals(\"a\")) return new Move.Left(0); else if (inputLine.equals(\"s\")) return new Move.Down(0); else if (inputLine.equals(\"d\")) return new Move.Right(0); else if (inputLine.equals(\"k\")) return new Move.Up(1); else if (inputLine.equals(\"h\")) return new Move.Left(1); else if (inputLine.equals(\"j\")) return new Move.Down(1); else if (inputLine.equals(\"l\")) return new Move.Right(1); else if (inputLine.equals(\"u\")) return new Undo(-1); else if (inputLine.equals(StringResources.EXIT_COMMAND_TEXT)) return new Exit(-1); else return new InvalidInput(-1, StringResources.INVALID_INPUT_MESSAGE); }",
        "label": "P"
    },
    "2786": {
        "dataset": "COMP 3021",
        "project": "kyloao",
        "bug_id": "34",
        "T": "void testUndo(String input, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine().toLowerCase(); // TODO if (inputLine.equals(\"w\")) return new Move.Up(0); else if (inputLine.equals(\"a\")) return new Move.Left(0); else if (inputLine.equals(\"s\")) return new Move.Down(0); else if (inputLine.equals(\"d\")) return new Move.Right(0); else if (inputLine.equals(\"k\")) return new Move.Up(1); else if (inputLine.equals(\"h\")) return new Move.Left(1); else if (inputLine.equals(\"j\")) return new Move.Down(1); else if (inputLine.equals(\"l\")) return new Move.Right(1); else if (inputLine.equals(\"u\")) return new Undo(-1); else if (inputLine.equals(StringResources.EXIT_COMMAND_TEXT)) return new Exit(-1); else return new InvalidInput(-1, StringResources.INVALID_INPUT_MESSAGE); }",
        "label": "P"
    },
    "2787": {
        "dataset": "COMP 3021",
        "project": "kyloao",
        "bug_id": "35",
        "T": "void testInvalidInput() { final var inputStream = fixValueStream(\"blah blah\"); final var inputEngine = new TerminalInputEngine(inputStream); final var action = inputEngine.fetchAction(); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine().toLowerCase(); // TODO if (inputLine.equals(\"w\")) return new Move.Up(0); else if (inputLine.equals(\"a\")) return new Move.Left(0); else if (inputLine.equals(\"s\")) return new Move.Down(0); else if (inputLine.equals(\"d\")) return new Move.Right(0); else if (inputLine.equals(\"k\")) return new Move.Up(1); else if (inputLine.equals(\"h\")) return new Move.Left(1); else if (inputLine.equals(\"j\")) return new Move.Down(1); else if (inputLine.equals(\"l\")) return new Move.Right(1); else if (inputLine.equals(\"u\")) return new Undo(-1); else if (inputLine.equals(StringResources.EXIT_COMMAND_TEXT)) return new Exit(-1); else return new InvalidInput(-1, StringResources.INVALID_INPUT_MESSAGE); }",
        "label": "P"
    },
    "2788": {
        "dataset": "COMP 3021",
        "project": "kyloao",
        "bug_id": "36",
        "T": "void testUndoWhenThereIsNoMove() { final var gameState = new GameState(TestHelper.parseGameMap(\"\"\" 233 ###### #A.a@# #..a@# ###### \"\"\" )); gameState.undo(); } private Entity generateEntity(int key) { return switch (key % 4) { case 0 -> new Box(0); case 1 -> new Empty(); case 2 -> new Player(0); case 3 -> new Wall(); default -> throw new ShouldNotReachException(); }; }",
        "C": "public GameState(@NotNull GameMap map) { // TODO this.map = map; this.undoLimit = map.getUndoLimit(); final Entity[][] entities = new Entity[map.getMaxHeight()][map.getMaxWidth()]; for (int i = 0; i < map.getMaxHeight(); i++) { for (int c = 0; c < map.getMaxWidth(); c++) { entities[i][c] = map.getEntity(Position.of(c,i)); } } this.snapshots = new ArrayList<>(); this.snapshots.add(new GameSnapshot(map.getMaxHeight(), map.getMaxWidth(), entities)); this.snapshots.add(new GameSnapshot(map.getMaxHeight(), map.getMaxWidth(), entities)); } public void undo() { // TODO if (undoLimit.isPresent()) { if (snapshots.size() > 2) { undoLimit = Optional.of(undoLimit.get() - 1); snapshots.remove(snapshots.size() - 1); snapshots.remove(snapshots.size() - 1); snapshots.add(new GameSnapshot(getMapMaxHeight(), getMapMaxWidth(), snapshots.get(snapshots.size() - 1).entities)); } } } /** * Get the maximum width of the game map. * This should be the same as that in {@link GameMap} public TerminalRenderingEngine(PrintStream outputSteam) { this.outputSteam = outputSteam; } public Box(int playerId) { this.playerId = playerId; } public Player(int id) { this.id = id; } public ShouldNotReachException() { super(\"This branch should not be reached.\"); }",
        "label": "P"
    },
    "2789": {
        "dataset": "COMP 3021",
        "project": "kyloao",
        "bug_id": "37",
        "T": "void testGetUndoUnlimited() { final var gameState = new GameState(TestHelper.parseGameMap(\"\"\" -1 ###### #.Aa@# #..a@# ###### \"\"\" )); }",
        "C": "public GameState(@NotNull GameMap map) { // TODO this.map = map; this.undoLimit = map.getUndoLimit(); final Entity[][] entities = new Entity[map.getMaxHeight()][map.getMaxWidth()]; for (int i = 0; i < map.getMaxHeight(); i++) { for (int c = 0; c < map.getMaxWidth(); c++) { entities[i][c] = map.getEntity(Position.of(c,i)); } } this.snapshots = new ArrayList<>(); this.snapshots.add(new GameSnapshot(map.getMaxHeight(), map.getMaxWidth(), entities)); this.snapshots.add(new GameSnapshot(map.getMaxHeight(), map.getMaxWidth(), entities)); }",
        "label": "P"
    },
    "2790": {
        "dataset": "COMP 3021",
        "project": "kyloao",
        "bug_id": "38",
        "T": "void testMapCopying() { final var maxWidth = 2333; final var maxHeight = 2333; final var random = new Random(); final var randomEntities = Stream.generate(() -> Position.of(random.nextInt(maxWidth), random.nextInt(maxHeight))) .distinct() .limit(100) .collect(Collectors.toMap(Function.identity(), it -> generateEntity(it.x()))); final var firstPos = randomEntities.keySet().stream().findFirst(); final var gameMap = new GameMap(maxWidth, maxHeight, Collections.singleton(firstPos.get()), 233); randomEntities.forEach(gameMap::putEntity); final var gameState = new GameState(gameMap); final var randomPosition = randomEntities.keySet().stream().findAny(); gameMap.putEntity(randomPosition.get(), new Empty()); randomEntities.forEach((p, e) -> assertEquals(e, gameState.getEntity(p))); }",
        "C": "public static @NotNull Position of(int x, int y) { return new Position(x, y); } public GameMap(int maxWidth, int maxHeight, Set<Position> destinations, int undoLimit) { // TODO this.maxHeight = maxHeight; this.maxWidth = maxWidth; this.destinations = destinations; this.undoLimit = undoLimit; } /** * Parses the map from a string representation. * * The first line is undo limit. * Starting from the second line, the game map is represented as follows, * <li># represents a {@link Wall}</li> * <li>@ represents a box destination.</li> * <li>Any upper-case letter represents a {@link Player}.</li> * <li> * Any lower-caseb letter represents a {@link Box} that is only movable by the player with the corresponding upper-case letter. * * For instance, ox \"a\" can only be moved by player \"A\" and not movable by player \"B\". * </li> * <li>. represents an {@link Empty} position in the map, meaning there is no player or box currently at this position.</li> * <p> * Notes: * <li> * There can be at most 26 players. * All implementations of classes in the hk.ust.comp3021.game package should support up to 26 players. * </li> * <li> * For simplicity, we assume the given map is bounded with a closed boundary. * There is no need to check this point. * </li> * <li> * Example maps can be found in \"src/main/resources\". * </li> * * @param mapText The string representation. * @return The parsed GameMap object. * @throws IllegalArgumentException if undo limit is negative but not -1. * @throws IllegalArgumentException if there are multiple same upper-case letters, i.e., one player can only exist at one position. * @throws IllegalArgumentException if there are no players in the map. * @throws IllegalArgumentException if the number of boxes is not equal to the number of box destinations. * @throws IllegalArgumentException if there are boxes whose {@link Box#getPlayerId()} public GameState(@NotNull GameMap map) { // TODO this.map = map; this.undoLimit = map.getUndoLimit(); final Entity[][] entities = new Entity[map.getMaxHeight()][map.getMaxWidth()]; for (int i = 0; i < map.getMaxHeight(); i++) { for (int c = 0; c < map.getMaxWidth(); c++) { entities[i][c] = map.getEntity(Position.of(c,i)); } } this.snapshots = new ArrayList<>(); this.snapshots.add(new GameSnapshot(map.getMaxHeight(), map.getMaxWidth(), entities)); this.snapshots.add(new GameSnapshot(map.getMaxHeight(), map.getMaxWidth(), entities)); } public void putEntity(Position position, Entity entity) { // TODO if (position.y() >= this.maxHeight || position.y() < 0 || position.x() >= maxWidth || position.x() < 0) throw new IllegalArgumentException(\"Position is out GameMap.\"); entities[position.y()][position.x()] = entity; } public @Nullable Entity getEntity(@NotNull Position position) { // TODO return snapshots.get(snapshots.size() - 1).entities[position.y()][position.x()]; } /** * Get all box destination positions as a set in the game map. * This should be the same as that in {@link GameMap}",
        "label": "F"
    },
    "2791": {
        "dataset": "COMP 3021",
        "project": "kyloao",
        "bug_id": "39",
        "T": "void testUndoWhenThereIsMoveButNoCheckpoint() { final var gameState = new GameState(TestHelper.parseGameMap(\"\"\" 233 ###### #A.a@# #..a@# ###### \"\"\" )); gameState.move(Position.of(1, 1), Position.of(2, 1)); gameState.undo(); }",
        "C": "public GameState(@NotNull GameMap map) { // TODO this.map = map; this.undoLimit = map.getUndoLimit(); final Entity[][] entities = new Entity[map.getMaxHeight()][map.getMaxWidth()]; for (int i = 0; i < map.getMaxHeight(); i++) { for (int c = 0; c < map.getMaxWidth(); c++) { entities[i][c] = map.getEntity(Position.of(c,i)); } } this.snapshots = new ArrayList<>(); this.snapshots.add(new GameSnapshot(map.getMaxHeight(), map.getMaxWidth(), entities)); this.snapshots.add(new GameSnapshot(map.getMaxHeight(), map.getMaxWidth(), entities)); } public void move(Position from, Position to) { // TODO var entity = getEntity(from); snapshots.get(snapshots.size() - 1).entities[to.y()][to.x()] = entity; snapshots.get(snapshots.size() - 1).entities[from.y()][from.x()] = new Empty(); } /** * Record a checkpoint of the game state, including: * <li>All current positions of entities in the game map.</li> * <li>Current undo quota</li> * <p> * Checkpoint is used in {@link GameState#undo()} public static @NotNull Position of(int x, int y) { return new Position(x, y); } public void undo() { // TODO if (undoLimit.isPresent()) { if (snapshots.size() > 2) { undoLimit = Optional.of(undoLimit.get() - 1); snapshots.remove(snapshots.size() - 1); snapshots.remove(snapshots.size() - 1); snapshots.add(new GameSnapshot(getMapMaxHeight(), getMapMaxWidth(), snapshots.get(snapshots.size() - 1).entities)); } } } /** * Get the maximum width of the game map. * This should be the same as that in {@link GameMap}",
        "label": "P"
    },
    "2792": {
        "dataset": "COMP 3021",
        "project": "kyloao",
        "bug_id": "40",
        "T": "void testGameExit() { final var gameState = mock(GameState.class); final var inputEngine = mock(TerminalInputEngine.class); final var renderingEngine = mock(TerminalRenderingEngine.class); when(gameState.isWin()).thenReturn(false, false, false); when(inputEngine.fetchAction()) .thenReturn(new InvalidInput(0, \"\"), new InvalidInput(0, \"\"), new Exit(0)); final var game = new TerminalSokobanGame(gameState, inputEngine, renderingEngine); game.run(); verify(renderingEngine, atLeastOnce()).message(any()); }",
        "C": "public InvalidInput(int initiator, @NotNull String message) { super(initiator); this.message = message; } public Exit(int initiator) { super(initiator); } public TerminalSokobanGame(GameState gameState, TerminalInputEngine inputEngine, TerminalRenderingEngine renderingEngine) { super(gameState); this.inputEngine = inputEngine; this.renderingEngine = renderingEngine; // TODO // Check the number of players if (gameState.getAllPlayerPositions().size() > 2) { throw new IllegalArgumentException(\"TerminalSokobanGame only support at most two players.\"); } } public void run() { // TODO renderingEngine.message(StringResources.GAME_READY_MESSAGE); while (true) { renderingEngine.render(state); if (shouldStop()) break; /** Print undoLimit */ String undoLimit; if (state.getUndoQuota().isPresent()) { undoLimit = String.format(StringResources.UNDO_QUOTA_TEMPLATE, state.getUndoQuota()); } else { undoLimit = StringResources.UNDO_QUOTA_UNLIMITED; } renderingEngine.message(undoLimit + \">>>\"); /** Process Action */ var action = inputEngine.fetchAction(); var actionResult = processAction(action); if (actionResult instanceof ActionResult.Failed) { renderingEngine.message(((ActionResult.Failed) actionResult).getReason()); } } /** Exit game */ renderingEngine.message(StringResources.GAME_EXIT_MESSAGE); if (state.isWin()) { renderingEngine.message(StringResources.WIN_MESSAGE); } }",
        "label": "P"
    },
    "2793": {
        "dataset": "COMP 3021",
        "project": "kyloao",
        "bug_id": "41",
        "T": "void testGameWin() { final var gameState = mock(GameState.class); final var inputEngine = mock(TerminalInputEngine.class); final var renderingEngine = mock(TerminalRenderingEngine.class); when(gameState.isWin()).thenReturn(false, false, false, true); when(inputEngine.fetchAction()) .thenReturn(new InvalidInput(0, \"\")); final var game = new TerminalSokobanGame(gameState, inputEngine, renderingEngine); game.run(); verify(gameState, atLeastOnce()).isWin(); verify(renderingEngine, atLeastOnce()).message(any()); }",
        "C": "public InvalidInput(int initiator, @NotNull String message) { super(initiator); this.message = message; } public TerminalSokobanGame(GameState gameState, TerminalInputEngine inputEngine, TerminalRenderingEngine renderingEngine) { super(gameState); this.inputEngine = inputEngine; this.renderingEngine = renderingEngine; // TODO // Check the number of players if (gameState.getAllPlayerPositions().size() > 2) { throw new IllegalArgumentException(\"TerminalSokobanGame only support at most two players.\"); } } public void run() { // TODO renderingEngine.message(StringResources.GAME_READY_MESSAGE); while (true) { renderingEngine.render(state); if (shouldStop()) break; /** Print undoLimit */ String undoLimit; if (state.getUndoQuota().isPresent()) { undoLimit = String.format(StringResources.UNDO_QUOTA_TEMPLATE, state.getUndoQuota()); } else { undoLimit = StringResources.UNDO_QUOTA_UNLIMITED; } renderingEngine.message(undoLimit + \">>>\"); /** Process Action */ var action = inputEngine.fetchAction(); var actionResult = processAction(action); if (actionResult instanceof ActionResult.Failed) { renderingEngine.message(((ActionResult.Failed) actionResult).getReason()); } } /** Exit game */ renderingEngine.message(StringResources.GAME_EXIT_MESSAGE); if (state.isWin()) { renderingEngine.message(StringResources.WIN_MESSAGE); } }",
        "label": "P"
    },
    "2794": {
        "dataset": "COMP 3021",
        "project": "kyloao",
        "bug_id": "42",
        "T": "void testMoreThanTwoPlayers() { final var gameState = mock(GameState.class); final var inputEngine = mock(TerminalInputEngine.class); final var renderingEngine = mock(TerminalRenderingEngine.class); when(gameState.getAllPlayerPositions()).thenReturn(new HashSet<>(Arrays.asList(Position.of(1, 1), Position.of(1, 2), Position.of(1, 3)))); }",
        "C": "public static @NotNull Position of(int x, int y) { return new Position(x, y); }",
        "label": "P"
    },
    "2795": {
        "dataset": "COMP 3021",
        "project": "yxiaoaz",
        "bug_id": "0",
        "T": "void moveUp() { Position.of(233, 232), new Move.Up(-1).nextPosition(pos) ); }",
        "C": "public static @NotNull Position of(int x, int y) { return new Position(x, y); } public Up(int initiator) { super(initiator); }",
        "label": "P"
    },
    "2796": {
        "dataset": "COMP 3021",
        "project": "yxiaoaz",
        "bug_id": "1",
        "T": "void moveDown() { Position.of(233, 234), new Move.Down(-1).nextPosition(pos) ); }",
        "C": "public static @NotNull Position of(int x, int y) { return new Position(x, y); } public Down(int initiator) { super(initiator); }",
        "label": "P"
    },
    "2797": {
        "dataset": "COMP 3021",
        "project": "yxiaoaz",
        "bug_id": "2",
        "T": "void moveRight() { Position.of(234, 233), new Move.Right(-1).nextPosition(pos) ); }",
        "C": "public static @NotNull Position of(int x, int y) { return new Position(x, y); } public Right(int initiator) { super(initiator); }",
        "label": "P"
    },
    "2798": {
        "dataset": "COMP 3021",
        "project": "yxiaoaz",
        "bug_id": "3",
        "T": "void testExceedingUndoQuota() { final var gameState = mock(GameState.class); when(gameState.getPlayerPositionById(anyInt())).thenReturn(Position.of(0, 0)); when(gameState.getUndoQuota()).thenReturn(Optional.of(0)); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Undo(0)); }",
        "C": "public Undo(int initiator) { super(initiator); }",
        "label": "F"
    },
    "2799": {
        "dataset": "COMP 3021",
        "project": "yxiaoaz",
        "bug_id": "4",
        "T": "void testExit() { final var gameState = mock(GameState.class); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Exit(0)); }",
        "C": "public Exit(int initiator) { super(initiator); }",
        "label": "P"
    },
    "2800": {
        "dataset": "COMP 3021",
        "project": "yxiaoaz",
        "bug_id": "5",
        "T": "void testUndoUnlimited() { final var gameState = mock(GameState.class); when(gameState.getPlayerPositionById(anyInt())).thenReturn(Position.of(0, 0)); when(gameState.getUndoQuota()).thenReturn(Optional.empty()); final var game = new SokobanGameForTesting(gameState); for (int i = 0; i < 10000; i++) { final var result = game.feedActionForProcessing(new Undo(0)); } verify(gameState, times(10000)).undo(); }",
        "C": "public TerminalRenderingEngine(PrintStream outputSteam) { this.outputSteam = outputSteam; } public Undo(int initiator) { super(initiator); }",
        "label": "P"
    },
    "2801": {
        "dataset": "COMP 3021",
        "project": "yxiaoaz",
        "bug_id": "6",
        "T": "void testPushOtherPlayerBox() { String mapText = \"\"\" 233 ###### #AB.@# #b.a.# #@...# ###### \"\"\"; final var testMap = TestHelper.parseGameMap(mapText); final var gameState = spy(new GameState(testMap)); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Move.Down(0)); verify(gameState, never()).move(any(), any()); }",
        "C": "public GameState(@NotNull GameMap map) { // TODO this.map=map; this.undoLimit=this.map.undoLimit; this.recordEntityMatrix=new ArrayList<Entity[][]>(); //deep copy the Set<Position> records this.recordBoxes = new HashMap<Position, Box>(); this.recordPlayers = new HashMap<Position, Player>(); this.walls = new HashSet<Position>(); this.empties = new HashSet<Position>(); this.destinations = new HashSet<Position>(); for (Position pos : this.map.walls) { this.walls.add(pos); } for (Position pos : this.map.empties) { this.empties.add(pos); } for (Position pos : this.map.destinations) { this.destinations.add(pos); } for (Position pos : this.map.walls) { this.walls.add(pos); } // deep copy a Entity[][] database int row=this.map.entityMatrixStorage.length; int col=this.map.entityMatrixStorage[0].length; this.stateEntityMatrix=new Entity[row][col]; this.initialState=new Entity[row][col]; for (int i=0;i<row;i++){ stateEntityMatrix[i]=new Entity[col]; initialState[i]=new Entity[col]; for(int j=0;j<col;j++){ //System.out.println(\"i: \"+i+\" j: \"+j+\" ->\"+map.entityMatrixStorage[i][j]); // \u5899\u5916\u6ca1entity\u7684block\uff0c\u662fnull if(this.map.entityMatrixStorage[i][j]==null) continue; switch(this.map.entityMatrixStorage[i][j].getClass().getSimpleName()){ case \"Box\": // getPlayerId() only in Box, needs to downcast Entity to Box Box newbox=new Box(((Box)this.map.entityMatrixStorage[i][j]).getPlayerId()); stateEntityMatrix[i][j]=newbox; initialState[i][j]=newbox; recordBoxes.put(Position.of(j,i),newbox); break; case \"Player\": Player newplayer=new Player(((Player)this.map.entityMatrixStorage[i][j]).getId()); stateEntityMatrix[i][j]=newplayer; initialState[i][j]=newplayer; recordPlayers.put(Position.of(j,i),newplayer); break; case \"Wall\": stateEntityMatrix[i][j]=new Wall(); initialState[i][j]=new Wall(); break; case \"Empty\": stateEntityMatrix[i][j]=new Empty(); ((Empty)stateEntityMatrix[i][j]).setDestination(((Empty)this.map.entityMatrixStorage[i][j]).checkDestination()); initialState[i][j]=new Empty(); ((Empty)initialState[i][j]).setDestination(((Empty)this.map.entityMatrixStorage[i][j]).checkDestination()); break; default: break; } } } } public Down(int initiator) { super(initiator); }",
        "label": "P"
    },
    "2802": {
        "dataset": "COMP 3021",
        "project": "yxiaoaz",
        "bug_id": "7",
        "T": "void testMoveNonExistingPlayer() { String mapText = \"\"\" 233 ###### #A..@# #a...# ##...# ###### \"\"\"; final var testMap = TestHelper.parseGameMap(mapText); final var gameState = spy(new GameState(testMap)); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Move.Down(23)); }",
        "C": "public GameState(@NotNull GameMap map) { // TODO this.map=map; this.undoLimit=this.map.undoLimit; this.recordEntityMatrix=new ArrayList<Entity[][]>(); //deep copy the Set<Position> records this.recordBoxes = new HashMap<Position, Box>(); this.recordPlayers = new HashMap<Position, Player>(); this.walls = new HashSet<Position>(); this.empties = new HashSet<Position>(); this.destinations = new HashSet<Position>(); for (Position pos : this.map.walls) { this.walls.add(pos); } for (Position pos : this.map.empties) { this.empties.add(pos); } for (Position pos : this.map.destinations) { this.destinations.add(pos); } for (Position pos : this.map.walls) { this.walls.add(pos); } // deep copy a Entity[][] database int row=this.map.entityMatrixStorage.length; int col=this.map.entityMatrixStorage[0].length; this.stateEntityMatrix=new Entity[row][col]; this.initialState=new Entity[row][col]; for (int i=0;i<row;i++){ stateEntityMatrix[i]=new Entity[col]; initialState[i]=new Entity[col]; for(int j=0;j<col;j++){ //System.out.println(\"i: \"+i+\" j: \"+j+\" ->\"+map.entityMatrixStorage[i][j]); // \u5899\u5916\u6ca1entity\u7684block\uff0c\u662fnull if(this.map.entityMatrixStorage[i][j]==null) continue; switch(this.map.entityMatrixStorage[i][j].getClass().getSimpleName()){ case \"Box\": // getPlayerId() only in Box, needs to downcast Entity to Box Box newbox=new Box(((Box)this.map.entityMatrixStorage[i][j]).getPlayerId()); stateEntityMatrix[i][j]=newbox; initialState[i][j]=newbox; recordBoxes.put(Position.of(j,i),newbox); break; case \"Player\": Player newplayer=new Player(((Player)this.map.entityMatrixStorage[i][j]).getId()); stateEntityMatrix[i][j]=newplayer; initialState[i][j]=newplayer; recordPlayers.put(Position.of(j,i),newplayer); break; case \"Wall\": stateEntityMatrix[i][j]=new Wall(); initialState[i][j]=new Wall(); break; case \"Empty\": stateEntityMatrix[i][j]=new Empty(); ((Empty)stateEntityMatrix[i][j]).setDestination(((Empty)this.map.entityMatrixStorage[i][j]).checkDestination()); initialState[i][j]=new Empty(); ((Empty)initialState[i][j]).setDestination(((Empty)this.map.entityMatrixStorage[i][j]).checkDestination()); break; default: break; } } } } public Down(int initiator) { super(initiator); }",
        "label": "P"
    },
    "2803": {
        "dataset": "COMP 3021",
        "project": "yxiaoaz",
        "bug_id": "8",
        "T": "void testCheckpointWhenNeed() { final var gameState = spy(new GameState(TestHelper.parseGameMap(\"\"\" 233 ###### #.Aa@# #..a@# ###### \"\"\" ))); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Move.Right(0)); verify(gameState, times(1)).checkpoint(); }",
        "C": "public GameState(@NotNull GameMap map) { // TODO this.map=map; this.undoLimit=this.map.undoLimit; this.recordEntityMatrix=new ArrayList<Entity[][]>(); //deep copy the Set<Position> records this.recordBoxes = new HashMap<Position, Box>(); this.recordPlayers = new HashMap<Position, Player>(); this.walls = new HashSet<Position>(); this.empties = new HashSet<Position>(); this.destinations = new HashSet<Position>(); for (Position pos : this.map.walls) { this.walls.add(pos); } for (Position pos : this.map.empties) { this.empties.add(pos); } for (Position pos : this.map.destinations) { this.destinations.add(pos); } for (Position pos : this.map.walls) { this.walls.add(pos); } // deep copy a Entity[][] database int row=this.map.entityMatrixStorage.length; int col=this.map.entityMatrixStorage[0].length; this.stateEntityMatrix=new Entity[row][col]; this.initialState=new Entity[row][col]; for (int i=0;i<row;i++){ stateEntityMatrix[i]=new Entity[col]; initialState[i]=new Entity[col]; for(int j=0;j<col;j++){ //System.out.println(\"i: \"+i+\" j: \"+j+\" ->\"+map.entityMatrixStorage[i][j]); // \u5899\u5916\u6ca1entity\u7684block\uff0c\u662fnull if(this.map.entityMatrixStorage[i][j]==null) continue; switch(this.map.entityMatrixStorage[i][j].getClass().getSimpleName()){ case \"Box\": // getPlayerId() only in Box, needs to downcast Entity to Box Box newbox=new Box(((Box)this.map.entityMatrixStorage[i][j]).getPlayerId()); stateEntityMatrix[i][j]=newbox; initialState[i][j]=newbox; recordBoxes.put(Position.of(j,i),newbox); break; case \"Player\": Player newplayer=new Player(((Player)this.map.entityMatrixStorage[i][j]).getId()); stateEntityMatrix[i][j]=newplayer; initialState[i][j]=newplayer; recordPlayers.put(Position.of(j,i),newplayer); break; case \"Wall\": stateEntityMatrix[i][j]=new Wall(); initialState[i][j]=new Wall(); break; case \"Empty\": stateEntityMatrix[i][j]=new Empty(); ((Empty)stateEntityMatrix[i][j]).setDestination(((Empty)this.map.entityMatrixStorage[i][j]).checkDestination()); initialState[i][j]=new Empty(); ((Empty)initialState[i][j]).setDestination(((Empty)this.map.entityMatrixStorage[i][j]).checkDestination()); break; default: break; } } } } public Right(int initiator) { super(initiator); }",
        "label": "P"
    },
    "2804": {
        "dataset": "COMP 3021",
        "project": "yxiaoaz",
        "bug_id": "9",
        "T": "void testPushBoxAgainstWall() { String mapText = \"\"\" 233 ###### #A..@# #a...# ##...# ###### \"\"\"; final var testMap = TestHelper.parseGameMap(mapText); final var gameState = spy(new GameState(testMap)); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Move.Down(0)); verify(gameState, never()).move(any(), any()); }",
        "C": "public GameState(@NotNull GameMap map) { // TODO this.map=map; this.undoLimit=this.map.undoLimit; this.recordEntityMatrix=new ArrayList<Entity[][]>(); //deep copy the Set<Position> records this.recordBoxes = new HashMap<Position, Box>(); this.recordPlayers = new HashMap<Position, Player>(); this.walls = new HashSet<Position>(); this.empties = new HashSet<Position>(); this.destinations = new HashSet<Position>(); for (Position pos : this.map.walls) { this.walls.add(pos); } for (Position pos : this.map.empties) { this.empties.add(pos); } for (Position pos : this.map.destinations) { this.destinations.add(pos); } for (Position pos : this.map.walls) { this.walls.add(pos); } // deep copy a Entity[][] database int row=this.map.entityMatrixStorage.length; int col=this.map.entityMatrixStorage[0].length; this.stateEntityMatrix=new Entity[row][col]; this.initialState=new Entity[row][col]; for (int i=0;i<row;i++){ stateEntityMatrix[i]=new Entity[col]; initialState[i]=new Entity[col]; for(int j=0;j<col;j++){ //System.out.println(\"i: \"+i+\" j: \"+j+\" ->\"+map.entityMatrixStorage[i][j]); // \u5899\u5916\u6ca1entity\u7684block\uff0c\u662fnull if(this.map.entityMatrixStorage[i][j]==null) continue; switch(this.map.entityMatrixStorage[i][j].getClass().getSimpleName()){ case \"Box\": // getPlayerId() only in Box, needs to downcast Entity to Box Box newbox=new Box(((Box)this.map.entityMatrixStorage[i][j]).getPlayerId()); stateEntityMatrix[i][j]=newbox; initialState[i][j]=newbox; recordBoxes.put(Position.of(j,i),newbox); break; case \"Player\": Player newplayer=new Player(((Player)this.map.entityMatrixStorage[i][j]).getId()); stateEntityMatrix[i][j]=newplayer; initialState[i][j]=newplayer; recordPlayers.put(Position.of(j,i),newplayer); break; case \"Wall\": stateEntityMatrix[i][j]=new Wall(); initialState[i][j]=new Wall(); break; case \"Empty\": stateEntityMatrix[i][j]=new Empty(); ((Empty)stateEntityMatrix[i][j]).setDestination(((Empty)this.map.entityMatrixStorage[i][j]).checkDestination()); initialState[i][j]=new Empty(); ((Empty)initialState[i][j]).setDestination(((Empty)this.map.entityMatrixStorage[i][j]).checkDestination()); break; default: break; } } } } public Down(int initiator) { super(initiator); }",
        "label": "P"
    },
    "2805": {
        "dataset": "COMP 3021",
        "project": "yxiaoaz",
        "bug_id": "10",
        "T": "void testCheckpointWhenNotNeed() { final var gameState = spy(new GameState(TestHelper.parseGameMap(\"\"\" 233 ###### #A.a@# #..a@# ###### \"\"\" ))); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Move.Right(0)); verify(gameState, never()).checkpoint(); } private static class SokobanGameForTesting extends AbstractSokobanGame { protected SokobanGameForTesting(GameState gameState) { super(gameState); } @Override public void run() { } public ActionResult feedActionForProcessing(Action action) { return processAction(action); } }",
        "C": "public GameState(@NotNull GameMap map) { // TODO this.map=map; this.undoLimit=this.map.undoLimit; this.recordEntityMatrix=new ArrayList<Entity[][]>(); //deep copy the Set<Position> records this.recordBoxes = new HashMap<Position, Box>(); this.recordPlayers = new HashMap<Position, Player>(); this.walls = new HashSet<Position>(); this.empties = new HashSet<Position>(); this.destinations = new HashSet<Position>(); for (Position pos : this.map.walls) { this.walls.add(pos); } for (Position pos : this.map.empties) { this.empties.add(pos); } for (Position pos : this.map.destinations) { this.destinations.add(pos); } for (Position pos : this.map.walls) { this.walls.add(pos); } // deep copy a Entity[][] database int row=this.map.entityMatrixStorage.length; int col=this.map.entityMatrixStorage[0].length; this.stateEntityMatrix=new Entity[row][col]; this.initialState=new Entity[row][col]; for (int i=0;i<row;i++){ stateEntityMatrix[i]=new Entity[col]; initialState[i]=new Entity[col]; for(int j=0;j<col;j++){ //System.out.println(\"i: \"+i+\" j: \"+j+\" ->\"+map.entityMatrixStorage[i][j]); // \u5899\u5916\u6ca1entity\u7684block\uff0c\u662fnull if(this.map.entityMatrixStorage[i][j]==null) continue; switch(this.map.entityMatrixStorage[i][j].getClass().getSimpleName()){ case \"Box\": // getPlayerId() only in Box, needs to downcast Entity to Box Box newbox=new Box(((Box)this.map.entityMatrixStorage[i][j]).getPlayerId()); stateEntityMatrix[i][j]=newbox; initialState[i][j]=newbox; recordBoxes.put(Position.of(j,i),newbox); break; case \"Player\": Player newplayer=new Player(((Player)this.map.entityMatrixStorage[i][j]).getId()); stateEntityMatrix[i][j]=newplayer; initialState[i][j]=newplayer; recordPlayers.put(Position.of(j,i),newplayer); break; case \"Wall\": stateEntityMatrix[i][j]=new Wall(); initialState[i][j]=new Wall(); break; case \"Empty\": stateEntityMatrix[i][j]=new Empty(); ((Empty)stateEntityMatrix[i][j]).setDestination(((Empty)this.map.entityMatrixStorage[i][j]).checkDestination()); initialState[i][j]=new Empty(); ((Empty)initialState[i][j]).setDestination(((Empty)this.map.entityMatrixStorage[i][j]).checkDestination()); break; default: break; } } } } public Right(int initiator) { super(initiator); } public void run() { // TODO int currentPlayerID=0; // to rotate around players; //first call: print welcome message this.renderingEngine.message(StringResources.GAME_READY_MESSAGE); this.renderingEngine.render(state); while(!this.shouldStop()){ //game body //read input //process action Action fetchedAction=this.inputEngine.fetchAction(); ActionResult processedAction=this.processAction(fetchedAction); //if fail:print message while(processedAction instanceof Failed failed){ this.renderingEngine.message(((Failed)processedAction).getReason()); this.renderingEngine.render(this.state); //print undo quota if(this.state.getUndoQuota().isEmpty()){ this.renderingEngine.message(String.format(StringResources.UNDO_QUOTA_TEMPLATE,-1)); }else if (this.state.getUndoQuota().get().intValue()==-1){ this.renderingEngine.message(String.format(StringResources.UNDO_QUOTA_TEMPLATE,StringResources.UNDO_QUOTA_UNLIMITED)); }else{ this.renderingEngine.message(String.format(StringResources.UNDO_QUOTA_TEMPLATE,state.getUndoQuota().get().intValue())); } processedAction=this.processAction(this.inputEngine.fetchAction()); } this.renderingEngine.render(this.state); //exit: if (this.hasExit||this.state.isWin()){ this.renderingEngine.message(StringResources.GAME_EXIT_MESSAGE); if(this.state.isWin()){ this.renderingEngine.message(StringResources.WIN_MESSAGE); } break; } //print undo quota if(this.state.getUndoQuota().isEmpty()){ this.renderingEngine.message(String.format(StringResources.UNDO_QUOTA_TEMPLATE,-1)); }else{ this.renderingEngine.message(String.format(StringResources.UNDO_QUOTA_TEMPLATE,this.state.getUndoQuota().get().intValue())); } } } protected ActionResult processAction(@NotNull Action action) { // TODO ActionResult processedAction=null; if(action instanceof Exit exit){ processedAction=new ActionResult.Success(exit); this.hasExit=true; return processedAction; } else if(action instanceof InvalidInput II){ processedAction=new ActionResult.Failed(II,StringResources.INVALID_INPUT_MESSAGE); return processedAction; } else if(action instanceof Undo undo){ if(this.state.getStateRecord().isEmpty()||this.state.getUndoQuota().isEmpty() || this.state.getUndoQuota().get().intValue()>0 ){ // can undo processedAction=new ActionResult.Success(undo); this.state.undo(); return processedAction; } else{ processedAction=new ActionResult.Failed(action,StringResources.UNDO_QUOTA_RUN_OUT); return processedAction; } } else { //check player exists? if(!this.state.getAllPlayerID().contains(Integer.valueOf(action.getInitiator()))){ processedAction=new ActionResult.Failed(action,StringResources.PLAYER_NOT_FOUND); return processedAction; } // \u4ece Player \u7684\u89c6\u89d2\u56db\u5468\u770b\uff1a // if action=move,-> \u65b9\u5411\u4e0a\u662fEmpty -> Success // -> \u65b9\u5411\u4e0a\u662fWall -> Failed // -> \u65b9\u5411\u4e0a\u662fPlayer-> Failed // -> \u65b9\u5411\u4e0a\u662fBox ------------->\u81ea\u5df1\u7684box--->\u4ee5Box\u4e3a\u4e2d\u5fc3\uff0c\u518d\u8fdb\u4e00\u4e2a\u65b9\u5411\uff0c\u65b9\u5411\u4e0a\u662f -> Empty -> SUCCESS // -> \u5176\u4ed6 -> Failed // ->\u522b\u4eba\u7684box--->Failed Position currentPosition = state.getPlayerPositionById(action.getInitiator()); Position newPosition=null; //System.out.println(\"action.getClass().getSimpleName():\" + action.getClass().getSimpleName()); switch (action.getClass().getSimpleName()) { case \"Down\": newPosition = ((Move.Down) action).nextPosition(currentPosition);break; case \"Up\": newPosition = ((Move.Up) action).nextPosition(currentPosition);break; case \"Right\": newPosition = ((Move.Right) action).nextPosition(currentPosition);break; case \"Left\": newPosition = ((Move.Left) action).nextPosition(currentPosition);break; default: break; } if (this.state.getAllEmptiesPositions().contains(newPosition)) { processedAction = new ActionResult.Success(action); this.state.move(currentPosition,newPosition); return processedAction; } else if (this.state.getAllWallsPositions().contains(newPosition)) { processedAction = new ActionResult.Failed(action, StringResources.HIT_WALL); return processedAction; } else if (this.state.getAllPlayerPositions().contains(newPosition)) { processedAction = new ActionResult.Failed(action, StringResources.HIT_PLAYER);// NEED CHECk string return processedAction; } else if (this.state.getAllBoxesPositions().contains(newPosition)) { // move BOX Position boxOldPosition=newPosition; Position boxNewPosition=null; //\u4e0d\u662f\u81ea\u5df1\u7684box if(this.state.getRecordBox().get(boxOldPosition).getPlayerId()!=(action.getInitiator())){ processedAction = new ActionResult.Failed(action, StringResources.PUSH_YOUR_OWN_BOX); return processedAction; } switch (action.getClass().getSimpleName()) { case \"Down\": boxNewPosition = new Move.Down(-1).nextPosition(boxOldPosition);break; case \"Up\": boxNewPosition = new Move.Up(-1).nextPosition(boxOldPosition);break; case \"Right\": boxNewPosition = new Move.Right(-1).nextPosition(boxOldPosition);break; case \"Left\": boxNewPosition = new Move.Left(-1).nextPosition(boxOldPosition);break; default: break; } if(state.getAllEmptiesPositions().contains(boxNewPosition)){ processedAction=new ActionResult.Success(action); //\u5148\u52a8\u7bb1\u5b50\u518d\u52a8player this.state.move(boxOldPosition,boxNewPosition); this.state.move(currentPosition,newPosition); this.state.checkpoint(); return processedAction; } else{ processedAction=new ActionResult.Failed(action,StringResources.PUSH_BOX_FAIL); return processedAction; } } } return processedAction; }",
        "label": "P"
    },
    "2806": {
        "dataset": "COMP 3021",
        "project": "yxiaoaz",
        "bug_id": "11",
        "T": "void testHitAnotherPlayer() { String mapText = \"\"\" 233 ###### #A..@# #B...# #ab.@# ###### \"\"\"; final var testMap = TestHelper.parseGameMap(mapText); final var gameState = spy(new GameState(testMap)); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Move.Down(0)); verify(gameState, never()).move(any(), any()); }",
        "C": "public GameState(@NotNull GameMap map) { // TODO this.map=map; this.undoLimit=this.map.undoLimit; this.recordEntityMatrix=new ArrayList<Entity[][]>(); //deep copy the Set<Position> records this.recordBoxes = new HashMap<Position, Box>(); this.recordPlayers = new HashMap<Position, Player>(); this.walls = new HashSet<Position>(); this.empties = new HashSet<Position>(); this.destinations = new HashSet<Position>(); for (Position pos : this.map.walls) { this.walls.add(pos); } for (Position pos : this.map.empties) { this.empties.add(pos); } for (Position pos : this.map.destinations) { this.destinations.add(pos); } for (Position pos : this.map.walls) { this.walls.add(pos); } // deep copy a Entity[][] database int row=this.map.entityMatrixStorage.length; int col=this.map.entityMatrixStorage[0].length; this.stateEntityMatrix=new Entity[row][col]; this.initialState=new Entity[row][col]; for (int i=0;i<row;i++){ stateEntityMatrix[i]=new Entity[col]; initialState[i]=new Entity[col]; for(int j=0;j<col;j++){ //System.out.println(\"i: \"+i+\" j: \"+j+\" ->\"+map.entityMatrixStorage[i][j]); // \u5899\u5916\u6ca1entity\u7684block\uff0c\u662fnull if(this.map.entityMatrixStorage[i][j]==null) continue; switch(this.map.entityMatrixStorage[i][j].getClass().getSimpleName()){ case \"Box\": // getPlayerId() only in Box, needs to downcast Entity to Box Box newbox=new Box(((Box)this.map.entityMatrixStorage[i][j]).getPlayerId()); stateEntityMatrix[i][j]=newbox; initialState[i][j]=newbox; recordBoxes.put(Position.of(j,i),newbox); break; case \"Player\": Player newplayer=new Player(((Player)this.map.entityMatrixStorage[i][j]).getId()); stateEntityMatrix[i][j]=newplayer; initialState[i][j]=newplayer; recordPlayers.put(Position.of(j,i),newplayer); break; case \"Wall\": stateEntityMatrix[i][j]=new Wall(); initialState[i][j]=new Wall(); break; case \"Empty\": stateEntityMatrix[i][j]=new Empty(); ((Empty)stateEntityMatrix[i][j]).setDestination(((Empty)this.map.entityMatrixStorage[i][j]).checkDestination()); initialState[i][j]=new Empty(); ((Empty)initialState[i][j]).setDestination(((Empty)this.map.entityMatrixStorage[i][j]).checkDestination()); break; default: break; } } } } public Down(int initiator) { super(initiator); }",
        "label": "P"
    },
    "2807": {
        "dataset": "COMP 3021",
        "project": "yxiaoaz",
        "bug_id": "12",
        "T": "void testUndoWithinQuota() { final var gameState = mock(GameState.class); when(gameState.getPlayerPositionById(anyInt())).thenReturn(Position.of(0, 0)); when(gameState.getUndoQuota()).thenReturn(Optional.of(1)); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Undo(0)); verify(gameState, times(1)).undo(); }",
        "C": "public Undo(int initiator) { super(initiator); }",
        "label": "P"
    },
    "2808": {
        "dataset": "COMP 3021",
        "project": "yxiaoaz",
        "bug_id": "13",
        "T": "void testInvalidInput() { final var game = new SokobanGameForTesting(mock(GameState.class)); final var message = String.valueOf(new Random().nextLong()); final var action = new InvalidInput(-1, message); final var result = game.feedActionForProcessing(action); }",
        "C": "public InvalidInput(int initiator, @NotNull String message) { super(initiator); this.message = message; }",
        "label": "P"
    },
    "2809": {
        "dataset": "COMP 3021",
        "project": "yxiaoaz",
        "bug_id": "14",
        "T": "void testUndoLimitParsing() { final var gameMap = TestHelper.parseGameMap(rectangularMap); }",
        "C": "",
        "label": "P"
    },
    "2810": {
        "dataset": "COMP 3021",
        "project": "yxiaoaz",
        "bug_id": "15",
        "T": "void testWidthForNonRectangularMap() { final var gameMap = TestHelper.parseGameMap(nonRectangularMap); }",
        "C": "",
        "label": "P"
    },
    "2811": {
        "dataset": "COMP 3021",
        "project": "yxiaoaz",
        "bug_id": "16",
        "T": "void testTwoPlayersMap() { final var twoPlayersMap = \"\"\" 233 ###### #A..@# #..B@# #....# #.a..# #..b.# ###### \"\"\"; final var gameMap = TestHelper.parseGameMap(twoPlayersMap); final var playerIds = gameMap.getPlayerIds(); final var expectedIds = new HashSet<Integer>(); expectedIds.add(0); expectedIds.add(1); }",
        "C": "public Set<Integer> getPlayerIds() { // TODO Set<Integer> setPlayerID=new HashSet<Integer>(); for(Position pos: recordPlayers.keySet()){ setPlayerID.add(recordPlayers.get(pos).getId()); } return setPlayerID; }",
        "label": "P"
    },
    "2812": {
        "dataset": "COMP 3021",
        "project": "yxiaoaz",
        "bug_id": "17",
        "T": "void testMapWithoutPlayer() { final var invalidMap = \"\"\" 233 ### #.# ### \"\"\"; } // @Tag(TestKind.HIDDEN) // @Test // void testUnmatchedPlayersAndBoxes() { // final var invalidMap = \"\"\" // 233 // ###### // #A..@# // #...@# // #a.b@# // #.a.@# // #..a.# // ###### // \"\"\"; // assertThrowsExactly(IllegalArgumentException.class, () -> TestHelper.parseGameMap(invalidMap)); // }",
        "C": "public TerminalRenderingEngine(PrintStream outputSteam) { this.outputSteam = outputSteam; }",
        "label": "P"
    },
    "2813": {
        "dataset": "COMP 3021",
        "project": "yxiaoaz",
        "bug_id": "18",
        "T": "void testManyPlayersMap() { final var manyPlayersMap = \"\"\" 233 ###### #A.P@@# #vCB@@# #.cpD@# #Ga.d@# #g.bV@# ###### \"\"\"; final var gameMap = TestHelper.parseGameMap(manyPlayersMap); final var playerIds = gameMap.getPlayerIds(); final var expectedIds = new HashSet<>(Arrays.asList( 0, 'P' - 'A', 'C' - 'A', 'B' - 'A', 'D' - 'A', 'G' - 'A', 'V' - 'A' )); }",
        "C": "public Set<Integer> getPlayerIds() { // TODO Set<Integer> setPlayerID=new HashSet<Integer>(); for(Position pos: recordPlayers.keySet()){ setPlayerID.add(recordPlayers.get(pos).getId()); } return setPlayerID; }",
        "label": "P"
    },
    "2814": {
        "dataset": "COMP 3021",
        "project": "yxiaoaz",
        "bug_id": "19",
        "T": "void testHeightForNonRectangularMap() { final var gameMap = TestHelper.parseGameMap(nonRectangularMap); }",
        "C": "",
        "label": "P"
    },
    "2815": {
        "dataset": "COMP 3021",
        "project": "yxiaoaz",
        "bug_id": "20",
        "T": "void testDuplicatedPlayers() { final var invalidMap = \"\"\" 233 ###### #A..@# #..A@# #....# #.a..# #..b.# ###### \"\"\"; }",
        "C": "",
        "label": "P"
    },
    "2816": {
        "dataset": "COMP 3021",
        "project": "yxiaoaz",
        "bug_id": "21",
        "T": "void testParseMapWithoutUndoLimit() { final var invalidMap = String.join(\"\\n\", rectangularMap.lines().skip(1).toList()); }",
        "C": "",
        "label": "P"
    },
    "2817": {
        "dataset": "COMP 3021",
        "project": "yxiaoaz",
        "bug_id": "22",
        "T": "void testInsufficientDestinations() { final var invalidMap = \"\"\" 233 ###### #A..@# #...@# #a...# #.a..# #..a.# ###### \"\"\"; }",
        "C": "",
        "label": "P"
    },
    "2818": {
        "dataset": "COMP 3021",
        "project": "yxiaoaz",
        "bug_id": "23",
        "T": "void testSuperLargeMap() { try { new GameMap(Integer.MAX_VALUE, Integer.MAX_VALUE, Collections.emptySet(), 0); } catch (OutOfMemoryError e) { throw new RuntimeException(e); } }); }",
        "C": "public GameMap(int maxWidth, int maxHeight, Set<Position> destinations, int undoLimit) { // TODO this.maxHeight=maxHeight; this.maxWidth=maxWidth; this.undoLimit=undoLimit; this.entityMatrixStorage=new Entity[maxHeight][maxWidth]; for (int row = 0; row < maxHeight; row++) { entityMatrixStorage[row] = new Entity[maxWidth]; } /* [recordPlayers] key: Player -> value: Positions [recordBoxes] key: Set<Position> -> value: Box */ this.recordPlayers = new HashMap<Position, Player>(); this.recordBoxes = new HashMap<Position, Box >(); /* [HashMap] Locations (record position of everything but players) key:Entity -> value:Set<Positions> eg. Wall -> { (0,1), (1,1), ...} Empty -> { (x,y), ... } * */ this.walls = new HashSet<Position>(); this.empties = new HashSet<Position>(); this.destinations = destinations; } /** * Parses the map from a string representation. * The first line is undo limit. * Starting from the second line, the game map is represented as follows, * <li># represents a {@link Wall}</li> * <li>@ represents a box destination.</li> * <li>Any upper-case letter represents a {@link Player}.</li> * <li> * Any lower-case letter represents a {@link Box} that is only movable by the player with the corresponding upper-case letter. * For instance, box \"a\" can only be moved by player \"A\" and not movable by player \"B\". * </li> * <li>. represents an {@link Empty} position in the map, meaning there is no player or box currently at this position.</li> * <p> * Notes: * <li> * There can be at most 26 players. * All implementations of classes in the hk.ust.comp3021.game package should support up to 26 players. * </li> * <li> * For simplicity, we assume the given map is bounded with a closed boundary. * There is no need to check this point. * </li> * <li> * Example maps can be found in \"src/main/resources\". * </li> * * @param mapText The string representation. * @return The parsed GameMap object. * @throws IllegalArgumentException if undo limit is negative but not -1. * @throws IllegalArgumentException if there are multiple same upper-case letters, i.e., one player can only exist at one position. * @throws IllegalArgumentException if there are no players in the map. * @throws IllegalArgumentException if the number of boxes is not equal to the number of box destinations. * @throws IllegalArgumentException if there are boxes whose {@link Box#getPlayerId()} public TerminalRenderingEngine(PrintStream outputSteam) { this.outputSteam = outputSteam; }",
        "label": "F"
    },
    "2819": {
        "dataset": "COMP 3021",
        "project": "yxiaoaz",
        "bug_id": "24",
        "T": "void testInvalidUndoLimit() { final var invalidMap = \"\"\" -233 ###### #A..@# #...@# #a.b@# #.a.@# #..a.# ###### \"\"\"; }",
        "C": "",
        "label": "P"
    },
    "2820": {
        "dataset": "COMP 3021",
        "project": "yxiaoaz",
        "bug_id": "25",
        "T": "void testEmptyMap() { final var invalidMap = \"\"; }",
        "C": "",
        "label": "P"
    },
    "2821": {
        "dataset": "COMP 3021",
        "project": "yxiaoaz",
        "bug_id": "26",
        "T": "void testMove(String input, String name, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); } private InputStream fixValueStream(String content) { final var bytes = content.getBytes(StandardCharsets.UTF_8); return new ByteArrayInputStream(bytes); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine(); System.out.println(\"INPUT :\"+inputLine); // TODO //Key A,S,W,D and H,J,K,L are used to move //Player with ID 0 and 1 to Left,Down,Up,Right direction by 1 step, respectively /* All Possible input values are (A, S, W, D, H, J, K, L, U, EXIT) and they should be the first character of the input line Input values are case insensitive (e.g. eXiT is also valid) All other values are invalid input, including whitespaces (e.g. \"\\n\" and \" A\" are both invalid) On the case of invalid input, TerminalInputEngine.fetchAction should return InvalidInput */ Action fetchedAction=null; switch (inputLine.toUpperCase()){ case \"W\": fetchedAction=new Move.Up(0); break; case \"K\": fetchedAction=new Move.Up(1); break; case \"S\": fetchedAction=new Move.Down(0); break; case \"J\": fetchedAction=new Move.Down(1); break; case \"A\": fetchedAction=new Move.Left(0); break; case \"H\": fetchedAction=new Move.Left(1); break; case \"D\": fetchedAction=new Move.Right(0); break; case \"L\": fetchedAction=new Move.Right(1); break; case \"U\": fetchedAction=new Undo(-1); break; case \"EXIT\": fetchedAction=new Exit(-1);break; default: //all other values fetchedAction=new InvalidInput(-1,StringResources.INVALID_INPUT_MESSAGE); } return fetchedAction; }",
        "label": "P"
    },
    "2822": {
        "dataset": "COMP 3021",
        "project": "yxiaoaz",
        "bug_id": "27",
        "T": "void testMove(String input, String name, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); } private InputStream fixValueStream(String content) { final var bytes = content.getBytes(StandardCharsets.UTF_8); return new ByteArrayInputStream(bytes); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine(); System.out.println(\"INPUT :\"+inputLine); // TODO //Key A,S,W,D and H,J,K,L are used to move //Player with ID 0 and 1 to Left,Down,Up,Right direction by 1 step, respectively /* All Possible input values are (A, S, W, D, H, J, K, L, U, EXIT) and they should be the first character of the input line Input values are case insensitive (e.g. eXiT is also valid) All other values are invalid input, including whitespaces (e.g. \"\\n\" and \" A\" are both invalid) On the case of invalid input, TerminalInputEngine.fetchAction should return InvalidInput */ Action fetchedAction=null; switch (inputLine.toUpperCase()){ case \"W\": fetchedAction=new Move.Up(0); break; case \"K\": fetchedAction=new Move.Up(1); break; case \"S\": fetchedAction=new Move.Down(0); break; case \"J\": fetchedAction=new Move.Down(1); break; case \"A\": fetchedAction=new Move.Left(0); break; case \"H\": fetchedAction=new Move.Left(1); break; case \"D\": fetchedAction=new Move.Right(0); break; case \"L\": fetchedAction=new Move.Right(1); break; case \"U\": fetchedAction=new Undo(-1); break; case \"EXIT\": fetchedAction=new Exit(-1);break; default: //all other values fetchedAction=new InvalidInput(-1,StringResources.INVALID_INPUT_MESSAGE); } return fetchedAction; }",
        "label": "P"
    },
    "2823": {
        "dataset": "COMP 3021",
        "project": "yxiaoaz",
        "bug_id": "28",
        "T": "void testMove(String input, String name, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); } private InputStream fixValueStream(String content) { final var bytes = content.getBytes(StandardCharsets.UTF_8); return new ByteArrayInputStream(bytes); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine(); System.out.println(\"INPUT :\"+inputLine); // TODO //Key A,S,W,D and H,J,K,L are used to move //Player with ID 0 and 1 to Left,Down,Up,Right direction by 1 step, respectively /* All Possible input values are (A, S, W, D, H, J, K, L, U, EXIT) and they should be the first character of the input line Input values are case insensitive (e.g. eXiT is also valid) All other values are invalid input, including whitespaces (e.g. \"\\n\" and \" A\" are both invalid) On the case of invalid input, TerminalInputEngine.fetchAction should return InvalidInput */ Action fetchedAction=null; switch (inputLine.toUpperCase()){ case \"W\": fetchedAction=new Move.Up(0); break; case \"K\": fetchedAction=new Move.Up(1); break; case \"S\": fetchedAction=new Move.Down(0); break; case \"J\": fetchedAction=new Move.Down(1); break; case \"A\": fetchedAction=new Move.Left(0); break; case \"H\": fetchedAction=new Move.Left(1); break; case \"D\": fetchedAction=new Move.Right(0); break; case \"L\": fetchedAction=new Move.Right(1); break; case \"U\": fetchedAction=new Undo(-1); break; case \"EXIT\": fetchedAction=new Exit(-1);break; default: //all other values fetchedAction=new InvalidInput(-1,StringResources.INVALID_INPUT_MESSAGE); } return fetchedAction; }",
        "label": "P"
    },
    "2824": {
        "dataset": "COMP 3021",
        "project": "yxiaoaz",
        "bug_id": "29",
        "T": "void testMove(String input, String name, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); } private InputStream fixValueStream(String content) { final var bytes = content.getBytes(StandardCharsets.UTF_8); return new ByteArrayInputStream(bytes); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine(); System.out.println(\"INPUT :\"+inputLine); // TODO //Key A,S,W,D and H,J,K,L are used to move //Player with ID 0 and 1 to Left,Down,Up,Right direction by 1 step, respectively /* All Possible input values are (A, S, W, D, H, J, K, L, U, EXIT) and they should be the first character of the input line Input values are case insensitive (e.g. eXiT is also valid) All other values are invalid input, including whitespaces (e.g. \"\\n\" and \" A\" are both invalid) On the case of invalid input, TerminalInputEngine.fetchAction should return InvalidInput */ Action fetchedAction=null; switch (inputLine.toUpperCase()){ case \"W\": fetchedAction=new Move.Up(0); break; case \"K\": fetchedAction=new Move.Up(1); break; case \"S\": fetchedAction=new Move.Down(0); break; case \"J\": fetchedAction=new Move.Down(1); break; case \"A\": fetchedAction=new Move.Left(0); break; case \"H\": fetchedAction=new Move.Left(1); break; case \"D\": fetchedAction=new Move.Right(0); break; case \"L\": fetchedAction=new Move.Right(1); break; case \"U\": fetchedAction=new Undo(-1); break; case \"EXIT\": fetchedAction=new Exit(-1);break; default: //all other values fetchedAction=new InvalidInput(-1,StringResources.INVALID_INPUT_MESSAGE); } return fetchedAction; }",
        "label": "P"
    },
    "2825": {
        "dataset": "COMP 3021",
        "project": "yxiaoaz",
        "bug_id": "30",
        "T": "void testMove(String input, String name, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); } private InputStream fixValueStream(String content) { final var bytes = content.getBytes(StandardCharsets.UTF_8); return new ByteArrayInputStream(bytes); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine(); System.out.println(\"INPUT :\"+inputLine); // TODO //Key A,S,W,D and H,J,K,L are used to move //Player with ID 0 and 1 to Left,Down,Up,Right direction by 1 step, respectively /* All Possible input values are (A, S, W, D, H, J, K, L, U, EXIT) and they should be the first character of the input line Input values are case insensitive (e.g. eXiT is also valid) All other values are invalid input, including whitespaces (e.g. \"\\n\" and \" A\" are both invalid) On the case of invalid input, TerminalInputEngine.fetchAction should return InvalidInput */ Action fetchedAction=null; switch (inputLine.toUpperCase()){ case \"W\": fetchedAction=new Move.Up(0); break; case \"K\": fetchedAction=new Move.Up(1); break; case \"S\": fetchedAction=new Move.Down(0); break; case \"J\": fetchedAction=new Move.Down(1); break; case \"A\": fetchedAction=new Move.Left(0); break; case \"H\": fetchedAction=new Move.Left(1); break; case \"D\": fetchedAction=new Move.Right(0); break; case \"L\": fetchedAction=new Move.Right(1); break; case \"U\": fetchedAction=new Undo(-1); break; case \"EXIT\": fetchedAction=new Exit(-1);break; default: //all other values fetchedAction=new InvalidInput(-1,StringResources.INVALID_INPUT_MESSAGE); } return fetchedAction; }",
        "label": "P"
    },
    "2826": {
        "dataset": "COMP 3021",
        "project": "yxiaoaz",
        "bug_id": "31",
        "T": "void testMove(String input, String name, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); } private InputStream fixValueStream(String content) { final var bytes = content.getBytes(StandardCharsets.UTF_8); return new ByteArrayInputStream(bytes); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine(); System.out.println(\"INPUT :\"+inputLine); // TODO //Key A,S,W,D and H,J,K,L are used to move //Player with ID 0 and 1 to Left,Down,Up,Right direction by 1 step, respectively /* All Possible input values are (A, S, W, D, H, J, K, L, U, EXIT) and they should be the first character of the input line Input values are case insensitive (e.g. eXiT is also valid) All other values are invalid input, including whitespaces (e.g. \"\\n\" and \" A\" are both invalid) On the case of invalid input, TerminalInputEngine.fetchAction should return InvalidInput */ Action fetchedAction=null; switch (inputLine.toUpperCase()){ case \"W\": fetchedAction=new Move.Up(0); break; case \"K\": fetchedAction=new Move.Up(1); break; case \"S\": fetchedAction=new Move.Down(0); break; case \"J\": fetchedAction=new Move.Down(1); break; case \"A\": fetchedAction=new Move.Left(0); break; case \"H\": fetchedAction=new Move.Left(1); break; case \"D\": fetchedAction=new Move.Right(0); break; case \"L\": fetchedAction=new Move.Right(1); break; case \"U\": fetchedAction=new Undo(-1); break; case \"EXIT\": fetchedAction=new Exit(-1);break; default: //all other values fetchedAction=new InvalidInput(-1,StringResources.INVALID_INPUT_MESSAGE); } return fetchedAction; }",
        "label": "P"
    },
    "2827": {
        "dataset": "COMP 3021",
        "project": "yxiaoaz",
        "bug_id": "32",
        "T": "void testMove(String input, String name, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); } private InputStream fixValueStream(String content) { final var bytes = content.getBytes(StandardCharsets.UTF_8); return new ByteArrayInputStream(bytes); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine(); System.out.println(\"INPUT :\"+inputLine); // TODO //Key A,S,W,D and H,J,K,L are used to move //Player with ID 0 and 1 to Left,Down,Up,Right direction by 1 step, respectively /* All Possible input values are (A, S, W, D, H, J, K, L, U, EXIT) and they should be the first character of the input line Input values are case insensitive (e.g. eXiT is also valid) All other values are invalid input, including whitespaces (e.g. \"\\n\" and \" A\" are both invalid) On the case of invalid input, TerminalInputEngine.fetchAction should return InvalidInput */ Action fetchedAction=null; switch (inputLine.toUpperCase()){ case \"W\": fetchedAction=new Move.Up(0); break; case \"K\": fetchedAction=new Move.Up(1); break; case \"S\": fetchedAction=new Move.Down(0); break; case \"J\": fetchedAction=new Move.Down(1); break; case \"A\": fetchedAction=new Move.Left(0); break; case \"H\": fetchedAction=new Move.Left(1); break; case \"D\": fetchedAction=new Move.Right(0); break; case \"L\": fetchedAction=new Move.Right(1); break; case \"U\": fetchedAction=new Undo(-1); break; case \"EXIT\": fetchedAction=new Exit(-1);break; default: //all other values fetchedAction=new InvalidInput(-1,StringResources.INVALID_INPUT_MESSAGE); } return fetchedAction; }",
        "label": "P"
    },
    "2828": {
        "dataset": "COMP 3021",
        "project": "yxiaoaz",
        "bug_id": "33",
        "T": "void testMove(String input, String name, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); } private InputStream fixValueStream(String content) { final var bytes = content.getBytes(StandardCharsets.UTF_8); return new ByteArrayInputStream(bytes); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine(); System.out.println(\"INPUT :\"+inputLine); // TODO //Key A,S,W,D and H,J,K,L are used to move //Player with ID 0 and 1 to Left,Down,Up,Right direction by 1 step, respectively /* All Possible input values are (A, S, W, D, H, J, K, L, U, EXIT) and they should be the first character of the input line Input values are case insensitive (e.g. eXiT is also valid) All other values are invalid input, including whitespaces (e.g. \"\\n\" and \" A\" are both invalid) On the case of invalid input, TerminalInputEngine.fetchAction should return InvalidInput */ Action fetchedAction=null; switch (inputLine.toUpperCase()){ case \"W\": fetchedAction=new Move.Up(0); break; case \"K\": fetchedAction=new Move.Up(1); break; case \"S\": fetchedAction=new Move.Down(0); break; case \"J\": fetchedAction=new Move.Down(1); break; case \"A\": fetchedAction=new Move.Left(0); break; case \"H\": fetchedAction=new Move.Left(1); break; case \"D\": fetchedAction=new Move.Right(0); break; case \"L\": fetchedAction=new Move.Right(1); break; case \"U\": fetchedAction=new Undo(-1); break; case \"EXIT\": fetchedAction=new Exit(-1);break; default: //all other values fetchedAction=new InvalidInput(-1,StringResources.INVALID_INPUT_MESSAGE); } return fetchedAction; }",
        "label": "P"
    },
    "2829": {
        "dataset": "COMP 3021",
        "project": "yxiaoaz",
        "bug_id": "34",
        "T": "void testUndo(String input, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine(); System.out.println(\"INPUT :\"+inputLine); // TODO //Key A,S,W,D and H,J,K,L are used to move //Player with ID 0 and 1 to Left,Down,Up,Right direction by 1 step, respectively /* All Possible input values are (A, S, W, D, H, J, K, L, U, EXIT) and they should be the first character of the input line Input values are case insensitive (e.g. eXiT is also valid) All other values are invalid input, including whitespaces (e.g. \"\\n\" and \" A\" are both invalid) On the case of invalid input, TerminalInputEngine.fetchAction should return InvalidInput */ Action fetchedAction=null; switch (inputLine.toUpperCase()){ case \"W\": fetchedAction=new Move.Up(0); break; case \"K\": fetchedAction=new Move.Up(1); break; case \"S\": fetchedAction=new Move.Down(0); break; case \"J\": fetchedAction=new Move.Down(1); break; case \"A\": fetchedAction=new Move.Left(0); break; case \"H\": fetchedAction=new Move.Left(1); break; case \"D\": fetchedAction=new Move.Right(0); break; case \"L\": fetchedAction=new Move.Right(1); break; case \"U\": fetchedAction=new Undo(-1); break; case \"EXIT\": fetchedAction=new Exit(-1);break; default: //all other values fetchedAction=new InvalidInput(-1,StringResources.INVALID_INPUT_MESSAGE); } return fetchedAction; }",
        "label": "P"
    },
    "2830": {
        "dataset": "COMP 3021",
        "project": "yxiaoaz",
        "bug_id": "35",
        "T": "void testInvalidInput() { final var inputStream = fixValueStream(\"blah blah\"); final var inputEngine = new TerminalInputEngine(inputStream); final var action = inputEngine.fetchAction(); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine(); System.out.println(\"INPUT :\"+inputLine); // TODO //Key A,S,W,D and H,J,K,L are used to move //Player with ID 0 and 1 to Left,Down,Up,Right direction by 1 step, respectively /* All Possible input values are (A, S, W, D, H, J, K, L, U, EXIT) and they should be the first character of the input line Input values are case insensitive (e.g. eXiT is also valid) All other values are invalid input, including whitespaces (e.g. \"\\n\" and \" A\" are both invalid) On the case of invalid input, TerminalInputEngine.fetchAction should return InvalidInput */ Action fetchedAction=null; switch (inputLine.toUpperCase()){ case \"W\": fetchedAction=new Move.Up(0); break; case \"K\": fetchedAction=new Move.Up(1); break; case \"S\": fetchedAction=new Move.Down(0); break; case \"J\": fetchedAction=new Move.Down(1); break; case \"A\": fetchedAction=new Move.Left(0); break; case \"H\": fetchedAction=new Move.Left(1); break; case \"D\": fetchedAction=new Move.Right(0); break; case \"L\": fetchedAction=new Move.Right(1); break; case \"U\": fetchedAction=new Undo(-1); break; case \"EXIT\": fetchedAction=new Exit(-1);break; default: //all other values fetchedAction=new InvalidInput(-1,StringResources.INVALID_INPUT_MESSAGE); } return fetchedAction; }",
        "label": "P"
    },
    "2831": {
        "dataset": "COMP 3021",
        "project": "yxiaoaz",
        "bug_id": "36",
        "T": "void testUndoWhenThereIsNoMove() { final var gameState = new GameState(TestHelper.parseGameMap(\"\"\" 233 ###### #A.a@# #..a@# ###### \"\"\" )); gameState.undo(); } private Entity generateEntity(int key) { return switch (key % 4) { case 0 -> new Box(0); case 1 -> new Empty(); case 2 -> new Player(0); case 3 -> new Wall(); default -> throw new ShouldNotReachException(); }; }",
        "C": "public GameState(@NotNull GameMap map) { // TODO this.map=map; this.undoLimit=this.map.undoLimit; this.recordEntityMatrix=new ArrayList<Entity[][]>(); //deep copy the Set<Position> records this.recordBoxes = new HashMap<Position, Box>(); this.recordPlayers = new HashMap<Position, Player>(); this.walls = new HashSet<Position>(); this.empties = new HashSet<Position>(); this.destinations = new HashSet<Position>(); for (Position pos : this.map.walls) { this.walls.add(pos); } for (Position pos : this.map.empties) { this.empties.add(pos); } for (Position pos : this.map.destinations) { this.destinations.add(pos); } for (Position pos : this.map.walls) { this.walls.add(pos); } // deep copy a Entity[][] database int row=this.map.entityMatrixStorage.length; int col=this.map.entityMatrixStorage[0].length; this.stateEntityMatrix=new Entity[row][col]; this.initialState=new Entity[row][col]; for (int i=0;i<row;i++){ stateEntityMatrix[i]=new Entity[col]; initialState[i]=new Entity[col]; for(int j=0;j<col;j++){ //System.out.println(\"i: \"+i+\" j: \"+j+\" ->\"+map.entityMatrixStorage[i][j]); // \u5899\u5916\u6ca1entity\u7684block\uff0c\u662fnull if(this.map.entityMatrixStorage[i][j]==null) continue; switch(this.map.entityMatrixStorage[i][j].getClass().getSimpleName()){ case \"Box\": // getPlayerId() only in Box, needs to downcast Entity to Box Box newbox=new Box(((Box)this.map.entityMatrixStorage[i][j]).getPlayerId()); stateEntityMatrix[i][j]=newbox; initialState[i][j]=newbox; recordBoxes.put(Position.of(j,i),newbox); break; case \"Player\": Player newplayer=new Player(((Player)this.map.entityMatrixStorage[i][j]).getId()); stateEntityMatrix[i][j]=newplayer; initialState[i][j]=newplayer; recordPlayers.put(Position.of(j,i),newplayer); break; case \"Wall\": stateEntityMatrix[i][j]=new Wall(); initialState[i][j]=new Wall(); break; case \"Empty\": stateEntityMatrix[i][j]=new Empty(); ((Empty)stateEntityMatrix[i][j]).setDestination(((Empty)this.map.entityMatrixStorage[i][j]).checkDestination()); initialState[i][j]=new Empty(); ((Empty)initialState[i][j]).setDestination(((Empty)this.map.entityMatrixStorage[i][j]).checkDestination()); break; default: break; } } } } public void undo() { // TODO //retrieve the LAST record from recordEntityMatrix //copy related instance variables from this record this.empties.clear(); this.walls.clear(); this.recordPlayers.clear(); this.recordBoxes.clear(); Entity[][] lastRecord=null; if(this.recordEntityMatrix.size()>1){ lastRecord=this.recordEntityMatrix.get(recordEntityMatrix.size()-2); if(!this.getUndoQuota().isEmpty()) this.undoLimit--; } else { lastRecord = this.initialState; /* Undo quota is only deducted when a checkpoint is reverted. So if there are no checkpoints, undo quota will not be deducted. * */ if(this.recordEntityMatrix.size()==1 && !this.getUndoQuota().isEmpty()) this.undoLimit--; } int row=lastRecord.length; int col=lastRecord[0].length; this.stateEntityMatrix=new Entity[row][col]; for (int i=0;i<row;i++){ stateEntityMatrix[i]=new Entity[col]; for(int j=0;j<col;j++){ // \u5899\u5916\u6ca1entity\u7684block\uff0c\u662fnull if(lastRecord[i][j]==null) continue; switch(lastRecord[i][j].getClass().getSimpleName()){ case \"Box\": // getPlayerId() only in Box, needs to downcast Entity to Box Box newbox=new Box(((Box)lastRecord[i][j]).getPlayerId()); stateEntityMatrix[i][j]=newbox; recordBoxes.put(Position.of(j,i),newbox); break; case \"Player\": Player newplayer=new Player(((Player)lastRecord[i][j]).getId()); stateEntityMatrix[i][j]=newplayer; recordPlayers.put(Position.of(j,i),newplayer); break; case \"Wall\": stateEntityMatrix[i][j]=new Wall(); this.walls.add(Position.of(j,i)); break; case \"Empty\": stateEntityMatrix[i][j]=new Empty(); this.empties.add(Position.of(j,i)); ((Empty)stateEntityMatrix[i][j]).setDestination(((Empty)lastRecord[i][j]).checkDestination()); break; default: break; } } } //remove latest record of Entity[][] if(!this.recordEntityMatrix.isEmpty()){ this.recordEntityMatrix.remove(recordEntityMatrix.size()-1); } } /** * Get the maximum width of the game map. * This should be the same as that in {@link GameMap} public TerminalRenderingEngine(PrintStream outputSteam) { this.outputSteam = outputSteam; } public Box(int playerId) { this.playerId = playerId; } public Player(int id) { this.id = id; } public ShouldNotReachException() { super(\"This branch should not be reached.\"); }",
        "label": "P"
    },
    "2832": {
        "dataset": "COMP 3021",
        "project": "yxiaoaz",
        "bug_id": "37",
        "T": "void testGetUndoUnlimited() { final var gameState = new GameState(TestHelper.parseGameMap(\"\"\" -1 ###### #.Aa@# #..a@# ###### \"\"\" )); }",
        "C": "public GameState(@NotNull GameMap map) { // TODO this.map=map; this.undoLimit=this.map.undoLimit; this.recordEntityMatrix=new ArrayList<Entity[][]>(); //deep copy the Set<Position> records this.recordBoxes = new HashMap<Position, Box>(); this.recordPlayers = new HashMap<Position, Player>(); this.walls = new HashSet<Position>(); this.empties = new HashSet<Position>(); this.destinations = new HashSet<Position>(); for (Position pos : this.map.walls) { this.walls.add(pos); } for (Position pos : this.map.empties) { this.empties.add(pos); } for (Position pos : this.map.destinations) { this.destinations.add(pos); } for (Position pos : this.map.walls) { this.walls.add(pos); } // deep copy a Entity[][] database int row=this.map.entityMatrixStorage.length; int col=this.map.entityMatrixStorage[0].length; this.stateEntityMatrix=new Entity[row][col]; this.initialState=new Entity[row][col]; for (int i=0;i<row;i++){ stateEntityMatrix[i]=new Entity[col]; initialState[i]=new Entity[col]; for(int j=0;j<col;j++){ //System.out.println(\"i: \"+i+\" j: \"+j+\" ->\"+map.entityMatrixStorage[i][j]); // \u5899\u5916\u6ca1entity\u7684block\uff0c\u662fnull if(this.map.entityMatrixStorage[i][j]==null) continue; switch(this.map.entityMatrixStorage[i][j].getClass().getSimpleName()){ case \"Box\": // getPlayerId() only in Box, needs to downcast Entity to Box Box newbox=new Box(((Box)this.map.entityMatrixStorage[i][j]).getPlayerId()); stateEntityMatrix[i][j]=newbox; initialState[i][j]=newbox; recordBoxes.put(Position.of(j,i),newbox); break; case \"Player\": Player newplayer=new Player(((Player)this.map.entityMatrixStorage[i][j]).getId()); stateEntityMatrix[i][j]=newplayer; initialState[i][j]=newplayer; recordPlayers.put(Position.of(j,i),newplayer); break; case \"Wall\": stateEntityMatrix[i][j]=new Wall(); initialState[i][j]=new Wall(); break; case \"Empty\": stateEntityMatrix[i][j]=new Empty(); ((Empty)stateEntityMatrix[i][j]).setDestination(((Empty)this.map.entityMatrixStorage[i][j]).checkDestination()); initialState[i][j]=new Empty(); ((Empty)initialState[i][j]).setDestination(((Empty)this.map.entityMatrixStorage[i][j]).checkDestination()); break; default: break; } } } }",
        "label": "P"
    },
    "2833": {
        "dataset": "COMP 3021",
        "project": "yxiaoaz",
        "bug_id": "38",
        "T": "void testMapCopying() { final var maxWidth = 2333; final var maxHeight = 2333; final var random = new Random(); final var randomEntities = Stream.generate(() -> Position.of(random.nextInt(maxWidth), random.nextInt(maxHeight))) .distinct() .limit(100) .collect(Collectors.toMap(Function.identity(), it -> generateEntity(it.x()))); final var firstPos = randomEntities.keySet().stream().findFirst(); final var gameMap = new GameMap(maxWidth, maxHeight, Collections.singleton(firstPos.get()), 233); randomEntities.forEach(gameMap::putEntity); final var gameState = new GameState(gameMap); final var randomPosition = randomEntities.keySet().stream().findAny(); gameMap.putEntity(randomPosition.get(), new Empty()); randomEntities.forEach((p, e) -> assertEquals(e, gameState.getEntity(p))); }",
        "C": "public static @NotNull Position of(int x, int y) { return new Position(x, y); } public GameMap(int maxWidth, int maxHeight, Set<Position> destinations, int undoLimit) { // TODO this.maxHeight=maxHeight; this.maxWidth=maxWidth; this.undoLimit=undoLimit; this.entityMatrixStorage=new Entity[maxHeight][maxWidth]; for (int row = 0; row < maxHeight; row++) { entityMatrixStorage[row] = new Entity[maxWidth]; } /* [recordPlayers] key: Player -> value: Positions [recordBoxes] key: Set<Position> -> value: Box */ this.recordPlayers = new HashMap<Position, Player>(); this.recordBoxes = new HashMap<Position, Box >(); /* [HashMap] Locations (record position of everything but players) key:Entity -> value:Set<Positions> eg. Wall -> { (0,1), (1,1), ...} Empty -> { (x,y), ... } * */ this.walls = new HashSet<Position>(); this.empties = new HashSet<Position>(); this.destinations = destinations; } /** * Parses the map from a string representation. * The first line is undo limit. * Starting from the second line, the game map is represented as follows, * <li># represents a {@link Wall}</li> * <li>@ represents a box destination.</li> * <li>Any upper-case letter represents a {@link Player}.</li> * <li> * Any lower-case letter represents a {@link Box} that is only movable by the player with the corresponding upper-case letter. * For instance, box \"a\" can only be moved by player \"A\" and not movable by player \"B\". * </li> * <li>. represents an {@link Empty} position in the map, meaning there is no player or box currently at this position.</li> * <p> * Notes: * <li> * There can be at most 26 players. * All implementations of classes in the hk.ust.comp3021.game package should support up to 26 players. * </li> * <li> * For simplicity, we assume the given map is bounded with a closed boundary. * There is no need to check this point. * </li> * <li> * Example maps can be found in \"src/main/resources\". * </li> * * @param mapText The string representation. * @return The parsed GameMap object. * @throws IllegalArgumentException if undo limit is negative but not -1. * @throws IllegalArgumentException if there are multiple same upper-case letters, i.e., one player can only exist at one position. * @throws IllegalArgumentException if there are no players in the map. * @throws IllegalArgumentException if the number of boxes is not equal to the number of box destinations. * @throws IllegalArgumentException if there are boxes whose {@link Box#getPlayerId()} public GameState(@NotNull GameMap map) { // TODO this.map=map; this.undoLimit=this.map.undoLimit; this.recordEntityMatrix=new ArrayList<Entity[][]>(); //deep copy the Set<Position> records this.recordBoxes = new HashMap<Position, Box>(); this.recordPlayers = new HashMap<Position, Player>(); this.walls = new HashSet<Position>(); this.empties = new HashSet<Position>(); this.destinations = new HashSet<Position>(); for (Position pos : this.map.walls) { this.walls.add(pos); } for (Position pos : this.map.empties) { this.empties.add(pos); } for (Position pos : this.map.destinations) { this.destinations.add(pos); } for (Position pos : this.map.walls) { this.walls.add(pos); } // deep copy a Entity[][] database int row=this.map.entityMatrixStorage.length; int col=this.map.entityMatrixStorage[0].length; this.stateEntityMatrix=new Entity[row][col]; this.initialState=new Entity[row][col]; for (int i=0;i<row;i++){ stateEntityMatrix[i]=new Entity[col]; initialState[i]=new Entity[col]; for(int j=0;j<col;j++){ //System.out.println(\"i: \"+i+\" j: \"+j+\" ->\"+map.entityMatrixStorage[i][j]); // \u5899\u5916\u6ca1entity\u7684block\uff0c\u662fnull if(this.map.entityMatrixStorage[i][j]==null) continue; switch(this.map.entityMatrixStorage[i][j].getClass().getSimpleName()){ case \"Box\": // getPlayerId() only in Box, needs to downcast Entity to Box Box newbox=new Box(((Box)this.map.entityMatrixStorage[i][j]).getPlayerId()); stateEntityMatrix[i][j]=newbox; initialState[i][j]=newbox; recordBoxes.put(Position.of(j,i),newbox); break; case \"Player\": Player newplayer=new Player(((Player)this.map.entityMatrixStorage[i][j]).getId()); stateEntityMatrix[i][j]=newplayer; initialState[i][j]=newplayer; recordPlayers.put(Position.of(j,i),newplayer); break; case \"Wall\": stateEntityMatrix[i][j]=new Wall(); initialState[i][j]=new Wall(); break; case \"Empty\": stateEntityMatrix[i][j]=new Empty(); ((Empty)stateEntityMatrix[i][j]).setDestination(((Empty)this.map.entityMatrixStorage[i][j]).checkDestination()); initialState[i][j]=new Empty(); ((Empty)initialState[i][j]).setDestination(((Empty)this.map.entityMatrixStorage[i][j]).checkDestination()); break; default: break; } } } } public void putEntity(Position position, Entity entity) { // TODO if(this.entityMatrixStorage[position.y()][position.x()]!=null){ Entity tobeRemoved=this.entityMatrixStorage[position.y()][position.x()]; if(tobeRemoved instanceof Player p){ this.recordPlayers.remove(position,p); } else if(tobeRemoved instanceof Box b){ this.recordBoxes.remove(position,b); } else if(tobeRemoved instanceof Wall w){ this.walls.remove(position); }else if(tobeRemoved instanceof Empty e){ this.empties.remove(position); if(e.checkDestination()){ this.destinations.remove(position); } } } this.entityMatrixStorage[position.y()][position.x()]=entity; if(entity instanceof Player p){ this.recordPlayers.put(position,p); } else if(entity instanceof Box b){ this.recordBoxes.put(position,b); } else if(entity instanceof Wall w){ this.walls.add(position); }else if(entity instanceof Empty e){ this.empties.add(position); if(e.checkDestination()){ this.destinations.add(position); } } } public @Nullable Entity getEntity(@NotNull Position position) { // TODO return this.stateEntityMatrix[position.y()][position.x()]; }",
        "label": "F"
    },
    "2834": {
        "dataset": "COMP 3021",
        "project": "yxiaoaz",
        "bug_id": "39",
        "T": "void testUndoWhenThereIsMoveButNoCheckpoint() { final var gameState = new GameState(TestHelper.parseGameMap(\"\"\" 233 ###### #A.a@# #..a@# ###### \"\"\" )); gameState.move(Position.of(1, 1), Position.of(2, 1)); gameState.undo(); }",
        "C": "public GameState(@NotNull GameMap map) { // TODO this.map=map; this.undoLimit=this.map.undoLimit; this.recordEntityMatrix=new ArrayList<Entity[][]>(); //deep copy the Set<Position> records this.recordBoxes = new HashMap<Position, Box>(); this.recordPlayers = new HashMap<Position, Player>(); this.walls = new HashSet<Position>(); this.empties = new HashSet<Position>(); this.destinations = new HashSet<Position>(); for (Position pos : this.map.walls) { this.walls.add(pos); } for (Position pos : this.map.empties) { this.empties.add(pos); } for (Position pos : this.map.destinations) { this.destinations.add(pos); } for (Position pos : this.map.walls) { this.walls.add(pos); } // deep copy a Entity[][] database int row=this.map.entityMatrixStorage.length; int col=this.map.entityMatrixStorage[0].length; this.stateEntityMatrix=new Entity[row][col]; this.initialState=new Entity[row][col]; for (int i=0;i<row;i++){ stateEntityMatrix[i]=new Entity[col]; initialState[i]=new Entity[col]; for(int j=0;j<col;j++){ //System.out.println(\"i: \"+i+\" j: \"+j+\" ->\"+map.entityMatrixStorage[i][j]); // \u5899\u5916\u6ca1entity\u7684block\uff0c\u662fnull if(this.map.entityMatrixStorage[i][j]==null) continue; switch(this.map.entityMatrixStorage[i][j].getClass().getSimpleName()){ case \"Box\": // getPlayerId() only in Box, needs to downcast Entity to Box Box newbox=new Box(((Box)this.map.entityMatrixStorage[i][j]).getPlayerId()); stateEntityMatrix[i][j]=newbox; initialState[i][j]=newbox; recordBoxes.put(Position.of(j,i),newbox); break; case \"Player\": Player newplayer=new Player(((Player)this.map.entityMatrixStorage[i][j]).getId()); stateEntityMatrix[i][j]=newplayer; initialState[i][j]=newplayer; recordPlayers.put(Position.of(j,i),newplayer); break; case \"Wall\": stateEntityMatrix[i][j]=new Wall(); initialState[i][j]=new Wall(); break; case \"Empty\": stateEntityMatrix[i][j]=new Empty(); ((Empty)stateEntityMatrix[i][j]).setDestination(((Empty)this.map.entityMatrixStorage[i][j]).checkDestination()); initialState[i][j]=new Empty(); ((Empty)initialState[i][j]).setDestination(((Empty)this.map.entityMatrixStorage[i][j]).checkDestination()); break; default: break; } } } } public void move(Position from, Position to) { // TODO /* * Step1: determine entity type of [from](entityFrom) & [to](entityTo) * Step2: for Set<Position> entityFrom: remove [from], add [to] * for Set<Position> entityTo: remove [to], add [from] * Step3: adjust stateEntityMatrix: * */ //Step1: determine entity type of [from](entityFrom) & [to](entityTo) String typeFrom=this.checkEntityType(from); String typeTo=this.checkEntityType(to); Entity tempHolderFrom=this.getEntity(from); Entity tempHolderTo=this.getEntity(to); //debug //System.out.println(\"type of [from] :\"+typeFrom); switch (typeFrom){ case \"Player\": //\u63a8Player: \u53ea\u80fd\u5c06player\u63a8\u5230empty\u4e0a\uff0cfrom\u7684\u4f4d\u7f6e\u6307\u5411empty // update recordPlayers({Position : Player}) this.recordPlayers.put(to,(Player)tempHolderFrom); this.recordPlayers.remove(from); //update empties (Set<Position>) this.empties.remove(to); this.empties.add(from); // update 2d map: swap references this.stateEntityMatrix[to.y()][to.x()]=(Player)tempHolderFrom; this.stateEntityMatrix[from.y()][from.x()]=(Empty)tempHolderTo; // case: // ...B@. -> // ....B. -> \u6b63\u89e3\uff1aB\u539f\u5148\u7684\u4f4d\u5b50\u4e0d\u4f1a\u51fa\u73b0@ // ....@B ((Empty)this.stateEntityMatrix[from.y()][from.x()]).setDestination(false); //\u5047\u5982from\u672c\u6765\u662fdestination\uff0c@\u7b26\u53f7\u88ab\u538b\u4f4f\uff0c\u5c31\u8981\u8ba9\u5b83\u91cd\u89c1\u5929\u65e5 for(Position pos:this.destinations){ if(pos.x()==from.x() && pos.y()==from.y()){ ((Empty)this.stateEntityMatrix[from.y()][from.x()]).setDestination(true); } } break; case \"Box\": //Box: \u53ea\u80fd\u5c06box\u63a8\u5230empty\u4e0a\uff0cfrom\u7684\u4f4d\u7f6e\u6307\u5411empty // update recordBox({Position : Box}) this.recordBoxes.put(to,(Box)tempHolderFrom); this.recordBoxes.remove(from); //update empties (Set<Position>) this.empties.remove(to); this.empties.add(from); // update 2d map: swap references this.stateEntityMatrix[to.y()][to.x()]=(Box)tempHolderFrom; this.stateEntityMatrix[from.y()][from.x()]=(Empty)tempHolderTo; //\u4f46\u5047\u5982 to \u662fdestination\uff0c\u5c31\u4e0d\u5e94\u8be5\u628a\"@\"\u6807\u5fd7\u8ddf\u7740\u88abswap\u8d70\uff0c\u800c\u662f\u8981\u8ba9\u4ed6\u88ab\u76d6\u4f4f ((Empty)this.stateEntityMatrix[from.y()][from.x()]).setDestination(false); break; default: break; } } /** * Record a checkpoint of the game state, including: * <li>All current positions of entities in the game map.</li> * <li>Current undo quota</li> * <p> * Checkpoint is used in {@link GameState#undo()} public static @NotNull Position of(int x, int y) { return new Position(x, y); } public void undo() { // TODO //retrieve the LAST record from recordEntityMatrix //copy related instance variables from this record this.empties.clear(); this.walls.clear(); this.recordPlayers.clear(); this.recordBoxes.clear(); Entity[][] lastRecord=null; if(this.recordEntityMatrix.size()>1){ lastRecord=this.recordEntityMatrix.get(recordEntityMatrix.size()-2); if(!this.getUndoQuota().isEmpty()) this.undoLimit--; } else { lastRecord = this.initialState; /* Undo quota is only deducted when a checkpoint is reverted. So if there are no checkpoints, undo quota will not be deducted. * */ if(this.recordEntityMatrix.size()==1 && !this.getUndoQuota().isEmpty()) this.undoLimit--; } int row=lastRecord.length; int col=lastRecord[0].length; this.stateEntityMatrix=new Entity[row][col]; for (int i=0;i<row;i++){ stateEntityMatrix[i]=new Entity[col]; for(int j=0;j<col;j++){ // \u5899\u5916\u6ca1entity\u7684block\uff0c\u662fnull if(lastRecord[i][j]==null) continue; switch(lastRecord[i][j].getClass().getSimpleName()){ case \"Box\": // getPlayerId() only in Box, needs to downcast Entity to Box Box newbox=new Box(((Box)lastRecord[i][j]).getPlayerId()); stateEntityMatrix[i][j]=newbox; recordBoxes.put(Position.of(j,i),newbox); break; case \"Player\": Player newplayer=new Player(((Player)lastRecord[i][j]).getId()); stateEntityMatrix[i][j]=newplayer; recordPlayers.put(Position.of(j,i),newplayer); break; case \"Wall\": stateEntityMatrix[i][j]=new Wall(); this.walls.add(Position.of(j,i)); break; case \"Empty\": stateEntityMatrix[i][j]=new Empty(); this.empties.add(Position.of(j,i)); ((Empty)stateEntityMatrix[i][j]).setDestination(((Empty)lastRecord[i][j]).checkDestination()); break; default: break; } } } //remove latest record of Entity[][] if(!this.recordEntityMatrix.isEmpty()){ this.recordEntityMatrix.remove(recordEntityMatrix.size()-1); } } /** * Get the maximum width of the game map. * This should be the same as that in {@link GameMap}",
        "label": "P"
    },
    "2835": {
        "dataset": "COMP 3021",
        "project": "yxiaoaz",
        "bug_id": "40",
        "T": "void testGameExit() { final var gameState = mock(GameState.class); final var inputEngine = mock(TerminalInputEngine.class); final var renderingEngine = mock(TerminalRenderingEngine.class); when(gameState.isWin()).thenReturn(false, false, false); when(inputEngine.fetchAction()) .thenReturn(new InvalidInput(0, \"\"), new InvalidInput(0, \"\"), new Exit(0)); final var game = new TerminalSokobanGame(gameState, inputEngine, renderingEngine); game.run(); verify(renderingEngine, atLeastOnce()).message(any()); }",
        "C": "public InvalidInput(int initiator, @NotNull String message) { super(initiator); this.message = message; } public Exit(int initiator) { super(initiator); } public TerminalSokobanGame(GameState gameState, TerminalInputEngine inputEngine, TerminalRenderingEngine renderingEngine) { super(gameState); this.inputEngine = inputEngine; this.renderingEngine = renderingEngine; // TODO // Check the number of players if (gameState.getAllPlayerPositions().size()>2) throw new IllegalArgumentException(); } public void run() { // TODO int currentPlayerID=0; // to rotate around players; //first call: print welcome message this.renderingEngine.message(StringResources.GAME_READY_MESSAGE); this.renderingEngine.render(state); while(!this.shouldStop()){ //game body //read input //process action Action fetchedAction=this.inputEngine.fetchAction(); ActionResult processedAction=this.processAction(fetchedAction); //if fail:print message while(processedAction instanceof Failed failed){ this.renderingEngine.message(((Failed)processedAction).getReason()); this.renderingEngine.render(this.state); //print undo quota if(this.state.getUndoQuota().isEmpty()){ this.renderingEngine.message(String.format(StringResources.UNDO_QUOTA_TEMPLATE,-1)); }else if (this.state.getUndoQuota().get().intValue()==-1){ this.renderingEngine.message(String.format(StringResources.UNDO_QUOTA_TEMPLATE,StringResources.UNDO_QUOTA_UNLIMITED)); }else{ this.renderingEngine.message(String.format(StringResources.UNDO_QUOTA_TEMPLATE,state.getUndoQuota().get().intValue())); } processedAction=this.processAction(this.inputEngine.fetchAction()); } this.renderingEngine.render(this.state); //exit: if (this.hasExit||this.state.isWin()){ this.renderingEngine.message(StringResources.GAME_EXIT_MESSAGE); if(this.state.isWin()){ this.renderingEngine.message(StringResources.WIN_MESSAGE); } break; } //print undo quota if(this.state.getUndoQuota().isEmpty()){ this.renderingEngine.message(String.format(StringResources.UNDO_QUOTA_TEMPLATE,-1)); }else{ this.renderingEngine.message(String.format(StringResources.UNDO_QUOTA_TEMPLATE,this.state.getUndoQuota().get().intValue())); } } }",
        "label": "P"
    },
    "2836": {
        "dataset": "COMP 3021",
        "project": "yxiaoaz",
        "bug_id": "41",
        "T": "void testGameWin() { final var gameState = mock(GameState.class); final var inputEngine = mock(TerminalInputEngine.class); final var renderingEngine = mock(TerminalRenderingEngine.class); when(gameState.isWin()).thenReturn(false, false, false, true); when(inputEngine.fetchAction()) .thenReturn(new InvalidInput(0, \"\")); final var game = new TerminalSokobanGame(gameState, inputEngine, renderingEngine); game.run(); verify(gameState, atLeastOnce()).isWin(); verify(renderingEngine, atLeastOnce()).message(any()); }",
        "C": "public InvalidInput(int initiator, @NotNull String message) { super(initiator); this.message = message; } public TerminalSokobanGame(GameState gameState, TerminalInputEngine inputEngine, TerminalRenderingEngine renderingEngine) { super(gameState); this.inputEngine = inputEngine; this.renderingEngine = renderingEngine; // TODO // Check the number of players if (gameState.getAllPlayerPositions().size()>2) throw new IllegalArgumentException(); } public void run() { // TODO int currentPlayerID=0; // to rotate around players; //first call: print welcome message this.renderingEngine.message(StringResources.GAME_READY_MESSAGE); this.renderingEngine.render(state); while(!this.shouldStop()){ //game body //read input //process action Action fetchedAction=this.inputEngine.fetchAction(); ActionResult processedAction=this.processAction(fetchedAction); //if fail:print message while(processedAction instanceof Failed failed){ this.renderingEngine.message(((Failed)processedAction).getReason()); this.renderingEngine.render(this.state); //print undo quota if(this.state.getUndoQuota().isEmpty()){ this.renderingEngine.message(String.format(StringResources.UNDO_QUOTA_TEMPLATE,-1)); }else if (this.state.getUndoQuota().get().intValue()==-1){ this.renderingEngine.message(String.format(StringResources.UNDO_QUOTA_TEMPLATE,StringResources.UNDO_QUOTA_UNLIMITED)); }else{ this.renderingEngine.message(String.format(StringResources.UNDO_QUOTA_TEMPLATE,state.getUndoQuota().get().intValue())); } processedAction=this.processAction(this.inputEngine.fetchAction()); } this.renderingEngine.render(this.state); //exit: if (this.hasExit||this.state.isWin()){ this.renderingEngine.message(StringResources.GAME_EXIT_MESSAGE); if(this.state.isWin()){ this.renderingEngine.message(StringResources.WIN_MESSAGE); } break; } //print undo quota if(this.state.getUndoQuota().isEmpty()){ this.renderingEngine.message(String.format(StringResources.UNDO_QUOTA_TEMPLATE,-1)); }else{ this.renderingEngine.message(String.format(StringResources.UNDO_QUOTA_TEMPLATE,this.state.getUndoQuota().get().intValue())); } } }",
        "label": "F"
    },
    "2837": {
        "dataset": "COMP 3021",
        "project": "yxiaoaz",
        "bug_id": "42",
        "T": "void testMoreThanTwoPlayers() { final var gameState = mock(GameState.class); final var inputEngine = mock(TerminalInputEngine.class); final var renderingEngine = mock(TerminalRenderingEngine.class); when(gameState.getAllPlayerPositions()).thenReturn(new HashSet<>(Arrays.asList(Position.of(1, 1), Position.of(1, 2), Position.of(1, 3)))); }",
        "C": "public static @NotNull Position of(int x, int y) { return new Position(x, y); }",
        "label": "P"
    },
    "2838": {
        "dataset": "COMP 3021",
        "project": "ltgu",
        "bug_id": "0",
        "T": "void moveUp() { Position.of(233, 232), new Move.Up(-1).nextPosition(pos) ); }",
        "C": "public static @NotNull Position of(int x, int y) { return new Position(x, y); } public Up(int initiator) { super(initiator); }",
        "label": "P"
    },
    "2839": {
        "dataset": "COMP 3021",
        "project": "ltgu",
        "bug_id": "1",
        "T": "void moveDown() { Position.of(233, 234), new Move.Down(-1).nextPosition(pos) ); }",
        "C": "public static @NotNull Position of(int x, int y) { return new Position(x, y); } public Down(int initiator) { super(initiator); }",
        "label": "P"
    },
    "2840": {
        "dataset": "COMP 3021",
        "project": "ltgu",
        "bug_id": "2",
        "T": "void moveRight() { Position.of(234, 233), new Move.Right(-1).nextPosition(pos) ); }",
        "C": "public static @NotNull Position of(int x, int y) { return new Position(x, y); } public Right(int initiator) { super(initiator); }",
        "label": "P"
    },
    "2841": {
        "dataset": "COMP 3021",
        "project": "ltgu",
        "bug_id": "3",
        "T": "void testExceedingUndoQuota() { final var gameState = mock(GameState.class); when(gameState.getPlayerPositionById(anyInt())).thenReturn(Position.of(0, 0)); when(gameState.getUndoQuota()).thenReturn(Optional.of(0)); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Undo(0)); }",
        "C": "public Undo(int initiator) { super(initiator); }",
        "label": "P"
    },
    "2842": {
        "dataset": "COMP 3021",
        "project": "ltgu",
        "bug_id": "4",
        "T": "void testExit() { final var gameState = mock(GameState.class); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Exit(0)); }",
        "C": "public Exit(int initiator) { super(initiator); }",
        "label": "P"
    },
    "2843": {
        "dataset": "COMP 3021",
        "project": "ltgu",
        "bug_id": "5",
        "T": "void testUndoUnlimited() { final var gameState = mock(GameState.class); when(gameState.getPlayerPositionById(anyInt())).thenReturn(Position.of(0, 0)); when(gameState.getUndoQuota()).thenReturn(Optional.empty()); final var game = new SokobanGameForTesting(gameState); for (int i = 0; i < 10000; i++) { final var result = game.feedActionForProcessing(new Undo(0)); } verify(gameState, times(10000)).undo(); }",
        "C": "public TerminalRenderingEngine(PrintStream outputSteam) { this.outputSteam = outputSteam; } public Undo(int initiator) { super(initiator); }",
        "label": "P"
    },
    "2844": {
        "dataset": "COMP 3021",
        "project": "ltgu",
        "bug_id": "6",
        "T": "void testPushOtherPlayerBox() { String mapText = \"\"\" 233 ###### #AB.@# #b.a.# #@...# ###### \"\"\"; final var testMap = TestHelper.parseGameMap(mapText); final var gameState = spy(new GameState(testMap)); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Move.Down(0)); verify(gameState, never()).move(any(), any()); }",
        "C": "public GameState(@NotNull GameMap map) { // TODO this.map = map; undoQuota = map.undoLimit; entityPositions = new HashMap<>(map.positionEntityMap); } public Down(int initiator) { super(initiator); }",
        "label": "P"
    },
    "2845": {
        "dataset": "COMP 3021",
        "project": "ltgu",
        "bug_id": "7",
        "T": "void testMoveNonExistingPlayer() { String mapText = \"\"\" 233 ###### #A..@# #a...# ##...# ###### \"\"\"; final var testMap = TestHelper.parseGameMap(mapText); final var gameState = spy(new GameState(testMap)); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Move.Down(23)); }",
        "C": "public GameState(@NotNull GameMap map) { // TODO this.map = map; undoQuota = map.undoLimit; entityPositions = new HashMap<>(map.positionEntityMap); } public Down(int initiator) { super(initiator); }",
        "label": "P"
    },
    "2846": {
        "dataset": "COMP 3021",
        "project": "ltgu",
        "bug_id": "8",
        "T": "void testCheckpointWhenNeed() { final var gameState = spy(new GameState(TestHelper.parseGameMap(\"\"\" 233 ###### #.Aa@# #..a@# ###### \"\"\" ))); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Move.Right(0)); verify(gameState, times(1)).checkpoint(); }",
        "C": "public GameState(@NotNull GameMap map) { // TODO this.map = map; undoQuota = map.undoLimit; entityPositions = new HashMap<>(map.positionEntityMap); } public Right(int initiator) { super(initiator); }",
        "label": "P"
    },
    "2847": {
        "dataset": "COMP 3021",
        "project": "ltgu",
        "bug_id": "9",
        "T": "void testPushBoxAgainstWall() { String mapText = \"\"\" 233 ###### #A..@# #a...# ##...# ###### \"\"\"; final var testMap = TestHelper.parseGameMap(mapText); final var gameState = spy(new GameState(testMap)); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Move.Down(0)); verify(gameState, never()).move(any(), any()); }",
        "C": "public GameState(@NotNull GameMap map) { // TODO this.map = map; undoQuota = map.undoLimit; entityPositions = new HashMap<>(map.positionEntityMap); } public Down(int initiator) { super(initiator); }",
        "label": "P"
    },
    "2848": {
        "dataset": "COMP 3021",
        "project": "ltgu",
        "bug_id": "10",
        "T": "void testCheckpointWhenNotNeed() { final var gameState = spy(new GameState(TestHelper.parseGameMap(\"\"\" 233 ###### #A.a@# #..a@# ###### \"\"\" ))); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Move.Right(0)); verify(gameState, never()).checkpoint(); } private static class SokobanGameForTesting extends AbstractSokobanGame { protected SokobanGameForTesting(GameState gameState) { super(gameState); } @Override public void run() { } public ActionResult feedActionForProcessing(Action action) { return processAction(action); } }",
        "C": "public GameState(@NotNull GameMap map) { // TODO this.map = map; undoQuota = map.undoLimit; entityPositions = new HashMap<>(map.positionEntityMap); } public Right(int initiator) { super(initiator); } public void run() { // TODO renderingEngine.message(StringResources.GAME_READY_MESSAGE); // Sokoban game is ready while (!shouldStop()) { renderingEngine.render(state); // print game map renderingEngine.message(\"\"); // skip a line String undoLimit; if (state.getUndoQuota().isPresent()) { // creating undo quota String undoLimit = String.format(StringResources.UNDO_QUOTA_TEMPLATE, state.getUndoQuota().get()); } else { undoLimit = String.format(StringResources.UNDO_QUOTA_TEMPLATE, StringResources.UNDO_QUOTA_UNLIMITED); } renderingEngine.message(String.format(undoLimit)); // print undo quota renderingEngine.message(\">>>\"); ActionResult result = processAction(inputEngine.fetchAction()); // fetch user input if (result.getClass() == ActionResult.Failed.class) { renderingEngine.message(((ActionResult.Failed) result).getReason()); } } renderingEngine.render(state); renderingEngine.message(\"\"); renderingEngine.message(StringResources.GAME_EXIT_MESSAGE); if (state.isWin()) { renderingEngine.message(StringResources.WIN_MESSAGE); } return; } protected ActionResult processAction(@NotNull Action action) { // TODO switch (action) { case (Exit e): exit = true; return new ActionResult.Success(e); case (InvalidInput i): return new ActionResult.Failed(i, i.getMessage()); case (Move m): Position playerPos = state.getPlayerPositionById(m.getInitiator()); if (playerPos == null) { return new ActionResult.Failed(m, StringResources.PLAYER_NOT_FOUND); } else { Position nextPos = m.nextPosition(state.getPlayerPositionById(m.getInitiator())); Entity nextEntity = state.getEntity(nextPos); if (nextEntity.getClass() == Wall.class) { return new ActionResult.Failed(m, \"You hit a wall.\"); } else if (nextEntity.getClass() == Box.class) { Position nextNextPos = m.nextPosition(nextPos); if (state.getEntity(nextNextPos).getClass() == Empty.class) { // ensure that A push a, and nothing is blocking if (((Box) nextEntity).getPlayerId() == m.getInitiator()) { state.move(nextPos, nextNextPos); state.move(playerPos, nextPos); state.checkpoint(); return new ActionResult.Success(m); } else { return new ActionResult.Failed(m, \"You cannot move other players' boxes.\"); } } else { return new ActionResult.Failed(m, \"Failed to push the box.\"); } } else if (nextEntity.getClass() == Player.class) { return new ActionResult.Failed(m, \"You hit another player.\"); } else { state.move(playerPos, nextPos); return new ActionResult.Success(m); } } case (Undo u): if (state.getUndoQuota().isPresent() && state.getUndoQuota().get() == 0) { return new ActionResult.Failed(u, StringResources.UNDO_QUOTA_RUN_OUT); } else { state.undo(); return new ActionResult.Success(u); } default: break; } return null; // all cases should be handled in the switch above }",
        "label": "P"
    },
    "2849": {
        "dataset": "COMP 3021",
        "project": "ltgu",
        "bug_id": "11",
        "T": "void testHitAnotherPlayer() { String mapText = \"\"\" 233 ###### #A..@# #B...# #ab.@# ###### \"\"\"; final var testMap = TestHelper.parseGameMap(mapText); final var gameState = spy(new GameState(testMap)); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Move.Down(0)); verify(gameState, never()).move(any(), any()); }",
        "C": "public GameState(@NotNull GameMap map) { // TODO this.map = map; undoQuota = map.undoLimit; entityPositions = new HashMap<>(map.positionEntityMap); } public Down(int initiator) { super(initiator); }",
        "label": "P"
    },
    "2850": {
        "dataset": "COMP 3021",
        "project": "ltgu",
        "bug_id": "12",
        "T": "void testUndoWithinQuota() { final var gameState = mock(GameState.class); when(gameState.getPlayerPositionById(anyInt())).thenReturn(Position.of(0, 0)); when(gameState.getUndoQuota()).thenReturn(Optional.of(1)); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Undo(0)); verify(gameState, times(1)).undo(); }",
        "C": "public Undo(int initiator) { super(initiator); }",
        "label": "P"
    },
    "2851": {
        "dataset": "COMP 3021",
        "project": "ltgu",
        "bug_id": "13",
        "T": "void testInvalidInput() { final var game = new SokobanGameForTesting(mock(GameState.class)); final var message = String.valueOf(new Random().nextLong()); final var action = new InvalidInput(-1, message); final var result = game.feedActionForProcessing(action); }",
        "C": "public InvalidInput(int initiator, @NotNull String message) { super(initiator); this.message = message; }",
        "label": "P"
    },
    "2852": {
        "dataset": "COMP 3021",
        "project": "ltgu",
        "bug_id": "14",
        "T": "void testUndoLimitParsing() { final var gameMap = TestHelper.parseGameMap(rectangularMap); }",
        "C": "",
        "label": "P"
    },
    "2853": {
        "dataset": "COMP 3021",
        "project": "ltgu",
        "bug_id": "15",
        "T": "void testWidthForNonRectangularMap() { final var gameMap = TestHelper.parseGameMap(nonRectangularMap); }",
        "C": "",
        "label": "P"
    },
    "2854": {
        "dataset": "COMP 3021",
        "project": "ltgu",
        "bug_id": "16",
        "T": "void testTwoPlayersMap() { final var twoPlayersMap = \"\"\" 233 ###### #A..@# #..B@# #....# #.a..# #..b.# ###### \"\"\"; final var gameMap = TestHelper.parseGameMap(twoPlayersMap); final var playerIds = gameMap.getPlayerIds(); final var expectedIds = new HashSet<Integer>(); expectedIds.add(0); expectedIds.add(1); }",
        "C": "public Set<Integer> getPlayerIds() { // TODO Set<Integer> playerIds = new HashSet<>(); for (Entity e : positionEntityMap.values()) { if (e.getClass() == Player.class) { playerIds.add(((Player) e).getId()); } } return playerIds; }",
        "label": "P"
    },
    "2855": {
        "dataset": "COMP 3021",
        "project": "ltgu",
        "bug_id": "17",
        "T": "void testMapWithoutPlayer() { final var invalidMap = \"\"\" 233 ### #.# ### \"\"\"; } // @Tag(TestKind.HIDDEN) // @Test // void testUnmatchedPlayersAndBoxes() { // final var invalidMap = \"\"\" // 233 // ###### // #A..@# // #...@# // #a.b@# // #.a.@# // #..a.# // ###### // \"\"\"; // assertThrowsExactly(IllegalArgumentException.class, () -> TestHelper.parseGameMap(invalidMap)); // }",
        "C": "public TerminalRenderingEngine(PrintStream outputSteam) { this.outputSteam = outputSteam; }",
        "label": "P"
    },
    "2856": {
        "dataset": "COMP 3021",
        "project": "ltgu",
        "bug_id": "18",
        "T": "void testManyPlayersMap() { final var manyPlayersMap = \"\"\" 233 ###### #A.P@@# #vCB@@# #.cpD@# #Ga.d@# #g.bV@# ###### \"\"\"; final var gameMap = TestHelper.parseGameMap(manyPlayersMap); final var playerIds = gameMap.getPlayerIds(); final var expectedIds = new HashSet<>(Arrays.asList( 0, 'P' - 'A', 'C' - 'A', 'B' - 'A', 'D' - 'A', 'G' - 'A', 'V' - 'A' )); }",
        "C": "public Set<Integer> getPlayerIds() { // TODO Set<Integer> playerIds = new HashSet<>(); for (Entity e : positionEntityMap.values()) { if (e.getClass() == Player.class) { playerIds.add(((Player) e).getId()); } } return playerIds; }",
        "label": "P"
    },
    "2857": {
        "dataset": "COMP 3021",
        "project": "ltgu",
        "bug_id": "19",
        "T": "void testHeightForNonRectangularMap() { final var gameMap = TestHelper.parseGameMap(nonRectangularMap); }",
        "C": "",
        "label": "P"
    },
    "2858": {
        "dataset": "COMP 3021",
        "project": "ltgu",
        "bug_id": "20",
        "T": "void testDuplicatedPlayers() { final var invalidMap = \"\"\" 233 ###### #A..@# #..A@# #....# #.a..# #..b.# ###### \"\"\"; }",
        "C": "",
        "label": "P"
    },
    "2859": {
        "dataset": "COMP 3021",
        "project": "ltgu",
        "bug_id": "21",
        "T": "void testParseMapWithoutUndoLimit() { final var invalidMap = String.join(\"\\n\", rectangularMap.lines().skip(1).toList()); }",
        "C": "",
        "label": "P"
    },
    "2860": {
        "dataset": "COMP 3021",
        "project": "ltgu",
        "bug_id": "22",
        "T": "void testInsufficientDestinations() { final var invalidMap = \"\"\" 233 ###### #A..@# #...@# #a...# #.a..# #..a.# ###### \"\"\"; }",
        "C": "",
        "label": "P"
    },
    "2861": {
        "dataset": "COMP 3021",
        "project": "ltgu",
        "bug_id": "23",
        "T": "void testSuperLargeMap() { try { new GameMap(Integer.MAX_VALUE, Integer.MAX_VALUE, Collections.emptySet(), 0); } catch (OutOfMemoryError e) { throw new RuntimeException(e); } }); }",
        "C": "public GameMap(int maxWidth, int maxHeight, Set<Position> destinations, int undoLimit) { // TODO this.width = maxWidth; this.height = maxHeight; this.destinations = destinations; this.undoLimit = undoLimit; } /** * Parses the map from a string representation. * The first line is undo limit. * Starting from the second line, the game map is represented as follows, * <li># represents a {@link Wall}</li> * <li>@ represents a box destination.</li> * <li>Any upper-case letter represents a {@link Player}.</li> * <li> * Any lower-case letter represents a {@link Box} that is only movable by the player with the corresponding upper-case letter. * For instance, box \"a\" can only be moved by player \"A\" and not movable by player \"B\". * </li> * <li>. represents an {@link Empty} position in the map, meaning there is no player or box currently at this position.</li> * <p> * Notes: * <li> * There can be at most 26 players. * All implementations of classes in the hk.ust.comp3021.game package should support up to 26 players. * </li> * <li> * For simplicity, we assume the given map is bounded with a closed boundary. * There is no need to check this point. * </li> * <li> * Example maps can be found in \"src/main/resources\". * </li> * * @param mapText The string representation. * @return The parsed GameMap object. * @throws IllegalArgumentException if undo limit is negative but not -1. * @throws IllegalArgumentException if there are multiple same upper-case letters, i.e., one player can only exist at one position. * @throws IllegalArgumentException if there are no players in the map. * @throws IllegalArgumentException if the number of boxes is not equal to the number of box destinations. * @throws IllegalArgumentException if there are boxes whose {@link Box#getPlayerId()} public TerminalRenderingEngine(PrintStream outputSteam) { this.outputSteam = outputSteam; }",
        "label": "P"
    },
    "2862": {
        "dataset": "COMP 3021",
        "project": "ltgu",
        "bug_id": "24",
        "T": "void testInvalidUndoLimit() { final var invalidMap = \"\"\" -233 ###### #A..@# #...@# #a.b@# #.a.@# #..a.# ###### \"\"\"; }",
        "C": "",
        "label": "P"
    },
    "2863": {
        "dataset": "COMP 3021",
        "project": "ltgu",
        "bug_id": "25",
        "T": "void testEmptyMap() { final var invalidMap = \"\"; }",
        "C": "",
        "label": "P"
    },
    "2864": {
        "dataset": "COMP 3021",
        "project": "ltgu",
        "bug_id": "26",
        "T": "void testMove(String input, String name, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); } private InputStream fixValueStream(String content) { final var bytes = content.getBytes(StandardCharsets.UTF_8); return new ByteArrayInputStream(bytes); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine(); // TODO switch (inputLine.toLowerCase()) { case \"a\": return new Move.Left(0); case \"s\": return new Move.Down(0); case \"w\": return new Move.Up(0); case \"d\": return new Move.Right(0); case \"h\": return new Move.Left(1); case \"j\": return new Move.Down(1); case \"k\": return new Move.Up(1); case \"l\": return new Move.Right(1); case \"u\": return new Undo(-1); case \"exit\": return new Exit(-1); default: return new InvalidInput(-1, StringResources.INVALID_INPUT_MESSAGE); } }",
        "label": "P"
    },
    "2865": {
        "dataset": "COMP 3021",
        "project": "ltgu",
        "bug_id": "27",
        "T": "void testMove(String input, String name, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); } private InputStream fixValueStream(String content) { final var bytes = content.getBytes(StandardCharsets.UTF_8); return new ByteArrayInputStream(bytes); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine(); // TODO switch (inputLine.toLowerCase()) { case \"a\": return new Move.Left(0); case \"s\": return new Move.Down(0); case \"w\": return new Move.Up(0); case \"d\": return new Move.Right(0); case \"h\": return new Move.Left(1); case \"j\": return new Move.Down(1); case \"k\": return new Move.Up(1); case \"l\": return new Move.Right(1); case \"u\": return new Undo(-1); case \"exit\": return new Exit(-1); default: return new InvalidInput(-1, StringResources.INVALID_INPUT_MESSAGE); } }",
        "label": "P"
    },
    "2866": {
        "dataset": "COMP 3021",
        "project": "ltgu",
        "bug_id": "28",
        "T": "void testMove(String input, String name, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); } private InputStream fixValueStream(String content) { final var bytes = content.getBytes(StandardCharsets.UTF_8); return new ByteArrayInputStream(bytes); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine(); // TODO switch (inputLine.toLowerCase()) { case \"a\": return new Move.Left(0); case \"s\": return new Move.Down(0); case \"w\": return new Move.Up(0); case \"d\": return new Move.Right(0); case \"h\": return new Move.Left(1); case \"j\": return new Move.Down(1); case \"k\": return new Move.Up(1); case \"l\": return new Move.Right(1); case \"u\": return new Undo(-1); case \"exit\": return new Exit(-1); default: return new InvalidInput(-1, StringResources.INVALID_INPUT_MESSAGE); } }",
        "label": "P"
    },
    "2867": {
        "dataset": "COMP 3021",
        "project": "ltgu",
        "bug_id": "29",
        "T": "void testMove(String input, String name, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); } private InputStream fixValueStream(String content) { final var bytes = content.getBytes(StandardCharsets.UTF_8); return new ByteArrayInputStream(bytes); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine(); // TODO switch (inputLine.toLowerCase()) { case \"a\": return new Move.Left(0); case \"s\": return new Move.Down(0); case \"w\": return new Move.Up(0); case \"d\": return new Move.Right(0); case \"h\": return new Move.Left(1); case \"j\": return new Move.Down(1); case \"k\": return new Move.Up(1); case \"l\": return new Move.Right(1); case \"u\": return new Undo(-1); case \"exit\": return new Exit(-1); default: return new InvalidInput(-1, StringResources.INVALID_INPUT_MESSAGE); } }",
        "label": "P"
    },
    "2868": {
        "dataset": "COMP 3021",
        "project": "ltgu",
        "bug_id": "30",
        "T": "void testMove(String input, String name, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); } private InputStream fixValueStream(String content) { final var bytes = content.getBytes(StandardCharsets.UTF_8); return new ByteArrayInputStream(bytes); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine(); // TODO switch (inputLine.toLowerCase()) { case \"a\": return new Move.Left(0); case \"s\": return new Move.Down(0); case \"w\": return new Move.Up(0); case \"d\": return new Move.Right(0); case \"h\": return new Move.Left(1); case \"j\": return new Move.Down(1); case \"k\": return new Move.Up(1); case \"l\": return new Move.Right(1); case \"u\": return new Undo(-1); case \"exit\": return new Exit(-1); default: return new InvalidInput(-1, StringResources.INVALID_INPUT_MESSAGE); } }",
        "label": "P"
    },
    "2869": {
        "dataset": "COMP 3021",
        "project": "ltgu",
        "bug_id": "31",
        "T": "void testMove(String input, String name, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); } private InputStream fixValueStream(String content) { final var bytes = content.getBytes(StandardCharsets.UTF_8); return new ByteArrayInputStream(bytes); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine(); // TODO switch (inputLine.toLowerCase()) { case \"a\": return new Move.Left(0); case \"s\": return new Move.Down(0); case \"w\": return new Move.Up(0); case \"d\": return new Move.Right(0); case \"h\": return new Move.Left(1); case \"j\": return new Move.Down(1); case \"k\": return new Move.Up(1); case \"l\": return new Move.Right(1); case \"u\": return new Undo(-1); case \"exit\": return new Exit(-1); default: return new InvalidInput(-1, StringResources.INVALID_INPUT_MESSAGE); } }",
        "label": "P"
    },
    "2870": {
        "dataset": "COMP 3021",
        "project": "ltgu",
        "bug_id": "32",
        "T": "void testMove(String input, String name, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); } private InputStream fixValueStream(String content) { final var bytes = content.getBytes(StandardCharsets.UTF_8); return new ByteArrayInputStream(bytes); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine(); // TODO switch (inputLine.toLowerCase()) { case \"a\": return new Move.Left(0); case \"s\": return new Move.Down(0); case \"w\": return new Move.Up(0); case \"d\": return new Move.Right(0); case \"h\": return new Move.Left(1); case \"j\": return new Move.Down(1); case \"k\": return new Move.Up(1); case \"l\": return new Move.Right(1); case \"u\": return new Undo(-1); case \"exit\": return new Exit(-1); default: return new InvalidInput(-1, StringResources.INVALID_INPUT_MESSAGE); } }",
        "label": "P"
    },
    "2871": {
        "dataset": "COMP 3021",
        "project": "ltgu",
        "bug_id": "33",
        "T": "void testMove(String input, String name, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); } private InputStream fixValueStream(String content) { final var bytes = content.getBytes(StandardCharsets.UTF_8); return new ByteArrayInputStream(bytes); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine(); // TODO switch (inputLine.toLowerCase()) { case \"a\": return new Move.Left(0); case \"s\": return new Move.Down(0); case \"w\": return new Move.Up(0); case \"d\": return new Move.Right(0); case \"h\": return new Move.Left(1); case \"j\": return new Move.Down(1); case \"k\": return new Move.Up(1); case \"l\": return new Move.Right(1); case \"u\": return new Undo(-1); case \"exit\": return new Exit(-1); default: return new InvalidInput(-1, StringResources.INVALID_INPUT_MESSAGE); } }",
        "label": "P"
    },
    "2872": {
        "dataset": "COMP 3021",
        "project": "ltgu",
        "bug_id": "34",
        "T": "void testUndo(String input, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine(); // TODO switch (inputLine.toLowerCase()) { case \"a\": return new Move.Left(0); case \"s\": return new Move.Down(0); case \"w\": return new Move.Up(0); case \"d\": return new Move.Right(0); case \"h\": return new Move.Left(1); case \"j\": return new Move.Down(1); case \"k\": return new Move.Up(1); case \"l\": return new Move.Right(1); case \"u\": return new Undo(-1); case \"exit\": return new Exit(-1); default: return new InvalidInput(-1, StringResources.INVALID_INPUT_MESSAGE); } }",
        "label": "P"
    },
    "2873": {
        "dataset": "COMP 3021",
        "project": "ltgu",
        "bug_id": "35",
        "T": "void testInvalidInput() { final var inputStream = fixValueStream(\"blah blah\"); final var inputEngine = new TerminalInputEngine(inputStream); final var action = inputEngine.fetchAction(); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine(); // TODO switch (inputLine.toLowerCase()) { case \"a\": return new Move.Left(0); case \"s\": return new Move.Down(0); case \"w\": return new Move.Up(0); case \"d\": return new Move.Right(0); case \"h\": return new Move.Left(1); case \"j\": return new Move.Down(1); case \"k\": return new Move.Up(1); case \"l\": return new Move.Right(1); case \"u\": return new Undo(-1); case \"exit\": return new Exit(-1); default: return new InvalidInput(-1, StringResources.INVALID_INPUT_MESSAGE); } }",
        "label": "P"
    },
    "2874": {
        "dataset": "COMP 3021",
        "project": "ltgu",
        "bug_id": "36",
        "T": "void testUndoWhenThereIsNoMove() { final var gameState = new GameState(TestHelper.parseGameMap(\"\"\" 233 ###### #A.a@# #..a@# ###### \"\"\" )); gameState.undo(); } private Entity generateEntity(int key) { return switch (key % 4) { case 0 -> new Box(0); case 1 -> new Empty(); case 2 -> new Player(0); case 3 -> new Wall(); default -> throw new ShouldNotReachException(); }; }",
        "C": "public GameState(@NotNull GameMap map) { // TODO this.map = map; undoQuota = map.undoLimit; entityPositions = new HashMap<>(map.positionEntityMap); } public void undo() { // TODO if (history.size() >= 1) { if (undoQuota != -1) { undoQuota -= 1; } history.remove(history.size()-1); //remove last checkpoint } if (history.size() == 0) { entityPositions = new HashMap<>(map.positionEntityMap); } else { entityPositions = new HashMap<>(history.get(history.size()-1).positionEntityMap); } } /** * Get the maximum width of the game map. * This should be the same as that in {@link GameMap} public TerminalRenderingEngine(PrintStream outputSteam) { this.outputSteam = outputSteam; } public Box(int playerId) { this.playerId = playerId; } public Player(int id) { this.id = id; } public ShouldNotReachException() { super(\"This branch should not be reached.\"); }",
        "label": "P"
    },
    "2875": {
        "dataset": "COMP 3021",
        "project": "ltgu",
        "bug_id": "37",
        "T": "void testGetUndoUnlimited() { final var gameState = new GameState(TestHelper.parseGameMap(\"\"\" -1 ###### #.Aa@# #..a@# ###### \"\"\" )); }",
        "C": "public GameState(@NotNull GameMap map) { // TODO this.map = map; undoQuota = map.undoLimit; entityPositions = new HashMap<>(map.positionEntityMap); }",
        "label": "P"
    },
    "2876": {
        "dataset": "COMP 3021",
        "project": "ltgu",
        "bug_id": "38",
        "T": "void testMapCopying() { final var maxWidth = 2333; final var maxHeight = 2333; final var random = new Random(); final var randomEntities = Stream.generate(() -> Position.of(random.nextInt(maxWidth), random.nextInt(maxHeight))) .distinct() .limit(100) .collect(Collectors.toMap(Function.identity(), it -> generateEntity(it.x()))); final var firstPos = randomEntities.keySet().stream().findFirst(); final var gameMap = new GameMap(maxWidth, maxHeight, Collections.singleton(firstPos.get()), 233); randomEntities.forEach(gameMap::putEntity); final var gameState = new GameState(gameMap); final var randomPosition = randomEntities.keySet().stream().findAny(); gameMap.putEntity(randomPosition.get(), new Empty()); randomEntities.forEach((p, e) -> assertEquals(e, gameState.getEntity(p))); }",
        "C": "public static @NotNull Position of(int x, int y) { return new Position(x, y); } public GameMap(int maxWidth, int maxHeight, Set<Position> destinations, int undoLimit) { // TODO this.width = maxWidth; this.height = maxHeight; this.destinations = destinations; this.undoLimit = undoLimit; } /** * Parses the map from a string representation. * The first line is undo limit. * Starting from the second line, the game map is represented as follows, * <li># represents a {@link Wall}</li> * <li>@ represents a box destination.</li> * <li>Any upper-case letter represents a {@link Player}.</li> * <li> * Any lower-case letter represents a {@link Box} that is only movable by the player with the corresponding upper-case letter. * For instance, box \"a\" can only be moved by player \"A\" and not movable by player \"B\". * </li> * <li>. represents an {@link Empty} position in the map, meaning there is no player or box currently at this position.</li> * <p> * Notes: * <li> * There can be at most 26 players. * All implementations of classes in the hk.ust.comp3021.game package should support up to 26 players. * </li> * <li> * For simplicity, we assume the given map is bounded with a closed boundary. * There is no need to check this point. * </li> * <li> * Example maps can be found in \"src/main/resources\". * </li> * * @param mapText The string representation. * @return The parsed GameMap object. * @throws IllegalArgumentException if undo limit is negative but not -1. * @throws IllegalArgumentException if there are multiple same upper-case letters, i.e., one player can only exist at one position. * @throws IllegalArgumentException if there are no players in the map. * @throws IllegalArgumentException if the number of boxes is not equal to the number of box destinations. * @throws IllegalArgumentException if there are boxes whose {@link Box#getPlayerId()} public GameState(@NotNull GameMap map) { // TODO this.map = map; undoQuota = map.undoLimit; entityPositions = new HashMap<>(map.positionEntityMap); } public void putEntity(Position position, Entity entity) { // TODO // assume checking of whether can put entity is done beforehand positionEntityMap.put(position, entity); } public @Nullable Entity getEntity(@NotNull Position position) { // TODO return entityPositions.get(position); } /** * Get all box destination positions as a set in the game map. * This should be the same as that in {@link GameMap}",
        "label": "P"
    },
    "2877": {
        "dataset": "COMP 3021",
        "project": "ltgu",
        "bug_id": "39",
        "T": "void testUndoWhenThereIsMoveButNoCheckpoint() { final var gameState = new GameState(TestHelper.parseGameMap(\"\"\" 233 ###### #A.a@# #..a@# ###### \"\"\" )); gameState.move(Position.of(1, 1), Position.of(2, 1)); gameState.undo(); }",
        "C": "public GameState(@NotNull GameMap map) { // TODO this.map = map; undoQuota = map.undoLimit; entityPositions = new HashMap<>(map.positionEntityMap); } public void move(Position from, Position to) { // TODO Entity fromEntity = getEntity(from); Entity toEntity = getEntity(to); entityPositions.replace(from, toEntity); entityPositions.replace(to, fromEntity); } /** * Record a checkpoint of the game state, including: * <li>All current positions of entities in the game map.</li> * <li>Current undo quota</li> * <p> * Checkpoint is used in {@link GameState#undo()} public static @NotNull Position of(int x, int y) { return new Position(x, y); } public void undo() { // TODO if (history.size() >= 1) { if (undoQuota != -1) { undoQuota -= 1; } history.remove(history.size()-1); //remove last checkpoint } if (history.size() == 0) { entityPositions = new HashMap<>(map.positionEntityMap); } else { entityPositions = new HashMap<>(history.get(history.size()-1).positionEntityMap); } } /** * Get the maximum width of the game map. * This should be the same as that in {@link GameMap}",
        "label": "P"
    },
    "2878": {
        "dataset": "COMP 3021",
        "project": "ltgu",
        "bug_id": "40",
        "T": "void testGameExit() { final var gameState = mock(GameState.class); final var inputEngine = mock(TerminalInputEngine.class); final var renderingEngine = mock(TerminalRenderingEngine.class); when(gameState.isWin()).thenReturn(false, false, false); when(inputEngine.fetchAction()) .thenReturn(new InvalidInput(0, \"\"), new InvalidInput(0, \"\"), new Exit(0)); final var game = new TerminalSokobanGame(gameState, inputEngine, renderingEngine); game.run(); verify(renderingEngine, atLeastOnce()).message(any()); }",
        "C": "public InvalidInput(int initiator, @NotNull String message) { super(initiator); this.message = message; } public Exit(int initiator) { super(initiator); } public TerminalSokobanGame(GameState gameState, TerminalInputEngine inputEngine, TerminalRenderingEngine renderingEngine) { super(gameState); this.inputEngine = inputEngine; this.renderingEngine = renderingEngine; // TODO // Check the number of players if (gameState.getAllPlayerPositions().size() > 2) { throw new IllegalArgumentException(); } } public void run() { // TODO renderingEngine.message(StringResources.GAME_READY_MESSAGE); // Sokoban game is ready while (!shouldStop()) { renderingEngine.render(state); // print game map renderingEngine.message(\"\"); // skip a line String undoLimit; if (state.getUndoQuota().isPresent()) { // creating undo quota String undoLimit = String.format(StringResources.UNDO_QUOTA_TEMPLATE, state.getUndoQuota().get()); } else { undoLimit = String.format(StringResources.UNDO_QUOTA_TEMPLATE, StringResources.UNDO_QUOTA_UNLIMITED); } renderingEngine.message(String.format(undoLimit)); // print undo quota renderingEngine.message(\">>>\"); ActionResult result = processAction(inputEngine.fetchAction()); // fetch user input if (result.getClass() == ActionResult.Failed.class) { renderingEngine.message(((ActionResult.Failed) result).getReason()); } } renderingEngine.render(state); renderingEngine.message(\"\"); renderingEngine.message(StringResources.GAME_EXIT_MESSAGE); if (state.isWin()) { renderingEngine.message(StringResources.WIN_MESSAGE); } return; }",
        "label": "P"
    },
    "2879": {
        "dataset": "COMP 3021",
        "project": "ltgu",
        "bug_id": "41",
        "T": "void testGameWin() { final var gameState = mock(GameState.class); final var inputEngine = mock(TerminalInputEngine.class); final var renderingEngine = mock(TerminalRenderingEngine.class); when(gameState.isWin()).thenReturn(false, false, false, true); when(inputEngine.fetchAction()) .thenReturn(new InvalidInput(0, \"\")); final var game = new TerminalSokobanGame(gameState, inputEngine, renderingEngine); game.run(); verify(gameState, atLeastOnce()).isWin(); verify(renderingEngine, atLeastOnce()).message(any()); }",
        "C": "public InvalidInput(int initiator, @NotNull String message) { super(initiator); this.message = message; } public TerminalSokobanGame(GameState gameState, TerminalInputEngine inputEngine, TerminalRenderingEngine renderingEngine) { super(gameState); this.inputEngine = inputEngine; this.renderingEngine = renderingEngine; // TODO // Check the number of players if (gameState.getAllPlayerPositions().size() > 2) { throw new IllegalArgumentException(); } } public void run() { // TODO renderingEngine.message(StringResources.GAME_READY_MESSAGE); // Sokoban game is ready while (!shouldStop()) { renderingEngine.render(state); // print game map renderingEngine.message(\"\"); // skip a line String undoLimit; if (state.getUndoQuota().isPresent()) { // creating undo quota String undoLimit = String.format(StringResources.UNDO_QUOTA_TEMPLATE, state.getUndoQuota().get()); } else { undoLimit = String.format(StringResources.UNDO_QUOTA_TEMPLATE, StringResources.UNDO_QUOTA_UNLIMITED); } renderingEngine.message(String.format(undoLimit)); // print undo quota renderingEngine.message(\">>>\"); ActionResult result = processAction(inputEngine.fetchAction()); // fetch user input if (result.getClass() == ActionResult.Failed.class) { renderingEngine.message(((ActionResult.Failed) result).getReason()); } } renderingEngine.render(state); renderingEngine.message(\"\"); renderingEngine.message(StringResources.GAME_EXIT_MESSAGE); if (state.isWin()) { renderingEngine.message(StringResources.WIN_MESSAGE); } return; }",
        "label": "P"
    },
    "2880": {
        "dataset": "COMP 3021",
        "project": "ltgu",
        "bug_id": "42",
        "T": "void testMoreThanTwoPlayers() { final var gameState = mock(GameState.class); final var inputEngine = mock(TerminalInputEngine.class); final var renderingEngine = mock(TerminalRenderingEngine.class); when(gameState.getAllPlayerPositions()).thenReturn(new HashSet<>(Arrays.asList(Position.of(1, 1), Position.of(1, 2), Position.of(1, 3)))); }",
        "C": "public static @NotNull Position of(int x, int y) { return new Position(x, y); }",
        "label": "P"
    },
    "2881": {
        "dataset": "COMP 3021",
        "project": "fslok",
        "bug_id": "0",
        "T": "void moveUp() { Position.of(233, 232), new Move.Up(-1).nextPosition(pos) ); }",
        "C": "public static @NotNull Position of(int x, int y) { return new Position(x, y); } public Up(int initiator) { super(initiator); }",
        "label": "P"
    },
    "2882": {
        "dataset": "COMP 3021",
        "project": "fslok",
        "bug_id": "1",
        "T": "void moveDown() { Position.of(233, 234), new Move.Down(-1).nextPosition(pos) ); }",
        "C": "public static @NotNull Position of(int x, int y) { return new Position(x, y); } public Down(int initiator) { super(initiator); }",
        "label": "P"
    },
    "2883": {
        "dataset": "COMP 3021",
        "project": "fslok",
        "bug_id": "2",
        "T": "void moveRight() { Position.of(234, 233), new Move.Right(-1).nextPosition(pos) ); }",
        "C": "public static @NotNull Position of(int x, int y) { return new Position(x, y); } public Right(int initiator) { super(initiator); }",
        "label": "P"
    },
    "2884": {
        "dataset": "COMP 3021",
        "project": "fslok",
        "bug_id": "3",
        "T": "void testExceedingUndoQuota() { final var gameState = mock(GameState.class); when(gameState.getPlayerPositionById(anyInt())).thenReturn(Position.of(0, 0)); when(gameState.getUndoQuota()).thenReturn(Optional.of(0)); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Undo(0)); }",
        "C": "public Undo(int initiator) { super(initiator); }",
        "label": "P"
    },
    "2885": {
        "dataset": "COMP 3021",
        "project": "fslok",
        "bug_id": "4",
        "T": "void testExit() { final var gameState = mock(GameState.class); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Exit(0)); }",
        "C": "public Exit(int initiator) { super(initiator); }",
        "label": "F"
    },
    "2886": {
        "dataset": "COMP 3021",
        "project": "fslok",
        "bug_id": "5",
        "T": "void testUndoUnlimited() { final var gameState = mock(GameState.class); when(gameState.getPlayerPositionById(anyInt())).thenReturn(Position.of(0, 0)); when(gameState.getUndoQuota()).thenReturn(Optional.empty()); final var game = new SokobanGameForTesting(gameState); for (int i = 0; i < 10000; i++) { final var result = game.feedActionForProcessing(new Undo(0)); } verify(gameState, times(10000)).undo(); }",
        "C": "public Undo(int initiator) { super(initiator); }",
        "label": "P"
    },
    "2887": {
        "dataset": "COMP 3021",
        "project": "fslok",
        "bug_id": "6",
        "T": "void testPushOtherPlayerBox() { String mapText = \"\"\" 233 ###### #AB.@# #b.a.# #@...# ###### \"\"\"; final var testMap = TestHelper.parseGameMap(mapText); final var gameState = spy(new GameState(testMap)); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Move.Down(0)); verify(gameState, never()).move(any(), any()); }",
        "C": "public GameState(@NotNull GameMap map) { // TODO this.originalMap = map; this.maxWidth = map.getMaxWidth(); this.maxHeight = map.getMaxHeight(); this.destinations = map.getDestinations(); this.undoQuota = map.getUndoLimit(); this.playersLoc = new HashMap<Integer, Position>(); HashMap<Integer, Position> players = new HashMap<Integer, Position>(); this.boxesLoc = new HashMap<Integer, ArrayList<Position>>(); HashMap<Integer, ArrayList<Position>> boxes = new HashMap<Integer, ArrayList<Position>>(); ArrayList<ArrayList<Entity>> newMap = new ArrayList<ArrayList<Entity>>(); for (int i = 0; i < map.getMap().size(); i++) { ArrayList<Entity> row = new ArrayList<Entity>(); for (int j = 0; j < map.getMap().get(i).size(); j++) { Object item = map.getMap().get(i).get(j); if (item instanceof Player){ row.add((Player) item); players.put(((Player) item).getId(), new Position(j, i)); this.playersLoc.put(((Player) item).getId(), new Position(j, i)); } else if (item instanceof Box){ Box box = (Box) item; row.add((Box) item); if (boxes.containsKey(box.getPlayerId())) { boxes.get(box.getPlayerId()).add(new Position(j, i)); } else { ArrayList<Position> boxesLoc = new ArrayList<Position>(); boxesLoc.add(new Position(j, i)); boxes.put(box.getPlayerId(), boxesLoc); } if (this.boxesLoc.containsKey(box.getPlayerId())) { this.boxesLoc.get(box.getPlayerId()).add(new Position(j, i)); } else { ArrayList<Position> boxesLoc = new ArrayList<Position>(); boxesLoc.add(new Position(j, i)); this.boxesLoc.put(box.getPlayerId(), boxesLoc); } } else if (item instanceof Wall){ row.add((Wall) item); } else { row.add((Empty) item); } } newMap.add(row); } this.map = newMap; this.checkpointMap = new ArrayList<ArrayList<ArrayList<Entity>>>(); this.checkpointMap.add(map.getMap()); this.checkpointPlayers = new ArrayList<HashMap<Integer, Position>>(); this.checkpointPlayers.add(players); this.checkpointBoxes = new ArrayList<HashMap<Integer, ArrayList<Position>>>(); this.checkpointBoxes.add(boxes); } public Down(int initiator) { super(initiator); }",
        "label": "P"
    },
    "2888": {
        "dataset": "COMP 3021",
        "project": "fslok",
        "bug_id": "7",
        "T": "void testMoveNonExistingPlayer() { String mapText = \"\"\" 233 ###### #A..@# #a...# ##...# ###### \"\"\"; final var testMap = TestHelper.parseGameMap(mapText); final var gameState = spy(new GameState(testMap)); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Move.Down(23)); }",
        "C": "public GameState(@NotNull GameMap map) { // TODO this.originalMap = map; this.maxWidth = map.getMaxWidth(); this.maxHeight = map.getMaxHeight(); this.destinations = map.getDestinations(); this.undoQuota = map.getUndoLimit(); this.playersLoc = new HashMap<Integer, Position>(); HashMap<Integer, Position> players = new HashMap<Integer, Position>(); this.boxesLoc = new HashMap<Integer, ArrayList<Position>>(); HashMap<Integer, ArrayList<Position>> boxes = new HashMap<Integer, ArrayList<Position>>(); ArrayList<ArrayList<Entity>> newMap = new ArrayList<ArrayList<Entity>>(); for (int i = 0; i < map.getMap().size(); i++) { ArrayList<Entity> row = new ArrayList<Entity>(); for (int j = 0; j < map.getMap().get(i).size(); j++) { Object item = map.getMap().get(i).get(j); if (item instanceof Player){ row.add((Player) item); players.put(((Player) item).getId(), new Position(j, i)); this.playersLoc.put(((Player) item).getId(), new Position(j, i)); } else if (item instanceof Box){ Box box = (Box) item; row.add((Box) item); if (boxes.containsKey(box.getPlayerId())) { boxes.get(box.getPlayerId()).add(new Position(j, i)); } else { ArrayList<Position> boxesLoc = new ArrayList<Position>(); boxesLoc.add(new Position(j, i)); boxes.put(box.getPlayerId(), boxesLoc); } if (this.boxesLoc.containsKey(box.getPlayerId())) { this.boxesLoc.get(box.getPlayerId()).add(new Position(j, i)); } else { ArrayList<Position> boxesLoc = new ArrayList<Position>(); boxesLoc.add(new Position(j, i)); this.boxesLoc.put(box.getPlayerId(), boxesLoc); } } else if (item instanceof Wall){ row.add((Wall) item); } else { row.add((Empty) item); } } newMap.add(row); } this.map = newMap; this.checkpointMap = new ArrayList<ArrayList<ArrayList<Entity>>>(); this.checkpointMap.add(map.getMap()); this.checkpointPlayers = new ArrayList<HashMap<Integer, Position>>(); this.checkpointPlayers.add(players); this.checkpointBoxes = new ArrayList<HashMap<Integer, ArrayList<Position>>>(); this.checkpointBoxes.add(boxes); } public Down(int initiator) { super(initiator); }",
        "label": "P"
    },
    "2889": {
        "dataset": "COMP 3021",
        "project": "fslok",
        "bug_id": "8",
        "T": "void testCheckpointWhenNeed() { final var gameState = spy(new GameState(TestHelper.parseGameMap(\"\"\" 233 ###### #.Aa@# #..a@# ###### \"\"\" ))); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Move.Right(0)); verify(gameState, times(1)).checkpoint(); }",
        "C": "public GameState(@NotNull GameMap map) { // TODO this.originalMap = map; this.maxWidth = map.getMaxWidth(); this.maxHeight = map.getMaxHeight(); this.destinations = map.getDestinations(); this.undoQuota = map.getUndoLimit(); this.playersLoc = new HashMap<Integer, Position>(); HashMap<Integer, Position> players = new HashMap<Integer, Position>(); this.boxesLoc = new HashMap<Integer, ArrayList<Position>>(); HashMap<Integer, ArrayList<Position>> boxes = new HashMap<Integer, ArrayList<Position>>(); ArrayList<ArrayList<Entity>> newMap = new ArrayList<ArrayList<Entity>>(); for (int i = 0; i < map.getMap().size(); i++) { ArrayList<Entity> row = new ArrayList<Entity>(); for (int j = 0; j < map.getMap().get(i).size(); j++) { Object item = map.getMap().get(i).get(j); if (item instanceof Player){ row.add((Player) item); players.put(((Player) item).getId(), new Position(j, i)); this.playersLoc.put(((Player) item).getId(), new Position(j, i)); } else if (item instanceof Box){ Box box = (Box) item; row.add((Box) item); if (boxes.containsKey(box.getPlayerId())) { boxes.get(box.getPlayerId()).add(new Position(j, i)); } else { ArrayList<Position> boxesLoc = new ArrayList<Position>(); boxesLoc.add(new Position(j, i)); boxes.put(box.getPlayerId(), boxesLoc); } if (this.boxesLoc.containsKey(box.getPlayerId())) { this.boxesLoc.get(box.getPlayerId()).add(new Position(j, i)); } else { ArrayList<Position> boxesLoc = new ArrayList<Position>(); boxesLoc.add(new Position(j, i)); this.boxesLoc.put(box.getPlayerId(), boxesLoc); } } else if (item instanceof Wall){ row.add((Wall) item); } else { row.add((Empty) item); } } newMap.add(row); } this.map = newMap; this.checkpointMap = new ArrayList<ArrayList<ArrayList<Entity>>>(); this.checkpointMap.add(map.getMap()); this.checkpointPlayers = new ArrayList<HashMap<Integer, Position>>(); this.checkpointPlayers.add(players); this.checkpointBoxes = new ArrayList<HashMap<Integer, ArrayList<Position>>>(); this.checkpointBoxes.add(boxes); } public Right(int initiator) { super(initiator); }",
        "label": "P"
    },
    "2890": {
        "dataset": "COMP 3021",
        "project": "fslok",
        "bug_id": "9",
        "T": "void testPushBoxAgainstWall() { String mapText = \"\"\" 233 ###### #A..@# #a...# ##...# ###### \"\"\"; final var testMap = TestHelper.parseGameMap(mapText); final var gameState = spy(new GameState(testMap)); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Move.Down(0)); verify(gameState, never()).move(any(), any()); }",
        "C": "public GameState(@NotNull GameMap map) { // TODO this.originalMap = map; this.maxWidth = map.getMaxWidth(); this.maxHeight = map.getMaxHeight(); this.destinations = map.getDestinations(); this.undoQuota = map.getUndoLimit(); this.playersLoc = new HashMap<Integer, Position>(); HashMap<Integer, Position> players = new HashMap<Integer, Position>(); this.boxesLoc = new HashMap<Integer, ArrayList<Position>>(); HashMap<Integer, ArrayList<Position>> boxes = new HashMap<Integer, ArrayList<Position>>(); ArrayList<ArrayList<Entity>> newMap = new ArrayList<ArrayList<Entity>>(); for (int i = 0; i < map.getMap().size(); i++) { ArrayList<Entity> row = new ArrayList<Entity>(); for (int j = 0; j < map.getMap().get(i).size(); j++) { Object item = map.getMap().get(i).get(j); if (item instanceof Player){ row.add((Player) item); players.put(((Player) item).getId(), new Position(j, i)); this.playersLoc.put(((Player) item).getId(), new Position(j, i)); } else if (item instanceof Box){ Box box = (Box) item; row.add((Box) item); if (boxes.containsKey(box.getPlayerId())) { boxes.get(box.getPlayerId()).add(new Position(j, i)); } else { ArrayList<Position> boxesLoc = new ArrayList<Position>(); boxesLoc.add(new Position(j, i)); boxes.put(box.getPlayerId(), boxesLoc); } if (this.boxesLoc.containsKey(box.getPlayerId())) { this.boxesLoc.get(box.getPlayerId()).add(new Position(j, i)); } else { ArrayList<Position> boxesLoc = new ArrayList<Position>(); boxesLoc.add(new Position(j, i)); this.boxesLoc.put(box.getPlayerId(), boxesLoc); } } else if (item instanceof Wall){ row.add((Wall) item); } else { row.add((Empty) item); } } newMap.add(row); } this.map = newMap; this.checkpointMap = new ArrayList<ArrayList<ArrayList<Entity>>>(); this.checkpointMap.add(map.getMap()); this.checkpointPlayers = new ArrayList<HashMap<Integer, Position>>(); this.checkpointPlayers.add(players); this.checkpointBoxes = new ArrayList<HashMap<Integer, ArrayList<Position>>>(); this.checkpointBoxes.add(boxes); } public Down(int initiator) { super(initiator); }",
        "label": "P"
    },
    "2891": {
        "dataset": "COMP 3021",
        "project": "fslok",
        "bug_id": "10",
        "T": "void testCheckpointWhenNotNeed() { final var gameState = spy(new GameState(TestHelper.parseGameMap(\"\"\" 233 ###### #A.a@# #..a@# ###### \"\"\" ))); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Move.Right(0)); verify(gameState, never()).checkpoint(); } private static class SokobanGameForTesting extends AbstractSokobanGame { protected SokobanGameForTesting(GameState gameState) { super(gameState); } @Override public void run() { } public ActionResult feedActionForProcessing(Action action) { return processAction(action); } }",
        "C": "public GameState(@NotNull GameMap map) { // TODO this.originalMap = map; this.maxWidth = map.getMaxWidth(); this.maxHeight = map.getMaxHeight(); this.destinations = map.getDestinations(); this.undoQuota = map.getUndoLimit(); this.playersLoc = new HashMap<Integer, Position>(); HashMap<Integer, Position> players = new HashMap<Integer, Position>(); this.boxesLoc = new HashMap<Integer, ArrayList<Position>>(); HashMap<Integer, ArrayList<Position>> boxes = new HashMap<Integer, ArrayList<Position>>(); ArrayList<ArrayList<Entity>> newMap = new ArrayList<ArrayList<Entity>>(); for (int i = 0; i < map.getMap().size(); i++) { ArrayList<Entity> row = new ArrayList<Entity>(); for (int j = 0; j < map.getMap().get(i).size(); j++) { Object item = map.getMap().get(i).get(j); if (item instanceof Player){ row.add((Player) item); players.put(((Player) item).getId(), new Position(j, i)); this.playersLoc.put(((Player) item).getId(), new Position(j, i)); } else if (item instanceof Box){ Box box = (Box) item; row.add((Box) item); if (boxes.containsKey(box.getPlayerId())) { boxes.get(box.getPlayerId()).add(new Position(j, i)); } else { ArrayList<Position> boxesLoc = new ArrayList<Position>(); boxesLoc.add(new Position(j, i)); boxes.put(box.getPlayerId(), boxesLoc); } if (this.boxesLoc.containsKey(box.getPlayerId())) { this.boxesLoc.get(box.getPlayerId()).add(new Position(j, i)); } else { ArrayList<Position> boxesLoc = new ArrayList<Position>(); boxesLoc.add(new Position(j, i)); this.boxesLoc.put(box.getPlayerId(), boxesLoc); } } else if (item instanceof Wall){ row.add((Wall) item); } else { row.add((Empty) item); } } newMap.add(row); } this.map = newMap; this.checkpointMap = new ArrayList<ArrayList<ArrayList<Entity>>>(); this.checkpointMap.add(map.getMap()); this.checkpointPlayers = new ArrayList<HashMap<Integer, Position>>(); this.checkpointPlayers.add(players); this.checkpointBoxes = new ArrayList<HashMap<Integer, ArrayList<Position>>>(); this.checkpointBoxes.add(boxes); } public Right(int initiator) { super(initiator); } public void run() { // TODO Optional<Integer> quota = this.state.getUndoQuota(); this.renderingEngine.message(StringResources.GAME_READY_MESSAGE); while (!this.shouldStop()) { quota = this.state.getUndoQuota(); this.renderingEngine.render(this.state); if (quota.isEmpty()){ this.renderingEngine.message(StringResources.UNDO_QUOTA_UNLIMITED); } else { this.renderingEngine.message(String.format(StringResources.UNDO_QUOTA_TEMPLATE, Integer.toString(quota.get()))); } this.renderingEngine.message(\">>>\"); Action inputAction = this.inputEngine.fetchAction(); ActionResult result = this.processAction(inputAction); if (result instanceof ActionResult.Failed){ if (result.getAction() instanceof Exit) { this.renderingEngine.render(this.state); break; } this.renderingEngine.message(((ActionResult.Failed) result).getReason()); } } this.renderingEngine.render(this.state); this.renderingEngine.message(StringResources.GAME_EXIT_MESSAGE); if (this.state.isWin()){ this.renderingEngine.message(StringResources.WIN_MESSAGE); } } protected ActionResult processAction(@NotNull Action action) { // TODO ActionResult result = new ActionResult.Success(action); switch(action){ case Exit o -> result = new ActionResult.Failed(o, StringResources.EXIT_COMMAND_TEXT); case InvalidInput o -> result = new ActionResult.Failed(o, o.getMessage()); case Undo o -> { if (this.state.getUndoQuota().isEmpty()){ result = new ActionResult.Success(o); this.state.undo(); } else { if (this.state.getUndoQuota().get() == 0){ result = new ActionResult.Failed(o, StringResources.UNDO_QUOTA_RUN_OUT); } else{ result = new ActionResult.Success(o); this.state.undo(); } } } default -> { int player = action.getInitiator(); if (!this.state.getOriginalMap().getPlayerIds().contains(player)){ result = new ActionResult.Failed(action, StringResources.PLAYER_NOT_FOUND); break; } Position currentPos = this.state.getPlayerPositionById(player); Position newPos = new Position(0,0); Position newBoxPos = new Position(0,0); Entity target = new Empty(); switch(action){ case Move.Down d ->{ newPos = new Position(currentPos.x(), currentPos.y() + 1); newBoxPos = new Position(currentPos.x(), currentPos.y() + 2); } case Move.Up u -> { newPos = new Position(currentPos.x(), currentPos.y() - 1); newBoxPos = new Position(currentPos.x(), currentPos.y() - 2); } case Move.Left l -> { newPos = new Position(currentPos.x() - 1, currentPos.y()); newBoxPos = new Position(currentPos.x() - 2, currentPos.y()); } case Move.Right r -> { newPos = new Position(currentPos.x() + 1, currentPos.y()); newBoxPos = new Position(currentPos.x() + 2, currentPos.y()); } default -> {} } target = this.state.getEntity(newPos); if (target instanceof Wall){ result = new ActionResult.Failed(action, \"You hit a wall.\"); } else if (target instanceof Player){ result = new ActionResult.Failed(action, \"You hit another player.\"); } else if (target instanceof Empty){ result = new ActionResult.Success(action); this.state.move(currentPos, newPos); } else if (target instanceof Box){ if (player != ((Box) target).getPlayerId()){ result = new ActionResult.Failed(action, \"You cannot move other players' boxes.\"); } else{ if (this.state.getEntity(newBoxPos) instanceof Empty){ result = new ActionResult.Success(action); this.state.move(newPos, newBoxPos); this.state.move(currentPos, newPos); this.state.checkpoint(); } else{ result = new ActionResult.Failed(action, \"Failed to push the box.\"); } } } } } return result; }",
        "label": "P"
    },
    "2892": {
        "dataset": "COMP 3021",
        "project": "fslok",
        "bug_id": "11",
        "T": "void testHitAnotherPlayer() { String mapText = \"\"\" 233 ###### #A..@# #B...# #ab.@# ###### \"\"\"; final var testMap = TestHelper.parseGameMap(mapText); final var gameState = spy(new GameState(testMap)); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Move.Down(0)); verify(gameState, never()).move(any(), any()); }",
        "C": "public GameState(@NotNull GameMap map) { // TODO this.originalMap = map; this.maxWidth = map.getMaxWidth(); this.maxHeight = map.getMaxHeight(); this.destinations = map.getDestinations(); this.undoQuota = map.getUndoLimit(); this.playersLoc = new HashMap<Integer, Position>(); HashMap<Integer, Position> players = new HashMap<Integer, Position>(); this.boxesLoc = new HashMap<Integer, ArrayList<Position>>(); HashMap<Integer, ArrayList<Position>> boxes = new HashMap<Integer, ArrayList<Position>>(); ArrayList<ArrayList<Entity>> newMap = new ArrayList<ArrayList<Entity>>(); for (int i = 0; i < map.getMap().size(); i++) { ArrayList<Entity> row = new ArrayList<Entity>(); for (int j = 0; j < map.getMap().get(i).size(); j++) { Object item = map.getMap().get(i).get(j); if (item instanceof Player){ row.add((Player) item); players.put(((Player) item).getId(), new Position(j, i)); this.playersLoc.put(((Player) item).getId(), new Position(j, i)); } else if (item instanceof Box){ Box box = (Box) item; row.add((Box) item); if (boxes.containsKey(box.getPlayerId())) { boxes.get(box.getPlayerId()).add(new Position(j, i)); } else { ArrayList<Position> boxesLoc = new ArrayList<Position>(); boxesLoc.add(new Position(j, i)); boxes.put(box.getPlayerId(), boxesLoc); } if (this.boxesLoc.containsKey(box.getPlayerId())) { this.boxesLoc.get(box.getPlayerId()).add(new Position(j, i)); } else { ArrayList<Position> boxesLoc = new ArrayList<Position>(); boxesLoc.add(new Position(j, i)); this.boxesLoc.put(box.getPlayerId(), boxesLoc); } } else if (item instanceof Wall){ row.add((Wall) item); } else { row.add((Empty) item); } } newMap.add(row); } this.map = newMap; this.checkpointMap = new ArrayList<ArrayList<ArrayList<Entity>>>(); this.checkpointMap.add(map.getMap()); this.checkpointPlayers = new ArrayList<HashMap<Integer, Position>>(); this.checkpointPlayers.add(players); this.checkpointBoxes = new ArrayList<HashMap<Integer, ArrayList<Position>>>(); this.checkpointBoxes.add(boxes); } public Down(int initiator) { super(initiator); }",
        "label": "P"
    },
    "2893": {
        "dataset": "COMP 3021",
        "project": "fslok",
        "bug_id": "12",
        "T": "void testUndoWithinQuota() { final var gameState = mock(GameState.class); when(gameState.getPlayerPositionById(anyInt())).thenReturn(Position.of(0, 0)); when(gameState.getUndoQuota()).thenReturn(Optional.of(1)); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Undo(0)); verify(gameState, times(1)).undo(); }",
        "C": "public Undo(int initiator) { super(initiator); }",
        "label": "P"
    },
    "2894": {
        "dataset": "COMP 3021",
        "project": "fslok",
        "bug_id": "13",
        "T": "void testInvalidInput() { final var game = new SokobanGameForTesting(mock(GameState.class)); final var message = String.valueOf(new Random().nextLong()); final var action = new InvalidInput(-1, message); final var result = game.feedActionForProcessing(action); }",
        "C": "public InvalidInput(int initiator, @NotNull String message) { super(initiator); this.message = message; }",
        "label": "P"
    },
    "2895": {
        "dataset": "COMP 3021",
        "project": "fslok",
        "bug_id": "14",
        "T": "void testUndoLimitParsing() { final var gameMap = TestHelper.parseGameMap(rectangularMap); }",
        "C": "",
        "label": "P"
    },
    "2896": {
        "dataset": "COMP 3021",
        "project": "fslok",
        "bug_id": "15",
        "T": "void testWidthForNonRectangularMap() { final var gameMap = TestHelper.parseGameMap(nonRectangularMap); }",
        "C": "",
        "label": "P"
    },
    "2897": {
        "dataset": "COMP 3021",
        "project": "fslok",
        "bug_id": "16",
        "T": "void testTwoPlayersMap() { final var twoPlayersMap = \"\"\" 233 ###### #A..@# #..B@# #....# #.a..# #..b.# ###### \"\"\"; final var gameMap = TestHelper.parseGameMap(twoPlayersMap); final var playerIds = gameMap.getPlayerIds(); final var expectedIds = new HashSet<Integer>(); expectedIds.add(0); expectedIds.add(1); }",
        "C": "public Set<Integer> getPlayerIds() { // TODO return players; }",
        "label": "P"
    },
    "2898": {
        "dataset": "COMP 3021",
        "project": "fslok",
        "bug_id": "17",
        "T": "void testMapWithoutPlayer() { final var invalidMap = \"\"\" 233 ### #.# ### \"\"\"; } // @Tag(TestKind.HIDDEN) // @Test // void testUnmatchedPlayersAndBoxes() { // final var invalidMap = \"\"\" // 233 // ###### // #A..@# // #...@# // #a.b@# // #.a.@# // #..a.# // ###### // \"\"\"; // assertThrowsExactly(IllegalArgumentException.class, () -> TestHelper.parseGameMap(invalidMap)); // }",
        "C": "",
        "label": "F"
    },
    "2899": {
        "dataset": "COMP 3021",
        "project": "fslok",
        "bug_id": "18",
        "T": "void testManyPlayersMap() { final var manyPlayersMap = \"\"\" 233 ###### #A.P@@# #vCB@@# #.cpD@# #Ga.d@# #g.bV@# ###### \"\"\"; final var gameMap = TestHelper.parseGameMap(manyPlayersMap); final var playerIds = gameMap.getPlayerIds(); final var expectedIds = new HashSet<>(Arrays.asList( 0, 'P' - 'A', 'C' - 'A', 'B' - 'A', 'D' - 'A', 'G' - 'A', 'V' - 'A' )); }",
        "C": "public Set<Integer> getPlayerIds() { // TODO return players; }",
        "label": "P"
    },
    "2900": {
        "dataset": "COMP 3021",
        "project": "fslok",
        "bug_id": "19",
        "T": "void testHeightForNonRectangularMap() { final var gameMap = TestHelper.parseGameMap(nonRectangularMap); }",
        "C": "",
        "label": "P"
    },
    "2901": {
        "dataset": "COMP 3021",
        "project": "fslok",
        "bug_id": "20",
        "T": "void testDuplicatedPlayers() { final var invalidMap = \"\"\" 233 ###### #A..@# #..A@# #....# #.a..# #..b.# ###### \"\"\"; }",
        "C": "",
        "label": "P"
    },
    "2902": {
        "dataset": "COMP 3021",
        "project": "fslok",
        "bug_id": "21",
        "T": "void testParseMapWithoutUndoLimit() { final var invalidMap = String.join(\"\\n\", rectangularMap.lines().skip(1).toList()); }",
        "C": "",
        "label": "P"
    },
    "2903": {
        "dataset": "COMP 3021",
        "project": "fslok",
        "bug_id": "22",
        "T": "void testInsufficientDestinations() { final var invalidMap = \"\"\" 233 ###### #A..@# #...@# #a...# #.a..# #..a.# ###### \"\"\"; }",
        "C": "",
        "label": "P"
    },
    "2904": {
        "dataset": "COMP 3021",
        "project": "fslok",
        "bug_id": "23",
        "T": "void testSuperLargeMap() { try { new GameMap(Integer.MAX_VALUE, Integer.MAX_VALUE, Collections.emptySet(), 0); } catch (OutOfMemoryError e) { throw new RuntimeException(e); } }); }",
        "C": "public GameMap(int maxWidth, int maxHeight, Set<Position> destinations, int undoLimit) { // TODO this.maxWidth = maxWidth; this.maxHeight = maxHeight; this.destinations = destinations; this.undoLimit = undoLimit; } /** * Parses the map from a string representation. * The first line is undo limit. * Starting from the second line, the game map is represented as follows, * <li># represents a {@link Wall}</li> * <li>@ represents a box destination.</li> * <li>Any upper-case letter represents a {@link Player}.</li> * <li> * Any lower-case letter represents a {@link Box} that is only movable by the player with the corresponding upper-case letter. * For instance, box \"a\" can only be moved by player \"A\" and not movable by player \"B\". * </li> * <li>. represents an {@link Empty} position in the map, meaning there is no player or box currently at this position.</li> * <p> * Notes: * <li> * There can be at most 26 players. * All implementations of classes in the hk.ust.comp3021.game package should support up to 26 players. * </li> * <li> * For simplicity, we assume the given map is bounded with a closed boundary. * There is no need to check this point. * </li> * <li> * Example maps can be found in \"src/main/resources\". * </li> * * @param mapText The string representation. * @return The parsed GameMap object. * @throws IllegalArgumentException if undo limit is negative but not -1. * @throws IllegalArgumentException if there are multiple same upper-case letters, i.e., one player can only exist at one position. * @throws IllegalArgumentException if there are no players in the map. * @throws IllegalArgumentException if the number of boxes is not equal to the number of box destinations. * @throws IllegalArgumentException if there are boxes whose {@link Box#getPlayerId()}",
        "label": "P"
    },
    "2905": {
        "dataset": "COMP 3021",
        "project": "fslok",
        "bug_id": "24",
        "T": "void testInvalidUndoLimit() { final var invalidMap = \"\"\" -233 ###### #A..@# #...@# #a.b@# #.a.@# #..a.# ###### \"\"\"; }",
        "C": "",
        "label": "P"
    },
    "2906": {
        "dataset": "COMP 3021",
        "project": "fslok",
        "bug_id": "25",
        "T": "void testEmptyMap() { final var invalidMap = \"\"; }",
        "C": "",
        "label": "P"
    },
    "2907": {
        "dataset": "COMP 3021",
        "project": "fslok",
        "bug_id": "26",
        "T": "void testMove(String input, String name, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); } private InputStream fixValueStream(String content) { final var bytes = content.getBytes(StandardCharsets.UTF_8); return new ByteArrayInputStream(bytes); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine(); // TODO switch(inputLine){ case \"exit\": return new Exit(0); case \"a\": return new Move.Left(0); case \"s\": return new Move.Down(0); case \"w\": return new Move.Up(0); case \"d\": return new Move.Right(0); case \"h\": return new Move.Left(1); case \"j\": return new Move.Down(1); case \"k\": return new Move.Up(1); case \"l\": return new Move.Right(1); case \"u\": return new Undo(0); default: return new InvalidInput(0, StringResources.INVALID_INPUT_MESSAGE); } }",
        "label": "P"
    },
    "2908": {
        "dataset": "COMP 3021",
        "project": "fslok",
        "bug_id": "27",
        "T": "void testMove(String input, String name, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); } private InputStream fixValueStream(String content) { final var bytes = content.getBytes(StandardCharsets.UTF_8); return new ByteArrayInputStream(bytes); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine(); // TODO switch(inputLine){ case \"exit\": return new Exit(0); case \"a\": return new Move.Left(0); case \"s\": return new Move.Down(0); case \"w\": return new Move.Up(0); case \"d\": return new Move.Right(0); case \"h\": return new Move.Left(1); case \"j\": return new Move.Down(1); case \"k\": return new Move.Up(1); case \"l\": return new Move.Right(1); case \"u\": return new Undo(0); default: return new InvalidInput(0, StringResources.INVALID_INPUT_MESSAGE); } }",
        "label": "P"
    },
    "2909": {
        "dataset": "COMP 3021",
        "project": "fslok",
        "bug_id": "28",
        "T": "void testMove(String input, String name, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); } private InputStream fixValueStream(String content) { final var bytes = content.getBytes(StandardCharsets.UTF_8); return new ByteArrayInputStream(bytes); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine(); // TODO switch(inputLine){ case \"exit\": return new Exit(0); case \"a\": return new Move.Left(0); case \"s\": return new Move.Down(0); case \"w\": return new Move.Up(0); case \"d\": return new Move.Right(0); case \"h\": return new Move.Left(1); case \"j\": return new Move.Down(1); case \"k\": return new Move.Up(1); case \"l\": return new Move.Right(1); case \"u\": return new Undo(0); default: return new InvalidInput(0, StringResources.INVALID_INPUT_MESSAGE); } }",
        "label": "P"
    },
    "2910": {
        "dataset": "COMP 3021",
        "project": "fslok",
        "bug_id": "29",
        "T": "void testMove(String input, String name, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); } private InputStream fixValueStream(String content) { final var bytes = content.getBytes(StandardCharsets.UTF_8); return new ByteArrayInputStream(bytes); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine(); // TODO switch(inputLine){ case \"exit\": return new Exit(0); case \"a\": return new Move.Left(0); case \"s\": return new Move.Down(0); case \"w\": return new Move.Up(0); case \"d\": return new Move.Right(0); case \"h\": return new Move.Left(1); case \"j\": return new Move.Down(1); case \"k\": return new Move.Up(1); case \"l\": return new Move.Right(1); case \"u\": return new Undo(0); default: return new InvalidInput(0, StringResources.INVALID_INPUT_MESSAGE); } }",
        "label": "P"
    },
    "2911": {
        "dataset": "COMP 3021",
        "project": "fslok",
        "bug_id": "30",
        "T": "void testMove(String input, String name, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); } private InputStream fixValueStream(String content) { final var bytes = content.getBytes(StandardCharsets.UTF_8); return new ByteArrayInputStream(bytes); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine(); // TODO switch(inputLine){ case \"exit\": return new Exit(0); case \"a\": return new Move.Left(0); case \"s\": return new Move.Down(0); case \"w\": return new Move.Up(0); case \"d\": return new Move.Right(0); case \"h\": return new Move.Left(1); case \"j\": return new Move.Down(1); case \"k\": return new Move.Up(1); case \"l\": return new Move.Right(1); case \"u\": return new Undo(0); default: return new InvalidInput(0, StringResources.INVALID_INPUT_MESSAGE); } }",
        "label": "P"
    },
    "2912": {
        "dataset": "COMP 3021",
        "project": "fslok",
        "bug_id": "31",
        "T": "void testMove(String input, String name, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); } private InputStream fixValueStream(String content) { final var bytes = content.getBytes(StandardCharsets.UTF_8); return new ByteArrayInputStream(bytes); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine(); // TODO switch(inputLine){ case \"exit\": return new Exit(0); case \"a\": return new Move.Left(0); case \"s\": return new Move.Down(0); case \"w\": return new Move.Up(0); case \"d\": return new Move.Right(0); case \"h\": return new Move.Left(1); case \"j\": return new Move.Down(1); case \"k\": return new Move.Up(1); case \"l\": return new Move.Right(1); case \"u\": return new Undo(0); default: return new InvalidInput(0, StringResources.INVALID_INPUT_MESSAGE); } }",
        "label": "P"
    },
    "2913": {
        "dataset": "COMP 3021",
        "project": "fslok",
        "bug_id": "32",
        "T": "void testMove(String input, String name, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); } private InputStream fixValueStream(String content) { final var bytes = content.getBytes(StandardCharsets.UTF_8); return new ByteArrayInputStream(bytes); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine(); // TODO switch(inputLine){ case \"exit\": return new Exit(0); case \"a\": return new Move.Left(0); case \"s\": return new Move.Down(0); case \"w\": return new Move.Up(0); case \"d\": return new Move.Right(0); case \"h\": return new Move.Left(1); case \"j\": return new Move.Down(1); case \"k\": return new Move.Up(1); case \"l\": return new Move.Right(1); case \"u\": return new Undo(0); default: return new InvalidInput(0, StringResources.INVALID_INPUT_MESSAGE); } }",
        "label": "P"
    },
    "2914": {
        "dataset": "COMP 3021",
        "project": "fslok",
        "bug_id": "33",
        "T": "void testMove(String input, String name, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); } private InputStream fixValueStream(String content) { final var bytes = content.getBytes(StandardCharsets.UTF_8); return new ByteArrayInputStream(bytes); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine(); // TODO switch(inputLine){ case \"exit\": return new Exit(0); case \"a\": return new Move.Left(0); case \"s\": return new Move.Down(0); case \"w\": return new Move.Up(0); case \"d\": return new Move.Right(0); case \"h\": return new Move.Left(1); case \"j\": return new Move.Down(1); case \"k\": return new Move.Up(1); case \"l\": return new Move.Right(1); case \"u\": return new Undo(0); default: return new InvalidInput(0, StringResources.INVALID_INPUT_MESSAGE); } }",
        "label": "P"
    },
    "2915": {
        "dataset": "COMP 3021",
        "project": "fslok",
        "bug_id": "34",
        "T": "void testUndo(String input, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine(); // TODO switch(inputLine){ case \"exit\": return new Exit(0); case \"a\": return new Move.Left(0); case \"s\": return new Move.Down(0); case \"w\": return new Move.Up(0); case \"d\": return new Move.Right(0); case \"h\": return new Move.Left(1); case \"j\": return new Move.Down(1); case \"k\": return new Move.Up(1); case \"l\": return new Move.Right(1); case \"u\": return new Undo(0); default: return new InvalidInput(0, StringResources.INVALID_INPUT_MESSAGE); } }",
        "label": "P"
    },
    "2916": {
        "dataset": "COMP 3021",
        "project": "fslok",
        "bug_id": "35",
        "T": "void testInvalidInput() { final var inputStream = fixValueStream(\"blah blah\"); final var inputEngine = new TerminalInputEngine(inputStream); final var action = inputEngine.fetchAction(); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine(); // TODO switch(inputLine){ case \"exit\": return new Exit(0); case \"a\": return new Move.Left(0); case \"s\": return new Move.Down(0); case \"w\": return new Move.Up(0); case \"d\": return new Move.Right(0); case \"h\": return new Move.Left(1); case \"j\": return new Move.Down(1); case \"k\": return new Move.Up(1); case \"l\": return new Move.Right(1); case \"u\": return new Undo(0); default: return new InvalidInput(0, StringResources.INVALID_INPUT_MESSAGE); } }",
        "label": "P"
    },
    "2917": {
        "dataset": "COMP 3021",
        "project": "fslok",
        "bug_id": "36",
        "T": "void testUndoWhenThereIsNoMove() { final var gameState = new GameState(TestHelper.parseGameMap(\"\"\" 233 ###### #A.a@# #..a@# ###### \"\"\" )); gameState.undo(); } private Entity generateEntity(int key) { return switch (key % 4) { case 0 -> new Box(0); case 1 -> new Empty(); case 2 -> new Player(0); case 3 -> new Wall(); default -> throw new ShouldNotReachException(); }; }",
        "C": "public GameState(@NotNull GameMap map) { // TODO this.originalMap = map; this.maxWidth = map.getMaxWidth(); this.maxHeight = map.getMaxHeight(); this.destinations = map.getDestinations(); this.undoQuota = map.getUndoLimit(); this.playersLoc = new HashMap<Integer, Position>(); HashMap<Integer, Position> players = new HashMap<Integer, Position>(); this.boxesLoc = new HashMap<Integer, ArrayList<Position>>(); HashMap<Integer, ArrayList<Position>> boxes = new HashMap<Integer, ArrayList<Position>>(); ArrayList<ArrayList<Entity>> newMap = new ArrayList<ArrayList<Entity>>(); for (int i = 0; i < map.getMap().size(); i++) { ArrayList<Entity> row = new ArrayList<Entity>(); for (int j = 0; j < map.getMap().get(i).size(); j++) { Object item = map.getMap().get(i).get(j); if (item instanceof Player){ row.add((Player) item); players.put(((Player) item).getId(), new Position(j, i)); this.playersLoc.put(((Player) item).getId(), new Position(j, i)); } else if (item instanceof Box){ Box box = (Box) item; row.add((Box) item); if (boxes.containsKey(box.getPlayerId())) { boxes.get(box.getPlayerId()).add(new Position(j, i)); } else { ArrayList<Position> boxesLoc = new ArrayList<Position>(); boxesLoc.add(new Position(j, i)); boxes.put(box.getPlayerId(), boxesLoc); } if (this.boxesLoc.containsKey(box.getPlayerId())) { this.boxesLoc.get(box.getPlayerId()).add(new Position(j, i)); } else { ArrayList<Position> boxesLoc = new ArrayList<Position>(); boxesLoc.add(new Position(j, i)); this.boxesLoc.put(box.getPlayerId(), boxesLoc); } } else if (item instanceof Wall){ row.add((Wall) item); } else { row.add((Empty) item); } } newMap.add(row); } this.map = newMap; this.checkpointMap = new ArrayList<ArrayList<ArrayList<Entity>>>(); this.checkpointMap.add(map.getMap()); this.checkpointPlayers = new ArrayList<HashMap<Integer, Position>>(); this.checkpointPlayers.add(players); this.checkpointBoxes = new ArrayList<HashMap<Integer, ArrayList<Position>>>(); this.checkpointBoxes.add(boxes); } public void undo() { // TODO // if no checkpoint int index = 0; int end = 1; if (checkpointMap.size() >= 2){ int size = checkpointMap.size(); index = size - 2; end = size - 1; } ArrayList<ArrayList<Entity>> newMap = new ArrayList<ArrayList<Entity>>(); for (ArrayList<Entity> row : this.checkpointMap.get(index)){ ArrayList<Entity> newRow = new ArrayList<Entity>(); for (Entity e : row){ switch(e){ case Player o -> newRow.add(new Player(o.getId())); case Box o -> newRow.add(new Box(o.getPlayerId())); case Wall o -> newRow.add(new Wall()); case Empty o -> newRow.add(new Empty()); case null -> newRow.add(null); case Object o -> throw new IllegalArgumentException(); } } newMap.add(newRow); } this.map = newMap; HashMap<Integer, Position> temp = new HashMap<Integer, Position>(); for (int key : this.checkpointPlayers.get(index).keySet()){ temp.put(key, this.checkpointPlayers.get(index).get(key)); } this.playersLoc = temp; HashMap<Integer, ArrayList<Position>> temp2 = new HashMap<Integer, ArrayList<Position>>(); for (int key : this.checkpointBoxes.get(index).keySet()){ ArrayList<Position> temp3 = new ArrayList<Position>(); for (int j = 0; j < this.checkpointBoxes.get(index).get(key).size(); j++){ temp3.add(this.checkpointBoxes.get(index).get(key).get(j)); } temp2.put(key, temp3); } this.boxesLoc = temp2; this.checkpointMap = new ArrayList<ArrayList<ArrayList<Entity>>>(this.checkpointMap.subList(0, end)); this.checkpointPlayers = new ArrayList<HashMap<Integer, Position>>(this.checkpointPlayers.subList(0, end)); this.checkpointBoxes = new ArrayList<HashMap<Integer, ArrayList<Position>>>(this.checkpointBoxes.subList(0, end)); if (this.undoQuota.isPresent()){ int newQuota = this.undoQuota.get() - 1; this.undoQuota = Optional.of(newQuota); } } /** * Get the maximum width of the game map. * This should be the same as that in {@link GameMap} public Box(int playerId) { this.playerId = playerId; } public Player(int id) { this.id = id; } public ShouldNotReachException() { super(\"This branch should not be reached.\"); }",
        "label": "F"
    },
    "2918": {
        "dataset": "COMP 3021",
        "project": "fslok",
        "bug_id": "37",
        "T": "void testGetUndoUnlimited() { final var gameState = new GameState(TestHelper.parseGameMap(\"\"\" -1 ###### #.Aa@# #..a@# ###### \"\"\" )); }",
        "C": "public GameState(@NotNull GameMap map) { // TODO this.originalMap = map; this.maxWidth = map.getMaxWidth(); this.maxHeight = map.getMaxHeight(); this.destinations = map.getDestinations(); this.undoQuota = map.getUndoLimit(); this.playersLoc = new HashMap<Integer, Position>(); HashMap<Integer, Position> players = new HashMap<Integer, Position>(); this.boxesLoc = new HashMap<Integer, ArrayList<Position>>(); HashMap<Integer, ArrayList<Position>> boxes = new HashMap<Integer, ArrayList<Position>>(); ArrayList<ArrayList<Entity>> newMap = new ArrayList<ArrayList<Entity>>(); for (int i = 0; i < map.getMap().size(); i++) { ArrayList<Entity> row = new ArrayList<Entity>(); for (int j = 0; j < map.getMap().get(i).size(); j++) { Object item = map.getMap().get(i).get(j); if (item instanceof Player){ row.add((Player) item); players.put(((Player) item).getId(), new Position(j, i)); this.playersLoc.put(((Player) item).getId(), new Position(j, i)); } else if (item instanceof Box){ Box box = (Box) item; row.add((Box) item); if (boxes.containsKey(box.getPlayerId())) { boxes.get(box.getPlayerId()).add(new Position(j, i)); } else { ArrayList<Position> boxesLoc = new ArrayList<Position>(); boxesLoc.add(new Position(j, i)); boxes.put(box.getPlayerId(), boxesLoc); } if (this.boxesLoc.containsKey(box.getPlayerId())) { this.boxesLoc.get(box.getPlayerId()).add(new Position(j, i)); } else { ArrayList<Position> boxesLoc = new ArrayList<Position>(); boxesLoc.add(new Position(j, i)); this.boxesLoc.put(box.getPlayerId(), boxesLoc); } } else if (item instanceof Wall){ row.add((Wall) item); } else { row.add((Empty) item); } } newMap.add(row); } this.map = newMap; this.checkpointMap = new ArrayList<ArrayList<ArrayList<Entity>>>(); this.checkpointMap.add(map.getMap()); this.checkpointPlayers = new ArrayList<HashMap<Integer, Position>>(); this.checkpointPlayers.add(players); this.checkpointBoxes = new ArrayList<HashMap<Integer, ArrayList<Position>>>(); this.checkpointBoxes.add(boxes); }",
        "label": "P"
    },
    "2919": {
        "dataset": "COMP 3021",
        "project": "fslok",
        "bug_id": "38",
        "T": "void testMapCopying() { final var maxWidth = 2333; final var maxHeight = 2333; final var random = new Random(); final var randomEntities = Stream.generate(() -> Position.of(random.nextInt(maxWidth), random.nextInt(maxHeight))) .distinct() .limit(100) .collect(Collectors.toMap(Function.identity(), it -> generateEntity(it.x()))); final var firstPos = randomEntities.keySet().stream().findFirst(); final var gameMap = new GameMap(maxWidth, maxHeight, Collections.singleton(firstPos.get()), 233); randomEntities.forEach(gameMap::putEntity); final var gameState = new GameState(gameMap); final var randomPosition = randomEntities.keySet().stream().findAny(); gameMap.putEntity(randomPosition.get(), new Empty()); randomEntities.forEach((p, e) -> assertEquals(e, gameState.getEntity(p))); }",
        "C": "public static @NotNull Position of(int x, int y) { return new Position(x, y); } public GameMap(int maxWidth, int maxHeight, Set<Position> destinations, int undoLimit) { // TODO this.maxWidth = maxWidth; this.maxHeight = maxHeight; this.destinations = destinations; this.undoLimit = undoLimit; } /** * Parses the map from a string representation. * The first line is undo limit. * Starting from the second line, the game map is represented as follows, * <li># represents a {@link Wall}</li> * <li>@ represents a box destination.</li> * <li>Any upper-case letter represents a {@link Player}.</li> * <li> * Any lower-case letter represents a {@link Box} that is only movable by the player with the corresponding upper-case letter. * For instance, box \"a\" can only be moved by player \"A\" and not movable by player \"B\". * </li> * <li>. represents an {@link Empty} position in the map, meaning there is no player or box currently at this position.</li> * <p> * Notes: * <li> * There can be at most 26 players. * All implementations of classes in the hk.ust.comp3021.game package should support up to 26 players. * </li> * <li> * For simplicity, we assume the given map is bounded with a closed boundary. * There is no need to check this point. * </li> * <li> * Example maps can be found in \"src/main/resources\". * </li> * * @param mapText The string representation. * @return The parsed GameMap object. * @throws IllegalArgumentException if undo limit is negative but not -1. * @throws IllegalArgumentException if there are multiple same upper-case letters, i.e., one player can only exist at one position. * @throws IllegalArgumentException if there are no players in the map. * @throws IllegalArgumentException if the number of boxes is not equal to the number of box destinations. * @throws IllegalArgumentException if there are boxes whose {@link Box#getPlayerId()} public GameState(@NotNull GameMap map) { // TODO this.originalMap = map; this.maxWidth = map.getMaxWidth(); this.maxHeight = map.getMaxHeight(); this.destinations = map.getDestinations(); this.undoQuota = map.getUndoLimit(); this.playersLoc = new HashMap<Integer, Position>(); HashMap<Integer, Position> players = new HashMap<Integer, Position>(); this.boxesLoc = new HashMap<Integer, ArrayList<Position>>(); HashMap<Integer, ArrayList<Position>> boxes = new HashMap<Integer, ArrayList<Position>>(); ArrayList<ArrayList<Entity>> newMap = new ArrayList<ArrayList<Entity>>(); for (int i = 0; i < map.getMap().size(); i++) { ArrayList<Entity> row = new ArrayList<Entity>(); for (int j = 0; j < map.getMap().get(i).size(); j++) { Object item = map.getMap().get(i).get(j); if (item instanceof Player){ row.add((Player) item); players.put(((Player) item).getId(), new Position(j, i)); this.playersLoc.put(((Player) item).getId(), new Position(j, i)); } else if (item instanceof Box){ Box box = (Box) item; row.add((Box) item); if (boxes.containsKey(box.getPlayerId())) { boxes.get(box.getPlayerId()).add(new Position(j, i)); } else { ArrayList<Position> boxesLoc = new ArrayList<Position>(); boxesLoc.add(new Position(j, i)); boxes.put(box.getPlayerId(), boxesLoc); } if (this.boxesLoc.containsKey(box.getPlayerId())) { this.boxesLoc.get(box.getPlayerId()).add(new Position(j, i)); } else { ArrayList<Position> boxesLoc = new ArrayList<Position>(); boxesLoc.add(new Position(j, i)); this.boxesLoc.put(box.getPlayerId(), boxesLoc); } } else if (item instanceof Wall){ row.add((Wall) item); } else { row.add((Empty) item); } } newMap.add(row); } this.map = newMap; this.checkpointMap = new ArrayList<ArrayList<ArrayList<Entity>>>(); this.checkpointMap.add(map.getMap()); this.checkpointPlayers = new ArrayList<HashMap<Integer, Position>>(); this.checkpointPlayers.add(players); this.checkpointBoxes = new ArrayList<HashMap<Integer, ArrayList<Position>>>(); this.checkpointBoxes.add(boxes); } public void putEntity(Position position, Entity entity) { // TODO int x = position.x(); int y = position.y(); map.get(y).set(x, entity); } public @Nullable Entity getEntity(@NotNull Position position) { // TODO return this.map.get(position.y()).get(position.x()); } /** * Get all box destination positions as a set in the game map. * This should be the same as that in {@link GameMap}",
        "label": "F"
    },
    "2920": {
        "dataset": "COMP 3021",
        "project": "fslok",
        "bug_id": "39",
        "T": "void testUndoWhenThereIsMoveButNoCheckpoint() { final var gameState = new GameState(TestHelper.parseGameMap(\"\"\" 233 ###### #A.a@# #..a@# ###### \"\"\" )); gameState.move(Position.of(1, 1), Position.of(2, 1)); gameState.undo(); }",
        "C": "public GameState(@NotNull GameMap map) { // TODO this.originalMap = map; this.maxWidth = map.getMaxWidth(); this.maxHeight = map.getMaxHeight(); this.destinations = map.getDestinations(); this.undoQuota = map.getUndoLimit(); this.playersLoc = new HashMap<Integer, Position>(); HashMap<Integer, Position> players = new HashMap<Integer, Position>(); this.boxesLoc = new HashMap<Integer, ArrayList<Position>>(); HashMap<Integer, ArrayList<Position>> boxes = new HashMap<Integer, ArrayList<Position>>(); ArrayList<ArrayList<Entity>> newMap = new ArrayList<ArrayList<Entity>>(); for (int i = 0; i < map.getMap().size(); i++) { ArrayList<Entity> row = new ArrayList<Entity>(); for (int j = 0; j < map.getMap().get(i).size(); j++) { Object item = map.getMap().get(i).get(j); if (item instanceof Player){ row.add((Player) item); players.put(((Player) item).getId(), new Position(j, i)); this.playersLoc.put(((Player) item).getId(), new Position(j, i)); } else if (item instanceof Box){ Box box = (Box) item; row.add((Box) item); if (boxes.containsKey(box.getPlayerId())) { boxes.get(box.getPlayerId()).add(new Position(j, i)); } else { ArrayList<Position> boxesLoc = new ArrayList<Position>(); boxesLoc.add(new Position(j, i)); boxes.put(box.getPlayerId(), boxesLoc); } if (this.boxesLoc.containsKey(box.getPlayerId())) { this.boxesLoc.get(box.getPlayerId()).add(new Position(j, i)); } else { ArrayList<Position> boxesLoc = new ArrayList<Position>(); boxesLoc.add(new Position(j, i)); this.boxesLoc.put(box.getPlayerId(), boxesLoc); } } else if (item instanceof Wall){ row.add((Wall) item); } else { row.add((Empty) item); } } newMap.add(row); } this.map = newMap; this.checkpointMap = new ArrayList<ArrayList<ArrayList<Entity>>>(); this.checkpointMap.add(map.getMap()); this.checkpointPlayers = new ArrayList<HashMap<Integer, Position>>(); this.checkpointPlayers.add(players); this.checkpointBoxes = new ArrayList<HashMap<Integer, ArrayList<Position>>>(); this.checkpointBoxes.add(boxes); } public void move(Position from, Position to) { // TODO switch(this.getEntity(from)){ case Player o -> { playersLoc.put(o.getId(), to); this.map.get(to.y()).set(to.x(), o); this.map.get(from.y()).set(from.x(), new Empty()); } case Box o -> { int index = boxesLoc.get(o.getPlayerId()).indexOf(from); boxesLoc.get(o.getPlayerId()).set(index, to); this.map.get(to.y()).set(to.x(), o); this.map.get(from.y()).set(from.x(), new Empty()); } case Object o -> {} } } /** * Record a checkpoint of the game state, including: * <li>All current positions of entities in the game map.</li> * <li>Current undo quota</li> * <p> * Checkpoint is used in {@link GameState#undo()} public static @NotNull Position of(int x, int y) { return new Position(x, y); } public void undo() { // TODO // if no checkpoint int index = 0; int end = 1; if (checkpointMap.size() >= 2){ int size = checkpointMap.size(); index = size - 2; end = size - 1; } ArrayList<ArrayList<Entity>> newMap = new ArrayList<ArrayList<Entity>>(); for (ArrayList<Entity> row : this.checkpointMap.get(index)){ ArrayList<Entity> newRow = new ArrayList<Entity>(); for (Entity e : row){ switch(e){ case Player o -> newRow.add(new Player(o.getId())); case Box o -> newRow.add(new Box(o.getPlayerId())); case Wall o -> newRow.add(new Wall()); case Empty o -> newRow.add(new Empty()); case null -> newRow.add(null); case Object o -> throw new IllegalArgumentException(); } } newMap.add(newRow); } this.map = newMap; HashMap<Integer, Position> temp = new HashMap<Integer, Position>(); for (int key : this.checkpointPlayers.get(index).keySet()){ temp.put(key, this.checkpointPlayers.get(index).get(key)); } this.playersLoc = temp; HashMap<Integer, ArrayList<Position>> temp2 = new HashMap<Integer, ArrayList<Position>>(); for (int key : this.checkpointBoxes.get(index).keySet()){ ArrayList<Position> temp3 = new ArrayList<Position>(); for (int j = 0; j < this.checkpointBoxes.get(index).get(key).size(); j++){ temp3.add(this.checkpointBoxes.get(index).get(key).get(j)); } temp2.put(key, temp3); } this.boxesLoc = temp2; this.checkpointMap = new ArrayList<ArrayList<ArrayList<Entity>>>(this.checkpointMap.subList(0, end)); this.checkpointPlayers = new ArrayList<HashMap<Integer, Position>>(this.checkpointPlayers.subList(0, end)); this.checkpointBoxes = new ArrayList<HashMap<Integer, ArrayList<Position>>>(this.checkpointBoxes.subList(0, end)); if (this.undoQuota.isPresent()){ int newQuota = this.undoQuota.get() - 1; this.undoQuota = Optional.of(newQuota); } } /** * Get the maximum width of the game map. * This should be the same as that in {@link GameMap}",
        "label": "F"
    },
    "2921": {
        "dataset": "COMP 3021",
        "project": "fslok",
        "bug_id": "40",
        "T": "void testGameExit() { final var gameState = mock(GameState.class); final var inputEngine = mock(TerminalInputEngine.class); final var renderingEngine = mock(TerminalRenderingEngine.class); when(gameState.isWin()).thenReturn(false, false, false); when(inputEngine.fetchAction()) .thenReturn(new InvalidInput(0, \"\"), new InvalidInput(0, \"\"), new Exit(0)); final var game = new TerminalSokobanGame(gameState, inputEngine, renderingEngine); game.run(); verify(renderingEngine, atLeastOnce()).message(any()); }",
        "C": "public InvalidInput(int initiator, @NotNull String message) { super(initiator); this.message = message; } public Exit(int initiator) { super(initiator); } public TerminalSokobanGame(GameState gameState, TerminalInputEngine inputEngine, TerminalRenderingEngine renderingEngine) { super(gameState); this.inputEngine = inputEngine; this.renderingEngine = renderingEngine; // TODO // Check the number of players int numPlayers = gameState.getAllPlayerPositions().size(); if (numPlayers > 2) { throw new IllegalArgumentException(); } } public void run() { // TODO Optional<Integer> quota = this.state.getUndoQuota(); this.renderingEngine.message(StringResources.GAME_READY_MESSAGE); while (!this.shouldStop()) { quota = this.state.getUndoQuota(); this.renderingEngine.render(this.state); if (quota.isEmpty()){ this.renderingEngine.message(StringResources.UNDO_QUOTA_UNLIMITED); } else { this.renderingEngine.message(String.format(StringResources.UNDO_QUOTA_TEMPLATE, Integer.toString(quota.get()))); } this.renderingEngine.message(\">>>\"); Action inputAction = this.inputEngine.fetchAction(); ActionResult result = this.processAction(inputAction); if (result instanceof ActionResult.Failed){ if (result.getAction() instanceof Exit) { this.renderingEngine.render(this.state); break; } this.renderingEngine.message(((ActionResult.Failed) result).getReason()); } } this.renderingEngine.render(this.state); this.renderingEngine.message(StringResources.GAME_EXIT_MESSAGE); if (this.state.isWin()){ this.renderingEngine.message(StringResources.WIN_MESSAGE); } }",
        "label": "P"
    },
    "2922": {
        "dataset": "COMP 3021",
        "project": "fslok",
        "bug_id": "41",
        "T": "void testGameWin() { final var gameState = mock(GameState.class); final var inputEngine = mock(TerminalInputEngine.class); final var renderingEngine = mock(TerminalRenderingEngine.class); when(gameState.isWin()).thenReturn(false, false, false, true); when(inputEngine.fetchAction()) .thenReturn(new InvalidInput(0, \"\")); final var game = new TerminalSokobanGame(gameState, inputEngine, renderingEngine); game.run(); verify(gameState, atLeastOnce()).isWin(); verify(renderingEngine, atLeastOnce()).message(any()); }",
        "C": "public InvalidInput(int initiator, @NotNull String message) { super(initiator); this.message = message; } public TerminalSokobanGame(GameState gameState, TerminalInputEngine inputEngine, TerminalRenderingEngine renderingEngine) { super(gameState); this.inputEngine = inputEngine; this.renderingEngine = renderingEngine; // TODO // Check the number of players int numPlayers = gameState.getAllPlayerPositions().size(); if (numPlayers > 2) { throw new IllegalArgumentException(); } } public void run() { // TODO Optional<Integer> quota = this.state.getUndoQuota(); this.renderingEngine.message(StringResources.GAME_READY_MESSAGE); while (!this.shouldStop()) { quota = this.state.getUndoQuota(); this.renderingEngine.render(this.state); if (quota.isEmpty()){ this.renderingEngine.message(StringResources.UNDO_QUOTA_UNLIMITED); } else { this.renderingEngine.message(String.format(StringResources.UNDO_QUOTA_TEMPLATE, Integer.toString(quota.get()))); } this.renderingEngine.message(\">>>\"); Action inputAction = this.inputEngine.fetchAction(); ActionResult result = this.processAction(inputAction); if (result instanceof ActionResult.Failed){ if (result.getAction() instanceof Exit) { this.renderingEngine.render(this.state); break; } this.renderingEngine.message(((ActionResult.Failed) result).getReason()); } } this.renderingEngine.render(this.state); this.renderingEngine.message(StringResources.GAME_EXIT_MESSAGE); if (this.state.isWin()){ this.renderingEngine.message(StringResources.WIN_MESSAGE); } }",
        "label": "P"
    },
    "2923": {
        "dataset": "COMP 3021",
        "project": "fslok",
        "bug_id": "42",
        "T": "void testMoreThanTwoPlayers() { final var gameState = mock(GameState.class); final var inputEngine = mock(TerminalInputEngine.class); final var renderingEngine = mock(TerminalRenderingEngine.class); when(gameState.getAllPlayerPositions()).thenReturn(new HashSet<>(Arrays.asList(Position.of(1, 1), Position.of(1, 2), Position.of(1, 3)))); }",
        "C": "public static @NotNull Position of(int x, int y) { return new Position(x, y); }",
        "label": "P"
    },
    "2924": {
        "dataset": "COMP 3021",
        "project": "mlinam",
        "bug_id": "0",
        "T": "void moveUp() { Position.of(233, 232), new Move.Up(-1).nextPosition(pos) ); }",
        "C": "public static @NotNull Position of(int x, int y) { return new Position(x, y); } public Up(int initiator) { super(initiator); }",
        "label": "P"
    },
    "2925": {
        "dataset": "COMP 3021",
        "project": "mlinam",
        "bug_id": "1",
        "T": "void moveDown() { Position.of(233, 234), new Move.Down(-1).nextPosition(pos) ); }",
        "C": "public static @NotNull Position of(int x, int y) { return new Position(x, y); } public Down(int initiator) { super(initiator); }",
        "label": "P"
    },
    "2926": {
        "dataset": "COMP 3021",
        "project": "mlinam",
        "bug_id": "2",
        "T": "void moveRight() { Position.of(234, 233), new Move.Right(-1).nextPosition(pos) ); }",
        "C": "public static @NotNull Position of(int x, int y) { return new Position(x, y); } public Right(int initiator) { super(initiator); }",
        "label": "P"
    },
    "2927": {
        "dataset": "COMP 3021",
        "project": "mlinam",
        "bug_id": "3",
        "T": "void testExceedingUndoQuota() { final var gameState = mock(GameState.class); when(gameState.getPlayerPositionById(anyInt())).thenReturn(Position.of(0, 0)); when(gameState.getUndoQuota()).thenReturn(Optional.of(0)); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Undo(0)); }",
        "C": "public Undo(int initiator) { super(initiator); }",
        "label": "P"
    },
    "2928": {
        "dataset": "COMP 3021",
        "project": "mlinam",
        "bug_id": "4",
        "T": "void testExit() { final var gameState = mock(GameState.class); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Exit(0)); }",
        "C": "public Exit(int initiator) { super(initiator); }",
        "label": "F"
    },
    "2929": {
        "dataset": "COMP 3021",
        "project": "mlinam",
        "bug_id": "5",
        "T": "void testUndoUnlimited() { final var gameState = mock(GameState.class); when(gameState.getPlayerPositionById(anyInt())).thenReturn(Position.of(0, 0)); when(gameState.getUndoQuota()).thenReturn(Optional.empty()); final var game = new SokobanGameForTesting(gameState); for (int i = 0; i < 10000; i++) { final var result = game.feedActionForProcessing(new Undo(0)); } verify(gameState, times(10000)).undo(); }",
        "C": "public TerminalRenderingEngine(PrintStream outputSteam) { this.outputSteam = outputSteam; } public Undo(int initiator) { super(initiator); }",
        "label": "P"
    },
    "2930": {
        "dataset": "COMP 3021",
        "project": "mlinam",
        "bug_id": "6",
        "T": "void testPushOtherPlayerBox() { String mapText = \"\"\" 233 ###### #AB.@# #b.a.# #@...# ###### \"\"\"; final var testMap = TestHelper.parseGameMap(mapText); final var gameState = spy(new GameState(testMap)); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Move.Down(0)); verify(gameState, never()).move(any(), any()); }",
        "C": "public GameState(@NotNull GameMap map) { // TODO this.map = map; playerLocation = map.players.clone(); for(int i = 0; i < 26; i++) for(int j = 0; j < map.boxes[i].size();j++) boxLocation[i].add(map.boxes[i].get(j)); undoQuota = map.undolimit; //throw new NotImplementedException(); } public Down(int initiator) { super(initiator); }",
        "label": "P"
    },
    "2931": {
        "dataset": "COMP 3021",
        "project": "mlinam",
        "bug_id": "7",
        "T": "void testMoveNonExistingPlayer() { String mapText = \"\"\" 233 ###### #A..@# #a...# ##...# ###### \"\"\"; final var testMap = TestHelper.parseGameMap(mapText); final var gameState = spy(new GameState(testMap)); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Move.Down(23)); }",
        "C": "public GameState(@NotNull GameMap map) { // TODO this.map = map; playerLocation = map.players.clone(); for(int i = 0; i < 26; i++) for(int j = 0; j < map.boxes[i].size();j++) boxLocation[i].add(map.boxes[i].get(j)); undoQuota = map.undolimit; //throw new NotImplementedException(); } public Down(int initiator) { super(initiator); }",
        "label": "P"
    },
    "2932": {
        "dataset": "COMP 3021",
        "project": "mlinam",
        "bug_id": "8",
        "T": "void testCheckpointWhenNeed() { final var gameState = spy(new GameState(TestHelper.parseGameMap(\"\"\" 233 ###### #.Aa@# #..a@# ###### \"\"\" ))); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Move.Right(0)); verify(gameState, times(1)).checkpoint(); }",
        "C": "public GameState(@NotNull GameMap map) { // TODO this.map = map; playerLocation = map.players.clone(); for(int i = 0; i < 26; i++) for(int j = 0; j < map.boxes[i].size();j++) boxLocation[i].add(map.boxes[i].get(j)); undoQuota = map.undolimit; //throw new NotImplementedException(); } public Right(int initiator) { super(initiator); }",
        "label": "P"
    },
    "2933": {
        "dataset": "COMP 3021",
        "project": "mlinam",
        "bug_id": "9",
        "T": "void testPushBoxAgainstWall() { String mapText = \"\"\" 233 ###### #A..@# #a...# ##...# ###### \"\"\"; final var testMap = TestHelper.parseGameMap(mapText); final var gameState = spy(new GameState(testMap)); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Move.Down(0)); verify(gameState, never()).move(any(), any()); }",
        "C": "public GameState(@NotNull GameMap map) { // TODO this.map = map; playerLocation = map.players.clone(); for(int i = 0; i < 26; i++) for(int j = 0; j < map.boxes[i].size();j++) boxLocation[i].add(map.boxes[i].get(j)); undoQuota = map.undolimit; //throw new NotImplementedException(); } public Down(int initiator) { super(initiator); }",
        "label": "P"
    },
    "2934": {
        "dataset": "COMP 3021",
        "project": "mlinam",
        "bug_id": "10",
        "T": "void testCheckpointWhenNotNeed() { final var gameState = spy(new GameState(TestHelper.parseGameMap(\"\"\" 233 ###### #A.a@# #..a@# ###### \"\"\" ))); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Move.Right(0)); verify(gameState, never()).checkpoint(); } private static class SokobanGameForTesting extends AbstractSokobanGame { protected SokobanGameForTesting(GameState gameState) { super(gameState); } @Override public void run() { } public ActionResult feedActionForProcessing(Action action) { return processAction(action); } }",
        "C": "public GameState(@NotNull GameMap map) { // TODO this.map = map; playerLocation = map.players.clone(); for(int i = 0; i < 26; i++) for(int j = 0; j < map.boxes[i].size();j++) boxLocation[i].add(map.boxes[i].get(j)); undoQuota = map.undolimit; //throw new NotImplementedException(); } public Right(int initiator) { super(initiator); } public void run() { // TODO // Set<Integer> playerIds = state.map.getPlayerIds(); // for(int i : playerIds){ // if(i != 0 && i != 1){ // renderingEngine.message(INVALID_INPUT_MESSAGE); // return; // } // } if(state.getUndoQuota().isPresent() && state.getUndoQuota().get() < 0 && state.getUndoQuota().get() != -1) { renderingEngine.message(INVALID_INPUT_MESSAGE); return; } renderingEngine.message(GAME_READY_MESSAGE); Action action; ActionResult result; while(true) { if(state.getUndoQuota().isPresent()) renderingEngine.message(UNDO_QUOTA_TEMPLATE.formatted(state.getUndoQuota().get().toString())); else renderingEngine.message(UNDO_QUOTA_UNLIMITED); renderingEngine.render(state); action = inputEngine.fetchAction(); if(action instanceof Exit){ renderingEngine.message(GAME_EXIT_MESSAGE); break; } result = processAction(action); //System.out.println(action.getClass()); if(result instanceof ActionResult.Failed) renderingEngine.message((((ActionResult.Failed)result).getReason())); if(state.isWin()) { renderingEngine.message(WIN_MESSAGE); break; } } renderingEngine.render(state); //throw new NotImplementedException(); } protected ActionResult processAction(@NotNull Action action) { // TODO //System.out.println(action.getClass()); state.lastAction = action; if(action instanceof InvalidInput) return new ActionResult.Failed(action, ((InvalidInput) action).getMessage()); if(action.getInitiator() != -1 && state.getPlayerPositionById(action.getInitiator()) == null) return new ActionResult.Failed(action,PLAYER_NOT_FOUND); Position currentposition = state.getPlayerPositionById(action.getInitiator()); if (action instanceof Move.Up){ Position nextPosition = new Position(currentposition.x(), currentposition.y()-1); Entity entityOnNext = state.getEntity(nextPosition); if(entityOnNext instanceof Empty) { state.move(currentposition,nextPosition); return new ActionResult.Success(action); } if(entityOnNext instanceof Box){ if(((Box) entityOnNext).getPlayerId() != action.getInitiator() ) return new ActionResult.Failed(action,\"cannot move\"); Position nextBoxposition = new Position(currentposition.x(), currentposition.y()-2); if(state.getEntity(nextBoxposition) instanceof Empty){ //System.out.println(currentposition); //System.out.println(nextPosition); //System.out.println(nextBoxposition); state.move(nextPosition, nextBoxposition); state.move(currentposition,nextPosition); state.checkpoint(); return new ActionResult.Success(action); } else return new ActionResult.Failed(action,\"cannot move\"); } else return new ActionResult.Failed(action, INVALID_INPUT_MESSAGE); } if (action instanceof Move.Down){ Position nextPosition = new Position(currentposition.x(), currentposition.y()+1); Entity entityOnNext = state.getEntity(nextPosition); if(entityOnNext instanceof Empty) { state.move(currentposition,nextPosition); return new ActionResult.Success(action); } if(entityOnNext instanceof Box){ if(((Box) entityOnNext).getPlayerId() != action.getInitiator() ) return new ActionResult.Failed(action,\"cannot move\"); Position nextBoxposition = new Position(currentposition.x(), currentposition.y()+2); if(state.getEntity(nextBoxposition) instanceof Empty){ //System.out.println(currentposition); //System.out.println(nextPosition); //System.out.println(nextBoxposition); state.move(nextPosition, nextBoxposition); state.move(currentposition,nextPosition); state.checkpoint(); return new ActionResult.Success(action); } else return new ActionResult.Failed(action,\"cannot move\"); } else return new ActionResult.Failed(action, INVALID_INPUT_MESSAGE); } if (action instanceof Move.Left){ Position nextPosition = new Position(currentposition.x()-1, currentposition.y()); Entity entityOnNext = state.getEntity(nextPosition); if(entityOnNext instanceof Empty) { state.move(currentposition,nextPosition); return new ActionResult.Success(action); } else if(entityOnNext instanceof Box){ if(((Box) entityOnNext).getPlayerId() != action.getInitiator() ) return new ActionResult.Failed(action,\"cannot move\"); Position nextBoxposition = new Position(currentposition.x()-2, currentposition.y()); if(state.getEntity(nextBoxposition) instanceof Empty){ //System.out.println(currentposition); //System.out.println(nextPosition); //System.out.println(nextBoxposition); state.move(nextPosition, nextBoxposition); state.move(currentposition,nextPosition); state.checkpoint(); return new ActionResult.Success(action); } else return new ActionResult.Failed(action,\"cannot move\"); } else return new ActionResult.Failed(action, INVALID_INPUT_MESSAGE); } if (action instanceof Move.Right){ Position nextPosition = new Position(currentposition.x()+1, currentposition.y()); Entity entityOnNext = state.getEntity(nextPosition); if(entityOnNext instanceof Empty) { state.move(currentposition,nextPosition); return new ActionResult.Success(action); } if(entityOnNext instanceof Box){ if(((Box) entityOnNext).getPlayerId() != action.getInitiator() ) return new ActionResult.Failed(action,\"cannot move\"); Position nextBoxposition = new Position(currentposition.x()+2, currentposition.y()); if(state.getEntity(nextBoxposition) instanceof Empty){ //System.out.println(currentposition); // System.out.println(nextPosition); //System.out.println(nextBoxposition); state.move(nextPosition, nextBoxposition); state.move(currentposition,nextPosition); state.checkpoint(); return new ActionResult.Success(action); } else return new ActionResult.Failed(action,\"cannot move\"); } else return new ActionResult.Failed(action, INVALID_INPUT_MESSAGE); } if (action instanceof Undo){ //System.out.println(\"undo!\"); if(state.getUndoQuota().isEmpty() || state.getUndoQuota().get() > 0) { state.undo(); return new ActionResult.Success(action); } else return new ActionResult.Failed(action,UNDO_QUOTA_RUN_OUT); } if (action instanceof Exit){ return new ActionResult.Success(action); } return new ActionResult.Failed(action,INVALID_INPUT_MESSAGE); //throw new NotImplementedException(); }",
        "label": "P"
    },
    "2935": {
        "dataset": "COMP 3021",
        "project": "mlinam",
        "bug_id": "11",
        "T": "void testHitAnotherPlayer() { String mapText = \"\"\" 233 ###### #A..@# #B...# #ab.@# ###### \"\"\"; final var testMap = TestHelper.parseGameMap(mapText); final var gameState = spy(new GameState(testMap)); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Move.Down(0)); verify(gameState, never()).move(any(), any()); }",
        "C": "public GameState(@NotNull GameMap map) { // TODO this.map = map; playerLocation = map.players.clone(); for(int i = 0; i < 26; i++) for(int j = 0; j < map.boxes[i].size();j++) boxLocation[i].add(map.boxes[i].get(j)); undoQuota = map.undolimit; //throw new NotImplementedException(); } public Down(int initiator) { super(initiator); }",
        "label": "P"
    },
    "2936": {
        "dataset": "COMP 3021",
        "project": "mlinam",
        "bug_id": "12",
        "T": "void testUndoWithinQuota() { final var gameState = mock(GameState.class); when(gameState.getPlayerPositionById(anyInt())).thenReturn(Position.of(0, 0)); when(gameState.getUndoQuota()).thenReturn(Optional.of(1)); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Undo(0)); verify(gameState, times(1)).undo(); }",
        "C": "public Undo(int initiator) { super(initiator); }",
        "label": "P"
    },
    "2937": {
        "dataset": "COMP 3021",
        "project": "mlinam",
        "bug_id": "13",
        "T": "void testInvalidInput() { final var game = new SokobanGameForTesting(mock(GameState.class)); final var message = String.valueOf(new Random().nextLong()); final var action = new InvalidInput(-1, message); final var result = game.feedActionForProcessing(action); }",
        "C": "public InvalidInput(int initiator, @NotNull String message) { super(initiator); this.message = message; }",
        "label": "P"
    },
    "2938": {
        "dataset": "COMP 3021",
        "project": "mlinam",
        "bug_id": "14",
        "T": "void testUndoLimitParsing() { final var gameMap = TestHelper.parseGameMap(rectangularMap); }",
        "C": "",
        "label": "P"
    },
    "2939": {
        "dataset": "COMP 3021",
        "project": "mlinam",
        "bug_id": "15",
        "T": "void testWidthForNonRectangularMap() { final var gameMap = TestHelper.parseGameMap(nonRectangularMap); }",
        "C": "",
        "label": "P"
    },
    "2940": {
        "dataset": "COMP 3021",
        "project": "mlinam",
        "bug_id": "16",
        "T": "void testTwoPlayersMap() { final var twoPlayersMap = \"\"\" 233 ###### #A..@# #..B@# #....# #.a..# #..b.# ###### \"\"\"; final var gameMap = TestHelper.parseGameMap(twoPlayersMap); final var playerIds = gameMap.getPlayerIds(); final var expectedIds = new HashSet<Integer>(); expectedIds.add(0); expectedIds.add(1); }",
        "C": "public Set<Integer> getPlayerIds() { // TODO Set<Integer> playerId = new HashSet<Integer>(); for(int i = 0; i < 26; i++) if(players[i] != null) playerId.add(i); return playerId; //throw new NotImplementedException(); }",
        "label": "P"
    },
    "2941": {
        "dataset": "COMP 3021",
        "project": "mlinam",
        "bug_id": "17",
        "T": "void testMapWithoutPlayer() { final var invalidMap = \"\"\" 233 ### #.# ### \"\"\"; } // @Tag(TestKind.HIDDEN) // @Test // void testUnmatchedPlayersAndBoxes() { // final var invalidMap = \"\"\" // 233 // ###### // #A..@# // #...@# // #a.b@# // #.a.@# // #..a.# // ###### // \"\"\"; // assertThrowsExactly(IllegalArgumentException.class, () -> TestHelper.parseGameMap(invalidMap)); // }",
        "C": "public TerminalRenderingEngine(PrintStream outputSteam) { this.outputSteam = outputSteam; }",
        "label": "P"
    },
    "2942": {
        "dataset": "COMP 3021",
        "project": "mlinam",
        "bug_id": "18",
        "T": "void testManyPlayersMap() { final var manyPlayersMap = \"\"\" 233 ###### #A.P@@# #vCB@@# #.cpD@# #Ga.d@# #g.bV@# ###### \"\"\"; final var gameMap = TestHelper.parseGameMap(manyPlayersMap); final var playerIds = gameMap.getPlayerIds(); final var expectedIds = new HashSet<>(Arrays.asList( 0, 'P' - 'A', 'C' - 'A', 'B' - 'A', 'D' - 'A', 'G' - 'A', 'V' - 'A' )); }",
        "C": "public Set<Integer> getPlayerIds() { // TODO Set<Integer> playerId = new HashSet<Integer>(); for(int i = 0; i < 26; i++) if(players[i] != null) playerId.add(i); return playerId; //throw new NotImplementedException(); }",
        "label": "P"
    },
    "2943": {
        "dataset": "COMP 3021",
        "project": "mlinam",
        "bug_id": "19",
        "T": "void testHeightForNonRectangularMap() { final var gameMap = TestHelper.parseGameMap(nonRectangularMap); }",
        "C": "",
        "label": "P"
    },
    "2944": {
        "dataset": "COMP 3021",
        "project": "mlinam",
        "bug_id": "20",
        "T": "void testDuplicatedPlayers() { final var invalidMap = \"\"\" 233 ###### #A..@# #..A@# #....# #.a..# #..b.# ###### \"\"\"; }",
        "C": "",
        "label": "P"
    },
    "2945": {
        "dataset": "COMP 3021",
        "project": "mlinam",
        "bug_id": "21",
        "T": "void testParseMapWithoutUndoLimit() { final var invalidMap = String.join(\"\\n\", rectangularMap.lines().skip(1).toList()); }",
        "C": "",
        "label": "P"
    },
    "2946": {
        "dataset": "COMP 3021",
        "project": "mlinam",
        "bug_id": "22",
        "T": "void testInsufficientDestinations() { final var invalidMap = \"\"\" 233 ###### #A..@# #...@# #a...# #.a..# #..a.# ###### \"\"\"; }",
        "C": "",
        "label": "P"
    },
    "2947": {
        "dataset": "COMP 3021",
        "project": "mlinam",
        "bug_id": "23",
        "T": "void testSuperLargeMap() { try { new GameMap(Integer.MAX_VALUE, Integer.MAX_VALUE, Collections.emptySet(), 0); } catch (OutOfMemoryError e) { throw new RuntimeException(e); } }); }",
        "C": "public GameMap(int maxWidth, int maxHeight, Set<Position> destinations, int undoLimit) { // TODO this.maxWidth = maxWidth; this.maxHeight = maxHeight; this.undolimit = undoLimit; this.destinations = destinations; //throw new NotImplementedException(); } public GameMap(int maxWidth, int maxHeight, Set<Position> destinations, int undoLimit, ArrayList<Position>[] boxes, Position[] players, Set<Position> walls, Set<Position> nullplace) { this.maxWidth = maxWidth; this.maxHeight = maxHeight; this.undolimit = undoLimit; this.destinations = destinations; this.walls = walls; this.nullplace = nullplace; for(int i = 0; i < 26; i++) this.boxes[i] = boxes[i]; for(int i = 0; i < 26; i++) this.players[i] = players[i]; } /** * Parses the map from a string representation. * The first line is undo limit. * Starting from the second line, the game map is represented as follows, * <li># represents a {@link Wall}</li> * <li>@ represents a box destination.</li> * <li>Any upper-case letter represents a {@link Player}.</li> * <li> * Any lower-case letter represents a {@link Box} that is only movable by the player with the corresponding upper-case letter. * For instance, box \"a\" can only be moved by player \"A\" and not movable by player \"B\". * </li> * <li>. represents an {@link Empty} position in the map, meaning there is no player or box currently at this position.</li> * <p> * Notes: * <li> * There can be at most 26 players. * All implementations of classes in the hk.ust.comp3021.game package should support up to 26 players. * </li> * <li> * For simplicity, we assume the given map is bounded with a closed boundary. * There is no need to check this point. * </li> * <li> * Example maps can be found in \"src/main/resources\". * </li> * * @param mapText The string representation. * @return The parsed GameMap object. * @throws IllegalArgumentException if undo limit is negative but not -1. * @throws IllegalArgumentException if there are multiple same upper-case letters, i.e., one player can only exist at one position. * @throws IllegalArgumentException if there are no players in the map. * @throws IllegalArgumentException if the number of boxes is not equal to the number of box destinations. * @throws IllegalArgumentException if there are boxes whose {@link Box#getPlayerId()} public TerminalRenderingEngine(PrintStream outputSteam) { this.outputSteam = outputSteam; }",
        "label": "P"
    },
    "2948": {
        "dataset": "COMP 3021",
        "project": "mlinam",
        "bug_id": "24",
        "T": "void testInvalidUndoLimit() { final var invalidMap = \"\"\" -233 ###### #A..@# #...@# #a.b@# #.a.@# #..a.# ###### \"\"\"; }",
        "C": "",
        "label": "P"
    },
    "2949": {
        "dataset": "COMP 3021",
        "project": "mlinam",
        "bug_id": "25",
        "T": "void testEmptyMap() { final var invalidMap = \"\"; }",
        "C": "",
        "label": "P"
    },
    "2950": {
        "dataset": "COMP 3021",
        "project": "mlinam",
        "bug_id": "26",
        "T": "void testMove(String input, String name, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); } private InputStream fixValueStream(String content) { final var bytes = content.getBytes(StandardCharsets.UTF_8); return new ByteArrayInputStream(bytes); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine(); //System.out.println(inputLine); // TODO Action action = switch (inputLine.toUpperCase()) { case \"A\"-> new Move.Left(0); case \"S\"-> new Move.Down(0); case \"W\"-> new Move.Up(0); case \"D\"-> new Move.Right(0); case \"H\"-> new Move.Left(1); case \"J\"-> new Move.Down(1); case \"K\"-> new Move.Up(1); case \"L\"-> new Move.Right(1); case \"U\"-> new Undo(-1); case \"EXIT\" ->new Exit(-1); default -> new InvalidInput(-1,INVALID_INPUT_MESSAGE); }; //System.out.println(action.getClass()); return action; //throw new NotImplementedException(); }",
        "label": "P"
    },
    "2951": {
        "dataset": "COMP 3021",
        "project": "mlinam",
        "bug_id": "27",
        "T": "void testMove(String input, String name, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); } private InputStream fixValueStream(String content) { final var bytes = content.getBytes(StandardCharsets.UTF_8); return new ByteArrayInputStream(bytes); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine(); //System.out.println(inputLine); // TODO Action action = switch (inputLine.toUpperCase()) { case \"A\"-> new Move.Left(0); case \"S\"-> new Move.Down(0); case \"W\"-> new Move.Up(0); case \"D\"-> new Move.Right(0); case \"H\"-> new Move.Left(1); case \"J\"-> new Move.Down(1); case \"K\"-> new Move.Up(1); case \"L\"-> new Move.Right(1); case \"U\"-> new Undo(-1); case \"EXIT\" ->new Exit(-1); default -> new InvalidInput(-1,INVALID_INPUT_MESSAGE); }; //System.out.println(action.getClass()); return action; //throw new NotImplementedException(); }",
        "label": "P"
    },
    "2952": {
        "dataset": "COMP 3021",
        "project": "mlinam",
        "bug_id": "28",
        "T": "void testMove(String input, String name, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); } private InputStream fixValueStream(String content) { final var bytes = content.getBytes(StandardCharsets.UTF_8); return new ByteArrayInputStream(bytes); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine(); //System.out.println(inputLine); // TODO Action action = switch (inputLine.toUpperCase()) { case \"A\"-> new Move.Left(0); case \"S\"-> new Move.Down(0); case \"W\"-> new Move.Up(0); case \"D\"-> new Move.Right(0); case \"H\"-> new Move.Left(1); case \"J\"-> new Move.Down(1); case \"K\"-> new Move.Up(1); case \"L\"-> new Move.Right(1); case \"U\"-> new Undo(-1); case \"EXIT\" ->new Exit(-1); default -> new InvalidInput(-1,INVALID_INPUT_MESSAGE); }; //System.out.println(action.getClass()); return action; //throw new NotImplementedException(); }",
        "label": "P"
    },
    "2953": {
        "dataset": "COMP 3021",
        "project": "mlinam",
        "bug_id": "29",
        "T": "void testMove(String input, String name, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); } private InputStream fixValueStream(String content) { final var bytes = content.getBytes(StandardCharsets.UTF_8); return new ByteArrayInputStream(bytes); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine(); //System.out.println(inputLine); // TODO Action action = switch (inputLine.toUpperCase()) { case \"A\"-> new Move.Left(0); case \"S\"-> new Move.Down(0); case \"W\"-> new Move.Up(0); case \"D\"-> new Move.Right(0); case \"H\"-> new Move.Left(1); case \"J\"-> new Move.Down(1); case \"K\"-> new Move.Up(1); case \"L\"-> new Move.Right(1); case \"U\"-> new Undo(-1); case \"EXIT\" ->new Exit(-1); default -> new InvalidInput(-1,INVALID_INPUT_MESSAGE); }; //System.out.println(action.getClass()); return action; //throw new NotImplementedException(); }",
        "label": "P"
    },
    "2954": {
        "dataset": "COMP 3021",
        "project": "mlinam",
        "bug_id": "30",
        "T": "void testMove(String input, String name, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); } private InputStream fixValueStream(String content) { final var bytes = content.getBytes(StandardCharsets.UTF_8); return new ByteArrayInputStream(bytes); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine(); //System.out.println(inputLine); // TODO Action action = switch (inputLine.toUpperCase()) { case \"A\"-> new Move.Left(0); case \"S\"-> new Move.Down(0); case \"W\"-> new Move.Up(0); case \"D\"-> new Move.Right(0); case \"H\"-> new Move.Left(1); case \"J\"-> new Move.Down(1); case \"K\"-> new Move.Up(1); case \"L\"-> new Move.Right(1); case \"U\"-> new Undo(-1); case \"EXIT\" ->new Exit(-1); default -> new InvalidInput(-1,INVALID_INPUT_MESSAGE); }; //System.out.println(action.getClass()); return action; //throw new NotImplementedException(); }",
        "label": "P"
    },
    "2955": {
        "dataset": "COMP 3021",
        "project": "mlinam",
        "bug_id": "31",
        "T": "void testMove(String input, String name, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); } private InputStream fixValueStream(String content) { final var bytes = content.getBytes(StandardCharsets.UTF_8); return new ByteArrayInputStream(bytes); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine(); //System.out.println(inputLine); // TODO Action action = switch (inputLine.toUpperCase()) { case \"A\"-> new Move.Left(0); case \"S\"-> new Move.Down(0); case \"W\"-> new Move.Up(0); case \"D\"-> new Move.Right(0); case \"H\"-> new Move.Left(1); case \"J\"-> new Move.Down(1); case \"K\"-> new Move.Up(1); case \"L\"-> new Move.Right(1); case \"U\"-> new Undo(-1); case \"EXIT\" ->new Exit(-1); default -> new InvalidInput(-1,INVALID_INPUT_MESSAGE); }; //System.out.println(action.getClass()); return action; //throw new NotImplementedException(); }",
        "label": "P"
    },
    "2956": {
        "dataset": "COMP 3021",
        "project": "mlinam",
        "bug_id": "32",
        "T": "void testMove(String input, String name, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); } private InputStream fixValueStream(String content) { final var bytes = content.getBytes(StandardCharsets.UTF_8); return new ByteArrayInputStream(bytes); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine(); //System.out.println(inputLine); // TODO Action action = switch (inputLine.toUpperCase()) { case \"A\"-> new Move.Left(0); case \"S\"-> new Move.Down(0); case \"W\"-> new Move.Up(0); case \"D\"-> new Move.Right(0); case \"H\"-> new Move.Left(1); case \"J\"-> new Move.Down(1); case \"K\"-> new Move.Up(1); case \"L\"-> new Move.Right(1); case \"U\"-> new Undo(-1); case \"EXIT\" ->new Exit(-1); default -> new InvalidInput(-1,INVALID_INPUT_MESSAGE); }; //System.out.println(action.getClass()); return action; //throw new NotImplementedException(); }",
        "label": "P"
    },
    "2957": {
        "dataset": "COMP 3021",
        "project": "mlinam",
        "bug_id": "33",
        "T": "void testMove(String input, String name, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); } private InputStream fixValueStream(String content) { final var bytes = content.getBytes(StandardCharsets.UTF_8); return new ByteArrayInputStream(bytes); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine(); //System.out.println(inputLine); // TODO Action action = switch (inputLine.toUpperCase()) { case \"A\"-> new Move.Left(0); case \"S\"-> new Move.Down(0); case \"W\"-> new Move.Up(0); case \"D\"-> new Move.Right(0); case \"H\"-> new Move.Left(1); case \"J\"-> new Move.Down(1); case \"K\"-> new Move.Up(1); case \"L\"-> new Move.Right(1); case \"U\"-> new Undo(-1); case \"EXIT\" ->new Exit(-1); default -> new InvalidInput(-1,INVALID_INPUT_MESSAGE); }; //System.out.println(action.getClass()); return action; //throw new NotImplementedException(); }",
        "label": "P"
    },
    "2958": {
        "dataset": "COMP 3021",
        "project": "mlinam",
        "bug_id": "34",
        "T": "void testUndo(String input, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine(); //System.out.println(inputLine); // TODO Action action = switch (inputLine.toUpperCase()) { case \"A\"-> new Move.Left(0); case \"S\"-> new Move.Down(0); case \"W\"-> new Move.Up(0); case \"D\"-> new Move.Right(0); case \"H\"-> new Move.Left(1); case \"J\"-> new Move.Down(1); case \"K\"-> new Move.Up(1); case \"L\"-> new Move.Right(1); case \"U\"-> new Undo(-1); case \"EXIT\" ->new Exit(-1); default -> new InvalidInput(-1,INVALID_INPUT_MESSAGE); }; //System.out.println(action.getClass()); return action; //throw new NotImplementedException(); }",
        "label": "P"
    },
    "2959": {
        "dataset": "COMP 3021",
        "project": "mlinam",
        "bug_id": "35",
        "T": "void testInvalidInput() { final var inputStream = fixValueStream(\"blah blah\"); final var inputEngine = new TerminalInputEngine(inputStream); final var action = inputEngine.fetchAction(); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine(); //System.out.println(inputLine); // TODO Action action = switch (inputLine.toUpperCase()) { case \"A\"-> new Move.Left(0); case \"S\"-> new Move.Down(0); case \"W\"-> new Move.Up(0); case \"D\"-> new Move.Right(0); case \"H\"-> new Move.Left(1); case \"J\"-> new Move.Down(1); case \"K\"-> new Move.Up(1); case \"L\"-> new Move.Right(1); case \"U\"-> new Undo(-1); case \"EXIT\" ->new Exit(-1); default -> new InvalidInput(-1,INVALID_INPUT_MESSAGE); }; //System.out.println(action.getClass()); return action; //throw new NotImplementedException(); }",
        "label": "P"
    },
    "2960": {
        "dataset": "COMP 3021",
        "project": "mlinam",
        "bug_id": "36",
        "T": "void testUndoWhenThereIsNoMove() { final var gameState = new GameState(TestHelper.parseGameMap(\"\"\" 233 ###### #A.a@# #..a@# ###### \"\"\" )); gameState.undo(); } private Entity generateEntity(int key) { return switch (key % 4) { case 0 -> new Box(0); case 1 -> new Empty(); case 2 -> new Player(0); case 3 -> new Wall(); default -> throw new ShouldNotReachException(); }; }",
        "C": "public GameState(@NotNull GameMap map) { // TODO this.map = map; playerLocation = map.players.clone(); for(int i = 0; i < 26; i++) for(int j = 0; j < map.boxes[i].size();j++) boxLocation[i].add(map.boxes[i].get(j)); undoQuota = map.undolimit; //throw new NotImplementedException(); } public void undo() { // TODO //System.out.println(\"stacksize:\"+checkPoints.size()); if(undoQuota != -1) undoQuota--; if(checkPoints.isEmpty()){ for(int i = 0; i < 26; i++) { if(map.players[i] != null) playerLocation[i] = new Position(map.players[i].x(),map.players[i].y()); else playerLocation[i] = null; } for(int i = 0; i < 26; i++) { boxLocation[i].clear(); for (int j = 0; j < map.boxes[i].size(); j++) { boxLocation[i] = new ArrayList<Position>(); boxLocation[i] = (ArrayList<Position>) ((ArrayList) (map.boxes[i])).clone(); } } return; } checkPoints.pop(); if(checkPoints.isEmpty()){ for(int i = 0; i < 26; i++) { if(map.players[i] != null) playerLocation[i] = new Position(map.players[i].x(),map.players[i].y()); else playerLocation[i] = null; } for(int i = 0; i < 26; i++) { boxLocation[i].clear(); for (int j = 0; j < map.boxes[i].size(); j++){ boxLocation[i] = new ArrayList<Position>(); boxLocation[i] = (ArrayList<Position>) ((ArrayList) (map.boxes[i])).clone(); } } return; } CheckPoint cp = checkPoints.pop(); for(int i = 0; i < 26; i++) { if(cp.playerLocation[i] != null) playerLocation[i] = new Position(cp.playerLocation[i].x(),cp.playerLocation[i].y()); else playerLocation[i] = null; } for(int i = 0; i < 26; i++) { boxLocation[i].clear(); for (int j = 0; j < cp.boxLocation[i].size(); j++){ boxLocation[i] = new ArrayList<Position>(); boxLocation[i] = (ArrayList<Position>) ((ArrayList) (cp.boxLocation[i])).clone(); } } return; //throw new NotImplementedException(); } /** * Get the maximum width of the game map. * This should be the same as that in {@link GameMap} public TerminalRenderingEngine(PrintStream outputSteam) { this.outputSteam = outputSteam; } public Box(int playerId) { this.playerId = playerId; } public Player(int id) { this.id = id; } public ShouldNotReachException() { super(\"This branch should not be reached.\"); }",
        "label": "F"
    },
    "2961": {
        "dataset": "COMP 3021",
        "project": "mlinam",
        "bug_id": "37",
        "T": "void testGetUndoUnlimited() { final var gameState = new GameState(TestHelper.parseGameMap(\"\"\" -1 ###### #.Aa@# #..a@# ###### \"\"\" )); }",
        "C": "public GameState(@NotNull GameMap map) { // TODO this.map = map; playerLocation = map.players.clone(); for(int i = 0; i < 26; i++) for(int j = 0; j < map.boxes[i].size();j++) boxLocation[i].add(map.boxes[i].get(j)); undoQuota = map.undolimit; //throw new NotImplementedException(); }",
        "label": "P"
    },
    "2962": {
        "dataset": "COMP 3021",
        "project": "mlinam",
        "bug_id": "38",
        "T": "void testMapCopying() { final var maxWidth = 2333; final var maxHeight = 2333; final var random = new Random(); final var randomEntities = Stream.generate(() -> Position.of(random.nextInt(maxWidth), random.nextInt(maxHeight))) .distinct() .limit(100) .collect(Collectors.toMap(Function.identity(), it -> generateEntity(it.x()))); final var firstPos = randomEntities.keySet().stream().findFirst(); final var gameMap = new GameMap(maxWidth, maxHeight, Collections.singleton(firstPos.get()), 233); randomEntities.forEach(gameMap::putEntity); final var gameState = new GameState(gameMap); final var randomPosition = randomEntities.keySet().stream().findAny(); gameMap.putEntity(randomPosition.get(), new Empty()); randomEntities.forEach((p, e) -> assertEquals(e, gameState.getEntity(p))); }",
        "C": "public static @NotNull Position of(int x, int y) { return new Position(x, y); } public GameMap(int maxWidth, int maxHeight, Set<Position> destinations, int undoLimit) { // TODO this.maxWidth = maxWidth; this.maxHeight = maxHeight; this.undolimit = undoLimit; this.destinations = destinations; //throw new NotImplementedException(); } public GameMap(int maxWidth, int maxHeight, Set<Position> destinations, int undoLimit, ArrayList<Position>[] boxes, Position[] players, Set<Position> walls, Set<Position> nullplace) { this.maxWidth = maxWidth; this.maxHeight = maxHeight; this.undolimit = undoLimit; this.destinations = destinations; this.walls = walls; this.nullplace = nullplace; for(int i = 0; i < 26; i++) this.boxes[i] = boxes[i]; for(int i = 0; i < 26; i++) this.players[i] = players[i]; } /** * Parses the map from a string representation. * The first line is undo limit. * Starting from the second line, the game map is represented as follows, * <li># represents a {@link Wall}</li> * <li>@ represents a box destination.</li> * <li>Any upper-case letter represents a {@link Player}.</li> * <li> * Any lower-case letter represents a {@link Box} that is only movable by the player with the corresponding upper-case letter. * For instance, box \"a\" can only be moved by player \"A\" and not movable by player \"B\". * </li> * <li>. represents an {@link Empty} position in the map, meaning there is no player or box currently at this position.</li> * <p> * Notes: * <li> * There can be at most 26 players. * All implementations of classes in the hk.ust.comp3021.game package should support up to 26 players. * </li> * <li> * For simplicity, we assume the given map is bounded with a closed boundary. * There is no need to check this point. * </li> * <li> * Example maps can be found in \"src/main/resources\". * </li> * * @param mapText The string representation. * @return The parsed GameMap object. * @throws IllegalArgumentException if undo limit is negative but not -1. * @throws IllegalArgumentException if there are multiple same upper-case letters, i.e., one player can only exist at one position. * @throws IllegalArgumentException if there are no players in the map. * @throws IllegalArgumentException if the number of boxes is not equal to the number of box destinations. * @throws IllegalArgumentException if there are boxes whose {@link Box#getPlayerId()} public GameState(@NotNull GameMap map) { // TODO this.map = map; playerLocation = map.players.clone(); for(int i = 0; i < 26; i++) for(int j = 0; j < map.boxes[i].size();j++) boxLocation[i].add(map.boxes[i].get(j)); undoQuota = map.undolimit; //throw new NotImplementedException(); } public void putEntity(Position position, Entity entity) { // TODO //String type = String.valueOf(entity.getClass()); if(entity.getClass().equals(Box.class)) boxes[((Box) entity).getPlayerId()].add(position); if(entity.getClass().equals(Player.class)) players[((Player) entity).getId()] = position; if(entity.getClass().equals(Wall.class)) walls.add(position); //throw new NotImplementedException(); } public @Nullable Entity getEntity(@NotNull Position position) { // TODO if(map.nullplace.contains(position)) return null; if(position.x() < 0 || position.x() >= getMapMaxWidth()) return null; if(position.y() < 0 || position.y() >= getMapMaxHeight()) return null; if(map.walls.contains(position)) return new Wall(); for(int i = 0; i < 26; i++) if(boxLocation[i].contains(position)) return new Box(i); for(int i = 0; i < 26; i++) if(playerLocation[i] != null && playerLocation[i].equals(position)) return new Player(i); return new Empty(); //throw new NotImplementedException(); } /** * Get all box destination positions as a set in the game map. * This should be the same as that in {@link GameMap}",
        "label": "F"
    },
    "2963": {
        "dataset": "COMP 3021",
        "project": "mlinam",
        "bug_id": "39",
        "T": "void testUndoWhenThereIsMoveButNoCheckpoint() { final var gameState = new GameState(TestHelper.parseGameMap(\"\"\" 233 ###### #A.a@# #..a@# ###### \"\"\" )); gameState.move(Position.of(1, 1), Position.of(2, 1)); gameState.undo(); }",
        "C": "public GameState(@NotNull GameMap map) { // TODO this.map = map; playerLocation = map.players.clone(); for(int i = 0; i < 26; i++) for(int j = 0; j < map.boxes[i].size();j++) boxLocation[i].add(map.boxes[i].get(j)); undoQuota = map.undolimit; //throw new NotImplementedException(); } public void move(Position from, Position to) { // TODO Entity entity = getEntity(from); if(entity.getClass() == Box.class){ boxLocation[((Box) entity).getPlayerId()].remove(from); boxLocation[((Box) entity).getPlayerId()].add(to); } if(entity.getClass() == Player.class) { playerLocation[((Player) entity).getId()] = to; } //throw new NotImplementedException(); } /** * Record a checkpoint of the game state, including: * <li>All current positions of entities in the game map.</li> * <li>Current undo quota</li> * <p> * Checkpoint is used in {@link GameState#undo()} public static @NotNull Position of(int x, int y) { return new Position(x, y); } public void undo() { // TODO //System.out.println(\"stacksize:\"+checkPoints.size()); if(undoQuota != -1) undoQuota--; if(checkPoints.isEmpty()){ for(int i = 0; i < 26; i++) { if(map.players[i] != null) playerLocation[i] = new Position(map.players[i].x(),map.players[i].y()); else playerLocation[i] = null; } for(int i = 0; i < 26; i++) { boxLocation[i].clear(); for (int j = 0; j < map.boxes[i].size(); j++) { boxLocation[i] = new ArrayList<Position>(); boxLocation[i] = (ArrayList<Position>) ((ArrayList) (map.boxes[i])).clone(); } } return; } checkPoints.pop(); if(checkPoints.isEmpty()){ for(int i = 0; i < 26; i++) { if(map.players[i] != null) playerLocation[i] = new Position(map.players[i].x(),map.players[i].y()); else playerLocation[i] = null; } for(int i = 0; i < 26; i++) { boxLocation[i].clear(); for (int j = 0; j < map.boxes[i].size(); j++){ boxLocation[i] = new ArrayList<Position>(); boxLocation[i] = (ArrayList<Position>) ((ArrayList) (map.boxes[i])).clone(); } } return; } CheckPoint cp = checkPoints.pop(); for(int i = 0; i < 26; i++) { if(cp.playerLocation[i] != null) playerLocation[i] = new Position(cp.playerLocation[i].x(),cp.playerLocation[i].y()); else playerLocation[i] = null; } for(int i = 0; i < 26; i++) { boxLocation[i].clear(); for (int j = 0; j < cp.boxLocation[i].size(); j++){ boxLocation[i] = new ArrayList<Position>(); boxLocation[i] = (ArrayList<Position>) ((ArrayList) (cp.boxLocation[i])).clone(); } } return; //throw new NotImplementedException(); } /** * Get the maximum width of the game map. * This should be the same as that in {@link GameMap}",
        "label": "F"
    },
    "2964": {
        "dataset": "COMP 3021",
        "project": "mlinam",
        "bug_id": "40",
        "T": "void testGameExit() { final var gameState = mock(GameState.class); final var inputEngine = mock(TerminalInputEngine.class); final var renderingEngine = mock(TerminalRenderingEngine.class); when(gameState.isWin()).thenReturn(false, false, false); when(inputEngine.fetchAction()) .thenReturn(new InvalidInput(0, \"\"), new InvalidInput(0, \"\"), new Exit(0)); final var game = new TerminalSokobanGame(gameState, inputEngine, renderingEngine); game.run(); verify(renderingEngine, atLeastOnce()).message(any()); }",
        "C": "public InvalidInput(int initiator, @NotNull String message) { super(initiator); this.message = message; } public Exit(int initiator) { super(initiator); } public TerminalSokobanGame(GameState gameState, TerminalInputEngine inputEngine, TerminalRenderingEngine renderingEngine) { super(gameState); this.inputEngine = inputEngine; this.renderingEngine = renderingEngine; // TODO // Check the number of players int numOfPlayer = gameState.getAllPlayerPositions().size(); if(numOfPlayer > 2) throw new IllegalArgumentException(); //throw new NotImplementedException(); } public void run() { // TODO // Set<Integer> playerIds = state.map.getPlayerIds(); // for(int i : playerIds){ // if(i != 0 && i != 1){ // renderingEngine.message(INVALID_INPUT_MESSAGE); // return; // } // } if(state.getUndoQuota().isPresent() && state.getUndoQuota().get() < 0 && state.getUndoQuota().get() != -1) { renderingEngine.message(INVALID_INPUT_MESSAGE); return; } renderingEngine.message(GAME_READY_MESSAGE); Action action; ActionResult result; while(true) { if(state.getUndoQuota().isPresent()) renderingEngine.message(UNDO_QUOTA_TEMPLATE.formatted(state.getUndoQuota().get().toString())); else renderingEngine.message(UNDO_QUOTA_UNLIMITED); renderingEngine.render(state); action = inputEngine.fetchAction(); if(action instanceof Exit){ renderingEngine.message(GAME_EXIT_MESSAGE); break; } result = processAction(action); //System.out.println(action.getClass()); if(result instanceof ActionResult.Failed) renderingEngine.message((((ActionResult.Failed)result).getReason())); if(state.isWin()) { renderingEngine.message(WIN_MESSAGE); break; } } renderingEngine.render(state); //throw new NotImplementedException(); }",
        "label": "P"
    },
    "2965": {
        "dataset": "COMP 3021",
        "project": "mlinam",
        "bug_id": "41",
        "T": "void testGameWin() { final var gameState = mock(GameState.class); final var inputEngine = mock(TerminalInputEngine.class); final var renderingEngine = mock(TerminalRenderingEngine.class); when(gameState.isWin()).thenReturn(false, false, false, true); when(inputEngine.fetchAction()) .thenReturn(new InvalidInput(0, \"\")); final var game = new TerminalSokobanGame(gameState, inputEngine, renderingEngine); game.run(); verify(gameState, atLeastOnce()).isWin(); verify(renderingEngine, atLeastOnce()).message(any()); }",
        "C": "public InvalidInput(int initiator, @NotNull String message) { super(initiator); this.message = message; } public TerminalSokobanGame(GameState gameState, TerminalInputEngine inputEngine, TerminalRenderingEngine renderingEngine) { super(gameState); this.inputEngine = inputEngine; this.renderingEngine = renderingEngine; // TODO // Check the number of players int numOfPlayer = gameState.getAllPlayerPositions().size(); if(numOfPlayer > 2) throw new IllegalArgumentException(); //throw new NotImplementedException(); } public void run() { // TODO // Set<Integer> playerIds = state.map.getPlayerIds(); // for(int i : playerIds){ // if(i != 0 && i != 1){ // renderingEngine.message(INVALID_INPUT_MESSAGE); // return; // } // } if(state.getUndoQuota().isPresent() && state.getUndoQuota().get() < 0 && state.getUndoQuota().get() != -1) { renderingEngine.message(INVALID_INPUT_MESSAGE); return; } renderingEngine.message(GAME_READY_MESSAGE); Action action; ActionResult result; while(true) { if(state.getUndoQuota().isPresent()) renderingEngine.message(UNDO_QUOTA_TEMPLATE.formatted(state.getUndoQuota().get().toString())); else renderingEngine.message(UNDO_QUOTA_UNLIMITED); renderingEngine.render(state); action = inputEngine.fetchAction(); if(action instanceof Exit){ renderingEngine.message(GAME_EXIT_MESSAGE); break; } result = processAction(action); //System.out.println(action.getClass()); if(result instanceof ActionResult.Failed) renderingEngine.message((((ActionResult.Failed)result).getReason())); if(state.isWin()) { renderingEngine.message(WIN_MESSAGE); break; } } renderingEngine.render(state); //throw new NotImplementedException(); }",
        "label": "P"
    },
    "2966": {
        "dataset": "COMP 3021",
        "project": "mlinam",
        "bug_id": "42",
        "T": "void testMoreThanTwoPlayers() { final var gameState = mock(GameState.class); final var inputEngine = mock(TerminalInputEngine.class); final var renderingEngine = mock(TerminalRenderingEngine.class); when(gameState.getAllPlayerPositions()).thenReturn(new HashSet<>(Arrays.asList(Position.of(1, 1), Position.of(1, 2), Position.of(1, 3)))); }",
        "C": "public static @NotNull Position of(int x, int y) { return new Position(x, y); }",
        "label": "P"
    },
    "2967": {
        "dataset": "COMP 3021",
        "project": "yhchoiaa",
        "bug_id": "0",
        "T": "void moveUp() { Position.of(233, 232), new Move.Up(-1).nextPosition(pos) ); }",
        "C": "public static @NotNull Position of(int x, int y) { return new Position(x, y); } public Up(int initiator) { super(initiator); }",
        "label": "P"
    },
    "2968": {
        "dataset": "COMP 3021",
        "project": "yhchoiaa",
        "bug_id": "1",
        "T": "void moveDown() { Position.of(233, 234), new Move.Down(-1).nextPosition(pos) ); }",
        "C": "public static @NotNull Position of(int x, int y) { return new Position(x, y); } public Down(int initiator) { super(initiator); }",
        "label": "P"
    },
    "2969": {
        "dataset": "COMP 3021",
        "project": "yhchoiaa",
        "bug_id": "2",
        "T": "void moveRight() { Position.of(234, 233), new Move.Right(-1).nextPosition(pos) ); }",
        "C": "public static @NotNull Position of(int x, int y) { return new Position(x, y); } public Right(int initiator) { super(initiator); }",
        "label": "P"
    },
    "2970": {
        "dataset": "COMP 3021",
        "project": "yhchoiaa",
        "bug_id": "3",
        "T": "void testExceedingUndoQuota() { final var gameState = mock(GameState.class); when(gameState.getPlayerPositionById(anyInt())).thenReturn(Position.of(0, 0)); when(gameState.getUndoQuota()).thenReturn(Optional.of(0)); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Undo(0)); }",
        "C": "public Undo(int initiator) { super(initiator); }",
        "label": "F"
    },
    "2971": {
        "dataset": "COMP 3021",
        "project": "yhchoiaa",
        "bug_id": "4",
        "T": "void testExit() { final var gameState = mock(GameState.class); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Exit(0)); }",
        "C": "public Exit(int initiator) { super(initiator); }",
        "label": "P"
    },
    "2972": {
        "dataset": "COMP 3021",
        "project": "yhchoiaa",
        "bug_id": "5",
        "T": "void testUndoUnlimited() { final var gameState = mock(GameState.class); when(gameState.getPlayerPositionById(anyInt())).thenReturn(Position.of(0, 0)); when(gameState.getUndoQuota()).thenReturn(Optional.empty()); final var game = new SokobanGameForTesting(gameState); for (int i = 0; i < 10000; i++) { final var result = game.feedActionForProcessing(new Undo(0)); } verify(gameState, times(10000)).undo(); }",
        "C": "public Undo(int initiator) { super(initiator); }",
        "label": "P"
    },
    "2973": {
        "dataset": "COMP 3021",
        "project": "yhchoiaa",
        "bug_id": "6",
        "T": "void testPushOtherPlayerBox() { String mapText = \"\"\" 233 ###### #AB.@# #b.a.# #@...# ###### \"\"\"; final var testMap = TestHelper.parseGameMap(mapText); final var gameState = spy(new GameState(testMap)); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Move.Down(0)); verify(gameState, never()).move(any(), any()); }",
        "C": "public GameState(@NotNull GameMap map) { this.map = map; checkpoint(); //set first checkpoint to initial form of map } public Down(int initiator) { super(initiator); }",
        "label": "F"
    },
    "2974": {
        "dataset": "COMP 3021",
        "project": "yhchoiaa",
        "bug_id": "7",
        "T": "void testMoveNonExistingPlayer() { String mapText = \"\"\" 233 ###### #A..@# #a...# ##...# ###### \"\"\"; final var testMap = TestHelper.parseGameMap(mapText); final var gameState = spy(new GameState(testMap)); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Move.Down(23)); }",
        "C": "public GameState(@NotNull GameMap map) { this.map = map; checkpoint(); //set first checkpoint to initial form of map } public Down(int initiator) { super(initiator); }",
        "label": "F"
    },
    "2975": {
        "dataset": "COMP 3021",
        "project": "yhchoiaa",
        "bug_id": "8",
        "T": "void testCheckpointWhenNeed() { final var gameState = spy(new GameState(TestHelper.parseGameMap(\"\"\" 233 ###### #.Aa@# #..a@# ###### \"\"\" ))); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Move.Right(0)); verify(gameState, times(1)).checkpoint(); }",
        "C": "public GameState(@NotNull GameMap map) { this.map = map; checkpoint(); //set first checkpoint to initial form of map } public Right(int initiator) { super(initiator); }",
        "label": "P"
    },
    "2976": {
        "dataset": "COMP 3021",
        "project": "yhchoiaa",
        "bug_id": "9",
        "T": "void testPushBoxAgainstWall() { String mapText = \"\"\" 233 ###### #A..@# #a...# ##...# ###### \"\"\"; final var testMap = TestHelper.parseGameMap(mapText); final var gameState = spy(new GameState(testMap)); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Move.Down(0)); verify(gameState, never()).move(any(), any()); }",
        "C": "public GameState(@NotNull GameMap map) { this.map = map; checkpoint(); //set first checkpoint to initial form of map } public Down(int initiator) { super(initiator); }",
        "label": "P"
    },
    "2977": {
        "dataset": "COMP 3021",
        "project": "yhchoiaa",
        "bug_id": "10",
        "T": "void testCheckpointWhenNotNeed() { final var gameState = spy(new GameState(TestHelper.parseGameMap(\"\"\" 233 ###### #A.a@# #..a@# ###### \"\"\" ))); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Move.Right(0)); verify(gameState, never()).checkpoint(); } private static class SokobanGameForTesting extends AbstractSokobanGame { protected SokobanGameForTesting(GameState gameState) { super(gameState); } @Override public void run() { } public ActionResult feedActionForProcessing(Action action) { return processAction(action); } }",
        "C": "public GameState(@NotNull GameMap map) { this.map = map; checkpoint(); //set first checkpoint to initial form of map } public Right(int initiator) { super(initiator); } public void run() { renderingEngine.render(state); renderingEngine.message(\"Undo quota: \"+(state.getUndoQuota().isEmpty()?0:state.getUndoQuota().get())); if(shouldStop()){ //System.exit(0); return; } Action action = inputEngine.fetchAction(); processAction(action); run(); } protected ActionResult processAction(@NotNull Action action) { ActionResult actionResult = new ActionResult.Success(action); if(action == null){ return new ActionResult.Failed(action, \"action is null\"); } if(action instanceof Move){ Move move = (Move) action; //Current position int playerID = action.getInitiator(); Position currentPosition = state.getPlayerPositionById(playerID); Entity playerEntity = state.getEntity(currentPosition); //Next position Position newPosition = move.nextPosition(currentPosition); Entity nextPositionEntity = state.getEntity(newPosition); //Move the player if next position is empty //Try to move the box if exists if(nextPositionEntity instanceof Box){ Box currentBox = (Box) nextPositionEntity; //Check if the new position of the box is empty Position newBoxPosition = move.nextPosition(newPosition); if(state.getEntity(newBoxPosition) instanceof Empty){ //Move the box state.move(newPosition, newBoxPosition); //state.map.putEntity(newBoxPosition, currentBox); //state.map.putEntity(newPosition, new Empty()); } } if(state.getEntity(newPosition) instanceof Empty){ state.move(currentPosition, newPosition); //state.map.putEntity(newPosition, playerEntity); //state.map.putEntity(currentPosition, new Empty()); }else{ return new ActionResult.Failed(action, \"hitted a wall\"); } state.checkpoint(); }else if(action instanceof Undo){ state.undo(); }else if(action instanceof InvalidInput){ InvalidInput invalidInput = (InvalidInput) action; System.out.println(\"Invalid input! Reason: \"+invalidInput.getMessage()); }else if(action instanceof Exit){ exitCalled = true; System.out.println(\"exit called\"); } return actionResult; }",
        "label": "F"
    },
    "2978": {
        "dataset": "COMP 3021",
        "project": "yhchoiaa",
        "bug_id": "11",
        "T": "void testHitAnotherPlayer() { String mapText = \"\"\" 233 ###### #A..@# #B...# #ab.@# ###### \"\"\"; final var testMap = TestHelper.parseGameMap(mapText); final var gameState = spy(new GameState(testMap)); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Move.Down(0)); verify(gameState, never()).move(any(), any()); }",
        "C": "public GameState(@NotNull GameMap map) { this.map = map; checkpoint(); //set first checkpoint to initial form of map } public Down(int initiator) { super(initiator); }",
        "label": "P"
    },
    "2979": {
        "dataset": "COMP 3021",
        "project": "yhchoiaa",
        "bug_id": "12",
        "T": "void testUndoWithinQuota() { final var gameState = mock(GameState.class); when(gameState.getPlayerPositionById(anyInt())).thenReturn(Position.of(0, 0)); when(gameState.getUndoQuota()).thenReturn(Optional.of(1)); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Undo(0)); verify(gameState, times(1)).undo(); }",
        "C": "public Undo(int initiator) { super(initiator); }",
        "label": "P"
    },
    "2980": {
        "dataset": "COMP 3021",
        "project": "yhchoiaa",
        "bug_id": "13",
        "T": "void testInvalidInput() { final var game = new SokobanGameForTesting(mock(GameState.class)); final var message = String.valueOf(new Random().nextLong()); final var action = new InvalidInput(-1, message); final var result = game.feedActionForProcessing(action); }",
        "C": "public InvalidInput(int initiator, @NotNull String message) { super(initiator); this.message = message; }",
        "label": "F"
    },
    "2981": {
        "dataset": "COMP 3021",
        "project": "yhchoiaa",
        "bug_id": "14",
        "T": "void testUndoLimitParsing() { final var gameMap = TestHelper.parseGameMap(rectangularMap); }",
        "C": "",
        "label": "P"
    },
    "2982": {
        "dataset": "COMP 3021",
        "project": "yhchoiaa",
        "bug_id": "15",
        "T": "void testWidthForNonRectangularMap() { final var gameMap = TestHelper.parseGameMap(nonRectangularMap); }",
        "C": "",
        "label": "P"
    },
    "2983": {
        "dataset": "COMP 3021",
        "project": "yhchoiaa",
        "bug_id": "16",
        "T": "void testTwoPlayersMap() { final var twoPlayersMap = \"\"\" 233 ###### #A..@# #..B@# #....# #.a..# #..b.# ###### \"\"\"; final var gameMap = TestHelper.parseGameMap(twoPlayersMap); final var playerIds = gameMap.getPlayerIds(); final var expectedIds = new HashSet<Integer>(); expectedIds.add(0); expectedIds.add(1); }",
        "C": "public @Nullable Set<Integer> getPlayerIds() { Set<Integer> result = new HashSet<Integer>(); for(int i = 0 ; i < getMaxWidth() ; i++){ for(int j = 0 ; j < getMaxHeight() ; j++){ Entity entity = this.getEntity(Position.of(i, j)); if(entity instanceof Player){ Player player = ((Player) entity); if(result.contains(player.getId())){ //repeated player! fail! return null; } result.add(player.getId()); } } } return result; }",
        "label": "P"
    },
    "2984": {
        "dataset": "COMP 3021",
        "project": "yhchoiaa",
        "bug_id": "17",
        "T": "void testMapWithoutPlayer() { final var invalidMap = \"\"\" 233 ### #.# ### \"\"\"; } // @Tag(TestKind.HIDDEN) // @Test // void testUnmatchedPlayersAndBoxes() { // final var invalidMap = \"\"\" // 233 // ###### // #A..@# // #...@# // #a.b@# // #.a.@# // #..a.# // ###### // \"\"\"; // assertThrowsExactly(IllegalArgumentException.class, () -> TestHelper.parseGameMap(invalidMap)); // }",
        "C": "",
        "label": "P"
    },
    "2985": {
        "dataset": "COMP 3021",
        "project": "yhchoiaa",
        "bug_id": "18",
        "T": "void testManyPlayersMap() { final var manyPlayersMap = \"\"\" 233 ###### #A.P@@# #vCB@@# #.cpD@# #Ga.d@# #g.bV@# ###### \"\"\"; final var gameMap = TestHelper.parseGameMap(manyPlayersMap); final var playerIds = gameMap.getPlayerIds(); final var expectedIds = new HashSet<>(Arrays.asList( 0, 'P' - 'A', 'C' - 'A', 'B' - 'A', 'D' - 'A', 'G' - 'A', 'V' - 'A' )); }",
        "C": "public @Nullable Set<Integer> getPlayerIds() { Set<Integer> result = new HashSet<Integer>(); for(int i = 0 ; i < getMaxWidth() ; i++){ for(int j = 0 ; j < getMaxHeight() ; j++){ Entity entity = this.getEntity(Position.of(i, j)); if(entity instanceof Player){ Player player = ((Player) entity); if(result.contains(player.getId())){ //repeated player! fail! return null; } result.add(player.getId()); } } } return result; }",
        "label": "P"
    },
    "2986": {
        "dataset": "COMP 3021",
        "project": "yhchoiaa",
        "bug_id": "19",
        "T": "void testHeightForNonRectangularMap() { final var gameMap = TestHelper.parseGameMap(nonRectangularMap); }",
        "C": "",
        "label": "P"
    },
    "2987": {
        "dataset": "COMP 3021",
        "project": "yhchoiaa",
        "bug_id": "20",
        "T": "void testDuplicatedPlayers() { final var invalidMap = \"\"\" 233 ###### #A..@# #..A@# #....# #.a..# #..b.# ###### \"\"\"; }",
        "C": "",
        "label": "F"
    },
    "2988": {
        "dataset": "COMP 3021",
        "project": "yhchoiaa",
        "bug_id": "21",
        "T": "void testParseMapWithoutUndoLimit() { final var invalidMap = String.join(\"\\n\", rectangularMap.lines().skip(1).toList()); }",
        "C": "",
        "label": "P"
    },
    "2989": {
        "dataset": "COMP 3021",
        "project": "yhchoiaa",
        "bug_id": "22",
        "T": "void testInsufficientDestinations() { final var invalidMap = \"\"\" 233 ###### #A..@# #...@# #a...# #.a..# #..a.# ###### \"\"\"; }",
        "C": "",
        "label": "P"
    },
    "2990": {
        "dataset": "COMP 3021",
        "project": "yhchoiaa",
        "bug_id": "23",
        "T": "void testSuperLargeMap() { try { new GameMap(Integer.MAX_VALUE, Integer.MAX_VALUE, Collections.emptySet(), 0); } catch (OutOfMemoryError e) { throw new RuntimeException(e); } }); }",
        "C": "public GameMap(int maxWidth, int maxHeight, Set<Position> destinations, int undoLimit) { this.maxWidth = maxWidth; this.maxHeight = maxHeight; this.destinations = destinations; this.undoLimit = undoLimit; //Generating map data mapData = new ArrayList<>(); for(int i = 0 ; i < maxWidth ; i++){ ArrayList arrayList = new ArrayList(); for(int j = 0 ; j < maxHeight ; j++){ arrayList.add(null); } mapData.add(arrayList); } }",
        "label": "F"
    },
    "2991": {
        "dataset": "COMP 3021",
        "project": "yhchoiaa",
        "bug_id": "24",
        "T": "void testInvalidUndoLimit() { final var invalidMap = \"\"\" -233 ###### #A..@# #...@# #a.b@# #.a.@# #..a.# ###### \"\"\"; }",
        "C": "",
        "label": "P"
    },
    "2992": {
        "dataset": "COMP 3021",
        "project": "yhchoiaa",
        "bug_id": "25",
        "T": "void testEmptyMap() { final var invalidMap = \"\"; }",
        "C": "",
        "label": "P"
    },
    "2993": {
        "dataset": "COMP 3021",
        "project": "yhchoiaa",
        "bug_id": "26",
        "T": "void testMove(String input, String name, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); } private InputStream fixValueStream(String content) { final var bytes = content.getBytes(StandardCharsets.UTF_8); return new ByteArrayInputStream(bytes); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine(); switch(inputLine.toUpperCase(Locale.ROOT)){ //Player 1 case \"W\": return new Move.Up(0); case \"A\": return new Move.Left(0); case \"S\": return new Move.Down(0); case \"D\": return new Move.Right(0); //Player 2 case \"I\": return new Move.Up(1); case \"J\": return new Move.Left(1); case \"K\": return new Move.Down(1); case \"L\": return new Move.Right(1); case \"EXIT\": return new Exit(0); case \"U\": return new Undo(0); default: return new InvalidInput(0, \".\"); } }",
        "label": "P"
    },
    "2994": {
        "dataset": "COMP 3021",
        "project": "yhchoiaa",
        "bug_id": "27",
        "T": "void testMove(String input, String name, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); } private InputStream fixValueStream(String content) { final var bytes = content.getBytes(StandardCharsets.UTF_8); return new ByteArrayInputStream(bytes); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine(); switch(inputLine.toUpperCase(Locale.ROOT)){ //Player 1 case \"W\": return new Move.Up(0); case \"A\": return new Move.Left(0); case \"S\": return new Move.Down(0); case \"D\": return new Move.Right(0); //Player 2 case \"I\": return new Move.Up(1); case \"J\": return new Move.Left(1); case \"K\": return new Move.Down(1); case \"L\": return new Move.Right(1); case \"EXIT\": return new Exit(0); case \"U\": return new Undo(0); default: return new InvalidInput(0, \".\"); } }",
        "label": "P"
    },
    "2995": {
        "dataset": "COMP 3021",
        "project": "yhchoiaa",
        "bug_id": "28",
        "T": "void testMove(String input, String name, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); } private InputStream fixValueStream(String content) { final var bytes = content.getBytes(StandardCharsets.UTF_8); return new ByteArrayInputStream(bytes); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine(); switch(inputLine.toUpperCase(Locale.ROOT)){ //Player 1 case \"W\": return new Move.Up(0); case \"A\": return new Move.Left(0); case \"S\": return new Move.Down(0); case \"D\": return new Move.Right(0); //Player 2 case \"I\": return new Move.Up(1); case \"J\": return new Move.Left(1); case \"K\": return new Move.Down(1); case \"L\": return new Move.Right(1); case \"EXIT\": return new Exit(0); case \"U\": return new Undo(0); default: return new InvalidInput(0, \".\"); } }",
        "label": "P"
    },
    "2996": {
        "dataset": "COMP 3021",
        "project": "yhchoiaa",
        "bug_id": "29",
        "T": "void testMove(String input, String name, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); } private InputStream fixValueStream(String content) { final var bytes = content.getBytes(StandardCharsets.UTF_8); return new ByteArrayInputStream(bytes); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine(); switch(inputLine.toUpperCase(Locale.ROOT)){ //Player 1 case \"W\": return new Move.Up(0); case \"A\": return new Move.Left(0); case \"S\": return new Move.Down(0); case \"D\": return new Move.Right(0); //Player 2 case \"I\": return new Move.Up(1); case \"J\": return new Move.Left(1); case \"K\": return new Move.Down(1); case \"L\": return new Move.Right(1); case \"EXIT\": return new Exit(0); case \"U\": return new Undo(0); default: return new InvalidInput(0, \".\"); } }",
        "label": "P"
    },
    "2997": {
        "dataset": "COMP 3021",
        "project": "yhchoiaa",
        "bug_id": "30",
        "T": "void testMove(String input, String name, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); } private InputStream fixValueStream(String content) { final var bytes = content.getBytes(StandardCharsets.UTF_8); return new ByteArrayInputStream(bytes); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine(); switch(inputLine.toUpperCase(Locale.ROOT)){ //Player 1 case \"W\": return new Move.Up(0); case \"A\": return new Move.Left(0); case \"S\": return new Move.Down(0); case \"D\": return new Move.Right(0); //Player 2 case \"I\": return new Move.Up(1); case \"J\": return new Move.Left(1); case \"K\": return new Move.Down(1); case \"L\": return new Move.Right(1); case \"EXIT\": return new Exit(0); case \"U\": return new Undo(0); default: return new InvalidInput(0, \".\"); } }",
        "label": "F"
    },
    "2998": {
        "dataset": "COMP 3021",
        "project": "yhchoiaa",
        "bug_id": "31",
        "T": "void testMove(String input, String name, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); } private InputStream fixValueStream(String content) { final var bytes = content.getBytes(StandardCharsets.UTF_8); return new ByteArrayInputStream(bytes); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine(); switch(inputLine.toUpperCase(Locale.ROOT)){ //Player 1 case \"W\": return new Move.Up(0); case \"A\": return new Move.Left(0); case \"S\": return new Move.Down(0); case \"D\": return new Move.Right(0); //Player 2 case \"I\": return new Move.Up(1); case \"J\": return new Move.Left(1); case \"K\": return new Move.Down(1); case \"L\": return new Move.Right(1); case \"EXIT\": return new Exit(0); case \"U\": return new Undo(0); default: return new InvalidInput(0, \".\"); } }",
        "label": "F"
    },
    "2999": {
        "dataset": "COMP 3021",
        "project": "yhchoiaa",
        "bug_id": "32",
        "T": "void testMove(String input, String name, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); } private InputStream fixValueStream(String content) { final var bytes = content.getBytes(StandardCharsets.UTF_8); return new ByteArrayInputStream(bytes); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine(); switch(inputLine.toUpperCase(Locale.ROOT)){ //Player 1 case \"W\": return new Move.Up(0); case \"A\": return new Move.Left(0); case \"S\": return new Move.Down(0); case \"D\": return new Move.Right(0); //Player 2 case \"I\": return new Move.Up(1); case \"J\": return new Move.Left(1); case \"K\": return new Move.Down(1); case \"L\": return new Move.Right(1); case \"EXIT\": return new Exit(0); case \"U\": return new Undo(0); default: return new InvalidInput(0, \".\"); } }",
        "label": "F"
    },
    "3000": {
        "dataset": "COMP 3021",
        "project": "yhchoiaa",
        "bug_id": "33",
        "T": "void testMove(String input, String name, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); } private InputStream fixValueStream(String content) { final var bytes = content.getBytes(StandardCharsets.UTF_8); return new ByteArrayInputStream(bytes); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine(); switch(inputLine.toUpperCase(Locale.ROOT)){ //Player 1 case \"W\": return new Move.Up(0); case \"A\": return new Move.Left(0); case \"S\": return new Move.Down(0); case \"D\": return new Move.Right(0); //Player 2 case \"I\": return new Move.Up(1); case \"J\": return new Move.Left(1); case \"K\": return new Move.Down(1); case \"L\": return new Move.Right(1); case \"EXIT\": return new Exit(0); case \"U\": return new Undo(0); default: return new InvalidInput(0, \".\"); } }",
        "label": "P"
    },
    "3001": {
        "dataset": "COMP 3021",
        "project": "yhchoiaa",
        "bug_id": "34",
        "T": "void testUndo(String input, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine(); switch(inputLine.toUpperCase(Locale.ROOT)){ //Player 1 case \"W\": return new Move.Up(0); case \"A\": return new Move.Left(0); case \"S\": return new Move.Down(0); case \"D\": return new Move.Right(0); //Player 2 case \"I\": return new Move.Up(1); case \"J\": return new Move.Left(1); case \"K\": return new Move.Down(1); case \"L\": return new Move.Right(1); case \"EXIT\": return new Exit(0); case \"U\": return new Undo(0); default: return new InvalidInput(0, \".\"); } }",
        "label": "P"
    },
    "3002": {
        "dataset": "COMP 3021",
        "project": "yhchoiaa",
        "bug_id": "35",
        "T": "void testInvalidInput() { final var inputStream = fixValueStream(\"blah blah\"); final var inputEngine = new TerminalInputEngine(inputStream); final var action = inputEngine.fetchAction(); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine(); switch(inputLine.toUpperCase(Locale.ROOT)){ //Player 1 case \"W\": return new Move.Up(0); case \"A\": return new Move.Left(0); case \"S\": return new Move.Down(0); case \"D\": return new Move.Right(0); //Player 2 case \"I\": return new Move.Up(1); case \"J\": return new Move.Left(1); case \"K\": return new Move.Down(1); case \"L\": return new Move.Right(1); case \"EXIT\": return new Exit(0); case \"U\": return new Undo(0); default: return new InvalidInput(0, \".\"); } }",
        "label": "P"
    },
    "3003": {
        "dataset": "COMP 3021",
        "project": "yhchoiaa",
        "bug_id": "36",
        "T": "void testUndoWhenThereIsNoMove() { final var gameState = new GameState(TestHelper.parseGameMap(\"\"\" 233 ###### #A.a@# #..a@# ###### \"\"\" )); gameState.undo(); } private Entity generateEntity(int key) { return switch (key % 4) { case 0 -> new Box(0); case 1 -> new Empty(); case 2 -> new Player(0); case 3 -> new Wall(); default -> throw new ShouldNotReachException(); }; }",
        "C": "public GameState(@NotNull GameMap map) { this.map = map; checkpoint(); //set first checkpoint to initial form of map } public void undo() { if(getUndoQuota().isEmpty()) { System.err.println(\"getUndoQuota().isEmpty()\"); return; } int quota = getUndoQuota().get(); if(quota > 0) { if (checkPoints.size() <= 1) { //Do nothing System.out.println(\"do nothing because not enough check point\"); } else { map = checkPoints.get(checkPoints.size() - 2); //set current map to latest recorded map checkPoints.remove(checkPoints.size() - 1); //remove latest recorded map map.undoLimit = quota-1; } }else{ System.out.println(\"You have run out of your undo quota.\"); } } /** * Get the maximum width of the game map. * This should be the same as that in {@link GameMap} public Box(int playerId) { this.playerId = playerId; } public Player(int id) { this.id = id; } public ShouldNotReachException() { super(\"This branch should not be reached.\"); }",
        "label": "P"
    },
    "3004": {
        "dataset": "COMP 3021",
        "project": "yhchoiaa",
        "bug_id": "37",
        "T": "void testGetUndoUnlimited() { final var gameState = new GameState(TestHelper.parseGameMap(\"\"\" -1 ###### #.Aa@# #..a@# ###### \"\"\" )); }",
        "C": "public GameState(@NotNull GameMap map) { this.map = map; checkpoint(); //set first checkpoint to initial form of map }",
        "label": "F"
    },
    "3005": {
        "dataset": "COMP 3021",
        "project": "yhchoiaa",
        "bug_id": "38",
        "T": "void testMapCopying() { final var maxWidth = 2333; final var maxHeight = 2333; final var random = new Random(); final var randomEntities = Stream.generate(() -> Position.of(random.nextInt(maxWidth), random.nextInt(maxHeight))) .distinct() .limit(100) .collect(Collectors.toMap(Function.identity(), it -> generateEntity(it.x()))); final var firstPos = randomEntities.keySet().stream().findFirst(); final var gameMap = new GameMap(maxWidth, maxHeight, Collections.singleton(firstPos.get()), 233); randomEntities.forEach(gameMap::putEntity); final var gameState = new GameState(gameMap); final var randomPosition = randomEntities.keySet().stream().findAny(); gameMap.putEntity(randomPosition.get(), new Empty()); randomEntities.forEach((p, e) -> assertEquals(e, gameState.getEntity(p))); }",
        "C": "public static @NotNull Position of(int x, int y) { return new Position(x, y); } public GameMap(int maxWidth, int maxHeight, Set<Position> destinations, int undoLimit) { this.maxWidth = maxWidth; this.maxHeight = maxHeight; this.destinations = destinations; this.undoLimit = undoLimit; //Generating map data mapData = new ArrayList<>(); for(int i = 0 ; i < maxWidth ; i++){ ArrayList arrayList = new ArrayList(); for(int j = 0 ; j < maxHeight ; j++){ arrayList.add(null); } mapData.add(arrayList); } } public GameState(@NotNull GameMap map) { this.map = map; checkpoint(); //set first checkpoint to initial form of map } public void putEntity(Position position, Entity entity) { mapData.get(position.x()).set(position.y(), entity); } public @Nullable Entity getEntity(@NotNull Position position) { return map.getEntity(position); } /** * Get all box destination positions as a set in the game map. * This should be the same as that in {@link GameMap}",
        "label": "F"
    },
    "3006": {
        "dataset": "COMP 3021",
        "project": "yhchoiaa",
        "bug_id": "39",
        "T": "void testUndoWhenThereIsMoveButNoCheckpoint() { final var gameState = new GameState(TestHelper.parseGameMap(\"\"\" 233 ###### #A.a@# #..a@# ###### \"\"\" )); gameState.move(Position.of(1, 1), Position.of(2, 1)); gameState.undo(); }",
        "C": "public GameState(@NotNull GameMap map) { this.map = map; checkpoint(); //set first checkpoint to initial form of map } public void move(Position from, Position to) { Entity entity = map.getEntity(from); map.putEntity(to, entity); map.putEntity(from, new Empty()); } /** * Record a checkpoint of the game state, including: * <li>All current positions of entities in the game map.</li> * <li>Current undo quota</li> * <p> * Checkpoint is used in {@link GameState#undo()} public static @NotNull Position of(int x, int y) { return new Position(x, y); } public void undo() { if(getUndoQuota().isEmpty()) { System.err.println(\"getUndoQuota().isEmpty()\"); return; } int quota = getUndoQuota().get(); if(quota > 0) { if (checkPoints.size() <= 1) { //Do nothing System.out.println(\"do nothing because not enough check point\"); } else { map = checkPoints.get(checkPoints.size() - 2); //set current map to latest recorded map checkPoints.remove(checkPoints.size() - 1); //remove latest recorded map map.undoLimit = quota-1; } }else{ System.out.println(\"You have run out of your undo quota.\"); } } /** * Get the maximum width of the game map. * This should be the same as that in {@link GameMap}",
        "label": "P"
    },
    "3007": {
        "dataset": "COMP 3021",
        "project": "yhchoiaa",
        "bug_id": "40",
        "T": "void testGameExit() { final var gameState = mock(GameState.class); final var inputEngine = mock(TerminalInputEngine.class); final var renderingEngine = mock(TerminalRenderingEngine.class); when(gameState.isWin()).thenReturn(false, false, false); when(inputEngine.fetchAction()) .thenReturn(new InvalidInput(0, \"\"), new InvalidInput(0, \"\"), new Exit(0)); final var game = new TerminalSokobanGame(gameState, inputEngine, renderingEngine); game.run(); verify(renderingEngine, atLeastOnce()).message(any()); }",
        "C": "public InvalidInput(int initiator, @NotNull String message) { super(initiator); this.message = message; } public Exit(int initiator) { super(initiator); } public TerminalSokobanGame(GameState gameState, TerminalInputEngine inputEngine, TerminalRenderingEngine renderingEngine) { super(gameState); this.inputEngine = inputEngine; this.renderingEngine = renderingEngine; } public void run() { renderingEngine.render(state); renderingEngine.message(\"Undo quota: \"+(state.getUndoQuota().isEmpty()?0:state.getUndoQuota().get())); if(shouldStop()){ //System.exit(0); return; } Action action = inputEngine.fetchAction(); processAction(action); run(); }",
        "label": "P"
    },
    "3008": {
        "dataset": "COMP 3021",
        "project": "yhchoiaa",
        "bug_id": "41",
        "T": "void testGameWin() { final var gameState = mock(GameState.class); final var inputEngine = mock(TerminalInputEngine.class); final var renderingEngine = mock(TerminalRenderingEngine.class); when(gameState.isWin()).thenReturn(false, false, false, true); when(inputEngine.fetchAction()) .thenReturn(new InvalidInput(0, \"\")); final var game = new TerminalSokobanGame(gameState, inputEngine, renderingEngine); game.run(); verify(gameState, atLeastOnce()).isWin(); verify(renderingEngine, atLeastOnce()).message(any()); }",
        "C": "public InvalidInput(int initiator, @NotNull String message) { super(initiator); this.message = message; } public TerminalSokobanGame(GameState gameState, TerminalInputEngine inputEngine, TerminalRenderingEngine renderingEngine) { super(gameState); this.inputEngine = inputEngine; this.renderingEngine = renderingEngine; } public void run() { renderingEngine.render(state); renderingEngine.message(\"Undo quota: \"+(state.getUndoQuota().isEmpty()?0:state.getUndoQuota().get())); if(shouldStop()){ //System.exit(0); return; } Action action = inputEngine.fetchAction(); processAction(action); run(); }",
        "label": "P"
    },
    "3009": {
        "dataset": "COMP 3021",
        "project": "yhchoiaa",
        "bug_id": "42",
        "T": "void testMoreThanTwoPlayers() { final var gameState = mock(GameState.class); final var inputEngine = mock(TerminalInputEngine.class); final var renderingEngine = mock(TerminalRenderingEngine.class); when(gameState.getAllPlayerPositions()).thenReturn(new HashSet<>(Arrays.asList(Position.of(1, 1), Position.of(1, 2), Position.of(1, 3)))); }",
        "C": "public static @NotNull Position of(int x, int y) { return new Position(x, y); }",
        "label": "F"
    },
    "3010": {
        "dataset": "COMP 3021",
        "project": "zrenah",
        "bug_id": "0",
        "T": "void moveUp() { Position.of(233, 232), new Move.Up(-1).nextPosition(pos) ); }",
        "C": "public static @NotNull Position of(int x, int y) { return new Position(x, y); } public Up(int initiator) { super(initiator); }",
        "label": "P"
    },
    "3011": {
        "dataset": "COMP 3021",
        "project": "zrenah",
        "bug_id": "1",
        "T": "void moveDown() { Position.of(233, 234), new Move.Down(-1).nextPosition(pos) ); }",
        "C": "public static @NotNull Position of(int x, int y) { return new Position(x, y); } public Down(int initiator) { super(initiator); }",
        "label": "P"
    },
    "3012": {
        "dataset": "COMP 3021",
        "project": "zrenah",
        "bug_id": "2",
        "T": "void moveRight() { Position.of(234, 233), new Move.Right(-1).nextPosition(pos) ); }",
        "C": "public static @NotNull Position of(int x, int y) { return new Position(x, y); } public Right(int initiator) { super(initiator); }",
        "label": "P"
    },
    "3013": {
        "dataset": "COMP 3021",
        "project": "zrenah",
        "bug_id": "3",
        "T": "void testExceedingUndoQuota() { final var gameState = mock(GameState.class); when(gameState.getPlayerPositionById(anyInt())).thenReturn(Position.of(0, 0)); when(gameState.getUndoQuota()).thenReturn(Optional.of(0)); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Undo(0)); }",
        "C": "public Undo(int initiator) { super(initiator); }",
        "label": "F"
    },
    "3014": {
        "dataset": "COMP 3021",
        "project": "zrenah",
        "bug_id": "4",
        "T": "void testExit() { final var gameState = mock(GameState.class); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Exit(0)); }",
        "C": "public Exit(int initiator) { super(initiator); }",
        "label": "P"
    },
    "3015": {
        "dataset": "COMP 3021",
        "project": "zrenah",
        "bug_id": "5",
        "T": "void testUndoUnlimited() { final var gameState = mock(GameState.class); when(gameState.getPlayerPositionById(anyInt())).thenReturn(Position.of(0, 0)); when(gameState.getUndoQuota()).thenReturn(Optional.empty()); final var game = new SokobanGameForTesting(gameState); for (int i = 0; i < 10000; i++) { final var result = game.feedActionForProcessing(new Undo(0)); } verify(gameState, times(10000)).undo(); }",
        "C": "public TerminalRenderingEngine(PrintStream outputSteam) { this.outputSteam = outputSteam; } public Undo(int initiator) { super(initiator); }",
        "label": "F"
    },
    "3016": {
        "dataset": "COMP 3021",
        "project": "zrenah",
        "bug_id": "6",
        "T": "void testPushOtherPlayerBox() { String mapText = \"\"\" 233 ###### #AB.@# #b.a.# #@...# ###### \"\"\"; final var testMap = TestHelper.parseGameMap(mapText); final var gameState = spy(new GameState(testMap)); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Move.Down(0)); verify(gameState, never()).move(any(), any()); }",
        "C": "public GameState(@NotNull GameMap map) { gameMap = new GameMap(map); currMap = new GameMap(map); checkpoints = new Stack<GameMap>(); checkpoints.push(new GameMap(map)); if (gameMap.getUndoLimit().isPresent()) { undoQuota = gameMap.getUndoLimit().get(); } else { undoQuota = -1; } } public Down(int initiator) { super(initiator); }",
        "label": "P"
    },
    "3017": {
        "dataset": "COMP 3021",
        "project": "zrenah",
        "bug_id": "7",
        "T": "void testMoveNonExistingPlayer() { String mapText = \"\"\" 233 ###### #A..@# #a...# ##...# ###### \"\"\"; final var testMap = TestHelper.parseGameMap(mapText); final var gameState = spy(new GameState(testMap)); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Move.Down(23)); }",
        "C": "public GameState(@NotNull GameMap map) { gameMap = new GameMap(map); currMap = new GameMap(map); checkpoints = new Stack<GameMap>(); checkpoints.push(new GameMap(map)); if (gameMap.getUndoLimit().isPresent()) { undoQuota = gameMap.getUndoLimit().get(); } else { undoQuota = -1; } } public Down(int initiator) { super(initiator); }",
        "label": "P"
    },
    "3018": {
        "dataset": "COMP 3021",
        "project": "zrenah",
        "bug_id": "8",
        "T": "void testCheckpointWhenNeed() { final var gameState = spy(new GameState(TestHelper.parseGameMap(\"\"\" 233 ###### #.Aa@# #..a@# ###### \"\"\" ))); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Move.Right(0)); verify(gameState, times(1)).checkpoint(); }",
        "C": "public GameState(@NotNull GameMap map) { gameMap = new GameMap(map); currMap = new GameMap(map); checkpoints = new Stack<GameMap>(); checkpoints.push(new GameMap(map)); if (gameMap.getUndoLimit().isPresent()) { undoQuota = gameMap.getUndoLimit().get(); } else { undoQuota = -1; } } public Right(int initiator) { super(initiator); }",
        "label": "P"
    },
    "3019": {
        "dataset": "COMP 3021",
        "project": "zrenah",
        "bug_id": "9",
        "T": "void testPushBoxAgainstWall() { String mapText = \"\"\" 233 ###### #A..@# #a...# ##...# ###### \"\"\"; final var testMap = TestHelper.parseGameMap(mapText); final var gameState = spy(new GameState(testMap)); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Move.Down(0)); verify(gameState, never()).move(any(), any()); }",
        "C": "public GameState(@NotNull GameMap map) { gameMap = new GameMap(map); currMap = new GameMap(map); checkpoints = new Stack<GameMap>(); checkpoints.push(new GameMap(map)); if (gameMap.getUndoLimit().isPresent()) { undoQuota = gameMap.getUndoLimit().get(); } else { undoQuota = -1; } } public Down(int initiator) { super(initiator); }",
        "label": "P"
    },
    "3020": {
        "dataset": "COMP 3021",
        "project": "zrenah",
        "bug_id": "10",
        "T": "void testCheckpointWhenNotNeed() { final var gameState = spy(new GameState(TestHelper.parseGameMap(\"\"\" 233 ###### #A.a@# #..a@# ###### \"\"\" ))); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Move.Right(0)); verify(gameState, never()).checkpoint(); } private static class SokobanGameForTesting extends AbstractSokobanGame { protected SokobanGameForTesting(GameState gameState) { super(gameState); } @Override public void run() { } public ActionResult feedActionForProcessing(Action action) { return processAction(action); } }",
        "C": "public GameState(@NotNull GameMap map) { gameMap = new GameMap(map); currMap = new GameMap(map); checkpoints = new Stack<GameMap>(); checkpoints.push(new GameMap(map)); if (gameMap.getUndoLimit().isPresent()) { undoQuota = gameMap.getUndoLimit().get(); } else { undoQuota = -1; } } public Right(int initiator) { super(initiator); } public void run() { renderingEngine.message(GAME_READY_MESSAGE); while (!shouldStop()) { renderingEngine.render(state); renderingEngine.message(String.format(UNDO_QUOTA_TEMPLATE, state.getUndoQuota().isPresent() ? state.getUndoQuota().get() : UNDO_QUOTA_UNLIMITED)); renderingEngine.message(\">>>\"); Action a = inputEngine.fetchAction(); ActionResult r = processAction(a); switch (r) { case ActionResult.Success ignored -> { } case ActionResult.Failed f -> renderingEngine.message(f.getReason()); } } renderingEngine.render(state); renderingEngine.message(GAME_EXIT_MESSAGE); if (state.isWin()) renderingEngine.message(WIN_MESSAGE); } protected ActionResult processAction(@NotNull Action action) { ActionResult res = null; switch (action) { case Exit e -> { userExit = true; res = new ActionResult.Success(e); } case InvalidInput i -> { res = new ActionResult.Failed(i, i.getMessage()); } case Move m -> { res = state.processMove(m); } case Undo u -> { res = state.processUndo(u); } } return res; }",
        "label": "P"
    },
    "3021": {
        "dataset": "COMP 3021",
        "project": "zrenah",
        "bug_id": "11",
        "T": "void testHitAnotherPlayer() { String mapText = \"\"\" 233 ###### #A..@# #B...# #ab.@# ###### \"\"\"; final var testMap = TestHelper.parseGameMap(mapText); final var gameState = spy(new GameState(testMap)); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Move.Down(0)); verify(gameState, never()).move(any(), any()); }",
        "C": "public GameState(@NotNull GameMap map) { gameMap = new GameMap(map); currMap = new GameMap(map); checkpoints = new Stack<GameMap>(); checkpoints.push(new GameMap(map)); if (gameMap.getUndoLimit().isPresent()) { undoQuota = gameMap.getUndoLimit().get(); } else { undoQuota = -1; } } public Down(int initiator) { super(initiator); }",
        "label": "P"
    },
    "3022": {
        "dataset": "COMP 3021",
        "project": "zrenah",
        "bug_id": "12",
        "T": "void testUndoWithinQuota() { final var gameState = mock(GameState.class); when(gameState.getPlayerPositionById(anyInt())).thenReturn(Position.of(0, 0)); when(gameState.getUndoQuota()).thenReturn(Optional.of(1)); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Undo(0)); verify(gameState, times(1)).undo(); }",
        "C": "public Undo(int initiator) { super(initiator); }",
        "label": "F"
    },
    "3023": {
        "dataset": "COMP 3021",
        "project": "zrenah",
        "bug_id": "13",
        "T": "void testInvalidInput() { final var game = new SokobanGameForTesting(mock(GameState.class)); final var message = String.valueOf(new Random().nextLong()); final var action = new InvalidInput(-1, message); final var result = game.feedActionForProcessing(action); }",
        "C": "public InvalidInput(int initiator, @NotNull String message) { super(initiator); this.message = message; }",
        "label": "P"
    },
    "3024": {
        "dataset": "COMP 3021",
        "project": "zrenah",
        "bug_id": "14",
        "T": "void testUndoLimitParsing() { final var gameMap = TestHelper.parseGameMap(rectangularMap); }",
        "C": "",
        "label": "P"
    },
    "3025": {
        "dataset": "COMP 3021",
        "project": "zrenah",
        "bug_id": "15",
        "T": "void testWidthForNonRectangularMap() { final var gameMap = TestHelper.parseGameMap(nonRectangularMap); }",
        "C": "",
        "label": "P"
    },
    "3026": {
        "dataset": "COMP 3021",
        "project": "zrenah",
        "bug_id": "16",
        "T": "void testTwoPlayersMap() { final var twoPlayersMap = \"\"\" 233 ###### #A..@# #..B@# #....# #.a..# #..b.# ###### \"\"\"; final var gameMap = TestHelper.parseGameMap(twoPlayersMap); final var playerIds = gameMap.getPlayerIds(); final var expectedIds = new HashSet<Integer>(); expectedIds.add(0); expectedIds.add(1); }",
        "C": "public Set<Integer> getPlayerIds() { HashSet<Integer> ids = new HashSet<Integer>(); for (int i = 0; i < maxHeight; i++) { for (int j = 0; j < maxWidth; j++) { if (map[i][j] >= 'A' && map[i][j] <= 'Z') { ids.add(map[i][j] - 'A'); } } } return ids; }",
        "label": "P"
    },
    "3027": {
        "dataset": "COMP 3021",
        "project": "zrenah",
        "bug_id": "17",
        "T": "void testMapWithoutPlayer() { final var invalidMap = \"\"\" 233 ### #.# ### \"\"\"; } // @Tag(TestKind.HIDDEN) // @Test // void testUnmatchedPlayersAndBoxes() { // final var invalidMap = \"\"\" // 233 // ###### // #A..@# // #...@# // #a.b@# // #.a.@# // #..a.# // ###### // \"\"\"; // assertThrowsExactly(IllegalArgumentException.class, () -> TestHelper.parseGameMap(invalidMap)); // }",
        "C": "public TerminalRenderingEngine(PrintStream outputSteam) { this.outputSteam = outputSteam; }",
        "label": "P"
    },
    "3028": {
        "dataset": "COMP 3021",
        "project": "zrenah",
        "bug_id": "18",
        "T": "void testManyPlayersMap() { final var manyPlayersMap = \"\"\" 233 ###### #A.P@@# #vCB@@# #.cpD@# #Ga.d@# #g.bV@# ###### \"\"\"; final var gameMap = TestHelper.parseGameMap(manyPlayersMap); final var playerIds = gameMap.getPlayerIds(); final var expectedIds = new HashSet<>(Arrays.asList( 0, 'P' - 'A', 'C' - 'A', 'B' - 'A', 'D' - 'A', 'G' - 'A', 'V' - 'A' )); }",
        "C": "public Set<Integer> getPlayerIds() { HashSet<Integer> ids = new HashSet<Integer>(); for (int i = 0; i < maxHeight; i++) { for (int j = 0; j < maxWidth; j++) { if (map[i][j] >= 'A' && map[i][j] <= 'Z') { ids.add(map[i][j] - 'A'); } } } return ids; }",
        "label": "P"
    },
    "3029": {
        "dataset": "COMP 3021",
        "project": "zrenah",
        "bug_id": "19",
        "T": "void testHeightForNonRectangularMap() { final var gameMap = TestHelper.parseGameMap(nonRectangularMap); }",
        "C": "",
        "label": "P"
    },
    "3030": {
        "dataset": "COMP 3021",
        "project": "zrenah",
        "bug_id": "20",
        "T": "void testDuplicatedPlayers() { final var invalidMap = \"\"\" 233 ###### #A..@# #..A@# #....# #.a..# #..b.# ###### \"\"\"; }",
        "C": "",
        "label": "P"
    },
    "3031": {
        "dataset": "COMP 3021",
        "project": "zrenah",
        "bug_id": "21",
        "T": "void testParseMapWithoutUndoLimit() { final var invalidMap = String.join(\"\\n\", rectangularMap.lines().skip(1).toList()); }",
        "C": "",
        "label": "P"
    },
    "3032": {
        "dataset": "COMP 3021",
        "project": "zrenah",
        "bug_id": "22",
        "T": "void testInsufficientDestinations() { final var invalidMap = \"\"\" 233 ###### #A..@# #...@# #a...# #.a..# #..a.# ###### \"\"\"; }",
        "C": "",
        "label": "P"
    },
    "3033": {
        "dataset": "COMP 3021",
        "project": "zrenah",
        "bug_id": "23",
        "T": "void testSuperLargeMap() { try { new GameMap(Integer.MAX_VALUE, Integer.MAX_VALUE, Collections.emptySet(), 0); } catch (OutOfMemoryError e) { throw new RuntimeException(e); } }); }",
        "C": "public GameMap(int maxWidth, int maxHeight, Set<Position> destinations, int undoLimit) { this.maxWidth = maxWidth; this.maxHeight = maxHeight; this.undoLimit = undoLimit; this.destinations = new HashSet<Position>(); if (destinations != null) { this.destinations.addAll(destinations); } map = new char[maxHeight][maxWidth]; } public TerminalRenderingEngine(PrintStream outputSteam) { this.outputSteam = outputSteam; }",
        "label": "F"
    },
    "3034": {
        "dataset": "COMP 3021",
        "project": "zrenah",
        "bug_id": "24",
        "T": "void testInvalidUndoLimit() { final var invalidMap = \"\"\" -233 ###### #A..@# #...@# #a.b@# #.a.@# #..a.# ###### \"\"\"; }",
        "C": "",
        "label": "P"
    },
    "3035": {
        "dataset": "COMP 3021",
        "project": "zrenah",
        "bug_id": "25",
        "T": "void testEmptyMap() { final var invalidMap = \"\"; }",
        "C": "",
        "label": "P"
    },
    "3036": {
        "dataset": "COMP 3021",
        "project": "zrenah",
        "bug_id": "26",
        "T": "void testMove(String input, String name, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); } private InputStream fixValueStream(String content) { final var bytes = content.getBytes(StandardCharsets.UTF_8); return new ByteArrayInputStream(bytes); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine().toLowerCase(); if (inputLine.length() == 1) { char c = inputLine.charAt(0); if (c == 'a') return new Move.Left(0); else if (c == 's') return new Move.Down(0); else if (c == 'w') return new Move.Up(0); else if (c == 'd') return new Move.Right(0); else if (c == 'h') return new Move.Left(1); else if (c == 'j') return new Move.Down(1); else if (c == 'k') return new Move.Up(1); else if (c == 'l') return new Move.Right(1); else if (c == 'u') return new Undo(-1); else return new InvalidInput(-1, INVALID_INPUT_MESSAGE); } else if (inputLine.equals(EXIT_COMMAND_TEXT)) return new Exit(-1); else return new InvalidInput(-1, INVALID_INPUT_MESSAGE); }",
        "label": "P"
    },
    "3037": {
        "dataset": "COMP 3021",
        "project": "zrenah",
        "bug_id": "27",
        "T": "void testMove(String input, String name, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); } private InputStream fixValueStream(String content) { final var bytes = content.getBytes(StandardCharsets.UTF_8); return new ByteArrayInputStream(bytes); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine().toLowerCase(); if (inputLine.length() == 1) { char c = inputLine.charAt(0); if (c == 'a') return new Move.Left(0); else if (c == 's') return new Move.Down(0); else if (c == 'w') return new Move.Up(0); else if (c == 'd') return new Move.Right(0); else if (c == 'h') return new Move.Left(1); else if (c == 'j') return new Move.Down(1); else if (c == 'k') return new Move.Up(1); else if (c == 'l') return new Move.Right(1); else if (c == 'u') return new Undo(-1); else return new InvalidInput(-1, INVALID_INPUT_MESSAGE); } else if (inputLine.equals(EXIT_COMMAND_TEXT)) return new Exit(-1); else return new InvalidInput(-1, INVALID_INPUT_MESSAGE); }",
        "label": "P"
    },
    "3038": {
        "dataset": "COMP 3021",
        "project": "zrenah",
        "bug_id": "28",
        "T": "void testMove(String input, String name, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); } private InputStream fixValueStream(String content) { final var bytes = content.getBytes(StandardCharsets.UTF_8); return new ByteArrayInputStream(bytes); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine().toLowerCase(); if (inputLine.length() == 1) { char c = inputLine.charAt(0); if (c == 'a') return new Move.Left(0); else if (c == 's') return new Move.Down(0); else if (c == 'w') return new Move.Up(0); else if (c == 'd') return new Move.Right(0); else if (c == 'h') return new Move.Left(1); else if (c == 'j') return new Move.Down(1); else if (c == 'k') return new Move.Up(1); else if (c == 'l') return new Move.Right(1); else if (c == 'u') return new Undo(-1); else return new InvalidInput(-1, INVALID_INPUT_MESSAGE); } else if (inputLine.equals(EXIT_COMMAND_TEXT)) return new Exit(-1); else return new InvalidInput(-1, INVALID_INPUT_MESSAGE); }",
        "label": "P"
    },
    "3039": {
        "dataset": "COMP 3021",
        "project": "zrenah",
        "bug_id": "29",
        "T": "void testMove(String input, String name, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); } private InputStream fixValueStream(String content) { final var bytes = content.getBytes(StandardCharsets.UTF_8); return new ByteArrayInputStream(bytes); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine().toLowerCase(); if (inputLine.length() == 1) { char c = inputLine.charAt(0); if (c == 'a') return new Move.Left(0); else if (c == 's') return new Move.Down(0); else if (c == 'w') return new Move.Up(0); else if (c == 'd') return new Move.Right(0); else if (c == 'h') return new Move.Left(1); else if (c == 'j') return new Move.Down(1); else if (c == 'k') return new Move.Up(1); else if (c == 'l') return new Move.Right(1); else if (c == 'u') return new Undo(-1); else return new InvalidInput(-1, INVALID_INPUT_MESSAGE); } else if (inputLine.equals(EXIT_COMMAND_TEXT)) return new Exit(-1); else return new InvalidInput(-1, INVALID_INPUT_MESSAGE); }",
        "label": "P"
    },
    "3040": {
        "dataset": "COMP 3021",
        "project": "zrenah",
        "bug_id": "30",
        "T": "void testMove(String input, String name, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); } private InputStream fixValueStream(String content) { final var bytes = content.getBytes(StandardCharsets.UTF_8); return new ByteArrayInputStream(bytes); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine().toLowerCase(); if (inputLine.length() == 1) { char c = inputLine.charAt(0); if (c == 'a') return new Move.Left(0); else if (c == 's') return new Move.Down(0); else if (c == 'w') return new Move.Up(0); else if (c == 'd') return new Move.Right(0); else if (c == 'h') return new Move.Left(1); else if (c == 'j') return new Move.Down(1); else if (c == 'k') return new Move.Up(1); else if (c == 'l') return new Move.Right(1); else if (c == 'u') return new Undo(-1); else return new InvalidInput(-1, INVALID_INPUT_MESSAGE); } else if (inputLine.equals(EXIT_COMMAND_TEXT)) return new Exit(-1); else return new InvalidInput(-1, INVALID_INPUT_MESSAGE); }",
        "label": "P"
    },
    "3041": {
        "dataset": "COMP 3021",
        "project": "zrenah",
        "bug_id": "31",
        "T": "void testMove(String input, String name, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); } private InputStream fixValueStream(String content) { final var bytes = content.getBytes(StandardCharsets.UTF_8); return new ByteArrayInputStream(bytes); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine().toLowerCase(); if (inputLine.length() == 1) { char c = inputLine.charAt(0); if (c == 'a') return new Move.Left(0); else if (c == 's') return new Move.Down(0); else if (c == 'w') return new Move.Up(0); else if (c == 'd') return new Move.Right(0); else if (c == 'h') return new Move.Left(1); else if (c == 'j') return new Move.Down(1); else if (c == 'k') return new Move.Up(1); else if (c == 'l') return new Move.Right(1); else if (c == 'u') return new Undo(-1); else return new InvalidInput(-1, INVALID_INPUT_MESSAGE); } else if (inputLine.equals(EXIT_COMMAND_TEXT)) return new Exit(-1); else return new InvalidInput(-1, INVALID_INPUT_MESSAGE); }",
        "label": "P"
    },
    "3042": {
        "dataset": "COMP 3021",
        "project": "zrenah",
        "bug_id": "32",
        "T": "void testMove(String input, String name, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); } private InputStream fixValueStream(String content) { final var bytes = content.getBytes(StandardCharsets.UTF_8); return new ByteArrayInputStream(bytes); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine().toLowerCase(); if (inputLine.length() == 1) { char c = inputLine.charAt(0); if (c == 'a') return new Move.Left(0); else if (c == 's') return new Move.Down(0); else if (c == 'w') return new Move.Up(0); else if (c == 'd') return new Move.Right(0); else if (c == 'h') return new Move.Left(1); else if (c == 'j') return new Move.Down(1); else if (c == 'k') return new Move.Up(1); else if (c == 'l') return new Move.Right(1); else if (c == 'u') return new Undo(-1); else return new InvalidInput(-1, INVALID_INPUT_MESSAGE); } else if (inputLine.equals(EXIT_COMMAND_TEXT)) return new Exit(-1); else return new InvalidInput(-1, INVALID_INPUT_MESSAGE); }",
        "label": "P"
    },
    "3043": {
        "dataset": "COMP 3021",
        "project": "zrenah",
        "bug_id": "33",
        "T": "void testMove(String input, String name, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); } private InputStream fixValueStream(String content) { final var bytes = content.getBytes(StandardCharsets.UTF_8); return new ByteArrayInputStream(bytes); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine().toLowerCase(); if (inputLine.length() == 1) { char c = inputLine.charAt(0); if (c == 'a') return new Move.Left(0); else if (c == 's') return new Move.Down(0); else if (c == 'w') return new Move.Up(0); else if (c == 'd') return new Move.Right(0); else if (c == 'h') return new Move.Left(1); else if (c == 'j') return new Move.Down(1); else if (c == 'k') return new Move.Up(1); else if (c == 'l') return new Move.Right(1); else if (c == 'u') return new Undo(-1); else return new InvalidInput(-1, INVALID_INPUT_MESSAGE); } else if (inputLine.equals(EXIT_COMMAND_TEXT)) return new Exit(-1); else return new InvalidInput(-1, INVALID_INPUT_MESSAGE); }",
        "label": "P"
    },
    "3044": {
        "dataset": "COMP 3021",
        "project": "zrenah",
        "bug_id": "34",
        "T": "void testUndo(String input, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine().toLowerCase(); if (inputLine.length() == 1) { char c = inputLine.charAt(0); if (c == 'a') return new Move.Left(0); else if (c == 's') return new Move.Down(0); else if (c == 'w') return new Move.Up(0); else if (c == 'd') return new Move.Right(0); else if (c == 'h') return new Move.Left(1); else if (c == 'j') return new Move.Down(1); else if (c == 'k') return new Move.Up(1); else if (c == 'l') return new Move.Right(1); else if (c == 'u') return new Undo(-1); else return new InvalidInput(-1, INVALID_INPUT_MESSAGE); } else if (inputLine.equals(EXIT_COMMAND_TEXT)) return new Exit(-1); else return new InvalidInput(-1, INVALID_INPUT_MESSAGE); }",
        "label": "P"
    },
    "3045": {
        "dataset": "COMP 3021",
        "project": "zrenah",
        "bug_id": "35",
        "T": "void testInvalidInput() { final var inputStream = fixValueStream(\"blah blah\"); final var inputEngine = new TerminalInputEngine(inputStream); final var action = inputEngine.fetchAction(); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine().toLowerCase(); if (inputLine.length() == 1) { char c = inputLine.charAt(0); if (c == 'a') return new Move.Left(0); else if (c == 's') return new Move.Down(0); else if (c == 'w') return new Move.Up(0); else if (c == 'd') return new Move.Right(0); else if (c == 'h') return new Move.Left(1); else if (c == 'j') return new Move.Down(1); else if (c == 'k') return new Move.Up(1); else if (c == 'l') return new Move.Right(1); else if (c == 'u') return new Undo(-1); else return new InvalidInput(-1, INVALID_INPUT_MESSAGE); } else if (inputLine.equals(EXIT_COMMAND_TEXT)) return new Exit(-1); else return new InvalidInput(-1, INVALID_INPUT_MESSAGE); }",
        "label": "P"
    },
    "3046": {
        "dataset": "COMP 3021",
        "project": "zrenah",
        "bug_id": "36",
        "T": "void testUndoWhenThereIsNoMove() { final var gameState = new GameState(TestHelper.parseGameMap(\"\"\" 233 ###### #A.a@# #..a@# ###### \"\"\" )); gameState.undo(); } private Entity generateEntity(int key) { return switch (key % 4) { case 0 -> new Box(0); case 1 -> new Empty(); case 2 -> new Player(0); case 3 -> new Wall(); default -> throw new ShouldNotReachException(); }; }",
        "C": "public GameState(@NotNull GameMap map) { gameMap = new GameMap(map); currMap = new GameMap(map); checkpoints = new Stack<GameMap>(); checkpoints.push(new GameMap(map)); if (gameMap.getUndoLimit().isPresent()) { undoQuota = gameMap.getUndoLimit().get(); } else { undoQuota = -1; } } public void undo() { gameMap = new GameMap(checkpoints.peek()); currMap = new GameMap(checkpoints.peek()); if (checkpoints.size() > 1) { checkpoints.pop(); if (undoQuota > 0) undoQuota--; } } /** * Get the maximum width of the game map. * This should be the same as that in {@link GameMap} public TerminalRenderingEngine(PrintStream outputSteam) { this.outputSteam = outputSteam; } public Box(int playerId) { this.playerId = playerId; } public Player(int id) { this.id = id; } public ShouldNotReachException() { super(\"This branch should not be reached.\"); }",
        "label": "P"
    },
    "3047": {
        "dataset": "COMP 3021",
        "project": "zrenah",
        "bug_id": "37",
        "T": "void testGetUndoUnlimited() { final var gameState = new GameState(TestHelper.parseGameMap(\"\"\" -1 ###### #.Aa@# #..a@# ###### \"\"\" )); }",
        "C": "public GameState(@NotNull GameMap map) { gameMap = new GameMap(map); currMap = new GameMap(map); checkpoints = new Stack<GameMap>(); checkpoints.push(new GameMap(map)); if (gameMap.getUndoLimit().isPresent()) { undoQuota = gameMap.getUndoLimit().get(); } else { undoQuota = -1; } }",
        "label": "P"
    },
    "3048": {
        "dataset": "COMP 3021",
        "project": "zrenah",
        "bug_id": "38",
        "T": "void testMapCopying() { final var maxWidth = 2333; final var maxHeight = 2333; final var random = new Random(); final var randomEntities = Stream.generate(() -> Position.of(random.nextInt(maxWidth), random.nextInt(maxHeight))) .distinct() .limit(100) .collect(Collectors.toMap(Function.identity(), it -> generateEntity(it.x()))); final var firstPos = randomEntities.keySet().stream().findFirst(); final var gameMap = new GameMap(maxWidth, maxHeight, Collections.singleton(firstPos.get()), 233); randomEntities.forEach(gameMap::putEntity); final var gameState = new GameState(gameMap); final var randomPosition = randomEntities.keySet().stream().findAny(); gameMap.putEntity(randomPosition.get(), new Empty()); randomEntities.forEach((p, e) -> assertEquals(e, gameState.getEntity(p))); }",
        "C": "public static @NotNull Position of(int x, int y) { return new Position(x, y); } public GameMap(int maxWidth, int maxHeight, Set<Position> destinations, int undoLimit) { this.maxWidth = maxWidth; this.maxHeight = maxHeight; this.undoLimit = undoLimit; this.destinations = new HashSet<Position>(); if (destinations != null) { this.destinations.addAll(destinations); } map = new char[maxHeight][maxWidth]; } public GameState(@NotNull GameMap map) { gameMap = new GameMap(map); currMap = new GameMap(map); checkpoints = new Stack<GameMap>(); checkpoints.push(new GameMap(map)); if (gameMap.getUndoLimit().isPresent()) { undoQuota = gameMap.getUndoLimit().get(); } else { undoQuota = -1; } } public void putEntity(Position position, Entity entity) { switch (entity) { case Box b -> { map[position.y()][position.x()] = (char) (b.getPlayerId() + 'a'); } case Empty e -> { map[position.y()][position.x()] = '.'; } case Player p -> { map[position.y()][position.x()] = (char) (p.getId() + 'A'); } case Wall w -> { map[position.y()][position.x()] = '#'; } } } public @Nullable Entity getEntity(@NotNull Position position) { return gameMap.getEntity(position); } /** * Get all box destination positions as a set in the game map. * This should be the same as that in {@link GameMap}",
        "label": "F"
    },
    "3049": {
        "dataset": "COMP 3021",
        "project": "zrenah",
        "bug_id": "39",
        "T": "void testUndoWhenThereIsMoveButNoCheckpoint() { final var gameState = new GameState(TestHelper.parseGameMap(\"\"\" 233 ###### #A.a@# #..a@# ###### \"\"\" )); gameState.move(Position.of(1, 1), Position.of(2, 1)); gameState.undo(); }",
        "C": "public GameState(@NotNull GameMap map) { gameMap = new GameMap(map); currMap = new GameMap(map); checkpoints = new Stack<GameMap>(); checkpoints.push(new GameMap(map)); if (gameMap.getUndoLimit().isPresent()) { undoQuota = gameMap.getUndoLimit().get(); } else { undoQuota = -1; } } public void move(Position from, Position to) { gameMap.move(from, to); } /** * Record a checkpoint of the game state, including: * <li>All current positions of entities in the game map.</li> * <li>Current undo quota</li> * <p> * Checkpoint is used in {@link GameState#undo()} public static @NotNull Position of(int x, int y) { return new Position(x, y); } public void undo() { gameMap = new GameMap(checkpoints.peek()); currMap = new GameMap(checkpoints.peek()); if (checkpoints.size() > 1) { checkpoints.pop(); if (undoQuota > 0) undoQuota--; } } /** * Get the maximum width of the game map. * This should be the same as that in {@link GameMap}",
        "label": "P"
    },
    "3050": {
        "dataset": "COMP 3021",
        "project": "zrenah",
        "bug_id": "40",
        "T": "void testGameExit() { final var gameState = mock(GameState.class); final var inputEngine = mock(TerminalInputEngine.class); final var renderingEngine = mock(TerminalRenderingEngine.class); when(gameState.isWin()).thenReturn(false, false, false); when(inputEngine.fetchAction()) .thenReturn(new InvalidInput(0, \"\"), new InvalidInput(0, \"\"), new Exit(0)); final var game = new TerminalSokobanGame(gameState, inputEngine, renderingEngine); game.run(); verify(renderingEngine, atLeastOnce()).message(any()); }",
        "C": "public InvalidInput(int initiator, @NotNull String message) { super(initiator); this.message = message; } public Exit(int initiator) { super(initiator); } public TerminalSokobanGame(GameState gameState, TerminalInputEngine inputEngine, TerminalRenderingEngine renderingEngine) { super(gameState); this.inputEngine = inputEngine; this.renderingEngine = renderingEngine; if (gameState.getAllPlayerPositions().size() > 2) throw new IllegalArgumentException(\"TerminalSokobanGame only support at most two players.\"); } public void run() { renderingEngine.message(GAME_READY_MESSAGE); while (!shouldStop()) { renderingEngine.render(state); renderingEngine.message(String.format(UNDO_QUOTA_TEMPLATE, state.getUndoQuota().isPresent() ? state.getUndoQuota().get() : UNDO_QUOTA_UNLIMITED)); renderingEngine.message(\">>>\"); Action a = inputEngine.fetchAction(); ActionResult r = processAction(a); switch (r) { case ActionResult.Success ignored -> { } case ActionResult.Failed f -> renderingEngine.message(f.getReason()); } } renderingEngine.render(state); renderingEngine.message(GAME_EXIT_MESSAGE); if (state.isWin()) renderingEngine.message(WIN_MESSAGE); }",
        "label": "P"
    },
    "3051": {
        "dataset": "COMP 3021",
        "project": "zrenah",
        "bug_id": "41",
        "T": "void testGameWin() { final var gameState = mock(GameState.class); final var inputEngine = mock(TerminalInputEngine.class); final var renderingEngine = mock(TerminalRenderingEngine.class); when(gameState.isWin()).thenReturn(false, false, false, true); when(inputEngine.fetchAction()) .thenReturn(new InvalidInput(0, \"\")); final var game = new TerminalSokobanGame(gameState, inputEngine, renderingEngine); game.run(); verify(gameState, atLeastOnce()).isWin(); verify(renderingEngine, atLeastOnce()).message(any()); }",
        "C": "public InvalidInput(int initiator, @NotNull String message) { super(initiator); this.message = message; } public TerminalSokobanGame(GameState gameState, TerminalInputEngine inputEngine, TerminalRenderingEngine renderingEngine) { super(gameState); this.inputEngine = inputEngine; this.renderingEngine = renderingEngine; if (gameState.getAllPlayerPositions().size() > 2) throw new IllegalArgumentException(\"TerminalSokobanGame only support at most two players.\"); } public void run() { renderingEngine.message(GAME_READY_MESSAGE); while (!shouldStop()) { renderingEngine.render(state); renderingEngine.message(String.format(UNDO_QUOTA_TEMPLATE, state.getUndoQuota().isPresent() ? state.getUndoQuota().get() : UNDO_QUOTA_UNLIMITED)); renderingEngine.message(\">>>\"); Action a = inputEngine.fetchAction(); ActionResult r = processAction(a); switch (r) { case ActionResult.Success ignored -> { } case ActionResult.Failed f -> renderingEngine.message(f.getReason()); } } renderingEngine.render(state); renderingEngine.message(GAME_EXIT_MESSAGE); if (state.isWin()) renderingEngine.message(WIN_MESSAGE); }",
        "label": "P"
    },
    "3052": {
        "dataset": "COMP 3021",
        "project": "zrenah",
        "bug_id": "42",
        "T": "void testMoreThanTwoPlayers() { final var gameState = mock(GameState.class); final var inputEngine = mock(TerminalInputEngine.class); final var renderingEngine = mock(TerminalRenderingEngine.class); when(gameState.getAllPlayerPositions()).thenReturn(new HashSet<>(Arrays.asList(Position.of(1, 1), Position.of(1, 2), Position.of(1, 3)))); }",
        "C": "public static @NotNull Position of(int x, int y) { return new Position(x, y); }",
        "label": "P"
    },
    "3053": {
        "dataset": "COMP 3021",
        "project": "mlinap",
        "bug_id": "0",
        "T": "void moveUp() { Position.of(233, 232), new Move.Up(-1).nextPosition(pos) ); }",
        "C": "public static @NotNull Position of(int x, int y) { return new Position(x, y); } public Up(int initiator) { super(initiator); }",
        "label": "P"
    },
    "3054": {
        "dataset": "COMP 3021",
        "project": "mlinap",
        "bug_id": "1",
        "T": "void moveDown() { Position.of(233, 234), new Move.Down(-1).nextPosition(pos) ); }",
        "C": "public static @NotNull Position of(int x, int y) { return new Position(x, y); } public Down(int initiator) { super(initiator); }",
        "label": "P"
    },
    "3055": {
        "dataset": "COMP 3021",
        "project": "mlinap",
        "bug_id": "2",
        "T": "void moveRight() { Position.of(234, 233), new Move.Right(-1).nextPosition(pos) ); }",
        "C": "public static @NotNull Position of(int x, int y) { return new Position(x, y); } public Right(int initiator) { super(initiator); }",
        "label": "P"
    },
    "3056": {
        "dataset": "COMP 3021",
        "project": "mlinap",
        "bug_id": "3",
        "T": "void testExceedingUndoQuota() { final var gameState = mock(GameState.class); when(gameState.getPlayerPositionById(anyInt())).thenReturn(Position.of(0, 0)); when(gameState.getUndoQuota()).thenReturn(Optional.of(0)); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Undo(0)); }",
        "C": "public Undo(int initiator) { super(initiator); }",
        "label": "P"
    },
    "3057": {
        "dataset": "COMP 3021",
        "project": "mlinap",
        "bug_id": "4",
        "T": "void testExit() { final var gameState = mock(GameState.class); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Exit(0)); }",
        "C": "public Exit(int initiator) { super(initiator); }",
        "label": "F"
    },
    "3058": {
        "dataset": "COMP 3021",
        "project": "mlinap",
        "bug_id": "5",
        "T": "void testUndoUnlimited() { final var gameState = mock(GameState.class); when(gameState.getPlayerPositionById(anyInt())).thenReturn(Position.of(0, 0)); when(gameState.getUndoQuota()).thenReturn(Optional.empty()); final var game = new SokobanGameForTesting(gameState); for (int i = 0; i < 10000; i++) { final var result = game.feedActionForProcessing(new Undo(0)); } verify(gameState, times(10000)).undo(); }",
        "C": "public TerminalRenderingEngine(PrintStream outputSteam) { this.outputSteam = outputSteam; } public Undo(int initiator) { super(initiator); }",
        "label": "P"
    },
    "3059": {
        "dataset": "COMP 3021",
        "project": "mlinap",
        "bug_id": "6",
        "T": "void testPushOtherPlayerBox() { String mapText = \"\"\" 233 ###### #AB.@# #b.a.# #@...# ###### \"\"\"; final var testMap = TestHelper.parseGameMap(mapText); final var gameState = spy(new GameState(testMap)); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Move.Down(0)); verify(gameState, never()).move(any(), any()); }",
        "C": "public GameState(@NotNull GameMap map) { this.map = map; boxes = new HashMap<>(); historyBoxes = new ArrayList<>(); historyPlayers = new ArrayList<>(); players = new HashMap<>(); undoQuota = map.getUndoLimit().get(); for (int y = 0; y < map.getMaxHeight(); y++) { for (int x = 0; x < map.getMaxWidth(); x++) { var entity = map.getEntity(Position.of(x, y)); if (entity instanceof Box) boxes.put(Position.of(x, y), (Box) entity); else if (entity instanceof Player) players.put(Position.of(x, y), (Player) entity); } } historyBoxes.add(new HashMap<>(boxes)); historyPlayers.add(new HashMap<>(players)); } public Down(int initiator) { super(initiator); }",
        "label": "P"
    },
    "3060": {
        "dataset": "COMP 3021",
        "project": "mlinap",
        "bug_id": "7",
        "T": "void testMoveNonExistingPlayer() { String mapText = \"\"\" 233 ###### #A..@# #a...# ##...# ###### \"\"\"; final var testMap = TestHelper.parseGameMap(mapText); final var gameState = spy(new GameState(testMap)); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Move.Down(23)); }",
        "C": "public GameState(@NotNull GameMap map) { this.map = map; boxes = new HashMap<>(); historyBoxes = new ArrayList<>(); historyPlayers = new ArrayList<>(); players = new HashMap<>(); undoQuota = map.getUndoLimit().get(); for (int y = 0; y < map.getMaxHeight(); y++) { for (int x = 0; x < map.getMaxWidth(); x++) { var entity = map.getEntity(Position.of(x, y)); if (entity instanceof Box) boxes.put(Position.of(x, y), (Box) entity); else if (entity instanceof Player) players.put(Position.of(x, y), (Player) entity); } } historyBoxes.add(new HashMap<>(boxes)); historyPlayers.add(new HashMap<>(players)); } public Down(int initiator) { super(initiator); }",
        "label": "P"
    },
    "3061": {
        "dataset": "COMP 3021",
        "project": "mlinap",
        "bug_id": "8",
        "T": "void testCheckpointWhenNeed() { final var gameState = spy(new GameState(TestHelper.parseGameMap(\"\"\" 233 ###### #.Aa@# #..a@# ###### \"\"\" ))); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Move.Right(0)); verify(gameState, times(1)).checkpoint(); }",
        "C": "public GameState(@NotNull GameMap map) { this.map = map; boxes = new HashMap<>(); historyBoxes = new ArrayList<>(); historyPlayers = new ArrayList<>(); players = new HashMap<>(); undoQuota = map.getUndoLimit().get(); for (int y = 0; y < map.getMaxHeight(); y++) { for (int x = 0; x < map.getMaxWidth(); x++) { var entity = map.getEntity(Position.of(x, y)); if (entity instanceof Box) boxes.put(Position.of(x, y), (Box) entity); else if (entity instanceof Player) players.put(Position.of(x, y), (Player) entity); } } historyBoxes.add(new HashMap<>(boxes)); historyPlayers.add(new HashMap<>(players)); } public Right(int initiator) { super(initiator); }",
        "label": "P"
    },
    "3062": {
        "dataset": "COMP 3021",
        "project": "mlinap",
        "bug_id": "9",
        "T": "void testPushBoxAgainstWall() { String mapText = \"\"\" 233 ###### #A..@# #a...# ##...# ###### \"\"\"; final var testMap = TestHelper.parseGameMap(mapText); final var gameState = spy(new GameState(testMap)); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Move.Down(0)); verify(gameState, never()).move(any(), any()); }",
        "C": "public GameState(@NotNull GameMap map) { this.map = map; boxes = new HashMap<>(); historyBoxes = new ArrayList<>(); historyPlayers = new ArrayList<>(); players = new HashMap<>(); undoQuota = map.getUndoLimit().get(); for (int y = 0; y < map.getMaxHeight(); y++) { for (int x = 0; x < map.getMaxWidth(); x++) { var entity = map.getEntity(Position.of(x, y)); if (entity instanceof Box) boxes.put(Position.of(x, y), (Box) entity); else if (entity instanceof Player) players.put(Position.of(x, y), (Player) entity); } } historyBoxes.add(new HashMap<>(boxes)); historyPlayers.add(new HashMap<>(players)); } public Down(int initiator) { super(initiator); }",
        "label": "P"
    },
    "3063": {
        "dataset": "COMP 3021",
        "project": "mlinap",
        "bug_id": "10",
        "T": "void testCheckpointWhenNotNeed() { final var gameState = spy(new GameState(TestHelper.parseGameMap(\"\"\" 233 ###### #A.a@# #..a@# ###### \"\"\" ))); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Move.Right(0)); verify(gameState, never()).checkpoint(); } private static class SokobanGameForTesting extends AbstractSokobanGame { protected SokobanGameForTesting(GameState gameState) { super(gameState); } @Override public void run() { } public ActionResult feedActionForProcessing(Action action) { return processAction(action); } }",
        "C": "public GameState(@NotNull GameMap map) { this.map = map; boxes = new HashMap<>(); historyBoxes = new ArrayList<>(); historyPlayers = new ArrayList<>(); players = new HashMap<>(); undoQuota = map.getUndoLimit().get(); for (int y = 0; y < map.getMaxHeight(); y++) { for (int x = 0; x < map.getMaxWidth(); x++) { var entity = map.getEntity(Position.of(x, y)); if (entity instanceof Box) boxes.put(Position.of(x, y), (Box) entity); else if (entity instanceof Player) players.put(Position.of(x, y), (Player) entity); } } historyBoxes.add(new HashMap<>(boxes)); historyPlayers.add(new HashMap<>(players)); } public Right(int initiator) { super(initiator); } public void run() { renderingEngine.render(state); while (!this.shouldStop()) { if (state.getUndoQuota().isPresent()) renderingEngine.message(\"Undo Quota: \" + state.getUndoQuota().get().toString()); else renderingEngine.message(\"Unlimited\"); renderingEngine.message(\">>>\"); var action = inputEngine.fetchAction(); var actionResult = processAction(action); if (actionResult instanceof ActionResult.Failed) renderingEngine.message(((ActionResult.Failed) actionResult).getReason()); renderingEngine.render(state); if (actionResult.getAction() instanceof Exit) break; } renderingEngine.message(\"Game exits.\"); if (this.shouldStop()) renderingEngine.message(\"You win.\"); } protected ActionResult processAction(@NotNull Action action) { if (action instanceof Move) { Move move = (Move) action; var playerId = move.getInitiator(); var from = state.getPlayerPositionById(playerId); if (from == null) return new ActionResult.Failed(move, \"Player not found.\"); var to = move.nextPosition(from); var occupant = state.getEntity(to); if (occupant instanceof Empty) { state.move(from, to); return new ActionResult.Success(move); } if (occupant instanceof Box) { if (playerId == ((Box) occupant).getPlayerId()) { var boxTo = move.nextPosition(to); if (state.getEntity(boxTo) instanceof Empty) { state.move(to, boxTo); state.move(from, to); state.checkpoint(); return new ActionResult.Success(move); } else return new ActionResult.Failed(move, \"Failed to push the box.\"); } else return new ActionResult.Failed(move, \"Failed to push the box.\"); } if (occupant instanceof Wall) return new ActionResult.Failed(move, \"You hit a wall.\"); } if (action instanceof Undo) { if (state.getUndoQuota().isPresent()) { if (state.getUndoQuota().get() == 0) return new ActionResult.Failed(action, \"You have run out of your undo quota.\"); } state.undo(); return new ActionResult.Success(action); } if (action instanceof Exit) return new ActionResult.Success(action); return new ActionResult.Failed(action, \"Invalid Input.\"); }",
        "label": "P"
    },
    "3064": {
        "dataset": "COMP 3021",
        "project": "mlinap",
        "bug_id": "11",
        "T": "void testHitAnotherPlayer() { String mapText = \"\"\" 233 ###### #A..@# #B...# #ab.@# ###### \"\"\"; final var testMap = TestHelper.parseGameMap(mapText); final var gameState = spy(new GameState(testMap)); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Move.Down(0)); verify(gameState, never()).move(any(), any()); }",
        "C": "public GameState(@NotNull GameMap map) { this.map = map; boxes = new HashMap<>(); historyBoxes = new ArrayList<>(); historyPlayers = new ArrayList<>(); players = new HashMap<>(); undoQuota = map.getUndoLimit().get(); for (int y = 0; y < map.getMaxHeight(); y++) { for (int x = 0; x < map.getMaxWidth(); x++) { var entity = map.getEntity(Position.of(x, y)); if (entity instanceof Box) boxes.put(Position.of(x, y), (Box) entity); else if (entity instanceof Player) players.put(Position.of(x, y), (Player) entity); } } historyBoxes.add(new HashMap<>(boxes)); historyPlayers.add(new HashMap<>(players)); } public Down(int initiator) { super(initiator); }",
        "label": "P"
    },
    "3065": {
        "dataset": "COMP 3021",
        "project": "mlinap",
        "bug_id": "12",
        "T": "void testUndoWithinQuota() { final var gameState = mock(GameState.class); when(gameState.getPlayerPositionById(anyInt())).thenReturn(Position.of(0, 0)); when(gameState.getUndoQuota()).thenReturn(Optional.of(1)); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Undo(0)); verify(gameState, times(1)).undo(); }",
        "C": "public Undo(int initiator) { super(initiator); }",
        "label": "P"
    },
    "3066": {
        "dataset": "COMP 3021",
        "project": "mlinap",
        "bug_id": "13",
        "T": "void testInvalidInput() { final var game = new SokobanGameForTesting(mock(GameState.class)); final var message = String.valueOf(new Random().nextLong()); final var action = new InvalidInput(-1, message); final var result = game.feedActionForProcessing(action); }",
        "C": "public InvalidInput(int initiator, @NotNull String message) { super(initiator); this.message = message; }",
        "label": "P"
    },
    "3067": {
        "dataset": "COMP 3021",
        "project": "mlinap",
        "bug_id": "14",
        "T": "void testUndoLimitParsing() { final var gameMap = TestHelper.parseGameMap(rectangularMap); }",
        "C": "",
        "label": "P"
    },
    "3068": {
        "dataset": "COMP 3021",
        "project": "mlinap",
        "bug_id": "15",
        "T": "void testWidthForNonRectangularMap() { final var gameMap = TestHelper.parseGameMap(nonRectangularMap); }",
        "C": "",
        "label": "P"
    },
    "3069": {
        "dataset": "COMP 3021",
        "project": "mlinap",
        "bug_id": "16",
        "T": "void testTwoPlayersMap() { final var twoPlayersMap = \"\"\" 233 ###### #A..@# #..B@# #....# #.a..# #..b.# ###### \"\"\"; final var gameMap = TestHelper.parseGameMap(twoPlayersMap); final var playerIds = gameMap.getPlayerIds(); final var expectedIds = new HashSet<Integer>(); expectedIds.add(0); expectedIds.add(1); }",
        "C": "public Set<Integer> getPlayerIds() { var playerIds = new HashSet<Integer>(); for (var key : map.keySet()) { if (map.get(key) instanceof Player) playerIds.add(((Player) map.get(key)).getId()); } return playerIds; }",
        "label": "P"
    },
    "3070": {
        "dataset": "COMP 3021",
        "project": "mlinap",
        "bug_id": "17",
        "T": "void testMapWithoutPlayer() { final var invalidMap = \"\"\" 233 ### #.# ### \"\"\"; } // @Tag(TestKind.HIDDEN) // @Test // void testUnmatchedPlayersAndBoxes() { // final var invalidMap = \"\"\" // 233 // ###### // #A..@# // #...@# // #a.b@# // #.a.@# // #..a.# // ###### // \"\"\"; // assertThrowsExactly(IllegalArgumentException.class, () -> TestHelper.parseGameMap(invalidMap)); // }",
        "C": "public TerminalRenderingEngine(PrintStream outputSteam) { this.outputSteam = outputSteam; }",
        "label": "P"
    },
    "3071": {
        "dataset": "COMP 3021",
        "project": "mlinap",
        "bug_id": "18",
        "T": "void testManyPlayersMap() { final var manyPlayersMap = \"\"\" 233 ###### #A.P@@# #vCB@@# #.cpD@# #Ga.d@# #g.bV@# ###### \"\"\"; final var gameMap = TestHelper.parseGameMap(manyPlayersMap); final var playerIds = gameMap.getPlayerIds(); final var expectedIds = new HashSet<>(Arrays.asList( 0, 'P' - 'A', 'C' - 'A', 'B' - 'A', 'D' - 'A', 'G' - 'A', 'V' - 'A' )); }",
        "C": "public Set<Integer> getPlayerIds() { var playerIds = new HashSet<Integer>(); for (var key : map.keySet()) { if (map.get(key) instanceof Player) playerIds.add(((Player) map.get(key)).getId()); } return playerIds; }",
        "label": "P"
    },
    "3072": {
        "dataset": "COMP 3021",
        "project": "mlinap",
        "bug_id": "19",
        "T": "void testHeightForNonRectangularMap() { final var gameMap = TestHelper.parseGameMap(nonRectangularMap); }",
        "C": "",
        "label": "P"
    },
    "3073": {
        "dataset": "COMP 3021",
        "project": "mlinap",
        "bug_id": "20",
        "T": "void testDuplicatedPlayers() { final var invalidMap = \"\"\" 233 ###### #A..@# #..A@# #....# #.a..# #..b.# ###### \"\"\"; }",
        "C": "",
        "label": "P"
    },
    "3074": {
        "dataset": "COMP 3021",
        "project": "mlinap",
        "bug_id": "21",
        "T": "void testParseMapWithoutUndoLimit() { final var invalidMap = String.join(\"\\n\", rectangularMap.lines().skip(1).toList()); }",
        "C": "",
        "label": "F"
    },
    "3075": {
        "dataset": "COMP 3021",
        "project": "mlinap",
        "bug_id": "22",
        "T": "void testInsufficientDestinations() { final var invalidMap = \"\"\" 233 ###### #A..@# #...@# #a...# #.a..# #..a.# ###### \"\"\"; }",
        "C": "",
        "label": "P"
    },
    "3076": {
        "dataset": "COMP 3021",
        "project": "mlinap",
        "bug_id": "23",
        "T": "void testSuperLargeMap() { try { new GameMap(Integer.MAX_VALUE, Integer.MAX_VALUE, Collections.emptySet(), 0); } catch (OutOfMemoryError e) { throw new RuntimeException(e); } }); }",
        "C": "public GameMap(int maxWidth, int maxHeight, Set<Position> destinations, int undoLimit) { this.maxWidth = maxWidth; this.maxHeight = maxHeight; this.destinations = new HashSet<>(destinations); if (undoLimit < -1) throw new IllegalArgumentException(); this.undoLimit = undoLimit; } public TerminalRenderingEngine(PrintStream outputSteam) { this.outputSteam = outputSteam; }",
        "label": "P"
    },
    "3077": {
        "dataset": "COMP 3021",
        "project": "mlinap",
        "bug_id": "24",
        "T": "void testInvalidUndoLimit() { final var invalidMap = \"\"\" -233 ###### #A..@# #...@# #a.b@# #.a.@# #..a.# ###### \"\"\"; }",
        "C": "",
        "label": "P"
    },
    "3078": {
        "dataset": "COMP 3021",
        "project": "mlinap",
        "bug_id": "25",
        "T": "void testEmptyMap() { final var invalidMap = \"\"; }",
        "C": "",
        "label": "P"
    },
    "3079": {
        "dataset": "COMP 3021",
        "project": "mlinap",
        "bug_id": "26",
        "T": "void testMove(String input, String name, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); } private InputStream fixValueStream(String content) { final var bytes = content.getBytes(StandardCharsets.UTF_8); return new ByteArrayInputStream(bytes); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine(); if (inputLine.toLowerCase().equals(\"w\")) return new Move.Up(0); if (inputLine.toLowerCase().equals(\"a\")) return new Move.Left(0); if (inputLine.toLowerCase().equals(\"s\")) return new Move.Down(0); if (inputLine.toLowerCase().equals(\"d\")) return new Move.Right(0); if (inputLine.toLowerCase().equals(\"h\")) return new Move.Left(1); if (inputLine.toLowerCase().equals(\"j\")) return new Move.Down(1); if (inputLine.toLowerCase().equals(\"k\")) return new Move.Up(1); if (inputLine.toLowerCase().equals(\"l\")) return new Move.Right(1); if (inputLine.toLowerCase().equals(\"u\")) return new Undo(0); if (inputLine.toLowerCase().equals(\"exit\")) return new Exit(0); return new InvalidInput(0, \"Invalid Input.\"); }",
        "label": "P"
    },
    "3080": {
        "dataset": "COMP 3021",
        "project": "mlinap",
        "bug_id": "27",
        "T": "void testMove(String input, String name, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); } private InputStream fixValueStream(String content) { final var bytes = content.getBytes(StandardCharsets.UTF_8); return new ByteArrayInputStream(bytes); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine(); if (inputLine.toLowerCase().equals(\"w\")) return new Move.Up(0); if (inputLine.toLowerCase().equals(\"a\")) return new Move.Left(0); if (inputLine.toLowerCase().equals(\"s\")) return new Move.Down(0); if (inputLine.toLowerCase().equals(\"d\")) return new Move.Right(0); if (inputLine.toLowerCase().equals(\"h\")) return new Move.Left(1); if (inputLine.toLowerCase().equals(\"j\")) return new Move.Down(1); if (inputLine.toLowerCase().equals(\"k\")) return new Move.Up(1); if (inputLine.toLowerCase().equals(\"l\")) return new Move.Right(1); if (inputLine.toLowerCase().equals(\"u\")) return new Undo(0); if (inputLine.toLowerCase().equals(\"exit\")) return new Exit(0); return new InvalidInput(0, \"Invalid Input.\"); }",
        "label": "P"
    },
    "3081": {
        "dataset": "COMP 3021",
        "project": "mlinap",
        "bug_id": "28",
        "T": "void testMove(String input, String name, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); } private InputStream fixValueStream(String content) { final var bytes = content.getBytes(StandardCharsets.UTF_8); return new ByteArrayInputStream(bytes); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine(); if (inputLine.toLowerCase().equals(\"w\")) return new Move.Up(0); if (inputLine.toLowerCase().equals(\"a\")) return new Move.Left(0); if (inputLine.toLowerCase().equals(\"s\")) return new Move.Down(0); if (inputLine.toLowerCase().equals(\"d\")) return new Move.Right(0); if (inputLine.toLowerCase().equals(\"h\")) return new Move.Left(1); if (inputLine.toLowerCase().equals(\"j\")) return new Move.Down(1); if (inputLine.toLowerCase().equals(\"k\")) return new Move.Up(1); if (inputLine.toLowerCase().equals(\"l\")) return new Move.Right(1); if (inputLine.toLowerCase().equals(\"u\")) return new Undo(0); if (inputLine.toLowerCase().equals(\"exit\")) return new Exit(0); return new InvalidInput(0, \"Invalid Input.\"); }",
        "label": "P"
    },
    "3082": {
        "dataset": "COMP 3021",
        "project": "mlinap",
        "bug_id": "29",
        "T": "void testMove(String input, String name, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); } private InputStream fixValueStream(String content) { final var bytes = content.getBytes(StandardCharsets.UTF_8); return new ByteArrayInputStream(bytes); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine(); if (inputLine.toLowerCase().equals(\"w\")) return new Move.Up(0); if (inputLine.toLowerCase().equals(\"a\")) return new Move.Left(0); if (inputLine.toLowerCase().equals(\"s\")) return new Move.Down(0); if (inputLine.toLowerCase().equals(\"d\")) return new Move.Right(0); if (inputLine.toLowerCase().equals(\"h\")) return new Move.Left(1); if (inputLine.toLowerCase().equals(\"j\")) return new Move.Down(1); if (inputLine.toLowerCase().equals(\"k\")) return new Move.Up(1); if (inputLine.toLowerCase().equals(\"l\")) return new Move.Right(1); if (inputLine.toLowerCase().equals(\"u\")) return new Undo(0); if (inputLine.toLowerCase().equals(\"exit\")) return new Exit(0); return new InvalidInput(0, \"Invalid Input.\"); }",
        "label": "P"
    },
    "3083": {
        "dataset": "COMP 3021",
        "project": "mlinap",
        "bug_id": "30",
        "T": "void testMove(String input, String name, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); } private InputStream fixValueStream(String content) { final var bytes = content.getBytes(StandardCharsets.UTF_8); return new ByteArrayInputStream(bytes); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine(); if (inputLine.toLowerCase().equals(\"w\")) return new Move.Up(0); if (inputLine.toLowerCase().equals(\"a\")) return new Move.Left(0); if (inputLine.toLowerCase().equals(\"s\")) return new Move.Down(0); if (inputLine.toLowerCase().equals(\"d\")) return new Move.Right(0); if (inputLine.toLowerCase().equals(\"h\")) return new Move.Left(1); if (inputLine.toLowerCase().equals(\"j\")) return new Move.Down(1); if (inputLine.toLowerCase().equals(\"k\")) return new Move.Up(1); if (inputLine.toLowerCase().equals(\"l\")) return new Move.Right(1); if (inputLine.toLowerCase().equals(\"u\")) return new Undo(0); if (inputLine.toLowerCase().equals(\"exit\")) return new Exit(0); return new InvalidInput(0, \"Invalid Input.\"); }",
        "label": "P"
    },
    "3084": {
        "dataset": "COMP 3021",
        "project": "mlinap",
        "bug_id": "31",
        "T": "void testMove(String input, String name, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); } private InputStream fixValueStream(String content) { final var bytes = content.getBytes(StandardCharsets.UTF_8); return new ByteArrayInputStream(bytes); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine(); if (inputLine.toLowerCase().equals(\"w\")) return new Move.Up(0); if (inputLine.toLowerCase().equals(\"a\")) return new Move.Left(0); if (inputLine.toLowerCase().equals(\"s\")) return new Move.Down(0); if (inputLine.toLowerCase().equals(\"d\")) return new Move.Right(0); if (inputLine.toLowerCase().equals(\"h\")) return new Move.Left(1); if (inputLine.toLowerCase().equals(\"j\")) return new Move.Down(1); if (inputLine.toLowerCase().equals(\"k\")) return new Move.Up(1); if (inputLine.toLowerCase().equals(\"l\")) return new Move.Right(1); if (inputLine.toLowerCase().equals(\"u\")) return new Undo(0); if (inputLine.toLowerCase().equals(\"exit\")) return new Exit(0); return new InvalidInput(0, \"Invalid Input.\"); }",
        "label": "P"
    },
    "3085": {
        "dataset": "COMP 3021",
        "project": "mlinap",
        "bug_id": "32",
        "T": "void testMove(String input, String name, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); } private InputStream fixValueStream(String content) { final var bytes = content.getBytes(StandardCharsets.UTF_8); return new ByteArrayInputStream(bytes); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine(); if (inputLine.toLowerCase().equals(\"w\")) return new Move.Up(0); if (inputLine.toLowerCase().equals(\"a\")) return new Move.Left(0); if (inputLine.toLowerCase().equals(\"s\")) return new Move.Down(0); if (inputLine.toLowerCase().equals(\"d\")) return new Move.Right(0); if (inputLine.toLowerCase().equals(\"h\")) return new Move.Left(1); if (inputLine.toLowerCase().equals(\"j\")) return new Move.Down(1); if (inputLine.toLowerCase().equals(\"k\")) return new Move.Up(1); if (inputLine.toLowerCase().equals(\"l\")) return new Move.Right(1); if (inputLine.toLowerCase().equals(\"u\")) return new Undo(0); if (inputLine.toLowerCase().equals(\"exit\")) return new Exit(0); return new InvalidInput(0, \"Invalid Input.\"); }",
        "label": "P"
    },
    "3086": {
        "dataset": "COMP 3021",
        "project": "mlinap",
        "bug_id": "33",
        "T": "void testMove(String input, String name, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); } private InputStream fixValueStream(String content) { final var bytes = content.getBytes(StandardCharsets.UTF_8); return new ByteArrayInputStream(bytes); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine(); if (inputLine.toLowerCase().equals(\"w\")) return new Move.Up(0); if (inputLine.toLowerCase().equals(\"a\")) return new Move.Left(0); if (inputLine.toLowerCase().equals(\"s\")) return new Move.Down(0); if (inputLine.toLowerCase().equals(\"d\")) return new Move.Right(0); if (inputLine.toLowerCase().equals(\"h\")) return new Move.Left(1); if (inputLine.toLowerCase().equals(\"j\")) return new Move.Down(1); if (inputLine.toLowerCase().equals(\"k\")) return new Move.Up(1); if (inputLine.toLowerCase().equals(\"l\")) return new Move.Right(1); if (inputLine.toLowerCase().equals(\"u\")) return new Undo(0); if (inputLine.toLowerCase().equals(\"exit\")) return new Exit(0); return new InvalidInput(0, \"Invalid Input.\"); }",
        "label": "P"
    },
    "3087": {
        "dataset": "COMP 3021",
        "project": "mlinap",
        "bug_id": "34",
        "T": "void testUndo(String input, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine(); if (inputLine.toLowerCase().equals(\"w\")) return new Move.Up(0); if (inputLine.toLowerCase().equals(\"a\")) return new Move.Left(0); if (inputLine.toLowerCase().equals(\"s\")) return new Move.Down(0); if (inputLine.toLowerCase().equals(\"d\")) return new Move.Right(0); if (inputLine.toLowerCase().equals(\"h\")) return new Move.Left(1); if (inputLine.toLowerCase().equals(\"j\")) return new Move.Down(1); if (inputLine.toLowerCase().equals(\"k\")) return new Move.Up(1); if (inputLine.toLowerCase().equals(\"l\")) return new Move.Right(1); if (inputLine.toLowerCase().equals(\"u\")) return new Undo(0); if (inputLine.toLowerCase().equals(\"exit\")) return new Exit(0); return new InvalidInput(0, \"Invalid Input.\"); }",
        "label": "P"
    },
    "3088": {
        "dataset": "COMP 3021",
        "project": "mlinap",
        "bug_id": "35",
        "T": "void testInvalidInput() { final var inputStream = fixValueStream(\"blah blah\"); final var inputEngine = new TerminalInputEngine(inputStream); final var action = inputEngine.fetchAction(); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine(); if (inputLine.toLowerCase().equals(\"w\")) return new Move.Up(0); if (inputLine.toLowerCase().equals(\"a\")) return new Move.Left(0); if (inputLine.toLowerCase().equals(\"s\")) return new Move.Down(0); if (inputLine.toLowerCase().equals(\"d\")) return new Move.Right(0); if (inputLine.toLowerCase().equals(\"h\")) return new Move.Left(1); if (inputLine.toLowerCase().equals(\"j\")) return new Move.Down(1); if (inputLine.toLowerCase().equals(\"k\")) return new Move.Up(1); if (inputLine.toLowerCase().equals(\"l\")) return new Move.Right(1); if (inputLine.toLowerCase().equals(\"u\")) return new Undo(0); if (inputLine.toLowerCase().equals(\"exit\")) return new Exit(0); return new InvalidInput(0, \"Invalid Input.\"); }",
        "label": "P"
    },
    "3089": {
        "dataset": "COMP 3021",
        "project": "mlinap",
        "bug_id": "36",
        "T": "void testUndoWhenThereIsNoMove() { final var gameState = new GameState(TestHelper.parseGameMap(\"\"\" 233 ###### #A.a@# #..a@# ###### \"\"\" )); gameState.undo(); } private Entity generateEntity(int key) { return switch (key % 4) { case 0 -> new Box(0); case 1 -> new Empty(); case 2 -> new Player(0); case 3 -> new Wall(); default -> throw new ShouldNotReachException(); }; }",
        "C": "public GameState(@NotNull GameMap map) { this.map = map; boxes = new HashMap<>(); historyBoxes = new ArrayList<>(); historyPlayers = new ArrayList<>(); players = new HashMap<>(); undoQuota = map.getUndoLimit().get(); for (int y = 0; y < map.getMaxHeight(); y++) { for (int x = 0; x < map.getMaxWidth(); x++) { var entity = map.getEntity(Position.of(x, y)); if (entity instanceof Box) boxes.put(Position.of(x, y), (Box) entity); else if (entity instanceof Player) players.put(Position.of(x, y), (Player) entity); } } historyBoxes.add(new HashMap<>(boxes)); historyPlayers.add(new HashMap<>(players)); } public void undo() { if (historyBoxes.size() == 1 && historyPlayers.size() == 1) { if (!boxes.equals(historyBoxes.get(0))) { boxes = new HashMap<>(historyBoxes.get(0)); players = new HashMap<>(historyPlayers.get(0)); if (undoQuota > 0) undoQuota--; } } else { if (!boxes.equals(historyBoxes.get(historyBoxes.size() - 2))) { boxes = new HashMap<>(historyBoxes.get(historyBoxes.size() - 2)); players = new HashMap<>(historyPlayers.get(historyPlayers.size() - 2)); historyBoxes.remove(historyBoxes.size() - 1); historyPlayers.remove(historyPlayers.size() - 1); if (undoQuota > 0) undoQuota--; } } } /** * Get the maximum width of the game map. * This should be the same as that in {@link GameMap} public TerminalRenderingEngine(PrintStream outputSteam) { this.outputSteam = outputSteam; } public Box(int playerId) { this.playerId = playerId; } public Player(int id) { this.id = id; } public ShouldNotReachException() { super(\"This branch should not be reached.\"); }",
        "label": "P"
    },
    "3090": {
        "dataset": "COMP 3021",
        "project": "mlinap",
        "bug_id": "37",
        "T": "void testGetUndoUnlimited() { final var gameState = new GameState(TestHelper.parseGameMap(\"\"\" -1 ###### #.Aa@# #..a@# ###### \"\"\" )); }",
        "C": "public GameState(@NotNull GameMap map) { this.map = map; boxes = new HashMap<>(); historyBoxes = new ArrayList<>(); historyPlayers = new ArrayList<>(); players = new HashMap<>(); undoQuota = map.getUndoLimit().get(); for (int y = 0; y < map.getMaxHeight(); y++) { for (int x = 0; x < map.getMaxWidth(); x++) { var entity = map.getEntity(Position.of(x, y)); if (entity instanceof Box) boxes.put(Position.of(x, y), (Box) entity); else if (entity instanceof Player) players.put(Position.of(x, y), (Player) entity); } } historyBoxes.add(new HashMap<>(boxes)); historyPlayers.add(new HashMap<>(players)); }",
        "label": "P"
    },
    "3091": {
        "dataset": "COMP 3021",
        "project": "mlinap",
        "bug_id": "38",
        "T": "void testMapCopying() { final var maxWidth = 2333; final var maxHeight = 2333; final var random = new Random(); final var randomEntities = Stream.generate(() -> Position.of(random.nextInt(maxWidth), random.nextInt(maxHeight))) .distinct() .limit(100) .collect(Collectors.toMap(Function.identity(), it -> generateEntity(it.x()))); final var firstPos = randomEntities.keySet().stream().findFirst(); final var gameMap = new GameMap(maxWidth, maxHeight, Collections.singleton(firstPos.get()), 233); randomEntities.forEach(gameMap::putEntity); final var gameState = new GameState(gameMap); final var randomPosition = randomEntities.keySet().stream().findAny(); gameMap.putEntity(randomPosition.get(), new Empty()); randomEntities.forEach((p, e) -> assertEquals(e, gameState.getEntity(p))); }",
        "C": "public static @NotNull Position of(int x, int y) { return new Position(x, y); } public GameMap(int maxWidth, int maxHeight, Set<Position> destinations, int undoLimit) { this.maxWidth = maxWidth; this.maxHeight = maxHeight; this.destinations = new HashSet<>(destinations); if (undoLimit < -1) throw new IllegalArgumentException(); this.undoLimit = undoLimit; } public GameState(@NotNull GameMap map) { this.map = map; boxes = new HashMap<>(); historyBoxes = new ArrayList<>(); historyPlayers = new ArrayList<>(); players = new HashMap<>(); undoQuota = map.getUndoLimit().get(); for (int y = 0; y < map.getMaxHeight(); y++) { for (int x = 0; x < map.getMaxWidth(); x++) { var entity = map.getEntity(Position.of(x, y)); if (entity instanceof Box) boxes.put(Position.of(x, y), (Box) entity); else if (entity instanceof Player) players.put(Position.of(x, y), (Player) entity); } } historyBoxes.add(new HashMap<>(boxes)); historyPlayers.add(new HashMap<>(players)); } public void putEntity(Position position, Entity entity) { if (entity instanceof Player) if (map.containsValue(entity)) throw new IllegalArgumentException(); map.put(position, entity); } public @Nullable Entity getEntity(@NotNull Position position) { if (boxes.containsKey(position)) return boxes.get(position); if (players.containsKey(position)) return players.get(position); var entity = map.getEntity(position); if (entity instanceof Box || entity instanceof Player) return new Empty(); return entity; } /** * Get all box destination positions as a set in the game map. * This should be the same as that in {@link GameMap}",
        "label": "F"
    },
    "3092": {
        "dataset": "COMP 3021",
        "project": "mlinap",
        "bug_id": "39",
        "T": "void testUndoWhenThereIsMoveButNoCheckpoint() { final var gameState = new GameState(TestHelper.parseGameMap(\"\"\" 233 ###### #A.a@# #..a@# ###### \"\"\" )); gameState.move(Position.of(1, 1), Position.of(2, 1)); gameState.undo(); }",
        "C": "public GameState(@NotNull GameMap map) { this.map = map; boxes = new HashMap<>(); historyBoxes = new ArrayList<>(); historyPlayers = new ArrayList<>(); players = new HashMap<>(); undoQuota = map.getUndoLimit().get(); for (int y = 0; y < map.getMaxHeight(); y++) { for (int x = 0; x < map.getMaxWidth(); x++) { var entity = map.getEntity(Position.of(x, y)); if (entity instanceof Box) boxes.put(Position.of(x, y), (Box) entity); else if (entity instanceof Player) players.put(Position.of(x, y), (Player) entity); } } historyBoxes.add(new HashMap<>(boxes)); historyPlayers.add(new HashMap<>(players)); } public void move(Position from, Position to) { if (boxes.containsKey(from)) { boxes.put(to, boxes.get(from)); boxes.remove(from); } else if (players.containsKey(from)) { players.put(to, players.get(from)); players.remove(from); } } /** * Record a checkpoint of the game state, including: * <li>All current positions of entities in the game map.</li> * <li>Current undo quota</li> * <p> * Checkpoint is used in {@link GameState#undo()} public static @NotNull Position of(int x, int y) { return new Position(x, y); } public void undo() { if (historyBoxes.size() == 1 && historyPlayers.size() == 1) { if (!boxes.equals(historyBoxes.get(0))) { boxes = new HashMap<>(historyBoxes.get(0)); players = new HashMap<>(historyPlayers.get(0)); if (undoQuota > 0) undoQuota--; } } else { if (!boxes.equals(historyBoxes.get(historyBoxes.size() - 2))) { boxes = new HashMap<>(historyBoxes.get(historyBoxes.size() - 2)); players = new HashMap<>(historyPlayers.get(historyPlayers.size() - 2)); historyBoxes.remove(historyBoxes.size() - 1); historyPlayers.remove(historyPlayers.size() - 1); if (undoQuota > 0) undoQuota--; } } } /** * Get the maximum width of the game map. * This should be the same as that in {@link GameMap}",
        "label": "P"
    },
    "3093": {
        "dataset": "COMP 3021",
        "project": "mlinap",
        "bug_id": "40",
        "T": "void testGameExit() { final var gameState = mock(GameState.class); final var inputEngine = mock(TerminalInputEngine.class); final var renderingEngine = mock(TerminalRenderingEngine.class); when(gameState.isWin()).thenReturn(false, false, false); when(inputEngine.fetchAction()) .thenReturn(new InvalidInput(0, \"\"), new InvalidInput(0, \"\"), new Exit(0)); final var game = new TerminalSokobanGame(gameState, inputEngine, renderingEngine); game.run(); verify(renderingEngine, atLeastOnce()).message(any()); }",
        "C": "public InvalidInput(int initiator, @NotNull String message) { super(initiator); this.message = message; } public Exit(int initiator) { super(initiator); } public TerminalSokobanGame(GameState gameState, TerminalInputEngine inputEngine, TerminalRenderingEngine renderingEngine) { super(gameState); this.inputEngine = inputEngine; this.renderingEngine = renderingEngine; if (gameState.getAllPlayerPositions().size() > 2) throw new IllegalArgumentException(); } public void run() { renderingEngine.render(state); while (!this.shouldStop()) { if (state.getUndoQuota().isPresent()) renderingEngine.message(\"Undo Quota: \" + state.getUndoQuota().get().toString()); else renderingEngine.message(\"Unlimited\"); renderingEngine.message(\">>>\"); var action = inputEngine.fetchAction(); var actionResult = processAction(action); if (actionResult instanceof ActionResult.Failed) renderingEngine.message(((ActionResult.Failed) actionResult).getReason()); renderingEngine.render(state); if (actionResult.getAction() instanceof Exit) break; } renderingEngine.message(\"Game exits.\"); if (this.shouldStop()) renderingEngine.message(\"You win.\"); }",
        "label": "P"
    },
    "3094": {
        "dataset": "COMP 3021",
        "project": "mlinap",
        "bug_id": "41",
        "T": "void testGameWin() { final var gameState = mock(GameState.class); final var inputEngine = mock(TerminalInputEngine.class); final var renderingEngine = mock(TerminalRenderingEngine.class); when(gameState.isWin()).thenReturn(false, false, false, true); when(inputEngine.fetchAction()) .thenReturn(new InvalidInput(0, \"\")); final var game = new TerminalSokobanGame(gameState, inputEngine, renderingEngine); game.run(); verify(gameState, atLeastOnce()).isWin(); verify(renderingEngine, atLeastOnce()).message(any()); }",
        "C": "public InvalidInput(int initiator, @NotNull String message) { super(initiator); this.message = message; } public TerminalSokobanGame(GameState gameState, TerminalInputEngine inputEngine, TerminalRenderingEngine renderingEngine) { super(gameState); this.inputEngine = inputEngine; this.renderingEngine = renderingEngine; if (gameState.getAllPlayerPositions().size() > 2) throw new IllegalArgumentException(); } public void run() { renderingEngine.render(state); while (!this.shouldStop()) { if (state.getUndoQuota().isPresent()) renderingEngine.message(\"Undo Quota: \" + state.getUndoQuota().get().toString()); else renderingEngine.message(\"Unlimited\"); renderingEngine.message(\">>>\"); var action = inputEngine.fetchAction(); var actionResult = processAction(action); if (actionResult instanceof ActionResult.Failed) renderingEngine.message(((ActionResult.Failed) actionResult).getReason()); renderingEngine.render(state); if (actionResult.getAction() instanceof Exit) break; } renderingEngine.message(\"Game exits.\"); if (this.shouldStop()) renderingEngine.message(\"You win.\"); }",
        "label": "P"
    },
    "3095": {
        "dataset": "COMP 3021",
        "project": "mlinap",
        "bug_id": "42",
        "T": "void testMoreThanTwoPlayers() { final var gameState = mock(GameState.class); final var inputEngine = mock(TerminalInputEngine.class); final var renderingEngine = mock(TerminalRenderingEngine.class); when(gameState.getAllPlayerPositions()).thenReturn(new HashSet<>(Arrays.asList(Position.of(1, 1), Position.of(1, 2), Position.of(1, 3)))); }",
        "C": "public static @NotNull Position of(int x, int y) { return new Position(x, y); }",
        "label": "P"
    },
    "3096": {
        "dataset": "COMP 3021",
        "project": "khheung",
        "bug_id": "0",
        "T": "void moveUp() { Position.of(233, 232), new Move.Up(-1).nextPosition(pos) ); }",
        "C": "public static @NotNull Position of(int x, int y) { return new Position(x, y); } public Up(int initiator) { super(initiator); }",
        "label": "P"
    },
    "3097": {
        "dataset": "COMP 3021",
        "project": "khheung",
        "bug_id": "1",
        "T": "void moveDown() { Position.of(233, 234), new Move.Down(-1).nextPosition(pos) ); }",
        "C": "public static @NotNull Position of(int x, int y) { return new Position(x, y); } public Down(int initiator) { super(initiator); }",
        "label": "P"
    },
    "3098": {
        "dataset": "COMP 3021",
        "project": "khheung",
        "bug_id": "2",
        "T": "void moveRight() { Position.of(234, 233), new Move.Right(-1).nextPosition(pos) ); }",
        "C": "public static @NotNull Position of(int x, int y) { return new Position(x, y); } public Right(int initiator) { super(initiator); }",
        "label": "P"
    },
    "3099": {
        "dataset": "COMP 3021",
        "project": "khheung",
        "bug_id": "3",
        "T": "void testExceedingUndoQuota() { final var gameState = mock(GameState.class); when(gameState.getPlayerPositionById(anyInt())).thenReturn(Position.of(0, 0)); when(gameState.getUndoQuota()).thenReturn(Optional.of(0)); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Undo(0)); }",
        "C": "public Undo(int initiator) { super(initiator); }",
        "label": "P"
    },
    "3100": {
        "dataset": "COMP 3021",
        "project": "khheung",
        "bug_id": "4",
        "T": "void testExit() { final var gameState = mock(GameState.class); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Exit(0)); }",
        "C": "public Exit(int initiator) { super(initiator); }",
        "label": "P"
    },
    "3101": {
        "dataset": "COMP 3021",
        "project": "khheung",
        "bug_id": "5",
        "T": "void testUndoUnlimited() { final var gameState = mock(GameState.class); when(gameState.getPlayerPositionById(anyInt())).thenReturn(Position.of(0, 0)); when(gameState.getUndoQuota()).thenReturn(Optional.empty()); final var game = new SokobanGameForTesting(gameState); for (int i = 0; i < 10000; i++) { final var result = game.feedActionForProcessing(new Undo(0)); } verify(gameState, times(10000)).undo(); }",
        "C": "public TerminalRenderingEngine(PrintStream outputSteam) { this.outputSteam = outputSteam; } public Undo(int initiator) { super(initiator); }",
        "label": "F"
    },
    "3102": {
        "dataset": "COMP 3021",
        "project": "khheung",
        "bug_id": "6",
        "T": "void testPushOtherPlayerBox() { String mapText = \"\"\" 233 ###### #AB.@# #b.a.# #@...# ###### \"\"\"; final var testMap = TestHelper.parseGameMap(mapText); final var gameState = spy(new GameState(testMap)); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Move.Down(0)); verify(gameState, never()).move(any(), any()); }",
        "C": "public GameState(@NotNull GameMap map) { // DONE this.map = map; this.entities = map.getShallowCopyOfEntities(); this.undoLeft = map.getUndoLimit(); this.checkpoints = new ArrayList<>(); this.initialState = new GameCheckpoint(this.entities); } public Down(int initiator) { super(initiator); }",
        "label": "P"
    },
    "3103": {
        "dataset": "COMP 3021",
        "project": "khheung",
        "bug_id": "7",
        "T": "void testMoveNonExistingPlayer() { String mapText = \"\"\" 233 ###### #A..@# #a...# ##...# ###### \"\"\"; final var testMap = TestHelper.parseGameMap(mapText); final var gameState = spy(new GameState(testMap)); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Move.Down(23)); }",
        "C": "public GameState(@NotNull GameMap map) { // DONE this.map = map; this.entities = map.getShallowCopyOfEntities(); this.undoLeft = map.getUndoLimit(); this.checkpoints = new ArrayList<>(); this.initialState = new GameCheckpoint(this.entities); } public Down(int initiator) { super(initiator); }",
        "label": "P"
    },
    "3104": {
        "dataset": "COMP 3021",
        "project": "khheung",
        "bug_id": "8",
        "T": "void testCheckpointWhenNeed() { final var gameState = spy(new GameState(TestHelper.parseGameMap(\"\"\" 233 ###### #.Aa@# #..a@# ###### \"\"\" ))); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Move.Right(0)); verify(gameState, times(1)).checkpoint(); }",
        "C": "public GameState(@NotNull GameMap map) { // DONE this.map = map; this.entities = map.getShallowCopyOfEntities(); this.undoLeft = map.getUndoLimit(); this.checkpoints = new ArrayList<>(); this.initialState = new GameCheckpoint(this.entities); } public Right(int initiator) { super(initiator); }",
        "label": "P"
    },
    "3105": {
        "dataset": "COMP 3021",
        "project": "khheung",
        "bug_id": "9",
        "T": "void testPushBoxAgainstWall() { String mapText = \"\"\" 233 ###### #A..@# #a...# ##...# ###### \"\"\"; final var testMap = TestHelper.parseGameMap(mapText); final var gameState = spy(new GameState(testMap)); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Move.Down(0)); verify(gameState, never()).move(any(), any()); }",
        "C": "public GameState(@NotNull GameMap map) { // DONE this.map = map; this.entities = map.getShallowCopyOfEntities(); this.undoLeft = map.getUndoLimit(); this.checkpoints = new ArrayList<>(); this.initialState = new GameCheckpoint(this.entities); } public Down(int initiator) { super(initiator); }",
        "label": "P"
    },
    "3106": {
        "dataset": "COMP 3021",
        "project": "khheung",
        "bug_id": "10",
        "T": "void testCheckpointWhenNotNeed() { final var gameState = spy(new GameState(TestHelper.parseGameMap(\"\"\" 233 ###### #A.a@# #..a@# ###### \"\"\" ))); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Move.Right(0)); verify(gameState, never()).checkpoint(); } private static class SokobanGameForTesting extends AbstractSokobanGame { protected SokobanGameForTesting(GameState gameState) { super(gameState); } @Override public void run() { } public ActionResult feedActionForProcessing(Action action) { return processAction(action); } }",
        "C": "public GameState(@NotNull GameMap map) { // DONE this.map = map; this.entities = map.getShallowCopyOfEntities(); this.undoLeft = map.getUndoLimit(); this.checkpoints = new ArrayList<>(); this.initialState = new GameCheckpoint(this.entities); } public Right(int initiator) { super(initiator); } public void run() { // DONE renderingEngine.message(StringResources.GAME_READY_MESSAGE); while (true) { // Render the game renderingEngine.render(state); if (shouldStop()) break; renderingEngine.message(getUndoQuotaString()); renderingEngine.message(\">>>\"); // Process action var action = inputEngine.fetchAction(); var actionResult = processAction(action); if (actionResult instanceof ActionResult.Failed) { renderingEngine.message(((ActionResult.Failed) actionResult).getReason()); } } // Exit message renderingEngine.message(StringResources.GAME_EXIT_MESSAGE); if (state.isWin()) { renderingEngine.message(StringResources.WIN_MESSAGE); } } protected ActionResult processAction(@NotNull Action action) { // DONE return switch (action) { case Move move -> processMove(move); case Undo ignored -> { if (state.canUndo()) { state.undo(); yield new ActionResult.Success(action); } else { yield new ActionResult.Failed(action, StringResources.UNDO_QUOTA_RUN_OUT); } } case InvalidInput i -> new ActionResult.Failed(action, i.getMessage()); case Exit ignored -> { shouldStopRunning = true; yield new ActionResult.Success(action); } }; }",
        "label": "P"
    },
    "3107": {
        "dataset": "COMP 3021",
        "project": "khheung",
        "bug_id": "11",
        "T": "void testHitAnotherPlayer() { String mapText = \"\"\" 233 ###### #A..@# #B...# #ab.@# ###### \"\"\"; final var testMap = TestHelper.parseGameMap(mapText); final var gameState = spy(new GameState(testMap)); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Move.Down(0)); verify(gameState, never()).move(any(), any()); }",
        "C": "public GameState(@NotNull GameMap map) { // DONE this.map = map; this.entities = map.getShallowCopyOfEntities(); this.undoLeft = map.getUndoLimit(); this.checkpoints = new ArrayList<>(); this.initialState = new GameCheckpoint(this.entities); } public Down(int initiator) { super(initiator); }",
        "label": "P"
    },
    "3108": {
        "dataset": "COMP 3021",
        "project": "khheung",
        "bug_id": "12",
        "T": "void testUndoWithinQuota() { final var gameState = mock(GameState.class); when(gameState.getPlayerPositionById(anyInt())).thenReturn(Position.of(0, 0)); when(gameState.getUndoQuota()).thenReturn(Optional.of(1)); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Undo(0)); verify(gameState, times(1)).undo(); }",
        "C": "public Undo(int initiator) { super(initiator); }",
        "label": "F"
    },
    "3109": {
        "dataset": "COMP 3021",
        "project": "khheung",
        "bug_id": "13",
        "T": "void testInvalidInput() { final var game = new SokobanGameForTesting(mock(GameState.class)); final var message = String.valueOf(new Random().nextLong()); final var action = new InvalidInput(-1, message); final var result = game.feedActionForProcessing(action); }",
        "C": "public InvalidInput(int initiator, @NotNull String message) { super(initiator); this.message = message; }",
        "label": "P"
    },
    "3110": {
        "dataset": "COMP 3021",
        "project": "khheung",
        "bug_id": "14",
        "T": "void testUndoLimitParsing() { final var gameMap = TestHelper.parseGameMap(rectangularMap); }",
        "C": "",
        "label": "P"
    },
    "3111": {
        "dataset": "COMP 3021",
        "project": "khheung",
        "bug_id": "15",
        "T": "void testWidthForNonRectangularMap() { final var gameMap = TestHelper.parseGameMap(nonRectangularMap); }",
        "C": "",
        "label": "P"
    },
    "3112": {
        "dataset": "COMP 3021",
        "project": "khheung",
        "bug_id": "16",
        "T": "void testTwoPlayersMap() { final var twoPlayersMap = \"\"\" 233 ###### #A..@# #..B@# #....# #.a..# #..b.# ###### \"\"\"; final var gameMap = TestHelper.parseGameMap(twoPlayersMap); final var playerIds = gameMap.getPlayerIds(); final var expectedIds = new HashSet<Integer>(); expectedIds.add(0); expectedIds.add(1); }",
        "C": "public Set<Integer> getPlayerIds() { // DONE return playerIds; }",
        "label": "P"
    },
    "3113": {
        "dataset": "COMP 3021",
        "project": "khheung",
        "bug_id": "17",
        "T": "void testMapWithoutPlayer() { final var invalidMap = \"\"\" 233 ### #.# ### \"\"\"; } // @Tag(TestKind.HIDDEN) // @Test // void testUnmatchedPlayersAndBoxes() { // final var invalidMap = \"\"\" // 233 // ###### // #A..@# // #...@# // #a.b@# // #.a.@# // #..a.# // ###### // \"\"\"; // assertThrowsExactly(IllegalArgumentException.class, () -> TestHelper.parseGameMap(invalidMap)); // }",
        "C": "public TerminalRenderingEngine(PrintStream outputSteam) { this.outputSteam = outputSteam; }",
        "label": "P"
    },
    "3114": {
        "dataset": "COMP 3021",
        "project": "khheung",
        "bug_id": "18",
        "T": "void testManyPlayersMap() { final var manyPlayersMap = \"\"\" 233 ###### #A.P@@# #vCB@@# #.cpD@# #Ga.d@# #g.bV@# ###### \"\"\"; final var gameMap = TestHelper.parseGameMap(manyPlayersMap); final var playerIds = gameMap.getPlayerIds(); final var expectedIds = new HashSet<>(Arrays.asList( 0, 'P' - 'A', 'C' - 'A', 'B' - 'A', 'D' - 'A', 'G' - 'A', 'V' - 'A' )); }",
        "C": "public Set<Integer> getPlayerIds() { // DONE return playerIds; }",
        "label": "P"
    },
    "3115": {
        "dataset": "COMP 3021",
        "project": "khheung",
        "bug_id": "19",
        "T": "void testHeightForNonRectangularMap() { final var gameMap = TestHelper.parseGameMap(nonRectangularMap); }",
        "C": "",
        "label": "P"
    },
    "3116": {
        "dataset": "COMP 3021",
        "project": "khheung",
        "bug_id": "20",
        "T": "void testDuplicatedPlayers() { final var invalidMap = \"\"\" 233 ###### #A..@# #..A@# #....# #.a..# #..b.# ###### \"\"\"; }",
        "C": "",
        "label": "P"
    },
    "3117": {
        "dataset": "COMP 3021",
        "project": "khheung",
        "bug_id": "21",
        "T": "void testParseMapWithoutUndoLimit() { final var invalidMap = String.join(\"\\n\", rectangularMap.lines().skip(1).toList()); }",
        "C": "",
        "label": "P"
    },
    "3118": {
        "dataset": "COMP 3021",
        "project": "khheung",
        "bug_id": "22",
        "T": "void testInsufficientDestinations() { final var invalidMap = \"\"\" 233 ###### #A..@# #...@# #a...# #.a..# #..a.# ###### \"\"\"; }",
        "C": "",
        "label": "P"
    },
    "3119": {
        "dataset": "COMP 3021",
        "project": "khheung",
        "bug_id": "23",
        "T": "void testSuperLargeMap() { try { new GameMap(Integer.MAX_VALUE, Integer.MAX_VALUE, Collections.emptySet(), 0); } catch (OutOfMemoryError e) { throw new RuntimeException(e); } }); }",
        "C": "public GameMap(int maxWidth, int maxHeight, Set<Position> destinations, int undoLimit) { // DONE this.maxWidth = maxWidth; this.maxHeight = maxHeight; this.destinations = destinations; this.undoLimit = undoLimit; } /** * Parses the map from a string representation. * The first line is undo limit. * Starting from the second line, the game map is represented as follows, * <li># represents a {@link Wall}</li> * <li>@ represents a box destination.</li> * <li>Any upper-case letter represents a {@link Player}.</li> * <li> * Any lower-case letter represents a {@link Box} that is only movable by the player with the corresponding upper-case letter. * For instance, box \"a\" can only be moved by player \"A\" and not movable by player \"B\". * </li> * <li>. represents an {@link Empty} position in the map, meaning there is no player or box currently at this position.</li> * <p> * Notes: * <li> * There can be at most 26 players. * All implementations of classes in the hk.ust.comp3021.game package should support up to 26 players. * </li> * <li> * For simplicity, we assume the given map is bounded with a closed boundary. * There is no need to check this point. * </li> * <li> * Example maps can be found in \"src/main/resources\". * </li> * * @param mapText The string representation. * @return The parsed GameMap object. * @throws IllegalArgumentException if undo limit is negative but not -1. * @throws IllegalArgumentException if there are multiple same upper-case letters, i.e., one player can only exist at one position. * @throws IllegalArgumentException if there are no players in the map. * @throws IllegalArgumentException if the number of boxes is not equal to the number of box destinations. * @throws IllegalArgumentException if there are boxes whose {@link Box#getPlayerId()} public TerminalRenderingEngine(PrintStream outputSteam) { this.outputSteam = outputSteam; }",
        "label": "P"
    },
    "3120": {
        "dataset": "COMP 3021",
        "project": "khheung",
        "bug_id": "24",
        "T": "void testInvalidUndoLimit() { final var invalidMap = \"\"\" -233 ###### #A..@# #...@# #a.b@# #.a.@# #..a.# ###### \"\"\"; }",
        "C": "",
        "label": "P"
    },
    "3121": {
        "dataset": "COMP 3021",
        "project": "khheung",
        "bug_id": "25",
        "T": "void testEmptyMap() { final var invalidMap = \"\"; }",
        "C": "",
        "label": "P"
    },
    "3122": {
        "dataset": "COMP 3021",
        "project": "khheung",
        "bug_id": "26",
        "T": "void testMove(String input, String name, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); } private InputStream fixValueStream(String content) { final var bytes = content.getBytes(StandardCharsets.UTF_8); return new ByteArrayInputStream(bytes); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } /** * Fetch an action from user in terminal to process. * <li>All possible input values are (A, S, W, D, H, J, K, L, U, EXIT) and they should be the 1st char of the input line.</li> * <li>Input values are case insensitive (e.g. eXiT is also valid)</li> * <li>All other values are invalid input, including whitespaces (e.g. \"\\n\" and \" A\" are both invalid)</li> * * @return the user action. Returns {@link InvalidInput} public @NotNull Action fetchAction() { // Input values are case insentitive final var inputLine = terminalScanner.nextLine().toLowerCase(); // DONE return switch (inputLine) { case \"w\" -> new Move.Up(0); case \"a\" -> new Move.Left(0); case \"s\" -> new Move.Down(0); case \"d\" -> new Move.Right(0); case \"k\" -> new Move.Up(1); case \"h\" -> new Move.Left(1); case \"j\" -> new Move.Down(1); case \"l\" -> new Move.Right(1); case \"u\" -> new Undo(-1); case StringResources.EXIT_COMMAND_TEXT -> new Exit(-1); default -> new InvalidInput(-1, StringResources.INVALID_INPUT_MESSAGE); }; }",
        "label": "P"
    },
    "3123": {
        "dataset": "COMP 3021",
        "project": "khheung",
        "bug_id": "27",
        "T": "void testMove(String input, String name, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); } private InputStream fixValueStream(String content) { final var bytes = content.getBytes(StandardCharsets.UTF_8); return new ByteArrayInputStream(bytes); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } /** * Fetch an action from user in terminal to process. * <li>All possible input values are (A, S, W, D, H, J, K, L, U, EXIT) and they should be the 1st char of the input line.</li> * <li>Input values are case insensitive (e.g. eXiT is also valid)</li> * <li>All other values are invalid input, including whitespaces (e.g. \"\\n\" and \" A\" are both invalid)</li> * * @return the user action. Returns {@link InvalidInput} public @NotNull Action fetchAction() { // Input values are case insentitive final var inputLine = terminalScanner.nextLine().toLowerCase(); // DONE return switch (inputLine) { case \"w\" -> new Move.Up(0); case \"a\" -> new Move.Left(0); case \"s\" -> new Move.Down(0); case \"d\" -> new Move.Right(0); case \"k\" -> new Move.Up(1); case \"h\" -> new Move.Left(1); case \"j\" -> new Move.Down(1); case \"l\" -> new Move.Right(1); case \"u\" -> new Undo(-1); case StringResources.EXIT_COMMAND_TEXT -> new Exit(-1); default -> new InvalidInput(-1, StringResources.INVALID_INPUT_MESSAGE); }; }",
        "label": "P"
    },
    "3124": {
        "dataset": "COMP 3021",
        "project": "khheung",
        "bug_id": "28",
        "T": "void testMove(String input, String name, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); } private InputStream fixValueStream(String content) { final var bytes = content.getBytes(StandardCharsets.UTF_8); return new ByteArrayInputStream(bytes); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } /** * Fetch an action from user in terminal to process. * <li>All possible input values are (A, S, W, D, H, J, K, L, U, EXIT) and they should be the 1st char of the input line.</li> * <li>Input values are case insensitive (e.g. eXiT is also valid)</li> * <li>All other values are invalid input, including whitespaces (e.g. \"\\n\" and \" A\" are both invalid)</li> * * @return the user action. Returns {@link InvalidInput} public @NotNull Action fetchAction() { // Input values are case insentitive final var inputLine = terminalScanner.nextLine().toLowerCase(); // DONE return switch (inputLine) { case \"w\" -> new Move.Up(0); case \"a\" -> new Move.Left(0); case \"s\" -> new Move.Down(0); case \"d\" -> new Move.Right(0); case \"k\" -> new Move.Up(1); case \"h\" -> new Move.Left(1); case \"j\" -> new Move.Down(1); case \"l\" -> new Move.Right(1); case \"u\" -> new Undo(-1); case StringResources.EXIT_COMMAND_TEXT -> new Exit(-1); default -> new InvalidInput(-1, StringResources.INVALID_INPUT_MESSAGE); }; }",
        "label": "P"
    },
    "3125": {
        "dataset": "COMP 3021",
        "project": "khheung",
        "bug_id": "29",
        "T": "void testMove(String input, String name, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); } private InputStream fixValueStream(String content) { final var bytes = content.getBytes(StandardCharsets.UTF_8); return new ByteArrayInputStream(bytes); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } /** * Fetch an action from user in terminal to process. * <li>All possible input values are (A, S, W, D, H, J, K, L, U, EXIT) and they should be the 1st char of the input line.</li> * <li>Input values are case insensitive (e.g. eXiT is also valid)</li> * <li>All other values are invalid input, including whitespaces (e.g. \"\\n\" and \" A\" are both invalid)</li> * * @return the user action. Returns {@link InvalidInput} public @NotNull Action fetchAction() { // Input values are case insentitive final var inputLine = terminalScanner.nextLine().toLowerCase(); // DONE return switch (inputLine) { case \"w\" -> new Move.Up(0); case \"a\" -> new Move.Left(0); case \"s\" -> new Move.Down(0); case \"d\" -> new Move.Right(0); case \"k\" -> new Move.Up(1); case \"h\" -> new Move.Left(1); case \"j\" -> new Move.Down(1); case \"l\" -> new Move.Right(1); case \"u\" -> new Undo(-1); case StringResources.EXIT_COMMAND_TEXT -> new Exit(-1); default -> new InvalidInput(-1, StringResources.INVALID_INPUT_MESSAGE); }; }",
        "label": "P"
    },
    "3126": {
        "dataset": "COMP 3021",
        "project": "khheung",
        "bug_id": "30",
        "T": "void testMove(String input, String name, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); } private InputStream fixValueStream(String content) { final var bytes = content.getBytes(StandardCharsets.UTF_8); return new ByteArrayInputStream(bytes); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } /** * Fetch an action from user in terminal to process. * <li>All possible input values are (A, S, W, D, H, J, K, L, U, EXIT) and they should be the 1st char of the input line.</li> * <li>Input values are case insensitive (e.g. eXiT is also valid)</li> * <li>All other values are invalid input, including whitespaces (e.g. \"\\n\" and \" A\" are both invalid)</li> * * @return the user action. Returns {@link InvalidInput} public @NotNull Action fetchAction() { // Input values are case insentitive final var inputLine = terminalScanner.nextLine().toLowerCase(); // DONE return switch (inputLine) { case \"w\" -> new Move.Up(0); case \"a\" -> new Move.Left(0); case \"s\" -> new Move.Down(0); case \"d\" -> new Move.Right(0); case \"k\" -> new Move.Up(1); case \"h\" -> new Move.Left(1); case \"j\" -> new Move.Down(1); case \"l\" -> new Move.Right(1); case \"u\" -> new Undo(-1); case StringResources.EXIT_COMMAND_TEXT -> new Exit(-1); default -> new InvalidInput(-1, StringResources.INVALID_INPUT_MESSAGE); }; }",
        "label": "P"
    },
    "3127": {
        "dataset": "COMP 3021",
        "project": "khheung",
        "bug_id": "31",
        "T": "void testMove(String input, String name, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); } private InputStream fixValueStream(String content) { final var bytes = content.getBytes(StandardCharsets.UTF_8); return new ByteArrayInputStream(bytes); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } /** * Fetch an action from user in terminal to process. * <li>All possible input values are (A, S, W, D, H, J, K, L, U, EXIT) and they should be the 1st char of the input line.</li> * <li>Input values are case insensitive (e.g. eXiT is also valid)</li> * <li>All other values are invalid input, including whitespaces (e.g. \"\\n\" and \" A\" are both invalid)</li> * * @return the user action. Returns {@link InvalidInput} public @NotNull Action fetchAction() { // Input values are case insentitive final var inputLine = terminalScanner.nextLine().toLowerCase(); // DONE return switch (inputLine) { case \"w\" -> new Move.Up(0); case \"a\" -> new Move.Left(0); case \"s\" -> new Move.Down(0); case \"d\" -> new Move.Right(0); case \"k\" -> new Move.Up(1); case \"h\" -> new Move.Left(1); case \"j\" -> new Move.Down(1); case \"l\" -> new Move.Right(1); case \"u\" -> new Undo(-1); case StringResources.EXIT_COMMAND_TEXT -> new Exit(-1); default -> new InvalidInput(-1, StringResources.INVALID_INPUT_MESSAGE); }; }",
        "label": "P"
    },
    "3128": {
        "dataset": "COMP 3021",
        "project": "khheung",
        "bug_id": "32",
        "T": "void testMove(String input, String name, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); } private InputStream fixValueStream(String content) { final var bytes = content.getBytes(StandardCharsets.UTF_8); return new ByteArrayInputStream(bytes); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } /** * Fetch an action from user in terminal to process. * <li>All possible input values are (A, S, W, D, H, J, K, L, U, EXIT) and they should be the 1st char of the input line.</li> * <li>Input values are case insensitive (e.g. eXiT is also valid)</li> * <li>All other values are invalid input, including whitespaces (e.g. \"\\n\" and \" A\" are both invalid)</li> * * @return the user action. Returns {@link InvalidInput} public @NotNull Action fetchAction() { // Input values are case insentitive final var inputLine = terminalScanner.nextLine().toLowerCase(); // DONE return switch (inputLine) { case \"w\" -> new Move.Up(0); case \"a\" -> new Move.Left(0); case \"s\" -> new Move.Down(0); case \"d\" -> new Move.Right(0); case \"k\" -> new Move.Up(1); case \"h\" -> new Move.Left(1); case \"j\" -> new Move.Down(1); case \"l\" -> new Move.Right(1); case \"u\" -> new Undo(-1); case StringResources.EXIT_COMMAND_TEXT -> new Exit(-1); default -> new InvalidInput(-1, StringResources.INVALID_INPUT_MESSAGE); }; }",
        "label": "P"
    },
    "3129": {
        "dataset": "COMP 3021",
        "project": "khheung",
        "bug_id": "33",
        "T": "void testMove(String input, String name, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); } private InputStream fixValueStream(String content) { final var bytes = content.getBytes(StandardCharsets.UTF_8); return new ByteArrayInputStream(bytes); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } /** * Fetch an action from user in terminal to process. * <li>All possible input values are (A, S, W, D, H, J, K, L, U, EXIT) and they should be the 1st char of the input line.</li> * <li>Input values are case insensitive (e.g. eXiT is also valid)</li> * <li>All other values are invalid input, including whitespaces (e.g. \"\\n\" and \" A\" are both invalid)</li> * * @return the user action. Returns {@link InvalidInput} public @NotNull Action fetchAction() { // Input values are case insentitive final var inputLine = terminalScanner.nextLine().toLowerCase(); // DONE return switch (inputLine) { case \"w\" -> new Move.Up(0); case \"a\" -> new Move.Left(0); case \"s\" -> new Move.Down(0); case \"d\" -> new Move.Right(0); case \"k\" -> new Move.Up(1); case \"h\" -> new Move.Left(1); case \"j\" -> new Move.Down(1); case \"l\" -> new Move.Right(1); case \"u\" -> new Undo(-1); case StringResources.EXIT_COMMAND_TEXT -> new Exit(-1); default -> new InvalidInput(-1, StringResources.INVALID_INPUT_MESSAGE); }; }",
        "label": "P"
    },
    "3130": {
        "dataset": "COMP 3021",
        "project": "khheung",
        "bug_id": "34",
        "T": "void testUndo(String input, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } /** * Fetch an action from user in terminal to process. * <li>All possible input values are (A, S, W, D, H, J, K, L, U, EXIT) and they should be the 1st char of the input line.</li> * <li>Input values are case insensitive (e.g. eXiT is also valid)</li> * <li>All other values are invalid input, including whitespaces (e.g. \"\\n\" and \" A\" are both invalid)</li> * * @return the user action. Returns {@link InvalidInput} public @NotNull Action fetchAction() { // Input values are case insentitive final var inputLine = terminalScanner.nextLine().toLowerCase(); // DONE return switch (inputLine) { case \"w\" -> new Move.Up(0); case \"a\" -> new Move.Left(0); case \"s\" -> new Move.Down(0); case \"d\" -> new Move.Right(0); case \"k\" -> new Move.Up(1); case \"h\" -> new Move.Left(1); case \"j\" -> new Move.Down(1); case \"l\" -> new Move.Right(1); case \"u\" -> new Undo(-1); case StringResources.EXIT_COMMAND_TEXT -> new Exit(-1); default -> new InvalidInput(-1, StringResources.INVALID_INPUT_MESSAGE); }; }",
        "label": "P"
    },
    "3131": {
        "dataset": "COMP 3021",
        "project": "khheung",
        "bug_id": "35",
        "T": "void testInvalidInput() { final var inputStream = fixValueStream(\"blah blah\"); final var inputEngine = new TerminalInputEngine(inputStream); final var action = inputEngine.fetchAction(); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } /** * Fetch an action from user in terminal to process. * <li>All possible input values are (A, S, W, D, H, J, K, L, U, EXIT) and they should be the 1st char of the input line.</li> * <li>Input values are case insensitive (e.g. eXiT is also valid)</li> * <li>All other values are invalid input, including whitespaces (e.g. \"\\n\" and \" A\" are both invalid)</li> * * @return the user action. Returns {@link InvalidInput} public @NotNull Action fetchAction() { // Input values are case insentitive final var inputLine = terminalScanner.nextLine().toLowerCase(); // DONE return switch (inputLine) { case \"w\" -> new Move.Up(0); case \"a\" -> new Move.Left(0); case \"s\" -> new Move.Down(0); case \"d\" -> new Move.Right(0); case \"k\" -> new Move.Up(1); case \"h\" -> new Move.Left(1); case \"j\" -> new Move.Down(1); case \"l\" -> new Move.Right(1); case \"u\" -> new Undo(-1); case StringResources.EXIT_COMMAND_TEXT -> new Exit(-1); default -> new InvalidInput(-1, StringResources.INVALID_INPUT_MESSAGE); }; }",
        "label": "P"
    },
    "3132": {
        "dataset": "COMP 3021",
        "project": "khheung",
        "bug_id": "36",
        "T": "void testUndoWhenThereIsNoMove() { final var gameState = new GameState(TestHelper.parseGameMap(\"\"\" 233 ###### #A.a@# #..a@# ###### \"\"\" )); gameState.undo(); } private Entity generateEntity(int key) { return switch (key % 4) { case 0 -> new Box(0); case 1 -> new Empty(); case 2 -> new Player(0); case 3 -> new Wall(); default -> throw new ShouldNotReachException(); }; }",
        "C": "public GameState(@NotNull GameMap map) { // DONE this.map = map; this.entities = map.getShallowCopyOfEntities(); this.undoLeft = map.getUndoLimit(); this.checkpoints = new ArrayList<>(); this.initialState = new GameCheckpoint(this.entities); } public void undo() { // DONE // Decrease undo quota by one. Do not decrease if a box is never moved. if (undoLeft.isPresent() && !checkpoints.isEmpty()) { undoLeft = Optional.of(undoLeft.get() - 1); } // Revert to checkpoint. Suppose `cp1` and `cp2` are recorded. Perform `undo` will revert game state to `cp1`. if (!checkpoints.isEmpty()) { checkpoints.remove(checkpoints.size() - 1); } var checkpoint = checkpoints.isEmpty() ? initialState : checkpoints.get(checkpoints.size() - 1); putEntities(checkpoint.entities); } /** * Get the maximum width of the game map. * This should be the same as that in {@link GameMap} public TerminalRenderingEngine(PrintStream outputSteam) { this.outputSteam = outputSteam; } public Box(int playerId) { this.playerId = playerId; } public Player(int id) { this.id = id; } public ShouldNotReachException() { super(\"This branch should not be reached.\"); }",
        "label": "P"
    },
    "3133": {
        "dataset": "COMP 3021",
        "project": "khheung",
        "bug_id": "37",
        "T": "void testGetUndoUnlimited() { final var gameState = new GameState(TestHelper.parseGameMap(\"\"\" -1 ###### #.Aa@# #..a@# ###### \"\"\" )); }",
        "C": "public GameState(@NotNull GameMap map) { // DONE this.map = map; this.entities = map.getShallowCopyOfEntities(); this.undoLeft = map.getUndoLimit(); this.checkpoints = new ArrayList<>(); this.initialState = new GameCheckpoint(this.entities); }",
        "label": "P"
    },
    "3134": {
        "dataset": "COMP 3021",
        "project": "khheung",
        "bug_id": "38",
        "T": "void testMapCopying() { final var maxWidth = 2333; final var maxHeight = 2333; final var random = new Random(); final var randomEntities = Stream.generate(() -> Position.of(random.nextInt(maxWidth), random.nextInt(maxHeight))) .distinct() .limit(100) .collect(Collectors.toMap(Function.identity(), it -> generateEntity(it.x()))); final var firstPos = randomEntities.keySet().stream().findFirst(); final var gameMap = new GameMap(maxWidth, maxHeight, Collections.singleton(firstPos.get()), 233); randomEntities.forEach(gameMap::putEntity); final var gameState = new GameState(gameMap); final var randomPosition = randomEntities.keySet().stream().findAny(); gameMap.putEntity(randomPosition.get(), new Empty()); randomEntities.forEach((p, e) -> assertEquals(e, gameState.getEntity(p))); }",
        "C": "public static @NotNull Position of(int x, int y) { return new Position(x, y); } public GameMap(int maxWidth, int maxHeight, Set<Position> destinations, int undoLimit) { // DONE this.maxWidth = maxWidth; this.maxHeight = maxHeight; this.destinations = destinations; this.undoLimit = undoLimit; } /** * Parses the map from a string representation. * The first line is undo limit. * Starting from the second line, the game map is represented as follows, * <li># represents a {@link Wall}</li> * <li>@ represents a box destination.</li> * <li>Any upper-case letter represents a {@link Player}.</li> * <li> * Any lower-case letter represents a {@link Box} that is only movable by the player with the corresponding upper-case letter. * For instance, box \"a\" can only be moved by player \"A\" and not movable by player \"B\". * </li> * <li>. represents an {@link Empty} position in the map, meaning there is no player or box currently at this position.</li> * <p> * Notes: * <li> * There can be at most 26 players. * All implementations of classes in the hk.ust.comp3021.game package should support up to 26 players. * </li> * <li> * For simplicity, we assume the given map is bounded with a closed boundary. * There is no need to check this point. * </li> * <li> * Example maps can be found in \"src/main/resources\". * </li> * * @param mapText The string representation. * @return The parsed GameMap object. * @throws IllegalArgumentException if undo limit is negative but not -1. * @throws IllegalArgumentException if there are multiple same upper-case letters, i.e., one player can only exist at one position. * @throws IllegalArgumentException if there are no players in the map. * @throws IllegalArgumentException if the number of boxes is not equal to the number of box destinations. * @throws IllegalArgumentException if there are boxes whose {@link Box#getPlayerId()} public GameState(@NotNull GameMap map) { // DONE this.map = map; this.entities = map.getShallowCopyOfEntities(); this.undoLeft = map.getUndoLimit(); this.checkpoints = new ArrayList<>(); this.initialState = new GameCheckpoint(this.entities); } public void putEntity(Position position, Entity entity) { entities[position.y()][position.x()] = entity; } /** * Updates the {@link GameState#entities} public @Nullable Entity getEntity(@NotNull Position position) { // DONE return entities[position.y()][position.x()]; }",
        "label": "F"
    },
    "3135": {
        "dataset": "COMP 3021",
        "project": "khheung",
        "bug_id": "39",
        "T": "void testUndoWhenThereIsMoveButNoCheckpoint() { final var gameState = new GameState(TestHelper.parseGameMap(\"\"\" 233 ###### #A.a@# #..a@# ###### \"\"\" )); gameState.move(Position.of(1, 1), Position.of(2, 1)); gameState.undo(); }",
        "C": "public GameState(@NotNull GameMap map) { // DONE this.map = map; this.entities = map.getShallowCopyOfEntities(); this.undoLeft = map.getUndoLimit(); this.checkpoints = new ArrayList<>(); this.initialState = new GameCheckpoint(this.entities); } public void move(Position from, Position to) { // DONE var moveTarget = getEntity(from); putEntity(to, moveTarget); putEntity(from, new Empty()); } /** * Record a checkpoint of the game state, including: * <li>All current positions of entities in the game map.</li> * <li>Current undo quota</li> * <p> * Checkpoint is used in {@link GameState#undo()} public static @NotNull Position of(int x, int y) { return new Position(x, y); } public void undo() { // DONE // Decrease undo quota by one. Do not decrease if a box is never moved. if (undoLeft.isPresent() && !checkpoints.isEmpty()) { undoLeft = Optional.of(undoLeft.get() - 1); } // Revert to checkpoint. Suppose `cp1` and `cp2` are recorded. Perform `undo` will revert game state to `cp1`. if (!checkpoints.isEmpty()) { checkpoints.remove(checkpoints.size() - 1); } var checkpoint = checkpoints.isEmpty() ? initialState : checkpoints.get(checkpoints.size() - 1); putEntities(checkpoint.entities); } /** * Get the maximum width of the game map. * This should be the same as that in {@link GameMap}",
        "label": "P"
    },
    "3136": {
        "dataset": "COMP 3021",
        "project": "khheung",
        "bug_id": "40",
        "T": "void testGameExit() { final var gameState = mock(GameState.class); final var inputEngine = mock(TerminalInputEngine.class); final var renderingEngine = mock(TerminalRenderingEngine.class); when(gameState.isWin()).thenReturn(false, false, false); when(inputEngine.fetchAction()) .thenReturn(new InvalidInput(0, \"\"), new InvalidInput(0, \"\"), new Exit(0)); final var game = new TerminalSokobanGame(gameState, inputEngine, renderingEngine); game.run(); verify(renderingEngine, atLeastOnce()).message(any()); }",
        "C": "public InvalidInput(int initiator, @NotNull String message) { super(initiator); this.message = message; } public Exit(int initiator) { super(initiator); } public TerminalSokobanGame(GameState gameState, TerminalInputEngine inputEngine, TerminalRenderingEngine renderingEngine) { super(gameState); this.inputEngine = inputEngine; this.renderingEngine = renderingEngine; // DONE if (gameState.getAllPlayerPositions().size() > 2) { throw new IllegalArgumentException(\"TerminalSokobanGame only support at most two players.\"); } } public void run() { // DONE renderingEngine.message(StringResources.GAME_READY_MESSAGE); while (true) { // Render the game renderingEngine.render(state); if (shouldStop()) break; renderingEngine.message(getUndoQuotaString()); renderingEngine.message(\">>>\"); // Process action var action = inputEngine.fetchAction(); var actionResult = processAction(action); if (actionResult instanceof ActionResult.Failed) { renderingEngine.message(((ActionResult.Failed) actionResult).getReason()); } } // Exit message renderingEngine.message(StringResources.GAME_EXIT_MESSAGE); if (state.isWin()) { renderingEngine.message(StringResources.WIN_MESSAGE); } }",
        "label": "P"
    },
    "3137": {
        "dataset": "COMP 3021",
        "project": "khheung",
        "bug_id": "41",
        "T": "void testGameWin() { final var gameState = mock(GameState.class); final var inputEngine = mock(TerminalInputEngine.class); final var renderingEngine = mock(TerminalRenderingEngine.class); when(gameState.isWin()).thenReturn(false, false, false, true); when(inputEngine.fetchAction()) .thenReturn(new InvalidInput(0, \"\")); final var game = new TerminalSokobanGame(gameState, inputEngine, renderingEngine); game.run(); verify(gameState, atLeastOnce()).isWin(); verify(renderingEngine, atLeastOnce()).message(any()); }",
        "C": "public InvalidInput(int initiator, @NotNull String message) { super(initiator); this.message = message; } public TerminalSokobanGame(GameState gameState, TerminalInputEngine inputEngine, TerminalRenderingEngine renderingEngine) { super(gameState); this.inputEngine = inputEngine; this.renderingEngine = renderingEngine; // DONE if (gameState.getAllPlayerPositions().size() > 2) { throw new IllegalArgumentException(\"TerminalSokobanGame only support at most two players.\"); } } public void run() { // DONE renderingEngine.message(StringResources.GAME_READY_MESSAGE); while (true) { // Render the game renderingEngine.render(state); if (shouldStop()) break; renderingEngine.message(getUndoQuotaString()); renderingEngine.message(\">>>\"); // Process action var action = inputEngine.fetchAction(); var actionResult = processAction(action); if (actionResult instanceof ActionResult.Failed) { renderingEngine.message(((ActionResult.Failed) actionResult).getReason()); } } // Exit message renderingEngine.message(StringResources.GAME_EXIT_MESSAGE); if (state.isWin()) { renderingEngine.message(StringResources.WIN_MESSAGE); } }",
        "label": "P"
    },
    "3138": {
        "dataset": "COMP 3021",
        "project": "khheung",
        "bug_id": "42",
        "T": "void testMoreThanTwoPlayers() { final var gameState = mock(GameState.class); final var inputEngine = mock(TerminalInputEngine.class); final var renderingEngine = mock(TerminalRenderingEngine.class); when(gameState.getAllPlayerPositions()).thenReturn(new HashSet<>(Arrays.asList(Position.of(1, 1), Position.of(1, 2), Position.of(1, 3)))); }",
        "C": "public static @NotNull Position of(int x, int y) { return new Position(x, y); }",
        "label": "P"
    },
    "3139": {
        "dataset": "COMP 3021",
        "project": "chlibf",
        "bug_id": "0",
        "T": "void moveUp() { Position.of(233, 232), new Move.Up(-1).nextPosition(pos) ); }",
        "C": "public static @NotNull Position of(int x, int y) { return new Position(x, y); } public Up(int initiator) { super(initiator); }",
        "label": "P"
    },
    "3140": {
        "dataset": "COMP 3021",
        "project": "chlibf",
        "bug_id": "1",
        "T": "void moveDown() { Position.of(233, 234), new Move.Down(-1).nextPosition(pos) ); }",
        "C": "public static @NotNull Position of(int x, int y) { return new Position(x, y); } public Down(int initiator) { super(initiator); }",
        "label": "P"
    },
    "3141": {
        "dataset": "COMP 3021",
        "project": "chlibf",
        "bug_id": "2",
        "T": "void moveRight() { Position.of(234, 233), new Move.Right(-1).nextPosition(pos) ); }",
        "C": "public static @NotNull Position of(int x, int y) { return new Position(x, y); } public Right(int initiator) { super(initiator); }",
        "label": "P"
    },
    "3142": {
        "dataset": "COMP 3021",
        "project": "chlibf",
        "bug_id": "3",
        "T": "void testExceedingUndoQuota() { final var gameState = mock(GameState.class); when(gameState.getPlayerPositionById(anyInt())).thenReturn(Position.of(0, 0)); when(gameState.getUndoQuota()).thenReturn(Optional.of(0)); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Undo(0)); }",
        "C": "public Undo(int initiator) { super(initiator); }",
        "label": "F"
    },
    "3143": {
        "dataset": "COMP 3021",
        "project": "chlibf",
        "bug_id": "4",
        "T": "void testExit() { final var gameState = mock(GameState.class); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Exit(0)); }",
        "C": "public Exit(int initiator) { super(initiator); }",
        "label": "P"
    },
    "3144": {
        "dataset": "COMP 3021",
        "project": "chlibf",
        "bug_id": "5",
        "T": "void testUndoUnlimited() { final var gameState = mock(GameState.class); when(gameState.getPlayerPositionById(anyInt())).thenReturn(Position.of(0, 0)); when(gameState.getUndoQuota()).thenReturn(Optional.empty()); final var game = new SokobanGameForTesting(gameState); for (int i = 0; i < 10000; i++) { final var result = game.feedActionForProcessing(new Undo(0)); } verify(gameState, times(10000)).undo(); }",
        "C": "public TerminalRenderingEngine(PrintStream outputSteam) { this.outputSteam = outputSteam; } public Undo(int initiator) { super(initiator); }",
        "label": "F"
    },
    "3145": {
        "dataset": "COMP 3021",
        "project": "chlibf",
        "bug_id": "6",
        "T": "void testPushOtherPlayerBox() { String mapText = \"\"\" 233 ###### #AB.@# #b.a.# #@...# ###### \"\"\"; final var testMap = TestHelper.parseGameMap(mapText); final var gameState = spy(new GameState(testMap)); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Move.Down(0)); verify(gameState, never()).move(any(), any()); }",
        "C": "public GameState(@NotNull GameMap map) { // TODO Map = map; Destinations = map.getDestinations(); MaxWidth = map.getMaxWidth(); MaxHeight = map.getMaxHeight(); Undolimit = map.getUndoLimit(); stext = map.gettingMap().clone(); checkpoint.put(0, stext.clone()); } public Down(int initiator) { super(initiator); }",
        "label": "P"
    },
    "3146": {
        "dataset": "COMP 3021",
        "project": "chlibf",
        "bug_id": "7",
        "T": "void testMoveNonExistingPlayer() { String mapText = \"\"\" 233 ###### #A..@# #a...# ##...# ###### \"\"\"; final var testMap = TestHelper.parseGameMap(mapText); final var gameState = spy(new GameState(testMap)); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Move.Down(23)); }",
        "C": "public GameState(@NotNull GameMap map) { // TODO Map = map; Destinations = map.getDestinations(); MaxWidth = map.getMaxWidth(); MaxHeight = map.getMaxHeight(); Undolimit = map.getUndoLimit(); stext = map.gettingMap().clone(); checkpoint.put(0, stext.clone()); } public Down(int initiator) { super(initiator); }",
        "label": "F"
    },
    "3147": {
        "dataset": "COMP 3021",
        "project": "chlibf",
        "bug_id": "8",
        "T": "void testCheckpointWhenNeed() { final var gameState = spy(new GameState(TestHelper.parseGameMap(\"\"\" 233 ###### #.Aa@# #..a@# ###### \"\"\" ))); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Move.Right(0)); verify(gameState, times(1)).checkpoint(); }",
        "C": "public GameState(@NotNull GameMap map) { // TODO Map = map; Destinations = map.getDestinations(); MaxWidth = map.getMaxWidth(); MaxHeight = map.getMaxHeight(); Undolimit = map.getUndoLimit(); stext = map.gettingMap().clone(); checkpoint.put(0, stext.clone()); } public Right(int initiator) { super(initiator); }",
        "label": "P"
    },
    "3148": {
        "dataset": "COMP 3021",
        "project": "chlibf",
        "bug_id": "9",
        "T": "void testPushBoxAgainstWall() { String mapText = \"\"\" 233 ###### #A..@# #a...# ##...# ###### \"\"\"; final var testMap = TestHelper.parseGameMap(mapText); final var gameState = spy(new GameState(testMap)); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Move.Down(0)); verify(gameState, never()).move(any(), any()); }",
        "C": "public GameState(@NotNull GameMap map) { // TODO Map = map; Destinations = map.getDestinations(); MaxWidth = map.getMaxWidth(); MaxHeight = map.getMaxHeight(); Undolimit = map.getUndoLimit(); stext = map.gettingMap().clone(); checkpoint.put(0, stext.clone()); } public Down(int initiator) { super(initiator); }",
        "label": "P"
    },
    "3149": {
        "dataset": "COMP 3021",
        "project": "chlibf",
        "bug_id": "10",
        "T": "void testCheckpointWhenNotNeed() { final var gameState = spy(new GameState(TestHelper.parseGameMap(\"\"\" 233 ###### #A.a@# #..a@# ###### \"\"\" ))); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Move.Right(0)); verify(gameState, never()).checkpoint(); } private static class SokobanGameForTesting extends AbstractSokobanGame { protected SokobanGameForTesting(GameState gameState) { super(gameState); } @Override public void run() { } public ActionResult feedActionForProcessing(Action action) { return processAction(action); } }",
        "C": "public GameState(@NotNull GameMap map) { // TODO Map = map; Destinations = map.getDestinations(); MaxWidth = map.getMaxWidth(); MaxHeight = map.getMaxHeight(); Undolimit = map.getUndoLimit(); stext = map.gettingMap().clone(); checkpoint.put(0, stext.clone()); } public Right(int initiator) { super(initiator); } public void run() { // TODO // keep checking the status of the game while(shouldStop() == false) { int targetquota = 0; if(state.getUndoQuota().isPresent() == true){ targetquota = state.getUndoQuota().get(); } else{ targetquota = 0; } renderingEngine.message(\"Undo Quota:\" + targetquota); renderingEngine.render(state); } renderingEngine.message(\"Game exits.\"); } protected ActionResult processAction(@NotNull Action action) { // TODO Optional<Integer> undonumber = state.getUndoQuota(); String reason = \"\"; boolean result = false; if (action.getClass().getSimpleName().equals(\"InvalidInput\")){ return new ActionResult.Failed(action,((InvalidInput)action).getMessage()); } else { if (Move.class.isAssignableFrom(action.getClass()) == true){ int initnum = action.getInitiator(); Position targetpos = ((Move)action).nextPosition(state.getPlayerPositionById(initnum)); Entity entity = state.getEntity(targetpos); if(Empty.class.isAssignableFrom(entity.getClass()) == true) { result = true; state.move(state.getPlayerPositionById(initnum), targetpos); } else if (Box.class.isAssignableFrom(entity.getClass()) == true && ((Box)entity).getPlayerId() == initnum) { Position boxpos = ((Move)action).nextPosition(targetpos); Entity boxentity = state.getEntity(boxpos); if(Empty.class.isAssignableFrom(boxentity.getClass()) == true){ result = true; state.move(targetpos, boxpos); state.move(state.getPlayerPositionById(initnum), targetpos); state.checkpoint(); } else{ reason = \"Failed to push the box.\"; } } else if(Wall.class.isAssignableFrom(entity.getClass()) == true){ reason = \"You hit a wall.\"; } else{ reason = \"Failed to push the box.\"; } } if (Undo.class.isAssignableFrom(action.getClass()) == true){ if ((undonumber.isPresent()) == true){ result = true; state.undo(); } else{ reason = \"You have run out of your undo quota.\"; } } if ((Exit.class.isAssignableFrom(action.getClass())) == true){ stopRunning = result = true; } } return (result == true) ? new ActionResult.Success(action) : new ActionResult.Failed(action,reason); }",
        "label": "P"
    },
    "3150": {
        "dataset": "COMP 3021",
        "project": "chlibf",
        "bug_id": "11",
        "T": "void testHitAnotherPlayer() { String mapText = \"\"\" 233 ###### #A..@# #B...# #ab.@# ###### \"\"\"; final var testMap = TestHelper.parseGameMap(mapText); final var gameState = spy(new GameState(testMap)); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Move.Down(0)); verify(gameState, never()).move(any(), any()); }",
        "C": "public GameState(@NotNull GameMap map) { // TODO Map = map; Destinations = map.getDestinations(); MaxWidth = map.getMaxWidth(); MaxHeight = map.getMaxHeight(); Undolimit = map.getUndoLimit(); stext = map.gettingMap().clone(); checkpoint.put(0, stext.clone()); } public Down(int initiator) { super(initiator); }",
        "label": "P"
    },
    "3151": {
        "dataset": "COMP 3021",
        "project": "chlibf",
        "bug_id": "12",
        "T": "void testUndoWithinQuota() { final var gameState = mock(GameState.class); when(gameState.getPlayerPositionById(anyInt())).thenReturn(Position.of(0, 0)); when(gameState.getUndoQuota()).thenReturn(Optional.of(1)); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Undo(0)); verify(gameState, times(1)).undo(); }",
        "C": "public Undo(int initiator) { super(initiator); }",
        "label": "P"
    },
    "3152": {
        "dataset": "COMP 3021",
        "project": "chlibf",
        "bug_id": "13",
        "T": "void testInvalidInput() { final var game = new SokobanGameForTesting(mock(GameState.class)); final var message = String.valueOf(new Random().nextLong()); final var action = new InvalidInput(-1, message); final var result = game.feedActionForProcessing(action); }",
        "C": "public InvalidInput(int initiator, @NotNull String message) { super(initiator); this.message = message; }",
        "label": "P"
    },
    "3153": {
        "dataset": "COMP 3021",
        "project": "chlibf",
        "bug_id": "14",
        "T": "void testUndoLimitParsing() { final var gameMap = TestHelper.parseGameMap(rectangularMap); }",
        "C": "",
        "label": "P"
    },
    "3154": {
        "dataset": "COMP 3021",
        "project": "chlibf",
        "bug_id": "15",
        "T": "void testWidthForNonRectangularMap() { final var gameMap = TestHelper.parseGameMap(nonRectangularMap); }",
        "C": "",
        "label": "P"
    },
    "3155": {
        "dataset": "COMP 3021",
        "project": "chlibf",
        "bug_id": "16",
        "T": "void testTwoPlayersMap() { final var twoPlayersMap = \"\"\" 233 ###### #A..@# #..B@# #....# #.a..# #..b.# ###### \"\"\"; final var gameMap = TestHelper.parseGameMap(twoPlayersMap); final var playerIds = gameMap.getPlayerIds(); final var expectedIds = new HashSet<Integer>(); expectedIds.add(0); expectedIds.add(1); }",
        "C": "public Set<Integer> getPlayerIds() { // TODO return playerid; }",
        "label": "F"
    },
    "3156": {
        "dataset": "COMP 3021",
        "project": "chlibf",
        "bug_id": "17",
        "T": "void testMapWithoutPlayer() { final var invalidMap = \"\"\" 233 ### #.# ### \"\"\"; } // @Tag(TestKind.HIDDEN) // @Test // void testUnmatchedPlayersAndBoxes() { // final var invalidMap = \"\"\" // 233 // ###### // #A..@# // #...@# // #a.b@# // #.a.@# // #..a.# // ###### // \"\"\"; // assertThrowsExactly(IllegalArgumentException.class, () -> TestHelper.parseGameMap(invalidMap)); // }",
        "C": "public TerminalRenderingEngine(PrintStream outputSteam) { this.outputSteam = outputSteam; }",
        "label": "P"
    },
    "3157": {
        "dataset": "COMP 3021",
        "project": "chlibf",
        "bug_id": "18",
        "T": "void testManyPlayersMap() { final var manyPlayersMap = \"\"\" 233 ###### #A.P@@# #vCB@@# #.cpD@# #Ga.d@# #g.bV@# ###### \"\"\"; final var gameMap = TestHelper.parseGameMap(manyPlayersMap); final var playerIds = gameMap.getPlayerIds(); final var expectedIds = new HashSet<>(Arrays.asList( 0, 'P' - 'A', 'C' - 'A', 'B' - 'A', 'D' - 'A', 'G' - 'A', 'V' - 'A' )); }",
        "C": "public Set<Integer> getPlayerIds() { // TODO return playerid; }",
        "label": "F"
    },
    "3158": {
        "dataset": "COMP 3021",
        "project": "chlibf",
        "bug_id": "19",
        "T": "void testHeightForNonRectangularMap() { final var gameMap = TestHelper.parseGameMap(nonRectangularMap); }",
        "C": "",
        "label": "P"
    },
    "3159": {
        "dataset": "COMP 3021",
        "project": "chlibf",
        "bug_id": "20",
        "T": "void testDuplicatedPlayers() { final var invalidMap = \"\"\" 233 ###### #A..@# #..A@# #....# #.a..# #..b.# ###### \"\"\"; }",
        "C": "",
        "label": "P"
    },
    "3160": {
        "dataset": "COMP 3021",
        "project": "chlibf",
        "bug_id": "21",
        "T": "void testParseMapWithoutUndoLimit() { final var invalidMap = String.join(\"\\n\", rectangularMap.lines().skip(1).toList()); }",
        "C": "",
        "label": "P"
    },
    "3161": {
        "dataset": "COMP 3021",
        "project": "chlibf",
        "bug_id": "22",
        "T": "void testInsufficientDestinations() { final var invalidMap = \"\"\" 233 ###### #A..@# #...@# #a...# #.a..# #..a.# ###### \"\"\"; }",
        "C": "",
        "label": "P"
    },
    "3162": {
        "dataset": "COMP 3021",
        "project": "chlibf",
        "bug_id": "23",
        "T": "void testSuperLargeMap() { try { new GameMap(Integer.MAX_VALUE, Integer.MAX_VALUE, Collections.emptySet(), 0); } catch (OutOfMemoryError e) { throw new RuntimeException(e); } }); }",
        "C": "public GameMap(int maxWidth, int maxHeight, Set<Position> destinations, int undoLimit) { // TODO this.MaxWidth = maxWidth; this.Maxheight = maxHeight; this.Destinations = destinations; this.Undolimit = undoLimit; } /** * Parses the map from a string representation. * The first line is undo limit. * Starting from the second line, the game map is represented as follows, * <li># represents a {@link Wall}</li> * <li>@ represents a box destination.</li> * <li>Any upper-case letter represents a {@link Player}.</li> * <li> * Any lower-case letter represents a {@link Box} that is only movable by the player with the corresponding upper-case letter. * For instance, box \"a\" can only be moved by player \"A\" and not movable by player \"B\". * </li> * <li>. represents an {@link Empty} position in the map, meaning there is no player or box currently at this position.</li> * <p> * Notes: * <li> * There can be at most 26 players. * All implementations of classes in the hk.ust.comp3021.game package should support up to 26 players. * </li> * <li> * For simplicity, we assume the given map is bounded with a closed boundary. * There is no need to check this point. * </li> * <li> * Example maps can be found in \"src/main/resources\". * </li> * * @param mapText The string representation. * @return The parsed GameMap object. * @throws IllegalArgumentException if undo limit is negative but not -1. * @throws IllegalArgumentException if there are multiple same upper-case letters, i.e., one player can only exist at one position. * @throws IllegalArgumentException if there are no players in the map. * @throws IllegalArgumentException if the number of boxes is not equal to the number of box destinations. * @throws IllegalArgumentException if there are boxes whose {@link Box#getPlayerId()} public TerminalRenderingEngine(PrintStream outputSteam) { this.outputSteam = outputSteam; }",
        "label": "P"
    },
    "3163": {
        "dataset": "COMP 3021",
        "project": "chlibf",
        "bug_id": "24",
        "T": "void testInvalidUndoLimit() { final var invalidMap = \"\"\" -233 ###### #A..@# #...@# #a.b@# #.a.@# #..a.# ###### \"\"\"; }",
        "C": "",
        "label": "P"
    },
    "3164": {
        "dataset": "COMP 3021",
        "project": "chlibf",
        "bug_id": "25",
        "T": "void testEmptyMap() { final var invalidMap = \"\"; }",
        "C": "",
        "label": "P"
    },
    "3165": {
        "dataset": "COMP 3021",
        "project": "chlibf",
        "bug_id": "26",
        "T": "void testMove(String input, String name, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); } private InputStream fixValueStream(String content) { final var bytes = content.getBytes(StandardCharsets.UTF_8); return new ByteArrayInputStream(bytes); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine(); // TODO if (inputLine.equals(\"A\") || inputLine.equals(\"a\")) { return new Move.Left(0); } else if (inputLine.equals(\"S\") || inputLine.equals(\"s\")) { return new Move.Down(0); } else if (inputLine.equals(\"W\") || inputLine.equals(\"w\")) { return new Move.Up(0); } else if (inputLine.equals(\"D\") || inputLine.equals(\"d\")) { return new Move.Right(0); } else if (inputLine.equals(\"H\") || inputLine.equals(\"h\")) { return new Move.Left(1); } else if (inputLine.equals(\"J\") || inputLine.equals(\"j\")) { return new Move.Down(1); } else if (inputLine.equals(\"K\") || inputLine.equals(\"k\")) { return new Move.Up(1); } else if (inputLine.equals(\"L\") || inputLine.equals(\"l\")) { return new Move.Right(1); } else if (inputLine.equals(\"U\") || inputLine.equals(\"u\")) { return new Undo(1); } // debug for different upper and lowercase alphabets else if (inputLine.equals(\"exit\") || (inputLine.equals(\"Exit\"))) { return new Exit(1); } else{ return new InvalidInput(1, \"invalid input\"); } }",
        "label": "P"
    },
    "3166": {
        "dataset": "COMP 3021",
        "project": "chlibf",
        "bug_id": "27",
        "T": "void testMove(String input, String name, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); } private InputStream fixValueStream(String content) { final var bytes = content.getBytes(StandardCharsets.UTF_8); return new ByteArrayInputStream(bytes); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine(); // TODO if (inputLine.equals(\"A\") || inputLine.equals(\"a\")) { return new Move.Left(0); } else if (inputLine.equals(\"S\") || inputLine.equals(\"s\")) { return new Move.Down(0); } else if (inputLine.equals(\"W\") || inputLine.equals(\"w\")) { return new Move.Up(0); } else if (inputLine.equals(\"D\") || inputLine.equals(\"d\")) { return new Move.Right(0); } else if (inputLine.equals(\"H\") || inputLine.equals(\"h\")) { return new Move.Left(1); } else if (inputLine.equals(\"J\") || inputLine.equals(\"j\")) { return new Move.Down(1); } else if (inputLine.equals(\"K\") || inputLine.equals(\"k\")) { return new Move.Up(1); } else if (inputLine.equals(\"L\") || inputLine.equals(\"l\")) { return new Move.Right(1); } else if (inputLine.equals(\"U\") || inputLine.equals(\"u\")) { return new Undo(1); } // debug for different upper and lowercase alphabets else if (inputLine.equals(\"exit\") || (inputLine.equals(\"Exit\"))) { return new Exit(1); } else{ return new InvalidInput(1, \"invalid input\"); } }",
        "label": "P"
    },
    "3167": {
        "dataset": "COMP 3021",
        "project": "chlibf",
        "bug_id": "28",
        "T": "void testMove(String input, String name, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); } private InputStream fixValueStream(String content) { final var bytes = content.getBytes(StandardCharsets.UTF_8); return new ByteArrayInputStream(bytes); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine(); // TODO if (inputLine.equals(\"A\") || inputLine.equals(\"a\")) { return new Move.Left(0); } else if (inputLine.equals(\"S\") || inputLine.equals(\"s\")) { return new Move.Down(0); } else if (inputLine.equals(\"W\") || inputLine.equals(\"w\")) { return new Move.Up(0); } else if (inputLine.equals(\"D\") || inputLine.equals(\"d\")) { return new Move.Right(0); } else if (inputLine.equals(\"H\") || inputLine.equals(\"h\")) { return new Move.Left(1); } else if (inputLine.equals(\"J\") || inputLine.equals(\"j\")) { return new Move.Down(1); } else if (inputLine.equals(\"K\") || inputLine.equals(\"k\")) { return new Move.Up(1); } else if (inputLine.equals(\"L\") || inputLine.equals(\"l\")) { return new Move.Right(1); } else if (inputLine.equals(\"U\") || inputLine.equals(\"u\")) { return new Undo(1); } // debug for different upper and lowercase alphabets else if (inputLine.equals(\"exit\") || (inputLine.equals(\"Exit\"))) { return new Exit(1); } else{ return new InvalidInput(1, \"invalid input\"); } }",
        "label": "P"
    },
    "3168": {
        "dataset": "COMP 3021",
        "project": "chlibf",
        "bug_id": "29",
        "T": "void testMove(String input, String name, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); } private InputStream fixValueStream(String content) { final var bytes = content.getBytes(StandardCharsets.UTF_8); return new ByteArrayInputStream(bytes); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine(); // TODO if (inputLine.equals(\"A\") || inputLine.equals(\"a\")) { return new Move.Left(0); } else if (inputLine.equals(\"S\") || inputLine.equals(\"s\")) { return new Move.Down(0); } else if (inputLine.equals(\"W\") || inputLine.equals(\"w\")) { return new Move.Up(0); } else if (inputLine.equals(\"D\") || inputLine.equals(\"d\")) { return new Move.Right(0); } else if (inputLine.equals(\"H\") || inputLine.equals(\"h\")) { return new Move.Left(1); } else if (inputLine.equals(\"J\") || inputLine.equals(\"j\")) { return new Move.Down(1); } else if (inputLine.equals(\"K\") || inputLine.equals(\"k\")) { return new Move.Up(1); } else if (inputLine.equals(\"L\") || inputLine.equals(\"l\")) { return new Move.Right(1); } else if (inputLine.equals(\"U\") || inputLine.equals(\"u\")) { return new Undo(1); } // debug for different upper and lowercase alphabets else if (inputLine.equals(\"exit\") || (inputLine.equals(\"Exit\"))) { return new Exit(1); } else{ return new InvalidInput(1, \"invalid input\"); } }",
        "label": "P"
    },
    "3169": {
        "dataset": "COMP 3021",
        "project": "chlibf",
        "bug_id": "30",
        "T": "void testMove(String input, String name, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); } private InputStream fixValueStream(String content) { final var bytes = content.getBytes(StandardCharsets.UTF_8); return new ByteArrayInputStream(bytes); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine(); // TODO if (inputLine.equals(\"A\") || inputLine.equals(\"a\")) { return new Move.Left(0); } else if (inputLine.equals(\"S\") || inputLine.equals(\"s\")) { return new Move.Down(0); } else if (inputLine.equals(\"W\") || inputLine.equals(\"w\")) { return new Move.Up(0); } else if (inputLine.equals(\"D\") || inputLine.equals(\"d\")) { return new Move.Right(0); } else if (inputLine.equals(\"H\") || inputLine.equals(\"h\")) { return new Move.Left(1); } else if (inputLine.equals(\"J\") || inputLine.equals(\"j\")) { return new Move.Down(1); } else if (inputLine.equals(\"K\") || inputLine.equals(\"k\")) { return new Move.Up(1); } else if (inputLine.equals(\"L\") || inputLine.equals(\"l\")) { return new Move.Right(1); } else if (inputLine.equals(\"U\") || inputLine.equals(\"u\")) { return new Undo(1); } // debug for different upper and lowercase alphabets else if (inputLine.equals(\"exit\") || (inputLine.equals(\"Exit\"))) { return new Exit(1); } else{ return new InvalidInput(1, \"invalid input\"); } }",
        "label": "P"
    },
    "3170": {
        "dataset": "COMP 3021",
        "project": "chlibf",
        "bug_id": "31",
        "T": "void testMove(String input, String name, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); } private InputStream fixValueStream(String content) { final var bytes = content.getBytes(StandardCharsets.UTF_8); return new ByteArrayInputStream(bytes); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine(); // TODO if (inputLine.equals(\"A\") || inputLine.equals(\"a\")) { return new Move.Left(0); } else if (inputLine.equals(\"S\") || inputLine.equals(\"s\")) { return new Move.Down(0); } else if (inputLine.equals(\"W\") || inputLine.equals(\"w\")) { return new Move.Up(0); } else if (inputLine.equals(\"D\") || inputLine.equals(\"d\")) { return new Move.Right(0); } else if (inputLine.equals(\"H\") || inputLine.equals(\"h\")) { return new Move.Left(1); } else if (inputLine.equals(\"J\") || inputLine.equals(\"j\")) { return new Move.Down(1); } else if (inputLine.equals(\"K\") || inputLine.equals(\"k\")) { return new Move.Up(1); } else if (inputLine.equals(\"L\") || inputLine.equals(\"l\")) { return new Move.Right(1); } else if (inputLine.equals(\"U\") || inputLine.equals(\"u\")) { return new Undo(1); } // debug for different upper and lowercase alphabets else if (inputLine.equals(\"exit\") || (inputLine.equals(\"Exit\"))) { return new Exit(1); } else{ return new InvalidInput(1, \"invalid input\"); } }",
        "label": "P"
    },
    "3171": {
        "dataset": "COMP 3021",
        "project": "chlibf",
        "bug_id": "32",
        "T": "void testMove(String input, String name, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); } private InputStream fixValueStream(String content) { final var bytes = content.getBytes(StandardCharsets.UTF_8); return new ByteArrayInputStream(bytes); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine(); // TODO if (inputLine.equals(\"A\") || inputLine.equals(\"a\")) { return new Move.Left(0); } else if (inputLine.equals(\"S\") || inputLine.equals(\"s\")) { return new Move.Down(0); } else if (inputLine.equals(\"W\") || inputLine.equals(\"w\")) { return new Move.Up(0); } else if (inputLine.equals(\"D\") || inputLine.equals(\"d\")) { return new Move.Right(0); } else if (inputLine.equals(\"H\") || inputLine.equals(\"h\")) { return new Move.Left(1); } else if (inputLine.equals(\"J\") || inputLine.equals(\"j\")) { return new Move.Down(1); } else if (inputLine.equals(\"K\") || inputLine.equals(\"k\")) { return new Move.Up(1); } else if (inputLine.equals(\"L\") || inputLine.equals(\"l\")) { return new Move.Right(1); } else if (inputLine.equals(\"U\") || inputLine.equals(\"u\")) { return new Undo(1); } // debug for different upper and lowercase alphabets else if (inputLine.equals(\"exit\") || (inputLine.equals(\"Exit\"))) { return new Exit(1); } else{ return new InvalidInput(1, \"invalid input\"); } }",
        "label": "P"
    },
    "3172": {
        "dataset": "COMP 3021",
        "project": "chlibf",
        "bug_id": "33",
        "T": "void testMove(String input, String name, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); } private InputStream fixValueStream(String content) { final var bytes = content.getBytes(StandardCharsets.UTF_8); return new ByteArrayInputStream(bytes); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine(); // TODO if (inputLine.equals(\"A\") || inputLine.equals(\"a\")) { return new Move.Left(0); } else if (inputLine.equals(\"S\") || inputLine.equals(\"s\")) { return new Move.Down(0); } else if (inputLine.equals(\"W\") || inputLine.equals(\"w\")) { return new Move.Up(0); } else if (inputLine.equals(\"D\") || inputLine.equals(\"d\")) { return new Move.Right(0); } else if (inputLine.equals(\"H\") || inputLine.equals(\"h\")) { return new Move.Left(1); } else if (inputLine.equals(\"J\") || inputLine.equals(\"j\")) { return new Move.Down(1); } else if (inputLine.equals(\"K\") || inputLine.equals(\"k\")) { return new Move.Up(1); } else if (inputLine.equals(\"L\") || inputLine.equals(\"l\")) { return new Move.Right(1); } else if (inputLine.equals(\"U\") || inputLine.equals(\"u\")) { return new Undo(1); } // debug for different upper and lowercase alphabets else if (inputLine.equals(\"exit\") || (inputLine.equals(\"Exit\"))) { return new Exit(1); } else{ return new InvalidInput(1, \"invalid input\"); } }",
        "label": "P"
    },
    "3173": {
        "dataset": "COMP 3021",
        "project": "chlibf",
        "bug_id": "34",
        "T": "void testUndo(String input, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine(); // TODO if (inputLine.equals(\"A\") || inputLine.equals(\"a\")) { return new Move.Left(0); } else if (inputLine.equals(\"S\") || inputLine.equals(\"s\")) { return new Move.Down(0); } else if (inputLine.equals(\"W\") || inputLine.equals(\"w\")) { return new Move.Up(0); } else if (inputLine.equals(\"D\") || inputLine.equals(\"d\")) { return new Move.Right(0); } else if (inputLine.equals(\"H\") || inputLine.equals(\"h\")) { return new Move.Left(1); } else if (inputLine.equals(\"J\") || inputLine.equals(\"j\")) { return new Move.Down(1); } else if (inputLine.equals(\"K\") || inputLine.equals(\"k\")) { return new Move.Up(1); } else if (inputLine.equals(\"L\") || inputLine.equals(\"l\")) { return new Move.Right(1); } else if (inputLine.equals(\"U\") || inputLine.equals(\"u\")) { return new Undo(1); } // debug for different upper and lowercase alphabets else if (inputLine.equals(\"exit\") || (inputLine.equals(\"Exit\"))) { return new Exit(1); } else{ return new InvalidInput(1, \"invalid input\"); } }",
        "label": "P"
    },
    "3174": {
        "dataset": "COMP 3021",
        "project": "chlibf",
        "bug_id": "35",
        "T": "void testInvalidInput() { final var inputStream = fixValueStream(\"blah blah\"); final var inputEngine = new TerminalInputEngine(inputStream); final var action = inputEngine.fetchAction(); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine(); // TODO if (inputLine.equals(\"A\") || inputLine.equals(\"a\")) { return new Move.Left(0); } else if (inputLine.equals(\"S\") || inputLine.equals(\"s\")) { return new Move.Down(0); } else if (inputLine.equals(\"W\") || inputLine.equals(\"w\")) { return new Move.Up(0); } else if (inputLine.equals(\"D\") || inputLine.equals(\"d\")) { return new Move.Right(0); } else if (inputLine.equals(\"H\") || inputLine.equals(\"h\")) { return new Move.Left(1); } else if (inputLine.equals(\"J\") || inputLine.equals(\"j\")) { return new Move.Down(1); } else if (inputLine.equals(\"K\") || inputLine.equals(\"k\")) { return new Move.Up(1); } else if (inputLine.equals(\"L\") || inputLine.equals(\"l\")) { return new Move.Right(1); } else if (inputLine.equals(\"U\") || inputLine.equals(\"u\")) { return new Undo(1); } // debug for different upper and lowercase alphabets else if (inputLine.equals(\"exit\") || (inputLine.equals(\"Exit\"))) { return new Exit(1); } else{ return new InvalidInput(1, \"invalid input\"); } }",
        "label": "P"
    },
    "3175": {
        "dataset": "COMP 3021",
        "project": "chlibf",
        "bug_id": "36",
        "T": "void testUndoWhenThereIsNoMove() { final var gameState = new GameState(TestHelper.parseGameMap(\"\"\" 233 ###### #A.a@# #..a@# ###### \"\"\" )); gameState.undo(); } private Entity generateEntity(int key) { return switch (key % 4) { case 0 -> new Box(0); case 1 -> new Empty(); case 2 -> new Player(0); case 3 -> new Wall(); default -> throw new ShouldNotReachException(); }; }",
        "C": "public GameState(@NotNull GameMap map) { // TODO Map = map; Destinations = map.getDestinations(); MaxWidth = map.getMaxWidth(); MaxHeight = map.getMaxHeight(); Undolimit = map.getUndoLimit(); stext = map.gettingMap().clone(); checkpoint.put(0, stext.clone()); } public void undo() { // TODO int undoQuota = getUndoQuota().get(); if (checkpointcount > 0) { if (getUndoQuota().isEmpty()) { stext = checkpoint.get(checkpoint.size()-1); checkpoint.remove(checkpoint.size()); checkpointcount--; } if (undoQuota > 0) { stext = checkpoint.get(checkpoint.size() - 1); checkpoint.remove(checkpoint.size()); checkpointcount--; undoQuota--; } } Map.settingMap(stext); Undolimit = Optional.ofNullable(undoQuota); } /** * Get the maximum width of the game map. * This should be the same as that in {@link GameMap} public TerminalRenderingEngine(PrintStream outputSteam) { this.outputSteam = outputSteam; } public Box(int playerId) { this.playerId = playerId; } public Player(int id) { this.id = id; } public ShouldNotReachException() { super(\"This branch should not be reached.\"); }",
        "label": "F"
    },
    "3176": {
        "dataset": "COMP 3021",
        "project": "chlibf",
        "bug_id": "37",
        "T": "void testGetUndoUnlimited() { final var gameState = new GameState(TestHelper.parseGameMap(\"\"\" -1 ###### #.Aa@# #..a@# ###### \"\"\" )); }",
        "C": "public GameState(@NotNull GameMap map) { // TODO Map = map; Destinations = map.getDestinations(); MaxWidth = map.getMaxWidth(); MaxHeight = map.getMaxHeight(); Undolimit = map.getUndoLimit(); stext = map.gettingMap().clone(); checkpoint.put(0, stext.clone()); }",
        "label": "F"
    },
    "3177": {
        "dataset": "COMP 3021",
        "project": "chlibf",
        "bug_id": "38",
        "T": "void testMapCopying() { final var maxWidth = 2333; final var maxHeight = 2333; final var random = new Random(); final var randomEntities = Stream.generate(() -> Position.of(random.nextInt(maxWidth), random.nextInt(maxHeight))) .distinct() .limit(100) .collect(Collectors.toMap(Function.identity(), it -> generateEntity(it.x()))); final var firstPos = randomEntities.keySet().stream().findFirst(); final var gameMap = new GameMap(maxWidth, maxHeight, Collections.singleton(firstPos.get()), 233); randomEntities.forEach(gameMap::putEntity); final var gameState = new GameState(gameMap); final var randomPosition = randomEntities.keySet().stream().findAny(); gameMap.putEntity(randomPosition.get(), new Empty()); randomEntities.forEach((p, e) -> assertEquals(e, gameState.getEntity(p))); }",
        "C": "public static @NotNull Position of(int x, int y) { return new Position(x, y); } public GameMap(int maxWidth, int maxHeight, Set<Position> destinations, int undoLimit) { // TODO this.MaxWidth = maxWidth; this.Maxheight = maxHeight; this.Destinations = destinations; this.Undolimit = undoLimit; } /** * Parses the map from a string representation. * The first line is undo limit. * Starting from the second line, the game map is represented as follows, * <li># represents a {@link Wall}</li> * <li>@ represents a box destination.</li> * <li>Any upper-case letter represents a {@link Player}.</li> * <li> * Any lower-case letter represents a {@link Box} that is only movable by the player with the corresponding upper-case letter. * For instance, box \"a\" can only be moved by player \"A\" and not movable by player \"B\". * </li> * <li>. represents an {@link Empty} position in the map, meaning there is no player or box currently at this position.</li> * <p> * Notes: * <li> * There can be at most 26 players. * All implementations of classes in the hk.ust.comp3021.game package should support up to 26 players. * </li> * <li> * For simplicity, we assume the given map is bounded with a closed boundary. * There is no need to check this point. * </li> * <li> * Example maps can be found in \"src/main/resources\". * </li> * * @param mapText The string representation. * @return The parsed GameMap object. * @throws IllegalArgumentException if undo limit is negative but not -1. * @throws IllegalArgumentException if there are multiple same upper-case letters, i.e., one player can only exist at one position. * @throws IllegalArgumentException if there are no players in the map. * @throws IllegalArgumentException if the number of boxes is not equal to the number of box destinations. * @throws IllegalArgumentException if there are boxes whose {@link Box#getPlayerId()} public GameState(@NotNull GameMap map) { // TODO Map = map; Destinations = map.getDestinations(); MaxWidth = map.getMaxWidth(); MaxHeight = map.getMaxHeight(); Undolimit = map.getUndoLimit(); stext = map.gettingMap().clone(); checkpoint.put(0, stext.clone()); } public void putEntity(Position position, Entity entity) { // TODO String vartype = entity.getClass().getSimpleName(); StringBuilder str = new StringBuilder(stringtext[position.y()]); if(vartype.equals(\"Wall\")){ str.setCharAt(position.x(),'#'); } else if(vartype.equals(\"Player\")){ Player player = (Player)entity; str.setCharAt(position.x(), (char)(player.getId() + 'A')); } else if(vartype.equals(\"Box\")){ Box box = (Box)entity; str.setCharAt(position.x(), (char)(box.getPlayerId() + 'a')); } else if(vartype.equals(\"Empty\")){ str.setCharAt(position.x(),'.'); } stringtext[position.y()] = str.toString(); } public @Nullable Entity getEntity(@NotNull Position position) { // TODO return Map.getEntity(position); } /** * Get all box destination positions as a set in the game map. * This should be the same as that in {@link GameMap}",
        "label": "F"
    },
    "3178": {
        "dataset": "COMP 3021",
        "project": "chlibf",
        "bug_id": "39",
        "T": "void testUndoWhenThereIsMoveButNoCheckpoint() { final var gameState = new GameState(TestHelper.parseGameMap(\"\"\" 233 ###### #A.a@# #..a@# ###### \"\"\" )); gameState.move(Position.of(1, 1), Position.of(2, 1)); gameState.undo(); }",
        "C": "public GameState(@NotNull GameMap map) { // TODO Map = map; Destinations = map.getDestinations(); MaxWidth = map.getMaxWidth(); MaxHeight = map.getMaxHeight(); Undolimit = map.getUndoLimit(); stext = map.gettingMap().clone(); checkpoint.put(0, stext.clone()); } public void move(Position from, Position to) { // TODO Map.putEntity(new Position(to.x(), to.y()),Map.getEntity(new Position(from.x(), from.y()))); Map.putEntity(new Position(from.x(), from.y()), new Empty()); } /** * Record a checkpoint of the game state, including: * <li>All current positions of entities in the game map.</li> * <li>Current undo quota</li> * <p> * Checkpoint is used in {@link GameState#undo()} public static @NotNull Position of(int x, int y) { return new Position(x, y); } public void undo() { // TODO int undoQuota = getUndoQuota().get(); if (checkpointcount > 0) { if (getUndoQuota().isEmpty()) { stext = checkpoint.get(checkpoint.size()-1); checkpoint.remove(checkpoint.size()); checkpointcount--; } if (undoQuota > 0) { stext = checkpoint.get(checkpoint.size() - 1); checkpoint.remove(checkpoint.size()); checkpointcount--; undoQuota--; } } Map.settingMap(stext); Undolimit = Optional.ofNullable(undoQuota); } /** * Get the maximum width of the game map. * This should be the same as that in {@link GameMap}",
        "label": "F"
    },
    "3179": {
        "dataset": "COMP 3021",
        "project": "chlibf",
        "bug_id": "40",
        "T": "void testGameExit() { final var gameState = mock(GameState.class); final var inputEngine = mock(TerminalInputEngine.class); final var renderingEngine = mock(TerminalRenderingEngine.class); when(gameState.isWin()).thenReturn(false, false, false); when(inputEngine.fetchAction()) .thenReturn(new InvalidInput(0, \"\"), new InvalidInput(0, \"\"), new Exit(0)); final var game = new TerminalSokobanGame(gameState, inputEngine, renderingEngine); game.run(); verify(renderingEngine, atLeastOnce()).message(any()); }",
        "C": "public InvalidInput(int initiator, @NotNull String message) { super(initiator); this.message = message; } public Exit(int initiator) { super(initiator); } public TerminalSokobanGame(GameState gameState, TerminalInputEngine inputEngine, TerminalRenderingEngine renderingEngine) { super(gameState); this.inputEngine = inputEngine; this.renderingEngine = renderingEngine; // TODO this.renderingEngine.render(state); int targetquota = 0; // when there are more than two players in the map if(gameState.getAllPlayerPositions().size() > 2) { throw new IllegalArgumentException(); } if(state.getUndoQuota().isPresent() == true){ targetquota = state.getUndoQuota().get(); } else{ targetquota = 0; } renderingEngine.message(\"Undo Quota: \"+ targetquota); } public void run() { // TODO // keep checking the status of the game while(shouldStop() == false) { int targetquota = 0; if(state.getUndoQuota().isPresent() == true){ targetquota = state.getUndoQuota().get(); } else{ targetquota = 0; } renderingEngine.message(\"Undo Quota:\" + targetquota); renderingEngine.render(state); } renderingEngine.message(\"Game exits.\"); }",
        "label": "F"
    },
    "3180": {
        "dataset": "COMP 3021",
        "project": "chlibf",
        "bug_id": "41",
        "T": "void testGameWin() { final var gameState = mock(GameState.class); final var inputEngine = mock(TerminalInputEngine.class); final var renderingEngine = mock(TerminalRenderingEngine.class); when(gameState.isWin()).thenReturn(false, false, false, true); when(inputEngine.fetchAction()) .thenReturn(new InvalidInput(0, \"\")); final var game = new TerminalSokobanGame(gameState, inputEngine, renderingEngine); game.run(); verify(gameState, atLeastOnce()).isWin(); verify(renderingEngine, atLeastOnce()).message(any()); }",
        "C": "public InvalidInput(int initiator, @NotNull String message) { super(initiator); this.message = message; } public TerminalSokobanGame(GameState gameState, TerminalInputEngine inputEngine, TerminalRenderingEngine renderingEngine) { super(gameState); this.inputEngine = inputEngine; this.renderingEngine = renderingEngine; // TODO this.renderingEngine.render(state); int targetquota = 0; // when there are more than two players in the map if(gameState.getAllPlayerPositions().size() > 2) { throw new IllegalArgumentException(); } if(state.getUndoQuota().isPresent() == true){ targetquota = state.getUndoQuota().get(); } else{ targetquota = 0; } renderingEngine.message(\"Undo Quota: \"+ targetquota); } public void run() { // TODO // keep checking the status of the game while(shouldStop() == false) { int targetquota = 0; if(state.getUndoQuota().isPresent() == true){ targetquota = state.getUndoQuota().get(); } else{ targetquota = 0; } renderingEngine.message(\"Undo Quota:\" + targetquota); renderingEngine.render(state); } renderingEngine.message(\"Game exits.\"); }",
        "label": "P"
    },
    "3181": {
        "dataset": "COMP 3021",
        "project": "chlibf",
        "bug_id": "42",
        "T": "void testMoreThanTwoPlayers() { final var gameState = mock(GameState.class); final var inputEngine = mock(TerminalInputEngine.class); final var renderingEngine = mock(TerminalRenderingEngine.class); when(gameState.getAllPlayerPositions()).thenReturn(new HashSet<>(Arrays.asList(Position.of(1, 1), Position.of(1, 2), Position.of(1, 3)))); }",
        "C": "public static @NotNull Position of(int x, int y) { return new Position(x, y); }",
        "label": "P"
    },
    "3182": {
        "dataset": "COMP 3021",
        "project": "nchristanto",
        "bug_id": "0",
        "T": "void moveUp() { Position.of(233, 232), new Move.Up(-1).nextPosition(pos) ); }",
        "C": "public static @NotNull Position of(int x, int y) { return new Position(x, y); } public Up(int initiator) { super(initiator); }",
        "label": "P"
    },
    "3183": {
        "dataset": "COMP 3021",
        "project": "nchristanto",
        "bug_id": "1",
        "T": "void moveDown() { Position.of(233, 234), new Move.Down(-1).nextPosition(pos) ); }",
        "C": "public static @NotNull Position of(int x, int y) { return new Position(x, y); } public Down(int initiator) { super(initiator); }",
        "label": "P"
    },
    "3184": {
        "dataset": "COMP 3021",
        "project": "nchristanto",
        "bug_id": "2",
        "T": "void moveRight() { Position.of(234, 233), new Move.Right(-1).nextPosition(pos) ); }",
        "C": "public static @NotNull Position of(int x, int y) { return new Position(x, y); } public Right(int initiator) { super(initiator); }",
        "label": "P"
    },
    "3185": {
        "dataset": "COMP 3021",
        "project": "nchristanto",
        "bug_id": "3",
        "T": "void testExceedingUndoQuota() { final var gameState = mock(GameState.class); when(gameState.getPlayerPositionById(anyInt())).thenReturn(Position.of(0, 0)); when(gameState.getUndoQuota()).thenReturn(Optional.of(0)); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Undo(0)); }",
        "C": "public Undo(int initiator) { super(initiator); }",
        "label": "P"
    },
    "3186": {
        "dataset": "COMP 3021",
        "project": "nchristanto",
        "bug_id": "4",
        "T": "void testExit() { final var gameState = mock(GameState.class); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Exit(0)); }",
        "C": "public Exit(int initiator) { super(initiator); }",
        "label": "P"
    },
    "3187": {
        "dataset": "COMP 3021",
        "project": "nchristanto",
        "bug_id": "5",
        "T": "void testUndoUnlimited() { final var gameState = mock(GameState.class); when(gameState.getPlayerPositionById(anyInt())).thenReturn(Position.of(0, 0)); when(gameState.getUndoQuota()).thenReturn(Optional.empty()); final var game = new SokobanGameForTesting(gameState); for (int i = 0; i < 10000; i++) { final var result = game.feedActionForProcessing(new Undo(0)); } verify(gameState, times(10000)).undo(); }",
        "C": "public TerminalRenderingEngine(PrintStream outputSteam) { this.outputSteam = outputSteam; } public Undo(int initiator) { super(initiator); }",
        "label": "P"
    },
    "3188": {
        "dataset": "COMP 3021",
        "project": "nchristanto",
        "bug_id": "6",
        "T": "void testPushOtherPlayerBox() { String mapText = \"\"\" 233 ###### #AB.@# #b.a.# #@...# ###### \"\"\"; final var testMap = TestHelper.parseGameMap(mapText); final var gameState = spy(new GameState(testMap)); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Move.Down(0)); verify(gameState, never()).move(any(), any()); }",
        "C": "public GameState(@NotNull GameMap map) { // TODO quotaLeft = map.getUndoLimit(); this.map = map; gameInfo = new HashMap<Position, Entity>(map.getGameInfo()); checkpoints.add(new HashMap<>(gameInfo)); } public Down(int initiator) { super(initiator); }",
        "label": "P"
    },
    "3189": {
        "dataset": "COMP 3021",
        "project": "nchristanto",
        "bug_id": "7",
        "T": "void testMoveNonExistingPlayer() { String mapText = \"\"\" 233 ###### #A..@# #a...# ##...# ###### \"\"\"; final var testMap = TestHelper.parseGameMap(mapText); final var gameState = spy(new GameState(testMap)); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Move.Down(23)); }",
        "C": "public GameState(@NotNull GameMap map) { // TODO quotaLeft = map.getUndoLimit(); this.map = map; gameInfo = new HashMap<Position, Entity>(map.getGameInfo()); checkpoints.add(new HashMap<>(gameInfo)); } public Down(int initiator) { super(initiator); }",
        "label": "P"
    },
    "3190": {
        "dataset": "COMP 3021",
        "project": "nchristanto",
        "bug_id": "8",
        "T": "void testCheckpointWhenNeed() { final var gameState = spy(new GameState(TestHelper.parseGameMap(\"\"\" 233 ###### #.Aa@# #..a@# ###### \"\"\" ))); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Move.Right(0)); verify(gameState, times(1)).checkpoint(); }",
        "C": "public GameState(@NotNull GameMap map) { // TODO quotaLeft = map.getUndoLimit(); this.map = map; gameInfo = new HashMap<Position, Entity>(map.getGameInfo()); checkpoints.add(new HashMap<>(gameInfo)); } public Right(int initiator) { super(initiator); }",
        "label": "P"
    },
    "3191": {
        "dataset": "COMP 3021",
        "project": "nchristanto",
        "bug_id": "9",
        "T": "void testPushBoxAgainstWall() { String mapText = \"\"\" 233 ###### #A..@# #a...# ##...# ###### \"\"\"; final var testMap = TestHelper.parseGameMap(mapText); final var gameState = spy(new GameState(testMap)); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Move.Down(0)); verify(gameState, never()).move(any(), any()); }",
        "C": "public GameState(@NotNull GameMap map) { // TODO quotaLeft = map.getUndoLimit(); this.map = map; gameInfo = new HashMap<Position, Entity>(map.getGameInfo()); checkpoints.add(new HashMap<>(gameInfo)); } public Down(int initiator) { super(initiator); }",
        "label": "P"
    },
    "3192": {
        "dataset": "COMP 3021",
        "project": "nchristanto",
        "bug_id": "10",
        "T": "void testCheckpointWhenNotNeed() { final var gameState = spy(new GameState(TestHelper.parseGameMap(\"\"\" 233 ###### #A.a@# #..a@# ###### \"\"\" ))); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Move.Right(0)); verify(gameState, never()).checkpoint(); } private static class SokobanGameForTesting extends AbstractSokobanGame { protected SokobanGameForTesting(GameState gameState) { super(gameState); } @Override public void run() { } public ActionResult feedActionForProcessing(Action action) { return processAction(action); } }",
        "C": "public GameState(@NotNull GameMap map) { // TODO quotaLeft = map.getUndoLimit(); this.map = map; gameInfo = new HashMap<Position, Entity>(map.getGameInfo()); checkpoints.add(new HashMap<>(gameInfo)); } public Right(int initiator) { super(initiator); } public void run() { // TODO renderingEngine.message(GAME_READY_MESSAGE); renderingEngine.render(this.state); while (!this.shouldStop()) { if (!state.getUndoQuota().isEmpty()) { renderingEngine.message(String.format(UNDO_QUOTA_TEMPLATE, this.state.getUndoQuota().get())); } else { renderingEngine.message(\"Undo Quota: \" + UNDO_QUOTA_UNLIMITED); } renderingEngine.message(\">>>\"); Action action = inputEngine.fetchAction(); ActionResult result = this.processAction(action); if (result instanceof ActionResult.Failed f) { renderingEngine.message(f.getReason()); } renderingEngine.render(this.state); } renderingEngine.message(GAME_EXIT_MESSAGE); if (state.isWin()) { renderingEngine.message(WIN_MESSAGE); } } protected ActionResult processAction(@NotNull Action action) { // TODO if (action instanceof Move m) { if (!state.getPlayersIds().contains(m.getInitiator())) { return new ActionResult.Failed(action, \"Player does not exists\"); } Position currPosition = state.getPlayerPositionById(m.getInitiator()); Position nextPosition = m.nextPosition(currPosition); Entity nextEntity = state.getEntity(nextPosition); if (nextEntity instanceof Empty) { state.move(currPosition, nextPosition); //move player return new ActionResult.Success(action); }else if (nextEntity instanceof Box b) { if (m.getInitiator() != b.getPlayerId()) { return new ActionResult.Failed(action, \"Player move wrong box\"); } Entity nextBoxEntity = state.getEntity(m.nextPosition(nextPosition)); if (nextBoxEntity instanceof Empty) { state.move(nextPosition, m.nextPosition(nextPosition)); //move box state.move(currPosition, nextPosition); //move player state.checkpoint(); //checkpoint because moved a box return new ActionResult.Success(action); } return new ActionResult.Failed(action, \"Failed to move box\"); } return new ActionResult.Failed(action, \"Failed to move\"); }else if (action instanceof Exit) { exit = true; return new ActionResult.Success(action); }else if (action instanceof Undo) { if (!state.getUndoQuota().isEmpty()) { if (state.getUndoQuota().get() > 0) { state.undo(); return new ActionResult.Success(action); }else { return new ActionResult.Failed(action, UNDO_QUOTA_RUN_OUT); } }else { state.undo(); return new ActionResult.Success(action); } }else if (action instanceof InvalidInput) { return new ActionResult.Failed(action, INVALID_INPUT_MESSAGE); } return new ActionResult.Failed(action, \"Action invalid\"); }",
        "label": "P"
    },
    "3193": {
        "dataset": "COMP 3021",
        "project": "nchristanto",
        "bug_id": "11",
        "T": "void testHitAnotherPlayer() { String mapText = \"\"\" 233 ###### #A..@# #B...# #ab.@# ###### \"\"\"; final var testMap = TestHelper.parseGameMap(mapText); final var gameState = spy(new GameState(testMap)); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Move.Down(0)); verify(gameState, never()).move(any(), any()); }",
        "C": "public GameState(@NotNull GameMap map) { // TODO quotaLeft = map.getUndoLimit(); this.map = map; gameInfo = new HashMap<Position, Entity>(map.getGameInfo()); checkpoints.add(new HashMap<>(gameInfo)); } public Down(int initiator) { super(initiator); }",
        "label": "P"
    },
    "3194": {
        "dataset": "COMP 3021",
        "project": "nchristanto",
        "bug_id": "12",
        "T": "void testUndoWithinQuota() { final var gameState = mock(GameState.class); when(gameState.getPlayerPositionById(anyInt())).thenReturn(Position.of(0, 0)); when(gameState.getUndoQuota()).thenReturn(Optional.of(1)); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Undo(0)); verify(gameState, times(1)).undo(); }",
        "C": "public Undo(int initiator) { super(initiator); }",
        "label": "P"
    },
    "3195": {
        "dataset": "COMP 3021",
        "project": "nchristanto",
        "bug_id": "13",
        "T": "void testInvalidInput() { final var game = new SokobanGameForTesting(mock(GameState.class)); final var message = String.valueOf(new Random().nextLong()); final var action = new InvalidInput(-1, message); final var result = game.feedActionForProcessing(action); }",
        "C": "public InvalidInput(int initiator, @NotNull String message) { super(initiator); this.message = message; }",
        "label": "P"
    },
    "3196": {
        "dataset": "COMP 3021",
        "project": "nchristanto",
        "bug_id": "14",
        "T": "void testUndoLimitParsing() { final var gameMap = TestHelper.parseGameMap(rectangularMap); }",
        "C": "",
        "label": "P"
    },
    "3197": {
        "dataset": "COMP 3021",
        "project": "nchristanto",
        "bug_id": "15",
        "T": "void testWidthForNonRectangularMap() { final var gameMap = TestHelper.parseGameMap(nonRectangularMap); }",
        "C": "",
        "label": "P"
    },
    "3198": {
        "dataset": "COMP 3021",
        "project": "nchristanto",
        "bug_id": "16",
        "T": "void testTwoPlayersMap() { final var twoPlayersMap = \"\"\" 233 ###### #A..@# #..B@# #....# #.a..# #..b.# ###### \"\"\"; final var gameMap = TestHelper.parseGameMap(twoPlayersMap); final var playerIds = gameMap.getPlayerIds(); final var expectedIds = new HashSet<Integer>(); expectedIds.add(0); expectedIds.add(1); }",
        "C": "public Set<Integer> getPlayerIds() { // TODO return players; }",
        "label": "P"
    },
    "3199": {
        "dataset": "COMP 3021",
        "project": "nchristanto",
        "bug_id": "17",
        "T": "void testMapWithoutPlayer() { final var invalidMap = \"\"\" 233 ### #.# ### \"\"\"; } // @Tag(TestKind.HIDDEN) // @Test // void testUnmatchedPlayersAndBoxes() { // final var invalidMap = \"\"\" // 233 // ###### // #A..@# // #...@# // #a.b@# // #.a.@# // #..a.# // ###### // \"\"\"; // assertThrowsExactly(IllegalArgumentException.class, () -> TestHelper.parseGameMap(invalidMap)); // }",
        "C": "public TerminalRenderingEngine(PrintStream outputSteam) { this.outputSteam = outputSteam; }",
        "label": "P"
    },
    "3200": {
        "dataset": "COMP 3021",
        "project": "nchristanto",
        "bug_id": "18",
        "T": "void testManyPlayersMap() { final var manyPlayersMap = \"\"\" 233 ###### #A.P@@# #vCB@@# #.cpD@# #Ga.d@# #g.bV@# ###### \"\"\"; final var gameMap = TestHelper.parseGameMap(manyPlayersMap); final var playerIds = gameMap.getPlayerIds(); final var expectedIds = new HashSet<>(Arrays.asList( 0, 'P' - 'A', 'C' - 'A', 'B' - 'A', 'D' - 'A', 'G' - 'A', 'V' - 'A' )); }",
        "C": "public Set<Integer> getPlayerIds() { // TODO return players; }",
        "label": "P"
    },
    "3201": {
        "dataset": "COMP 3021",
        "project": "nchristanto",
        "bug_id": "19",
        "T": "void testHeightForNonRectangularMap() { final var gameMap = TestHelper.parseGameMap(nonRectangularMap); }",
        "C": "",
        "label": "P"
    },
    "3202": {
        "dataset": "COMP 3021",
        "project": "nchristanto",
        "bug_id": "20",
        "T": "void testDuplicatedPlayers() { final var invalidMap = \"\"\" 233 ###### #A..@# #..A@# #....# #.a..# #..b.# ###### \"\"\"; }",
        "C": "",
        "label": "P"
    },
    "3203": {
        "dataset": "COMP 3021",
        "project": "nchristanto",
        "bug_id": "21",
        "T": "void testParseMapWithoutUndoLimit() { final var invalidMap = String.join(\"\\n\", rectangularMap.lines().skip(1).toList()); }",
        "C": "",
        "label": "P"
    },
    "3204": {
        "dataset": "COMP 3021",
        "project": "nchristanto",
        "bug_id": "22",
        "T": "void testInsufficientDestinations() { final var invalidMap = \"\"\" 233 ###### #A..@# #...@# #a...# #.a..# #..a.# ###### \"\"\"; }",
        "C": "",
        "label": "P"
    },
    "3205": {
        "dataset": "COMP 3021",
        "project": "nchristanto",
        "bug_id": "23",
        "T": "void testSuperLargeMap() { try { new GameMap(Integer.MAX_VALUE, Integer.MAX_VALUE, Collections.emptySet(), 0); } catch (OutOfMemoryError e) { throw new RuntimeException(e); } }); }",
        "C": "public GameMap(int maxWidth, int maxHeight, Set<Position> destinations, int undoLimit) { // TODO this.maxHeight = maxHeight; this.maxWidth = maxWidth; this.destinations = destinations; this.undoLimit = undoLimit; } public TerminalRenderingEngine(PrintStream outputSteam) { this.outputSteam = outputSteam; }",
        "label": "P"
    },
    "3206": {
        "dataset": "COMP 3021",
        "project": "nchristanto",
        "bug_id": "24",
        "T": "void testInvalidUndoLimit() { final var invalidMap = \"\"\" -233 ###### #A..@# #...@# #a.b@# #.a.@# #..a.# ###### \"\"\"; }",
        "C": "",
        "label": "P"
    },
    "3207": {
        "dataset": "COMP 3021",
        "project": "nchristanto",
        "bug_id": "25",
        "T": "void testEmptyMap() { final var invalidMap = \"\"; }",
        "C": "",
        "label": "P"
    },
    "3208": {
        "dataset": "COMP 3021",
        "project": "nchristanto",
        "bug_id": "26",
        "T": "void testMove(String input, String name, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); } private InputStream fixValueStream(String content) { final var bytes = content.getBytes(StandardCharsets.UTF_8); return new ByteArrayInputStream(bytes); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine(); // TODO Action action = switch (inputLine.toLowerCase()) { case \"a\" -> new Move.Left(0); case \"w\" -> new Move.Up(0); case \"d\" -> new Move.Right(0); case \"s\" -> new Move.Down(0); case \"h\" -> new Move.Left(1); case \"k\" -> new Move.Up(1); case \"l\" -> new Move.Right(1); case \"j\" -> new Move.Down(1); case \"u\" -> new Undo(2); case EXIT_COMMAND_TEXT -> new Exit(2); default -> new InvalidInput(2, INVALID_INPUT_MESSAGE); }; return action; }",
        "label": "P"
    },
    "3209": {
        "dataset": "COMP 3021",
        "project": "nchristanto",
        "bug_id": "27",
        "T": "void testMove(String input, String name, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); } private InputStream fixValueStream(String content) { final var bytes = content.getBytes(StandardCharsets.UTF_8); return new ByteArrayInputStream(bytes); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine(); // TODO Action action = switch (inputLine.toLowerCase()) { case \"a\" -> new Move.Left(0); case \"w\" -> new Move.Up(0); case \"d\" -> new Move.Right(0); case \"s\" -> new Move.Down(0); case \"h\" -> new Move.Left(1); case \"k\" -> new Move.Up(1); case \"l\" -> new Move.Right(1); case \"j\" -> new Move.Down(1); case \"u\" -> new Undo(2); case EXIT_COMMAND_TEXT -> new Exit(2); default -> new InvalidInput(2, INVALID_INPUT_MESSAGE); }; return action; }",
        "label": "P"
    },
    "3210": {
        "dataset": "COMP 3021",
        "project": "nchristanto",
        "bug_id": "28",
        "T": "void testMove(String input, String name, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); } private InputStream fixValueStream(String content) { final var bytes = content.getBytes(StandardCharsets.UTF_8); return new ByteArrayInputStream(bytes); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine(); // TODO Action action = switch (inputLine.toLowerCase()) { case \"a\" -> new Move.Left(0); case \"w\" -> new Move.Up(0); case \"d\" -> new Move.Right(0); case \"s\" -> new Move.Down(0); case \"h\" -> new Move.Left(1); case \"k\" -> new Move.Up(1); case \"l\" -> new Move.Right(1); case \"j\" -> new Move.Down(1); case \"u\" -> new Undo(2); case EXIT_COMMAND_TEXT -> new Exit(2); default -> new InvalidInput(2, INVALID_INPUT_MESSAGE); }; return action; }",
        "label": "P"
    },
    "3211": {
        "dataset": "COMP 3021",
        "project": "nchristanto",
        "bug_id": "29",
        "T": "void testMove(String input, String name, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); } private InputStream fixValueStream(String content) { final var bytes = content.getBytes(StandardCharsets.UTF_8); return new ByteArrayInputStream(bytes); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine(); // TODO Action action = switch (inputLine.toLowerCase()) { case \"a\" -> new Move.Left(0); case \"w\" -> new Move.Up(0); case \"d\" -> new Move.Right(0); case \"s\" -> new Move.Down(0); case \"h\" -> new Move.Left(1); case \"k\" -> new Move.Up(1); case \"l\" -> new Move.Right(1); case \"j\" -> new Move.Down(1); case \"u\" -> new Undo(2); case EXIT_COMMAND_TEXT -> new Exit(2); default -> new InvalidInput(2, INVALID_INPUT_MESSAGE); }; return action; }",
        "label": "P"
    },
    "3212": {
        "dataset": "COMP 3021",
        "project": "nchristanto",
        "bug_id": "30",
        "T": "void testMove(String input, String name, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); } private InputStream fixValueStream(String content) { final var bytes = content.getBytes(StandardCharsets.UTF_8); return new ByteArrayInputStream(bytes); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine(); // TODO Action action = switch (inputLine.toLowerCase()) { case \"a\" -> new Move.Left(0); case \"w\" -> new Move.Up(0); case \"d\" -> new Move.Right(0); case \"s\" -> new Move.Down(0); case \"h\" -> new Move.Left(1); case \"k\" -> new Move.Up(1); case \"l\" -> new Move.Right(1); case \"j\" -> new Move.Down(1); case \"u\" -> new Undo(2); case EXIT_COMMAND_TEXT -> new Exit(2); default -> new InvalidInput(2, INVALID_INPUT_MESSAGE); }; return action; }",
        "label": "P"
    },
    "3213": {
        "dataset": "COMP 3021",
        "project": "nchristanto",
        "bug_id": "31",
        "T": "void testMove(String input, String name, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); } private InputStream fixValueStream(String content) { final var bytes = content.getBytes(StandardCharsets.UTF_8); return new ByteArrayInputStream(bytes); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine(); // TODO Action action = switch (inputLine.toLowerCase()) { case \"a\" -> new Move.Left(0); case \"w\" -> new Move.Up(0); case \"d\" -> new Move.Right(0); case \"s\" -> new Move.Down(0); case \"h\" -> new Move.Left(1); case \"k\" -> new Move.Up(1); case \"l\" -> new Move.Right(1); case \"j\" -> new Move.Down(1); case \"u\" -> new Undo(2); case EXIT_COMMAND_TEXT -> new Exit(2); default -> new InvalidInput(2, INVALID_INPUT_MESSAGE); }; return action; }",
        "label": "P"
    },
    "3214": {
        "dataset": "COMP 3021",
        "project": "nchristanto",
        "bug_id": "32",
        "T": "void testMove(String input, String name, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); } private InputStream fixValueStream(String content) { final var bytes = content.getBytes(StandardCharsets.UTF_8); return new ByteArrayInputStream(bytes); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine(); // TODO Action action = switch (inputLine.toLowerCase()) { case \"a\" -> new Move.Left(0); case \"w\" -> new Move.Up(0); case \"d\" -> new Move.Right(0); case \"s\" -> new Move.Down(0); case \"h\" -> new Move.Left(1); case \"k\" -> new Move.Up(1); case \"l\" -> new Move.Right(1); case \"j\" -> new Move.Down(1); case \"u\" -> new Undo(2); case EXIT_COMMAND_TEXT -> new Exit(2); default -> new InvalidInput(2, INVALID_INPUT_MESSAGE); }; return action; }",
        "label": "P"
    },
    "3215": {
        "dataset": "COMP 3021",
        "project": "nchristanto",
        "bug_id": "33",
        "T": "void testMove(String input, String name, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); } private InputStream fixValueStream(String content) { final var bytes = content.getBytes(StandardCharsets.UTF_8); return new ByteArrayInputStream(bytes); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine(); // TODO Action action = switch (inputLine.toLowerCase()) { case \"a\" -> new Move.Left(0); case \"w\" -> new Move.Up(0); case \"d\" -> new Move.Right(0); case \"s\" -> new Move.Down(0); case \"h\" -> new Move.Left(1); case \"k\" -> new Move.Up(1); case \"l\" -> new Move.Right(1); case \"j\" -> new Move.Down(1); case \"u\" -> new Undo(2); case EXIT_COMMAND_TEXT -> new Exit(2); default -> new InvalidInput(2, INVALID_INPUT_MESSAGE); }; return action; }",
        "label": "P"
    },
    "3216": {
        "dataset": "COMP 3021",
        "project": "nchristanto",
        "bug_id": "34",
        "T": "void testUndo(String input, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine(); // TODO Action action = switch (inputLine.toLowerCase()) { case \"a\" -> new Move.Left(0); case \"w\" -> new Move.Up(0); case \"d\" -> new Move.Right(0); case \"s\" -> new Move.Down(0); case \"h\" -> new Move.Left(1); case \"k\" -> new Move.Up(1); case \"l\" -> new Move.Right(1); case \"j\" -> new Move.Down(1); case \"u\" -> new Undo(2); case EXIT_COMMAND_TEXT -> new Exit(2); default -> new InvalidInput(2, INVALID_INPUT_MESSAGE); }; return action; }",
        "label": "P"
    },
    "3217": {
        "dataset": "COMP 3021",
        "project": "nchristanto",
        "bug_id": "35",
        "T": "void testInvalidInput() { final var inputStream = fixValueStream(\"blah blah\"); final var inputEngine = new TerminalInputEngine(inputStream); final var action = inputEngine.fetchAction(); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine(); // TODO Action action = switch (inputLine.toLowerCase()) { case \"a\" -> new Move.Left(0); case \"w\" -> new Move.Up(0); case \"d\" -> new Move.Right(0); case \"s\" -> new Move.Down(0); case \"h\" -> new Move.Left(1); case \"k\" -> new Move.Up(1); case \"l\" -> new Move.Right(1); case \"j\" -> new Move.Down(1); case \"u\" -> new Undo(2); case EXIT_COMMAND_TEXT -> new Exit(2); default -> new InvalidInput(2, INVALID_INPUT_MESSAGE); }; return action; }",
        "label": "P"
    },
    "3218": {
        "dataset": "COMP 3021",
        "project": "nchristanto",
        "bug_id": "36",
        "T": "void testUndoWhenThereIsNoMove() { final var gameState = new GameState(TestHelper.parseGameMap(\"\"\" 233 ###### #A.a@# #..a@# ###### \"\"\" )); gameState.undo(); } private Entity generateEntity(int key) { return switch (key % 4) { case 0 -> new Box(0); case 1 -> new Empty(); case 2 -> new Player(0); case 3 -> new Wall(); default -> throw new ShouldNotReachException(); }; }",
        "C": "public GameState(@NotNull GameMap map) { // TODO quotaLeft = map.getUndoLimit(); this.map = map; gameInfo = new HashMap<Position, Entity>(map.getGameInfo()); checkpoints.add(new HashMap<>(gameInfo)); } public void undo() { // TODO if (checkpoints.size() == 1) { gameInfo = checkpoints.get(0); return; } gameInfo = new HashMap<>(checkpoints.get(checkpoints.size() - 2)); checkpoints.remove(checkpoints.size() - 1); if (!quotaLeft.isEmpty()) { quotaLeft = Optional.of(quotaLeft.get() - 1); } } /** * Get the maximum width of the game map. * This should be the same as that in {@link GameMap} public TerminalRenderingEngine(PrintStream outputSteam) { this.outputSteam = outputSteam; } public Box(int playerId) { this.playerId = playerId; } public Player(int id) { this.id = id; } public ShouldNotReachException() { super(\"This branch should not be reached.\"); }",
        "label": "P"
    },
    "3219": {
        "dataset": "COMP 3021",
        "project": "nchristanto",
        "bug_id": "37",
        "T": "void testGetUndoUnlimited() { final var gameState = new GameState(TestHelper.parseGameMap(\"\"\" -1 ###### #.Aa@# #..a@# ###### \"\"\" )); }",
        "C": "public GameState(@NotNull GameMap map) { // TODO quotaLeft = map.getUndoLimit(); this.map = map; gameInfo = new HashMap<Position, Entity>(map.getGameInfo()); checkpoints.add(new HashMap<>(gameInfo)); }",
        "label": "P"
    },
    "3220": {
        "dataset": "COMP 3021",
        "project": "nchristanto",
        "bug_id": "38",
        "T": "void testMapCopying() { final var maxWidth = 2333; final var maxHeight = 2333; final var random = new Random(); final var randomEntities = Stream.generate(() -> Position.of(random.nextInt(maxWidth), random.nextInt(maxHeight))) .distinct() .limit(100) .collect(Collectors.toMap(Function.identity(), it -> generateEntity(it.x()))); final var firstPos = randomEntities.keySet().stream().findFirst(); final var gameMap = new GameMap(maxWidth, maxHeight, Collections.singleton(firstPos.get()), 233); randomEntities.forEach(gameMap::putEntity); final var gameState = new GameState(gameMap); final var randomPosition = randomEntities.keySet().stream().findAny(); gameMap.putEntity(randomPosition.get(), new Empty()); randomEntities.forEach((p, e) -> assertEquals(e, gameState.getEntity(p))); }",
        "C": "public static @NotNull Position of(int x, int y) { return new Position(x, y); } public GameMap(int maxWidth, int maxHeight, Set<Position> destinations, int undoLimit) { // TODO this.maxHeight = maxHeight; this.maxWidth = maxWidth; this.destinations = destinations; this.undoLimit = undoLimit; } public GameState(@NotNull GameMap map) { // TODO quotaLeft = map.getUndoLimit(); this.map = map; gameInfo = new HashMap<Position, Entity>(map.getGameInfo()); checkpoints.add(new HashMap<>(gameInfo)); } public void putEntity(Position position, Entity entity) { // TODO gameInfo.put(position, entity); } public @Nullable Entity getEntity(@NotNull Position position) { // TODO return gameInfo.get(position); } /** * Get all box destination positions as a set in the game map. * This should be the same as that in {@link GameMap}",
        "label": "P"
    },
    "3221": {
        "dataset": "COMP 3021",
        "project": "nchristanto",
        "bug_id": "39",
        "T": "void testUndoWhenThereIsMoveButNoCheckpoint() { final var gameState = new GameState(TestHelper.parseGameMap(\"\"\" 233 ###### #A.a@# #..a@# ###### \"\"\" )); gameState.move(Position.of(1, 1), Position.of(2, 1)); gameState.undo(); }",
        "C": "public GameState(@NotNull GameMap map) { // TODO quotaLeft = map.getUndoLimit(); this.map = map; gameInfo = new HashMap<Position, Entity>(map.getGameInfo()); checkpoints.add(new HashMap<>(gameInfo)); } public void move(Position from, Position to) { // TODO this.gameInfo.replace(to, gameInfo.get(from)); this.gameInfo.replace(from, new Empty()); } /** * Record a checkpoint of the game state, including: * <li>All current positions of entities in the game map.</li> * <li>Current undo quota</li> * <p> * Checkpoint is used in {@link GameState#undo()} public static @NotNull Position of(int x, int y) { return new Position(x, y); } public void undo() { // TODO if (checkpoints.size() == 1) { gameInfo = checkpoints.get(0); return; } gameInfo = new HashMap<>(checkpoints.get(checkpoints.size() - 2)); checkpoints.remove(checkpoints.size() - 1); if (!quotaLeft.isEmpty()) { quotaLeft = Optional.of(quotaLeft.get() - 1); } } /** * Get the maximum width of the game map. * This should be the same as that in {@link GameMap}",
        "label": "P"
    },
    "3222": {
        "dataset": "COMP 3021",
        "project": "nchristanto",
        "bug_id": "40",
        "T": "void testGameExit() { final var gameState = mock(GameState.class); final var inputEngine = mock(TerminalInputEngine.class); final var renderingEngine = mock(TerminalRenderingEngine.class); when(gameState.isWin()).thenReturn(false, false, false); when(inputEngine.fetchAction()) .thenReturn(new InvalidInput(0, \"\"), new InvalidInput(0, \"\"), new Exit(0)); final var game = new TerminalSokobanGame(gameState, inputEngine, renderingEngine); game.run(); verify(renderingEngine, atLeastOnce()).message(any()); }",
        "C": "public InvalidInput(int initiator, @NotNull String message) { super(initiator); this.message = message; } public Exit(int initiator) { super(initiator); } public TerminalSokobanGame(GameState gameState, TerminalInputEngine inputEngine, TerminalRenderingEngine renderingEngine) { super(gameState); this.inputEngine = inputEngine; this.renderingEngine = renderingEngine; // TODO // Check the number of players if (gameState.getAllPlayerPositions().size() > 2) { throw new IllegalArgumentException(\"There are more than two players in the map\"); } } public void run() { // TODO renderingEngine.message(GAME_READY_MESSAGE); renderingEngine.render(this.state); while (!this.shouldStop()) { if (!state.getUndoQuota().isEmpty()) { renderingEngine.message(String.format(UNDO_QUOTA_TEMPLATE, this.state.getUndoQuota().get())); } else { renderingEngine.message(\"Undo Quota: \" + UNDO_QUOTA_UNLIMITED); } renderingEngine.message(\">>>\"); Action action = inputEngine.fetchAction(); ActionResult result = this.processAction(action); if (result instanceof ActionResult.Failed f) { renderingEngine.message(f.getReason()); } renderingEngine.render(this.state); } renderingEngine.message(GAME_EXIT_MESSAGE); if (state.isWin()) { renderingEngine.message(WIN_MESSAGE); } }",
        "label": "P"
    },
    "3223": {
        "dataset": "COMP 3021",
        "project": "nchristanto",
        "bug_id": "41",
        "T": "void testGameWin() { final var gameState = mock(GameState.class); final var inputEngine = mock(TerminalInputEngine.class); final var renderingEngine = mock(TerminalRenderingEngine.class); when(gameState.isWin()).thenReturn(false, false, false, true); when(inputEngine.fetchAction()) .thenReturn(new InvalidInput(0, \"\")); final var game = new TerminalSokobanGame(gameState, inputEngine, renderingEngine); game.run(); verify(gameState, atLeastOnce()).isWin(); verify(renderingEngine, atLeastOnce()).message(any()); }",
        "C": "public InvalidInput(int initiator, @NotNull String message) { super(initiator); this.message = message; } public TerminalSokobanGame(GameState gameState, TerminalInputEngine inputEngine, TerminalRenderingEngine renderingEngine) { super(gameState); this.inputEngine = inputEngine; this.renderingEngine = renderingEngine; // TODO // Check the number of players if (gameState.getAllPlayerPositions().size() > 2) { throw new IllegalArgumentException(\"There are more than two players in the map\"); } } public void run() { // TODO renderingEngine.message(GAME_READY_MESSAGE); renderingEngine.render(this.state); while (!this.shouldStop()) { if (!state.getUndoQuota().isEmpty()) { renderingEngine.message(String.format(UNDO_QUOTA_TEMPLATE, this.state.getUndoQuota().get())); } else { renderingEngine.message(\"Undo Quota: \" + UNDO_QUOTA_UNLIMITED); } renderingEngine.message(\">>>\"); Action action = inputEngine.fetchAction(); ActionResult result = this.processAction(action); if (result instanceof ActionResult.Failed f) { renderingEngine.message(f.getReason()); } renderingEngine.render(this.state); } renderingEngine.message(GAME_EXIT_MESSAGE); if (state.isWin()) { renderingEngine.message(WIN_MESSAGE); } }",
        "label": "P"
    },
    "3224": {
        "dataset": "COMP 3021",
        "project": "nchristanto",
        "bug_id": "42",
        "T": "void testMoreThanTwoPlayers() { final var gameState = mock(GameState.class); final var inputEngine = mock(TerminalInputEngine.class); final var renderingEngine = mock(TerminalRenderingEngine.class); when(gameState.getAllPlayerPositions()).thenReturn(new HashSet<>(Arrays.asList(Position.of(1, 1), Position.of(1, 2), Position.of(1, 3)))); }",
        "C": "public static @NotNull Position of(int x, int y) { return new Position(x, y); }",
        "label": "P"
    },
    "3225": {
        "dataset": "COMP 3021",
        "project": "cttongac",
        "bug_id": "0",
        "T": "void moveUp() { Position.of(233, 232), new Move.Up(-1).nextPosition(pos) ); }",
        "C": "public static @NotNull Position of(int x, int y) { return new Position(x, y); } public Up(int initiator) { super(initiator); }",
        "label": "P"
    },
    "3226": {
        "dataset": "COMP 3021",
        "project": "cttongac",
        "bug_id": "1",
        "T": "void moveDown() { Position.of(233, 234), new Move.Down(-1).nextPosition(pos) ); }",
        "C": "public static @NotNull Position of(int x, int y) { return new Position(x, y); } public Down(int initiator) { super(initiator); }",
        "label": "P"
    },
    "3227": {
        "dataset": "COMP 3021",
        "project": "cttongac",
        "bug_id": "2",
        "T": "void moveRight() { Position.of(234, 233), new Move.Right(-1).nextPosition(pos) ); }",
        "C": "public static @NotNull Position of(int x, int y) { return new Position(x, y); } public Right(int initiator) { super(initiator); }",
        "label": "P"
    },
    "3228": {
        "dataset": "COMP 3021",
        "project": "cttongac",
        "bug_id": "3",
        "T": "void testExceedingUndoQuota() { final var gameState = mock(GameState.class); when(gameState.getPlayerPositionById(anyInt())).thenReturn(Position.of(0, 0)); when(gameState.getUndoQuota()).thenReturn(Optional.of(0)); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Undo(0)); }",
        "C": "public Undo(int initiator) { super(initiator); }",
        "label": "F"
    },
    "3229": {
        "dataset": "COMP 3021",
        "project": "cttongac",
        "bug_id": "4",
        "T": "void testExit() { final var gameState = mock(GameState.class); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Exit(0)); }",
        "C": "public Exit(int initiator) { super(initiator); }",
        "label": "F"
    },
    "3230": {
        "dataset": "COMP 3021",
        "project": "cttongac",
        "bug_id": "5",
        "T": "void testUndoUnlimited() { final var gameState = mock(GameState.class); when(gameState.getPlayerPositionById(anyInt())).thenReturn(Position.of(0, 0)); when(gameState.getUndoQuota()).thenReturn(Optional.empty()); final var game = new SokobanGameForTesting(gameState); for (int i = 0; i < 10000; i++) { final var result = game.feedActionForProcessing(new Undo(0)); } verify(gameState, times(10000)).undo(); }",
        "C": "public TerminalRenderingEngine(PrintStream outputSteam) { this.outputSteam = outputSteam; } public Undo(int initiator) { super(initiator); }",
        "label": "P"
    },
    "3231": {
        "dataset": "COMP 3021",
        "project": "cttongac",
        "bug_id": "6",
        "T": "void testPushOtherPlayerBox() { String mapText = \"\"\" 233 ###### #AB.@# #b.a.# #@...# ###### \"\"\"; final var testMap = TestHelper.parseGameMap(mapText); final var gameState = spy(new GameState(testMap)); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Move.Down(0)); verify(gameState, never()).move(any(), any()); }",
        "C": "public GameState(@NotNull GameMap map) { // TODO map.getMap().entrySet().forEach(entry -> { System.out.println(entry.getKey() + \" \" + entry.getValue()); }); checkPoints.add(new GameState(this.maxWidth,this.maxHeight,this.destinations,this.undoLimit,this.runningMap)); runningMap.putAll(map.getMap()); this.maxWidth = map.getMaxWidth(); this.maxHeight = map.getMaxHeight(); this.destinations = map.getDestinations(); this.undoLimit = map.getUndoLimit().get(); this.playerList = map.getPlayerList(); } public Down(int initiator) { super(initiator); }",
        "label": "P"
    },
    "3232": {
        "dataset": "COMP 3021",
        "project": "cttongac",
        "bug_id": "7",
        "T": "void testMoveNonExistingPlayer() { String mapText = \"\"\" 233 ###### #A..@# #a...# ##...# ###### \"\"\"; final var testMap = TestHelper.parseGameMap(mapText); final var gameState = spy(new GameState(testMap)); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Move.Down(23)); }",
        "C": "public GameState(@NotNull GameMap map) { // TODO map.getMap().entrySet().forEach(entry -> { System.out.println(entry.getKey() + \" \" + entry.getValue()); }); checkPoints.add(new GameState(this.maxWidth,this.maxHeight,this.destinations,this.undoLimit,this.runningMap)); runningMap.putAll(map.getMap()); this.maxWidth = map.getMaxWidth(); this.maxHeight = map.getMaxHeight(); this.destinations = map.getDestinations(); this.undoLimit = map.getUndoLimit().get(); this.playerList = map.getPlayerList(); } public Down(int initiator) { super(initiator); }",
        "label": "F"
    },
    "3233": {
        "dataset": "COMP 3021",
        "project": "cttongac",
        "bug_id": "8",
        "T": "void testCheckpointWhenNeed() { final var gameState = spy(new GameState(TestHelper.parseGameMap(\"\"\" 233 ###### #.Aa@# #..a@# ###### \"\"\" ))); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Move.Right(0)); verify(gameState, times(1)).checkpoint(); }",
        "C": "public GameState(@NotNull GameMap map) { // TODO map.getMap().entrySet().forEach(entry -> { System.out.println(entry.getKey() + \" \" + entry.getValue()); }); checkPoints.add(new GameState(this.maxWidth,this.maxHeight,this.destinations,this.undoLimit,this.runningMap)); runningMap.putAll(map.getMap()); this.maxWidth = map.getMaxWidth(); this.maxHeight = map.getMaxHeight(); this.destinations = map.getDestinations(); this.undoLimit = map.getUndoLimit().get(); this.playerList = map.getPlayerList(); } public Right(int initiator) { super(initiator); }",
        "label": "P"
    },
    "3234": {
        "dataset": "COMP 3021",
        "project": "cttongac",
        "bug_id": "9",
        "T": "void testPushBoxAgainstWall() { String mapText = \"\"\" 233 ###### #A..@# #a...# ##...# ###### \"\"\"; final var testMap = TestHelper.parseGameMap(mapText); final var gameState = spy(new GameState(testMap)); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Move.Down(0)); verify(gameState, never()).move(any(), any()); }",
        "C": "public GameState(@NotNull GameMap map) { // TODO map.getMap().entrySet().forEach(entry -> { System.out.println(entry.getKey() + \" \" + entry.getValue()); }); checkPoints.add(new GameState(this.maxWidth,this.maxHeight,this.destinations,this.undoLimit,this.runningMap)); runningMap.putAll(map.getMap()); this.maxWidth = map.getMaxWidth(); this.maxHeight = map.getMaxHeight(); this.destinations = map.getDestinations(); this.undoLimit = map.getUndoLimit().get(); this.playerList = map.getPlayerList(); } public Down(int initiator) { super(initiator); }",
        "label": "P"
    },
    "3235": {
        "dataset": "COMP 3021",
        "project": "cttongac",
        "bug_id": "10",
        "T": "void testCheckpointWhenNotNeed() { final var gameState = spy(new GameState(TestHelper.parseGameMap(\"\"\" 233 ###### #A.a@# #..a@# ###### \"\"\" ))); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Move.Right(0)); verify(gameState, never()).checkpoint(); } private static class SokobanGameForTesting extends AbstractSokobanGame { protected SokobanGameForTesting(GameState gameState) { super(gameState); } @Override public void run() { } public ActionResult feedActionForProcessing(Action action) { return processAction(action); } }",
        "C": "public GameState(@NotNull GameMap map) { // TODO map.getMap().entrySet().forEach(entry -> { System.out.println(entry.getKey() + \" \" + entry.getValue()); }); checkPoints.add(new GameState(this.maxWidth,this.maxHeight,this.destinations,this.undoLimit,this.runningMap)); runningMap.putAll(map.getMap()); this.maxWidth = map.getMaxWidth(); this.maxHeight = map.getMaxHeight(); this.destinations = map.getDestinations(); this.undoLimit = map.getUndoLimit().get(); this.playerList = map.getPlayerList(); } public Right(int initiator) { super(initiator); } public void run() { // TODO TerminalSokobanGame terminalSokobanGame = new TerminalSokobanGame(this.state, (TerminalInputEngine) this.inputEngine, (TerminalRenderingEngine) this.renderingEngine); // terminalSokobanGame.renderingEngine.render(state); while(!shouldStop()){ Action tmp = inputEngine.fetchAction(); terminalSokobanGame.processAction(tmp); terminalSokobanGame.renderingEngine.render(terminalSokobanGame.state); System.out.println(tmp.getClass()); if(tmp instanceof Exit) { break; } } } protected ActionResult processAction(@NotNull Action action) { // TODO action.getInitiator(); if(action instanceof Exit) { return new ActionResult.Success(action); }else if(action instanceof Undo tmp) { state.undo(); return new ActionResult.Success(tmp); }else if(action instanceof InvalidInput ){ return new ActionResult.Failed(action,\"Invalid Input.\"); }else if(action instanceof Move move){ int id = move.getInitiator(); Position cur = state.getPlayerPositionById(id); Position des = move.nextPosition(cur); if(state.getEntity(des) instanceof Wall) return new ActionResult.Failed(action,\"You hit a wall.\"); if(state.getEntity(des) instanceof Empty) { state.move(cur,des); return new ActionResult.Success(action); } if(state.getEntity(des) instanceof Player) return new ActionResult.Failed(action,\"You hit another player.\"); if(state.getEntity(des) instanceof Box leftBox) { if(leftBox.getPlayerId()!=id) return new ActionResult.Failed(action, \"You cannot move other players' boxes.\"); else { if (move instanceof Move.Left) { Entity target = state.getEntity(Position.of(des.x() - 1, des.y())); if (target instanceof Empty) { state.move(des, (Position.of(des.x() - 1, des.y()))); state.move(cur, des); return new ActionResult.Success(action); } else if (target instanceof Player || target instanceof Wall || target instanceof Box) return new ActionResult.Failed(action,\"Failed to push the box\"); } else if(move instanceof Move.Right){ Entity target = state.getEntity((Position.of(des.x()+1,des.y()))); if(target instanceof Empty){ state.move(des,Position.of(des.x()+1,des.y())); state.move(cur,des); return new ActionResult.Success(action); }else if(target instanceof Player || target instanceof Box || target instanceof Wall) return new ActionResult.Failed(action,\"Failed to push the box\"); } else if(move instanceof Move.Up) { Entity target = state.getEntity(Position.of(des.x(),des.y()-1)); if(target instanceof Empty){ state.move(des,Position.of(des.x(),des.y()-1)); state.move(cur,des); return new ActionResult.Success(action); }else if(target instanceof Player || target instanceof Box || target instanceof Wall) { return new ActionResult.Failed(action,\"Failed to push the box\"); } } else if(move instanceof Move.Down){ Entity target = state.getEntity(Position.of(des.x(),des.y()+1)); if(target instanceof Empty){ state.move(des,Position.of(des.x(),des.y()+1)); state.move(cur,des); return new ActionResult.Success(action); } else if (target instanceof Box || target instanceof Wall || target instanceof Player) { return new ActionResult.Failed(action, \"Failed to push the box\"); } } } } } throw new NotImplementedException(); }",
        "label": "P"
    },
    "3236": {
        "dataset": "COMP 3021",
        "project": "cttongac",
        "bug_id": "11",
        "T": "void testHitAnotherPlayer() { String mapText = \"\"\" 233 ###### #A..@# #B...# #ab.@# ###### \"\"\"; final var testMap = TestHelper.parseGameMap(mapText); final var gameState = spy(new GameState(testMap)); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Move.Down(0)); verify(gameState, never()).move(any(), any()); }",
        "C": "public GameState(@NotNull GameMap map) { // TODO map.getMap().entrySet().forEach(entry -> { System.out.println(entry.getKey() + \" \" + entry.getValue()); }); checkPoints.add(new GameState(this.maxWidth,this.maxHeight,this.destinations,this.undoLimit,this.runningMap)); runningMap.putAll(map.getMap()); this.maxWidth = map.getMaxWidth(); this.maxHeight = map.getMaxHeight(); this.destinations = map.getDestinations(); this.undoLimit = map.getUndoLimit().get(); this.playerList = map.getPlayerList(); } public Down(int initiator) { super(initiator); }",
        "label": "P"
    },
    "3237": {
        "dataset": "COMP 3021",
        "project": "cttongac",
        "bug_id": "12",
        "T": "void testUndoWithinQuota() { final var gameState = mock(GameState.class); when(gameState.getPlayerPositionById(anyInt())).thenReturn(Position.of(0, 0)); when(gameState.getUndoQuota()).thenReturn(Optional.of(1)); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Undo(0)); verify(gameState, times(1)).undo(); }",
        "C": "public Undo(int initiator) { super(initiator); }",
        "label": "P"
    },
    "3238": {
        "dataset": "COMP 3021",
        "project": "cttongac",
        "bug_id": "13",
        "T": "void testInvalidInput() { final var game = new SokobanGameForTesting(mock(GameState.class)); final var message = String.valueOf(new Random().nextLong()); final var action = new InvalidInput(-1, message); final var result = game.feedActionForProcessing(action); }",
        "C": "public InvalidInput(int initiator, @NotNull String message) { super(initiator); this.message = message; }",
        "label": "P"
    },
    "3239": {
        "dataset": "COMP 3021",
        "project": "cttongac",
        "bug_id": "14",
        "T": "void testUndoLimitParsing() { final var gameMap = TestHelper.parseGameMap(rectangularMap); }",
        "C": "",
        "label": "P"
    },
    "3240": {
        "dataset": "COMP 3021",
        "project": "cttongac",
        "bug_id": "15",
        "T": "void testWidthForNonRectangularMap() { final var gameMap = TestHelper.parseGameMap(nonRectangularMap); }",
        "C": "",
        "label": "P"
    },
    "3241": {
        "dataset": "COMP 3021",
        "project": "cttongac",
        "bug_id": "16",
        "T": "void testTwoPlayersMap() { final var twoPlayersMap = \"\"\" 233 ###### #A..@# #..B@# #....# #.a..# #..b.# ###### \"\"\"; final var gameMap = TestHelper.parseGameMap(twoPlayersMap); final var playerIds = gameMap.getPlayerIds(); final var expectedIds = new HashSet<Integer>(); expectedIds.add(0); expectedIds.add(1); }",
        "C": "public Set<Integer> getPlayerIds() { // TODO Set<Integer> playerIDs = new HashSet<Integer>(); Iterator tmp = playerList.iterator(); while(tmp.hasNext()) { Player player = (Player) tmp.next(); playerIDs.add(player.getId()); } return playerIDs; }",
        "label": "F"
    },
    "3242": {
        "dataset": "COMP 3021",
        "project": "cttongac",
        "bug_id": "17",
        "T": "void testMapWithoutPlayer() { final var invalidMap = \"\"\" 233 ### #.# ### \"\"\"; } // @Tag(TestKind.HIDDEN) // @Test // void testUnmatchedPlayersAndBoxes() { // final var invalidMap = \"\"\" // 233 // ###### // #A..@# // #...@# // #a.b@# // #.a.@# // #..a.# // ###### // \"\"\"; // assertThrowsExactly(IllegalArgumentException.class, () -> TestHelper.parseGameMap(invalidMap)); // }",
        "C": "public TerminalRenderingEngine(PrintStream outputSteam) { this.outputSteam = outputSteam; }",
        "label": "F"
    },
    "3243": {
        "dataset": "COMP 3021",
        "project": "cttongac",
        "bug_id": "18",
        "T": "void testManyPlayersMap() { final var manyPlayersMap = \"\"\" 233 ###### #A.P@@# #vCB@@# #.cpD@# #Ga.d@# #g.bV@# ###### \"\"\"; final var gameMap = TestHelper.parseGameMap(manyPlayersMap); final var playerIds = gameMap.getPlayerIds(); final var expectedIds = new HashSet<>(Arrays.asList( 0, 'P' - 'A', 'C' - 'A', 'B' - 'A', 'D' - 'A', 'G' - 'A', 'V' - 'A' )); }",
        "C": "public Set<Integer> getPlayerIds() { // TODO Set<Integer> playerIDs = new HashSet<Integer>(); Iterator tmp = playerList.iterator(); while(tmp.hasNext()) { Player player = (Player) tmp.next(); playerIDs.add(player.getId()); } return playerIDs; }",
        "label": "F"
    },
    "3244": {
        "dataset": "COMP 3021",
        "project": "cttongac",
        "bug_id": "19",
        "T": "void testHeightForNonRectangularMap() { final var gameMap = TestHelper.parseGameMap(nonRectangularMap); }",
        "C": "",
        "label": "P"
    },
    "3245": {
        "dataset": "COMP 3021",
        "project": "cttongac",
        "bug_id": "20",
        "T": "void testDuplicatedPlayers() { final var invalidMap = \"\"\" 233 ###### #A..@# #..A@# #....# #.a..# #..b.# ###### \"\"\"; }",
        "C": "",
        "label": "P"
    },
    "3246": {
        "dataset": "COMP 3021",
        "project": "cttongac",
        "bug_id": "21",
        "T": "void testParseMapWithoutUndoLimit() { final var invalidMap = String.join(\"\\n\", rectangularMap.lines().skip(1).toList()); }",
        "C": "",
        "label": "P"
    },
    "3247": {
        "dataset": "COMP 3021",
        "project": "cttongac",
        "bug_id": "22",
        "T": "void testInsufficientDestinations() { final var invalidMap = \"\"\" 233 ###### #A..@# #...@# #a...# #.a..# #..a.# ###### \"\"\"; }",
        "C": "",
        "label": "P"
    },
    "3248": {
        "dataset": "COMP 3021",
        "project": "cttongac",
        "bug_id": "23",
        "T": "void testSuperLargeMap() { try { new GameMap(Integer.MAX_VALUE, Integer.MAX_VALUE, Collections.emptySet(), 0); } catch (OutOfMemoryError e) { throw new RuntimeException(e); } }); }",
        "C": "public GameMap(int maxWidth, int maxHeight, Set<Position> destinations, int undoLimit) { // TODO this.maxWidth = maxWidth; this.maxHeight = maxHeight; this.destinations = destinations; this.undoLimit = (undoLimit); } // /** * Parses the map from a string representation. * The first line is undo limit. * Starting from the second line, the game map is represented as follows, * <li># represents a {@link Wall}</li> * <li>@ represents a box destination.</li> * <li>Any upper-case letter represents a {@link Player}.</li> * <li> * Any lower-case letter represents a {@link Box} that is only movable by the player with the corresponding upper-case letter. * For instance, box \"a\" can only be moved by player \"A\" and not movable by player \"B\". * </li> * <li>. represents an {@link Empty} position in the map, meaning there is no player or box currently at this position.</li> * <p> * Notes: * <li> * There can be at most 26 players. * All implementations of classes in the hk.ust.comp3021.game package should support up to 26 players. * </li> * <li> * For simplicity, we assume the given map is bounded with a closed boundary. * There is no need to check this point. * </li> * <li> * Example maps can be found in \"src/main/resources\". * </li> * * @param mapText The string representation. * @return The parsed GameMap object. * @throws IllegalArgumentException if undo limit is negative but not -1. * @throws IllegalArgumentException if there are multiple same upper-case letters, i.e., one player can only exist at one position. * @throws IllegalArgumentException if there are no players in the map. * @throws IllegalArgumentException if the number of boxes is not equal to the number of box destinations. * @throws IllegalArgumentException if there are boxes whose {@link Box#getPlayerId()} public TerminalRenderingEngine(PrintStream outputSteam) { this.outputSteam = outputSteam; }",
        "label": "P"
    },
    "3249": {
        "dataset": "COMP 3021",
        "project": "cttongac",
        "bug_id": "24",
        "T": "void testInvalidUndoLimit() { final var invalidMap = \"\"\" -233 ###### #A..@# #...@# #a.b@# #.a.@# #..a.# ###### \"\"\"; }",
        "C": "",
        "label": "P"
    },
    "3250": {
        "dataset": "COMP 3021",
        "project": "cttongac",
        "bug_id": "25",
        "T": "void testEmptyMap() { final var invalidMap = \"\"; }",
        "C": "",
        "label": "P"
    },
    "3251": {
        "dataset": "COMP 3021",
        "project": "cttongac",
        "bug_id": "26",
        "T": "void testMove(String input, String name, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); } private InputStream fixValueStream(String content) { final var bytes = content.getBytes(StandardCharsets.UTF_8); return new ByteArrayInputStream(bytes); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine(); // TODO // if(inputLine.toLowerCase().equals('a') || inputLine.toLowerCase().equals('J') ) // System.out.println(\"what is the most important thing =\" ); System.out.println((new Exit(0)).equals(new Exit(0))); if(inputLine.toLowerCase().equals(\"exit\")){ return new Exit(0); } else if(inputLine.length()==1 && inputLine.matches(\"[AaSsDdWwHhJjKkLlUu]\") ) { String command = inputLine.toLowerCase(); switch(command){ case \"a\" -> new Move.Left(0); case \"h\" -> new Move.Left(1); case \"s\" -> new Move.Down(0); case \"j\" -> new Move.Down(1); case \"w\" -> new Move.Up(0); case \"k\" -> new Move.Up(1); case \"d\" -> new Move.Right(0); case \"l\" -> new Move.Down(1); case \"u\" -> new Undo(0); default -> new InvalidInput(0,\"Invalid Input\"); } } return new InvalidInput( 0,\"Invalid Input\"); }",
        "label": "F"
    },
    "3252": {
        "dataset": "COMP 3021",
        "project": "cttongac",
        "bug_id": "27",
        "T": "void testMove(String input, String name, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); } private InputStream fixValueStream(String content) { final var bytes = content.getBytes(StandardCharsets.UTF_8); return new ByteArrayInputStream(bytes); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine(); // TODO // if(inputLine.toLowerCase().equals('a') || inputLine.toLowerCase().equals('J') ) // System.out.println(\"what is the most important thing =\" ); System.out.println((new Exit(0)).equals(new Exit(0))); if(inputLine.toLowerCase().equals(\"exit\")){ return new Exit(0); } else if(inputLine.length()==1 && inputLine.matches(\"[AaSsDdWwHhJjKkLlUu]\") ) { String command = inputLine.toLowerCase(); switch(command){ case \"a\" -> new Move.Left(0); case \"h\" -> new Move.Left(1); case \"s\" -> new Move.Down(0); case \"j\" -> new Move.Down(1); case \"w\" -> new Move.Up(0); case \"k\" -> new Move.Up(1); case \"d\" -> new Move.Right(0); case \"l\" -> new Move.Down(1); case \"u\" -> new Undo(0); default -> new InvalidInput(0,\"Invalid Input\"); } } return new InvalidInput( 0,\"Invalid Input\"); }",
        "label": "F"
    },
    "3253": {
        "dataset": "COMP 3021",
        "project": "cttongac",
        "bug_id": "28",
        "T": "void testMove(String input, String name, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); } private InputStream fixValueStream(String content) { final var bytes = content.getBytes(StandardCharsets.UTF_8); return new ByteArrayInputStream(bytes); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine(); // TODO // if(inputLine.toLowerCase().equals('a') || inputLine.toLowerCase().equals('J') ) // System.out.println(\"what is the most important thing =\" ); System.out.println((new Exit(0)).equals(new Exit(0))); if(inputLine.toLowerCase().equals(\"exit\")){ return new Exit(0); } else if(inputLine.length()==1 && inputLine.matches(\"[AaSsDdWwHhJjKkLlUu]\") ) { String command = inputLine.toLowerCase(); switch(command){ case \"a\" -> new Move.Left(0); case \"h\" -> new Move.Left(1); case \"s\" -> new Move.Down(0); case \"j\" -> new Move.Down(1); case \"w\" -> new Move.Up(0); case \"k\" -> new Move.Up(1); case \"d\" -> new Move.Right(0); case \"l\" -> new Move.Down(1); case \"u\" -> new Undo(0); default -> new InvalidInput(0,\"Invalid Input\"); } } return new InvalidInput( 0,\"Invalid Input\"); }",
        "label": "F"
    },
    "3254": {
        "dataset": "COMP 3021",
        "project": "cttongac",
        "bug_id": "29",
        "T": "void testMove(String input, String name, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); } private InputStream fixValueStream(String content) { final var bytes = content.getBytes(StandardCharsets.UTF_8); return new ByteArrayInputStream(bytes); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine(); // TODO // if(inputLine.toLowerCase().equals('a') || inputLine.toLowerCase().equals('J') ) // System.out.println(\"what is the most important thing =\" ); System.out.println((new Exit(0)).equals(new Exit(0))); if(inputLine.toLowerCase().equals(\"exit\")){ return new Exit(0); } else if(inputLine.length()==1 && inputLine.matches(\"[AaSsDdWwHhJjKkLlUu]\") ) { String command = inputLine.toLowerCase(); switch(command){ case \"a\" -> new Move.Left(0); case \"h\" -> new Move.Left(1); case \"s\" -> new Move.Down(0); case \"j\" -> new Move.Down(1); case \"w\" -> new Move.Up(0); case \"k\" -> new Move.Up(1); case \"d\" -> new Move.Right(0); case \"l\" -> new Move.Down(1); case \"u\" -> new Undo(0); default -> new InvalidInput(0,\"Invalid Input\"); } } return new InvalidInput( 0,\"Invalid Input\"); }",
        "label": "F"
    },
    "3255": {
        "dataset": "COMP 3021",
        "project": "cttongac",
        "bug_id": "30",
        "T": "void testMove(String input, String name, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); } private InputStream fixValueStream(String content) { final var bytes = content.getBytes(StandardCharsets.UTF_8); return new ByteArrayInputStream(bytes); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine(); // TODO // if(inputLine.toLowerCase().equals('a') || inputLine.toLowerCase().equals('J') ) // System.out.println(\"what is the most important thing =\" ); System.out.println((new Exit(0)).equals(new Exit(0))); if(inputLine.toLowerCase().equals(\"exit\")){ return new Exit(0); } else if(inputLine.length()==1 && inputLine.matches(\"[AaSsDdWwHhJjKkLlUu]\") ) { String command = inputLine.toLowerCase(); switch(command){ case \"a\" -> new Move.Left(0); case \"h\" -> new Move.Left(1); case \"s\" -> new Move.Down(0); case \"j\" -> new Move.Down(1); case \"w\" -> new Move.Up(0); case \"k\" -> new Move.Up(1); case \"d\" -> new Move.Right(0); case \"l\" -> new Move.Down(1); case \"u\" -> new Undo(0); default -> new InvalidInput(0,\"Invalid Input\"); } } return new InvalidInput( 0,\"Invalid Input\"); }",
        "label": "F"
    },
    "3256": {
        "dataset": "COMP 3021",
        "project": "cttongac",
        "bug_id": "31",
        "T": "void testMove(String input, String name, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); } private InputStream fixValueStream(String content) { final var bytes = content.getBytes(StandardCharsets.UTF_8); return new ByteArrayInputStream(bytes); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine(); // TODO // if(inputLine.toLowerCase().equals('a') || inputLine.toLowerCase().equals('J') ) // System.out.println(\"what is the most important thing =\" ); System.out.println((new Exit(0)).equals(new Exit(0))); if(inputLine.toLowerCase().equals(\"exit\")){ return new Exit(0); } else if(inputLine.length()==1 && inputLine.matches(\"[AaSsDdWwHhJjKkLlUu]\") ) { String command = inputLine.toLowerCase(); switch(command){ case \"a\" -> new Move.Left(0); case \"h\" -> new Move.Left(1); case \"s\" -> new Move.Down(0); case \"j\" -> new Move.Down(1); case \"w\" -> new Move.Up(0); case \"k\" -> new Move.Up(1); case \"d\" -> new Move.Right(0); case \"l\" -> new Move.Down(1); case \"u\" -> new Undo(0); default -> new InvalidInput(0,\"Invalid Input\"); } } return new InvalidInput( 0,\"Invalid Input\"); }",
        "label": "F"
    },
    "3257": {
        "dataset": "COMP 3021",
        "project": "cttongac",
        "bug_id": "32",
        "T": "void testMove(String input, String name, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); } private InputStream fixValueStream(String content) { final var bytes = content.getBytes(StandardCharsets.UTF_8); return new ByteArrayInputStream(bytes); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine(); // TODO // if(inputLine.toLowerCase().equals('a') || inputLine.toLowerCase().equals('J') ) // System.out.println(\"what is the most important thing =\" ); System.out.println((new Exit(0)).equals(new Exit(0))); if(inputLine.toLowerCase().equals(\"exit\")){ return new Exit(0); } else if(inputLine.length()==1 && inputLine.matches(\"[AaSsDdWwHhJjKkLlUu]\") ) { String command = inputLine.toLowerCase(); switch(command){ case \"a\" -> new Move.Left(0); case \"h\" -> new Move.Left(1); case \"s\" -> new Move.Down(0); case \"j\" -> new Move.Down(1); case \"w\" -> new Move.Up(0); case \"k\" -> new Move.Up(1); case \"d\" -> new Move.Right(0); case \"l\" -> new Move.Down(1); case \"u\" -> new Undo(0); default -> new InvalidInput(0,\"Invalid Input\"); } } return new InvalidInput( 0,\"Invalid Input\"); }",
        "label": "F"
    },
    "3258": {
        "dataset": "COMP 3021",
        "project": "cttongac",
        "bug_id": "33",
        "T": "void testMove(String input, String name, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); } private InputStream fixValueStream(String content) { final var bytes = content.getBytes(StandardCharsets.UTF_8); return new ByteArrayInputStream(bytes); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine(); // TODO // if(inputLine.toLowerCase().equals('a') || inputLine.toLowerCase().equals('J') ) // System.out.println(\"what is the most important thing =\" ); System.out.println((new Exit(0)).equals(new Exit(0))); if(inputLine.toLowerCase().equals(\"exit\")){ return new Exit(0); } else if(inputLine.length()==1 && inputLine.matches(\"[AaSsDdWwHhJjKkLlUu]\") ) { String command = inputLine.toLowerCase(); switch(command){ case \"a\" -> new Move.Left(0); case \"h\" -> new Move.Left(1); case \"s\" -> new Move.Down(0); case \"j\" -> new Move.Down(1); case \"w\" -> new Move.Up(0); case \"k\" -> new Move.Up(1); case \"d\" -> new Move.Right(0); case \"l\" -> new Move.Down(1); case \"u\" -> new Undo(0); default -> new InvalidInput(0,\"Invalid Input\"); } } return new InvalidInput( 0,\"Invalid Input\"); }",
        "label": "F"
    },
    "3259": {
        "dataset": "COMP 3021",
        "project": "cttongac",
        "bug_id": "34",
        "T": "void testUndo(String input, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine(); // TODO // if(inputLine.toLowerCase().equals('a') || inputLine.toLowerCase().equals('J') ) // System.out.println(\"what is the most important thing =\" ); System.out.println((new Exit(0)).equals(new Exit(0))); if(inputLine.toLowerCase().equals(\"exit\")){ return new Exit(0); } else if(inputLine.length()==1 && inputLine.matches(\"[AaSsDdWwHhJjKkLlUu]\") ) { String command = inputLine.toLowerCase(); switch(command){ case \"a\" -> new Move.Left(0); case \"h\" -> new Move.Left(1); case \"s\" -> new Move.Down(0); case \"j\" -> new Move.Down(1); case \"w\" -> new Move.Up(0); case \"k\" -> new Move.Up(1); case \"d\" -> new Move.Right(0); case \"l\" -> new Move.Down(1); case \"u\" -> new Undo(0); default -> new InvalidInput(0,\"Invalid Input\"); } } return new InvalidInput( 0,\"Invalid Input\"); }",
        "label": "F"
    },
    "3260": {
        "dataset": "COMP 3021",
        "project": "cttongac",
        "bug_id": "35",
        "T": "void testInvalidInput() { final var inputStream = fixValueStream(\"blah blah\"); final var inputEngine = new TerminalInputEngine(inputStream); final var action = inputEngine.fetchAction(); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine(); // TODO // if(inputLine.toLowerCase().equals('a') || inputLine.toLowerCase().equals('J') ) // System.out.println(\"what is the most important thing =\" ); System.out.println((new Exit(0)).equals(new Exit(0))); if(inputLine.toLowerCase().equals(\"exit\")){ return new Exit(0); } else if(inputLine.length()==1 && inputLine.matches(\"[AaSsDdWwHhJjKkLlUu]\") ) { String command = inputLine.toLowerCase(); switch(command){ case \"a\" -> new Move.Left(0); case \"h\" -> new Move.Left(1); case \"s\" -> new Move.Down(0); case \"j\" -> new Move.Down(1); case \"w\" -> new Move.Up(0); case \"k\" -> new Move.Up(1); case \"d\" -> new Move.Right(0); case \"l\" -> new Move.Down(1); case \"u\" -> new Undo(0); default -> new InvalidInput(0,\"Invalid Input\"); } } return new InvalidInput( 0,\"Invalid Input\"); }",
        "label": "P"
    },
    "3261": {
        "dataset": "COMP 3021",
        "project": "cttongac",
        "bug_id": "36",
        "T": "void testUndoWhenThereIsNoMove() { final var gameState = new GameState(TestHelper.parseGameMap(\"\"\" 233 ###### #A.a@# #..a@# ###### \"\"\" )); gameState.undo(); } private Entity generateEntity(int key) { return switch (key % 4) { case 0 -> new Box(0); case 1 -> new Empty(); case 2 -> new Player(0); case 3 -> new Wall(); default -> throw new ShouldNotReachException(); }; }",
        "C": "public GameState(@NotNull GameMap map) { // TODO map.getMap().entrySet().forEach(entry -> { System.out.println(entry.getKey() + \" \" + entry.getValue()); }); checkPoints.add(new GameState(this.maxWidth,this.maxHeight,this.destinations,this.undoLimit,this.runningMap)); runningMap.putAll(map.getMap()); this.maxWidth = map.getMaxWidth(); this.maxHeight = map.getMaxHeight(); this.destinations = map.getDestinations(); this.undoLimit = map.getUndoLimit().get(); this.playerList = map.getPlayerList(); } public GameState(int maxWidth,int maxHeight, Set<Position> destinations, int undoLimit, Map<Position,Entity> map) { this.maxHeight = maxHeight; this.maxWidth = maxWidth; this.destinations = destinations; this.undoLimit = undoLimit; runningMap.putAll(map); } public TerminalRenderingEngine(PrintStream outputSteam) { this.outputSteam = outputSteam; } public Box(int playerId) { this.playerId = playerId; } public Player(int id) { this.id = id; } public ShouldNotReachException() { super(\"This branch should not be reached.\"); }",
        "label": "F"
    },
    "3262": {
        "dataset": "COMP 3021",
        "project": "cttongac",
        "bug_id": "37",
        "T": "void testGetUndoUnlimited() { final var gameState = new GameState(TestHelper.parseGameMap(\"\"\" -1 ###### #.Aa@# #..a@# ###### \"\"\" )); }",
        "C": "public GameState(@NotNull GameMap map) { // TODO map.getMap().entrySet().forEach(entry -> { System.out.println(entry.getKey() + \" \" + entry.getValue()); }); checkPoints.add(new GameState(this.maxWidth,this.maxHeight,this.destinations,this.undoLimit,this.runningMap)); runningMap.putAll(map.getMap()); this.maxWidth = map.getMaxWidth(); this.maxHeight = map.getMaxHeight(); this.destinations = map.getDestinations(); this.undoLimit = map.getUndoLimit().get(); this.playerList = map.getPlayerList(); }",
        "label": "P"
    },
    "3263": {
        "dataset": "COMP 3021",
        "project": "cttongac",
        "bug_id": "38",
        "T": "void testMapCopying() { final var maxWidth = 2333; final var maxHeight = 2333; final var random = new Random(); final var randomEntities = Stream.generate(() -> Position.of(random.nextInt(maxWidth), random.nextInt(maxHeight))) .distinct() .limit(100) .collect(Collectors.toMap(Function.identity(), it -> generateEntity(it.x()))); final var firstPos = randomEntities.keySet().stream().findFirst(); final var gameMap = new GameMap(maxWidth, maxHeight, Collections.singleton(firstPos.get()), 233); randomEntities.forEach(gameMap::putEntity); final var gameState = new GameState(gameMap); final var randomPosition = randomEntities.keySet().stream().findAny(); gameMap.putEntity(randomPosition.get(), new Empty()); randomEntities.forEach((p, e) -> assertEquals(e, gameState.getEntity(p))); }",
        "C": "public static @NotNull Position of(int x, int y) { return new Position(x, y); } public GameMap(int maxWidth, int maxHeight, Set<Position> destinations, int undoLimit) { // TODO this.maxWidth = maxWidth; this.maxHeight = maxHeight; this.destinations = destinations; this.undoLimit = (undoLimit); } // /** * Parses the map from a string representation. * The first line is undo limit. * Starting from the second line, the game map is represented as follows, * <li># represents a {@link Wall}</li> * <li>@ represents a box destination.</li> * <li>Any upper-case letter represents a {@link Player}.</li> * <li> * Any lower-case letter represents a {@link Box} that is only movable by the player with the corresponding upper-case letter. * For instance, box \"a\" can only be moved by player \"A\" and not movable by player \"B\". * </li> * <li>. represents an {@link Empty} position in the map, meaning there is no player or box currently at this position.</li> * <p> * Notes: * <li> * There can be at most 26 players. * All implementations of classes in the hk.ust.comp3021.game package should support up to 26 players. * </li> * <li> * For simplicity, we assume the given map is bounded with a closed boundary. * There is no need to check this point. * </li> * <li> * Example maps can be found in \"src/main/resources\". * </li> * * @param mapText The string representation. * @return The parsed GameMap object. * @throws IllegalArgumentException if undo limit is negative but not -1. * @throws IllegalArgumentException if there are multiple same upper-case letters, i.e., one player can only exist at one position. * @throws IllegalArgumentException if there are no players in the map. * @throws IllegalArgumentException if the number of boxes is not equal to the number of box destinations. * @throws IllegalArgumentException if there are boxes whose {@link Box#getPlayerId()} public GameState(@NotNull GameMap map) { // TODO map.getMap().entrySet().forEach(entry -> { System.out.println(entry.getKey() + \" \" + entry.getValue()); }); checkPoints.add(new GameState(this.maxWidth,this.maxHeight,this.destinations,this.undoLimit,this.runningMap)); runningMap.putAll(map.getMap()); this.maxWidth = map.getMaxWidth(); this.maxHeight = map.getMaxHeight(); this.destinations = map.getDestinations(); this.undoLimit = map.getUndoLimit().get(); this.playerList = map.getPlayerList(); } public void putEntity(Position position, Entity entity) { // TODO GAMEMAP.put(position,entity); } public @Nullable Entity getEntity(@NotNull Position position) { // TODO // throw new NotImplementedException(); return runningMap.get(position); } /** * Get all box destination positions as a set in the game map. * This should be the same as that in {@link GameMap}",
        "label": "P"
    },
    "3264": {
        "dataset": "COMP 3021",
        "project": "cttongac",
        "bug_id": "39",
        "T": "void testUndoWhenThereIsMoveButNoCheckpoint() { final var gameState = new GameState(TestHelper.parseGameMap(\"\"\" 233 ###### #A.a@# #..a@# ###### \"\"\" )); gameState.move(Position.of(1, 1), Position.of(2, 1)); gameState.undo(); }",
        "C": "public GameState(@NotNull GameMap map) { // TODO map.getMap().entrySet().forEach(entry -> { System.out.println(entry.getKey() + \" \" + entry.getValue()); }); checkPoints.add(new GameState(this.maxWidth,this.maxHeight,this.destinations,this.undoLimit,this.runningMap)); runningMap.putAll(map.getMap()); this.maxWidth = map.getMaxWidth(); this.maxHeight = map.getMaxHeight(); this.destinations = map.getDestinations(); this.undoLimit = map.getUndoLimit().get(); this.playerList = map.getPlayerList(); } public void move(Position from, Position to) { // TODO // throw new NotImplementedException(); if(runningMap.get(from) instanceof Box) { checkpoint(); checkPoints.add(new GameState(this.maxWidth, this.maxHeight, this.destinations, this.undoLimit, this.runningMap)); } runningMap.put(to,runningMap.get(from)); runningMap.remove(from); } /** * Record a checkpoint of the game state, including: * <li>All current positions of entities in the game map.</li> * <li>Current undo quota</li> * <p> * Checkpoint is used in {@link GameState#undo()} public static @NotNull Position of(int x, int y) { return new Position(x, y); } public GameState(int maxWidth,int maxHeight, Set<Position> destinations, int undoLimit, Map<Position,Entity> map) { this.maxHeight = maxHeight; this.maxWidth = maxWidth; this.destinations = destinations; this.undoLimit = undoLimit; runningMap.putAll(map); }",
        "label": "F"
    },
    "3265": {
        "dataset": "COMP 3021",
        "project": "cttongac",
        "bug_id": "40",
        "T": "void testGameExit() { final var gameState = mock(GameState.class); final var inputEngine = mock(TerminalInputEngine.class); final var renderingEngine = mock(TerminalRenderingEngine.class); when(gameState.isWin()).thenReturn(false, false, false); when(inputEngine.fetchAction()) .thenReturn(new InvalidInput(0, \"\"), new InvalidInput(0, \"\"), new Exit(0)); final var game = new TerminalSokobanGame(gameState, inputEngine, renderingEngine); game.run(); verify(renderingEngine, atLeastOnce()).message(any()); }",
        "C": "public InvalidInput(int initiator, @NotNull String message) { super(initiator); this.message = message; } public Exit(int initiator) { super(initiator); } public TerminalSokobanGame(GameState gameState, TerminalInputEngine inputEngine, TerminalRenderingEngine renderingEngine) { super(gameState); this.inputEngine = inputEngine; this.renderingEngine = renderingEngine; // TODO // Check the number of players if(gameState.getAllPlayerPositions().size()>2) throw new NotImplementedException(); } public void run() { // TODO TerminalSokobanGame terminalSokobanGame = new TerminalSokobanGame(this.state, (TerminalInputEngine) this.inputEngine, (TerminalRenderingEngine) this.renderingEngine); // terminalSokobanGame.renderingEngine.render(state); while(!shouldStop()){ Action tmp = inputEngine.fetchAction(); terminalSokobanGame.processAction(tmp); terminalSokobanGame.renderingEngine.render(terminalSokobanGame.state); System.out.println(tmp.getClass()); if(tmp instanceof Exit) { break; } } }",
        "label": "F"
    },
    "3266": {
        "dataset": "COMP 3021",
        "project": "cttongac",
        "bug_id": "41",
        "T": "void testGameWin() { final var gameState = mock(GameState.class); final var inputEngine = mock(TerminalInputEngine.class); final var renderingEngine = mock(TerminalRenderingEngine.class); when(gameState.isWin()).thenReturn(false, false, false, true); when(inputEngine.fetchAction()) .thenReturn(new InvalidInput(0, \"\")); final var game = new TerminalSokobanGame(gameState, inputEngine, renderingEngine); game.run(); verify(gameState, atLeastOnce()).isWin(); verify(renderingEngine, atLeastOnce()).message(any()); }",
        "C": "public InvalidInput(int initiator, @NotNull String message) { super(initiator); this.message = message; } public TerminalSokobanGame(GameState gameState, TerminalInputEngine inputEngine, TerminalRenderingEngine renderingEngine) { super(gameState); this.inputEngine = inputEngine; this.renderingEngine = renderingEngine; // TODO // Check the number of players if(gameState.getAllPlayerPositions().size()>2) throw new NotImplementedException(); } public void run() { // TODO TerminalSokobanGame terminalSokobanGame = new TerminalSokobanGame(this.state, (TerminalInputEngine) this.inputEngine, (TerminalRenderingEngine) this.renderingEngine); // terminalSokobanGame.renderingEngine.render(state); while(!shouldStop()){ Action tmp = inputEngine.fetchAction(); terminalSokobanGame.processAction(tmp); terminalSokobanGame.renderingEngine.render(terminalSokobanGame.state); System.out.println(tmp.getClass()); if(tmp instanceof Exit) { break; } } }",
        "label": "F"
    },
    "3267": {
        "dataset": "COMP 3021",
        "project": "cttongac",
        "bug_id": "42",
        "T": "void testMoreThanTwoPlayers() { final var gameState = mock(GameState.class); final var inputEngine = mock(TerminalInputEngine.class); final var renderingEngine = mock(TerminalRenderingEngine.class); when(gameState.getAllPlayerPositions()).thenReturn(new HashSet<>(Arrays.asList(Position.of(1, 1), Position.of(1, 2), Position.of(1, 3)))); }",
        "C": "public static @NotNull Position of(int x, int y) { return new Position(x, y); }",
        "label": "F"
    },
    "3268": {
        "dataset": "COMP 3021",
        "project": "yyubv",
        "bug_id": "0",
        "T": "void moveUp() { Position.of(233, 232), new Move.Up(-1).nextPosition(pos) ); }",
        "C": "public static @NotNull Position of(int x, int y) { return new Position(x, y); } public Up(int initiator) { super(initiator); }",
        "label": "P"
    },
    "3269": {
        "dataset": "COMP 3021",
        "project": "yyubv",
        "bug_id": "1",
        "T": "void moveDown() { Position.of(233, 234), new Move.Down(-1).nextPosition(pos) ); }",
        "C": "public static @NotNull Position of(int x, int y) { return new Position(x, y); } public Down(int initiator) { super(initiator); }",
        "label": "P"
    },
    "3270": {
        "dataset": "COMP 3021",
        "project": "yyubv",
        "bug_id": "2",
        "T": "void moveRight() { Position.of(234, 233), new Move.Right(-1).nextPosition(pos) ); }",
        "C": "public static @NotNull Position of(int x, int y) { return new Position(x, y); } public Right(int initiator) { super(initiator); }",
        "label": "P"
    },
    "3271": {
        "dataset": "COMP 3021",
        "project": "yyubv",
        "bug_id": "3",
        "T": "void testExceedingUndoQuota() { final var gameState = mock(GameState.class); when(gameState.getPlayerPositionById(anyInt())).thenReturn(Position.of(0, 0)); when(gameState.getUndoQuota()).thenReturn(Optional.of(0)); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Undo(0)); }",
        "C": "public Undo(int initiator) { super(initiator); }",
        "label": "P"
    },
    "3272": {
        "dataset": "COMP 3021",
        "project": "yyubv",
        "bug_id": "4",
        "T": "void testExit() { final var gameState = mock(GameState.class); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Exit(0)); }",
        "C": "public Exit(int initiator) { super(initiator); }",
        "label": "P"
    },
    "3273": {
        "dataset": "COMP 3021",
        "project": "yyubv",
        "bug_id": "5",
        "T": "void testUndoUnlimited() { final var gameState = mock(GameState.class); when(gameState.getPlayerPositionById(anyInt())).thenReturn(Position.of(0, 0)); when(gameState.getUndoQuota()).thenReturn(Optional.empty()); final var game = new SokobanGameForTesting(gameState); for (int i = 0; i < 10000; i++) { final var result = game.feedActionForProcessing(new Undo(0)); } verify(gameState, times(10000)).undo(); }",
        "C": "public TerminalRenderingEngine(PrintStream outputSteam) { this.outputSteam = outputSteam; } public Undo(int initiator) { super(initiator); }",
        "label": "P"
    },
    "3274": {
        "dataset": "COMP 3021",
        "project": "yyubv",
        "bug_id": "6",
        "T": "void testPushOtherPlayerBox() { String mapText = \"\"\" 233 ###### #AB.@# #b.a.# #@...# ###### \"\"\"; final var testMap = TestHelper.parseGameMap(mapText); final var gameState = spy(new GameState(testMap)); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Move.Down(0)); verify(gameState, never()).move(any(), any()); }",
        "C": "public GameState(@NotNull GameMap map) { this.map = new GameMap(map); this.initMap = new GameMap(map); this.undoQuota = map.getUndoLimit(); this.historyMapStack = new Stack<>(); } public Down(int initiator) { super(initiator); }",
        "label": "P"
    },
    "3275": {
        "dataset": "COMP 3021",
        "project": "yyubv",
        "bug_id": "7",
        "T": "void testMoveNonExistingPlayer() { String mapText = \"\"\" 233 ###### #A..@# #a...# ##...# ###### \"\"\"; final var testMap = TestHelper.parseGameMap(mapText); final var gameState = spy(new GameState(testMap)); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Move.Down(23)); }",
        "C": "public GameState(@NotNull GameMap map) { this.map = new GameMap(map); this.initMap = new GameMap(map); this.undoQuota = map.getUndoLimit(); this.historyMapStack = new Stack<>(); } public Down(int initiator) { super(initiator); }",
        "label": "P"
    },
    "3276": {
        "dataset": "COMP 3021",
        "project": "yyubv",
        "bug_id": "8",
        "T": "void testCheckpointWhenNeed() { final var gameState = spy(new GameState(TestHelper.parseGameMap(\"\"\" 233 ###### #.Aa@# #..a@# ###### \"\"\" ))); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Move.Right(0)); verify(gameState, times(1)).checkpoint(); }",
        "C": "public GameState(@NotNull GameMap map) { this.map = new GameMap(map); this.initMap = new GameMap(map); this.undoQuota = map.getUndoLimit(); this.historyMapStack = new Stack<>(); } public Right(int initiator) { super(initiator); }",
        "label": "P"
    },
    "3277": {
        "dataset": "COMP 3021",
        "project": "yyubv",
        "bug_id": "9",
        "T": "void testPushBoxAgainstWall() { String mapText = \"\"\" 233 ###### #A..@# #a...# ##...# ###### \"\"\"; final var testMap = TestHelper.parseGameMap(mapText); final var gameState = spy(new GameState(testMap)); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Move.Down(0)); verify(gameState, never()).move(any(), any()); }",
        "C": "public GameState(@NotNull GameMap map) { this.map = new GameMap(map); this.initMap = new GameMap(map); this.undoQuota = map.getUndoLimit(); this.historyMapStack = new Stack<>(); } public Down(int initiator) { super(initiator); }",
        "label": "P"
    },
    "3278": {
        "dataset": "COMP 3021",
        "project": "yyubv",
        "bug_id": "10",
        "T": "void testCheckpointWhenNotNeed() { final var gameState = spy(new GameState(TestHelper.parseGameMap(\"\"\" 233 ###### #A.a@# #..a@# ###### \"\"\" ))); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Move.Right(0)); verify(gameState, never()).checkpoint(); } private static class SokobanGameForTesting extends AbstractSokobanGame { protected SokobanGameForTesting(GameState gameState) { super(gameState); } @Override public void run() { } public ActionResult feedActionForProcessing(Action action) { return processAction(action); } }",
        "C": "public GameState(@NotNull GameMap map) { this.map = new GameMap(map); this.initMap = new GameMap(map); this.undoQuota = map.getUndoLimit(); this.historyMapStack = new Stack<>(); } public Right(int initiator) { super(initiator); } public void run() { renderingEngine.message(GAME_READY_MESSAGE); while (!shouldStop()) { renderingEngine.render(state); String quotaStr; if (state.getUndoQuota().isPresent()) { quotaStr = String.format(UNDO_QUOTA_TEMPLATE, state.getUndoQuota().get()); } else { quotaStr = UNDO_QUOTA_UNLIMITED; } renderingEngine.message(quotaStr); Action newAct = inputEngine.fetchAction(); ActionResult res = processAction(newAct); if (res instanceof ActionResult.Failed) { renderingEngine.message(((ActionResult.Failed)(res)).getReason()); } } renderingEngine.render(state); renderingEngine.message(GAME_EXIT_MESSAGE); if (state.isWin()) { renderingEngine.message(WIN_MESSAGE); } } protected ActionResult processAction(@NotNull Action action) { ActionResult res = null; if (action instanceof Exit) { needExit = true; res = new ActionResult.Success(action); } else if (action instanceof InvalidInput) { res = new ActionResult.Failed(action, ((InvalidInput) action).getMessage()); } else if (action instanceof Undo) { if (!state.getUndoQuota().isPresent() || state.getUndoQuota().get() > 0) { state.undo(); res = new ActionResult.Success(action); } else { res = new ActionResult.Failed(action, StringResources.UNDO_QUOTA_RUN_OUT); } } else if (action instanceof Move){ Position currPos = state.getPlayerPositionById(action.getInitiator()); if (currPos == null) { return new ActionResult.Failed(action, StringResources.PLAYER_NOT_FOUND); } Position playerNextPos = ((Move) action).nextPosition(currPos); Entity playerNextEntity = state.getEntity(playerNextPos); if (playerNextEntity instanceof Box) { Position boxNextPos = ((Move) action).next2Position(currPos); if (action.getInitiator() != ((Box) playerNextEntity).getPlayerId()) { res = new ActionResult.Failed(action, StringResources.MOVE_BOX_OTHER); } else if (state.getEntity(boxNextPos) instanceof Empty) { state.move(playerNextPos, boxNextPos); state.move(currPos, playerNextPos); state.checkpoint(); res = new ActionResult.Success(action); } else { res = new ActionResult.Failed(action, StringResources.MOVE_BOX_FAILED); } } else if (playerNextEntity instanceof Empty) { state.move(currPos, playerNextPos); res = new ActionResult.Success(action); } else if (playerNextEntity instanceof Wall) { res = new ActionResult.Failed(action, StringResources.MOVE_HIT_WALL); } else if (playerNextEntity instanceof Player) { res = new ActionResult.Failed(action, StringResources.MOVE_HIT_PLAYER); } } return res; }",
        "label": "P"
    },
    "3279": {
        "dataset": "COMP 3021",
        "project": "yyubv",
        "bug_id": "11",
        "T": "void testHitAnotherPlayer() { String mapText = \"\"\" 233 ###### #A..@# #B...# #ab.@# ###### \"\"\"; final var testMap = TestHelper.parseGameMap(mapText); final var gameState = spy(new GameState(testMap)); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Move.Down(0)); verify(gameState, never()).move(any(), any()); }",
        "C": "public GameState(@NotNull GameMap map) { this.map = new GameMap(map); this.initMap = new GameMap(map); this.undoQuota = map.getUndoLimit(); this.historyMapStack = new Stack<>(); } public Down(int initiator) { super(initiator); }",
        "label": "P"
    },
    "3280": {
        "dataset": "COMP 3021",
        "project": "yyubv",
        "bug_id": "12",
        "T": "void testUndoWithinQuota() { final var gameState = mock(GameState.class); when(gameState.getPlayerPositionById(anyInt())).thenReturn(Position.of(0, 0)); when(gameState.getUndoQuota()).thenReturn(Optional.of(1)); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Undo(0)); verify(gameState, times(1)).undo(); }",
        "C": "public Undo(int initiator) { super(initiator); }",
        "label": "P"
    },
    "3281": {
        "dataset": "COMP 3021",
        "project": "yyubv",
        "bug_id": "13",
        "T": "void testInvalidInput() { final var game = new SokobanGameForTesting(mock(GameState.class)); final var message = String.valueOf(new Random().nextLong()); final var action = new InvalidInput(-1, message); final var result = game.feedActionForProcessing(action); }",
        "C": "public InvalidInput(int initiator, @NotNull String message) { super(initiator); this.message = message; }",
        "label": "P"
    },
    "3282": {
        "dataset": "COMP 3021",
        "project": "yyubv",
        "bug_id": "14",
        "T": "void testUndoLimitParsing() { final var gameMap = TestHelper.parseGameMap(rectangularMap); }",
        "C": "",
        "label": "P"
    },
    "3283": {
        "dataset": "COMP 3021",
        "project": "yyubv",
        "bug_id": "15",
        "T": "void testWidthForNonRectangularMap() { final var gameMap = TestHelper.parseGameMap(nonRectangularMap); }",
        "C": "",
        "label": "P"
    },
    "3284": {
        "dataset": "COMP 3021",
        "project": "yyubv",
        "bug_id": "16",
        "T": "void testTwoPlayersMap() { final var twoPlayersMap = \"\"\" 233 ###### #A..@# #..B@# #....# #.a..# #..b.# ###### \"\"\"; final var gameMap = TestHelper.parseGameMap(twoPlayersMap); final var playerIds = gameMap.getPlayerIds(); final var expectedIds = new HashSet<Integer>(); expectedIds.add(0); expectedIds.add(1); }",
        "C": "public Set<Integer> getPlayerIds() { Set<Integer> idSet = new HashSet<>(); for (int i = 0; i < maxHeight; i ++) { for (int j = 0; j < maxWidth; j ++) { var currEntity = getEntity(new Position(j, i)); if (currEntity instanceof Player) { idSet.add(((Player) currEntity).getId()); } } } return idSet; }",
        "label": "P"
    },
    "3285": {
        "dataset": "COMP 3021",
        "project": "yyubv",
        "bug_id": "17",
        "T": "void testMapWithoutPlayer() { final var invalidMap = \"\"\" 233 ### #.# ### \"\"\"; } // @Tag(TestKind.HIDDEN) // @Test // void testUnmatchedPlayersAndBoxes() { // final var invalidMap = \"\"\" // 233 // ###### // #A..@# // #...@# // #a.b@# // #.a.@# // #..a.# // ###### // \"\"\"; // assertThrowsExactly(IllegalArgumentException.class, () -> TestHelper.parseGameMap(invalidMap)); // }",
        "C": "public TerminalRenderingEngine(PrintStream outputSteam) { this.outputSteam = outputSteam; }",
        "label": "P"
    },
    "3286": {
        "dataset": "COMP 3021",
        "project": "yyubv",
        "bug_id": "18",
        "T": "void testManyPlayersMap() { final var manyPlayersMap = \"\"\" 233 ###### #A.P@@# #vCB@@# #.cpD@# #Ga.d@# #g.bV@# ###### \"\"\"; final var gameMap = TestHelper.parseGameMap(manyPlayersMap); final var playerIds = gameMap.getPlayerIds(); final var expectedIds = new HashSet<>(Arrays.asList( 0, 'P' - 'A', 'C' - 'A', 'B' - 'A', 'D' - 'A', 'G' - 'A', 'V' - 'A' )); }",
        "C": "public Set<Integer> getPlayerIds() { Set<Integer> idSet = new HashSet<>(); for (int i = 0; i < maxHeight; i ++) { for (int j = 0; j < maxWidth; j ++) { var currEntity = getEntity(new Position(j, i)); if (currEntity instanceof Player) { idSet.add(((Player) currEntity).getId()); } } } return idSet; }",
        "label": "P"
    },
    "3287": {
        "dataset": "COMP 3021",
        "project": "yyubv",
        "bug_id": "19",
        "T": "void testHeightForNonRectangularMap() { final var gameMap = TestHelper.parseGameMap(nonRectangularMap); }",
        "C": "",
        "label": "P"
    },
    "3288": {
        "dataset": "COMP 3021",
        "project": "yyubv",
        "bug_id": "20",
        "T": "void testDuplicatedPlayers() { final var invalidMap = \"\"\" 233 ###### #A..@# #..A@# #....# #.a..# #..b.# ###### \"\"\"; }",
        "C": "",
        "label": "P"
    },
    "3289": {
        "dataset": "COMP 3021",
        "project": "yyubv",
        "bug_id": "21",
        "T": "void testParseMapWithoutUndoLimit() { final var invalidMap = String.join(\"\\n\", rectangularMap.lines().skip(1).toList()); }",
        "C": "",
        "label": "P"
    },
    "3290": {
        "dataset": "COMP 3021",
        "project": "yyubv",
        "bug_id": "22",
        "T": "void testInsufficientDestinations() { final var invalidMap = \"\"\" 233 ###### #A..@# #...@# #a...# #.a..# #..a.# ###### \"\"\"; }",
        "C": "",
        "label": "P"
    },
    "3291": {
        "dataset": "COMP 3021",
        "project": "yyubv",
        "bug_id": "23",
        "T": "void testSuperLargeMap() { try { new GameMap(Integer.MAX_VALUE, Integer.MAX_VALUE, Collections.emptySet(), 0); } catch (OutOfMemoryError e) { throw new RuntimeException(e); } }); }",
        "C": "public GameMap(int maxWidth, int maxHeight, Set<Position> destinations, int undoLimit) { this.maxWidth = maxWidth; this.maxHeight = maxHeight; this.destinations = destinations; this.undoLimit = undoLimit; this.mapMat = new Entity[maxHeight][maxWidth]; } public TerminalRenderingEngine(PrintStream outputSteam) { this.outputSteam = outputSteam; }",
        "label": "F"
    },
    "3292": {
        "dataset": "COMP 3021",
        "project": "yyubv",
        "bug_id": "24",
        "T": "void testInvalidUndoLimit() { final var invalidMap = \"\"\" -233 ###### #A..@# #...@# #a.b@# #.a.@# #..a.# ###### \"\"\"; }",
        "C": "",
        "label": "P"
    },
    "3293": {
        "dataset": "COMP 3021",
        "project": "yyubv",
        "bug_id": "25",
        "T": "void testEmptyMap() { final var invalidMap = \"\"; }",
        "C": "",
        "label": "P"
    },
    "3294": {
        "dataset": "COMP 3021",
        "project": "yyubv",
        "bug_id": "26",
        "T": "void testMove(String input, String name, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); } private InputStream fixValueStream(String content) { final var bytes = content.getBytes(StandardCharsets.UTF_8); return new ByteArrayInputStream(bytes); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine(); String lowerString = inputLine.toLowerCase(); switch (lowerString) { case (EXIT_COMMAND_TEXT) -> { return new Exit(-1); } case (\"u\") -> { return new Undo(-1); } case (\"a\") -> { return new Move.Left(0); } case (\"s\") -> { return new Move.Down(0); } case (\"w\") -> { return new Move.Up(0); } case (\"d\") -> { return new Move.Right(0); } case (\"h\") -> { return new Move.Left(1); } case (\"j\") -> { return new Move.Down(1); } case (\"k\") -> { return new Move.Up(1); } case (\"l\") -> { return new Move.Right(1); } default -> { return new InvalidInput(-1, INVALID_INPUT_MESSAGE); } } }",
        "label": "P"
    },
    "3295": {
        "dataset": "COMP 3021",
        "project": "yyubv",
        "bug_id": "27",
        "T": "void testMove(String input, String name, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); } private InputStream fixValueStream(String content) { final var bytes = content.getBytes(StandardCharsets.UTF_8); return new ByteArrayInputStream(bytes); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine(); String lowerString = inputLine.toLowerCase(); switch (lowerString) { case (EXIT_COMMAND_TEXT) -> { return new Exit(-1); } case (\"u\") -> { return new Undo(-1); } case (\"a\") -> { return new Move.Left(0); } case (\"s\") -> { return new Move.Down(0); } case (\"w\") -> { return new Move.Up(0); } case (\"d\") -> { return new Move.Right(0); } case (\"h\") -> { return new Move.Left(1); } case (\"j\") -> { return new Move.Down(1); } case (\"k\") -> { return new Move.Up(1); } case (\"l\") -> { return new Move.Right(1); } default -> { return new InvalidInput(-1, INVALID_INPUT_MESSAGE); } } }",
        "label": "P"
    },
    "3296": {
        "dataset": "COMP 3021",
        "project": "yyubv",
        "bug_id": "28",
        "T": "void testMove(String input, String name, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); } private InputStream fixValueStream(String content) { final var bytes = content.getBytes(StandardCharsets.UTF_8); return new ByteArrayInputStream(bytes); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine(); String lowerString = inputLine.toLowerCase(); switch (lowerString) { case (EXIT_COMMAND_TEXT) -> { return new Exit(-1); } case (\"u\") -> { return new Undo(-1); } case (\"a\") -> { return new Move.Left(0); } case (\"s\") -> { return new Move.Down(0); } case (\"w\") -> { return new Move.Up(0); } case (\"d\") -> { return new Move.Right(0); } case (\"h\") -> { return new Move.Left(1); } case (\"j\") -> { return new Move.Down(1); } case (\"k\") -> { return new Move.Up(1); } case (\"l\") -> { return new Move.Right(1); } default -> { return new InvalidInput(-1, INVALID_INPUT_MESSAGE); } } }",
        "label": "P"
    },
    "3297": {
        "dataset": "COMP 3021",
        "project": "yyubv",
        "bug_id": "29",
        "T": "void testMove(String input, String name, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); } private InputStream fixValueStream(String content) { final var bytes = content.getBytes(StandardCharsets.UTF_8); return new ByteArrayInputStream(bytes); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine(); String lowerString = inputLine.toLowerCase(); switch (lowerString) { case (EXIT_COMMAND_TEXT) -> { return new Exit(-1); } case (\"u\") -> { return new Undo(-1); } case (\"a\") -> { return new Move.Left(0); } case (\"s\") -> { return new Move.Down(0); } case (\"w\") -> { return new Move.Up(0); } case (\"d\") -> { return new Move.Right(0); } case (\"h\") -> { return new Move.Left(1); } case (\"j\") -> { return new Move.Down(1); } case (\"k\") -> { return new Move.Up(1); } case (\"l\") -> { return new Move.Right(1); } default -> { return new InvalidInput(-1, INVALID_INPUT_MESSAGE); } } }",
        "label": "P"
    },
    "3298": {
        "dataset": "COMP 3021",
        "project": "yyubv",
        "bug_id": "30",
        "T": "void testMove(String input, String name, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); } private InputStream fixValueStream(String content) { final var bytes = content.getBytes(StandardCharsets.UTF_8); return new ByteArrayInputStream(bytes); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine(); String lowerString = inputLine.toLowerCase(); switch (lowerString) { case (EXIT_COMMAND_TEXT) -> { return new Exit(-1); } case (\"u\") -> { return new Undo(-1); } case (\"a\") -> { return new Move.Left(0); } case (\"s\") -> { return new Move.Down(0); } case (\"w\") -> { return new Move.Up(0); } case (\"d\") -> { return new Move.Right(0); } case (\"h\") -> { return new Move.Left(1); } case (\"j\") -> { return new Move.Down(1); } case (\"k\") -> { return new Move.Up(1); } case (\"l\") -> { return new Move.Right(1); } default -> { return new InvalidInput(-1, INVALID_INPUT_MESSAGE); } } }",
        "label": "P"
    },
    "3299": {
        "dataset": "COMP 3021",
        "project": "yyubv",
        "bug_id": "31",
        "T": "void testMove(String input, String name, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); } private InputStream fixValueStream(String content) { final var bytes = content.getBytes(StandardCharsets.UTF_8); return new ByteArrayInputStream(bytes); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine(); String lowerString = inputLine.toLowerCase(); switch (lowerString) { case (EXIT_COMMAND_TEXT) -> { return new Exit(-1); } case (\"u\") -> { return new Undo(-1); } case (\"a\") -> { return new Move.Left(0); } case (\"s\") -> { return new Move.Down(0); } case (\"w\") -> { return new Move.Up(0); } case (\"d\") -> { return new Move.Right(0); } case (\"h\") -> { return new Move.Left(1); } case (\"j\") -> { return new Move.Down(1); } case (\"k\") -> { return new Move.Up(1); } case (\"l\") -> { return new Move.Right(1); } default -> { return new InvalidInput(-1, INVALID_INPUT_MESSAGE); } } }",
        "label": "P"
    },
    "3300": {
        "dataset": "COMP 3021",
        "project": "yyubv",
        "bug_id": "32",
        "T": "void testMove(String input, String name, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); } private InputStream fixValueStream(String content) { final var bytes = content.getBytes(StandardCharsets.UTF_8); return new ByteArrayInputStream(bytes); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine(); String lowerString = inputLine.toLowerCase(); switch (lowerString) { case (EXIT_COMMAND_TEXT) -> { return new Exit(-1); } case (\"u\") -> { return new Undo(-1); } case (\"a\") -> { return new Move.Left(0); } case (\"s\") -> { return new Move.Down(0); } case (\"w\") -> { return new Move.Up(0); } case (\"d\") -> { return new Move.Right(0); } case (\"h\") -> { return new Move.Left(1); } case (\"j\") -> { return new Move.Down(1); } case (\"k\") -> { return new Move.Up(1); } case (\"l\") -> { return new Move.Right(1); } default -> { return new InvalidInput(-1, INVALID_INPUT_MESSAGE); } } }",
        "label": "P"
    },
    "3301": {
        "dataset": "COMP 3021",
        "project": "yyubv",
        "bug_id": "33",
        "T": "void testMove(String input, String name, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); } private InputStream fixValueStream(String content) { final var bytes = content.getBytes(StandardCharsets.UTF_8); return new ByteArrayInputStream(bytes); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine(); String lowerString = inputLine.toLowerCase(); switch (lowerString) { case (EXIT_COMMAND_TEXT) -> { return new Exit(-1); } case (\"u\") -> { return new Undo(-1); } case (\"a\") -> { return new Move.Left(0); } case (\"s\") -> { return new Move.Down(0); } case (\"w\") -> { return new Move.Up(0); } case (\"d\") -> { return new Move.Right(0); } case (\"h\") -> { return new Move.Left(1); } case (\"j\") -> { return new Move.Down(1); } case (\"k\") -> { return new Move.Up(1); } case (\"l\") -> { return new Move.Right(1); } default -> { return new InvalidInput(-1, INVALID_INPUT_MESSAGE); } } }",
        "label": "P"
    },
    "3302": {
        "dataset": "COMP 3021",
        "project": "yyubv",
        "bug_id": "34",
        "T": "void testUndo(String input, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine(); String lowerString = inputLine.toLowerCase(); switch (lowerString) { case (EXIT_COMMAND_TEXT) -> { return new Exit(-1); } case (\"u\") -> { return new Undo(-1); } case (\"a\") -> { return new Move.Left(0); } case (\"s\") -> { return new Move.Down(0); } case (\"w\") -> { return new Move.Up(0); } case (\"d\") -> { return new Move.Right(0); } case (\"h\") -> { return new Move.Left(1); } case (\"j\") -> { return new Move.Down(1); } case (\"k\") -> { return new Move.Up(1); } case (\"l\") -> { return new Move.Right(1); } default -> { return new InvalidInput(-1, INVALID_INPUT_MESSAGE); } } }",
        "label": "P"
    },
    "3303": {
        "dataset": "COMP 3021",
        "project": "yyubv",
        "bug_id": "35",
        "T": "void testInvalidInput() { final var inputStream = fixValueStream(\"blah blah\"); final var inputEngine = new TerminalInputEngine(inputStream); final var action = inputEngine.fetchAction(); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine(); String lowerString = inputLine.toLowerCase(); switch (lowerString) { case (EXIT_COMMAND_TEXT) -> { return new Exit(-1); } case (\"u\") -> { return new Undo(-1); } case (\"a\") -> { return new Move.Left(0); } case (\"s\") -> { return new Move.Down(0); } case (\"w\") -> { return new Move.Up(0); } case (\"d\") -> { return new Move.Right(0); } case (\"h\") -> { return new Move.Left(1); } case (\"j\") -> { return new Move.Down(1); } case (\"k\") -> { return new Move.Up(1); } case (\"l\") -> { return new Move.Right(1); } default -> { return new InvalidInput(-1, INVALID_INPUT_MESSAGE); } } }",
        "label": "P"
    },
    "3304": {
        "dataset": "COMP 3021",
        "project": "yyubv",
        "bug_id": "36",
        "T": "void testUndoWhenThereIsNoMove() { final var gameState = new GameState(TestHelper.parseGameMap(\"\"\" 233 ###### #A.a@# #..a@# ###### \"\"\" )); gameState.undo(); } private Entity generateEntity(int key) { return switch (key % 4) { case 0 -> new Box(0); case 1 -> new Empty(); case 2 -> new Player(0); case 3 -> new Wall(); default -> throw new ShouldNotReachException(); }; }",
        "C": "public GameState(@NotNull GameMap map) { this.map = new GameMap(map); this.initMap = new GameMap(map); this.undoQuota = map.getUndoLimit(); this.historyMapStack = new Stack<>(); } public void undo() { if (historyMapStack.size() > 0 && undoQuota.get() > 0) { undoQuota = Optional.of(undoQuota.get()-1); } if (historyMapStack.size() > 0) { historyMapStack.pop(); } if (historyMapStack.size() > 0) { map = new GameMap(historyMapStack.peek()); } else { map = new GameMap(initMap); } } /** * Get the maximum width of the game map. * This should be the same as that in {@link GameMap} public TerminalRenderingEngine(PrintStream outputSteam) { this.outputSteam = outputSteam; } public Box(int playerId) { this.playerId = playerId; } public Player(int id) { this.id = id; } public ShouldNotReachException() { super(\"This branch should not be reached.\"); }",
        "label": "P"
    },
    "3305": {
        "dataset": "COMP 3021",
        "project": "yyubv",
        "bug_id": "37",
        "T": "void testGetUndoUnlimited() { final var gameState = new GameState(TestHelper.parseGameMap(\"\"\" -1 ###### #.Aa@# #..a@# ###### \"\"\" )); }",
        "C": "public GameState(@NotNull GameMap map) { this.map = new GameMap(map); this.initMap = new GameMap(map); this.undoQuota = map.getUndoLimit(); this.historyMapStack = new Stack<>(); }",
        "label": "P"
    },
    "3306": {
        "dataset": "COMP 3021",
        "project": "yyubv",
        "bug_id": "38",
        "T": "void testMapCopying() { final var maxWidth = 2333; final var maxHeight = 2333; final var random = new Random(); final var randomEntities = Stream.generate(() -> Position.of(random.nextInt(maxWidth), random.nextInt(maxHeight))) .distinct() .limit(100) .collect(Collectors.toMap(Function.identity(), it -> generateEntity(it.x()))); final var firstPos = randomEntities.keySet().stream().findFirst(); final var gameMap = new GameMap(maxWidth, maxHeight, Collections.singleton(firstPos.get()), 233); randomEntities.forEach(gameMap::putEntity); final var gameState = new GameState(gameMap); final var randomPosition = randomEntities.keySet().stream().findAny(); gameMap.putEntity(randomPosition.get(), new Empty()); randomEntities.forEach((p, e) -> assertEquals(e, gameState.getEntity(p))); }",
        "C": "public static @NotNull Position of(int x, int y) { return new Position(x, y); } public GameMap(int maxWidth, int maxHeight, Set<Position> destinations, int undoLimit) { this.maxWidth = maxWidth; this.maxHeight = maxHeight; this.destinations = destinations; this.undoLimit = undoLimit; this.mapMat = new Entity[maxHeight][maxWidth]; } public GameState(@NotNull GameMap map) { this.map = new GameMap(map); this.initMap = new GameMap(map); this.undoQuota = map.getUndoLimit(); this.historyMapStack = new Stack<>(); } public void putEntity(Position position, Entity entity) { mapMat[position.y()][position.x()] = entity; } public @Nullable Entity getEntity(@NotNull Position position) { return map.getEntity(position); } /** * Get all box destination positions as a set in the game map. * This should be the same as that in {@link GameMap}",
        "label": "P"
    },
    "3307": {
        "dataset": "COMP 3021",
        "project": "yyubv",
        "bug_id": "39",
        "T": "void testUndoWhenThereIsMoveButNoCheckpoint() { final var gameState = new GameState(TestHelper.parseGameMap(\"\"\" 233 ###### #A.a@# #..a@# ###### \"\"\" )); gameState.move(Position.of(1, 1), Position.of(2, 1)); gameState.undo(); }",
        "C": "public GameState(@NotNull GameMap map) { this.map = new GameMap(map); this.initMap = new GameMap(map); this.undoQuota = map.getUndoLimit(); this.historyMapStack = new Stack<>(); } public void move(Position from, Position to) { Entity fromObj = map.getEntity(from); map.putEntity(from, new Empty()); map.putEntity(to, fromObj); } /** * Record a checkpoint of the game state, including: * <li>All current positions of entities in the game map.</li> * <li>Current undo quota</li> * <p> * Checkpoint is used in {@link GameState#undo()} public static @NotNull Position of(int x, int y) { return new Position(x, y); } public void undo() { if (historyMapStack.size() > 0 && undoQuota.get() > 0) { undoQuota = Optional.of(undoQuota.get()-1); } if (historyMapStack.size() > 0) { historyMapStack.pop(); } if (historyMapStack.size() > 0) { map = new GameMap(historyMapStack.peek()); } else { map = new GameMap(initMap); } } /** * Get the maximum width of the game map. * This should be the same as that in {@link GameMap}",
        "label": "P"
    },
    "3308": {
        "dataset": "COMP 3021",
        "project": "yyubv",
        "bug_id": "40",
        "T": "void testGameExit() { final var gameState = mock(GameState.class); final var inputEngine = mock(TerminalInputEngine.class); final var renderingEngine = mock(TerminalRenderingEngine.class); when(gameState.isWin()).thenReturn(false, false, false); when(inputEngine.fetchAction()) .thenReturn(new InvalidInput(0, \"\"), new InvalidInput(0, \"\"), new Exit(0)); final var game = new TerminalSokobanGame(gameState, inputEngine, renderingEngine); game.run(); verify(renderingEngine, atLeastOnce()).message(any()); }",
        "C": "public InvalidInput(int initiator, @NotNull String message) { super(initiator); this.message = message; } public Exit(int initiator) { super(initiator); } public TerminalSokobanGame(GameState gameState, TerminalInputEngine inputEngine, TerminalRenderingEngine renderingEngine) { super(gameState); this.inputEngine = inputEngine; this.renderingEngine = renderingEngine; if (gameState.getAllPlayerPositions().size() > 2) { throw new IllegalArgumentException(); } } public void run() { renderingEngine.message(GAME_READY_MESSAGE); while (!shouldStop()) { renderingEngine.render(state); String quotaStr; if (state.getUndoQuota().isPresent()) { quotaStr = String.format(UNDO_QUOTA_TEMPLATE, state.getUndoQuota().get()); } else { quotaStr = UNDO_QUOTA_UNLIMITED; } renderingEngine.message(quotaStr); Action newAct = inputEngine.fetchAction(); ActionResult res = processAction(newAct); if (res instanceof ActionResult.Failed) { renderingEngine.message(((ActionResult.Failed)(res)).getReason()); } } renderingEngine.render(state); renderingEngine.message(GAME_EXIT_MESSAGE); if (state.isWin()) { renderingEngine.message(WIN_MESSAGE); } }",
        "label": "P"
    },
    "3309": {
        "dataset": "COMP 3021",
        "project": "yyubv",
        "bug_id": "41",
        "T": "void testGameWin() { final var gameState = mock(GameState.class); final var inputEngine = mock(TerminalInputEngine.class); final var renderingEngine = mock(TerminalRenderingEngine.class); when(gameState.isWin()).thenReturn(false, false, false, true); when(inputEngine.fetchAction()) .thenReturn(new InvalidInput(0, \"\")); final var game = new TerminalSokobanGame(gameState, inputEngine, renderingEngine); game.run(); verify(gameState, atLeastOnce()).isWin(); verify(renderingEngine, atLeastOnce()).message(any()); }",
        "C": "public InvalidInput(int initiator, @NotNull String message) { super(initiator); this.message = message; } public TerminalSokobanGame(GameState gameState, TerminalInputEngine inputEngine, TerminalRenderingEngine renderingEngine) { super(gameState); this.inputEngine = inputEngine; this.renderingEngine = renderingEngine; if (gameState.getAllPlayerPositions().size() > 2) { throw new IllegalArgumentException(); } } public void run() { renderingEngine.message(GAME_READY_MESSAGE); while (!shouldStop()) { renderingEngine.render(state); String quotaStr; if (state.getUndoQuota().isPresent()) { quotaStr = String.format(UNDO_QUOTA_TEMPLATE, state.getUndoQuota().get()); } else { quotaStr = UNDO_QUOTA_UNLIMITED; } renderingEngine.message(quotaStr); Action newAct = inputEngine.fetchAction(); ActionResult res = processAction(newAct); if (res instanceof ActionResult.Failed) { renderingEngine.message(((ActionResult.Failed)(res)).getReason()); } } renderingEngine.render(state); renderingEngine.message(GAME_EXIT_MESSAGE); if (state.isWin()) { renderingEngine.message(WIN_MESSAGE); } }",
        "label": "P"
    },
    "3310": {
        "dataset": "COMP 3021",
        "project": "yyubv",
        "bug_id": "42",
        "T": "void testMoreThanTwoPlayers() { final var gameState = mock(GameState.class); final var inputEngine = mock(TerminalInputEngine.class); final var renderingEngine = mock(TerminalRenderingEngine.class); when(gameState.getAllPlayerPositions()).thenReturn(new HashSet<>(Arrays.asList(Position.of(1, 1), Position.of(1, 2), Position.of(1, 3)))); }",
        "C": "public static @NotNull Position of(int x, int y) { return new Position(x, y); }",
        "label": "P"
    },
    "3311": {
        "dataset": "COMP 3021",
        "project": "ttleeab",
        "bug_id": "0",
        "T": "void moveUp() { Position.of(233, 232), new Move.Up(-1).nextPosition(pos) ); }",
        "C": "public static @NotNull Position of(int x, int y) { return new Position(x, y); } public Up(int initiator) { super(initiator); }",
        "label": "P"
    },
    "3312": {
        "dataset": "COMP 3021",
        "project": "ttleeab",
        "bug_id": "1",
        "T": "void moveDown() { Position.of(233, 234), new Move.Down(-1).nextPosition(pos) ); }",
        "C": "public static @NotNull Position of(int x, int y) { return new Position(x, y); } public Down(int initiator) { super(initiator); }",
        "label": "P"
    },
    "3313": {
        "dataset": "COMP 3021",
        "project": "ttleeab",
        "bug_id": "2",
        "T": "void moveRight() { Position.of(234, 233), new Move.Right(-1).nextPosition(pos) ); }",
        "C": "public static @NotNull Position of(int x, int y) { return new Position(x, y); } public Right(int initiator) { super(initiator); }",
        "label": "P"
    },
    "3314": {
        "dataset": "COMP 3021",
        "project": "ttleeab",
        "bug_id": "3",
        "T": "void testExceedingUndoQuota() { final var gameState = mock(GameState.class); when(gameState.getPlayerPositionById(anyInt())).thenReturn(Position.of(0, 0)); when(gameState.getUndoQuota()).thenReturn(Optional.of(0)); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Undo(0)); }",
        "C": "public Undo(int initiator) { super(initiator); }",
        "label": "P"
    },
    "3315": {
        "dataset": "COMP 3021",
        "project": "ttleeab",
        "bug_id": "4",
        "T": "void testExit() { final var gameState = mock(GameState.class); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Exit(0)); }",
        "C": "public Exit(int initiator) { super(initiator); }",
        "label": "F"
    },
    "3316": {
        "dataset": "COMP 3021",
        "project": "ttleeab",
        "bug_id": "5",
        "T": "void testUndoUnlimited() { final var gameState = mock(GameState.class); when(gameState.getPlayerPositionById(anyInt())).thenReturn(Position.of(0, 0)); when(gameState.getUndoQuota()).thenReturn(Optional.empty()); final var game = new SokobanGameForTesting(gameState); for (int i = 0; i < 10000; i++) { final var result = game.feedActionForProcessing(new Undo(0)); } verify(gameState, times(10000)).undo(); }",
        "C": "public TerminalRenderingEngine(PrintStream outputSteam) { this.outputSteam = outputSteam; } public Undo(int initiator) { super(initiator); }",
        "label": "P"
    },
    "3317": {
        "dataset": "COMP 3021",
        "project": "ttleeab",
        "bug_id": "6",
        "T": "void testPushOtherPlayerBox() { String mapText = \"\"\" 233 ###### #AB.@# #b.a.# #@...# ###### \"\"\"; final var testMap = TestHelper.parseGameMap(mapText); final var gameState = spy(new GameState(testMap)); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Move.Down(0)); verify(gameState, never()).move(any(), any()); }",
        "C": "public GameState(@NotNull GameMap map) { // TODO this.map = map; this.undoQuota = map.getUndoLimit(); this.state = new GameMap(map); } public Down(int initiator) { super(initiator); }",
        "label": "P"
    },
    "3318": {
        "dataset": "COMP 3021",
        "project": "ttleeab",
        "bug_id": "7",
        "T": "void testMoveNonExistingPlayer() { String mapText = \"\"\" 233 ###### #A..@# #a...# ##...# ###### \"\"\"; final var testMap = TestHelper.parseGameMap(mapText); final var gameState = spy(new GameState(testMap)); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Move.Down(23)); }",
        "C": "public GameState(@NotNull GameMap map) { // TODO this.map = map; this.undoQuota = map.getUndoLimit(); this.state = new GameMap(map); } public Down(int initiator) { super(initiator); }",
        "label": "P"
    },
    "3319": {
        "dataset": "COMP 3021",
        "project": "ttleeab",
        "bug_id": "8",
        "T": "void testCheckpointWhenNeed() { final var gameState = spy(new GameState(TestHelper.parseGameMap(\"\"\" 233 ###### #.Aa@# #..a@# ###### \"\"\" ))); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Move.Right(0)); verify(gameState, times(1)).checkpoint(); }",
        "C": "public GameState(@NotNull GameMap map) { // TODO this.map = map; this.undoQuota = map.getUndoLimit(); this.state = new GameMap(map); } public Right(int initiator) { super(initiator); }",
        "label": "P"
    },
    "3320": {
        "dataset": "COMP 3021",
        "project": "ttleeab",
        "bug_id": "9",
        "T": "void testPushBoxAgainstWall() { String mapText = \"\"\" 233 ###### #A..@# #a...# ##...# ###### \"\"\"; final var testMap = TestHelper.parseGameMap(mapText); final var gameState = spy(new GameState(testMap)); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Move.Down(0)); verify(gameState, never()).move(any(), any()); }",
        "C": "public GameState(@NotNull GameMap map) { // TODO this.map = map; this.undoQuota = map.getUndoLimit(); this.state = new GameMap(map); } public Down(int initiator) { super(initiator); }",
        "label": "P"
    },
    "3321": {
        "dataset": "COMP 3021",
        "project": "ttleeab",
        "bug_id": "10",
        "T": "void testCheckpointWhenNotNeed() { final var gameState = spy(new GameState(TestHelper.parseGameMap(\"\"\" 233 ###### #A.a@# #..a@# ###### \"\"\" ))); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Move.Right(0)); verify(gameState, never()).checkpoint(); } private static class SokobanGameForTesting extends AbstractSokobanGame { protected SokobanGameForTesting(GameState gameState) { super(gameState); } @Override public void run() { } public ActionResult feedActionForProcessing(Action action) { return processAction(action); } }",
        "C": "public GameState(@NotNull GameMap map) { // TODO this.map = map; this.undoQuota = map.getUndoLimit(); this.state = new GameMap(map); } public Right(int initiator) { super(initiator); } public void run() { // TODO this.renderingEngine.message(StringResources.GAME_READY_MESSAGE); this.printMap(); while (!this.shouldStop()) { var act = this.inputEngine.fetchAction(); if (act instanceof Exit) { this.requestExit = true; } var actResult = this.processAction(act); if (actResult instanceof ActionResult.Failed) { this.renderingEngine.message(((ActionResult.Failed) actResult).getReason()); } this.printMap(); } this.renderingEngine.message(StringResources.GAME_EXIT_MESSAGE); if (this.state.isWin()) { this.renderingEngine.message(StringResources.WIN_MESSAGE); } //System.exit(0); } protected ActionResult processAction(@NotNull Action action) { // TODO return switch (action) { case Exit e-> new ActionResult.Success(e); case Undo u-> { if (this.state.getUndoQuota().isEmpty()) { this.state.undo(); yield new ActionResult.Success(u); } else if (this.state.getUndoQuota().isPresent()) { if (this.state.getUndoQuota().get() >= 1) { this.state.undo(); yield new ActionResult.Success(u); } else { yield new ActionResult.Failed(u, StringResources.UNDO_QUOTA_RUN_OUT); } } else { yield new ActionResult.Failed(u, StringResources.UNDO_QUOTA_RUN_OUT); } } case Move m-> { if (m.getInitiator() > 1 || this.state.getPlayerPositionById(m.getInitiator()) == null) { yield new ActionResult.Failed(m, StringResources.PLAYER_NOT_FOUND); } Position currentpos = this.state.getPlayerPositionById(m.getInitiator()); Position nextpos = m.nextPosition(currentpos); yield switch (this.state.getEntity(nextpos)) { case Player ignored-> new ActionResult.Failed(m, \"You hit another player.\"); case Wall ignored-> new ActionResult.Failed(m, \"You hit a wall\"); case Empty ignored-> { this.state.move(currentpos, nextpos); yield new ActionResult.Success(m); } case Box b-> { if (b.getPlayerId() != m.getInitiator()) { yield new ActionResult.Failed(m,\"You cannot move other players' boxes.\"); } Position boxNextpos = switch(m) { case Move.Up u -> new Position(nextpos.x(), nextpos.y()-1); case Move.Down d -> new Position(nextpos.x(), nextpos.y()+1); case Move.Left l -> new Position(nextpos.x()-1, nextpos.y()); case Move.Right r -> new Position(nextpos.x()+1, nextpos.y()); }; if (this.state.getEntity(boxNextpos) instanceof Empty) { this.state.checkpoint(); this.state.move(nextpos, boxNextpos); this.state.move(currentpos, nextpos); yield new ActionResult.Success(m); } else { yield new ActionResult.Failed(m, \"Failed to push the box.\"); } } }; } case InvalidInput i-> new ActionResult.Failed(i, StringResources.INVALID_INPUT_MESSAGE); }; }",
        "label": "P"
    },
    "3322": {
        "dataset": "COMP 3021",
        "project": "ttleeab",
        "bug_id": "11",
        "T": "void testHitAnotherPlayer() { String mapText = \"\"\" 233 ###### #A..@# #B...# #ab.@# ###### \"\"\"; final var testMap = TestHelper.parseGameMap(mapText); final var gameState = spy(new GameState(testMap)); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Move.Down(0)); verify(gameState, never()).move(any(), any()); }",
        "C": "public GameState(@NotNull GameMap map) { // TODO this.map = map; this.undoQuota = map.getUndoLimit(); this.state = new GameMap(map); } public Down(int initiator) { super(initiator); }",
        "label": "P"
    },
    "3323": {
        "dataset": "COMP 3021",
        "project": "ttleeab",
        "bug_id": "12",
        "T": "void testUndoWithinQuota() { final var gameState = mock(GameState.class); when(gameState.getPlayerPositionById(anyInt())).thenReturn(Position.of(0, 0)); when(gameState.getUndoQuota()).thenReturn(Optional.of(1)); final var game = new SokobanGameForTesting(gameState); final var result = game.feedActionForProcessing(new Undo(0)); verify(gameState, times(1)).undo(); }",
        "C": "public Undo(int initiator) { super(initiator); }",
        "label": "P"
    },
    "3324": {
        "dataset": "COMP 3021",
        "project": "ttleeab",
        "bug_id": "13",
        "T": "void testInvalidInput() { final var game = new SokobanGameForTesting(mock(GameState.class)); final var message = String.valueOf(new Random().nextLong()); final var action = new InvalidInput(-1, message); final var result = game.feedActionForProcessing(action); }",
        "C": "public InvalidInput(int initiator, @NotNull String message) { super(initiator); this.message = message; }",
        "label": "P"
    },
    "3325": {
        "dataset": "COMP 3021",
        "project": "ttleeab",
        "bug_id": "14",
        "T": "void testUndoLimitParsing() { final var gameMap = TestHelper.parseGameMap(rectangularMap); }",
        "C": "",
        "label": "P"
    },
    "3326": {
        "dataset": "COMP 3021",
        "project": "ttleeab",
        "bug_id": "15",
        "T": "void testWidthForNonRectangularMap() { final var gameMap = TestHelper.parseGameMap(nonRectangularMap); }",
        "C": "",
        "label": "P"
    },
    "3327": {
        "dataset": "COMP 3021",
        "project": "ttleeab",
        "bug_id": "16",
        "T": "void testTwoPlayersMap() { final var twoPlayersMap = \"\"\" 233 ###### #A..@# #..B@# #....# #.a..# #..b.# ###### \"\"\"; final var gameMap = TestHelper.parseGameMap(twoPlayersMap); final var playerIds = gameMap.getPlayerIds(); final var expectedIds = new HashSet<Integer>(); expectedIds.add(0); expectedIds.add(1); }",
        "C": "public Set<Integer> getPlayerIds() { // TODO var result = new HashSet<Integer>(); for (var entry : this.playerPosition.keySet()) { result.add(entry - 'A'); } return result; }",
        "label": "P"
    },
    "3328": {
        "dataset": "COMP 3021",
        "project": "ttleeab",
        "bug_id": "17",
        "T": "void testMapWithoutPlayer() { final var invalidMap = \"\"\" 233 ### #.# ### \"\"\"; } // @Tag(TestKind.HIDDEN) // @Test // void testUnmatchedPlayersAndBoxes() { // final var invalidMap = \"\"\" // 233 // ###### // #A..@# // #...@# // #a.b@# // #.a.@# // #..a.# // ###### // \"\"\"; // assertThrowsExactly(IllegalArgumentException.class, () -> TestHelper.parseGameMap(invalidMap)); // }",
        "C": "public TerminalRenderingEngine(PrintStream outputSteam) { this.outputSteam = outputSteam; }",
        "label": "P"
    },
    "3329": {
        "dataset": "COMP 3021",
        "project": "ttleeab",
        "bug_id": "18",
        "T": "void testManyPlayersMap() { final var manyPlayersMap = \"\"\" 233 ###### #A.P@@# #vCB@@# #.cpD@# #Ga.d@# #g.bV@# ###### \"\"\"; final var gameMap = TestHelper.parseGameMap(manyPlayersMap); final var playerIds = gameMap.getPlayerIds(); final var expectedIds = new HashSet<>(Arrays.asList( 0, 'P' - 'A', 'C' - 'A', 'B' - 'A', 'D' - 'A', 'G' - 'A', 'V' - 'A' )); }",
        "C": "public Set<Integer> getPlayerIds() { // TODO var result = new HashSet<Integer>(); for (var entry : this.playerPosition.keySet()) { result.add(entry - 'A'); } return result; }",
        "label": "P"
    },
    "3330": {
        "dataset": "COMP 3021",
        "project": "ttleeab",
        "bug_id": "19",
        "T": "void testHeightForNonRectangularMap() { final var gameMap = TestHelper.parseGameMap(nonRectangularMap); }",
        "C": "",
        "label": "P"
    },
    "3331": {
        "dataset": "COMP 3021",
        "project": "ttleeab",
        "bug_id": "20",
        "T": "void testDuplicatedPlayers() { final var invalidMap = \"\"\" 233 ###### #A..@# #..A@# #....# #.a..# #..b.# ###### \"\"\"; }",
        "C": "",
        "label": "P"
    },
    "3332": {
        "dataset": "COMP 3021",
        "project": "ttleeab",
        "bug_id": "21",
        "T": "void testParseMapWithoutUndoLimit() { final var invalidMap = String.join(\"\\n\", rectangularMap.lines().skip(1).toList()); }",
        "C": "",
        "label": "P"
    },
    "3333": {
        "dataset": "COMP 3021",
        "project": "ttleeab",
        "bug_id": "22",
        "T": "void testInsufficientDestinations() { final var invalidMap = \"\"\" 233 ###### #A..@# #...@# #a...# #.a..# #..a.# ###### \"\"\"; }",
        "C": "",
        "label": "P"
    },
    "3334": {
        "dataset": "COMP 3021",
        "project": "ttleeab",
        "bug_id": "23",
        "T": "void testSuperLargeMap() { try { new GameMap(Integer.MAX_VALUE, Integer.MAX_VALUE, Collections.emptySet(), 0); } catch (OutOfMemoryError e) { throw new RuntimeException(e); } }); }",
        "C": "public GameMap(int maxWidth, int maxHeight, Set<Position> destinations, int undoLimit) { // TODO if (undoLimit < -1) { throw new IllegalArgumentException(); } this.width = maxWidth; this.height = maxHeight; this.destinations = destinations; if (undoLimit == -1) { this.undoLimit = Optional.empty(); } else if (undoLimit >= 0) { this.undoLimit = Optional.of(undoLimit); } else { throw new IllegalArgumentException(); } this.map = new Entity[maxHeight][maxWidth]; //throw new NotImplementedException(); } public TerminalRenderingEngine(PrintStream outputSteam) { this.outputSteam = outputSteam; }",
        "label": "F"
    },
    "3335": {
        "dataset": "COMP 3021",
        "project": "ttleeab",
        "bug_id": "24",
        "T": "void testInvalidUndoLimit() { final var invalidMap = \"\"\" -233 ###### #A..@# #...@# #a.b@# #.a.@# #..a.# ###### \"\"\"; }",
        "C": "",
        "label": "P"
    },
    "3336": {
        "dataset": "COMP 3021",
        "project": "ttleeab",
        "bug_id": "25",
        "T": "void testEmptyMap() { final var invalidMap = \"\"; }",
        "C": "",
        "label": "P"
    },
    "3337": {
        "dataset": "COMP 3021",
        "project": "ttleeab",
        "bug_id": "26",
        "T": "void testMove(String input, String name, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); } private InputStream fixValueStream(String content) { final var bytes = content.getBytes(StandardCharsets.UTF_8); return new ByteArrayInputStream(bytes); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine(); // TODO var inputUpper = inputLine.toUpperCase(); switch (inputUpper) { case \"A\": return new Move.Left(0); case \"S\": return new Move.Down(0); case \"W\": return new Move.Up(0); case \"D\": return new Move.Right(0); case \"H\": return new Move.Left(1); case \"J\": return new Move.Down(1); case \"K\": return new Move.Up(1); case \"L\": return new Move.Right(1); case \"U\": return new Undo(-1); case \"EXIT\": return new Exit(-1); default: return new InvalidInput(-1, StringResources.INVALID_INPUT_MESSAGE); } //throw new NotImplementedException(); }",
        "label": "P"
    },
    "3338": {
        "dataset": "COMP 3021",
        "project": "ttleeab",
        "bug_id": "27",
        "T": "void testMove(String input, String name, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); } private InputStream fixValueStream(String content) { final var bytes = content.getBytes(StandardCharsets.UTF_8); return new ByteArrayInputStream(bytes); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine(); // TODO var inputUpper = inputLine.toUpperCase(); switch (inputUpper) { case \"A\": return new Move.Left(0); case \"S\": return new Move.Down(0); case \"W\": return new Move.Up(0); case \"D\": return new Move.Right(0); case \"H\": return new Move.Left(1); case \"J\": return new Move.Down(1); case \"K\": return new Move.Up(1); case \"L\": return new Move.Right(1); case \"U\": return new Undo(-1); case \"EXIT\": return new Exit(-1); default: return new InvalidInput(-1, StringResources.INVALID_INPUT_MESSAGE); } //throw new NotImplementedException(); }",
        "label": "P"
    },
    "3339": {
        "dataset": "COMP 3021",
        "project": "ttleeab",
        "bug_id": "28",
        "T": "void testMove(String input, String name, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); } private InputStream fixValueStream(String content) { final var bytes = content.getBytes(StandardCharsets.UTF_8); return new ByteArrayInputStream(bytes); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine(); // TODO var inputUpper = inputLine.toUpperCase(); switch (inputUpper) { case \"A\": return new Move.Left(0); case \"S\": return new Move.Down(0); case \"W\": return new Move.Up(0); case \"D\": return new Move.Right(0); case \"H\": return new Move.Left(1); case \"J\": return new Move.Down(1); case \"K\": return new Move.Up(1); case \"L\": return new Move.Right(1); case \"U\": return new Undo(-1); case \"EXIT\": return new Exit(-1); default: return new InvalidInput(-1, StringResources.INVALID_INPUT_MESSAGE); } //throw new NotImplementedException(); }",
        "label": "P"
    },
    "3340": {
        "dataset": "COMP 3021",
        "project": "ttleeab",
        "bug_id": "29",
        "T": "void testMove(String input, String name, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); } private InputStream fixValueStream(String content) { final var bytes = content.getBytes(StandardCharsets.UTF_8); return new ByteArrayInputStream(bytes); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine(); // TODO var inputUpper = inputLine.toUpperCase(); switch (inputUpper) { case \"A\": return new Move.Left(0); case \"S\": return new Move.Down(0); case \"W\": return new Move.Up(0); case \"D\": return new Move.Right(0); case \"H\": return new Move.Left(1); case \"J\": return new Move.Down(1); case \"K\": return new Move.Up(1); case \"L\": return new Move.Right(1); case \"U\": return new Undo(-1); case \"EXIT\": return new Exit(-1); default: return new InvalidInput(-1, StringResources.INVALID_INPUT_MESSAGE); } //throw new NotImplementedException(); }",
        "label": "P"
    },
    "3341": {
        "dataset": "COMP 3021",
        "project": "ttleeab",
        "bug_id": "30",
        "T": "void testMove(String input, String name, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); } private InputStream fixValueStream(String content) { final var bytes = content.getBytes(StandardCharsets.UTF_8); return new ByteArrayInputStream(bytes); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine(); // TODO var inputUpper = inputLine.toUpperCase(); switch (inputUpper) { case \"A\": return new Move.Left(0); case \"S\": return new Move.Down(0); case \"W\": return new Move.Up(0); case \"D\": return new Move.Right(0); case \"H\": return new Move.Left(1); case \"J\": return new Move.Down(1); case \"K\": return new Move.Up(1); case \"L\": return new Move.Right(1); case \"U\": return new Undo(-1); case \"EXIT\": return new Exit(-1); default: return new InvalidInput(-1, StringResources.INVALID_INPUT_MESSAGE); } //throw new NotImplementedException(); }",
        "label": "P"
    },
    "3342": {
        "dataset": "COMP 3021",
        "project": "ttleeab",
        "bug_id": "31",
        "T": "void testMove(String input, String name, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); } private InputStream fixValueStream(String content) { final var bytes = content.getBytes(StandardCharsets.UTF_8); return new ByteArrayInputStream(bytes); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine(); // TODO var inputUpper = inputLine.toUpperCase(); switch (inputUpper) { case \"A\": return new Move.Left(0); case \"S\": return new Move.Down(0); case \"W\": return new Move.Up(0); case \"D\": return new Move.Right(0); case \"H\": return new Move.Left(1); case \"J\": return new Move.Down(1); case \"K\": return new Move.Up(1); case \"L\": return new Move.Right(1); case \"U\": return new Undo(-1); case \"EXIT\": return new Exit(-1); default: return new InvalidInput(-1, StringResources.INVALID_INPUT_MESSAGE); } //throw new NotImplementedException(); }",
        "label": "P"
    },
    "3343": {
        "dataset": "COMP 3021",
        "project": "ttleeab",
        "bug_id": "32",
        "T": "void testMove(String input, String name, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); } private InputStream fixValueStream(String content) { final var bytes = content.getBytes(StandardCharsets.UTF_8); return new ByteArrayInputStream(bytes); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine(); // TODO var inputUpper = inputLine.toUpperCase(); switch (inputUpper) { case \"A\": return new Move.Left(0); case \"S\": return new Move.Down(0); case \"W\": return new Move.Up(0); case \"D\": return new Move.Right(0); case \"H\": return new Move.Left(1); case \"J\": return new Move.Down(1); case \"K\": return new Move.Up(1); case \"L\": return new Move.Right(1); case \"U\": return new Undo(-1); case \"EXIT\": return new Exit(-1); default: return new InvalidInput(-1, StringResources.INVALID_INPUT_MESSAGE); } //throw new NotImplementedException(); }",
        "label": "P"
    },
    "3344": {
        "dataset": "COMP 3021",
        "project": "ttleeab",
        "bug_id": "33",
        "T": "void testMove(String input, String name, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); } private InputStream fixValueStream(String content) { final var bytes = content.getBytes(StandardCharsets.UTF_8); return new ByteArrayInputStream(bytes); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine(); // TODO var inputUpper = inputLine.toUpperCase(); switch (inputUpper) { case \"A\": return new Move.Left(0); case \"S\": return new Move.Down(0); case \"W\": return new Move.Up(0); case \"D\": return new Move.Right(0); case \"H\": return new Move.Left(1); case \"J\": return new Move.Down(1); case \"K\": return new Move.Up(1); case \"L\": return new Move.Right(1); case \"U\": return new Undo(-1); case \"EXIT\": return new Exit(-1); default: return new InvalidInput(-1, StringResources.INVALID_INPUT_MESSAGE); } //throw new NotImplementedException(); }",
        "label": "P"
    },
    "3345": {
        "dataset": "COMP 3021",
        "project": "ttleeab",
        "bug_id": "34",
        "T": "void testUndo(String input, int playerId) { final var inputStreamU = fixValueStream(input.toUpperCase()); final var inputStreamL = fixValueStream(input.toLowerCase()); final var inputEngineU = new TerminalInputEngine(inputStreamU); final var inputEngineL = new TerminalInputEngine(inputStreamL); final var actionU = inputEngineU.fetchAction(); final var actionL = inputEngineL.fetchAction(); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine(); // TODO var inputUpper = inputLine.toUpperCase(); switch (inputUpper) { case \"A\": return new Move.Left(0); case \"S\": return new Move.Down(0); case \"W\": return new Move.Up(0); case \"D\": return new Move.Right(0); case \"H\": return new Move.Left(1); case \"J\": return new Move.Down(1); case \"K\": return new Move.Up(1); case \"L\": return new Move.Right(1); case \"U\": return new Undo(-1); case \"EXIT\": return new Exit(-1); default: return new InvalidInput(-1, StringResources.INVALID_INPUT_MESSAGE); } //throw new NotImplementedException(); }",
        "label": "P"
    },
    "3346": {
        "dataset": "COMP 3021",
        "project": "ttleeab",
        "bug_id": "35",
        "T": "void testInvalidInput() { final var inputStream = fixValueStream(\"blah blah\"); final var inputEngine = new TerminalInputEngine(inputStream); final var action = inputEngine.fetchAction(); }",
        "C": "public TerminalInputEngine(InputStream terminalStream) { this.terminalScanner = new Scanner(terminalStream); } public @NotNull Action fetchAction() { // This is an example showing how to read a line from the Scanner class. // Feel free to change it if you do not like it. final var inputLine = terminalScanner.nextLine(); // TODO var inputUpper = inputLine.toUpperCase(); switch (inputUpper) { case \"A\": return new Move.Left(0); case \"S\": return new Move.Down(0); case \"W\": return new Move.Up(0); case \"D\": return new Move.Right(0); case \"H\": return new Move.Left(1); case \"J\": return new Move.Down(1); case \"K\": return new Move.Up(1); case \"L\": return new Move.Right(1); case \"U\": return new Undo(-1); case \"EXIT\": return new Exit(-1); default: return new InvalidInput(-1, StringResources.INVALID_INPUT_MESSAGE); } //throw new NotImplementedException(); }",
        "label": "P"
    },
    "3347": {
        "dataset": "COMP 3021",
        "project": "ttleeab",
        "bug_id": "36",
        "T": "void testUndoWhenThereIsNoMove() { final var gameState = new GameState(TestHelper.parseGameMap(\"\"\" 233 ###### #A.a@# #..a@# ###### \"\"\" )); gameState.undo(); } private Entity generateEntity(int key) { return switch (key % 4) { case 0 -> new Box(0); case 1 -> new Empty(); case 2 -> new Player(0); case 3 -> new Wall(); default -> throw new ShouldNotReachException(); }; }",
        "C": "public GameState(@NotNull GameMap map) { // TODO this.map = map; this.undoQuota = map.getUndoLimit(); this.state = new GameMap(map); } public void undo() { // TODO if (this.checkpoint == null) { this.state = new GameMap(this.map); } else { var currentBoxPositions = this.state.getBoxPositions(); //var checkpointBoxPositions = this.checkpoint.state.getBoxPositions(); for (var entry : currentBoxPositions) { if (!(this.checkpoint.state.getEntity(entry) instanceof Box)) { this.state = new GameMap(this.checkpoint.map); if (this.undoQuota.isPresent()) { if (this.undoQuota.get() >= 1) { this.undoQuota = Optional.of(this.undoQuota.get()-1); } } this.checkpoint = this.checkpoint.checkpoint; return; } } //System.out.println(\"recursive\"); this.checkpoint = this.checkpoint.checkpoint; if (this.undoQuota.isPresent()) { if (this.undoQuota.get() >= 1) { this.undoQuota = Optional.of(this.undoQuota.get()-1); } } undo(); } } /** * Get the maximum width of the game map. * This should be the same as that in {@link GameMap} public TerminalRenderingEngine(PrintStream outputSteam) { this.outputSteam = outputSteam; } public Box(int playerId) { this.playerId = playerId; } public Player(int id) { this.id = id; } public ShouldNotReachException() { super(\"This branch should not be reached.\"); }",
        "label": "P"
    },
    "3348": {
        "dataset": "COMP 3021",
        "project": "ttleeab",
        "bug_id": "37",
        "T": "void testGetUndoUnlimited() { final var gameState = new GameState(TestHelper.parseGameMap(\"\"\" -1 ###### #.Aa@# #..a@# ###### \"\"\" )); }",
        "C": "public GameState(@NotNull GameMap map) { // TODO this.map = map; this.undoQuota = map.getUndoLimit(); this.state = new GameMap(map); }",
        "label": "P"
    },
    "3349": {
        "dataset": "COMP 3021",
        "project": "ttleeab",
        "bug_id": "38",
        "T": "void testMapCopying() { final var maxWidth = 2333; final var maxHeight = 2333; final var random = new Random(); final var randomEntities = Stream.generate(() -> Position.of(random.nextInt(maxWidth), random.nextInt(maxHeight))) .distinct() .limit(100) .collect(Collectors.toMap(Function.identity(), it -> generateEntity(it.x()))); final var firstPos = randomEntities.keySet().stream().findFirst(); final var gameMap = new GameMap(maxWidth, maxHeight, Collections.singleton(firstPos.get()), 233); randomEntities.forEach(gameMap::putEntity); final var gameState = new GameState(gameMap); final var randomPosition = randomEntities.keySet().stream().findAny(); gameMap.putEntity(randomPosition.get(), new Empty()); randomEntities.forEach((p, e) -> assertEquals(e, gameState.getEntity(p))); }",
        "C": "public static @NotNull Position of(int x, int y) { return new Position(x, y); } public GameMap(int maxWidth, int maxHeight, Set<Position> destinations, int undoLimit) { // TODO if (undoLimit < -1) { throw new IllegalArgumentException(); } this.width = maxWidth; this.height = maxHeight; this.destinations = destinations; if (undoLimit == -1) { this.undoLimit = Optional.empty(); } else if (undoLimit >= 0) { this.undoLimit = Optional.of(undoLimit); } else { throw new IllegalArgumentException(); } this.map = new Entity[maxHeight][maxWidth]; //throw new NotImplementedException(); } public GameState(@NotNull GameMap map) { // TODO this.map = map; this.undoQuota = map.getUndoLimit(); this.state = new GameMap(map); } public void putEntity(Position position, Entity entity) { // TODO if (entity == null) { return; } int x = position.x(); int y = position.y(); switch (entity) { case Box b -> { this.map[y][x] = new Box(b.getPlayerId()); } case Empty ignored -> { this.map[y][x] = new Empty(); } case Player p -> { this.map[y][x] = new Player(p.getId()); } case Wall ignored -> { this.map[y][x] = new Wall(); } } } public @Nullable Entity getEntity(@NotNull Position position) { // TODO return this.state.getEntity(position); } /** * Get all box destination positions as a set in the game map. * This should be the same as that in {@link GameMap}",
        "label": "F"
    },
    "3350": {
        "dataset": "COMP 3021",
        "project": "ttleeab",
        "bug_id": "39",
        "T": "void testUndoWhenThereIsMoveButNoCheckpoint() { final var gameState = new GameState(TestHelper.parseGameMap(\"\"\" 233 ###### #A.a@# #..a@# ###### \"\"\" )); gameState.move(Position.of(1, 1), Position.of(2, 1)); gameState.undo(); }",
        "C": "public GameState(@NotNull GameMap map) { // TODO this.map = map; this.undoQuota = map.getUndoLimit(); this.state = new GameMap(map); } public void move(Position from, Position to) { // TODO if (this.state.getEntity(from) instanceof Player p) { this.state.getPlayerPosition().put((char)(p.getId() + 'A'), to); } this.state.putEntity(to, this.state.getEntity(from)); this.state.putEntity(from, new Empty()); } /** * Record a checkpoint of the game state, including: * <li>All current positions of entities in the game map.</li> * <li>Current undo quota</li> * <p> * Checkpoint is used in {@link GameState#undo()} public static @NotNull Position of(int x, int y) { return new Position(x, y); } public void undo() { // TODO if (this.checkpoint == null) { this.state = new GameMap(this.map); } else { var currentBoxPositions = this.state.getBoxPositions(); //var checkpointBoxPositions = this.checkpoint.state.getBoxPositions(); for (var entry : currentBoxPositions) { if (!(this.checkpoint.state.getEntity(entry) instanceof Box)) { this.state = new GameMap(this.checkpoint.map); if (this.undoQuota.isPresent()) { if (this.undoQuota.get() >= 1) { this.undoQuota = Optional.of(this.undoQuota.get()-1); } } this.checkpoint = this.checkpoint.checkpoint; return; } } //System.out.println(\"recursive\"); this.checkpoint = this.checkpoint.checkpoint; if (this.undoQuota.isPresent()) { if (this.undoQuota.get() >= 1) { this.undoQuota = Optional.of(this.undoQuota.get()-1); } } undo(); } } /** * Get the maximum width of the game map. * This should be the same as that in {@link GameMap}",
        "label": "P"
    },
    "3351": {
        "dataset": "COMP 3021",
        "project": "ttleeab",
        "bug_id": "40",
        "T": "void testGameExit() { final var gameState = mock(GameState.class); final var inputEngine = mock(TerminalInputEngine.class); final var renderingEngine = mock(TerminalRenderingEngine.class); when(gameState.isWin()).thenReturn(false, false, false); when(inputEngine.fetchAction()) .thenReturn(new InvalidInput(0, \"\"), new InvalidInput(0, \"\"), new Exit(0)); final var game = new TerminalSokobanGame(gameState, inputEngine, renderingEngine); game.run(); verify(renderingEngine, atLeastOnce()).message(any()); }",
        "C": "public InvalidInput(int initiator, @NotNull String message) { super(initiator); this.message = message; } public Exit(int initiator) { super(initiator); } public TerminalSokobanGame(GameState gameState, TerminalInputEngine inputEngine, TerminalRenderingEngine renderingEngine) { super(gameState); this.inputEngine = inputEngine; this.renderingEngine = renderingEngine; // TODO // Check the number of players if (gameState.getAllPlayerPositions().size() > 2) { throw new IllegalArgumentException(); } //throw new NotImplementedException(); } public void run() { // TODO this.renderingEngine.message(StringResources.GAME_READY_MESSAGE); this.printMap(); while (!this.shouldStop()) { var act = this.inputEngine.fetchAction(); if (act instanceof Exit) { this.requestExit = true; } var actResult = this.processAction(act); if (actResult instanceof ActionResult.Failed) { this.renderingEngine.message(((ActionResult.Failed) actResult).getReason()); } this.printMap(); } this.renderingEngine.message(StringResources.GAME_EXIT_MESSAGE); if (this.state.isWin()) { this.renderingEngine.message(StringResources.WIN_MESSAGE); } //System.exit(0); }",
        "label": "P"
    },
    "3352": {
        "dataset": "COMP 3021",
        "project": "ttleeab",
        "bug_id": "41",
        "T": "void testGameWin() { final var gameState = mock(GameState.class); final var inputEngine = mock(TerminalInputEngine.class); final var renderingEngine = mock(TerminalRenderingEngine.class); when(gameState.isWin()).thenReturn(false, false, false, true); when(inputEngine.fetchAction()) .thenReturn(new InvalidInput(0, \"\")); final var game = new TerminalSokobanGame(gameState, inputEngine, renderingEngine); game.run(); verify(gameState, atLeastOnce()).isWin(); verify(renderingEngine, atLeastOnce()).message(any()); }",
        "C": "public InvalidInput(int initiator, @NotNull String message) { super(initiator); this.message = message; } public TerminalSokobanGame(GameState gameState, TerminalInputEngine inputEngine, TerminalRenderingEngine renderingEngine) { super(gameState); this.inputEngine = inputEngine; this.renderingEngine = renderingEngine; // TODO // Check the number of players if (gameState.getAllPlayerPositions().size() > 2) { throw new IllegalArgumentException(); } //throw new NotImplementedException(); } public void run() { // TODO this.renderingEngine.message(StringResources.GAME_READY_MESSAGE); this.printMap(); while (!this.shouldStop()) { var act = this.inputEngine.fetchAction(); if (act instanceof Exit) { this.requestExit = true; } var actResult = this.processAction(act); if (actResult instanceof ActionResult.Failed) { this.renderingEngine.message(((ActionResult.Failed) actResult).getReason()); } this.printMap(); } this.renderingEngine.message(StringResources.GAME_EXIT_MESSAGE); if (this.state.isWin()) { this.renderingEngine.message(StringResources.WIN_MESSAGE); } //System.exit(0); }",
        "label": "P"
    },
    "3353": {
        "dataset": "COMP 3021",
        "project": "ttleeab",
        "bug_id": "42",
        "T": "void testMoreThanTwoPlayers() { final var gameState = mock(GameState.class); final var inputEngine = mock(TerminalInputEngine.class); final var renderingEngine = mock(TerminalRenderingEngine.class); when(gameState.getAllPlayerPositions()).thenReturn(new HashSet<>(Arrays.asList(Position.of(1, 1), Position.of(1, 2), Position.of(1, 3)))); }",
        "C": "public static @NotNull Position of(int x, int y) { return new Position(x, y); }",
        "label": "P"
    }
}